// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package filenas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 文件系统通过标准的 NFS 协议为您提供文件存储服务，用于网络文件远程访问，通过管理控制台创建挂载地址后，即可按需在客户端中通过标准的 POSIX 接口对文件系统进行访问。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/filenas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := filenas.NewInstance(ctx, "FileNASInstanceDemo", &filenas.InstanceArgs{
//				FileSystemName: pulumi.String("FileNASInstanceDemo"),
//				Capacity: &filenas.InstanceCapacityArgs{
//					Total: pulumi.Float64(105),
//				},
//				ChargeType:     pulumi.String("PayAsYouGo"),
//				FileSystemType: pulumi.String("Extreme"),
//				ProtocolType:   pulumi.String("NFS"),
//				ZoneId:         pulumi.String("cn-beijing-x"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:filenas/instance:Instance example "file_system_id"
// ```
type Instance struct {
	pulumi.CustomResourceState

	// 缓存型性能信息。
	CachePerformance InstanceCachePerformanceOutput `pulumi:"cachePerformance"`
	// 文件系统容量。
	Capacity InstanceCapacityOutput `pulumi:"capacity"`
	// 计费类型，取值 PayAsYouGo，表示按量计费。
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// 创建时间
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// 描述信息。
	Description pulumi.StringOutput `pulumi:"description"`
	// 文件系统 ID。
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// 文件系统名称。
	FileSystemName pulumi.StringOutput `pulumi:"fileSystemName"`
	// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
	FileSystemType pulumi.StringOutput `pulumi:"fileSystemType"`
	// 所属项目，默认值为 default 项目。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
	// 快照数量
	SnapshotCount pulumi.IntOutput `pulumi:"snapshotCount"`
	// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// 文件系统状态
	Status pulumi.StringOutput `pulumi:"status"`
	// 存储类型，取值Standard，表示标准型。
	StorageType pulumi.StringOutput    `pulumi:"storageType"`
	Tags        InstanceTagArrayOutput `pulumi:"tags"`
	// 更新时间
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// 可用区 ID。
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
	// 可用区名称。
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChargeType == nil {
		return nil, errors.New("invalid value for required argument 'ChargeType'")
	}
	if args.FileSystemName == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemName'")
	}
	if args.FileSystemType == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemType'")
	}
	if args.ProtocolType == nil {
		return nil, errors.New("invalid value for required argument 'ProtocolType'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcenginecc:filenas/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcenginecc:filenas/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// 缓存型性能信息。
	CachePerformance *InstanceCachePerformance `pulumi:"cachePerformance"`
	// 文件系统容量。
	Capacity *InstanceCapacity `pulumi:"capacity"`
	// 计费类型，取值 PayAsYouGo，表示按量计费。
	ChargeType *string `pulumi:"chargeType"`
	// 创建时间
	CreateTime *string `pulumi:"createTime"`
	// 描述信息。
	Description *string `pulumi:"description"`
	// 文件系统 ID。
	FileSystemId *string `pulumi:"fileSystemId"`
	// 文件系统名称。
	FileSystemName *string `pulumi:"fileSystemName"`
	// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
	FileSystemType *string `pulumi:"fileSystemType"`
	// 所属项目，默认值为 default 项目。
	ProjectName *string `pulumi:"projectName"`
	// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
	ProtocolType *string `pulumi:"protocolType"`
	// 快照数量
	SnapshotCount *int `pulumi:"snapshotCount"`
	// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
	SnapshotId *string `pulumi:"snapshotId"`
	// 文件系统状态
	Status *string `pulumi:"status"`
	// 存储类型，取值Standard，表示标准型。
	StorageType *string       `pulumi:"storageType"`
	Tags        []InstanceTag `pulumi:"tags"`
	// 更新时间
	UpdateTime *string `pulumi:"updateTime"`
	// 可用区 ID。
	ZoneId *string `pulumi:"zoneId"`
	// 可用区名称。
	ZoneName *string `pulumi:"zoneName"`
}

type InstanceState struct {
	// 缓存型性能信息。
	CachePerformance InstanceCachePerformancePtrInput
	// 文件系统容量。
	Capacity InstanceCapacityPtrInput
	// 计费类型，取值 PayAsYouGo，表示按量计费。
	ChargeType pulumi.StringPtrInput
	// 创建时间
	CreateTime pulumi.StringPtrInput
	// 描述信息。
	Description pulumi.StringPtrInput
	// 文件系统 ID。
	FileSystemId pulumi.StringPtrInput
	// 文件系统名称。
	FileSystemName pulumi.StringPtrInput
	// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
	FileSystemType pulumi.StringPtrInput
	// 所属项目，默认值为 default 项目。
	ProjectName pulumi.StringPtrInput
	// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
	ProtocolType pulumi.StringPtrInput
	// 快照数量
	SnapshotCount pulumi.IntPtrInput
	// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
	SnapshotId pulumi.StringPtrInput
	// 文件系统状态
	Status pulumi.StringPtrInput
	// 存储类型，取值Standard，表示标准型。
	StorageType pulumi.StringPtrInput
	Tags        InstanceTagArrayInput
	// 更新时间
	UpdateTime pulumi.StringPtrInput
	// 可用区 ID。
	ZoneId pulumi.StringPtrInput
	// 可用区名称。
	ZoneName pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// 缓存型性能信息。
	CachePerformance *InstanceCachePerformance `pulumi:"cachePerformance"`
	// 文件系统容量。
	Capacity *InstanceCapacity `pulumi:"capacity"`
	// 计费类型，取值 PayAsYouGo，表示按量计费。
	ChargeType string `pulumi:"chargeType"`
	// 描述信息。
	Description *string `pulumi:"description"`
	// 文件系统 ID。
	FileSystemId *string `pulumi:"fileSystemId"`
	// 文件系统名称。
	FileSystemName string `pulumi:"fileSystemName"`
	// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
	FileSystemType string `pulumi:"fileSystemType"`
	// 所属项目，默认值为 default 项目。
	ProjectName *string `pulumi:"projectName"`
	// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
	ProtocolType string `pulumi:"protocolType"`
	// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
	SnapshotId *string `pulumi:"snapshotId"`
	// 存储类型，取值Standard，表示标准型。
	StorageType *string       `pulumi:"storageType"`
	Tags        []InstanceTag `pulumi:"tags"`
	// 可用区 ID。
	ZoneId string `pulumi:"zoneId"`
	// 可用区名称。
	ZoneName *string `pulumi:"zoneName"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// 缓存型性能信息。
	CachePerformance InstanceCachePerformancePtrInput
	// 文件系统容量。
	Capacity InstanceCapacityPtrInput
	// 计费类型，取值 PayAsYouGo，表示按量计费。
	ChargeType pulumi.StringInput
	// 描述信息。
	Description pulumi.StringPtrInput
	// 文件系统 ID。
	FileSystemId pulumi.StringPtrInput
	// 文件系统名称。
	FileSystemName pulumi.StringInput
	// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
	FileSystemType pulumi.StringInput
	// 所属项目，默认值为 default 项目。
	ProjectName pulumi.StringPtrInput
	// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
	ProtocolType pulumi.StringInput
	// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
	SnapshotId pulumi.StringPtrInput
	// 存储类型，取值Standard，表示标准型。
	StorageType pulumi.StringPtrInput
	Tags        InstanceTagArrayInput
	// 可用区 ID。
	ZoneId pulumi.StringInput
	// 可用区名称。
	ZoneName pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// 缓存型性能信息。
func (o InstanceOutput) CachePerformance() InstanceCachePerformanceOutput {
	return o.ApplyT(func(v *Instance) InstanceCachePerformanceOutput { return v.CachePerformance }).(InstanceCachePerformanceOutput)
}

// 文件系统容量。
func (o InstanceOutput) Capacity() InstanceCapacityOutput {
	return o.ApplyT(func(v *Instance) InstanceCapacityOutput { return v.Capacity }).(InstanceCapacityOutput)
}

// 计费类型，取值 PayAsYouGo，表示按量计费。
func (o InstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ChargeType }).(pulumi.StringOutput)
}

// 创建时间
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// 描述信息。
func (o InstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 文件系统 ID。
func (o InstanceOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// 文件系统名称。
func (o InstanceOutput) FileSystemName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.FileSystemName }).(pulumi.StringOutput)
}

// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
func (o InstanceOutput) FileSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.FileSystemType }).(pulumi.StringOutput)
}

// 所属项目，默认值为 default 项目。
func (o InstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
func (o InstanceOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

// 快照数量
func (o InstanceOutput) SnapshotCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.SnapshotCount }).(pulumi.IntOutput)
}

// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
func (o InstanceOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

// 文件系统状态
func (o InstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 存储类型，取值Standard，表示标准型。
func (o InstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// 更新时间
func (o InstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// 可用区 ID。
func (o InstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

// 可用区名称。
func (o InstanceOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
