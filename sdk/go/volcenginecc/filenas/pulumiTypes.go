// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package filenas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type InstanceCachePerformance struct {
	// 预配置带宽，用于增加文件系统带宽。
	CacheBandwidth *int `pulumi:"cacheBandwidth"`
}

// InstanceCachePerformanceInput is an input type that accepts InstanceCachePerformanceArgs and InstanceCachePerformanceOutput values.
// You can construct a concrete instance of `InstanceCachePerformanceInput` via:
//
//	InstanceCachePerformanceArgs{...}
type InstanceCachePerformanceInput interface {
	pulumi.Input

	ToInstanceCachePerformanceOutput() InstanceCachePerformanceOutput
	ToInstanceCachePerformanceOutputWithContext(context.Context) InstanceCachePerformanceOutput
}

type InstanceCachePerformanceArgs struct {
	// 预配置带宽，用于增加文件系统带宽。
	CacheBandwidth pulumi.IntPtrInput `pulumi:"cacheBandwidth"`
}

func (InstanceCachePerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCachePerformance)(nil)).Elem()
}

func (i InstanceCachePerformanceArgs) ToInstanceCachePerformanceOutput() InstanceCachePerformanceOutput {
	return i.ToInstanceCachePerformanceOutputWithContext(context.Background())
}

func (i InstanceCachePerformanceArgs) ToInstanceCachePerformanceOutputWithContext(ctx context.Context) InstanceCachePerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCachePerformanceOutput)
}

func (i InstanceCachePerformanceArgs) ToInstanceCachePerformancePtrOutput() InstanceCachePerformancePtrOutput {
	return i.ToInstanceCachePerformancePtrOutputWithContext(context.Background())
}

func (i InstanceCachePerformanceArgs) ToInstanceCachePerformancePtrOutputWithContext(ctx context.Context) InstanceCachePerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCachePerformanceOutput).ToInstanceCachePerformancePtrOutputWithContext(ctx)
}

// InstanceCachePerformancePtrInput is an input type that accepts InstanceCachePerformanceArgs, InstanceCachePerformancePtr and InstanceCachePerformancePtrOutput values.
// You can construct a concrete instance of `InstanceCachePerformancePtrInput` via:
//
//	        InstanceCachePerformanceArgs{...}
//
//	or:
//
//	        nil
type InstanceCachePerformancePtrInput interface {
	pulumi.Input

	ToInstanceCachePerformancePtrOutput() InstanceCachePerformancePtrOutput
	ToInstanceCachePerformancePtrOutputWithContext(context.Context) InstanceCachePerformancePtrOutput
}

type instanceCachePerformancePtrType InstanceCachePerformanceArgs

func InstanceCachePerformancePtr(v *InstanceCachePerformanceArgs) InstanceCachePerformancePtrInput {
	return (*instanceCachePerformancePtrType)(v)
}

func (*instanceCachePerformancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCachePerformance)(nil)).Elem()
}

func (i *instanceCachePerformancePtrType) ToInstanceCachePerformancePtrOutput() InstanceCachePerformancePtrOutput {
	return i.ToInstanceCachePerformancePtrOutputWithContext(context.Background())
}

func (i *instanceCachePerformancePtrType) ToInstanceCachePerformancePtrOutputWithContext(ctx context.Context) InstanceCachePerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCachePerformancePtrOutput)
}

type InstanceCachePerformanceOutput struct{ *pulumi.OutputState }

func (InstanceCachePerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCachePerformance)(nil)).Elem()
}

func (o InstanceCachePerformanceOutput) ToInstanceCachePerformanceOutput() InstanceCachePerformanceOutput {
	return o
}

func (o InstanceCachePerformanceOutput) ToInstanceCachePerformanceOutputWithContext(ctx context.Context) InstanceCachePerformanceOutput {
	return o
}

func (o InstanceCachePerformanceOutput) ToInstanceCachePerformancePtrOutput() InstanceCachePerformancePtrOutput {
	return o.ToInstanceCachePerformancePtrOutputWithContext(context.Background())
}

func (o InstanceCachePerformanceOutput) ToInstanceCachePerformancePtrOutputWithContext(ctx context.Context) InstanceCachePerformancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCachePerformance) *InstanceCachePerformance {
		return &v
	}).(InstanceCachePerformancePtrOutput)
}

// 预配置带宽，用于增加文件系统带宽。
func (o InstanceCachePerformanceOutput) CacheBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCachePerformance) *int { return v.CacheBandwidth }).(pulumi.IntPtrOutput)
}

type InstanceCachePerformancePtrOutput struct{ *pulumi.OutputState }

func (InstanceCachePerformancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCachePerformance)(nil)).Elem()
}

func (o InstanceCachePerformancePtrOutput) ToInstanceCachePerformancePtrOutput() InstanceCachePerformancePtrOutput {
	return o
}

func (o InstanceCachePerformancePtrOutput) ToInstanceCachePerformancePtrOutputWithContext(ctx context.Context) InstanceCachePerformancePtrOutput {
	return o
}

func (o InstanceCachePerformancePtrOutput) Elem() InstanceCachePerformanceOutput {
	return o.ApplyT(func(v *InstanceCachePerformance) InstanceCachePerformance {
		if v != nil {
			return *v
		}
		var ret InstanceCachePerformance
		return ret
	}).(InstanceCachePerformanceOutput)
}

// 预配置带宽，用于增加文件系统带宽。
func (o InstanceCachePerformancePtrOutput) CacheBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCachePerformance) *int {
		if v == nil {
			return nil
		}
		return v.CacheBandwidth
	}).(pulumi.IntPtrOutput)
}

type InstanceCapacity struct {
	// 文件系统可用总容量，单位为 GiB。
	Total *float64 `pulumi:"total"`
	// 文件系统已使用容量，单位为 MiB。
	Used *float64 `pulumi:"used"`
}

// InstanceCapacityInput is an input type that accepts InstanceCapacityArgs and InstanceCapacityOutput values.
// You can construct a concrete instance of `InstanceCapacityInput` via:
//
//	InstanceCapacityArgs{...}
type InstanceCapacityInput interface {
	pulumi.Input

	ToInstanceCapacityOutput() InstanceCapacityOutput
	ToInstanceCapacityOutputWithContext(context.Context) InstanceCapacityOutput
}

type InstanceCapacityArgs struct {
	// 文件系统可用总容量，单位为 GiB。
	Total pulumi.Float64PtrInput `pulumi:"total"`
	// 文件系统已使用容量，单位为 MiB。
	Used pulumi.Float64PtrInput `pulumi:"used"`
}

func (InstanceCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCapacity)(nil)).Elem()
}

func (i InstanceCapacityArgs) ToInstanceCapacityOutput() InstanceCapacityOutput {
	return i.ToInstanceCapacityOutputWithContext(context.Background())
}

func (i InstanceCapacityArgs) ToInstanceCapacityOutputWithContext(ctx context.Context) InstanceCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCapacityOutput)
}

func (i InstanceCapacityArgs) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return i.ToInstanceCapacityPtrOutputWithContext(context.Background())
}

func (i InstanceCapacityArgs) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCapacityOutput).ToInstanceCapacityPtrOutputWithContext(ctx)
}

// InstanceCapacityPtrInput is an input type that accepts InstanceCapacityArgs, InstanceCapacityPtr and InstanceCapacityPtrOutput values.
// You can construct a concrete instance of `InstanceCapacityPtrInput` via:
//
//	        InstanceCapacityArgs{...}
//
//	or:
//
//	        nil
type InstanceCapacityPtrInput interface {
	pulumi.Input

	ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput
	ToInstanceCapacityPtrOutputWithContext(context.Context) InstanceCapacityPtrOutput
}

type instanceCapacityPtrType InstanceCapacityArgs

func InstanceCapacityPtr(v *InstanceCapacityArgs) InstanceCapacityPtrInput {
	return (*instanceCapacityPtrType)(v)
}

func (*instanceCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCapacity)(nil)).Elem()
}

func (i *instanceCapacityPtrType) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return i.ToInstanceCapacityPtrOutputWithContext(context.Background())
}

func (i *instanceCapacityPtrType) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCapacityPtrOutput)
}

type InstanceCapacityOutput struct{ *pulumi.OutputState }

func (InstanceCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCapacity)(nil)).Elem()
}

func (o InstanceCapacityOutput) ToInstanceCapacityOutput() InstanceCapacityOutput {
	return o
}

func (o InstanceCapacityOutput) ToInstanceCapacityOutputWithContext(ctx context.Context) InstanceCapacityOutput {
	return o
}

func (o InstanceCapacityOutput) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return o.ToInstanceCapacityPtrOutputWithContext(context.Background())
}

func (o InstanceCapacityOutput) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCapacity) *InstanceCapacity {
		return &v
	}).(InstanceCapacityPtrOutput)
}

// 文件系统可用总容量，单位为 GiB。
func (o InstanceCapacityOutput) Total() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InstanceCapacity) *float64 { return v.Total }).(pulumi.Float64PtrOutput)
}

// 文件系统已使用容量，单位为 MiB。
func (o InstanceCapacityOutput) Used() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v InstanceCapacity) *float64 { return v.Used }).(pulumi.Float64PtrOutput)
}

type InstanceCapacityPtrOutput struct{ *pulumi.OutputState }

func (InstanceCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCapacity)(nil)).Elem()
}

func (o InstanceCapacityPtrOutput) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return o
}

func (o InstanceCapacityPtrOutput) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return o
}

func (o InstanceCapacityPtrOutput) Elem() InstanceCapacityOutput {
	return o.ApplyT(func(v *InstanceCapacity) InstanceCapacity {
		if v != nil {
			return *v
		}
		var ret InstanceCapacity
		return ret
	}).(InstanceCapacityOutput)
}

// 文件系统可用总容量，单位为 GiB。
func (o InstanceCapacityPtrOutput) Total() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InstanceCapacity) *float64 {
		if v == nil {
			return nil
		}
		return v.Total
	}).(pulumi.Float64PtrOutput)
}

// 文件系统已使用容量，单位为 MiB。
func (o InstanceCapacityPtrOutput) Used() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *InstanceCapacity) *float64 {
		if v == nil {
			return nil
		}
		return v.Used
	}).(pulumi.Float64PtrOutput)
}

type InstanceTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签类型。
	Type *string `pulumi:"type"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签类型。
	Type pulumi.StringPtrInput `pulumi:"type"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// 标签键。
func (o InstanceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签类型。
func (o InstanceTagOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTag) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o InstanceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type GetInstanceCachePerformance struct {
	// 预配置带宽，用于增加文件系统带宽。
	CacheBandwidth int `pulumi:"cacheBandwidth"`
}

// GetInstanceCachePerformanceInput is an input type that accepts GetInstanceCachePerformanceArgs and GetInstanceCachePerformanceOutput values.
// You can construct a concrete instance of `GetInstanceCachePerformanceInput` via:
//
//	GetInstanceCachePerformanceArgs{...}
type GetInstanceCachePerformanceInput interface {
	pulumi.Input

	ToGetInstanceCachePerformanceOutput() GetInstanceCachePerformanceOutput
	ToGetInstanceCachePerformanceOutputWithContext(context.Context) GetInstanceCachePerformanceOutput
}

type GetInstanceCachePerformanceArgs struct {
	// 预配置带宽，用于增加文件系统带宽。
	CacheBandwidth pulumi.IntInput `pulumi:"cacheBandwidth"`
}

func (GetInstanceCachePerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceCachePerformance)(nil)).Elem()
}

func (i GetInstanceCachePerformanceArgs) ToGetInstanceCachePerformanceOutput() GetInstanceCachePerformanceOutput {
	return i.ToGetInstanceCachePerformanceOutputWithContext(context.Background())
}

func (i GetInstanceCachePerformanceArgs) ToGetInstanceCachePerformanceOutputWithContext(ctx context.Context) GetInstanceCachePerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceCachePerformanceOutput)
}

type GetInstanceCachePerformanceOutput struct{ *pulumi.OutputState }

func (GetInstanceCachePerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceCachePerformance)(nil)).Elem()
}

func (o GetInstanceCachePerformanceOutput) ToGetInstanceCachePerformanceOutput() GetInstanceCachePerformanceOutput {
	return o
}

func (o GetInstanceCachePerformanceOutput) ToGetInstanceCachePerformanceOutputWithContext(ctx context.Context) GetInstanceCachePerformanceOutput {
	return o
}

// 预配置带宽，用于增加文件系统带宽。
func (o GetInstanceCachePerformanceOutput) CacheBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceCachePerformance) int { return v.CacheBandwidth }).(pulumi.IntOutput)
}

type GetInstanceCapacity struct {
	// 文件系统可用总容量，单位为 GiB。
	Total float64 `pulumi:"total"`
	// 文件系统已使用容量，单位为 MiB。
	Used float64 `pulumi:"used"`
}

// GetInstanceCapacityInput is an input type that accepts GetInstanceCapacityArgs and GetInstanceCapacityOutput values.
// You can construct a concrete instance of `GetInstanceCapacityInput` via:
//
//	GetInstanceCapacityArgs{...}
type GetInstanceCapacityInput interface {
	pulumi.Input

	ToGetInstanceCapacityOutput() GetInstanceCapacityOutput
	ToGetInstanceCapacityOutputWithContext(context.Context) GetInstanceCapacityOutput
}

type GetInstanceCapacityArgs struct {
	// 文件系统可用总容量，单位为 GiB。
	Total pulumi.Float64Input `pulumi:"total"`
	// 文件系统已使用容量，单位为 MiB。
	Used pulumi.Float64Input `pulumi:"used"`
}

func (GetInstanceCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceCapacity)(nil)).Elem()
}

func (i GetInstanceCapacityArgs) ToGetInstanceCapacityOutput() GetInstanceCapacityOutput {
	return i.ToGetInstanceCapacityOutputWithContext(context.Background())
}

func (i GetInstanceCapacityArgs) ToGetInstanceCapacityOutputWithContext(ctx context.Context) GetInstanceCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceCapacityOutput)
}

type GetInstanceCapacityOutput struct{ *pulumi.OutputState }

func (GetInstanceCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceCapacity)(nil)).Elem()
}

func (o GetInstanceCapacityOutput) ToGetInstanceCapacityOutput() GetInstanceCapacityOutput {
	return o
}

func (o GetInstanceCapacityOutput) ToGetInstanceCapacityOutputWithContext(ctx context.Context) GetInstanceCapacityOutput {
	return o
}

// 文件系统可用总容量，单位为 GiB。
func (o GetInstanceCapacityOutput) Total() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceCapacity) float64 { return v.Total }).(pulumi.Float64Output)
}

// 文件系统已使用容量，单位为 MiB。
func (o GetInstanceCapacityOutput) Used() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceCapacity) float64 { return v.Used }).(pulumi.Float64Output)
}

type GetInstanceTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签类型。
	Type string `pulumi:"type"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetInstanceTagInput is an input type that accepts GetInstanceTagArgs and GetInstanceTagOutput values.
// You can construct a concrete instance of `GetInstanceTagInput` via:
//
//	GetInstanceTagArgs{...}
type GetInstanceTagInput interface {
	pulumi.Input

	ToGetInstanceTagOutput() GetInstanceTagOutput
	ToGetInstanceTagOutputWithContext(context.Context) GetInstanceTagOutput
}

type GetInstanceTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签类型。
	Type pulumi.StringInput `pulumi:"type"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTag)(nil)).Elem()
}

func (i GetInstanceTagArgs) ToGetInstanceTagOutput() GetInstanceTagOutput {
	return i.ToGetInstanceTagOutputWithContext(context.Background())
}

func (i GetInstanceTagArgs) ToGetInstanceTagOutputWithContext(ctx context.Context) GetInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTagOutput)
}

// GetInstanceTagArrayInput is an input type that accepts GetInstanceTagArray and GetInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstanceTagArrayInput` via:
//
//	GetInstanceTagArray{ GetInstanceTagArgs{...} }
type GetInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstanceTagArrayOutput() GetInstanceTagArrayOutput
	ToGetInstanceTagArrayOutputWithContext(context.Context) GetInstanceTagArrayOutput
}

type GetInstanceTagArray []GetInstanceTagInput

func (GetInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTag)(nil)).Elem()
}

func (i GetInstanceTagArray) ToGetInstanceTagArrayOutput() GetInstanceTagArrayOutput {
	return i.ToGetInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstanceTagArray) ToGetInstanceTagArrayOutputWithContext(ctx context.Context) GetInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTagArrayOutput)
}

type GetInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTag)(nil)).Elem()
}

func (o GetInstanceTagOutput) ToGetInstanceTagOutput() GetInstanceTagOutput {
	return o
}

func (o GetInstanceTagOutput) ToGetInstanceTagOutputWithContext(ctx context.Context) GetInstanceTagOutput {
	return o
}

// 标签键。
func (o GetInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签类型。
func (o GetInstanceTagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTag) string { return v.Type }).(pulumi.StringOutput)
}

// 标签值。
func (o GetInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTag)(nil)).Elem()
}

func (o GetInstanceTagArrayOutput) ToGetInstanceTagArrayOutput() GetInstanceTagArrayOutput {
	return o
}

func (o GetInstanceTagArrayOutput) ToGetInstanceTagArrayOutputWithContext(ctx context.Context) GetInstanceTagArrayOutput {
	return o
}

func (o GetInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTag {
		return vs[0].([]GetInstanceTag)[vs[1].(int)]
	}).(GetInstanceTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCachePerformanceInput)(nil)).Elem(), InstanceCachePerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCachePerformancePtrInput)(nil)).Elem(), InstanceCachePerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCapacityInput)(nil)).Elem(), InstanceCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCapacityPtrInput)(nil)).Elem(), InstanceCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceCachePerformanceInput)(nil)).Elem(), GetInstanceCachePerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceCapacityInput)(nil)).Elem(), GetInstanceCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTagInput)(nil)).Elem(), GetInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTagArrayInput)(nil)).Elem(), GetInstanceTagArray{})
	pulumi.RegisterOutputType(InstanceCachePerformanceOutput{})
	pulumi.RegisterOutputType(InstanceCachePerformancePtrOutput{})
	pulumi.RegisterOutputType(InstanceCapacityOutput{})
	pulumi.RegisterOutputType(InstanceCapacityPtrOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceCachePerformanceOutput{})
	pulumi.RegisterOutputType(GetInstanceCapacityOutput{})
	pulumi.RegisterOutputType(GetInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstanceTagArrayOutput{})
}
