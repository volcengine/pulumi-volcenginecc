// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package filenas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::FileNAS::Instance
func LookupInstance(ctx *pulumi.Context, args *LookupInstanceArgs, opts ...pulumi.InvokeOption) (*LookupInstanceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInstanceResult
	err := ctx.Invoke("volcenginecc:filenas/getInstance:getInstance", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstance.
type LookupInstanceArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getInstance.
type LookupInstanceResult struct {
	// 缓存型性能信息。
	CachePerformance GetInstanceCachePerformance `pulumi:"cachePerformance"`
	// 文件系统容量。
	Capacity GetInstanceCapacity `pulumi:"capacity"`
	// 计费类型，取值 PayAsYouGo，表示按量计费。
	ChargeType string `pulumi:"chargeType"`
	// 创建时间
	CreateTime string `pulumi:"createTime"`
	// 描述信息。
	Description string `pulumi:"description"`
	// 文件系统 ID。
	FileSystemId string `pulumi:"fileSystemId"`
	// 文件系统名称。
	FileSystemName string `pulumi:"fileSystemName"`
	// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
	FileSystemType string `pulumi:"fileSystemType"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 所属项目，默认值为 default 项目。
	ProjectName string `pulumi:"projectName"`
	// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
	ProtocolType string `pulumi:"protocolType"`
	// 快照数量
	SnapshotCount int `pulumi:"snapshotCount"`
	// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
	SnapshotId string `pulumi:"snapshotId"`
	// 文件系统状态
	Status string `pulumi:"status"`
	// 存储类型，取值Standard，表示标准型。
	StorageType string `pulumi:"storageType"`
	// 文件系统的标签信息
	Tags []GetInstanceTag `pulumi:"tags"`
	// 更新时间
	UpdateTime string `pulumi:"updateTime"`
	// 可用区 ID。
	ZoneId string `pulumi:"zoneId"`
	// 可用区名称。
	ZoneName string `pulumi:"zoneName"`
}

func LookupInstanceOutput(ctx *pulumi.Context, args LookupInstanceOutputArgs, opts ...pulumi.InvokeOption) LookupInstanceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInstanceResultOutput, error) {
			args := v.(LookupInstanceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:filenas/getInstance:getInstance", args, LookupInstanceResultOutput{}, options).(LookupInstanceResultOutput), nil
		}).(LookupInstanceResultOutput)
}

// A collection of arguments for invoking getInstance.
type LookupInstanceOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupInstanceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceArgs)(nil)).Elem()
}

// A collection of values returned by getInstance.
type LookupInstanceResultOutput struct{ *pulumi.OutputState }

func (LookupInstanceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInstanceResult)(nil)).Elem()
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutput() LookupInstanceResultOutput {
	return o
}

func (o LookupInstanceResultOutput) ToLookupInstanceResultOutputWithContext(ctx context.Context) LookupInstanceResultOutput {
	return o
}

// 缓存型性能信息。
func (o LookupInstanceResultOutput) CachePerformance() GetInstanceCachePerformanceOutput {
	return o.ApplyT(func(v LookupInstanceResult) GetInstanceCachePerformance { return v.CachePerformance }).(GetInstanceCachePerformanceOutput)
}

// 文件系统容量。
func (o LookupInstanceResultOutput) Capacity() GetInstanceCapacityOutput {
	return o.ApplyT(func(v LookupInstanceResult) GetInstanceCapacity { return v.Capacity }).(GetInstanceCapacityOutput)
}

// 计费类型，取值 PayAsYouGo，表示按量计费。
func (o LookupInstanceResultOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ChargeType }).(pulumi.StringOutput)
}

// 创建时间
func (o LookupInstanceResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// 描述信息。
func (o LookupInstanceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Description }).(pulumi.StringOutput)
}

// 文件系统 ID。
func (o LookupInstanceResultOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// 文件系统名称。
func (o LookupInstanceResultOutput) FileSystemName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.FileSystemName }).(pulumi.StringOutput)
}

// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
func (o LookupInstanceResultOutput) FileSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.FileSystemType }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupInstanceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Id }).(pulumi.StringOutput)
}

// 所属项目，默认值为 default 项目。
func (o LookupInstanceResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
func (o LookupInstanceResultOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ProtocolType }).(pulumi.StringOutput)
}

// 快照数量
func (o LookupInstanceResultOutput) SnapshotCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInstanceResult) int { return v.SnapshotCount }).(pulumi.IntOutput)
}

// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
func (o LookupInstanceResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// 文件系统状态
func (o LookupInstanceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.Status }).(pulumi.StringOutput)
}

// 存储类型，取值Standard，表示标准型。
func (o LookupInstanceResultOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.StorageType }).(pulumi.StringOutput)
}

// 文件系统的标签信息
func (o LookupInstanceResultOutput) Tags() GetInstanceTagArrayOutput {
	return o.ApplyT(func(v LookupInstanceResult) []GetInstanceTag { return v.Tags }).(GetInstanceTagArrayOutput)
}

// 更新时间
func (o LookupInstanceResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// 可用区 ID。
func (o LookupInstanceResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

// 可用区名称。
func (o LookupInstanceResultOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInstanceResult) string { return v.ZoneName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInstanceResultOutput{})
}
