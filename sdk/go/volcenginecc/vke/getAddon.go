// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vke

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::VKE::Addon
func LookupAddon(ctx *pulumi.Context, args *LookupAddonArgs, opts ...pulumi.InvokeOption) (*LookupAddonResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAddonResult
	err := ctx.Invoke("volcenginecc:vke/getAddon:getAddon", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAddon.
type LookupAddonArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getAddon.
type LookupAddonResult struct {
	// 组件所在集群 ID。
	ClusterId string `pulumi:"clusterId"`
	// 组件配置。
	Config string `pulumi:"config"`
	// 安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
	CreateTime string `pulumi:"createTime"`
	// 组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
	DeployMode string `pulumi:"deployMode"`
	// 部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
	DeployNodeType string `pulumi:"deployNodeType"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 组件名称。
	Name string `pulumi:"name"`
	// 组件状态。
	Status GetAddonStatus `pulumi:"status"`
	// 更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
	UpdateTime string `pulumi:"updateTime"`
	// 组件版本。
	Version string `pulumi:"version"`
}

func LookupAddonOutput(ctx *pulumi.Context, args LookupAddonOutputArgs, opts ...pulumi.InvokeOption) LookupAddonResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAddonResultOutput, error) {
			args := v.(LookupAddonArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:vke/getAddon:getAddon", args, LookupAddonResultOutput{}, options).(LookupAddonResultOutput), nil
		}).(LookupAddonResultOutput)
}

// A collection of arguments for invoking getAddon.
type LookupAddonOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupAddonOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonArgs)(nil)).Elem()
}

// A collection of values returned by getAddon.
type LookupAddonResultOutput struct{ *pulumi.OutputState }

func (LookupAddonResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAddonResult)(nil)).Elem()
}

func (o LookupAddonResultOutput) ToLookupAddonResultOutput() LookupAddonResultOutput {
	return o
}

func (o LookupAddonResultOutput) ToLookupAddonResultOutputWithContext(ctx context.Context) LookupAddonResultOutput {
	return o
}

// 组件所在集群 ID。
func (o LookupAddonResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// 组件配置。
func (o LookupAddonResultOutput) Config() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Config }).(pulumi.StringOutput)
}

// 安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
func (o LookupAddonResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// 组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
func (o LookupAddonResultOutput) DeployMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.DeployMode }).(pulumi.StringOutput)
}

// 部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
func (o LookupAddonResultOutput) DeployNodeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.DeployNodeType }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupAddonResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Id }).(pulumi.StringOutput)
}

// 组件名称。
func (o LookupAddonResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Name }).(pulumi.StringOutput)
}

// 组件状态。
func (o LookupAddonResultOutput) Status() GetAddonStatusOutput {
	return o.ApplyT(func(v LookupAddonResult) GetAddonStatus { return v.Status }).(GetAddonStatusOutput)
}

// 更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
func (o LookupAddonResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// 组件版本。
func (o LookupAddonResultOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAddonResult) string { return v.Version }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAddonResultOutput{})
}
