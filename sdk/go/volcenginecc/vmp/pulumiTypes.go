// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type WorkspaceInstanceType struct {
	// 最大活跃时序数。
	ActiveSeries *int `pulumi:"activeSeries"`
	// 可用区（az）数。
	AvailabilityZoneReplicas *int `pulumi:"availabilityZoneReplicas"`
	// 降采样策略。
	DownsamplingPeriods []string `pulumi:"downsamplingPeriods"`
	// 最大每秒写入样本数。
	IngestSamplesPerSecond *int `pulumi:"ingestSamplesPerSecond"`
	// 最大查询并发数。
	QueryConcurrency *int `pulumi:"queryConcurrency"`
	// 最大查询 QPS。
	QueryPerSecond *int `pulumi:"queryPerSecond"`
	// 每个可用区（az）的数据副本数。
	ReplicasPerZone *int `pulumi:"replicasPerZone"`
	// 最长数据保留时间。
	RetentionPeriod *string `pulumi:"retentionPeriod"`
	// 最大每秒扫描样本数。
	ScanSamplesPerSecond *int `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。
	ScanSeriesPerSecond *int `pulumi:"scanSeriesPerSecond"`
}

// WorkspaceInstanceTypeInput is an input type that accepts WorkspaceInstanceTypeArgs and WorkspaceInstanceTypeOutput values.
// You can construct a concrete instance of `WorkspaceInstanceTypeInput` via:
//
//	WorkspaceInstanceTypeArgs{...}
type WorkspaceInstanceTypeInput interface {
	pulumi.Input

	ToWorkspaceInstanceTypeOutput() WorkspaceInstanceTypeOutput
	ToWorkspaceInstanceTypeOutputWithContext(context.Context) WorkspaceInstanceTypeOutput
}

type WorkspaceInstanceTypeArgs struct {
	// 最大活跃时序数。
	ActiveSeries pulumi.IntPtrInput `pulumi:"activeSeries"`
	// 可用区（az）数。
	AvailabilityZoneReplicas pulumi.IntPtrInput `pulumi:"availabilityZoneReplicas"`
	// 降采样策略。
	DownsamplingPeriods pulumi.StringArrayInput `pulumi:"downsamplingPeriods"`
	// 最大每秒写入样本数。
	IngestSamplesPerSecond pulumi.IntPtrInput `pulumi:"ingestSamplesPerSecond"`
	// 最大查询并发数。
	QueryConcurrency pulumi.IntPtrInput `pulumi:"queryConcurrency"`
	// 最大查询 QPS。
	QueryPerSecond pulumi.IntPtrInput `pulumi:"queryPerSecond"`
	// 每个可用区（az）的数据副本数。
	ReplicasPerZone pulumi.IntPtrInput `pulumi:"replicasPerZone"`
	// 最长数据保留时间。
	RetentionPeriod pulumi.StringPtrInput `pulumi:"retentionPeriod"`
	// 最大每秒扫描样本数。
	ScanSamplesPerSecond pulumi.IntPtrInput `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。
	ScanSeriesPerSecond pulumi.IntPtrInput `pulumi:"scanSeriesPerSecond"`
}

func (WorkspaceInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceInstanceType)(nil)).Elem()
}

func (i WorkspaceInstanceTypeArgs) ToWorkspaceInstanceTypeOutput() WorkspaceInstanceTypeOutput {
	return i.ToWorkspaceInstanceTypeOutputWithContext(context.Background())
}

func (i WorkspaceInstanceTypeArgs) ToWorkspaceInstanceTypeOutputWithContext(ctx context.Context) WorkspaceInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceInstanceTypeOutput)
}

func (i WorkspaceInstanceTypeArgs) ToWorkspaceInstanceTypePtrOutput() WorkspaceInstanceTypePtrOutput {
	return i.ToWorkspaceInstanceTypePtrOutputWithContext(context.Background())
}

func (i WorkspaceInstanceTypeArgs) ToWorkspaceInstanceTypePtrOutputWithContext(ctx context.Context) WorkspaceInstanceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceInstanceTypeOutput).ToWorkspaceInstanceTypePtrOutputWithContext(ctx)
}

// WorkspaceInstanceTypePtrInput is an input type that accepts WorkspaceInstanceTypeArgs, WorkspaceInstanceTypePtr and WorkspaceInstanceTypePtrOutput values.
// You can construct a concrete instance of `WorkspaceInstanceTypePtrInput` via:
//
//	        WorkspaceInstanceTypeArgs{...}
//
//	or:
//
//	        nil
type WorkspaceInstanceTypePtrInput interface {
	pulumi.Input

	ToWorkspaceInstanceTypePtrOutput() WorkspaceInstanceTypePtrOutput
	ToWorkspaceInstanceTypePtrOutputWithContext(context.Context) WorkspaceInstanceTypePtrOutput
}

type workspaceInstanceTypePtrType WorkspaceInstanceTypeArgs

func WorkspaceInstanceTypePtr(v *WorkspaceInstanceTypeArgs) WorkspaceInstanceTypePtrInput {
	return (*workspaceInstanceTypePtrType)(v)
}

func (*workspaceInstanceTypePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceInstanceType)(nil)).Elem()
}

func (i *workspaceInstanceTypePtrType) ToWorkspaceInstanceTypePtrOutput() WorkspaceInstanceTypePtrOutput {
	return i.ToWorkspaceInstanceTypePtrOutputWithContext(context.Background())
}

func (i *workspaceInstanceTypePtrType) ToWorkspaceInstanceTypePtrOutputWithContext(ctx context.Context) WorkspaceInstanceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceInstanceTypePtrOutput)
}

type WorkspaceInstanceTypeOutput struct{ *pulumi.OutputState }

func (WorkspaceInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceInstanceType)(nil)).Elem()
}

func (o WorkspaceInstanceTypeOutput) ToWorkspaceInstanceTypeOutput() WorkspaceInstanceTypeOutput {
	return o
}

func (o WorkspaceInstanceTypeOutput) ToWorkspaceInstanceTypeOutputWithContext(ctx context.Context) WorkspaceInstanceTypeOutput {
	return o
}

func (o WorkspaceInstanceTypeOutput) ToWorkspaceInstanceTypePtrOutput() WorkspaceInstanceTypePtrOutput {
	return o.ToWorkspaceInstanceTypePtrOutputWithContext(context.Background())
}

func (o WorkspaceInstanceTypeOutput) ToWorkspaceInstanceTypePtrOutputWithContext(ctx context.Context) WorkspaceInstanceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceInstanceType) *WorkspaceInstanceType {
		return &v
	}).(WorkspaceInstanceTypePtrOutput)
}

// 最大活跃时序数。
func (o WorkspaceInstanceTypeOutput) ActiveSeries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.ActiveSeries }).(pulumi.IntPtrOutput)
}

// 可用区（az）数。
func (o WorkspaceInstanceTypeOutput) AvailabilityZoneReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.AvailabilityZoneReplicas }).(pulumi.IntPtrOutput)
}

// 降采样策略。
func (o WorkspaceInstanceTypeOutput) DownsamplingPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) []string { return v.DownsamplingPeriods }).(pulumi.StringArrayOutput)
}

// 最大每秒写入样本数。
func (o WorkspaceInstanceTypeOutput) IngestSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.IngestSamplesPerSecond }).(pulumi.IntPtrOutput)
}

// 最大查询并发数。
func (o WorkspaceInstanceTypeOutput) QueryConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.QueryConcurrency }).(pulumi.IntPtrOutput)
}

// 最大查询 QPS。
func (o WorkspaceInstanceTypeOutput) QueryPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.QueryPerSecond }).(pulumi.IntPtrOutput)
}

// 每个可用区（az）的数据副本数。
func (o WorkspaceInstanceTypeOutput) ReplicasPerZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.ReplicasPerZone }).(pulumi.IntPtrOutput)
}

// 最长数据保留时间。
func (o WorkspaceInstanceTypeOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *string { return v.RetentionPeriod }).(pulumi.StringPtrOutput)
}

// 最大每秒扫描样本数。
func (o WorkspaceInstanceTypeOutput) ScanSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.ScanSamplesPerSecond }).(pulumi.IntPtrOutput)
}

// 最大每秒扫描时序数。
func (o WorkspaceInstanceTypeOutput) ScanSeriesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceInstanceType) *int { return v.ScanSeriesPerSecond }).(pulumi.IntPtrOutput)
}

type WorkspaceInstanceTypePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceInstanceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceInstanceType)(nil)).Elem()
}

func (o WorkspaceInstanceTypePtrOutput) ToWorkspaceInstanceTypePtrOutput() WorkspaceInstanceTypePtrOutput {
	return o
}

func (o WorkspaceInstanceTypePtrOutput) ToWorkspaceInstanceTypePtrOutputWithContext(ctx context.Context) WorkspaceInstanceTypePtrOutput {
	return o
}

func (o WorkspaceInstanceTypePtrOutput) Elem() WorkspaceInstanceTypeOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) WorkspaceInstanceType {
		if v != nil {
			return *v
		}
		var ret WorkspaceInstanceType
		return ret
	}).(WorkspaceInstanceTypeOutput)
}

// 最大活跃时序数。
func (o WorkspaceInstanceTypePtrOutput) ActiveSeries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.ActiveSeries
	}).(pulumi.IntPtrOutput)
}

// 可用区（az）数。
func (o WorkspaceInstanceTypePtrOutput) AvailabilityZoneReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.AvailabilityZoneReplicas
	}).(pulumi.IntPtrOutput)
}

// 降采样策略。
func (o WorkspaceInstanceTypePtrOutput) DownsamplingPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) []string {
		if v == nil {
			return nil
		}
		return v.DownsamplingPeriods
	}).(pulumi.StringArrayOutput)
}

// 最大每秒写入样本数。
func (o WorkspaceInstanceTypePtrOutput) IngestSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.IngestSamplesPerSecond
	}).(pulumi.IntPtrOutput)
}

// 最大查询并发数。
func (o WorkspaceInstanceTypePtrOutput) QueryConcurrency() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.QueryConcurrency
	}).(pulumi.IntPtrOutput)
}

// 最大查询 QPS。
func (o WorkspaceInstanceTypePtrOutput) QueryPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.QueryPerSecond
	}).(pulumi.IntPtrOutput)
}

// 每个可用区（az）的数据副本数。
func (o WorkspaceInstanceTypePtrOutput) ReplicasPerZone() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.ReplicasPerZone
	}).(pulumi.IntPtrOutput)
}

// 最长数据保留时间。
func (o WorkspaceInstanceTypePtrOutput) RetentionPeriod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *string {
		if v == nil {
			return nil
		}
		return v.RetentionPeriod
	}).(pulumi.StringPtrOutput)
}

// 最大每秒扫描样本数。
func (o WorkspaceInstanceTypePtrOutput) ScanSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.ScanSamplesPerSecond
	}).(pulumi.IntPtrOutput)
}

// 最大每秒扫描时序数。
func (o WorkspaceInstanceTypePtrOutput) ScanSeriesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceInstanceType) *int {
		if v == nil {
			return nil
		}
		return v.ScanSeriesPerSecond
	}).(pulumi.IntPtrOutput)
}

type WorkspaceQuota struct {
	// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
	ActiveSeries *int `pulumi:"activeSeries"`
	// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
	IngestSamplesPerSecond *int `pulumi:"ingestSamplesPerSecond"`
	// 最大查询 QPS。整数形式，默认取值范围为 1～500。
	QueryPerSecond *int `pulumi:"queryPerSecond"`
	// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
	ScanSamplesPerSecond *int `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
	ScanSeriesPerSecond *int `pulumi:"scanSeriesPerSecond"`
}

// WorkspaceQuotaInput is an input type that accepts WorkspaceQuotaArgs and WorkspaceQuotaOutput values.
// You can construct a concrete instance of `WorkspaceQuotaInput` via:
//
//	WorkspaceQuotaArgs{...}
type WorkspaceQuotaInput interface {
	pulumi.Input

	ToWorkspaceQuotaOutput() WorkspaceQuotaOutput
	ToWorkspaceQuotaOutputWithContext(context.Context) WorkspaceQuotaOutput
}

type WorkspaceQuotaArgs struct {
	// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
	ActiveSeries pulumi.IntPtrInput `pulumi:"activeSeries"`
	// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
	IngestSamplesPerSecond pulumi.IntPtrInput `pulumi:"ingestSamplesPerSecond"`
	// 最大查询 QPS。整数形式，默认取值范围为 1～500。
	QueryPerSecond pulumi.IntPtrInput `pulumi:"queryPerSecond"`
	// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
	ScanSamplesPerSecond pulumi.IntPtrInput `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
	ScanSeriesPerSecond pulumi.IntPtrInput `pulumi:"scanSeriesPerSecond"`
}

func (WorkspaceQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceQuota)(nil)).Elem()
}

func (i WorkspaceQuotaArgs) ToWorkspaceQuotaOutput() WorkspaceQuotaOutput {
	return i.ToWorkspaceQuotaOutputWithContext(context.Background())
}

func (i WorkspaceQuotaArgs) ToWorkspaceQuotaOutputWithContext(ctx context.Context) WorkspaceQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceQuotaOutput)
}

func (i WorkspaceQuotaArgs) ToWorkspaceQuotaPtrOutput() WorkspaceQuotaPtrOutput {
	return i.ToWorkspaceQuotaPtrOutputWithContext(context.Background())
}

func (i WorkspaceQuotaArgs) ToWorkspaceQuotaPtrOutputWithContext(ctx context.Context) WorkspaceQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceQuotaOutput).ToWorkspaceQuotaPtrOutputWithContext(ctx)
}

// WorkspaceQuotaPtrInput is an input type that accepts WorkspaceQuotaArgs, WorkspaceQuotaPtr and WorkspaceQuotaPtrOutput values.
// You can construct a concrete instance of `WorkspaceQuotaPtrInput` via:
//
//	        WorkspaceQuotaArgs{...}
//
//	or:
//
//	        nil
type WorkspaceQuotaPtrInput interface {
	pulumi.Input

	ToWorkspaceQuotaPtrOutput() WorkspaceQuotaPtrOutput
	ToWorkspaceQuotaPtrOutputWithContext(context.Context) WorkspaceQuotaPtrOutput
}

type workspaceQuotaPtrType WorkspaceQuotaArgs

func WorkspaceQuotaPtr(v *WorkspaceQuotaArgs) WorkspaceQuotaPtrInput {
	return (*workspaceQuotaPtrType)(v)
}

func (*workspaceQuotaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceQuota)(nil)).Elem()
}

func (i *workspaceQuotaPtrType) ToWorkspaceQuotaPtrOutput() WorkspaceQuotaPtrOutput {
	return i.ToWorkspaceQuotaPtrOutputWithContext(context.Background())
}

func (i *workspaceQuotaPtrType) ToWorkspaceQuotaPtrOutputWithContext(ctx context.Context) WorkspaceQuotaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceQuotaPtrOutput)
}

type WorkspaceQuotaOutput struct{ *pulumi.OutputState }

func (WorkspaceQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceQuota)(nil)).Elem()
}

func (o WorkspaceQuotaOutput) ToWorkspaceQuotaOutput() WorkspaceQuotaOutput {
	return o
}

func (o WorkspaceQuotaOutput) ToWorkspaceQuotaOutputWithContext(ctx context.Context) WorkspaceQuotaOutput {
	return o
}

func (o WorkspaceQuotaOutput) ToWorkspaceQuotaPtrOutput() WorkspaceQuotaPtrOutput {
	return o.ToWorkspaceQuotaPtrOutputWithContext(context.Background())
}

func (o WorkspaceQuotaOutput) ToWorkspaceQuotaPtrOutputWithContext(ctx context.Context) WorkspaceQuotaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceQuota) *WorkspaceQuota {
		return &v
	}).(WorkspaceQuotaPtrOutput)
}

// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
func (o WorkspaceQuotaOutput) ActiveSeries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceQuota) *int { return v.ActiveSeries }).(pulumi.IntPtrOutput)
}

// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
func (o WorkspaceQuotaOutput) IngestSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceQuota) *int { return v.IngestSamplesPerSecond }).(pulumi.IntPtrOutput)
}

// 最大查询 QPS。整数形式，默认取值范围为 1～500。
func (o WorkspaceQuotaOutput) QueryPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceQuota) *int { return v.QueryPerSecond }).(pulumi.IntPtrOutput)
}

// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
func (o WorkspaceQuotaOutput) ScanSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceQuota) *int { return v.ScanSamplesPerSecond }).(pulumi.IntPtrOutput)
}

// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
func (o WorkspaceQuotaOutput) ScanSeriesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceQuota) *int { return v.ScanSeriesPerSecond }).(pulumi.IntPtrOutput)
}

type WorkspaceQuotaPtrOutput struct{ *pulumi.OutputState }

func (WorkspaceQuotaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceQuota)(nil)).Elem()
}

func (o WorkspaceQuotaPtrOutput) ToWorkspaceQuotaPtrOutput() WorkspaceQuotaPtrOutput {
	return o
}

func (o WorkspaceQuotaPtrOutput) ToWorkspaceQuotaPtrOutputWithContext(ctx context.Context) WorkspaceQuotaPtrOutput {
	return o
}

func (o WorkspaceQuotaPtrOutput) Elem() WorkspaceQuotaOutput {
	return o.ApplyT(func(v *WorkspaceQuota) WorkspaceQuota {
		if v != nil {
			return *v
		}
		var ret WorkspaceQuota
		return ret
	}).(WorkspaceQuotaOutput)
}

// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
func (o WorkspaceQuotaPtrOutput) ActiveSeries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceQuota) *int {
		if v == nil {
			return nil
		}
		return v.ActiveSeries
	}).(pulumi.IntPtrOutput)
}

// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
func (o WorkspaceQuotaPtrOutput) IngestSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceQuota) *int {
		if v == nil {
			return nil
		}
		return v.IngestSamplesPerSecond
	}).(pulumi.IntPtrOutput)
}

// 最大查询 QPS。整数形式，默认取值范围为 1～500。
func (o WorkspaceQuotaPtrOutput) QueryPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceQuota) *int {
		if v == nil {
			return nil
		}
		return v.QueryPerSecond
	}).(pulumi.IntPtrOutput)
}

// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
func (o WorkspaceQuotaPtrOutput) ScanSamplesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceQuota) *int {
		if v == nil {
			return nil
		}
		return v.ScanSamplesPerSecond
	}).(pulumi.IntPtrOutput)
}

// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
func (o WorkspaceQuotaPtrOutput) ScanSeriesPerSecond() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceQuota) *int {
		if v == nil {
			return nil
		}
		return v.ScanSeriesPerSecond
	}).(pulumi.IntPtrOutput)
}

type WorkspaceTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// WorkspaceTagInput is an input type that accepts WorkspaceTagArgs and WorkspaceTagOutput values.
// You can construct a concrete instance of `WorkspaceTagInput` via:
//
//	WorkspaceTagArgs{...}
type WorkspaceTagInput interface {
	pulumi.Input

	ToWorkspaceTagOutput() WorkspaceTagOutput
	ToWorkspaceTagOutputWithContext(context.Context) WorkspaceTagOutput
}

type WorkspaceTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (WorkspaceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceTag)(nil)).Elem()
}

func (i WorkspaceTagArgs) ToWorkspaceTagOutput() WorkspaceTagOutput {
	return i.ToWorkspaceTagOutputWithContext(context.Background())
}

func (i WorkspaceTagArgs) ToWorkspaceTagOutputWithContext(ctx context.Context) WorkspaceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceTagOutput)
}

// WorkspaceTagArrayInput is an input type that accepts WorkspaceTagArray and WorkspaceTagArrayOutput values.
// You can construct a concrete instance of `WorkspaceTagArrayInput` via:
//
//	WorkspaceTagArray{ WorkspaceTagArgs{...} }
type WorkspaceTagArrayInput interface {
	pulumi.Input

	ToWorkspaceTagArrayOutput() WorkspaceTagArrayOutput
	ToWorkspaceTagArrayOutputWithContext(context.Context) WorkspaceTagArrayOutput
}

type WorkspaceTagArray []WorkspaceTagInput

func (WorkspaceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkspaceTag)(nil)).Elem()
}

func (i WorkspaceTagArray) ToWorkspaceTagArrayOutput() WorkspaceTagArrayOutput {
	return i.ToWorkspaceTagArrayOutputWithContext(context.Background())
}

func (i WorkspaceTagArray) ToWorkspaceTagArrayOutputWithContext(ctx context.Context) WorkspaceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceTagArrayOutput)
}

type WorkspaceTagOutput struct{ *pulumi.OutputState }

func (WorkspaceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceTag)(nil)).Elem()
}

func (o WorkspaceTagOutput) ToWorkspaceTagOutput() WorkspaceTagOutput {
	return o
}

func (o WorkspaceTagOutput) ToWorkspaceTagOutputWithContext(ctx context.Context) WorkspaceTagOutput {
	return o
}

// 标签键。
func (o WorkspaceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o WorkspaceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v WorkspaceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type WorkspaceTagArrayOutput struct{ *pulumi.OutputState }

func (WorkspaceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkspaceTag)(nil)).Elem()
}

func (o WorkspaceTagArrayOutput) ToWorkspaceTagArrayOutput() WorkspaceTagArrayOutput {
	return o
}

func (o WorkspaceTagArrayOutput) ToWorkspaceTagArrayOutputWithContext(ctx context.Context) WorkspaceTagArrayOutput {
	return o
}

func (o WorkspaceTagArrayOutput) Index(i pulumi.IntInput) WorkspaceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkspaceTag {
		return vs[0].([]WorkspaceTag)[vs[1].(int)]
	}).(WorkspaceTagOutput)
}

type WorkspaceUsage struct {
	// 活跃时序数。
	ActiveSeries *int `pulumi:"activeSeries"`
	// 每秒写入样本数。
	IngestedSamplesPerSecond *float64 `pulumi:"ingestedSamplesPerSecond"`
}

// WorkspaceUsageInput is an input type that accepts WorkspaceUsageArgs and WorkspaceUsageOutput values.
// You can construct a concrete instance of `WorkspaceUsageInput` via:
//
//	WorkspaceUsageArgs{...}
type WorkspaceUsageInput interface {
	pulumi.Input

	ToWorkspaceUsageOutput() WorkspaceUsageOutput
	ToWorkspaceUsageOutputWithContext(context.Context) WorkspaceUsageOutput
}

type WorkspaceUsageArgs struct {
	// 活跃时序数。
	ActiveSeries pulumi.IntPtrInput `pulumi:"activeSeries"`
	// 每秒写入样本数。
	IngestedSamplesPerSecond pulumi.Float64PtrInput `pulumi:"ingestedSamplesPerSecond"`
}

func (WorkspaceUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceUsage)(nil)).Elem()
}

func (i WorkspaceUsageArgs) ToWorkspaceUsageOutput() WorkspaceUsageOutput {
	return i.ToWorkspaceUsageOutputWithContext(context.Background())
}

func (i WorkspaceUsageArgs) ToWorkspaceUsageOutputWithContext(ctx context.Context) WorkspaceUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceUsageOutput)
}

func (i WorkspaceUsageArgs) ToWorkspaceUsagePtrOutput() WorkspaceUsagePtrOutput {
	return i.ToWorkspaceUsagePtrOutputWithContext(context.Background())
}

func (i WorkspaceUsageArgs) ToWorkspaceUsagePtrOutputWithContext(ctx context.Context) WorkspaceUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceUsageOutput).ToWorkspaceUsagePtrOutputWithContext(ctx)
}

// WorkspaceUsagePtrInput is an input type that accepts WorkspaceUsageArgs, WorkspaceUsagePtr and WorkspaceUsagePtrOutput values.
// You can construct a concrete instance of `WorkspaceUsagePtrInput` via:
//
//	        WorkspaceUsageArgs{...}
//
//	or:
//
//	        nil
type WorkspaceUsagePtrInput interface {
	pulumi.Input

	ToWorkspaceUsagePtrOutput() WorkspaceUsagePtrOutput
	ToWorkspaceUsagePtrOutputWithContext(context.Context) WorkspaceUsagePtrOutput
}

type workspaceUsagePtrType WorkspaceUsageArgs

func WorkspaceUsagePtr(v *WorkspaceUsageArgs) WorkspaceUsagePtrInput {
	return (*workspaceUsagePtrType)(v)
}

func (*workspaceUsagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceUsage)(nil)).Elem()
}

func (i *workspaceUsagePtrType) ToWorkspaceUsagePtrOutput() WorkspaceUsagePtrOutput {
	return i.ToWorkspaceUsagePtrOutputWithContext(context.Background())
}

func (i *workspaceUsagePtrType) ToWorkspaceUsagePtrOutputWithContext(ctx context.Context) WorkspaceUsagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspaceUsagePtrOutput)
}

type WorkspaceUsageOutput struct{ *pulumi.OutputState }

func (WorkspaceUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspaceUsage)(nil)).Elem()
}

func (o WorkspaceUsageOutput) ToWorkspaceUsageOutput() WorkspaceUsageOutput {
	return o
}

func (o WorkspaceUsageOutput) ToWorkspaceUsageOutputWithContext(ctx context.Context) WorkspaceUsageOutput {
	return o
}

func (o WorkspaceUsageOutput) ToWorkspaceUsagePtrOutput() WorkspaceUsagePtrOutput {
	return o.ToWorkspaceUsagePtrOutputWithContext(context.Background())
}

func (o WorkspaceUsageOutput) ToWorkspaceUsagePtrOutputWithContext(ctx context.Context) WorkspaceUsagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v WorkspaceUsage) *WorkspaceUsage {
		return &v
	}).(WorkspaceUsagePtrOutput)
}

// 活跃时序数。
func (o WorkspaceUsageOutput) ActiveSeries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v WorkspaceUsage) *int { return v.ActiveSeries }).(pulumi.IntPtrOutput)
}

// 每秒写入样本数。
func (o WorkspaceUsageOutput) IngestedSamplesPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v WorkspaceUsage) *float64 { return v.IngestedSamplesPerSecond }).(pulumi.Float64PtrOutput)
}

type WorkspaceUsagePtrOutput struct{ *pulumi.OutputState }

func (WorkspaceUsagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkspaceUsage)(nil)).Elem()
}

func (o WorkspaceUsagePtrOutput) ToWorkspaceUsagePtrOutput() WorkspaceUsagePtrOutput {
	return o
}

func (o WorkspaceUsagePtrOutput) ToWorkspaceUsagePtrOutputWithContext(ctx context.Context) WorkspaceUsagePtrOutput {
	return o
}

func (o WorkspaceUsagePtrOutput) Elem() WorkspaceUsageOutput {
	return o.ApplyT(func(v *WorkspaceUsage) WorkspaceUsage {
		if v != nil {
			return *v
		}
		var ret WorkspaceUsage
		return ret
	}).(WorkspaceUsageOutput)
}

// 活跃时序数。
func (o WorkspaceUsagePtrOutput) ActiveSeries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *WorkspaceUsage) *int {
		if v == nil {
			return nil
		}
		return v.ActiveSeries
	}).(pulumi.IntPtrOutput)
}

// 每秒写入样本数。
func (o WorkspaceUsagePtrOutput) IngestedSamplesPerSecond() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *WorkspaceUsage) *float64 {
		if v == nil {
			return nil
		}
		return v.IngestedSamplesPerSecond
	}).(pulumi.Float64PtrOutput)
}

type GetWorkspaceInstanceType struct {
	// 最大活跃时序数。
	ActiveSeries int `pulumi:"activeSeries"`
	// 可用区（az）数。
	AvailabilityZoneReplicas int `pulumi:"availabilityZoneReplicas"`
	// 降采样策略。
	DownsamplingPeriods []string `pulumi:"downsamplingPeriods"`
	// 最大每秒写入样本数。
	IngestSamplesPerSecond int `pulumi:"ingestSamplesPerSecond"`
	// 最大查询并发数。
	QueryConcurrency int `pulumi:"queryConcurrency"`
	// 最大查询 QPS。
	QueryPerSecond int `pulumi:"queryPerSecond"`
	// 每个可用区（az）的数据副本数。
	ReplicasPerZone int `pulumi:"replicasPerZone"`
	// 最长数据保留时间。
	RetentionPeriod string `pulumi:"retentionPeriod"`
	// 最大每秒扫描样本数。
	ScanSamplesPerSecond int `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。
	ScanSeriesPerSecond int `pulumi:"scanSeriesPerSecond"`
}

// GetWorkspaceInstanceTypeInput is an input type that accepts GetWorkspaceInstanceTypeArgs and GetWorkspaceInstanceTypeOutput values.
// You can construct a concrete instance of `GetWorkspaceInstanceTypeInput` via:
//
//	GetWorkspaceInstanceTypeArgs{...}
type GetWorkspaceInstanceTypeInput interface {
	pulumi.Input

	ToGetWorkspaceInstanceTypeOutput() GetWorkspaceInstanceTypeOutput
	ToGetWorkspaceInstanceTypeOutputWithContext(context.Context) GetWorkspaceInstanceTypeOutput
}

type GetWorkspaceInstanceTypeArgs struct {
	// 最大活跃时序数。
	ActiveSeries pulumi.IntInput `pulumi:"activeSeries"`
	// 可用区（az）数。
	AvailabilityZoneReplicas pulumi.IntInput `pulumi:"availabilityZoneReplicas"`
	// 降采样策略。
	DownsamplingPeriods pulumi.StringArrayInput `pulumi:"downsamplingPeriods"`
	// 最大每秒写入样本数。
	IngestSamplesPerSecond pulumi.IntInput `pulumi:"ingestSamplesPerSecond"`
	// 最大查询并发数。
	QueryConcurrency pulumi.IntInput `pulumi:"queryConcurrency"`
	// 最大查询 QPS。
	QueryPerSecond pulumi.IntInput `pulumi:"queryPerSecond"`
	// 每个可用区（az）的数据副本数。
	ReplicasPerZone pulumi.IntInput `pulumi:"replicasPerZone"`
	// 最长数据保留时间。
	RetentionPeriod pulumi.StringInput `pulumi:"retentionPeriod"`
	// 最大每秒扫描样本数。
	ScanSamplesPerSecond pulumi.IntInput `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。
	ScanSeriesPerSecond pulumi.IntInput `pulumi:"scanSeriesPerSecond"`
}

func (GetWorkspaceInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceInstanceType)(nil)).Elem()
}

func (i GetWorkspaceInstanceTypeArgs) ToGetWorkspaceInstanceTypeOutput() GetWorkspaceInstanceTypeOutput {
	return i.ToGetWorkspaceInstanceTypeOutputWithContext(context.Background())
}

func (i GetWorkspaceInstanceTypeArgs) ToGetWorkspaceInstanceTypeOutputWithContext(ctx context.Context) GetWorkspaceInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceInstanceTypeOutput)
}

type GetWorkspaceInstanceTypeOutput struct{ *pulumi.OutputState }

func (GetWorkspaceInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceInstanceType)(nil)).Elem()
}

func (o GetWorkspaceInstanceTypeOutput) ToGetWorkspaceInstanceTypeOutput() GetWorkspaceInstanceTypeOutput {
	return o
}

func (o GetWorkspaceInstanceTypeOutput) ToGetWorkspaceInstanceTypeOutputWithContext(ctx context.Context) GetWorkspaceInstanceTypeOutput {
	return o
}

// 最大活跃时序数。
func (o GetWorkspaceInstanceTypeOutput) ActiveSeries() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.ActiveSeries }).(pulumi.IntOutput)
}

// 可用区（az）数。
func (o GetWorkspaceInstanceTypeOutput) AvailabilityZoneReplicas() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.AvailabilityZoneReplicas }).(pulumi.IntOutput)
}

// 降采样策略。
func (o GetWorkspaceInstanceTypeOutput) DownsamplingPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) []string { return v.DownsamplingPeriods }).(pulumi.StringArrayOutput)
}

// 最大每秒写入样本数。
func (o GetWorkspaceInstanceTypeOutput) IngestSamplesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.IngestSamplesPerSecond }).(pulumi.IntOutput)
}

// 最大查询并发数。
func (o GetWorkspaceInstanceTypeOutput) QueryConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.QueryConcurrency }).(pulumi.IntOutput)
}

// 最大查询 QPS。
func (o GetWorkspaceInstanceTypeOutput) QueryPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.QueryPerSecond }).(pulumi.IntOutput)
}

// 每个可用区（az）的数据副本数。
func (o GetWorkspaceInstanceTypeOutput) ReplicasPerZone() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.ReplicasPerZone }).(pulumi.IntOutput)
}

// 最长数据保留时间。
func (o GetWorkspaceInstanceTypeOutput) RetentionPeriod() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) string { return v.RetentionPeriod }).(pulumi.StringOutput)
}

// 最大每秒扫描样本数。
func (o GetWorkspaceInstanceTypeOutput) ScanSamplesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.ScanSamplesPerSecond }).(pulumi.IntOutput)
}

// 最大每秒扫描时序数。
func (o GetWorkspaceInstanceTypeOutput) ScanSeriesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceInstanceType) int { return v.ScanSeriesPerSecond }).(pulumi.IntOutput)
}

type GetWorkspaceQuota struct {
	// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
	ActiveSeries int `pulumi:"activeSeries"`
	// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
	IngestSamplesPerSecond int `pulumi:"ingestSamplesPerSecond"`
	// 最大查询 QPS。整数形式，默认取值范围为 1～500。
	QueryPerSecond int `pulumi:"queryPerSecond"`
	// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
	ScanSamplesPerSecond int `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
	ScanSeriesPerSecond int `pulumi:"scanSeriesPerSecond"`
}

// GetWorkspaceQuotaInput is an input type that accepts GetWorkspaceQuotaArgs and GetWorkspaceQuotaOutput values.
// You can construct a concrete instance of `GetWorkspaceQuotaInput` via:
//
//	GetWorkspaceQuotaArgs{...}
type GetWorkspaceQuotaInput interface {
	pulumi.Input

	ToGetWorkspaceQuotaOutput() GetWorkspaceQuotaOutput
	ToGetWorkspaceQuotaOutputWithContext(context.Context) GetWorkspaceQuotaOutput
}

type GetWorkspaceQuotaArgs struct {
	// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
	ActiveSeries pulumi.IntInput `pulumi:"activeSeries"`
	// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
	IngestSamplesPerSecond pulumi.IntInput `pulumi:"ingestSamplesPerSecond"`
	// 最大查询 QPS。整数形式，默认取值范围为 1～500。
	QueryPerSecond pulumi.IntInput `pulumi:"queryPerSecond"`
	// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
	ScanSamplesPerSecond pulumi.IntInput `pulumi:"scanSamplesPerSecond"`
	// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
	ScanSeriesPerSecond pulumi.IntInput `pulumi:"scanSeriesPerSecond"`
}

func (GetWorkspaceQuotaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceQuota)(nil)).Elem()
}

func (i GetWorkspaceQuotaArgs) ToGetWorkspaceQuotaOutput() GetWorkspaceQuotaOutput {
	return i.ToGetWorkspaceQuotaOutputWithContext(context.Background())
}

func (i GetWorkspaceQuotaArgs) ToGetWorkspaceQuotaOutputWithContext(ctx context.Context) GetWorkspaceQuotaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceQuotaOutput)
}

type GetWorkspaceQuotaOutput struct{ *pulumi.OutputState }

func (GetWorkspaceQuotaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceQuota)(nil)).Elem()
}

func (o GetWorkspaceQuotaOutput) ToGetWorkspaceQuotaOutput() GetWorkspaceQuotaOutput {
	return o
}

func (o GetWorkspaceQuotaOutput) ToGetWorkspaceQuotaOutputWithContext(ctx context.Context) GetWorkspaceQuotaOutput {
	return o
}

// 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
func (o GetWorkspaceQuotaOutput) ActiveSeries() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceQuota) int { return v.ActiveSeries }).(pulumi.IntOutput)
}

// 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
func (o GetWorkspaceQuotaOutput) IngestSamplesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceQuota) int { return v.IngestSamplesPerSecond }).(pulumi.IntOutput)
}

// 最大查询 QPS。整数形式，默认取值范围为 1～500。
func (o GetWorkspaceQuotaOutput) QueryPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceQuota) int { return v.QueryPerSecond }).(pulumi.IntOutput)
}

// 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
func (o GetWorkspaceQuotaOutput) ScanSamplesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceQuota) int { return v.ScanSamplesPerSecond }).(pulumi.IntOutput)
}

// 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
func (o GetWorkspaceQuotaOutput) ScanSeriesPerSecond() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceQuota) int { return v.ScanSeriesPerSecond }).(pulumi.IntOutput)
}

type GetWorkspaceTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetWorkspaceTagInput is an input type that accepts GetWorkspaceTagArgs and GetWorkspaceTagOutput values.
// You can construct a concrete instance of `GetWorkspaceTagInput` via:
//
//	GetWorkspaceTagArgs{...}
type GetWorkspaceTagInput interface {
	pulumi.Input

	ToGetWorkspaceTagOutput() GetWorkspaceTagOutput
	ToGetWorkspaceTagOutputWithContext(context.Context) GetWorkspaceTagOutput
}

type GetWorkspaceTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetWorkspaceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceTag)(nil)).Elem()
}

func (i GetWorkspaceTagArgs) ToGetWorkspaceTagOutput() GetWorkspaceTagOutput {
	return i.ToGetWorkspaceTagOutputWithContext(context.Background())
}

func (i GetWorkspaceTagArgs) ToGetWorkspaceTagOutputWithContext(ctx context.Context) GetWorkspaceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceTagOutput)
}

// GetWorkspaceTagArrayInput is an input type that accepts GetWorkspaceTagArray and GetWorkspaceTagArrayOutput values.
// You can construct a concrete instance of `GetWorkspaceTagArrayInput` via:
//
//	GetWorkspaceTagArray{ GetWorkspaceTagArgs{...} }
type GetWorkspaceTagArrayInput interface {
	pulumi.Input

	ToGetWorkspaceTagArrayOutput() GetWorkspaceTagArrayOutput
	ToGetWorkspaceTagArrayOutputWithContext(context.Context) GetWorkspaceTagArrayOutput
}

type GetWorkspaceTagArray []GetWorkspaceTagInput

func (GetWorkspaceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkspaceTag)(nil)).Elem()
}

func (i GetWorkspaceTagArray) ToGetWorkspaceTagArrayOutput() GetWorkspaceTagArrayOutput {
	return i.ToGetWorkspaceTagArrayOutputWithContext(context.Background())
}

func (i GetWorkspaceTagArray) ToGetWorkspaceTagArrayOutputWithContext(ctx context.Context) GetWorkspaceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceTagArrayOutput)
}

type GetWorkspaceTagOutput struct{ *pulumi.OutputState }

func (GetWorkspaceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceTag)(nil)).Elem()
}

func (o GetWorkspaceTagOutput) ToGetWorkspaceTagOutput() GetWorkspaceTagOutput {
	return o
}

func (o GetWorkspaceTagOutput) ToGetWorkspaceTagOutputWithContext(ctx context.Context) GetWorkspaceTagOutput {
	return o
}

// 标签键。
func (o GetWorkspaceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetWorkspaceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetWorkspaceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetWorkspaceTagArrayOutput struct{ *pulumi.OutputState }

func (GetWorkspaceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetWorkspaceTag)(nil)).Elem()
}

func (o GetWorkspaceTagArrayOutput) ToGetWorkspaceTagArrayOutput() GetWorkspaceTagArrayOutput {
	return o
}

func (o GetWorkspaceTagArrayOutput) ToGetWorkspaceTagArrayOutputWithContext(ctx context.Context) GetWorkspaceTagArrayOutput {
	return o
}

func (o GetWorkspaceTagArrayOutput) Index(i pulumi.IntInput) GetWorkspaceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetWorkspaceTag {
		return vs[0].([]GetWorkspaceTag)[vs[1].(int)]
	}).(GetWorkspaceTagOutput)
}

type GetWorkspaceUsage struct {
	// 活跃时序数。
	ActiveSeries int `pulumi:"activeSeries"`
	// 每秒写入样本数。
	IngestedSamplesPerSecond float64 `pulumi:"ingestedSamplesPerSecond"`
}

// GetWorkspaceUsageInput is an input type that accepts GetWorkspaceUsageArgs and GetWorkspaceUsageOutput values.
// You can construct a concrete instance of `GetWorkspaceUsageInput` via:
//
//	GetWorkspaceUsageArgs{...}
type GetWorkspaceUsageInput interface {
	pulumi.Input

	ToGetWorkspaceUsageOutput() GetWorkspaceUsageOutput
	ToGetWorkspaceUsageOutputWithContext(context.Context) GetWorkspaceUsageOutput
}

type GetWorkspaceUsageArgs struct {
	// 活跃时序数。
	ActiveSeries pulumi.IntInput `pulumi:"activeSeries"`
	// 每秒写入样本数。
	IngestedSamplesPerSecond pulumi.Float64Input `pulumi:"ingestedSamplesPerSecond"`
}

func (GetWorkspaceUsageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceUsage)(nil)).Elem()
}

func (i GetWorkspaceUsageArgs) ToGetWorkspaceUsageOutput() GetWorkspaceUsageOutput {
	return i.ToGetWorkspaceUsageOutputWithContext(context.Background())
}

func (i GetWorkspaceUsageArgs) ToGetWorkspaceUsageOutputWithContext(ctx context.Context) GetWorkspaceUsageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetWorkspaceUsageOutput)
}

type GetWorkspaceUsageOutput struct{ *pulumi.OutputState }

func (GetWorkspaceUsageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetWorkspaceUsage)(nil)).Elem()
}

func (o GetWorkspaceUsageOutput) ToGetWorkspaceUsageOutput() GetWorkspaceUsageOutput {
	return o
}

func (o GetWorkspaceUsageOutput) ToGetWorkspaceUsageOutputWithContext(ctx context.Context) GetWorkspaceUsageOutput {
	return o
}

// 活跃时序数。
func (o GetWorkspaceUsageOutput) ActiveSeries() pulumi.IntOutput {
	return o.ApplyT(func(v GetWorkspaceUsage) int { return v.ActiveSeries }).(pulumi.IntOutput)
}

// 每秒写入样本数。
func (o GetWorkspaceUsageOutput) IngestedSamplesPerSecond() pulumi.Float64Output {
	return o.ApplyT(func(v GetWorkspaceUsage) float64 { return v.IngestedSamplesPerSecond }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInstanceTypeInput)(nil)).Elem(), WorkspaceInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceInstanceTypePtrInput)(nil)).Elem(), WorkspaceInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceQuotaInput)(nil)).Elem(), WorkspaceQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceQuotaPtrInput)(nil)).Elem(), WorkspaceQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceTagInput)(nil)).Elem(), WorkspaceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceTagArrayInput)(nil)).Elem(), WorkspaceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceUsageInput)(nil)).Elem(), WorkspaceUsageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspaceUsagePtrInput)(nil)).Elem(), WorkspaceUsageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceInstanceTypeInput)(nil)).Elem(), GetWorkspaceInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceQuotaInput)(nil)).Elem(), GetWorkspaceQuotaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceTagInput)(nil)).Elem(), GetWorkspaceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceTagArrayInput)(nil)).Elem(), GetWorkspaceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetWorkspaceUsageInput)(nil)).Elem(), GetWorkspaceUsageArgs{})
	pulumi.RegisterOutputType(WorkspaceInstanceTypeOutput{})
	pulumi.RegisterOutputType(WorkspaceInstanceTypePtrOutput{})
	pulumi.RegisterOutputType(WorkspaceQuotaOutput{})
	pulumi.RegisterOutputType(WorkspaceQuotaPtrOutput{})
	pulumi.RegisterOutputType(WorkspaceTagOutput{})
	pulumi.RegisterOutputType(WorkspaceTagArrayOutput{})
	pulumi.RegisterOutputType(WorkspaceUsageOutput{})
	pulumi.RegisterOutputType(WorkspaceUsagePtrOutput{})
	pulumi.RegisterOutputType(GetWorkspaceInstanceTypeOutput{})
	pulumi.RegisterOutputType(GetWorkspaceQuotaOutput{})
	pulumi.RegisterOutputType(GetWorkspaceTagOutput{})
	pulumi.RegisterOutputType(GetWorkspaceTagArrayOutput{})
	pulumi.RegisterOutputType(GetWorkspaceUsageOutput{})
}
