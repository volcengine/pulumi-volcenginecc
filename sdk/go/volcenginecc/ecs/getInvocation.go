// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::ECS::Invocation
func LookupInvocation(ctx *pulumi.Context, args *LookupInvocationArgs, opts ...pulumi.InvokeOption) (*LookupInvocationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInvocationResult
	err := ctx.Invoke("volcenginecc:ecs/getInvocation:getInvocation", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInvocation.
type LookupInvocationArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getInvocation.
type LookupInvocationResult struct {
	// 命令内容。
	CommandContent string `pulumi:"commandContent"`
	// 被调用命令的描述。
	CommandDescription string `pulumi:"commandDescription"`
	// 命令ID。
	CommandId string `pulumi:"commandId"`
	// 任务触发时的命令名称。
	CommandName string `pulumi:"commandName"`
	// 被调用命令的提供方。
	CommandProvider string `pulumi:"commandProvider"`
	// 作业触发的命令类型。
	CommandType string `pulumi:"commandType"`
	// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
	EnableParameter bool `pulumi:"enableParameter"`
	// 任务结束时间。
	EndTime string `pulumi:"endTime"`
	// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
	Frequency string `pulumi:"frequency"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 实例ID列表，最多支持200个ID。
	InstanceIds []string `pulumi:"instanceIds"`
	// 执行实例数量。
	InstanceNumber int `pulumi:"instanceNumber"`
	// 作业描述，默认为空字符串，不超过256个字符。
	InvocationDescription string `pulumi:"invocationDescription"`
	// 任务执行 ID。
	InvocationId string `pulumi:"invocationId"`
	// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
	InvocationName string `pulumi:"invocationName"`
	// 单台实例执行命令的结果。
	InvocationResults []GetInvocationInvocationResult `pulumi:"invocationResults"`
	// 命令执行的总执行状态。
	InvocationStatus string `pulumi:"invocationStatus"`
	// 执行时间。
	LaunchTime           string                             `pulumi:"launchTime"`
	ParameterDefinitions []GetInvocationParameterDefinition `pulumi:"parameterDefinitions"`
	// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
	Parameters string `pulumi:"parameters"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName string `pulumi:"projectName"`
	// 周期结束时间，仅适用于周期任务（Rate）。
	RecurrenceEndTime string `pulumi:"recurrenceEndTime"`
	// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
	RepeatMode string `pulumi:"repeatMode"`
	// 任务开始时间。
	StartTime string             `pulumi:"startTime"`
	Tags      []GetInvocationTag `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
	Timeout int `pulumi:"timeout"`
	// 在ECS实例中执行命令的用户名称。
	Username string `pulumi:"username"`
	// 自定义windows用户的密码。
	WindowsPassword string `pulumi:"windowsPassword"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir string `pulumi:"workingDir"`
}

func LookupInvocationOutput(ctx *pulumi.Context, args LookupInvocationOutputArgs, opts ...pulumi.InvokeOption) LookupInvocationResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupInvocationResultOutput, error) {
			args := v.(LookupInvocationArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:ecs/getInvocation:getInvocation", args, LookupInvocationResultOutput{}, options).(LookupInvocationResultOutput), nil
		}).(LookupInvocationResultOutput)
}

// A collection of arguments for invoking getInvocation.
type LookupInvocationOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupInvocationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInvocationArgs)(nil)).Elem()
}

// A collection of values returned by getInvocation.
type LookupInvocationResultOutput struct{ *pulumi.OutputState }

func (LookupInvocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInvocationResult)(nil)).Elem()
}

func (o LookupInvocationResultOutput) ToLookupInvocationResultOutput() LookupInvocationResultOutput {
	return o
}

func (o LookupInvocationResultOutput) ToLookupInvocationResultOutputWithContext(ctx context.Context) LookupInvocationResultOutput {
	return o
}

// 命令内容。
func (o LookupInvocationResultOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.CommandContent }).(pulumi.StringOutput)
}

// 被调用命令的描述。
func (o LookupInvocationResultOutput) CommandDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.CommandDescription }).(pulumi.StringOutput)
}

// 命令ID。
func (o LookupInvocationResultOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.CommandId }).(pulumi.StringOutput)
}

// 任务触发时的命令名称。
func (o LookupInvocationResultOutput) CommandName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.CommandName }).(pulumi.StringOutput)
}

// 被调用命令的提供方。
func (o LookupInvocationResultOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// 作业触发的命令类型。
func (o LookupInvocationResultOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.CommandType }).(pulumi.StringOutput)
}

// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
func (o LookupInvocationResultOutput) EnableParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInvocationResult) bool { return v.EnableParameter }).(pulumi.BoolOutput)
}

// 任务结束时间。
func (o LookupInvocationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
func (o LookupInvocationResultOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.Frequency }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupInvocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.Id }).(pulumi.StringOutput)
}

// 实例ID列表，最多支持200个ID。
func (o LookupInvocationResultOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupInvocationResult) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// 执行实例数量。
func (o LookupInvocationResultOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInvocationResult) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// 作业描述，默认为空字符串，不超过256个字符。
func (o LookupInvocationResultOutput) InvocationDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.InvocationDescription }).(pulumi.StringOutput)
}

// 任务执行 ID。
func (o LookupInvocationResultOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.InvocationId }).(pulumi.StringOutput)
}

// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
func (o LookupInvocationResultOutput) InvocationName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.InvocationName }).(pulumi.StringOutput)
}

// 单台实例执行命令的结果。
func (o LookupInvocationResultOutput) InvocationResults() GetInvocationInvocationResultArrayOutput {
	return o.ApplyT(func(v LookupInvocationResult) []GetInvocationInvocationResult { return v.InvocationResults }).(GetInvocationInvocationResultArrayOutput)
}

// 命令执行的总执行状态。
func (o LookupInvocationResultOutput) InvocationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.InvocationStatus }).(pulumi.StringOutput)
}

// 执行时间。
func (o LookupInvocationResultOutput) LaunchTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.LaunchTime }).(pulumi.StringOutput)
}

func (o LookupInvocationResultOutput) ParameterDefinitions() GetInvocationParameterDefinitionArrayOutput {
	return o.ApplyT(func(v LookupInvocationResult) []GetInvocationParameterDefinition { return v.ParameterDefinitions }).(GetInvocationParameterDefinitionArrayOutput)
}

// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
func (o LookupInvocationResultOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.Parameters }).(pulumi.StringOutput)
}

// 资源所属项目，一个资源只能归属于一个项目。
func (o LookupInvocationResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 周期结束时间，仅适用于周期任务（Rate）。
func (o LookupInvocationResultOutput) RecurrenceEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.RecurrenceEndTime }).(pulumi.StringOutput)
}

// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
func (o LookupInvocationResultOutput) RepeatMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.RepeatMode }).(pulumi.StringOutput)
}

// 任务开始时间。
func (o LookupInvocationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

func (o LookupInvocationResultOutput) Tags() GetInvocationTagArrayOutput {
	return o.ApplyT(func(v LookupInvocationResult) []GetInvocationTag { return v.Tags }).(GetInvocationTagArrayOutput)
}

// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
func (o LookupInvocationResultOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInvocationResult) int { return v.Timeout }).(pulumi.IntOutput)
}

// 在ECS实例中执行命令的用户名称。
func (o LookupInvocationResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.Username }).(pulumi.StringOutput)
}

// 自定义windows用户的密码。
func (o LookupInvocationResultOutput) WindowsPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.WindowsPassword }).(pulumi.StringOutput)
}

// 创建的命令在ECS实例中运行的目录。
func (o LookupInvocationResultOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInvocationResult) string { return v.WorkingDir }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInvocationResultOutput{})
}
