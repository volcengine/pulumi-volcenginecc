// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 云助手是火山引擎打造的原生自动化运维工具。您可以创建立即执行、周期执行、定时执行的作业任务，创建完成后完，云助手客户端将按照执行模式自动开始执行。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewInvocation(ctx, "InvocationDemo", &ecs.InvocationArgs{
//				InvocationName:        pulumi.String("InvocationDemo"),
//				InvocationDescription: pulumi.String("InvocationDemo desc"),
//				WorkingDir:            pulumi.String("/home"),
//				Username:              pulumi.String("InvocationDemo"),
//				WindowsPassword:       pulumi.String("********"),
//				Timeout:               pulumi.Int(60),
//				InstanceIds: pulumi.StringArray{
//					pulumi.String("i-ye2v6l0pvkqc6inxxxxx"),
//				},
//				RepeatMode:        pulumi.String("Rate"),
//				Frequency:         pulumi.String("1h"),
//				LaunchTime:        pulumi.String("2025-08-30T11:10Z"),
//				RecurrenceEndTime: pulumi.String("2025-08-31T11:04Z"),
//				ProjectName:       pulumi.String("default"),
//				Tags: ecs.InvocationTagArray{
//					&ecs.InvocationTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//				CommandId:  pulumi.String("cmd-ye28kugp249tzrexxxxx"),
//				Parameters: pulumi.String("{\"dirname\":\"10\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:ecs/invocation:Invocation example "invocation_id"
// ```
type Invocation struct {
	pulumi.CustomResourceState

	// 命令内容。
	CommandContent pulumi.StringOutput `pulumi:"commandContent"`
	// 被调用命令的描述。
	CommandDescription pulumi.StringOutput `pulumi:"commandDescription"`
	// 命令ID。
	CommandId pulumi.StringOutput `pulumi:"commandId"`
	// 任务触发时的命令名称。
	CommandName pulumi.StringOutput `pulumi:"commandName"`
	// 被调用命令的提供方。
	CommandProvider pulumi.StringOutput `pulumi:"commandProvider"`
	// 作业触发的命令类型。
	CommandType pulumi.StringOutput `pulumi:"commandType"`
	// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
	EnableParameter pulumi.BoolOutput `pulumi:"enableParameter"`
	// 任务结束时间。
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
	Frequency pulumi.StringOutput `pulumi:"frequency"`
	// 实例ID列表，最多支持200个ID。
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// 执行实例数量。
	InstanceNumber pulumi.IntOutput `pulumi:"instanceNumber"`
	// 作业描述，默认为空字符串，不超过256个字符。
	InvocationDescription pulumi.StringOutput `pulumi:"invocationDescription"`
	// 任务执行 ID。
	InvocationId pulumi.StringOutput `pulumi:"invocationId"`
	// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
	InvocationName    pulumi.StringOutput                   `pulumi:"invocationName"`
	InvocationResults InvocationInvocationResultArrayOutput `pulumi:"invocationResults"`
	// 命令执行的总执行状态。
	InvocationStatus pulumi.StringOutput `pulumi:"invocationStatus"`
	// 执行时间。
	LaunchTime           pulumi.StringOutput                      `pulumi:"launchTime"`
	ParameterDefinitions InvocationParameterDefinitionArrayOutput `pulumi:"parameterDefinitions"`
	// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
	Parameters pulumi.StringOutput `pulumi:"parameters"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 周期结束时间，仅适用于周期任务（Rate）。
	RecurrenceEndTime pulumi.StringOutput `pulumi:"recurrenceEndTime"`
	// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
	RepeatMode pulumi.StringOutput `pulumi:"repeatMode"`
	// 任务开始时间。
	StartTime pulumi.StringOutput      `pulumi:"startTime"`
	Tags      InvocationTagArrayOutput `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// 在ECS实例中执行命令的用户名称。
	Username pulumi.StringOutput `pulumi:"username"`
	// 自定义windows用户的密码。
	WindowsPassword pulumi.StringOutput `pulumi:"windowsPassword"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir pulumi.StringOutput `pulumi:"workingDir"`
}

// NewInvocation registers a new resource with the given unique name, arguments, and options.
func NewInvocation(ctx *pulumi.Context,
	name string, args *InvocationArgs, opts ...pulumi.ResourceOption) (*Invocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommandId == nil {
		return nil, errors.New("invalid value for required argument 'CommandId'")
	}
	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	if args.InvocationName == nil {
		return nil, errors.New("invalid value for required argument 'InvocationName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Invocation
	err := ctx.RegisterResource("volcenginecc:ecs/invocation:Invocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvocation gets an existing Invocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvocationState, opts ...pulumi.ResourceOption) (*Invocation, error) {
	var resource Invocation
	err := ctx.ReadResource("volcenginecc:ecs/invocation:Invocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Invocation resources.
type invocationState struct {
	// 命令内容。
	CommandContent *string `pulumi:"commandContent"`
	// 被调用命令的描述。
	CommandDescription *string `pulumi:"commandDescription"`
	// 命令ID。
	CommandId *string `pulumi:"commandId"`
	// 任务触发时的命令名称。
	CommandName *string `pulumi:"commandName"`
	// 被调用命令的提供方。
	CommandProvider *string `pulumi:"commandProvider"`
	// 作业触发的命令类型。
	CommandType *string `pulumi:"commandType"`
	// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
	EnableParameter *bool `pulumi:"enableParameter"`
	// 任务结束时间。
	EndTime *string `pulumi:"endTime"`
	// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
	Frequency *string `pulumi:"frequency"`
	// 实例ID列表，最多支持200个ID。
	InstanceIds []string `pulumi:"instanceIds"`
	// 执行实例数量。
	InstanceNumber *int `pulumi:"instanceNumber"`
	// 作业描述，默认为空字符串，不超过256个字符。
	InvocationDescription *string `pulumi:"invocationDescription"`
	// 任务执行 ID。
	InvocationId *string `pulumi:"invocationId"`
	// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
	InvocationName    *string                      `pulumi:"invocationName"`
	InvocationResults []InvocationInvocationResult `pulumi:"invocationResults"`
	// 命令执行的总执行状态。
	InvocationStatus *string `pulumi:"invocationStatus"`
	// 执行时间。
	LaunchTime           *string                         `pulumi:"launchTime"`
	ParameterDefinitions []InvocationParameterDefinition `pulumi:"parameterDefinitions"`
	// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
	Parameters *string `pulumi:"parameters"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName *string `pulumi:"projectName"`
	// 周期结束时间，仅适用于周期任务（Rate）。
	RecurrenceEndTime *string `pulumi:"recurrenceEndTime"`
	// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
	RepeatMode *string `pulumi:"repeatMode"`
	// 任务开始时间。
	StartTime *string         `pulumi:"startTime"`
	Tags      []InvocationTag `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
	Timeout *int `pulumi:"timeout"`
	// 在ECS实例中执行命令的用户名称。
	Username *string `pulumi:"username"`
	// 自定义windows用户的密码。
	WindowsPassword *string `pulumi:"windowsPassword"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir *string `pulumi:"workingDir"`
}

type InvocationState struct {
	// 命令内容。
	CommandContent pulumi.StringPtrInput
	// 被调用命令的描述。
	CommandDescription pulumi.StringPtrInput
	// 命令ID。
	CommandId pulumi.StringPtrInput
	// 任务触发时的命令名称。
	CommandName pulumi.StringPtrInput
	// 被调用命令的提供方。
	CommandProvider pulumi.StringPtrInput
	// 作业触发的命令类型。
	CommandType pulumi.StringPtrInput
	// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
	EnableParameter pulumi.BoolPtrInput
	// 任务结束时间。
	EndTime pulumi.StringPtrInput
	// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
	Frequency pulumi.StringPtrInput
	// 实例ID列表，最多支持200个ID。
	InstanceIds pulumi.StringArrayInput
	// 执行实例数量。
	InstanceNumber pulumi.IntPtrInput
	// 作业描述，默认为空字符串，不超过256个字符。
	InvocationDescription pulumi.StringPtrInput
	// 任务执行 ID。
	InvocationId pulumi.StringPtrInput
	// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
	InvocationName    pulumi.StringPtrInput
	InvocationResults InvocationInvocationResultArrayInput
	// 命令执行的总执行状态。
	InvocationStatus pulumi.StringPtrInput
	// 执行时间。
	LaunchTime           pulumi.StringPtrInput
	ParameterDefinitions InvocationParameterDefinitionArrayInput
	// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
	Parameters pulumi.StringPtrInput
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName pulumi.StringPtrInput
	// 周期结束时间，仅适用于周期任务（Rate）。
	RecurrenceEndTime pulumi.StringPtrInput
	// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
	RepeatMode pulumi.StringPtrInput
	// 任务开始时间。
	StartTime pulumi.StringPtrInput
	Tags      InvocationTagArrayInput
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
	Timeout pulumi.IntPtrInput
	// 在ECS实例中执行命令的用户名称。
	Username pulumi.StringPtrInput
	// 自定义windows用户的密码。
	WindowsPassword pulumi.StringPtrInput
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir pulumi.StringPtrInput
}

func (InvocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationState)(nil)).Elem()
}

type invocationArgs struct {
	// 命令ID。
	CommandId string `pulumi:"commandId"`
	// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
	Frequency *string `pulumi:"frequency"`
	// 实例ID列表，最多支持200个ID。
	InstanceIds []string `pulumi:"instanceIds"`
	// 作业描述，默认为空字符串，不超过256个字符。
	InvocationDescription *string `pulumi:"invocationDescription"`
	// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
	InvocationName string `pulumi:"invocationName"`
	// 执行时间。
	LaunchTime *string `pulumi:"launchTime"`
	// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
	Parameters *string `pulumi:"parameters"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName *string `pulumi:"projectName"`
	// 周期结束时间，仅适用于周期任务（Rate）。
	RecurrenceEndTime *string `pulumi:"recurrenceEndTime"`
	// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
	RepeatMode *string         `pulumi:"repeatMode"`
	Tags       []InvocationTag `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
	Timeout *int `pulumi:"timeout"`
	// 在ECS实例中执行命令的用户名称。
	Username *string `pulumi:"username"`
	// 自定义windows用户的密码。
	WindowsPassword *string `pulumi:"windowsPassword"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir *string `pulumi:"workingDir"`
}

// The set of arguments for constructing a Invocation resource.
type InvocationArgs struct {
	// 命令ID。
	CommandId pulumi.StringInput
	// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
	Frequency pulumi.StringPtrInput
	// 实例ID列表，最多支持200个ID。
	InstanceIds pulumi.StringArrayInput
	// 作业描述，默认为空字符串，不超过256个字符。
	InvocationDescription pulumi.StringPtrInput
	// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
	InvocationName pulumi.StringInput
	// 执行时间。
	LaunchTime pulumi.StringPtrInput
	// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
	Parameters pulumi.StringPtrInput
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName pulumi.StringPtrInput
	// 周期结束时间，仅适用于周期任务（Rate）。
	RecurrenceEndTime pulumi.StringPtrInput
	// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
	RepeatMode pulumi.StringPtrInput
	Tags       InvocationTagArrayInput
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
	Timeout pulumi.IntPtrInput
	// 在ECS实例中执行命令的用户名称。
	Username pulumi.StringPtrInput
	// 自定义windows用户的密码。
	WindowsPassword pulumi.StringPtrInput
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir pulumi.StringPtrInput
}

func (InvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationArgs)(nil)).Elem()
}

type InvocationInput interface {
	pulumi.Input

	ToInvocationOutput() InvocationOutput
	ToInvocationOutputWithContext(ctx context.Context) InvocationOutput
}

func (*Invocation) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (i *Invocation) ToInvocationOutput() InvocationOutput {
	return i.ToInvocationOutputWithContext(context.Background())
}

func (i *Invocation) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationOutput)
}

// InvocationArrayInput is an input type that accepts InvocationArray and InvocationArrayOutput values.
// You can construct a concrete instance of `InvocationArrayInput` via:
//
//	InvocationArray{ InvocationArgs{...} }
type InvocationArrayInput interface {
	pulumi.Input

	ToInvocationArrayOutput() InvocationArrayOutput
	ToInvocationArrayOutputWithContext(context.Context) InvocationArrayOutput
}

type InvocationArray []InvocationInput

func (InvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (i InvocationArray) ToInvocationArrayOutput() InvocationArrayOutput {
	return i.ToInvocationArrayOutputWithContext(context.Background())
}

func (i InvocationArray) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationArrayOutput)
}

// InvocationMapInput is an input type that accepts InvocationMap and InvocationMapOutput values.
// You can construct a concrete instance of `InvocationMapInput` via:
//
//	InvocationMap{ "key": InvocationArgs{...} }
type InvocationMapInput interface {
	pulumi.Input

	ToInvocationMapOutput() InvocationMapOutput
	ToInvocationMapOutputWithContext(context.Context) InvocationMapOutput
}

type InvocationMap map[string]InvocationInput

func (InvocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (i InvocationMap) ToInvocationMapOutput() InvocationMapOutput {
	return i.ToInvocationMapOutputWithContext(context.Background())
}

func (i InvocationMap) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationMapOutput)
}

type InvocationOutput struct{ *pulumi.OutputState }

func (InvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (o InvocationOutput) ToInvocationOutput() InvocationOutput {
	return o
}

func (o InvocationOutput) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return o
}

// 命令内容。
func (o InvocationOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandContent }).(pulumi.StringOutput)
}

// 被调用命令的描述。
func (o InvocationOutput) CommandDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandDescription }).(pulumi.StringOutput)
}

// 命令ID。
func (o InvocationOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandId }).(pulumi.StringOutput)
}

// 任务触发时的命令名称。
func (o InvocationOutput) CommandName() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandName }).(pulumi.StringOutput)
}

// 被调用命令的提供方。
func (o InvocationOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandProvider }).(pulumi.StringOutput)
}

// 作业触发的命令类型。
func (o InvocationOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandType }).(pulumi.StringOutput)
}

// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
func (o InvocationOutput) EnableParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v *Invocation) pulumi.BoolOutput { return v.EnableParameter }).(pulumi.BoolOutput)
}

// 任务结束时间。
func (o InvocationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// 执行频率。RepeatMode=Rate 时本参数必填。格式：<执行间隔数值><执行间隔单位>，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
func (o InvocationOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Frequency }).(pulumi.StringOutput)
}

// 实例ID列表，最多支持200个ID。
func (o InvocationOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// 执行实例数量。
func (o InvocationOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Invocation) pulumi.IntOutput { return v.InstanceNumber }).(pulumi.IntOutput)
}

// 作业描述，默认为空字符串，不超过256个字符。
func (o InvocationOutput) InvocationDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.InvocationDescription }).(pulumi.StringOutput)
}

// 任务执行 ID。
func (o InvocationOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.InvocationId }).(pulumi.StringOutput)
}

// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
func (o InvocationOutput) InvocationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.InvocationName }).(pulumi.StringOutput)
}

func (o InvocationOutput) InvocationResults() InvocationInvocationResultArrayOutput {
	return o.ApplyT(func(v *Invocation) InvocationInvocationResultArrayOutput { return v.InvocationResults }).(InvocationInvocationResultArrayOutput)
}

// 命令执行的总执行状态。
func (o InvocationOutput) InvocationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.InvocationStatus }).(pulumi.StringOutput)
}

// 执行时间。
func (o InvocationOutput) LaunchTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.LaunchTime }).(pulumi.StringOutput)
}

func (o InvocationOutput) ParameterDefinitions() InvocationParameterDefinitionArrayOutput {
	return o.ApplyT(func(v *Invocation) InvocationParameterDefinitionArrayOutput { return v.ParameterDefinitions }).(InvocationParameterDefinitionArrayOutput)
}

// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
func (o InvocationOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Parameters }).(pulumi.StringOutput)
}

// 资源所属项目，一个资源只能归属于一个项目。
func (o InvocationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 周期结束时间，仅适用于周期任务（Rate）。
func (o InvocationOutput) RecurrenceEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.RecurrenceEndTime }).(pulumi.StringOutput)
}

// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
func (o InvocationOutput) RepeatMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.RepeatMode }).(pulumi.StringOutput)
}

// 任务开始时间。
func (o InvocationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

func (o InvocationOutput) Tags() InvocationTagArrayOutput {
	return o.ApplyT(func(v *Invocation) InvocationTagArrayOutput { return v.Tags }).(InvocationTagArrayOutput)
}

// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
func (o InvocationOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Invocation) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// 在ECS实例中执行命令的用户名称。
func (o InvocationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// 自定义windows用户的密码。
func (o InvocationOutput) WindowsPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.WindowsPassword }).(pulumi.StringOutput)
}

// 创建的命令在ECS实例中运行的目录。
func (o InvocationOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.WorkingDir }).(pulumi.StringOutput)
}

type InvocationArrayOutput struct{ *pulumi.OutputState }

func (InvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (o InvocationArrayOutput) ToInvocationArrayOutput() InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) Index(i pulumi.IntInput) InvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].([]*Invocation)[vs[1].(int)]
	}).(InvocationOutput)
}

type InvocationMapOutput struct{ *pulumi.OutputState }

func (InvocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (o InvocationMapOutput) ToInvocationMapOutput() InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) MapIndex(k pulumi.StringInput) InvocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].(map[string]*Invocation)[vs[1].(string)]
	}).(InvocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationInput)(nil)).Elem(), &Invocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationArrayInput)(nil)).Elem(), InvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationMapInput)(nil)).Elem(), InvocationMap{})
	pulumi.RegisterOutputType(InvocationOutput{})
	pulumi.RegisterOutputType(InvocationArrayOutput{})
	pulumi.RegisterOutputType(InvocationMapOutput{})
}
