// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type ImageDetectionResults struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus *string                     `pulumi:"detectionStatus"`
	Items           []ImageDetectionResultsItem `pulumi:"items"`
}

// ImageDetectionResultsInput is an input type that accepts ImageDetectionResultsArgs and ImageDetectionResultsOutput values.
// You can construct a concrete instance of `ImageDetectionResultsInput` via:
//
//	ImageDetectionResultsArgs{...}
type ImageDetectionResultsInput interface {
	pulumi.Input

	ToImageDetectionResultsOutput() ImageDetectionResultsOutput
	ToImageDetectionResultsOutputWithContext(context.Context) ImageDetectionResultsOutput
}

type ImageDetectionResultsArgs struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus pulumi.StringPtrInput               `pulumi:"detectionStatus"`
	Items           ImageDetectionResultsItemArrayInput `pulumi:"items"`
}

func (ImageDetectionResultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResults)(nil)).Elem()
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsOutput() ImageDetectionResultsOutput {
	return i.ToImageDetectionResultsOutputWithContext(context.Background())
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsOutputWithContext(ctx context.Context) ImageDetectionResultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsOutput)
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return i.ToImageDetectionResultsPtrOutputWithContext(context.Background())
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsOutput).ToImageDetectionResultsPtrOutputWithContext(ctx)
}

// ImageDetectionResultsPtrInput is an input type that accepts ImageDetectionResultsArgs, ImageDetectionResultsPtr and ImageDetectionResultsPtrOutput values.
// You can construct a concrete instance of `ImageDetectionResultsPtrInput` via:
//
//	        ImageDetectionResultsArgs{...}
//
//	or:
//
//	        nil
type ImageDetectionResultsPtrInput interface {
	pulumi.Input

	ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput
	ToImageDetectionResultsPtrOutputWithContext(context.Context) ImageDetectionResultsPtrOutput
}

type imageDetectionResultsPtrType ImageDetectionResultsArgs

func ImageDetectionResultsPtr(v *ImageDetectionResultsArgs) ImageDetectionResultsPtrInput {
	return (*imageDetectionResultsPtrType)(v)
}

func (*imageDetectionResultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDetectionResults)(nil)).Elem()
}

func (i *imageDetectionResultsPtrType) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return i.ToImageDetectionResultsPtrOutputWithContext(context.Background())
}

func (i *imageDetectionResultsPtrType) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsPtrOutput)
}

type ImageDetectionResultsOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResults)(nil)).Elem()
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsOutput() ImageDetectionResultsOutput {
	return o
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsOutputWithContext(ctx context.Context) ImageDetectionResultsOutput {
	return o
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return o.ToImageDetectionResultsPtrOutputWithContext(context.Background())
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageDetectionResults) *ImageDetectionResults {
		return &v
	}).(ImageDetectionResultsPtrOutput)
}

// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
func (o ImageDetectionResultsOutput) DetectionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResults) *string { return v.DetectionStatus }).(pulumi.StringPtrOutput)
}

func (o ImageDetectionResultsOutput) Items() ImageDetectionResultsItemArrayOutput {
	return o.ApplyT(func(v ImageDetectionResults) []ImageDetectionResultsItem { return v.Items }).(ImageDetectionResultsItemArrayOutput)
}

type ImageDetectionResultsPtrOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDetectionResults)(nil)).Elem()
}

func (o ImageDetectionResultsPtrOutput) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return o
}

func (o ImageDetectionResultsPtrOutput) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return o
}

func (o ImageDetectionResultsPtrOutput) Elem() ImageDetectionResultsOutput {
	return o.ApplyT(func(v *ImageDetectionResults) ImageDetectionResults {
		if v != nil {
			return *v
		}
		var ret ImageDetectionResults
		return ret
	}).(ImageDetectionResultsOutput)
}

// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
func (o ImageDetectionResultsPtrOutput) DetectionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDetectionResults) *string {
		if v == nil {
			return nil
		}
		return v.DetectionStatus
	}).(pulumi.StringPtrOutput)
}

func (o ImageDetectionResultsPtrOutput) Items() ImageDetectionResultsItemArrayOutput {
	return o.ApplyT(func(v *ImageDetectionResults) []ImageDetectionResultsItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ImageDetectionResultsItemArrayOutput)
}

type ImageDetectionResultsItem struct {
	// 检测项名称。
	Name *string `pulumi:"name"`
	// 该检测项对应结果。
	Result *string `pulumi:"result"`
	// 风险描述码。
	RiskCode *string `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel *string `pulumi:"riskLevel"`
}

// ImageDetectionResultsItemInput is an input type that accepts ImageDetectionResultsItemArgs and ImageDetectionResultsItemOutput values.
// You can construct a concrete instance of `ImageDetectionResultsItemInput` via:
//
//	ImageDetectionResultsItemArgs{...}
type ImageDetectionResultsItemInput interface {
	pulumi.Input

	ToImageDetectionResultsItemOutput() ImageDetectionResultsItemOutput
	ToImageDetectionResultsItemOutputWithContext(context.Context) ImageDetectionResultsItemOutput
}

type ImageDetectionResultsItemArgs struct {
	// 检测项名称。
	Name pulumi.StringPtrInput `pulumi:"name"`
	// 该检测项对应结果。
	Result pulumi.StringPtrInput `pulumi:"result"`
	// 风险描述码。
	RiskCode pulumi.StringPtrInput `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel pulumi.StringPtrInput `pulumi:"riskLevel"`
}

func (ImageDetectionResultsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResultsItem)(nil)).Elem()
}

func (i ImageDetectionResultsItemArgs) ToImageDetectionResultsItemOutput() ImageDetectionResultsItemOutput {
	return i.ToImageDetectionResultsItemOutputWithContext(context.Background())
}

func (i ImageDetectionResultsItemArgs) ToImageDetectionResultsItemOutputWithContext(ctx context.Context) ImageDetectionResultsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsItemOutput)
}

// ImageDetectionResultsItemArrayInput is an input type that accepts ImageDetectionResultsItemArray and ImageDetectionResultsItemArrayOutput values.
// You can construct a concrete instance of `ImageDetectionResultsItemArrayInput` via:
//
//	ImageDetectionResultsItemArray{ ImageDetectionResultsItemArgs{...} }
type ImageDetectionResultsItemArrayInput interface {
	pulumi.Input

	ToImageDetectionResultsItemArrayOutput() ImageDetectionResultsItemArrayOutput
	ToImageDetectionResultsItemArrayOutputWithContext(context.Context) ImageDetectionResultsItemArrayOutput
}

type ImageDetectionResultsItemArray []ImageDetectionResultsItemInput

func (ImageDetectionResultsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDetectionResultsItem)(nil)).Elem()
}

func (i ImageDetectionResultsItemArray) ToImageDetectionResultsItemArrayOutput() ImageDetectionResultsItemArrayOutput {
	return i.ToImageDetectionResultsItemArrayOutputWithContext(context.Background())
}

func (i ImageDetectionResultsItemArray) ToImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) ImageDetectionResultsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsItemArrayOutput)
}

type ImageDetectionResultsItemOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResultsItem)(nil)).Elem()
}

func (o ImageDetectionResultsItemOutput) ToImageDetectionResultsItemOutput() ImageDetectionResultsItemOutput {
	return o
}

func (o ImageDetectionResultsItemOutput) ToImageDetectionResultsItemOutputWithContext(ctx context.Context) ImageDetectionResultsItemOutput {
	return o
}

// 检测项名称。
func (o ImageDetectionResultsItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// 该检测项对应结果。
func (o ImageDetectionResultsItemOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.Result }).(pulumi.StringPtrOutput)
}

// 风险描述码。
func (o ImageDetectionResultsItemOutput) RiskCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.RiskCode }).(pulumi.StringPtrOutput)
}

// 风险等级。若该参数返回值为空，表示无风险。
func (o ImageDetectionResultsItemOutput) RiskLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.RiskLevel }).(pulumi.StringPtrOutput)
}

type ImageDetectionResultsItemArrayOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDetectionResultsItem)(nil)).Elem()
}

func (o ImageDetectionResultsItemArrayOutput) ToImageDetectionResultsItemArrayOutput() ImageDetectionResultsItemArrayOutput {
	return o
}

func (o ImageDetectionResultsItemArrayOutput) ToImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) ImageDetectionResultsItemArrayOutput {
	return o
}

func (o ImageDetectionResultsItemArrayOutput) Index(i pulumi.IntInput) ImageDetectionResultsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDetectionResultsItem {
		return vs[0].([]ImageDetectionResultsItem)[vs[1].(int)]
	}).(ImageDetectionResultsItemOutput)
}

type ImageSnapshot struct {
	// 快照大小。单位为GiB。
	Size *int `pulumi:"size"`
	// 快照ID。
	SnapshotId *string `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind *string `pulumi:"volumeKind"`
}

// ImageSnapshotInput is an input type that accepts ImageSnapshotArgs and ImageSnapshotOutput values.
// You can construct a concrete instance of `ImageSnapshotInput` via:
//
//	ImageSnapshotArgs{...}
type ImageSnapshotInput interface {
	pulumi.Input

	ToImageSnapshotOutput() ImageSnapshotOutput
	ToImageSnapshotOutputWithContext(context.Context) ImageSnapshotOutput
}

type ImageSnapshotArgs struct {
	// 快照大小。单位为GiB。
	Size pulumi.IntPtrInput `pulumi:"size"`
	// 快照ID。
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind pulumi.StringPtrInput `pulumi:"volumeKind"`
}

func (ImageSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSnapshot)(nil)).Elem()
}

func (i ImageSnapshotArgs) ToImageSnapshotOutput() ImageSnapshotOutput {
	return i.ToImageSnapshotOutputWithContext(context.Background())
}

func (i ImageSnapshotArgs) ToImageSnapshotOutputWithContext(ctx context.Context) ImageSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSnapshotOutput)
}

// ImageSnapshotArrayInput is an input type that accepts ImageSnapshotArray and ImageSnapshotArrayOutput values.
// You can construct a concrete instance of `ImageSnapshotArrayInput` via:
//
//	ImageSnapshotArray{ ImageSnapshotArgs{...} }
type ImageSnapshotArrayInput interface {
	pulumi.Input

	ToImageSnapshotArrayOutput() ImageSnapshotArrayOutput
	ToImageSnapshotArrayOutputWithContext(context.Context) ImageSnapshotArrayOutput
}

type ImageSnapshotArray []ImageSnapshotInput

func (ImageSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageSnapshot)(nil)).Elem()
}

func (i ImageSnapshotArray) ToImageSnapshotArrayOutput() ImageSnapshotArrayOutput {
	return i.ToImageSnapshotArrayOutputWithContext(context.Background())
}

func (i ImageSnapshotArray) ToImageSnapshotArrayOutputWithContext(ctx context.Context) ImageSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSnapshotArrayOutput)
}

type ImageSnapshotOutput struct{ *pulumi.OutputState }

func (ImageSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSnapshot)(nil)).Elem()
}

func (o ImageSnapshotOutput) ToImageSnapshotOutput() ImageSnapshotOutput {
	return o
}

func (o ImageSnapshotOutput) ToImageSnapshotOutputWithContext(ctx context.Context) ImageSnapshotOutput {
	return o
}

// 快照大小。单位为GiB。
func (o ImageSnapshotOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageSnapshot) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// 快照ID。
func (o ImageSnapshotOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSnapshot) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// 云盘种类。system：系统盘。data：数据盘。
func (o ImageSnapshotOutput) VolumeKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSnapshot) *string { return v.VolumeKind }).(pulumi.StringPtrOutput)
}

type ImageSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ImageSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageSnapshot)(nil)).Elem()
}

func (o ImageSnapshotArrayOutput) ToImageSnapshotArrayOutput() ImageSnapshotArrayOutput {
	return o
}

func (o ImageSnapshotArrayOutput) ToImageSnapshotArrayOutputWithContext(ctx context.Context) ImageSnapshotArrayOutput {
	return o
}

func (o ImageSnapshotArrayOutput) Index(i pulumi.IntInput) ImageSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageSnapshot {
		return vs[0].([]ImageSnapshot)[vs[1].(int)]
	}).(ImageSnapshotOutput)
}

type ImageTag struct {
	// 镜像标签的标签键。
	Key *string `pulumi:"key"`
	// 镜像标签的值。
	Value *string `pulumi:"value"`
}

// ImageTagInput is an input type that accepts ImageTagArgs and ImageTagOutput values.
// You can construct a concrete instance of `ImageTagInput` via:
//
//	ImageTagArgs{...}
type ImageTagInput interface {
	pulumi.Input

	ToImageTagOutput() ImageTagOutput
	ToImageTagOutputWithContext(context.Context) ImageTagOutput
}

type ImageTagArgs struct {
	// 镜像标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 镜像标签的值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTag)(nil)).Elem()
}

func (i ImageTagArgs) ToImageTagOutput() ImageTagOutput {
	return i.ToImageTagOutputWithContext(context.Background())
}

func (i ImageTagArgs) ToImageTagOutputWithContext(ctx context.Context) ImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTagOutput)
}

// ImageTagArrayInput is an input type that accepts ImageTagArray and ImageTagArrayOutput values.
// You can construct a concrete instance of `ImageTagArrayInput` via:
//
//	ImageTagArray{ ImageTagArgs{...} }
type ImageTagArrayInput interface {
	pulumi.Input

	ToImageTagArrayOutput() ImageTagArrayOutput
	ToImageTagArrayOutputWithContext(context.Context) ImageTagArrayOutput
}

type ImageTagArray []ImageTagInput

func (ImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTag)(nil)).Elem()
}

func (i ImageTagArray) ToImageTagArrayOutput() ImageTagArrayOutput {
	return i.ToImageTagArrayOutputWithContext(context.Background())
}

func (i ImageTagArray) ToImageTagArrayOutputWithContext(ctx context.Context) ImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTagArrayOutput)
}

type ImageTagOutput struct{ *pulumi.OutputState }

func (ImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTag)(nil)).Elem()
}

func (o ImageTagOutput) ToImageTagOutput() ImageTagOutput {
	return o
}

func (o ImageTagOutput) ToImageTagOutputWithContext(ctx context.Context) ImageTagOutput {
	return o
}

// 镜像标签的标签键。
func (o ImageTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 镜像标签的值。
func (o ImageTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ImageTagArrayOutput struct{ *pulumi.OutputState }

func (ImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTag)(nil)).Elem()
}

func (o ImageTagArrayOutput) ToImageTagArrayOutput() ImageTagArrayOutput {
	return o
}

func (o ImageTagArrayOutput) ToImageTagArrayOutputWithContext(ctx context.Context) ImageTagArrayOutput {
	return o
}

func (o ImageTagArrayOutput) Index(i pulumi.IntInput) ImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTag {
		return vs[0].([]ImageTag)[vs[1].(int)]
	}).(ImageTagOutput)
}

type GetImageDetectionResults struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus string `pulumi:"detectionStatus"`
	// 镜像检测项详情。
	Items []GetImageDetectionResultsItem `pulumi:"items"`
}

// GetImageDetectionResultsInput is an input type that accepts GetImageDetectionResultsArgs and GetImageDetectionResultsOutput values.
// You can construct a concrete instance of `GetImageDetectionResultsInput` via:
//
//	GetImageDetectionResultsArgs{...}
type GetImageDetectionResultsInput interface {
	pulumi.Input

	ToGetImageDetectionResultsOutput() GetImageDetectionResultsOutput
	ToGetImageDetectionResultsOutputWithContext(context.Context) GetImageDetectionResultsOutput
}

type GetImageDetectionResultsArgs struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus pulumi.StringInput `pulumi:"detectionStatus"`
	// 镜像检测项详情。
	Items GetImageDetectionResultsItemArrayInput `pulumi:"items"`
}

func (GetImageDetectionResultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResults)(nil)).Elem()
}

func (i GetImageDetectionResultsArgs) ToGetImageDetectionResultsOutput() GetImageDetectionResultsOutput {
	return i.ToGetImageDetectionResultsOutputWithContext(context.Background())
}

func (i GetImageDetectionResultsArgs) ToGetImageDetectionResultsOutputWithContext(ctx context.Context) GetImageDetectionResultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageDetectionResultsOutput)
}

type GetImageDetectionResultsOutput struct{ *pulumi.OutputState }

func (GetImageDetectionResultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResults)(nil)).Elem()
}

func (o GetImageDetectionResultsOutput) ToGetImageDetectionResultsOutput() GetImageDetectionResultsOutput {
	return o
}

func (o GetImageDetectionResultsOutput) ToGetImageDetectionResultsOutputWithContext(ctx context.Context) GetImageDetectionResultsOutput {
	return o
}

// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
func (o GetImageDetectionResultsOutput) DetectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResults) string { return v.DetectionStatus }).(pulumi.StringOutput)
}

// 镜像检测项详情。
func (o GetImageDetectionResultsOutput) Items() GetImageDetectionResultsItemArrayOutput {
	return o.ApplyT(func(v GetImageDetectionResults) []GetImageDetectionResultsItem { return v.Items }).(GetImageDetectionResultsItemArrayOutput)
}

type GetImageDetectionResultsItem struct {
	// 检测项名称。
	Name string `pulumi:"name"`
	// 该检测项对应结果。
	Result string `pulumi:"result"`
	// 风险描述码。
	RiskCode string `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel string `pulumi:"riskLevel"`
}

// GetImageDetectionResultsItemInput is an input type that accepts GetImageDetectionResultsItemArgs and GetImageDetectionResultsItemOutput values.
// You can construct a concrete instance of `GetImageDetectionResultsItemInput` via:
//
//	GetImageDetectionResultsItemArgs{...}
type GetImageDetectionResultsItemInput interface {
	pulumi.Input

	ToGetImageDetectionResultsItemOutput() GetImageDetectionResultsItemOutput
	ToGetImageDetectionResultsItemOutputWithContext(context.Context) GetImageDetectionResultsItemOutput
}

type GetImageDetectionResultsItemArgs struct {
	// 检测项名称。
	Name pulumi.StringInput `pulumi:"name"`
	// 该检测项对应结果。
	Result pulumi.StringInput `pulumi:"result"`
	// 风险描述码。
	RiskCode pulumi.StringInput `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel pulumi.StringInput `pulumi:"riskLevel"`
}

func (GetImageDetectionResultsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResultsItem)(nil)).Elem()
}

func (i GetImageDetectionResultsItemArgs) ToGetImageDetectionResultsItemOutput() GetImageDetectionResultsItemOutput {
	return i.ToGetImageDetectionResultsItemOutputWithContext(context.Background())
}

func (i GetImageDetectionResultsItemArgs) ToGetImageDetectionResultsItemOutputWithContext(ctx context.Context) GetImageDetectionResultsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageDetectionResultsItemOutput)
}

// GetImageDetectionResultsItemArrayInput is an input type that accepts GetImageDetectionResultsItemArray and GetImageDetectionResultsItemArrayOutput values.
// You can construct a concrete instance of `GetImageDetectionResultsItemArrayInput` via:
//
//	GetImageDetectionResultsItemArray{ GetImageDetectionResultsItemArgs{...} }
type GetImageDetectionResultsItemArrayInput interface {
	pulumi.Input

	ToGetImageDetectionResultsItemArrayOutput() GetImageDetectionResultsItemArrayOutput
	ToGetImageDetectionResultsItemArrayOutputWithContext(context.Context) GetImageDetectionResultsItemArrayOutput
}

type GetImageDetectionResultsItemArray []GetImageDetectionResultsItemInput

func (GetImageDetectionResultsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageDetectionResultsItem)(nil)).Elem()
}

func (i GetImageDetectionResultsItemArray) ToGetImageDetectionResultsItemArrayOutput() GetImageDetectionResultsItemArrayOutput {
	return i.ToGetImageDetectionResultsItemArrayOutputWithContext(context.Background())
}

func (i GetImageDetectionResultsItemArray) ToGetImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) GetImageDetectionResultsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageDetectionResultsItemArrayOutput)
}

type GetImageDetectionResultsItemOutput struct{ *pulumi.OutputState }

func (GetImageDetectionResultsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResultsItem)(nil)).Elem()
}

func (o GetImageDetectionResultsItemOutput) ToGetImageDetectionResultsItemOutput() GetImageDetectionResultsItemOutput {
	return o
}

func (o GetImageDetectionResultsItemOutput) ToGetImageDetectionResultsItemOutputWithContext(ctx context.Context) GetImageDetectionResultsItemOutput {
	return o
}

// 检测项名称。
func (o GetImageDetectionResultsItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.Name }).(pulumi.StringOutput)
}

// 该检测项对应结果。
func (o GetImageDetectionResultsItemOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.Result }).(pulumi.StringOutput)
}

// 风险描述码。
func (o GetImageDetectionResultsItemOutput) RiskCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.RiskCode }).(pulumi.StringOutput)
}

// 风险等级。若该参数返回值为空，表示无风险。
func (o GetImageDetectionResultsItemOutput) RiskLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.RiskLevel }).(pulumi.StringOutput)
}

type GetImageDetectionResultsItemArrayOutput struct{ *pulumi.OutputState }

func (GetImageDetectionResultsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageDetectionResultsItem)(nil)).Elem()
}

func (o GetImageDetectionResultsItemArrayOutput) ToGetImageDetectionResultsItemArrayOutput() GetImageDetectionResultsItemArrayOutput {
	return o
}

func (o GetImageDetectionResultsItemArrayOutput) ToGetImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) GetImageDetectionResultsItemArrayOutput {
	return o
}

func (o GetImageDetectionResultsItemArrayOutput) Index(i pulumi.IntInput) GetImageDetectionResultsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageDetectionResultsItem {
		return vs[0].([]GetImageDetectionResultsItem)[vs[1].(int)]
	}).(GetImageDetectionResultsItemOutput)
}

type GetImageSnapshot struct {
	// 快照大小。单位为GiB。
	Size int `pulumi:"size"`
	// 快照ID。
	SnapshotId string `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind string `pulumi:"volumeKind"`
}

// GetImageSnapshotInput is an input type that accepts GetImageSnapshotArgs and GetImageSnapshotOutput values.
// You can construct a concrete instance of `GetImageSnapshotInput` via:
//
//	GetImageSnapshotArgs{...}
type GetImageSnapshotInput interface {
	pulumi.Input

	ToGetImageSnapshotOutput() GetImageSnapshotOutput
	ToGetImageSnapshotOutputWithContext(context.Context) GetImageSnapshotOutput
}

type GetImageSnapshotArgs struct {
	// 快照大小。单位为GiB。
	Size pulumi.IntInput `pulumi:"size"`
	// 快照ID。
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind pulumi.StringInput `pulumi:"volumeKind"`
}

func (GetImageSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageSnapshot)(nil)).Elem()
}

func (i GetImageSnapshotArgs) ToGetImageSnapshotOutput() GetImageSnapshotOutput {
	return i.ToGetImageSnapshotOutputWithContext(context.Background())
}

func (i GetImageSnapshotArgs) ToGetImageSnapshotOutputWithContext(ctx context.Context) GetImageSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageSnapshotOutput)
}

// GetImageSnapshotArrayInput is an input type that accepts GetImageSnapshotArray and GetImageSnapshotArrayOutput values.
// You can construct a concrete instance of `GetImageSnapshotArrayInput` via:
//
//	GetImageSnapshotArray{ GetImageSnapshotArgs{...} }
type GetImageSnapshotArrayInput interface {
	pulumi.Input

	ToGetImageSnapshotArrayOutput() GetImageSnapshotArrayOutput
	ToGetImageSnapshotArrayOutputWithContext(context.Context) GetImageSnapshotArrayOutput
}

type GetImageSnapshotArray []GetImageSnapshotInput

func (GetImageSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageSnapshot)(nil)).Elem()
}

func (i GetImageSnapshotArray) ToGetImageSnapshotArrayOutput() GetImageSnapshotArrayOutput {
	return i.ToGetImageSnapshotArrayOutputWithContext(context.Background())
}

func (i GetImageSnapshotArray) ToGetImageSnapshotArrayOutputWithContext(ctx context.Context) GetImageSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageSnapshotArrayOutput)
}

type GetImageSnapshotOutput struct{ *pulumi.OutputState }

func (GetImageSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageSnapshot)(nil)).Elem()
}

func (o GetImageSnapshotOutput) ToGetImageSnapshotOutput() GetImageSnapshotOutput {
	return o
}

func (o GetImageSnapshotOutput) ToGetImageSnapshotOutputWithContext(ctx context.Context) GetImageSnapshotOutput {
	return o
}

// 快照大小。单位为GiB。
func (o GetImageSnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageSnapshot) int { return v.Size }).(pulumi.IntOutput)
}

// 快照ID。
func (o GetImageSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageSnapshot) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// 云盘种类。system：系统盘。data：数据盘。
func (o GetImageSnapshotOutput) VolumeKind() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageSnapshot) string { return v.VolumeKind }).(pulumi.StringOutput)
}

type GetImageSnapshotArrayOutput struct{ *pulumi.OutputState }

func (GetImageSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageSnapshot)(nil)).Elem()
}

func (o GetImageSnapshotArrayOutput) ToGetImageSnapshotArrayOutput() GetImageSnapshotArrayOutput {
	return o
}

func (o GetImageSnapshotArrayOutput) ToGetImageSnapshotArrayOutputWithContext(ctx context.Context) GetImageSnapshotArrayOutput {
	return o
}

func (o GetImageSnapshotArrayOutput) Index(i pulumi.IntInput) GetImageSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageSnapshot {
		return vs[0].([]GetImageSnapshot)[vs[1].(int)]
	}).(GetImageSnapshotOutput)
}

type GetImageTag struct {
	// 镜像标签的标签键。
	Key string `pulumi:"key"`
	// 镜像标签的值。
	Value string `pulumi:"value"`
}

// GetImageTagInput is an input type that accepts GetImageTagArgs and GetImageTagOutput values.
// You can construct a concrete instance of `GetImageTagInput` via:
//
//	GetImageTagArgs{...}
type GetImageTagInput interface {
	pulumi.Input

	ToGetImageTagOutput() GetImageTagOutput
	ToGetImageTagOutputWithContext(context.Context) GetImageTagOutput
}

type GetImageTagArgs struct {
	// 镜像标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 镜像标签的值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageTag)(nil)).Elem()
}

func (i GetImageTagArgs) ToGetImageTagOutput() GetImageTagOutput {
	return i.ToGetImageTagOutputWithContext(context.Background())
}

func (i GetImageTagArgs) ToGetImageTagOutputWithContext(ctx context.Context) GetImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageTagOutput)
}

// GetImageTagArrayInput is an input type that accepts GetImageTagArray and GetImageTagArrayOutput values.
// You can construct a concrete instance of `GetImageTagArrayInput` via:
//
//	GetImageTagArray{ GetImageTagArgs{...} }
type GetImageTagArrayInput interface {
	pulumi.Input

	ToGetImageTagArrayOutput() GetImageTagArrayOutput
	ToGetImageTagArrayOutputWithContext(context.Context) GetImageTagArrayOutput
}

type GetImageTagArray []GetImageTagInput

func (GetImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageTag)(nil)).Elem()
}

func (i GetImageTagArray) ToGetImageTagArrayOutput() GetImageTagArrayOutput {
	return i.ToGetImageTagArrayOutputWithContext(context.Background())
}

func (i GetImageTagArray) ToGetImageTagArrayOutputWithContext(ctx context.Context) GetImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageTagArrayOutput)
}

type GetImageTagOutput struct{ *pulumi.OutputState }

func (GetImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageTag)(nil)).Elem()
}

func (o GetImageTagOutput) ToGetImageTagOutput() GetImageTagOutput {
	return o
}

func (o GetImageTagOutput) ToGetImageTagOutputWithContext(ctx context.Context) GetImageTagOutput {
	return o
}

// 镜像标签的标签键。
func (o GetImageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageTag) string { return v.Key }).(pulumi.StringOutput)
}

// 镜像标签的值。
func (o GetImageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetImageTagArrayOutput struct{ *pulumi.OutputState }

func (GetImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageTag)(nil)).Elem()
}

func (o GetImageTagArrayOutput) ToGetImageTagArrayOutput() GetImageTagArrayOutput {
	return o
}

func (o GetImageTagArrayOutput) ToGetImageTagArrayOutputWithContext(ctx context.Context) GetImageTagArrayOutput {
	return o
}

func (o GetImageTagArrayOutput) Index(i pulumi.IntInput) GetImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageTag {
		return vs[0].([]GetImageTag)[vs[1].(int)]
	}).(GetImageTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsInput)(nil)).Elem(), ImageDetectionResultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsPtrInput)(nil)).Elem(), ImageDetectionResultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsItemInput)(nil)).Elem(), ImageDetectionResultsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsItemArrayInput)(nil)).Elem(), ImageDetectionResultsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSnapshotInput)(nil)).Elem(), ImageSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSnapshotArrayInput)(nil)).Elem(), ImageSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTagInput)(nil)).Elem(), ImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTagArrayInput)(nil)).Elem(), ImageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageDetectionResultsInput)(nil)).Elem(), GetImageDetectionResultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageDetectionResultsItemInput)(nil)).Elem(), GetImageDetectionResultsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageDetectionResultsItemArrayInput)(nil)).Elem(), GetImageDetectionResultsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageSnapshotInput)(nil)).Elem(), GetImageSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageSnapshotArrayInput)(nil)).Elem(), GetImageSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageTagInput)(nil)).Elem(), GetImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageTagArrayInput)(nil)).Elem(), GetImageTagArray{})
	pulumi.RegisterOutputType(ImageDetectionResultsOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsPtrOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsItemOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsItemArrayOutput{})
	pulumi.RegisterOutputType(ImageSnapshotOutput{})
	pulumi.RegisterOutputType(ImageSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ImageTagOutput{})
	pulumi.RegisterOutputType(ImageTagArrayOutput{})
	pulumi.RegisterOutputType(GetImageDetectionResultsOutput{})
	pulumi.RegisterOutputType(GetImageDetectionResultsItemOutput{})
	pulumi.RegisterOutputType(GetImageDetectionResultsItemArrayOutput{})
	pulumi.RegisterOutputType(GetImageSnapshotOutput{})
	pulumi.RegisterOutputType(GetImageSnapshotArrayOutput{})
	pulumi.RegisterOutputType(GetImageTagOutput{})
	pulumi.RegisterOutputType(GetImageTagArrayOutput{})
}
