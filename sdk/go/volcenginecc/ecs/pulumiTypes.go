// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type CommandParameterDefinition struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision *int `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue *string `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength *int `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue *string `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength *int `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue *string `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
	Name *string `pulumi:"name"`
	// 是否必填。
	Required *bool `pulumi:"required"`
	// 自定义参数类型。
	Type *string `pulumi:"type"`
}

// CommandParameterDefinitionInput is an input type that accepts CommandParameterDefinitionArgs and CommandParameterDefinitionOutput values.
// You can construct a concrete instance of `CommandParameterDefinitionInput` via:
//
//	CommandParameterDefinitionArgs{...}
type CommandParameterDefinitionInput interface {
	pulumi.Input

	ToCommandParameterDefinitionOutput() CommandParameterDefinitionOutput
	ToCommandParameterDefinitionOutputWithContext(context.Context) CommandParameterDefinitionOutput
}

type CommandParameterDefinitionArgs struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision pulumi.IntPtrInput `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength pulumi.IntPtrInput `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue pulumi.StringPtrInput `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength pulumi.IntPtrInput `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue pulumi.StringPtrInput `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
	Name pulumi.StringPtrInput `pulumi:"name"`
	// 是否必填。
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// 自定义参数类型。
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CommandParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandParameterDefinition)(nil)).Elem()
}

func (i CommandParameterDefinitionArgs) ToCommandParameterDefinitionOutput() CommandParameterDefinitionOutput {
	return i.ToCommandParameterDefinitionOutputWithContext(context.Background())
}

func (i CommandParameterDefinitionArgs) ToCommandParameterDefinitionOutputWithContext(ctx context.Context) CommandParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandParameterDefinitionOutput)
}

// CommandParameterDefinitionArrayInput is an input type that accepts CommandParameterDefinitionArray and CommandParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `CommandParameterDefinitionArrayInput` via:
//
//	CommandParameterDefinitionArray{ CommandParameterDefinitionArgs{...} }
type CommandParameterDefinitionArrayInput interface {
	pulumi.Input

	ToCommandParameterDefinitionArrayOutput() CommandParameterDefinitionArrayOutput
	ToCommandParameterDefinitionArrayOutputWithContext(context.Context) CommandParameterDefinitionArrayOutput
}

type CommandParameterDefinitionArray []CommandParameterDefinitionInput

func (CommandParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandParameterDefinition)(nil)).Elem()
}

func (i CommandParameterDefinitionArray) ToCommandParameterDefinitionArrayOutput() CommandParameterDefinitionArrayOutput {
	return i.ToCommandParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i CommandParameterDefinitionArray) ToCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) CommandParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandParameterDefinitionArrayOutput)
}

type CommandParameterDefinitionOutput struct{ *pulumi.OutputState }

func (CommandParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandParameterDefinition)(nil)).Elem()
}

func (o CommandParameterDefinitionOutput) ToCommandParameterDefinitionOutput() CommandParameterDefinitionOutput {
	return o
}

func (o CommandParameterDefinitionOutput) ToCommandParameterDefinitionOutputWithContext(ctx context.Context) CommandParameterDefinitionOutput {
	return o
}

// 自定义参数值（数字）允许的小数点后位数。
func (o CommandParameterDefinitionOutput) DecimalPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *int { return v.DecimalPrecision }).(pulumi.IntPtrOutput)
}

// 自定义参数默认值。
func (o CommandParameterDefinitionOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// 自定义参数值（字符串）的最大长度。
func (o CommandParameterDefinitionOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *int { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// 自定义参数值（数字）的最大值。
func (o CommandParameterDefinitionOutput) MaxValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.MaxValue }).(pulumi.StringPtrOutput)
}

// 自定义参数值（字符串）的最小长度。
func (o CommandParameterDefinitionOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *int { return v.MinLength }).(pulumi.IntPtrOutput)
}

// 自定义参数值（数字）的最小值。
func (o CommandParameterDefinitionOutput) MinValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.MinValue }).(pulumi.StringPtrOutput)
}

// 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
func (o CommandParameterDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// 是否必填。
func (o CommandParameterDefinitionOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// 自定义参数类型。
func (o CommandParameterDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type CommandParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (CommandParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandParameterDefinition)(nil)).Elem()
}

func (o CommandParameterDefinitionArrayOutput) ToCommandParameterDefinitionArrayOutput() CommandParameterDefinitionArrayOutput {
	return o
}

func (o CommandParameterDefinitionArrayOutput) ToCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) CommandParameterDefinitionArrayOutput {
	return o
}

func (o CommandParameterDefinitionArrayOutput) Index(i pulumi.IntInput) CommandParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandParameterDefinition {
		return vs[0].([]CommandParameterDefinition)[vs[1].(int)]
	}).(CommandParameterDefinitionOutput)
}

type CommandTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// CommandTagInput is an input type that accepts CommandTagArgs and CommandTagOutput values.
// You can construct a concrete instance of `CommandTagInput` via:
//
//	CommandTagArgs{...}
type CommandTagInput interface {
	pulumi.Input

	ToCommandTagOutput() CommandTagOutput
	ToCommandTagOutputWithContext(context.Context) CommandTagOutput
}

type CommandTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CommandTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandTag)(nil)).Elem()
}

func (i CommandTagArgs) ToCommandTagOutput() CommandTagOutput {
	return i.ToCommandTagOutputWithContext(context.Background())
}

func (i CommandTagArgs) ToCommandTagOutputWithContext(ctx context.Context) CommandTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandTagOutput)
}

// CommandTagArrayInput is an input type that accepts CommandTagArray and CommandTagArrayOutput values.
// You can construct a concrete instance of `CommandTagArrayInput` via:
//
//	CommandTagArray{ CommandTagArgs{...} }
type CommandTagArrayInput interface {
	pulumi.Input

	ToCommandTagArrayOutput() CommandTagArrayOutput
	ToCommandTagArrayOutputWithContext(context.Context) CommandTagArrayOutput
}

type CommandTagArray []CommandTagInput

func (CommandTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandTag)(nil)).Elem()
}

func (i CommandTagArray) ToCommandTagArrayOutput() CommandTagArrayOutput {
	return i.ToCommandTagArrayOutputWithContext(context.Background())
}

func (i CommandTagArray) ToCommandTagArrayOutputWithContext(ctx context.Context) CommandTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandTagArrayOutput)
}

type CommandTagOutput struct{ *pulumi.OutputState }

func (CommandTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandTag)(nil)).Elem()
}

func (o CommandTagOutput) ToCommandTagOutput() CommandTagOutput {
	return o
}

func (o CommandTagOutput) ToCommandTagOutputWithContext(ctx context.Context) CommandTagOutput {
	return o
}

func (o CommandTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o CommandTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CommandTagArrayOutput struct{ *pulumi.OutputState }

func (CommandTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandTag)(nil)).Elem()
}

func (o CommandTagArrayOutput) ToCommandTagArrayOutput() CommandTagArrayOutput {
	return o
}

func (o CommandTagArrayOutput) ToCommandTagArrayOutputWithContext(ctx context.Context) CommandTagArrayOutput {
	return o
}

func (o CommandTagArrayOutput) Index(i pulumi.IntInput) CommandTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandTag {
		return vs[0].([]CommandTag)[vs[1].(int)]
	}).(CommandTagOutput)
}

type ImageDetectionResults struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus *string                     `pulumi:"detectionStatus"`
	Items           []ImageDetectionResultsItem `pulumi:"items"`
}

// ImageDetectionResultsInput is an input type that accepts ImageDetectionResultsArgs and ImageDetectionResultsOutput values.
// You can construct a concrete instance of `ImageDetectionResultsInput` via:
//
//	ImageDetectionResultsArgs{...}
type ImageDetectionResultsInput interface {
	pulumi.Input

	ToImageDetectionResultsOutput() ImageDetectionResultsOutput
	ToImageDetectionResultsOutputWithContext(context.Context) ImageDetectionResultsOutput
}

type ImageDetectionResultsArgs struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus pulumi.StringPtrInput               `pulumi:"detectionStatus"`
	Items           ImageDetectionResultsItemArrayInput `pulumi:"items"`
}

func (ImageDetectionResultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResults)(nil)).Elem()
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsOutput() ImageDetectionResultsOutput {
	return i.ToImageDetectionResultsOutputWithContext(context.Background())
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsOutputWithContext(ctx context.Context) ImageDetectionResultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsOutput)
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return i.ToImageDetectionResultsPtrOutputWithContext(context.Background())
}

func (i ImageDetectionResultsArgs) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsOutput).ToImageDetectionResultsPtrOutputWithContext(ctx)
}

// ImageDetectionResultsPtrInput is an input type that accepts ImageDetectionResultsArgs, ImageDetectionResultsPtr and ImageDetectionResultsPtrOutput values.
// You can construct a concrete instance of `ImageDetectionResultsPtrInput` via:
//
//	        ImageDetectionResultsArgs{...}
//
//	or:
//
//	        nil
type ImageDetectionResultsPtrInput interface {
	pulumi.Input

	ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput
	ToImageDetectionResultsPtrOutputWithContext(context.Context) ImageDetectionResultsPtrOutput
}

type imageDetectionResultsPtrType ImageDetectionResultsArgs

func ImageDetectionResultsPtr(v *ImageDetectionResultsArgs) ImageDetectionResultsPtrInput {
	return (*imageDetectionResultsPtrType)(v)
}

func (*imageDetectionResultsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDetectionResults)(nil)).Elem()
}

func (i *imageDetectionResultsPtrType) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return i.ToImageDetectionResultsPtrOutputWithContext(context.Background())
}

func (i *imageDetectionResultsPtrType) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsPtrOutput)
}

type ImageDetectionResultsOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResults)(nil)).Elem()
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsOutput() ImageDetectionResultsOutput {
	return o
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsOutputWithContext(ctx context.Context) ImageDetectionResultsOutput {
	return o
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return o.ToImageDetectionResultsPtrOutputWithContext(context.Background())
}

func (o ImageDetectionResultsOutput) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ImageDetectionResults) *ImageDetectionResults {
		return &v
	}).(ImageDetectionResultsPtrOutput)
}

// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
func (o ImageDetectionResultsOutput) DetectionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResults) *string { return v.DetectionStatus }).(pulumi.StringPtrOutput)
}

func (o ImageDetectionResultsOutput) Items() ImageDetectionResultsItemArrayOutput {
	return o.ApplyT(func(v ImageDetectionResults) []ImageDetectionResultsItem { return v.Items }).(ImageDetectionResultsItemArrayOutput)
}

type ImageDetectionResultsPtrOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImageDetectionResults)(nil)).Elem()
}

func (o ImageDetectionResultsPtrOutput) ToImageDetectionResultsPtrOutput() ImageDetectionResultsPtrOutput {
	return o
}

func (o ImageDetectionResultsPtrOutput) ToImageDetectionResultsPtrOutputWithContext(ctx context.Context) ImageDetectionResultsPtrOutput {
	return o
}

func (o ImageDetectionResultsPtrOutput) Elem() ImageDetectionResultsOutput {
	return o.ApplyT(func(v *ImageDetectionResults) ImageDetectionResults {
		if v != nil {
			return *v
		}
		var ret ImageDetectionResults
		return ret
	}).(ImageDetectionResultsOutput)
}

// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
func (o ImageDetectionResultsPtrOutput) DetectionStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ImageDetectionResults) *string {
		if v == nil {
			return nil
		}
		return v.DetectionStatus
	}).(pulumi.StringPtrOutput)
}

func (o ImageDetectionResultsPtrOutput) Items() ImageDetectionResultsItemArrayOutput {
	return o.ApplyT(func(v *ImageDetectionResults) []ImageDetectionResultsItem {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ImageDetectionResultsItemArrayOutput)
}

type ImageDetectionResultsItem struct {
	// 检测项名称。
	Name *string `pulumi:"name"`
	// 该检测项对应结果。
	Result *string `pulumi:"result"`
	// 风险描述码。
	RiskCode *string `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel *string `pulumi:"riskLevel"`
}

// ImageDetectionResultsItemInput is an input type that accepts ImageDetectionResultsItemArgs and ImageDetectionResultsItemOutput values.
// You can construct a concrete instance of `ImageDetectionResultsItemInput` via:
//
//	ImageDetectionResultsItemArgs{...}
type ImageDetectionResultsItemInput interface {
	pulumi.Input

	ToImageDetectionResultsItemOutput() ImageDetectionResultsItemOutput
	ToImageDetectionResultsItemOutputWithContext(context.Context) ImageDetectionResultsItemOutput
}

type ImageDetectionResultsItemArgs struct {
	// 检测项名称。
	Name pulumi.StringPtrInput `pulumi:"name"`
	// 该检测项对应结果。
	Result pulumi.StringPtrInput `pulumi:"result"`
	// 风险描述码。
	RiskCode pulumi.StringPtrInput `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel pulumi.StringPtrInput `pulumi:"riskLevel"`
}

func (ImageDetectionResultsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResultsItem)(nil)).Elem()
}

func (i ImageDetectionResultsItemArgs) ToImageDetectionResultsItemOutput() ImageDetectionResultsItemOutput {
	return i.ToImageDetectionResultsItemOutputWithContext(context.Background())
}

func (i ImageDetectionResultsItemArgs) ToImageDetectionResultsItemOutputWithContext(ctx context.Context) ImageDetectionResultsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsItemOutput)
}

// ImageDetectionResultsItemArrayInput is an input type that accepts ImageDetectionResultsItemArray and ImageDetectionResultsItemArrayOutput values.
// You can construct a concrete instance of `ImageDetectionResultsItemArrayInput` via:
//
//	ImageDetectionResultsItemArray{ ImageDetectionResultsItemArgs{...} }
type ImageDetectionResultsItemArrayInput interface {
	pulumi.Input

	ToImageDetectionResultsItemArrayOutput() ImageDetectionResultsItemArrayOutput
	ToImageDetectionResultsItemArrayOutputWithContext(context.Context) ImageDetectionResultsItemArrayOutput
}

type ImageDetectionResultsItemArray []ImageDetectionResultsItemInput

func (ImageDetectionResultsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDetectionResultsItem)(nil)).Elem()
}

func (i ImageDetectionResultsItemArray) ToImageDetectionResultsItemArrayOutput() ImageDetectionResultsItemArrayOutput {
	return i.ToImageDetectionResultsItemArrayOutputWithContext(context.Background())
}

func (i ImageDetectionResultsItemArray) ToImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) ImageDetectionResultsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageDetectionResultsItemArrayOutput)
}

type ImageDetectionResultsItemOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageDetectionResultsItem)(nil)).Elem()
}

func (o ImageDetectionResultsItemOutput) ToImageDetectionResultsItemOutput() ImageDetectionResultsItemOutput {
	return o
}

func (o ImageDetectionResultsItemOutput) ToImageDetectionResultsItemOutputWithContext(ctx context.Context) ImageDetectionResultsItemOutput {
	return o
}

// 检测项名称。
func (o ImageDetectionResultsItemOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// 该检测项对应结果。
func (o ImageDetectionResultsItemOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.Result }).(pulumi.StringPtrOutput)
}

// 风险描述码。
func (o ImageDetectionResultsItemOutput) RiskCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.RiskCode }).(pulumi.StringPtrOutput)
}

// 风险等级。若该参数返回值为空，表示无风险。
func (o ImageDetectionResultsItemOutput) RiskLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageDetectionResultsItem) *string { return v.RiskLevel }).(pulumi.StringPtrOutput)
}

type ImageDetectionResultsItemArrayOutput struct{ *pulumi.OutputState }

func (ImageDetectionResultsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageDetectionResultsItem)(nil)).Elem()
}

func (o ImageDetectionResultsItemArrayOutput) ToImageDetectionResultsItemArrayOutput() ImageDetectionResultsItemArrayOutput {
	return o
}

func (o ImageDetectionResultsItemArrayOutput) ToImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) ImageDetectionResultsItemArrayOutput {
	return o
}

func (o ImageDetectionResultsItemArrayOutput) Index(i pulumi.IntInput) ImageDetectionResultsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageDetectionResultsItem {
		return vs[0].([]ImageDetectionResultsItem)[vs[1].(int)]
	}).(ImageDetectionResultsItemOutput)
}

type ImageSnapshot struct {
	// 快照大小。单位为GiB。
	Size *int `pulumi:"size"`
	// 快照ID。
	SnapshotId *string `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind *string `pulumi:"volumeKind"`
}

// ImageSnapshotInput is an input type that accepts ImageSnapshotArgs and ImageSnapshotOutput values.
// You can construct a concrete instance of `ImageSnapshotInput` via:
//
//	ImageSnapshotArgs{...}
type ImageSnapshotInput interface {
	pulumi.Input

	ToImageSnapshotOutput() ImageSnapshotOutput
	ToImageSnapshotOutputWithContext(context.Context) ImageSnapshotOutput
}

type ImageSnapshotArgs struct {
	// 快照大小。单位为GiB。
	Size pulumi.IntPtrInput `pulumi:"size"`
	// 快照ID。
	SnapshotId pulumi.StringPtrInput `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind pulumi.StringPtrInput `pulumi:"volumeKind"`
}

func (ImageSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSnapshot)(nil)).Elem()
}

func (i ImageSnapshotArgs) ToImageSnapshotOutput() ImageSnapshotOutput {
	return i.ToImageSnapshotOutputWithContext(context.Background())
}

func (i ImageSnapshotArgs) ToImageSnapshotOutputWithContext(ctx context.Context) ImageSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSnapshotOutput)
}

// ImageSnapshotArrayInput is an input type that accepts ImageSnapshotArray and ImageSnapshotArrayOutput values.
// You can construct a concrete instance of `ImageSnapshotArrayInput` via:
//
//	ImageSnapshotArray{ ImageSnapshotArgs{...} }
type ImageSnapshotArrayInput interface {
	pulumi.Input

	ToImageSnapshotArrayOutput() ImageSnapshotArrayOutput
	ToImageSnapshotArrayOutputWithContext(context.Context) ImageSnapshotArrayOutput
}

type ImageSnapshotArray []ImageSnapshotInput

func (ImageSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageSnapshot)(nil)).Elem()
}

func (i ImageSnapshotArray) ToImageSnapshotArrayOutput() ImageSnapshotArrayOutput {
	return i.ToImageSnapshotArrayOutputWithContext(context.Background())
}

func (i ImageSnapshotArray) ToImageSnapshotArrayOutputWithContext(ctx context.Context) ImageSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSnapshotArrayOutput)
}

type ImageSnapshotOutput struct{ *pulumi.OutputState }

func (ImageSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSnapshot)(nil)).Elem()
}

func (o ImageSnapshotOutput) ToImageSnapshotOutput() ImageSnapshotOutput {
	return o
}

func (o ImageSnapshotOutput) ToImageSnapshotOutputWithContext(ctx context.Context) ImageSnapshotOutput {
	return o
}

// 快照大小。单位为GiB。
func (o ImageSnapshotOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ImageSnapshot) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// 快照ID。
func (o ImageSnapshotOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSnapshot) *string { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// 云盘种类。system：系统盘。data：数据盘。
func (o ImageSnapshotOutput) VolumeKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSnapshot) *string { return v.VolumeKind }).(pulumi.StringPtrOutput)
}

type ImageSnapshotArrayOutput struct{ *pulumi.OutputState }

func (ImageSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageSnapshot)(nil)).Elem()
}

func (o ImageSnapshotArrayOutput) ToImageSnapshotArrayOutput() ImageSnapshotArrayOutput {
	return o
}

func (o ImageSnapshotArrayOutput) ToImageSnapshotArrayOutputWithContext(ctx context.Context) ImageSnapshotArrayOutput {
	return o
}

func (o ImageSnapshotArrayOutput) Index(i pulumi.IntInput) ImageSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageSnapshot {
		return vs[0].([]ImageSnapshot)[vs[1].(int)]
	}).(ImageSnapshotOutput)
}

type ImageTag struct {
	// 镜像标签的标签键。
	Key *string `pulumi:"key"`
	// 镜像标签的值。
	Value *string `pulumi:"value"`
}

// ImageTagInput is an input type that accepts ImageTagArgs and ImageTagOutput values.
// You can construct a concrete instance of `ImageTagInput` via:
//
//	ImageTagArgs{...}
type ImageTagInput interface {
	pulumi.Input

	ToImageTagOutput() ImageTagOutput
	ToImageTagOutputWithContext(context.Context) ImageTagOutput
}

type ImageTagArgs struct {
	// 镜像标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 镜像标签的值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTag)(nil)).Elem()
}

func (i ImageTagArgs) ToImageTagOutput() ImageTagOutput {
	return i.ToImageTagOutputWithContext(context.Background())
}

func (i ImageTagArgs) ToImageTagOutputWithContext(ctx context.Context) ImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTagOutput)
}

// ImageTagArrayInput is an input type that accepts ImageTagArray and ImageTagArrayOutput values.
// You can construct a concrete instance of `ImageTagArrayInput` via:
//
//	ImageTagArray{ ImageTagArgs{...} }
type ImageTagArrayInput interface {
	pulumi.Input

	ToImageTagArrayOutput() ImageTagArrayOutput
	ToImageTagArrayOutputWithContext(context.Context) ImageTagArrayOutput
}

type ImageTagArray []ImageTagInput

func (ImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTag)(nil)).Elem()
}

func (i ImageTagArray) ToImageTagArrayOutput() ImageTagArrayOutput {
	return i.ToImageTagArrayOutputWithContext(context.Background())
}

func (i ImageTagArray) ToImageTagArrayOutputWithContext(ctx context.Context) ImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTagArrayOutput)
}

type ImageTagOutput struct{ *pulumi.OutputState }

func (ImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTag)(nil)).Elem()
}

func (o ImageTagOutput) ToImageTagOutput() ImageTagOutput {
	return o
}

func (o ImageTagOutput) ToImageTagOutputWithContext(ctx context.Context) ImageTagOutput {
	return o
}

// 镜像标签的标签键。
func (o ImageTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 镜像标签的值。
func (o ImageTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ImageTagArrayOutput struct{ *pulumi.OutputState }

func (ImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTag)(nil)).Elem()
}

func (o ImageTagArrayOutput) ToImageTagArrayOutput() ImageTagArrayOutput {
	return o
}

func (o ImageTagArrayOutput) ToImageTagArrayOutputWithContext(ctx context.Context) ImageTagArrayOutput {
	return o
}

func (o ImageTagArrayOutput) Index(i pulumi.IntInput) ImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTag {
		return vs[0].([]ImageTag)[vs[1].(int)]
	}).(ImageTagOutput)
}

type InvocationInvocationResult struct {
	// 命令ID。
	CommandId *string `pulumi:"commandId"`
	// 命令执行的完成时间。
	EndTime *string `pulumi:"endTime"`
	// 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
	ErrorCode *string `pulumi:"errorCode"`
	// 命令执行失败的错误信息。
	ErrorMessage *string `pulumi:"errorMessage"`
	// 脚本执行后的退出状态码。
	ExitCode *int `pulumi:"exitCode"`
	// 实例ID。
	InstanceId *string `pulumi:"instanceId"`
	// 任务执行ID。
	InvocationId *string `pulumi:"invocationId"`
	// 任务执行结果ID。
	InvocationResultId *string `pulumi:"invocationResultId"`
	// 单台实例的命令进度状态。
	InvocationResultStatus *string `pulumi:"invocationResultStatus"`
	// 经过Base64编码的命令执行后输出信息。
	Output *string `pulumi:"output"`
	// 命令在实例中开始执行的时间。
	StartTime *string `pulumi:"startTime"`
	// 在实例中执行命令的用户名称。
	Username *string `pulumi:"username"`
}

// InvocationInvocationResultInput is an input type that accepts InvocationInvocationResultArgs and InvocationInvocationResultOutput values.
// You can construct a concrete instance of `InvocationInvocationResultInput` via:
//
//	InvocationInvocationResultArgs{...}
type InvocationInvocationResultInput interface {
	pulumi.Input

	ToInvocationInvocationResultOutput() InvocationInvocationResultOutput
	ToInvocationInvocationResultOutputWithContext(context.Context) InvocationInvocationResultOutput
}

type InvocationInvocationResultArgs struct {
	// 命令ID。
	CommandId pulumi.StringPtrInput `pulumi:"commandId"`
	// 命令执行的完成时间。
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
	ErrorCode pulumi.StringPtrInput `pulumi:"errorCode"`
	// 命令执行失败的错误信息。
	ErrorMessage pulumi.StringPtrInput `pulumi:"errorMessage"`
	// 脚本执行后的退出状态码。
	ExitCode pulumi.IntPtrInput `pulumi:"exitCode"`
	// 实例ID。
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// 任务执行ID。
	InvocationId pulumi.StringPtrInput `pulumi:"invocationId"`
	// 任务执行结果ID。
	InvocationResultId pulumi.StringPtrInput `pulumi:"invocationResultId"`
	// 单台实例的命令进度状态。
	InvocationResultStatus pulumi.StringPtrInput `pulumi:"invocationResultStatus"`
	// 经过Base64编码的命令执行后输出信息。
	Output pulumi.StringPtrInput `pulumi:"output"`
	// 命令在实例中开始执行的时间。
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// 在实例中执行命令的用户名称。
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (InvocationInvocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationInvocationResult)(nil)).Elem()
}

func (i InvocationInvocationResultArgs) ToInvocationInvocationResultOutput() InvocationInvocationResultOutput {
	return i.ToInvocationInvocationResultOutputWithContext(context.Background())
}

func (i InvocationInvocationResultArgs) ToInvocationInvocationResultOutputWithContext(ctx context.Context) InvocationInvocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationInvocationResultOutput)
}

// InvocationInvocationResultArrayInput is an input type that accepts InvocationInvocationResultArray and InvocationInvocationResultArrayOutput values.
// You can construct a concrete instance of `InvocationInvocationResultArrayInput` via:
//
//	InvocationInvocationResultArray{ InvocationInvocationResultArgs{...} }
type InvocationInvocationResultArrayInput interface {
	pulumi.Input

	ToInvocationInvocationResultArrayOutput() InvocationInvocationResultArrayOutput
	ToInvocationInvocationResultArrayOutputWithContext(context.Context) InvocationInvocationResultArrayOutput
}

type InvocationInvocationResultArray []InvocationInvocationResultInput

func (InvocationInvocationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationInvocationResult)(nil)).Elem()
}

func (i InvocationInvocationResultArray) ToInvocationInvocationResultArrayOutput() InvocationInvocationResultArrayOutput {
	return i.ToInvocationInvocationResultArrayOutputWithContext(context.Background())
}

func (i InvocationInvocationResultArray) ToInvocationInvocationResultArrayOutputWithContext(ctx context.Context) InvocationInvocationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationInvocationResultArrayOutput)
}

type InvocationInvocationResultOutput struct{ *pulumi.OutputState }

func (InvocationInvocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationInvocationResult)(nil)).Elem()
}

func (o InvocationInvocationResultOutput) ToInvocationInvocationResultOutput() InvocationInvocationResultOutput {
	return o
}

func (o InvocationInvocationResultOutput) ToInvocationInvocationResultOutputWithContext(ctx context.Context) InvocationInvocationResultOutput {
	return o
}

// 命令ID。
func (o InvocationInvocationResultOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// 命令执行的完成时间。
func (o InvocationInvocationResultOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
func (o InvocationInvocationResultOutput) ErrorCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.ErrorCode }).(pulumi.StringPtrOutput)
}

// 命令执行失败的错误信息。
func (o InvocationInvocationResultOutput) ErrorMessage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.ErrorMessage }).(pulumi.StringPtrOutput)
}

// 脚本执行后的退出状态码。
func (o InvocationInvocationResultOutput) ExitCode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *int { return v.ExitCode }).(pulumi.IntPtrOutput)
}

// 实例ID。
func (o InvocationInvocationResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// 任务执行ID。
func (o InvocationInvocationResultOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.InvocationId }).(pulumi.StringPtrOutput)
}

// 任务执行结果ID。
func (o InvocationInvocationResultOutput) InvocationResultId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.InvocationResultId }).(pulumi.StringPtrOutput)
}

// 单台实例的命令进度状态。
func (o InvocationInvocationResultOutput) InvocationResultStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.InvocationResultStatus }).(pulumi.StringPtrOutput)
}

// 经过Base64编码的命令执行后输出信息。
func (o InvocationInvocationResultOutput) Output() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.Output }).(pulumi.StringPtrOutput)
}

// 命令在实例中开始执行的时间。
func (o InvocationInvocationResultOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// 在实例中执行命令的用户名称。
func (o InvocationInvocationResultOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationInvocationResult) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type InvocationInvocationResultArrayOutput struct{ *pulumi.OutputState }

func (InvocationInvocationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationInvocationResult)(nil)).Elem()
}

func (o InvocationInvocationResultArrayOutput) ToInvocationInvocationResultArrayOutput() InvocationInvocationResultArrayOutput {
	return o
}

func (o InvocationInvocationResultArrayOutput) ToInvocationInvocationResultArrayOutputWithContext(ctx context.Context) InvocationInvocationResultArrayOutput {
	return o
}

func (o InvocationInvocationResultArrayOutput) Index(i pulumi.IntInput) InvocationInvocationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationInvocationResult {
		return vs[0].([]InvocationInvocationResult)[vs[1].(int)]
	}).(InvocationInvocationResultOutput)
}

type InvocationParameterDefinition struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision *int `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue *string `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength *int `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue *string `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength *int `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue *string `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。
	Name *string `pulumi:"name"`
	// 是否必填。true：必填。false：非必填。
	Required *bool `pulumi:"required"`
	// 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
	Type *string `pulumi:"type"`
}

// InvocationParameterDefinitionInput is an input type that accepts InvocationParameterDefinitionArgs and InvocationParameterDefinitionOutput values.
// You can construct a concrete instance of `InvocationParameterDefinitionInput` via:
//
//	InvocationParameterDefinitionArgs{...}
type InvocationParameterDefinitionInput interface {
	pulumi.Input

	ToInvocationParameterDefinitionOutput() InvocationParameterDefinitionOutput
	ToInvocationParameterDefinitionOutputWithContext(context.Context) InvocationParameterDefinitionOutput
}

type InvocationParameterDefinitionArgs struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision pulumi.IntPtrInput `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength pulumi.IntPtrInput `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue pulumi.StringPtrInput `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength pulumi.IntPtrInput `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue pulumi.StringPtrInput `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。
	Name pulumi.StringPtrInput `pulumi:"name"`
	// 是否必填。true：必填。false：非必填。
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (InvocationParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationParameterDefinition)(nil)).Elem()
}

func (i InvocationParameterDefinitionArgs) ToInvocationParameterDefinitionOutput() InvocationParameterDefinitionOutput {
	return i.ToInvocationParameterDefinitionOutputWithContext(context.Background())
}

func (i InvocationParameterDefinitionArgs) ToInvocationParameterDefinitionOutputWithContext(ctx context.Context) InvocationParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationParameterDefinitionOutput)
}

// InvocationParameterDefinitionArrayInput is an input type that accepts InvocationParameterDefinitionArray and InvocationParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `InvocationParameterDefinitionArrayInput` via:
//
//	InvocationParameterDefinitionArray{ InvocationParameterDefinitionArgs{...} }
type InvocationParameterDefinitionArrayInput interface {
	pulumi.Input

	ToInvocationParameterDefinitionArrayOutput() InvocationParameterDefinitionArrayOutput
	ToInvocationParameterDefinitionArrayOutputWithContext(context.Context) InvocationParameterDefinitionArrayOutput
}

type InvocationParameterDefinitionArray []InvocationParameterDefinitionInput

func (InvocationParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationParameterDefinition)(nil)).Elem()
}

func (i InvocationParameterDefinitionArray) ToInvocationParameterDefinitionArrayOutput() InvocationParameterDefinitionArrayOutput {
	return i.ToInvocationParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i InvocationParameterDefinitionArray) ToInvocationParameterDefinitionArrayOutputWithContext(ctx context.Context) InvocationParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationParameterDefinitionArrayOutput)
}

type InvocationParameterDefinitionOutput struct{ *pulumi.OutputState }

func (InvocationParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationParameterDefinition)(nil)).Elem()
}

func (o InvocationParameterDefinitionOutput) ToInvocationParameterDefinitionOutput() InvocationParameterDefinitionOutput {
	return o
}

func (o InvocationParameterDefinitionOutput) ToInvocationParameterDefinitionOutputWithContext(ctx context.Context) InvocationParameterDefinitionOutput {
	return o
}

// 自定义参数值（数字）允许的小数点后位数。
func (o InvocationParameterDefinitionOutput) DecimalPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *int { return v.DecimalPrecision }).(pulumi.IntPtrOutput)
}

// 自定义参数默认值。
func (o InvocationParameterDefinitionOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// 自定义参数值（字符串）的最大长度。
func (o InvocationParameterDefinitionOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *int { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// 自定义参数值（数字）的最大值。
func (o InvocationParameterDefinitionOutput) MaxValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *string { return v.MaxValue }).(pulumi.StringPtrOutput)
}

// 自定义参数值（字符串）的最小长度。
func (o InvocationParameterDefinitionOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *int { return v.MinLength }).(pulumi.IntPtrOutput)
}

// 自定义参数值（数字）的最小值。
func (o InvocationParameterDefinitionOutput) MinValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *string { return v.MinValue }).(pulumi.StringPtrOutput)
}

// 自定义参数名称，需要在脚本中通过{{Param}}定义 。
func (o InvocationParameterDefinitionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// 是否必填。true：必填。false：非必填。
func (o InvocationParameterDefinitionOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
func (o InvocationParameterDefinitionOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationParameterDefinition) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type InvocationParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (InvocationParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationParameterDefinition)(nil)).Elem()
}

func (o InvocationParameterDefinitionArrayOutput) ToInvocationParameterDefinitionArrayOutput() InvocationParameterDefinitionArrayOutput {
	return o
}

func (o InvocationParameterDefinitionArrayOutput) ToInvocationParameterDefinitionArrayOutputWithContext(ctx context.Context) InvocationParameterDefinitionArrayOutput {
	return o
}

func (o InvocationParameterDefinitionArrayOutput) Index(i pulumi.IntInput) InvocationParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationParameterDefinition {
		return vs[0].([]InvocationParameterDefinition)[vs[1].(int)]
	}).(InvocationParameterDefinitionOutput)
}

type InvocationTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// InvocationTagInput is an input type that accepts InvocationTagArgs and InvocationTagOutput values.
// You can construct a concrete instance of `InvocationTagInput` via:
//
//	InvocationTagArgs{...}
type InvocationTagInput interface {
	pulumi.Input

	ToInvocationTagOutput() InvocationTagOutput
	ToInvocationTagOutputWithContext(context.Context) InvocationTagOutput
}

type InvocationTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InvocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationTag)(nil)).Elem()
}

func (i InvocationTagArgs) ToInvocationTagOutput() InvocationTagOutput {
	return i.ToInvocationTagOutputWithContext(context.Background())
}

func (i InvocationTagArgs) ToInvocationTagOutputWithContext(ctx context.Context) InvocationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationTagOutput)
}

// InvocationTagArrayInput is an input type that accepts InvocationTagArray and InvocationTagArrayOutput values.
// You can construct a concrete instance of `InvocationTagArrayInput` via:
//
//	InvocationTagArray{ InvocationTagArgs{...} }
type InvocationTagArrayInput interface {
	pulumi.Input

	ToInvocationTagArrayOutput() InvocationTagArrayOutput
	ToInvocationTagArrayOutputWithContext(context.Context) InvocationTagArrayOutput
}

type InvocationTagArray []InvocationTagInput

func (InvocationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationTag)(nil)).Elem()
}

func (i InvocationTagArray) ToInvocationTagArrayOutput() InvocationTagArrayOutput {
	return i.ToInvocationTagArrayOutputWithContext(context.Background())
}

func (i InvocationTagArray) ToInvocationTagArrayOutputWithContext(ctx context.Context) InvocationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationTagArrayOutput)
}

type InvocationTagOutput struct{ *pulumi.OutputState }

func (InvocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationTag)(nil)).Elem()
}

func (o InvocationTagOutput) ToInvocationTagOutput() InvocationTagOutput {
	return o
}

func (o InvocationTagOutput) ToInvocationTagOutputWithContext(ctx context.Context) InvocationTagOutput {
	return o
}

func (o InvocationTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o InvocationTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InvocationTagArrayOutput struct{ *pulumi.OutputState }

func (InvocationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationTag)(nil)).Elem()
}

func (o InvocationTagArrayOutput) ToInvocationTagArrayOutput() InvocationTagArrayOutput {
	return o
}

func (o InvocationTagArrayOutput) ToInvocationTagArrayOutputWithContext(ctx context.Context) InvocationTagArrayOutput {
	return o
}

func (o InvocationTagArrayOutput) Index(i pulumi.IntInput) InvocationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationTag {
		return vs[0].([]InvocationTag)[vs[1].(int)]
	}).(InvocationTagOutput)
}

type KeypairTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// KeypairTagInput is an input type that accepts KeypairTagArgs and KeypairTagOutput values.
// You can construct a concrete instance of `KeypairTagInput` via:
//
//	KeypairTagArgs{...}
type KeypairTagInput interface {
	pulumi.Input

	ToKeypairTagOutput() KeypairTagOutput
	ToKeypairTagOutputWithContext(context.Context) KeypairTagOutput
}

type KeypairTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (KeypairTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeypairTag)(nil)).Elem()
}

func (i KeypairTagArgs) ToKeypairTagOutput() KeypairTagOutput {
	return i.ToKeypairTagOutputWithContext(context.Background())
}

func (i KeypairTagArgs) ToKeypairTagOutputWithContext(ctx context.Context) KeypairTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairTagOutput)
}

// KeypairTagArrayInput is an input type that accepts KeypairTagArray and KeypairTagArrayOutput values.
// You can construct a concrete instance of `KeypairTagArrayInput` via:
//
//	KeypairTagArray{ KeypairTagArgs{...} }
type KeypairTagArrayInput interface {
	pulumi.Input

	ToKeypairTagArrayOutput() KeypairTagArrayOutput
	ToKeypairTagArrayOutputWithContext(context.Context) KeypairTagArrayOutput
}

type KeypairTagArray []KeypairTagInput

func (KeypairTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeypairTag)(nil)).Elem()
}

func (i KeypairTagArray) ToKeypairTagArrayOutput() KeypairTagArrayOutput {
	return i.ToKeypairTagArrayOutputWithContext(context.Background())
}

func (i KeypairTagArray) ToKeypairTagArrayOutputWithContext(ctx context.Context) KeypairTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeypairTagArrayOutput)
}

type KeypairTagOutput struct{ *pulumi.OutputState }

func (KeypairTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeypairTag)(nil)).Elem()
}

func (o KeypairTagOutput) ToKeypairTagOutput() KeypairTagOutput {
	return o
}

func (o KeypairTagOutput) ToKeypairTagOutputWithContext(ctx context.Context) KeypairTagOutput {
	return o
}

// 标签键。
func (o KeypairTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeypairTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o KeypairTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeypairTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type KeypairTagArrayOutput struct{ *pulumi.OutputState }

func (KeypairTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeypairTag)(nil)).Elem()
}

func (o KeypairTagArrayOutput) ToKeypairTagArrayOutput() KeypairTagArrayOutput {
	return o
}

func (o KeypairTagArrayOutput) ToKeypairTagArrayOutputWithContext(ctx context.Context) KeypairTagArrayOutput {
	return o
}

func (o KeypairTagArrayOutput) Index(i pulumi.IntInput) KeypairTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeypairTag {
		return vs[0].([]KeypairTag)[vs[1].(int)]
	}).(KeypairTagOutput)
}

type GetCommandParameterDefinition struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision int `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue string `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength int `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue string `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength int `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue string `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
	Name string `pulumi:"name"`
	// 是否必填。
	Required bool `pulumi:"required"`
	// 自定义参数类型。
	Type string `pulumi:"type"`
}

// GetCommandParameterDefinitionInput is an input type that accepts GetCommandParameterDefinitionArgs and GetCommandParameterDefinitionOutput values.
// You can construct a concrete instance of `GetCommandParameterDefinitionInput` via:
//
//	GetCommandParameterDefinitionArgs{...}
type GetCommandParameterDefinitionInput interface {
	pulumi.Input

	ToGetCommandParameterDefinitionOutput() GetCommandParameterDefinitionOutput
	ToGetCommandParameterDefinitionOutputWithContext(context.Context) GetCommandParameterDefinitionOutput
}

type GetCommandParameterDefinitionArgs struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision pulumi.IntInput `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength pulumi.IntInput `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue pulumi.StringInput `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength pulumi.IntInput `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue pulumi.StringInput `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
	Name pulumi.StringInput `pulumi:"name"`
	// 是否必填。
	Required pulumi.BoolInput `pulumi:"required"`
	// 自定义参数类型。
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetCommandParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandParameterDefinition)(nil)).Elem()
}

func (i GetCommandParameterDefinitionArgs) ToGetCommandParameterDefinitionOutput() GetCommandParameterDefinitionOutput {
	return i.ToGetCommandParameterDefinitionOutputWithContext(context.Background())
}

func (i GetCommandParameterDefinitionArgs) ToGetCommandParameterDefinitionOutputWithContext(ctx context.Context) GetCommandParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandParameterDefinitionOutput)
}

// GetCommandParameterDefinitionArrayInput is an input type that accepts GetCommandParameterDefinitionArray and GetCommandParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `GetCommandParameterDefinitionArrayInput` via:
//
//	GetCommandParameterDefinitionArray{ GetCommandParameterDefinitionArgs{...} }
type GetCommandParameterDefinitionArrayInput interface {
	pulumi.Input

	ToGetCommandParameterDefinitionArrayOutput() GetCommandParameterDefinitionArrayOutput
	ToGetCommandParameterDefinitionArrayOutputWithContext(context.Context) GetCommandParameterDefinitionArrayOutput
}

type GetCommandParameterDefinitionArray []GetCommandParameterDefinitionInput

func (GetCommandParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandParameterDefinition)(nil)).Elem()
}

func (i GetCommandParameterDefinitionArray) ToGetCommandParameterDefinitionArrayOutput() GetCommandParameterDefinitionArrayOutput {
	return i.ToGetCommandParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i GetCommandParameterDefinitionArray) ToGetCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) GetCommandParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandParameterDefinitionArrayOutput)
}

type GetCommandParameterDefinitionOutput struct{ *pulumi.OutputState }

func (GetCommandParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandParameterDefinition)(nil)).Elem()
}

func (o GetCommandParameterDefinitionOutput) ToGetCommandParameterDefinitionOutput() GetCommandParameterDefinitionOutput {
	return o
}

func (o GetCommandParameterDefinitionOutput) ToGetCommandParameterDefinitionOutputWithContext(ctx context.Context) GetCommandParameterDefinitionOutput {
	return o
}

// 自定义参数值（数字）允许的小数点后位数。
func (o GetCommandParameterDefinitionOutput) DecimalPrecision() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) int { return v.DecimalPrecision }).(pulumi.IntOutput)
}

// 自定义参数默认值。
func (o GetCommandParameterDefinitionOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// 自定义参数值（字符串）的最大长度。
func (o GetCommandParameterDefinitionOutput) MaxLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) int { return v.MaxLength }).(pulumi.IntOutput)
}

// 自定义参数值（数字）的最大值。
func (o GetCommandParameterDefinitionOutput) MaxValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) string { return v.MaxValue }).(pulumi.StringOutput)
}

// 自定义参数值（字符串）的最小长度。
func (o GetCommandParameterDefinitionOutput) MinLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) int { return v.MinLength }).(pulumi.IntOutput)
}

// 自定义参数值（数字）的最小值。
func (o GetCommandParameterDefinitionOutput) MinValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) string { return v.MinValue }).(pulumi.StringOutput)
}

// 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
func (o GetCommandParameterDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// 是否必填。
func (o GetCommandParameterDefinitionOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) bool { return v.Required }).(pulumi.BoolOutput)
}

// 自定义参数类型。
func (o GetCommandParameterDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandParameterDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type GetCommandParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (GetCommandParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandParameterDefinition)(nil)).Elem()
}

func (o GetCommandParameterDefinitionArrayOutput) ToGetCommandParameterDefinitionArrayOutput() GetCommandParameterDefinitionArrayOutput {
	return o
}

func (o GetCommandParameterDefinitionArrayOutput) ToGetCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) GetCommandParameterDefinitionArrayOutput {
	return o
}

func (o GetCommandParameterDefinitionArrayOutput) Index(i pulumi.IntInput) GetCommandParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommandParameterDefinition {
		return vs[0].([]GetCommandParameterDefinition)[vs[1].(int)]
	}).(GetCommandParameterDefinitionOutput)
}

type GetCommandTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetCommandTagInput is an input type that accepts GetCommandTagArgs and GetCommandTagOutput values.
// You can construct a concrete instance of `GetCommandTagInput` via:
//
//	GetCommandTagArgs{...}
type GetCommandTagInput interface {
	pulumi.Input

	ToGetCommandTagOutput() GetCommandTagOutput
	ToGetCommandTagOutputWithContext(context.Context) GetCommandTagOutput
}

type GetCommandTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetCommandTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandTag)(nil)).Elem()
}

func (i GetCommandTagArgs) ToGetCommandTagOutput() GetCommandTagOutput {
	return i.ToGetCommandTagOutputWithContext(context.Background())
}

func (i GetCommandTagArgs) ToGetCommandTagOutputWithContext(ctx context.Context) GetCommandTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandTagOutput)
}

// GetCommandTagArrayInput is an input type that accepts GetCommandTagArray and GetCommandTagArrayOutput values.
// You can construct a concrete instance of `GetCommandTagArrayInput` via:
//
//	GetCommandTagArray{ GetCommandTagArgs{...} }
type GetCommandTagArrayInput interface {
	pulumi.Input

	ToGetCommandTagArrayOutput() GetCommandTagArrayOutput
	ToGetCommandTagArrayOutputWithContext(context.Context) GetCommandTagArrayOutput
}

type GetCommandTagArray []GetCommandTagInput

func (GetCommandTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandTag)(nil)).Elem()
}

func (i GetCommandTagArray) ToGetCommandTagArrayOutput() GetCommandTagArrayOutput {
	return i.ToGetCommandTagArrayOutputWithContext(context.Background())
}

func (i GetCommandTagArray) ToGetCommandTagArrayOutputWithContext(ctx context.Context) GetCommandTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandTagArrayOutput)
}

type GetCommandTagOutput struct{ *pulumi.OutputState }

func (GetCommandTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandTag)(nil)).Elem()
}

func (o GetCommandTagOutput) ToGetCommandTagOutput() GetCommandTagOutput {
	return o
}

func (o GetCommandTagOutput) ToGetCommandTagOutputWithContext(ctx context.Context) GetCommandTagOutput {
	return o
}

func (o GetCommandTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetCommandTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetCommandTagArrayOutput struct{ *pulumi.OutputState }

func (GetCommandTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandTag)(nil)).Elem()
}

func (o GetCommandTagArrayOutput) ToGetCommandTagArrayOutput() GetCommandTagArrayOutput {
	return o
}

func (o GetCommandTagArrayOutput) ToGetCommandTagArrayOutputWithContext(ctx context.Context) GetCommandTagArrayOutput {
	return o
}

func (o GetCommandTagArrayOutput) Index(i pulumi.IntInput) GetCommandTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommandTag {
		return vs[0].([]GetCommandTag)[vs[1].(int)]
	}).(GetCommandTagOutput)
}

type GetImageDetectionResults struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus string `pulumi:"detectionStatus"`
	// 镜像检测项详情。
	Items []GetImageDetectionResultsItem `pulumi:"items"`
}

// GetImageDetectionResultsInput is an input type that accepts GetImageDetectionResultsArgs and GetImageDetectionResultsOutput values.
// You can construct a concrete instance of `GetImageDetectionResultsInput` via:
//
//	GetImageDetectionResultsArgs{...}
type GetImageDetectionResultsInput interface {
	pulumi.Input

	ToGetImageDetectionResultsOutput() GetImageDetectionResultsOutput
	ToGetImageDetectionResultsOutputWithContext(context.Context) GetImageDetectionResultsOutput
}

type GetImageDetectionResultsArgs struct {
	// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
	DetectionStatus pulumi.StringInput `pulumi:"detectionStatus"`
	// 镜像检测项详情。
	Items GetImageDetectionResultsItemArrayInput `pulumi:"items"`
}

func (GetImageDetectionResultsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResults)(nil)).Elem()
}

func (i GetImageDetectionResultsArgs) ToGetImageDetectionResultsOutput() GetImageDetectionResultsOutput {
	return i.ToGetImageDetectionResultsOutputWithContext(context.Background())
}

func (i GetImageDetectionResultsArgs) ToGetImageDetectionResultsOutputWithContext(ctx context.Context) GetImageDetectionResultsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageDetectionResultsOutput)
}

type GetImageDetectionResultsOutput struct{ *pulumi.OutputState }

func (GetImageDetectionResultsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResults)(nil)).Elem()
}

func (o GetImageDetectionResultsOutput) ToGetImageDetectionResultsOutput() GetImageDetectionResultsOutput {
	return o
}

func (o GetImageDetectionResultsOutput) ToGetImageDetectionResultsOutputWithContext(ctx context.Context) GetImageDetectionResultsOutput {
	return o
}

// 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
func (o GetImageDetectionResultsOutput) DetectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResults) string { return v.DetectionStatus }).(pulumi.StringOutput)
}

// 镜像检测项详情。
func (o GetImageDetectionResultsOutput) Items() GetImageDetectionResultsItemArrayOutput {
	return o.ApplyT(func(v GetImageDetectionResults) []GetImageDetectionResultsItem { return v.Items }).(GetImageDetectionResultsItemArrayOutput)
}

type GetImageDetectionResultsItem struct {
	// 检测项名称。
	Name string `pulumi:"name"`
	// 该检测项对应结果。
	Result string `pulumi:"result"`
	// 风险描述码。
	RiskCode string `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel string `pulumi:"riskLevel"`
}

// GetImageDetectionResultsItemInput is an input type that accepts GetImageDetectionResultsItemArgs and GetImageDetectionResultsItemOutput values.
// You can construct a concrete instance of `GetImageDetectionResultsItemInput` via:
//
//	GetImageDetectionResultsItemArgs{...}
type GetImageDetectionResultsItemInput interface {
	pulumi.Input

	ToGetImageDetectionResultsItemOutput() GetImageDetectionResultsItemOutput
	ToGetImageDetectionResultsItemOutputWithContext(context.Context) GetImageDetectionResultsItemOutput
}

type GetImageDetectionResultsItemArgs struct {
	// 检测项名称。
	Name pulumi.StringInput `pulumi:"name"`
	// 该检测项对应结果。
	Result pulumi.StringInput `pulumi:"result"`
	// 风险描述码。
	RiskCode pulumi.StringInput `pulumi:"riskCode"`
	// 风险等级。若该参数返回值为空，表示无风险。
	RiskLevel pulumi.StringInput `pulumi:"riskLevel"`
}

func (GetImageDetectionResultsItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResultsItem)(nil)).Elem()
}

func (i GetImageDetectionResultsItemArgs) ToGetImageDetectionResultsItemOutput() GetImageDetectionResultsItemOutput {
	return i.ToGetImageDetectionResultsItemOutputWithContext(context.Background())
}

func (i GetImageDetectionResultsItemArgs) ToGetImageDetectionResultsItemOutputWithContext(ctx context.Context) GetImageDetectionResultsItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageDetectionResultsItemOutput)
}

// GetImageDetectionResultsItemArrayInput is an input type that accepts GetImageDetectionResultsItemArray and GetImageDetectionResultsItemArrayOutput values.
// You can construct a concrete instance of `GetImageDetectionResultsItemArrayInput` via:
//
//	GetImageDetectionResultsItemArray{ GetImageDetectionResultsItemArgs{...} }
type GetImageDetectionResultsItemArrayInput interface {
	pulumi.Input

	ToGetImageDetectionResultsItemArrayOutput() GetImageDetectionResultsItemArrayOutput
	ToGetImageDetectionResultsItemArrayOutputWithContext(context.Context) GetImageDetectionResultsItemArrayOutput
}

type GetImageDetectionResultsItemArray []GetImageDetectionResultsItemInput

func (GetImageDetectionResultsItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageDetectionResultsItem)(nil)).Elem()
}

func (i GetImageDetectionResultsItemArray) ToGetImageDetectionResultsItemArrayOutput() GetImageDetectionResultsItemArrayOutput {
	return i.ToGetImageDetectionResultsItemArrayOutputWithContext(context.Background())
}

func (i GetImageDetectionResultsItemArray) ToGetImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) GetImageDetectionResultsItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageDetectionResultsItemArrayOutput)
}

type GetImageDetectionResultsItemOutput struct{ *pulumi.OutputState }

func (GetImageDetectionResultsItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageDetectionResultsItem)(nil)).Elem()
}

func (o GetImageDetectionResultsItemOutput) ToGetImageDetectionResultsItemOutput() GetImageDetectionResultsItemOutput {
	return o
}

func (o GetImageDetectionResultsItemOutput) ToGetImageDetectionResultsItemOutputWithContext(ctx context.Context) GetImageDetectionResultsItemOutput {
	return o
}

// 检测项名称。
func (o GetImageDetectionResultsItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.Name }).(pulumi.StringOutput)
}

// 该检测项对应结果。
func (o GetImageDetectionResultsItemOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.Result }).(pulumi.StringOutput)
}

// 风险描述码。
func (o GetImageDetectionResultsItemOutput) RiskCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.RiskCode }).(pulumi.StringOutput)
}

// 风险等级。若该参数返回值为空，表示无风险。
func (o GetImageDetectionResultsItemOutput) RiskLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageDetectionResultsItem) string { return v.RiskLevel }).(pulumi.StringOutput)
}

type GetImageDetectionResultsItemArrayOutput struct{ *pulumi.OutputState }

func (GetImageDetectionResultsItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageDetectionResultsItem)(nil)).Elem()
}

func (o GetImageDetectionResultsItemArrayOutput) ToGetImageDetectionResultsItemArrayOutput() GetImageDetectionResultsItemArrayOutput {
	return o
}

func (o GetImageDetectionResultsItemArrayOutput) ToGetImageDetectionResultsItemArrayOutputWithContext(ctx context.Context) GetImageDetectionResultsItemArrayOutput {
	return o
}

func (o GetImageDetectionResultsItemArrayOutput) Index(i pulumi.IntInput) GetImageDetectionResultsItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageDetectionResultsItem {
		return vs[0].([]GetImageDetectionResultsItem)[vs[1].(int)]
	}).(GetImageDetectionResultsItemOutput)
}

type GetImageSnapshot struct {
	// 快照大小。单位为GiB。
	Size int `pulumi:"size"`
	// 快照ID。
	SnapshotId string `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind string `pulumi:"volumeKind"`
}

// GetImageSnapshotInput is an input type that accepts GetImageSnapshotArgs and GetImageSnapshotOutput values.
// You can construct a concrete instance of `GetImageSnapshotInput` via:
//
//	GetImageSnapshotArgs{...}
type GetImageSnapshotInput interface {
	pulumi.Input

	ToGetImageSnapshotOutput() GetImageSnapshotOutput
	ToGetImageSnapshotOutputWithContext(context.Context) GetImageSnapshotOutput
}

type GetImageSnapshotArgs struct {
	// 快照大小。单位为GiB。
	Size pulumi.IntInput `pulumi:"size"`
	// 快照ID。
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
	// 云盘种类。system：系统盘。data：数据盘。
	VolumeKind pulumi.StringInput `pulumi:"volumeKind"`
}

func (GetImageSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageSnapshot)(nil)).Elem()
}

func (i GetImageSnapshotArgs) ToGetImageSnapshotOutput() GetImageSnapshotOutput {
	return i.ToGetImageSnapshotOutputWithContext(context.Background())
}

func (i GetImageSnapshotArgs) ToGetImageSnapshotOutputWithContext(ctx context.Context) GetImageSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageSnapshotOutput)
}

// GetImageSnapshotArrayInput is an input type that accepts GetImageSnapshotArray and GetImageSnapshotArrayOutput values.
// You can construct a concrete instance of `GetImageSnapshotArrayInput` via:
//
//	GetImageSnapshotArray{ GetImageSnapshotArgs{...} }
type GetImageSnapshotArrayInput interface {
	pulumi.Input

	ToGetImageSnapshotArrayOutput() GetImageSnapshotArrayOutput
	ToGetImageSnapshotArrayOutputWithContext(context.Context) GetImageSnapshotArrayOutput
}

type GetImageSnapshotArray []GetImageSnapshotInput

func (GetImageSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageSnapshot)(nil)).Elem()
}

func (i GetImageSnapshotArray) ToGetImageSnapshotArrayOutput() GetImageSnapshotArrayOutput {
	return i.ToGetImageSnapshotArrayOutputWithContext(context.Background())
}

func (i GetImageSnapshotArray) ToGetImageSnapshotArrayOutputWithContext(ctx context.Context) GetImageSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageSnapshotArrayOutput)
}

type GetImageSnapshotOutput struct{ *pulumi.OutputState }

func (GetImageSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageSnapshot)(nil)).Elem()
}

func (o GetImageSnapshotOutput) ToGetImageSnapshotOutput() GetImageSnapshotOutput {
	return o
}

func (o GetImageSnapshotOutput) ToGetImageSnapshotOutputWithContext(ctx context.Context) GetImageSnapshotOutput {
	return o
}

// 快照大小。单位为GiB。
func (o GetImageSnapshotOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetImageSnapshot) int { return v.Size }).(pulumi.IntOutput)
}

// 快照ID。
func (o GetImageSnapshotOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageSnapshot) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// 云盘种类。system：系统盘。data：数据盘。
func (o GetImageSnapshotOutput) VolumeKind() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageSnapshot) string { return v.VolumeKind }).(pulumi.StringOutput)
}

type GetImageSnapshotArrayOutput struct{ *pulumi.OutputState }

func (GetImageSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageSnapshot)(nil)).Elem()
}

func (o GetImageSnapshotArrayOutput) ToGetImageSnapshotArrayOutput() GetImageSnapshotArrayOutput {
	return o
}

func (o GetImageSnapshotArrayOutput) ToGetImageSnapshotArrayOutputWithContext(ctx context.Context) GetImageSnapshotArrayOutput {
	return o
}

func (o GetImageSnapshotArrayOutput) Index(i pulumi.IntInput) GetImageSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageSnapshot {
		return vs[0].([]GetImageSnapshot)[vs[1].(int)]
	}).(GetImageSnapshotOutput)
}

type GetImageTag struct {
	// 镜像标签的标签键。
	Key string `pulumi:"key"`
	// 镜像标签的值。
	Value string `pulumi:"value"`
}

// GetImageTagInput is an input type that accepts GetImageTagArgs and GetImageTagOutput values.
// You can construct a concrete instance of `GetImageTagInput` via:
//
//	GetImageTagArgs{...}
type GetImageTagInput interface {
	pulumi.Input

	ToGetImageTagOutput() GetImageTagOutput
	ToGetImageTagOutputWithContext(context.Context) GetImageTagOutput
}

type GetImageTagArgs struct {
	// 镜像标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 镜像标签的值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageTag)(nil)).Elem()
}

func (i GetImageTagArgs) ToGetImageTagOutput() GetImageTagOutput {
	return i.ToGetImageTagOutputWithContext(context.Background())
}

func (i GetImageTagArgs) ToGetImageTagOutputWithContext(ctx context.Context) GetImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageTagOutput)
}

// GetImageTagArrayInput is an input type that accepts GetImageTagArray and GetImageTagArrayOutput values.
// You can construct a concrete instance of `GetImageTagArrayInput` via:
//
//	GetImageTagArray{ GetImageTagArgs{...} }
type GetImageTagArrayInput interface {
	pulumi.Input

	ToGetImageTagArrayOutput() GetImageTagArrayOutput
	ToGetImageTagArrayOutputWithContext(context.Context) GetImageTagArrayOutput
}

type GetImageTagArray []GetImageTagInput

func (GetImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageTag)(nil)).Elem()
}

func (i GetImageTagArray) ToGetImageTagArrayOutput() GetImageTagArrayOutput {
	return i.ToGetImageTagArrayOutputWithContext(context.Background())
}

func (i GetImageTagArray) ToGetImageTagArrayOutputWithContext(ctx context.Context) GetImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageTagArrayOutput)
}

type GetImageTagOutput struct{ *pulumi.OutputState }

func (GetImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageTag)(nil)).Elem()
}

func (o GetImageTagOutput) ToGetImageTagOutput() GetImageTagOutput {
	return o
}

func (o GetImageTagOutput) ToGetImageTagOutputWithContext(ctx context.Context) GetImageTagOutput {
	return o
}

// 镜像标签的标签键。
func (o GetImageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageTag) string { return v.Key }).(pulumi.StringOutput)
}

// 镜像标签的值。
func (o GetImageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetImageTagArrayOutput struct{ *pulumi.OutputState }

func (GetImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageTag)(nil)).Elem()
}

func (o GetImageTagArrayOutput) ToGetImageTagArrayOutput() GetImageTagArrayOutput {
	return o
}

func (o GetImageTagArrayOutput) ToGetImageTagArrayOutputWithContext(ctx context.Context) GetImageTagArrayOutput {
	return o
}

func (o GetImageTagArrayOutput) Index(i pulumi.IntInput) GetImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageTag {
		return vs[0].([]GetImageTag)[vs[1].(int)]
	}).(GetImageTagOutput)
}

type GetInvocationInvocationResult struct {
	// 命令ID。
	CommandId string `pulumi:"commandId"`
	// 命令执行的完成时间。
	EndTime string `pulumi:"endTime"`
	// 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
	ErrorCode string `pulumi:"errorCode"`
	// 命令执行失败的错误信息。
	ErrorMessage string `pulumi:"errorMessage"`
	// 脚本执行后的退出状态码。
	ExitCode int `pulumi:"exitCode"`
	// 实例ID。
	InstanceId string `pulumi:"instanceId"`
	// 任务执行ID。
	InvocationId string `pulumi:"invocationId"`
	// 任务执行结果ID。
	InvocationResultId string `pulumi:"invocationResultId"`
	// 单台实例的命令进度状态。
	InvocationResultStatus string `pulumi:"invocationResultStatus"`
	// 经过Base64编码的命令执行后输出信息。
	Output string `pulumi:"output"`
	// 命令在实例中开始执行的时间。
	StartTime string `pulumi:"startTime"`
	// 在实例中执行命令的用户名称。
	Username string `pulumi:"username"`
}

// GetInvocationInvocationResultInput is an input type that accepts GetInvocationInvocationResultArgs and GetInvocationInvocationResultOutput values.
// You can construct a concrete instance of `GetInvocationInvocationResultInput` via:
//
//	GetInvocationInvocationResultArgs{...}
type GetInvocationInvocationResultInput interface {
	pulumi.Input

	ToGetInvocationInvocationResultOutput() GetInvocationInvocationResultOutput
	ToGetInvocationInvocationResultOutputWithContext(context.Context) GetInvocationInvocationResultOutput
}

type GetInvocationInvocationResultArgs struct {
	// 命令ID。
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// 命令执行的完成时间。
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
	ErrorCode pulumi.StringInput `pulumi:"errorCode"`
	// 命令执行失败的错误信息。
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// 脚本执行后的退出状态码。
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// 实例ID。
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// 任务执行ID。
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// 任务执行结果ID。
	InvocationResultId pulumi.StringInput `pulumi:"invocationResultId"`
	// 单台实例的命令进度状态。
	InvocationResultStatus pulumi.StringInput `pulumi:"invocationResultStatus"`
	// 经过Base64编码的命令执行后输出信息。
	Output pulumi.StringInput `pulumi:"output"`
	// 命令在实例中开始执行的时间。
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// 在实例中执行命令的用户名称。
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetInvocationInvocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationInvocationResult)(nil)).Elem()
}

func (i GetInvocationInvocationResultArgs) ToGetInvocationInvocationResultOutput() GetInvocationInvocationResultOutput {
	return i.ToGetInvocationInvocationResultOutputWithContext(context.Background())
}

func (i GetInvocationInvocationResultArgs) ToGetInvocationInvocationResultOutputWithContext(ctx context.Context) GetInvocationInvocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationInvocationResultOutput)
}

// GetInvocationInvocationResultArrayInput is an input type that accepts GetInvocationInvocationResultArray and GetInvocationInvocationResultArrayOutput values.
// You can construct a concrete instance of `GetInvocationInvocationResultArrayInput` via:
//
//	GetInvocationInvocationResultArray{ GetInvocationInvocationResultArgs{...} }
type GetInvocationInvocationResultArrayInput interface {
	pulumi.Input

	ToGetInvocationInvocationResultArrayOutput() GetInvocationInvocationResultArrayOutput
	ToGetInvocationInvocationResultArrayOutputWithContext(context.Context) GetInvocationInvocationResultArrayOutput
}

type GetInvocationInvocationResultArray []GetInvocationInvocationResultInput

func (GetInvocationInvocationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationInvocationResult)(nil)).Elem()
}

func (i GetInvocationInvocationResultArray) ToGetInvocationInvocationResultArrayOutput() GetInvocationInvocationResultArrayOutput {
	return i.ToGetInvocationInvocationResultArrayOutputWithContext(context.Background())
}

func (i GetInvocationInvocationResultArray) ToGetInvocationInvocationResultArrayOutputWithContext(ctx context.Context) GetInvocationInvocationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationInvocationResultArrayOutput)
}

type GetInvocationInvocationResultOutput struct{ *pulumi.OutputState }

func (GetInvocationInvocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationInvocationResult)(nil)).Elem()
}

func (o GetInvocationInvocationResultOutput) ToGetInvocationInvocationResultOutput() GetInvocationInvocationResultOutput {
	return o
}

func (o GetInvocationInvocationResultOutput) ToGetInvocationInvocationResultOutputWithContext(ctx context.Context) GetInvocationInvocationResultOutput {
	return o
}

// 命令ID。
func (o GetInvocationInvocationResultOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.CommandId }).(pulumi.StringOutput)
}

// 命令执行的完成时间。
func (o GetInvocationInvocationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
func (o GetInvocationInvocationResultOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// 命令执行失败的错误信息。
func (o GetInvocationInvocationResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// 脚本执行后的退出状态码。
func (o GetInvocationInvocationResultOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) int { return v.ExitCode }).(pulumi.IntOutput)
}

// 实例ID。
func (o GetInvocationInvocationResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// 任务执行ID。
func (o GetInvocationInvocationResultOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.InvocationId }).(pulumi.StringOutput)
}

// 任务执行结果ID。
func (o GetInvocationInvocationResultOutput) InvocationResultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.InvocationResultId }).(pulumi.StringOutput)
}

// 单台实例的命令进度状态。
func (o GetInvocationInvocationResultOutput) InvocationResultStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.InvocationResultStatus }).(pulumi.StringOutput)
}

// 经过Base64编码的命令执行后输出信息。
func (o GetInvocationInvocationResultOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.Output }).(pulumi.StringOutput)
}

// 命令在实例中开始执行的时间。
func (o GetInvocationInvocationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// 在实例中执行命令的用户名称。
func (o GetInvocationInvocationResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationInvocationResult) string { return v.Username }).(pulumi.StringOutput)
}

type GetInvocationInvocationResultArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationInvocationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationInvocationResult)(nil)).Elem()
}

func (o GetInvocationInvocationResultArrayOutput) ToGetInvocationInvocationResultArrayOutput() GetInvocationInvocationResultArrayOutput {
	return o
}

func (o GetInvocationInvocationResultArrayOutput) ToGetInvocationInvocationResultArrayOutputWithContext(ctx context.Context) GetInvocationInvocationResultArrayOutput {
	return o
}

func (o GetInvocationInvocationResultArrayOutput) Index(i pulumi.IntInput) GetInvocationInvocationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationInvocationResult {
		return vs[0].([]GetInvocationInvocationResult)[vs[1].(int)]
	}).(GetInvocationInvocationResultOutput)
}

type GetInvocationParameterDefinition struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision int `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue string `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength int `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue string `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength int `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue string `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。
	Name string `pulumi:"name"`
	// 是否必填。true：必填。false：非必填。
	Required bool `pulumi:"required"`
	// 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
	Type string `pulumi:"type"`
}

// GetInvocationParameterDefinitionInput is an input type that accepts GetInvocationParameterDefinitionArgs and GetInvocationParameterDefinitionOutput values.
// You can construct a concrete instance of `GetInvocationParameterDefinitionInput` via:
//
//	GetInvocationParameterDefinitionArgs{...}
type GetInvocationParameterDefinitionInput interface {
	pulumi.Input

	ToGetInvocationParameterDefinitionOutput() GetInvocationParameterDefinitionOutput
	ToGetInvocationParameterDefinitionOutputWithContext(context.Context) GetInvocationParameterDefinitionOutput
}

type GetInvocationParameterDefinitionArgs struct {
	// 自定义参数值（数字）允许的小数点后位数。
	DecimalPrecision pulumi.IntInput `pulumi:"decimalPrecision"`
	// 自定义参数默认值。
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// 自定义参数值（字符串）的最大长度。
	MaxLength pulumi.IntInput `pulumi:"maxLength"`
	// 自定义参数值（数字）的最大值。
	MaxValue pulumi.StringInput `pulumi:"maxValue"`
	// 自定义参数值（字符串）的最小长度。
	MinLength pulumi.IntInput `pulumi:"minLength"`
	// 自定义参数值（数字）的最小值。
	MinValue pulumi.StringInput `pulumi:"minValue"`
	// 自定义参数名称，需要在脚本中通过{{Param}}定义 。
	Name pulumi.StringInput `pulumi:"name"`
	// 是否必填。true：必填。false：非必填。
	Required pulumi.BoolInput `pulumi:"required"`
	// 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetInvocationParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationParameterDefinition)(nil)).Elem()
}

func (i GetInvocationParameterDefinitionArgs) ToGetInvocationParameterDefinitionOutput() GetInvocationParameterDefinitionOutput {
	return i.ToGetInvocationParameterDefinitionOutputWithContext(context.Background())
}

func (i GetInvocationParameterDefinitionArgs) ToGetInvocationParameterDefinitionOutputWithContext(ctx context.Context) GetInvocationParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationParameterDefinitionOutput)
}

// GetInvocationParameterDefinitionArrayInput is an input type that accepts GetInvocationParameterDefinitionArray and GetInvocationParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `GetInvocationParameterDefinitionArrayInput` via:
//
//	GetInvocationParameterDefinitionArray{ GetInvocationParameterDefinitionArgs{...} }
type GetInvocationParameterDefinitionArrayInput interface {
	pulumi.Input

	ToGetInvocationParameterDefinitionArrayOutput() GetInvocationParameterDefinitionArrayOutput
	ToGetInvocationParameterDefinitionArrayOutputWithContext(context.Context) GetInvocationParameterDefinitionArrayOutput
}

type GetInvocationParameterDefinitionArray []GetInvocationParameterDefinitionInput

func (GetInvocationParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationParameterDefinition)(nil)).Elem()
}

func (i GetInvocationParameterDefinitionArray) ToGetInvocationParameterDefinitionArrayOutput() GetInvocationParameterDefinitionArrayOutput {
	return i.ToGetInvocationParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i GetInvocationParameterDefinitionArray) ToGetInvocationParameterDefinitionArrayOutputWithContext(ctx context.Context) GetInvocationParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationParameterDefinitionArrayOutput)
}

type GetInvocationParameterDefinitionOutput struct{ *pulumi.OutputState }

func (GetInvocationParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationParameterDefinition)(nil)).Elem()
}

func (o GetInvocationParameterDefinitionOutput) ToGetInvocationParameterDefinitionOutput() GetInvocationParameterDefinitionOutput {
	return o
}

func (o GetInvocationParameterDefinitionOutput) ToGetInvocationParameterDefinitionOutputWithContext(ctx context.Context) GetInvocationParameterDefinitionOutput {
	return o
}

// 自定义参数值（数字）允许的小数点后位数。
func (o GetInvocationParameterDefinitionOutput) DecimalPrecision() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) int { return v.DecimalPrecision }).(pulumi.IntOutput)
}

// 自定义参数默认值。
func (o GetInvocationParameterDefinitionOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// 自定义参数值（字符串）的最大长度。
func (o GetInvocationParameterDefinitionOutput) MaxLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) int { return v.MaxLength }).(pulumi.IntOutput)
}

// 自定义参数值（数字）的最大值。
func (o GetInvocationParameterDefinitionOutput) MaxValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) string { return v.MaxValue }).(pulumi.StringOutput)
}

// 自定义参数值（字符串）的最小长度。
func (o GetInvocationParameterDefinitionOutput) MinLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) int { return v.MinLength }).(pulumi.IntOutput)
}

// 自定义参数值（数字）的最小值。
func (o GetInvocationParameterDefinitionOutput) MinValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) string { return v.MinValue }).(pulumi.StringOutput)
}

// 自定义参数名称，需要在脚本中通过{{Param}}定义 。
func (o GetInvocationParameterDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// 是否必填。true：必填。false：非必填。
func (o GetInvocationParameterDefinitionOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) bool { return v.Required }).(pulumi.BoolOutput)
}

// 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
func (o GetInvocationParameterDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationParameterDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type GetInvocationParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationParameterDefinition)(nil)).Elem()
}

func (o GetInvocationParameterDefinitionArrayOutput) ToGetInvocationParameterDefinitionArrayOutput() GetInvocationParameterDefinitionArrayOutput {
	return o
}

func (o GetInvocationParameterDefinitionArrayOutput) ToGetInvocationParameterDefinitionArrayOutputWithContext(ctx context.Context) GetInvocationParameterDefinitionArrayOutput {
	return o
}

func (o GetInvocationParameterDefinitionArrayOutput) Index(i pulumi.IntInput) GetInvocationParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationParameterDefinition {
		return vs[0].([]GetInvocationParameterDefinition)[vs[1].(int)]
	}).(GetInvocationParameterDefinitionOutput)
}

type GetInvocationTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetInvocationTagInput is an input type that accepts GetInvocationTagArgs and GetInvocationTagOutput values.
// You can construct a concrete instance of `GetInvocationTagInput` via:
//
//	GetInvocationTagArgs{...}
type GetInvocationTagInput interface {
	pulumi.Input

	ToGetInvocationTagOutput() GetInvocationTagOutput
	ToGetInvocationTagOutputWithContext(context.Context) GetInvocationTagOutput
}

type GetInvocationTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInvocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationTag)(nil)).Elem()
}

func (i GetInvocationTagArgs) ToGetInvocationTagOutput() GetInvocationTagOutput {
	return i.ToGetInvocationTagOutputWithContext(context.Background())
}

func (i GetInvocationTagArgs) ToGetInvocationTagOutputWithContext(ctx context.Context) GetInvocationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationTagOutput)
}

// GetInvocationTagArrayInput is an input type that accepts GetInvocationTagArray and GetInvocationTagArrayOutput values.
// You can construct a concrete instance of `GetInvocationTagArrayInput` via:
//
//	GetInvocationTagArray{ GetInvocationTagArgs{...} }
type GetInvocationTagArrayInput interface {
	pulumi.Input

	ToGetInvocationTagArrayOutput() GetInvocationTagArrayOutput
	ToGetInvocationTagArrayOutputWithContext(context.Context) GetInvocationTagArrayOutput
}

type GetInvocationTagArray []GetInvocationTagInput

func (GetInvocationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationTag)(nil)).Elem()
}

func (i GetInvocationTagArray) ToGetInvocationTagArrayOutput() GetInvocationTagArrayOutput {
	return i.ToGetInvocationTagArrayOutputWithContext(context.Background())
}

func (i GetInvocationTagArray) ToGetInvocationTagArrayOutputWithContext(ctx context.Context) GetInvocationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationTagArrayOutput)
}

type GetInvocationTagOutput struct{ *pulumi.OutputState }

func (GetInvocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationTag)(nil)).Elem()
}

func (o GetInvocationTagOutput) ToGetInvocationTagOutput() GetInvocationTagOutput {
	return o
}

func (o GetInvocationTagOutput) ToGetInvocationTagOutputWithContext(ctx context.Context) GetInvocationTagOutput {
	return o
}

func (o GetInvocationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetInvocationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInvocationTagArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationTag)(nil)).Elem()
}

func (o GetInvocationTagArrayOutput) ToGetInvocationTagArrayOutput() GetInvocationTagArrayOutput {
	return o
}

func (o GetInvocationTagArrayOutput) ToGetInvocationTagArrayOutputWithContext(ctx context.Context) GetInvocationTagArrayOutput {
	return o
}

func (o GetInvocationTagArrayOutput) Index(i pulumi.IntInput) GetInvocationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationTag {
		return vs[0].([]GetInvocationTag)[vs[1].(int)]
	}).(GetInvocationTagOutput)
}

type GetKeypairTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetKeypairTagInput is an input type that accepts GetKeypairTagArgs and GetKeypairTagOutput values.
// You can construct a concrete instance of `GetKeypairTagInput` via:
//
//	GetKeypairTagArgs{...}
type GetKeypairTagInput interface {
	pulumi.Input

	ToGetKeypairTagOutput() GetKeypairTagOutput
	ToGetKeypairTagOutputWithContext(context.Context) GetKeypairTagOutput
}

type GetKeypairTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetKeypairTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeypairTag)(nil)).Elem()
}

func (i GetKeypairTagArgs) ToGetKeypairTagOutput() GetKeypairTagOutput {
	return i.ToGetKeypairTagOutputWithContext(context.Background())
}

func (i GetKeypairTagArgs) ToGetKeypairTagOutputWithContext(ctx context.Context) GetKeypairTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeypairTagOutput)
}

// GetKeypairTagArrayInput is an input type that accepts GetKeypairTagArray and GetKeypairTagArrayOutput values.
// You can construct a concrete instance of `GetKeypairTagArrayInput` via:
//
//	GetKeypairTagArray{ GetKeypairTagArgs{...} }
type GetKeypairTagArrayInput interface {
	pulumi.Input

	ToGetKeypairTagArrayOutput() GetKeypairTagArrayOutput
	ToGetKeypairTagArrayOutputWithContext(context.Context) GetKeypairTagArrayOutput
}

type GetKeypairTagArray []GetKeypairTagInput

func (GetKeypairTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeypairTag)(nil)).Elem()
}

func (i GetKeypairTagArray) ToGetKeypairTagArrayOutput() GetKeypairTagArrayOutput {
	return i.ToGetKeypairTagArrayOutputWithContext(context.Background())
}

func (i GetKeypairTagArray) ToGetKeypairTagArrayOutputWithContext(ctx context.Context) GetKeypairTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeypairTagArrayOutput)
}

type GetKeypairTagOutput struct{ *pulumi.OutputState }

func (GetKeypairTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeypairTag)(nil)).Elem()
}

func (o GetKeypairTagOutput) ToGetKeypairTagOutput() GetKeypairTagOutput {
	return o
}

func (o GetKeypairTagOutput) ToGetKeypairTagOutputWithContext(ctx context.Context) GetKeypairTagOutput {
	return o
}

// 标签键。
func (o GetKeypairTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeypairTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetKeypairTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeypairTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetKeypairTagArrayOutput struct{ *pulumi.OutputState }

func (GetKeypairTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeypairTag)(nil)).Elem()
}

func (o GetKeypairTagArrayOutput) ToGetKeypairTagArrayOutput() GetKeypairTagArrayOutput {
	return o
}

func (o GetKeypairTagArrayOutput) ToGetKeypairTagArrayOutputWithContext(ctx context.Context) GetKeypairTagArrayOutput {
	return o
}

func (o GetKeypairTagArrayOutput) Index(i pulumi.IntInput) GetKeypairTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeypairTag {
		return vs[0].([]GetKeypairTag)[vs[1].(int)]
	}).(GetKeypairTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommandParameterDefinitionInput)(nil)).Elem(), CommandParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandParameterDefinitionArrayInput)(nil)).Elem(), CommandParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandTagInput)(nil)).Elem(), CommandTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandTagArrayInput)(nil)).Elem(), CommandTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsInput)(nil)).Elem(), ImageDetectionResultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsPtrInput)(nil)).Elem(), ImageDetectionResultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsItemInput)(nil)).Elem(), ImageDetectionResultsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageDetectionResultsItemArrayInput)(nil)).Elem(), ImageDetectionResultsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSnapshotInput)(nil)).Elem(), ImageSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSnapshotArrayInput)(nil)).Elem(), ImageSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTagInput)(nil)).Elem(), ImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTagArrayInput)(nil)).Elem(), ImageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationInvocationResultInput)(nil)).Elem(), InvocationInvocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationInvocationResultArrayInput)(nil)).Elem(), InvocationInvocationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationParameterDefinitionInput)(nil)).Elem(), InvocationParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationParameterDefinitionArrayInput)(nil)).Elem(), InvocationParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationTagInput)(nil)).Elem(), InvocationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationTagArrayInput)(nil)).Elem(), InvocationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairTagInput)(nil)).Elem(), KeypairTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeypairTagArrayInput)(nil)).Elem(), KeypairTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandParameterDefinitionInput)(nil)).Elem(), GetCommandParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandParameterDefinitionArrayInput)(nil)).Elem(), GetCommandParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandTagInput)(nil)).Elem(), GetCommandTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandTagArrayInput)(nil)).Elem(), GetCommandTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageDetectionResultsInput)(nil)).Elem(), GetImageDetectionResultsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageDetectionResultsItemInput)(nil)).Elem(), GetImageDetectionResultsItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageDetectionResultsItemArrayInput)(nil)).Elem(), GetImageDetectionResultsItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageSnapshotInput)(nil)).Elem(), GetImageSnapshotArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageSnapshotArrayInput)(nil)).Elem(), GetImageSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageTagInput)(nil)).Elem(), GetImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageTagArrayInput)(nil)).Elem(), GetImageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationInvocationResultInput)(nil)).Elem(), GetInvocationInvocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationInvocationResultArrayInput)(nil)).Elem(), GetInvocationInvocationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationParameterDefinitionInput)(nil)).Elem(), GetInvocationParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationParameterDefinitionArrayInput)(nil)).Elem(), GetInvocationParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationTagInput)(nil)).Elem(), GetInvocationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationTagArrayInput)(nil)).Elem(), GetInvocationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeypairTagInput)(nil)).Elem(), GetKeypairTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeypairTagArrayInput)(nil)).Elem(), GetKeypairTagArray{})
	pulumi.RegisterOutputType(CommandParameterDefinitionOutput{})
	pulumi.RegisterOutputType(CommandParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(CommandTagOutput{})
	pulumi.RegisterOutputType(CommandTagArrayOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsPtrOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsItemOutput{})
	pulumi.RegisterOutputType(ImageDetectionResultsItemArrayOutput{})
	pulumi.RegisterOutputType(ImageSnapshotOutput{})
	pulumi.RegisterOutputType(ImageSnapshotArrayOutput{})
	pulumi.RegisterOutputType(ImageTagOutput{})
	pulumi.RegisterOutputType(ImageTagArrayOutput{})
	pulumi.RegisterOutputType(InvocationInvocationResultOutput{})
	pulumi.RegisterOutputType(InvocationInvocationResultArrayOutput{})
	pulumi.RegisterOutputType(InvocationParameterDefinitionOutput{})
	pulumi.RegisterOutputType(InvocationParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(InvocationTagOutput{})
	pulumi.RegisterOutputType(InvocationTagArrayOutput{})
	pulumi.RegisterOutputType(KeypairTagOutput{})
	pulumi.RegisterOutputType(KeypairTagArrayOutput{})
	pulumi.RegisterOutputType(GetCommandParameterDefinitionOutput{})
	pulumi.RegisterOutputType(GetCommandParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(GetCommandTagOutput{})
	pulumi.RegisterOutputType(GetCommandTagArrayOutput{})
	pulumi.RegisterOutputType(GetImageDetectionResultsOutput{})
	pulumi.RegisterOutputType(GetImageDetectionResultsItemOutput{})
	pulumi.RegisterOutputType(GetImageDetectionResultsItemArrayOutput{})
	pulumi.RegisterOutputType(GetImageSnapshotOutput{})
	pulumi.RegisterOutputType(GetImageSnapshotArrayOutput{})
	pulumi.RegisterOutputType(GetImageTagOutput{})
	pulumi.RegisterOutputType(GetImageTagArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationInvocationResultOutput{})
	pulumi.RegisterOutputType(GetInvocationInvocationResultArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationParameterDefinitionOutput{})
	pulumi.RegisterOutputType(GetInvocationParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationTagOutput{})
	pulumi.RegisterOutputType(GetInvocationTagArrayOutput{})
	pulumi.RegisterOutputType(GetKeypairTagOutput{})
	pulumi.RegisterOutputType(GetKeypairTagArrayOutput{})
}
