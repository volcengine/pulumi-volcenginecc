// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 镜像是包含了云服务器实例所需的基本操作系统、应用数据的特殊文件。创建实例时，必须选择镜像。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:ecs/image:Image example "image_id"
// ```
type Image struct {
	pulumi.CustomResourceState

	// 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
	Architecture pulumi.StringOutput `pulumi:"architecture"`
	// 镜像的启动模式。可以选择BIOS、UEFI类型。
	BootMode pulumi.StringOutput `pulumi:"bootMode"`
	// 镜像创建时间
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
	Description pulumi.StringOutput `pulumi:"description"`
	// 镜像的检测结果。
	DetectionResults ImageDetectionResultsOutput `pulumi:"detectionResults"`
	// 镜像ID。
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
	ImageName pulumi.StringOutput `pulumi:"imageName"`
	// 镜像所属的账号ID。
	ImageOwnerId pulumi.StringOutput `pulumi:"imageOwnerId"`
	// 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// 镜像中是否安装了云助手Agent。
	IsInstallRunCommandAgent pulumi.BoolOutput `pulumi:"isInstallRunCommandAgent"`
	// 公共镜像是否长期维护。
	IsLts pulumi.BoolOutput `pulumi:"isLts"`
	// 镜像是否支持Cloud-init。
	IsSupportCloudInit pulumi.BoolOutput `pulumi:"isSupportCloudInit"`
	// 镜像的内核版本。
	Kernel pulumi.StringOutput `pulumi:"kernel"`
	// 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
	LicenseType pulumi.StringOutput `pulumi:"licenseType"`
	// 镜像操作系统的名称。
	OsName pulumi.StringOutput `pulumi:"osName"`
	// 操作系统类型。
	OsType pulumi.StringOutput `pulumi:"osType"`
	// 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
	Platform pulumi.StringOutput `pulumi:"platform"`
	// 镜像的发行版本。
	PlatformVersion pulumi.StringOutput `pulumi:"platformVersion"`
	// 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 镜像共享的账户
	SharePermissions pulumi.StringArrayOutput `pulumi:"sharePermissions"`
	// 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
	ShareStatus pulumi.StringOutput `pulumi:"shareStatus"`
	// 镜像大小，单位为GiB。
	Size pulumi.IntOutput `pulumi:"size"`
	// 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
	SnapshotGroupId pulumi.StringOutput `pulumi:"snapshotGroupId"`
	// 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
	SnapshotId pulumi.StringOutput      `pulumi:"snapshotId"`
	Snapshots  ImageSnapshotArrayOutput `pulumi:"snapshots"`
	// 镜像的状态。
	Status pulumi.StringOutput `pulumi:"status"`
	Tags   ImageTagArrayOutput `pulumi:"tags"`
	// 镜像更新时间
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// 镜像大小，单位为Byte。
	VirtualSize pulumi.Float64Output `pulumi:"virtualSize"`
	// 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
	Visibility pulumi.StringOutput `pulumi:"visibility"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImageName == nil {
		return nil, errors.New("invalid value for required argument 'ImageName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Image
	err := ctx.RegisterResource("volcenginecc:ecs/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("volcenginecc:ecs/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
	Architecture *string `pulumi:"architecture"`
	// 镜像的启动模式。可以选择BIOS、UEFI类型。
	BootMode *string `pulumi:"bootMode"`
	// 镜像创建时间
	CreatedAt *string `pulumi:"createdAt"`
	// 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
	Description *string `pulumi:"description"`
	// 镜像的检测结果。
	DetectionResults *ImageDetectionResults `pulumi:"detectionResults"`
	// 镜像ID。
	ImageId *string `pulumi:"imageId"`
	// 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
	ImageName *string `pulumi:"imageName"`
	// 镜像所属的账号ID。
	ImageOwnerId *string `pulumi:"imageOwnerId"`
	// 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
	InstanceId *string `pulumi:"instanceId"`
	// 镜像中是否安装了云助手Agent。
	IsInstallRunCommandAgent *bool `pulumi:"isInstallRunCommandAgent"`
	// 公共镜像是否长期维护。
	IsLts *bool `pulumi:"isLts"`
	// 镜像是否支持Cloud-init。
	IsSupportCloudInit *bool `pulumi:"isSupportCloudInit"`
	// 镜像的内核版本。
	Kernel *string `pulumi:"kernel"`
	// 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
	LicenseType *string `pulumi:"licenseType"`
	// 镜像操作系统的名称。
	OsName *string `pulumi:"osName"`
	// 操作系统类型。
	OsType *string `pulumi:"osType"`
	// 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
	Platform *string `pulumi:"platform"`
	// 镜像的发行版本。
	PlatformVersion *string `pulumi:"platformVersion"`
	// 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
	ProjectName *string `pulumi:"projectName"`
	// 镜像共享的账户
	SharePermissions []string `pulumi:"sharePermissions"`
	// 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
	ShareStatus *string `pulumi:"shareStatus"`
	// 镜像大小，单位为GiB。
	Size *int `pulumi:"size"`
	// 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
	SnapshotGroupId *string `pulumi:"snapshotGroupId"`
	// 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
	SnapshotId *string         `pulumi:"snapshotId"`
	Snapshots  []ImageSnapshot `pulumi:"snapshots"`
	// 镜像的状态。
	Status *string    `pulumi:"status"`
	Tags   []ImageTag `pulumi:"tags"`
	// 镜像更新时间
	UpdatedAt *string `pulumi:"updatedAt"`
	// 镜像大小，单位为Byte。
	VirtualSize *float64 `pulumi:"virtualSize"`
	// 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
	Visibility *string `pulumi:"visibility"`
}

type ImageState struct {
	// 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
	Architecture pulumi.StringPtrInput
	// 镜像的启动模式。可以选择BIOS、UEFI类型。
	BootMode pulumi.StringPtrInput
	// 镜像创建时间
	CreatedAt pulumi.StringPtrInput
	// 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
	Description pulumi.StringPtrInput
	// 镜像的检测结果。
	DetectionResults ImageDetectionResultsPtrInput
	// 镜像ID。
	ImageId pulumi.StringPtrInput
	// 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
	ImageName pulumi.StringPtrInput
	// 镜像所属的账号ID。
	ImageOwnerId pulumi.StringPtrInput
	// 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
	InstanceId pulumi.StringPtrInput
	// 镜像中是否安装了云助手Agent。
	IsInstallRunCommandAgent pulumi.BoolPtrInput
	// 公共镜像是否长期维护。
	IsLts pulumi.BoolPtrInput
	// 镜像是否支持Cloud-init。
	IsSupportCloudInit pulumi.BoolPtrInput
	// 镜像的内核版本。
	Kernel pulumi.StringPtrInput
	// 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
	LicenseType pulumi.StringPtrInput
	// 镜像操作系统的名称。
	OsName pulumi.StringPtrInput
	// 操作系统类型。
	OsType pulumi.StringPtrInput
	// 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
	Platform pulumi.StringPtrInput
	// 镜像的发行版本。
	PlatformVersion pulumi.StringPtrInput
	// 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
	ProjectName pulumi.StringPtrInput
	// 镜像共享的账户
	SharePermissions pulumi.StringArrayInput
	// 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
	ShareStatus pulumi.StringPtrInput
	// 镜像大小，单位为GiB。
	Size pulumi.IntPtrInput
	// 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
	SnapshotGroupId pulumi.StringPtrInput
	// 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
	SnapshotId pulumi.StringPtrInput
	Snapshots  ImageSnapshotArrayInput
	// 镜像的状态。
	Status pulumi.StringPtrInput
	Tags   ImageTagArrayInput
	// 镜像更新时间
	UpdatedAt pulumi.StringPtrInput
	// 镜像大小，单位为Byte。
	VirtualSize pulumi.Float64PtrInput
	// 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
	Visibility pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
	Description *string `pulumi:"description"`
	// 镜像的检测结果。
	DetectionResults *ImageDetectionResults `pulumi:"detectionResults"`
	// 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
	ImageName string `pulumi:"imageName"`
	// 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
	InstanceId *string `pulumi:"instanceId"`
	// 镜像的内核版本。
	Kernel *string `pulumi:"kernel"`
	// 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
	LicenseType *string `pulumi:"licenseType"`
	// 镜像操作系统的名称。
	OsName *string `pulumi:"osName"`
	// 操作系统类型。
	OsType *string `pulumi:"osType"`
	// 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
	Platform *string `pulumi:"platform"`
	// 镜像的发行版本。
	PlatformVersion *string `pulumi:"platformVersion"`
	// 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
	ProjectName *string `pulumi:"projectName"`
	// 镜像共享的账户
	SharePermissions []string `pulumi:"sharePermissions"`
	// 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
	SnapshotGroupId *string `pulumi:"snapshotGroupId"`
	// 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
	SnapshotId *string    `pulumi:"snapshotId"`
	Tags       []ImageTag `pulumi:"tags"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
	Description pulumi.StringPtrInput
	// 镜像的检测结果。
	DetectionResults ImageDetectionResultsPtrInput
	// 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
	ImageName pulumi.StringInput
	// 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
	InstanceId pulumi.StringPtrInput
	// 镜像的内核版本。
	Kernel pulumi.StringPtrInput
	// 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
	LicenseType pulumi.StringPtrInput
	// 镜像操作系统的名称。
	OsName pulumi.StringPtrInput
	// 操作系统类型。
	OsType pulumi.StringPtrInput
	// 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
	Platform pulumi.StringPtrInput
	// 镜像的发行版本。
	PlatformVersion pulumi.StringPtrInput
	// 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
	ProjectName pulumi.StringPtrInput
	// 镜像共享的账户
	SharePermissions pulumi.StringArrayInput
	// 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
	SnapshotGroupId pulumi.StringPtrInput
	// 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
	SnapshotId pulumi.StringPtrInput
	Tags       ImageTagArrayInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//	ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//	ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil)).Elem()
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

// 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
func (o ImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Architecture }).(pulumi.StringOutput)
}

// 镜像的启动模式。可以选择BIOS、UEFI类型。
func (o ImageOutput) BootMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.BootMode }).(pulumi.StringOutput)
}

// 镜像创建时间
func (o ImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
func (o ImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 镜像的检测结果。
func (o ImageOutput) DetectionResults() ImageDetectionResultsOutput {
	return o.ApplyT(func(v *Image) ImageDetectionResultsOutput { return v.DetectionResults }).(ImageDetectionResultsOutput)
}

// 镜像ID。
func (o ImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
func (o ImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageName }).(pulumi.StringOutput)
}

// 镜像所属的账号ID。
func (o ImageOutput) ImageOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ImageOwnerId }).(pulumi.StringOutput)
}

// 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
func (o ImageOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// 镜像中是否安装了云助手Agent。
func (o ImageOutput) IsInstallRunCommandAgent() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.IsInstallRunCommandAgent }).(pulumi.BoolOutput)
}

// 公共镜像是否长期维护。
func (o ImageOutput) IsLts() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.IsLts }).(pulumi.BoolOutput)
}

// 镜像是否支持Cloud-init。
func (o ImageOutput) IsSupportCloudInit() pulumi.BoolOutput {
	return o.ApplyT(func(v *Image) pulumi.BoolOutput { return v.IsSupportCloudInit }).(pulumi.BoolOutput)
}

// 镜像的内核版本。
func (o ImageOutput) Kernel() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Kernel }).(pulumi.StringOutput)
}

// 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
func (o ImageOutput) LicenseType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.LicenseType }).(pulumi.StringOutput)
}

// 镜像操作系统的名称。
func (o ImageOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OsName }).(pulumi.StringOutput)
}

// 操作系统类型。
func (o ImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
func (o ImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

// 镜像的发行版本。
func (o ImageOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.PlatformVersion }).(pulumi.StringOutput)
}

// 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
func (o ImageOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 镜像共享的账户
func (o ImageOutput) SharePermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Image) pulumi.StringArrayOutput { return v.SharePermissions }).(pulumi.StringArrayOutput)
}

// 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
func (o ImageOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.ShareStatus }).(pulumi.StringOutput)
}

// 镜像大小，单位为GiB。
func (o ImageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Image) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
func (o ImageOutput) SnapshotGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SnapshotGroupId }).(pulumi.StringOutput)
}

// 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
func (o ImageOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.SnapshotId }).(pulumi.StringOutput)
}

func (o ImageOutput) Snapshots() ImageSnapshotArrayOutput {
	return o.ApplyT(func(v *Image) ImageSnapshotArrayOutput { return v.Snapshots }).(ImageSnapshotArrayOutput)
}

// 镜像的状态。
func (o ImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ImageOutput) Tags() ImageTagArrayOutput {
	return o.ApplyT(func(v *Image) ImageTagArrayOutput { return v.Tags }).(ImageTagArrayOutput)
}

// 镜像更新时间
func (o ImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// 镜像大小，单位为Byte。
func (o ImageOutput) VirtualSize() pulumi.Float64Output {
	return o.ApplyT(func(v *Image) pulumi.Float64Output { return v.VirtualSize }).(pulumi.Float64Output)
}

// 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
func (o ImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v *Image) pulumi.StringOutput { return v.Visibility }).(pulumi.StringOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Image {
		return vs[0].([]*Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Image {
		return vs[0].(map[string]*Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImageInput)(nil)).Elem(), &Image{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageArrayInput)(nil)).Elem(), ImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageMapInput)(nil)).Elem(), ImageMap{})
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
