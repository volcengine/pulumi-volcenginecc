// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 自定义命令是云助手提供的满足您个性化运维需求的功能，您可以在预置的公共命令不满足需求时创建自定义命令，并通过运维任务在实例中批量执行您编写的自定义命令。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:ecs/command:Command example "command_id"
// ```
type Command struct {
	pulumi.CustomResourceState

	// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
	CommandContent pulumi.StringOutput `pulumi:"commandContent"`
	// 自定义命令ID。
	CommandId pulumi.StringOutput `pulumi:"commandId"`
	// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
	ContentEncoding pulumi.StringOutput `pulumi:"contentEncoding"`
	// 创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
	Description pulumi.StringOutput `pulumi:"description"`
	// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
	EnableParameter pulumi.BoolOutput `pulumi:"enableParameter"`
	// 命令被调用次数。
	InvocationTimes pulumi.IntOutput `pulumi:"invocationTimes"`
	// 命令名称。字符长度1~32。不限制特殊字符。
	Name                 pulumi.StringOutput                   `pulumi:"name"`
	ParameterDefinitions CommandParameterDefinitionArrayOutput `pulumi:"parameterDefinitions"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 命令的提供方。
	ProviderName pulumi.StringOutput   `pulumi:"providerName"`
	Tags         CommandTagArrayOutput `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
	Type pulumi.StringOutput `pulumi:"type"`
	// 更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 执行命令时的用户名。
	Username pulumi.StringOutput `pulumi:"username"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir pulumi.StringOutput `pulumi:"workingDir"`
}

// NewCommand registers a new resource with the given unique name, arguments, and options.
func NewCommand(ctx *pulumi.Context,
	name string, args *CommandArgs, opts ...pulumi.ResourceOption) (*Command, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommandContent == nil {
		return nil, errors.New("invalid value for required argument 'CommandContent'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Command
	err := ctx.RegisterResource("volcenginecc:ecs/command:Command", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommand gets an existing Command resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandState, opts ...pulumi.ResourceOption) (*Command, error) {
	var resource Command
	err := ctx.ReadResource("volcenginecc:ecs/command:Command", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Command resources.
type commandState struct {
	// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
	CommandContent *string `pulumi:"commandContent"`
	// 自定义命令ID。
	CommandId *string `pulumi:"commandId"`
	// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
	ContentEncoding *string `pulumi:"contentEncoding"`
	// 创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
	Description *string `pulumi:"description"`
	// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
	EnableParameter *bool `pulumi:"enableParameter"`
	// 命令被调用次数。
	InvocationTimes *int `pulumi:"invocationTimes"`
	// 命令名称。字符长度1~32。不限制特殊字符。
	Name                 *string                      `pulumi:"name"`
	ParameterDefinitions []CommandParameterDefinition `pulumi:"parameterDefinitions"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName *string `pulumi:"projectName"`
	// 命令的提供方。
	ProviderName *string      `pulumi:"providerName"`
	Tags         []CommandTag `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
	Timeout *int `pulumi:"timeout"`
	// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
	Type *string `pulumi:"type"`
	// 更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 执行命令时的用户名。
	Username *string `pulumi:"username"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir *string `pulumi:"workingDir"`
}

type CommandState struct {
	// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
	CommandContent pulumi.StringPtrInput
	// 自定义命令ID。
	CommandId pulumi.StringPtrInput
	// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
	ContentEncoding pulumi.StringPtrInput
	// 创建时间。
	CreatedTime pulumi.StringPtrInput
	// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
	Description pulumi.StringPtrInput
	// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
	EnableParameter pulumi.BoolPtrInput
	// 命令被调用次数。
	InvocationTimes pulumi.IntPtrInput
	// 命令名称。字符长度1~32。不限制特殊字符。
	Name                 pulumi.StringPtrInput
	ParameterDefinitions CommandParameterDefinitionArrayInput
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName pulumi.StringPtrInput
	// 命令的提供方。
	ProviderName pulumi.StringPtrInput
	Tags         CommandTagArrayInput
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
	Timeout pulumi.IntPtrInput
	// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
	Type pulumi.StringPtrInput
	// 更新时间。
	UpdatedTime pulumi.StringPtrInput
	// 执行命令时的用户名。
	Username pulumi.StringPtrInput
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir pulumi.StringPtrInput
}

func (CommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandState)(nil)).Elem()
}

type commandArgs struct {
	// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
	CommandContent string `pulumi:"commandContent"`
	// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
	ContentEncoding *string `pulumi:"contentEncoding"`
	// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
	Description *string `pulumi:"description"`
	// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
	EnableParameter *bool `pulumi:"enableParameter"`
	// 命令名称。字符长度1~32。不限制特殊字符。
	Name                 string                       `pulumi:"name"`
	ParameterDefinitions []CommandParameterDefinition `pulumi:"parameterDefinitions"`
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName *string      `pulumi:"projectName"`
	Tags        []CommandTag `pulumi:"tags"`
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
	Timeout *int `pulumi:"timeout"`
	// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
	Type string `pulumi:"type"`
	// 执行命令时的用户名。
	Username *string `pulumi:"username"`
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir *string `pulumi:"workingDir"`
}

// The set of arguments for constructing a Command resource.
type CommandArgs struct {
	// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
	CommandContent pulumi.StringInput
	// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
	ContentEncoding pulumi.StringPtrInput
	// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
	Description pulumi.StringPtrInput
	// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
	EnableParameter pulumi.BoolPtrInput
	// 命令名称。字符长度1~32。不限制特殊字符。
	Name                 pulumi.StringInput
	ParameterDefinitions CommandParameterDefinitionArrayInput
	// 资源所属项目，一个资源只能归属于一个项目。
	ProjectName pulumi.StringPtrInput
	Tags        CommandTagArrayInput
	// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
	Timeout pulumi.IntPtrInput
	// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
	Type pulumi.StringInput
	// 执行命令时的用户名。
	Username pulumi.StringPtrInput
	// 创建的命令在ECS实例中运行的目录。
	WorkingDir pulumi.StringPtrInput
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandArgs)(nil)).Elem()
}

type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(ctx context.Context) CommandOutput
}

func (*Command) ElementType() reflect.Type {
	return reflect.TypeOf((**Command)(nil)).Elem()
}

func (i *Command) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i *Command) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//	CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// CommandMapInput is an input type that accepts CommandMap and CommandMapOutput values.
// You can construct a concrete instance of `CommandMapInput` via:
//
//	CommandMap{ "key": CommandArgs{...} }
type CommandMapInput interface {
	pulumi.Input

	ToCommandMapOutput() CommandMapOutput
	ToCommandMapOutputWithContext(context.Context) CommandMapOutput
}

type CommandMap map[string]CommandInput

func (CommandMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Command)(nil)).Elem()
}

func (i CommandMap) ToCommandMapOutput() CommandMapOutput {
	return i.ToCommandMapOutputWithContext(context.Background())
}

func (i CommandMap) ToCommandMapOutputWithContext(ctx context.Context) CommandMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandMapOutput)
}

type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
func (o CommandOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.CommandContent }).(pulumi.StringOutput)
}

// 自定义命令ID。
func (o CommandOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.CommandId }).(pulumi.StringOutput)
}

// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
func (o CommandOutput) ContentEncoding() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.ContentEncoding }).(pulumi.StringOutput)
}

// 创建时间。
func (o CommandOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
func (o CommandOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
func (o CommandOutput) EnableParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v *Command) pulumi.BoolOutput { return v.EnableParameter }).(pulumi.BoolOutput)
}

// 命令被调用次数。
func (o CommandOutput) InvocationTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *Command) pulumi.IntOutput { return v.InvocationTimes }).(pulumi.IntOutput)
}

// 命令名称。字符长度1~32。不限制特殊字符。
func (o CommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CommandOutput) ParameterDefinitions() CommandParameterDefinitionArrayOutput {
	return o.ApplyT(func(v *Command) CommandParameterDefinitionArrayOutput { return v.ParameterDefinitions }).(CommandParameterDefinitionArrayOutput)
}

// 资源所属项目，一个资源只能归属于一个项目。
func (o CommandOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 命令的提供方。
func (o CommandOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.ProviderName }).(pulumi.StringOutput)
}

func (o CommandOutput) Tags() CommandTagArrayOutput {
	return o.ApplyT(func(v *Command) CommandTagArrayOutput { return v.Tags }).(CommandTagArrayOutput)
}

// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
func (o CommandOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Command) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
func (o CommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// 更新时间。
func (o CommandOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 执行命令时的用户名。
func (o CommandOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// 创建的命令在ECS实例中运行的目录。
func (o CommandOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.WorkingDir }).(pulumi.StringOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Command {
		return vs[0].([]*Command)[vs[1].(int)]
	}).(CommandOutput)
}

type CommandMapOutput struct{ *pulumi.OutputState }

func (CommandMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Command)(nil)).Elem()
}

func (o CommandMapOutput) ToCommandMapOutput() CommandMapOutput {
	return o
}

func (o CommandMapOutput) ToCommandMapOutputWithContext(ctx context.Context) CommandMapOutput {
	return o
}

func (o CommandMapOutput) MapIndex(k pulumi.StringInput) CommandOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Command {
		return vs[0].(map[string]*Command)[vs[1].(string)]
	}).(CommandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommandInput)(nil)).Elem(), &Command{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandArrayInput)(nil)).Elem(), CommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandMapInput)(nil)).Elem(), CommandMap{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandMapOutput{})
}
