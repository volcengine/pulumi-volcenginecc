// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package volcenginecc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// The provider type for the volcenginecc package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
	// environment variable
	AccessKey pulumi.StringPtrOutput `pulumi:"accessKey"`
	// CUSTOMER HEADERS for Volcengine Provider. The customerHeaders field uses commas (,) to separate multiple headers, and
	// colons (:) to separate each header key from its corresponding value.
	CustomerHeaders pulumi.StringPtrOutput `pulumi:"customerHeaders"`
	// PROXY URL for Volcengine Provider
	ProxyUrl pulumi.StringPtrOutput `pulumi:"proxyUrl"`
	// The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
	// environment variable
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
	// environment variable
	SecretKey pulumi.StringPtrOutput `pulumi:"secretKey"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.AccessKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VOLCENGINE_ACCESS_KEY"); d != nil {
			args.AccessKey = pulumi.StringPtr(d.(string))
		}
	}
	if args.CustomerHeaders == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VOLCENGINE_CUSTOMER_HEADERS"); d != nil {
			args.CustomerHeaders = pulumi.StringPtr(d.(string))
		}
	}
	if args.DisableSsl == nil {
		if d := internal.GetEnvOrDefault(nil, internal.ParseEnvBool, "VOLCENGINE_DISABLE_SSL"); d != nil {
			args.DisableSsl = pulumi.BoolPtr(d.(bool))
		}
	}
	if args.ProxyUrl == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VOLCENGINE_PROXY_URL"); d != nil {
			args.ProxyUrl = pulumi.StringPtr(d.(string))
		}
	}
	if args.Region == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VOLCENGINE_REGION"); d != nil {
			args.Region = pulumi.StringPtr(d.(string))
		}
	}
	if args.SecretKey == nil {
		if d := internal.GetEnvOrDefault(nil, nil, "VOLCENGINE_SECRET_KEY"); d != nil {
			args.SecretKey = pulumi.StringPtr(d.(string))
		}
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:volcenginecc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
	// environment variable
	AccessKey *string `pulumi:"accessKey"`
	// An `assumeRole` block (documented below). Only one `assumeRole` block may be in the configuration.
	AssumeRole *ProviderAssumeRole `pulumi:"assumeRole"`
	// CUSTOMER HEADERS for Volcengine Provider. The customerHeaders field uses commas (,) to separate multiple headers, and
	// colons (:) to separate each header key from its corresponding value.
	CustomerHeaders *string `pulumi:"customerHeaders"`
	// Disable SSL for Volcengine Provider
	DisableSsl *bool `pulumi:"disableSsl"`
	// An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
	Endpoints *ProviderEndpoints `pulumi:"endpoints"`
	// PROXY URL for Volcengine Provider
	ProxyUrl *string `pulumi:"proxyUrl"`
	// The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
	// environment variable
	Region *string `pulumi:"region"`
	// he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
	// environment variable
	SecretKey *string `pulumi:"secretKey"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
	// environment variable
	AccessKey pulumi.StringPtrInput
	// An `assumeRole` block (documented below). Only one `assumeRole` block may be in the configuration.
	AssumeRole ProviderAssumeRolePtrInput
	// CUSTOMER HEADERS for Volcengine Provider. The customerHeaders field uses commas (,) to separate multiple headers, and
	// colons (:) to separate each header key from its corresponding value.
	CustomerHeaders pulumi.StringPtrInput
	// Disable SSL for Volcengine Provider
	DisableSsl pulumi.BoolPtrInput
	// An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
	Endpoints ProviderEndpointsPtrInput
	// PROXY URL for Volcengine Provider
	ProxyUrl pulumi.StringPtrInput
	// The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
	// environment variable
	Region pulumi.StringPtrInput
	// he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
	// environment variable
	SecretKey pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
func (r *Provider) TerraformConfig(ctx *pulumi.Context) (ProviderTerraformConfigResultOutput, error) {
	out, err := ctx.Call("pulumi:providers:volcenginecc/terraformConfig", nil, ProviderTerraformConfigResultOutput{}, r)
	if err != nil {
		return ProviderTerraformConfigResultOutput{}, err
	}
	return out.(ProviderTerraformConfigResultOutput), nil
}

type ProviderTerraformConfigResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

type ProviderTerraformConfigResultOutput struct{ *pulumi.OutputState }

func (ProviderTerraformConfigResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderTerraformConfigResult)(nil)).Elem()
}

func (o ProviderTerraformConfigResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v ProviderTerraformConfigResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
// environment variable
func (o ProviderOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// CUSTOMER HEADERS for Volcengine Provider. The customerHeaders field uses commas (,) to separate multiple headers, and
// colons (:) to separate each header key from its corresponding value.
func (o ProviderOutput) CustomerHeaders() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.CustomerHeaders }).(pulumi.StringPtrOutput)
}

// PROXY URL for Volcengine Provider
func (o ProviderOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

// The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
// environment variable
func (o ProviderOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
// environment variable
func (o ProviderOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderTerraformConfigResultOutput{})
}
