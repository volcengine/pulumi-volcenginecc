// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transitrouter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 中转路由器转发流量的依据，具有关联转发、静态路由、路由学习、路由同步等能力。每个TR实例下可以创建多个TR路由表，分别用于转发具有不同访问需求的网络实例的流量。多条网络实例连接可以关联同一个TR路由表。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:transitrouter/transitRouterRouteTable:TransitRouterRouteTable example "transit_router_id|transit_router_route_table_id"
// ```
type TransitRouterRouteTable struct {
	pulumi.CustomResourceState

	// TR路由表的创建时间
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description pulumi.StringOutput `pulumi:"description"`
	// TR路由表关联的收方向路由策略的ID
	InRoutePolicyTableId pulumi.StringOutput `pulumi:"inRoutePolicyTableId"`
	// TR路由表关联的发方向路由策略的ID
	OutRoutePolicyTableId pulumi.StringOutput `pulumi:"outRoutePolicyTableId"`
	// TR路由表的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用
	Status pulumi.StringOutput                   `pulumi:"status"`
	Tags   TransitRouterRouteTableTagArrayOutput `pulumi:"tags"`
	// 中转路由器实例的ID
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// TR路由表的ID
	TransitRouterRouteTableId pulumi.StringOutput `pulumi:"transitRouterRouteTableId"`
	// TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
	TransitRouterRouteTableName pulumi.StringOutput `pulumi:"transitRouterRouteTableName"`
	// TR路由表的类型。System：系统路由表。Custom：自定义路由表。
	TransitRouterRouteTableType pulumi.StringOutput `pulumi:"transitRouterRouteTableType"`
	// TR路由表的最近操作时间
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTransitRouterRouteTable registers a new resource with the given unique name, arguments, and options.
func NewTransitRouterRouteTable(ctx *pulumi.Context,
	name string, args *TransitRouterRouteTableArgs, opts ...pulumi.ResourceOption) (*TransitRouterRouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitRouterRouteTable
	err := ctx.RegisterResource("volcenginecc:transitrouter/transitRouterRouteTable:TransitRouterRouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitRouterRouteTable gets an existing TransitRouterRouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitRouterRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitRouterRouteTableState, opts ...pulumi.ResourceOption) (*TransitRouterRouteTable, error) {
	var resource TransitRouterRouteTable
	err := ctx.ReadResource("volcenginecc:transitrouter/transitRouterRouteTable:TransitRouterRouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitRouterRouteTable resources.
type transitRouterRouteTableState struct {
	// TR路由表的创建时间
	CreationTime *string `pulumi:"creationTime"`
	// TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description *string `pulumi:"description"`
	// TR路由表关联的收方向路由策略的ID
	InRoutePolicyTableId *string `pulumi:"inRoutePolicyTableId"`
	// TR路由表关联的发方向路由策略的ID
	OutRoutePolicyTableId *string `pulumi:"outRoutePolicyTableId"`
	// TR路由表的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用
	Status *string                      `pulumi:"status"`
	Tags   []TransitRouterRouteTableTag `pulumi:"tags"`
	// 中转路由器实例的ID
	TransitRouterId *string `pulumi:"transitRouterId"`
	// TR路由表的ID
	TransitRouterRouteTableId *string `pulumi:"transitRouterRouteTableId"`
	// TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
	TransitRouterRouteTableName *string `pulumi:"transitRouterRouteTableName"`
	// TR路由表的类型。System：系统路由表。Custom：自定义路由表。
	TransitRouterRouteTableType *string `pulumi:"transitRouterRouteTableType"`
	// TR路由表的最近操作时间
	UpdateTime *string `pulumi:"updateTime"`
}

type TransitRouterRouteTableState struct {
	// TR路由表的创建时间
	CreationTime pulumi.StringPtrInput
	// TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description pulumi.StringPtrInput
	// TR路由表关联的收方向路由策略的ID
	InRoutePolicyTableId pulumi.StringPtrInput
	// TR路由表关联的发方向路由策略的ID
	OutRoutePolicyTableId pulumi.StringPtrInput
	// TR路由表的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用
	Status pulumi.StringPtrInput
	Tags   TransitRouterRouteTableTagArrayInput
	// 中转路由器实例的ID
	TransitRouterId pulumi.StringPtrInput
	// TR路由表的ID
	TransitRouterRouteTableId pulumi.StringPtrInput
	// TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
	TransitRouterRouteTableName pulumi.StringPtrInput
	// TR路由表的类型。System：系统路由表。Custom：自定义路由表。
	TransitRouterRouteTableType pulumi.StringPtrInput
	// TR路由表的最近操作时间
	UpdateTime pulumi.StringPtrInput
}

func (TransitRouterRouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterRouteTableState)(nil)).Elem()
}

type transitRouterRouteTableArgs struct {
	// TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description *string                      `pulumi:"description"`
	Tags        []TransitRouterRouteTableTag `pulumi:"tags"`
	// 中转路由器实例的ID
	TransitRouterId string `pulumi:"transitRouterId"`
	// TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
	TransitRouterRouteTableName *string `pulumi:"transitRouterRouteTableName"`
}

// The set of arguments for constructing a TransitRouterRouteTable resource.
type TransitRouterRouteTableArgs struct {
	// TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description pulumi.StringPtrInput
	Tags        TransitRouterRouteTableTagArrayInput
	// 中转路由器实例的ID
	TransitRouterId pulumi.StringInput
	// TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
	TransitRouterRouteTableName pulumi.StringPtrInput
}

func (TransitRouterRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterRouteTableArgs)(nil)).Elem()
}

type TransitRouterRouteTableInput interface {
	pulumi.Input

	ToTransitRouterRouteTableOutput() TransitRouterRouteTableOutput
	ToTransitRouterRouteTableOutputWithContext(ctx context.Context) TransitRouterRouteTableOutput
}

func (*TransitRouterRouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouterRouteTable)(nil)).Elem()
}

func (i *TransitRouterRouteTable) ToTransitRouterRouteTableOutput() TransitRouterRouteTableOutput {
	return i.ToTransitRouterRouteTableOutputWithContext(context.Background())
}

func (i *TransitRouterRouteTable) ToTransitRouterRouteTableOutputWithContext(ctx context.Context) TransitRouterRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterRouteTableOutput)
}

// TransitRouterRouteTableArrayInput is an input type that accepts TransitRouterRouteTableArray and TransitRouterRouteTableArrayOutput values.
// You can construct a concrete instance of `TransitRouterRouteTableArrayInput` via:
//
//	TransitRouterRouteTableArray{ TransitRouterRouteTableArgs{...} }
type TransitRouterRouteTableArrayInput interface {
	pulumi.Input

	ToTransitRouterRouteTableArrayOutput() TransitRouterRouteTableArrayOutput
	ToTransitRouterRouteTableArrayOutputWithContext(context.Context) TransitRouterRouteTableArrayOutput
}

type TransitRouterRouteTableArray []TransitRouterRouteTableInput

func (TransitRouterRouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouterRouteTable)(nil)).Elem()
}

func (i TransitRouterRouteTableArray) ToTransitRouterRouteTableArrayOutput() TransitRouterRouteTableArrayOutput {
	return i.ToTransitRouterRouteTableArrayOutputWithContext(context.Background())
}

func (i TransitRouterRouteTableArray) ToTransitRouterRouteTableArrayOutputWithContext(ctx context.Context) TransitRouterRouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterRouteTableArrayOutput)
}

// TransitRouterRouteTableMapInput is an input type that accepts TransitRouterRouteTableMap and TransitRouterRouteTableMapOutput values.
// You can construct a concrete instance of `TransitRouterRouteTableMapInput` via:
//
//	TransitRouterRouteTableMap{ "key": TransitRouterRouteTableArgs{...} }
type TransitRouterRouteTableMapInput interface {
	pulumi.Input

	ToTransitRouterRouteTableMapOutput() TransitRouterRouteTableMapOutput
	ToTransitRouterRouteTableMapOutputWithContext(context.Context) TransitRouterRouteTableMapOutput
}

type TransitRouterRouteTableMap map[string]TransitRouterRouteTableInput

func (TransitRouterRouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouterRouteTable)(nil)).Elem()
}

func (i TransitRouterRouteTableMap) ToTransitRouterRouteTableMapOutput() TransitRouterRouteTableMapOutput {
	return i.ToTransitRouterRouteTableMapOutputWithContext(context.Background())
}

func (i TransitRouterRouteTableMap) ToTransitRouterRouteTableMapOutputWithContext(ctx context.Context) TransitRouterRouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterRouteTableMapOutput)
}

type TransitRouterRouteTableOutput struct{ *pulumi.OutputState }

func (TransitRouterRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouterRouteTable)(nil)).Elem()
}

func (o TransitRouterRouteTableOutput) ToTransitRouterRouteTableOutput() TransitRouterRouteTableOutput {
	return o
}

func (o TransitRouterRouteTableOutput) ToTransitRouterRouteTableOutputWithContext(ctx context.Context) TransitRouterRouteTableOutput {
	return o
}

// TR路由表的创建时间
func (o TransitRouterRouteTableOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
func (o TransitRouterRouteTableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// TR路由表关联的收方向路由策略的ID
func (o TransitRouterRouteTableOutput) InRoutePolicyTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.InRoutePolicyTableId }).(pulumi.StringOutput)
}

// TR路由表关联的发方向路由策略的ID
func (o TransitRouterRouteTableOutput) OutRoutePolicyTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.OutRoutePolicyTableId }).(pulumi.StringOutput)
}

// TR路由表的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用
func (o TransitRouterRouteTableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o TransitRouterRouteTableOutput) Tags() TransitRouterRouteTableTagArrayOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) TransitRouterRouteTableTagArrayOutput { return v.Tags }).(TransitRouterRouteTableTagArrayOutput)
}

// 中转路由器实例的ID
func (o TransitRouterRouteTableOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// TR路由表的ID
func (o TransitRouterRouteTableOutput) TransitRouterRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.TransitRouterRouteTableId }).(pulumi.StringOutput)
}

// TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
func (o TransitRouterRouteTableOutput) TransitRouterRouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.TransitRouterRouteTableName }).(pulumi.StringOutput)
}

// TR路由表的类型。System：系统路由表。Custom：自定义路由表。
func (o TransitRouterRouteTableOutput) TransitRouterRouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.TransitRouterRouteTableType }).(pulumi.StringOutput)
}

// TR路由表的最近操作时间
func (o TransitRouterRouteTableOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteTable) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TransitRouterRouteTableArrayOutput struct{ *pulumi.OutputState }

func (TransitRouterRouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouterRouteTable)(nil)).Elem()
}

func (o TransitRouterRouteTableArrayOutput) ToTransitRouterRouteTableArrayOutput() TransitRouterRouteTableArrayOutput {
	return o
}

func (o TransitRouterRouteTableArrayOutput) ToTransitRouterRouteTableArrayOutputWithContext(ctx context.Context) TransitRouterRouteTableArrayOutput {
	return o
}

func (o TransitRouterRouteTableArrayOutput) Index(i pulumi.IntInput) TransitRouterRouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitRouterRouteTable {
		return vs[0].([]*TransitRouterRouteTable)[vs[1].(int)]
	}).(TransitRouterRouteTableOutput)
}

type TransitRouterRouteTableMapOutput struct{ *pulumi.OutputState }

func (TransitRouterRouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouterRouteTable)(nil)).Elem()
}

func (o TransitRouterRouteTableMapOutput) ToTransitRouterRouteTableMapOutput() TransitRouterRouteTableMapOutput {
	return o
}

func (o TransitRouterRouteTableMapOutput) ToTransitRouterRouteTableMapOutputWithContext(ctx context.Context) TransitRouterRouteTableMapOutput {
	return o
}

func (o TransitRouterRouteTableMapOutput) MapIndex(k pulumi.StringInput) TransitRouterRouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitRouterRouteTable {
		return vs[0].(map[string]*TransitRouterRouteTable)[vs[1].(string)]
	}).(TransitRouterRouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterRouteTableInput)(nil)).Elem(), &TransitRouterRouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterRouteTableArrayInput)(nil)).Elem(), TransitRouterRouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterRouteTableMapInput)(nil)).Elem(), TransitRouterRouteTableMap{})
	pulumi.RegisterOutputType(TransitRouterRouteTableOutput{})
	pulumi.RegisterOutputType(TransitRouterRouteTableArrayOutput{})
	pulumi.RegisterOutputType(TransitRouterRouteTableMapOutput{})
}
