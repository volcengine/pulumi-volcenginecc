// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transitrouter

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 通过为网络实例连接或跨地域连接关联的路由表创建或删除静态路由，能够灵活地控制中转路由器中的流量走向。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/transitrouter"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transitrouter.NewTransitRouterRouteEntry(ctx, "TransitRouterRouteEntryDemo", &transitrouter.TransitRouterRouteEntryArgs{
//				Description:                        pulumi.String("Demo Example"),
//				DestinationCidrBlock:               pulumi.String("192.168.1.101/*"),
//				TransitRouterRouteEntryName:        pulumi.String("test-Attachmentkua"),
//				TransitRouterRouteTableId:          pulumi.String("tr-rtb-mijcn***"),
//				TransitRouterRouteEntryNextHopId:   pulumi.String("tr-attach-13fs****"),
//				TransitRouterRouteEntryNextHopType: pulumi.String("Attachment"),
//				TransitRouterRouteEntryType:        pulumi.String("Propagated"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:transitrouter/transitRouterRouteEntry:TransitRouterRouteEntry example "transit_router_route_table_id|transit_router_route_entry_id"
// ```
type TransitRouterRouteEntry struct {
	pulumi.CustomResourceState

	// 路由条目的AS路径。
	AsPaths pulumi.StringArrayOutput `pulumi:"asPaths"`
	// 路由条目的创建时间。
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description pulumi.StringOutput `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
	Status pulumi.StringOutput `pulumi:"status"`
	// TR路由条目的ID。
	TransitRouterRouteEntryId pulumi.StringOutput `pulumi:"transitRouterRouteEntryId"`
	// 路由条目的名称。
	TransitRouterRouteEntryName pulumi.StringOutput `pulumi:"transitRouterRouteEntryName"`
	// 路由条目的下一跳ID。
	TransitRouterRouteEntryNextHopId pulumi.StringOutput `pulumi:"transitRouterRouteEntryNextHopId"`
	// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
	TransitRouterRouteEntryNextHopType pulumi.StringOutput `pulumi:"transitRouterRouteEntryNextHopType"`
	// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
	TransitRouterRouteEntryType pulumi.StringOutput `pulumi:"transitRouterRouteEntryType"`
	// 中转路由器实例关联的路由表的ID。
	TransitRouterRouteTableId pulumi.StringOutput `pulumi:"transitRouterRouteTableId"`
	// 路由条目的更新时间。
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTransitRouterRouteEntry registers a new resource with the given unique name, arguments, and options.
func NewTransitRouterRouteEntry(ctx *pulumi.Context,
	name string, args *TransitRouterRouteEntryArgs, opts ...pulumi.ResourceOption) (*TransitRouterRouteEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.TransitRouterRouteEntryNextHopType == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterRouteEntryNextHopType'")
	}
	if args.TransitRouterRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterRouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitRouterRouteEntry
	err := ctx.RegisterResource("volcenginecc:transitrouter/transitRouterRouteEntry:TransitRouterRouteEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitRouterRouteEntry gets an existing TransitRouterRouteEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitRouterRouteEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitRouterRouteEntryState, opts ...pulumi.ResourceOption) (*TransitRouterRouteEntry, error) {
	var resource TransitRouterRouteEntry
	err := ctx.ReadResource("volcenginecc:transitrouter/transitRouterRouteEntry:TransitRouterRouteEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitRouterRouteEntry resources.
type transitRouterRouteEntryState struct {
	// 路由条目的AS路径。
	AsPaths []string `pulumi:"asPaths"`
	// 路由条目的创建时间。
	CreationTime *string `pulumi:"creationTime"`
	// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description *string `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
	Status *string `pulumi:"status"`
	// TR路由条目的ID。
	TransitRouterRouteEntryId *string `pulumi:"transitRouterRouteEntryId"`
	// 路由条目的名称。
	TransitRouterRouteEntryName *string `pulumi:"transitRouterRouteEntryName"`
	// 路由条目的下一跳ID。
	TransitRouterRouteEntryNextHopId *string `pulumi:"transitRouterRouteEntryNextHopId"`
	// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
	TransitRouterRouteEntryNextHopType *string `pulumi:"transitRouterRouteEntryNextHopType"`
	// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
	TransitRouterRouteEntryType *string `pulumi:"transitRouterRouteEntryType"`
	// 中转路由器实例关联的路由表的ID。
	TransitRouterRouteTableId *string `pulumi:"transitRouterRouteTableId"`
	// 路由条目的更新时间。
	UpdateTime *string `pulumi:"updateTime"`
}

type TransitRouterRouteEntryState struct {
	// 路由条目的AS路径。
	AsPaths pulumi.StringArrayInput
	// 路由条目的创建时间。
	CreationTime pulumi.StringPtrInput
	// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description pulumi.StringPtrInput
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringPtrInput
	// 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
	Status pulumi.StringPtrInput
	// TR路由条目的ID。
	TransitRouterRouteEntryId pulumi.StringPtrInput
	// 路由条目的名称。
	TransitRouterRouteEntryName pulumi.StringPtrInput
	// 路由条目的下一跳ID。
	TransitRouterRouteEntryNextHopId pulumi.StringPtrInput
	// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
	TransitRouterRouteEntryNextHopType pulumi.StringPtrInput
	// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
	TransitRouterRouteEntryType pulumi.StringPtrInput
	// 中转路由器实例关联的路由表的ID。
	TransitRouterRouteTableId pulumi.StringPtrInput
	// 路由条目的更新时间。
	UpdateTime pulumi.StringPtrInput
}

func (TransitRouterRouteEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterRouteEntryState)(nil)).Elem()
}

type transitRouterRouteEntryArgs struct {
	// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description *string `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// 路由条目的名称。
	TransitRouterRouteEntryName *string `pulumi:"transitRouterRouteEntryName"`
	// 路由条目的下一跳ID。
	TransitRouterRouteEntryNextHopId *string `pulumi:"transitRouterRouteEntryNextHopId"`
	// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
	TransitRouterRouteEntryNextHopType string `pulumi:"transitRouterRouteEntryNextHopType"`
	// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
	TransitRouterRouteEntryType *string `pulumi:"transitRouterRouteEntryType"`
	// 中转路由器实例关联的路由表的ID。
	TransitRouterRouteTableId string `pulumi:"transitRouterRouteTableId"`
}

// The set of arguments for constructing a TransitRouterRouteEntry resource.
type TransitRouterRouteEntryArgs struct {
	// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
	Description pulumi.StringPtrInput
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringInput
	// 路由条目的名称。
	TransitRouterRouteEntryName pulumi.StringPtrInput
	// 路由条目的下一跳ID。
	TransitRouterRouteEntryNextHopId pulumi.StringPtrInput
	// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
	TransitRouterRouteEntryNextHopType pulumi.StringInput
	// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
	TransitRouterRouteEntryType pulumi.StringPtrInput
	// 中转路由器实例关联的路由表的ID。
	TransitRouterRouteTableId pulumi.StringInput
}

func (TransitRouterRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterRouteEntryArgs)(nil)).Elem()
}

type TransitRouterRouteEntryInput interface {
	pulumi.Input

	ToTransitRouterRouteEntryOutput() TransitRouterRouteEntryOutput
	ToTransitRouterRouteEntryOutputWithContext(ctx context.Context) TransitRouterRouteEntryOutput
}

func (*TransitRouterRouteEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouterRouteEntry)(nil)).Elem()
}

func (i *TransitRouterRouteEntry) ToTransitRouterRouteEntryOutput() TransitRouterRouteEntryOutput {
	return i.ToTransitRouterRouteEntryOutputWithContext(context.Background())
}

func (i *TransitRouterRouteEntry) ToTransitRouterRouteEntryOutputWithContext(ctx context.Context) TransitRouterRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterRouteEntryOutput)
}

// TransitRouterRouteEntryArrayInput is an input type that accepts TransitRouterRouteEntryArray and TransitRouterRouteEntryArrayOutput values.
// You can construct a concrete instance of `TransitRouterRouteEntryArrayInput` via:
//
//	TransitRouterRouteEntryArray{ TransitRouterRouteEntryArgs{...} }
type TransitRouterRouteEntryArrayInput interface {
	pulumi.Input

	ToTransitRouterRouteEntryArrayOutput() TransitRouterRouteEntryArrayOutput
	ToTransitRouterRouteEntryArrayOutputWithContext(context.Context) TransitRouterRouteEntryArrayOutput
}

type TransitRouterRouteEntryArray []TransitRouterRouteEntryInput

func (TransitRouterRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouterRouteEntry)(nil)).Elem()
}

func (i TransitRouterRouteEntryArray) ToTransitRouterRouteEntryArrayOutput() TransitRouterRouteEntryArrayOutput {
	return i.ToTransitRouterRouteEntryArrayOutputWithContext(context.Background())
}

func (i TransitRouterRouteEntryArray) ToTransitRouterRouteEntryArrayOutputWithContext(ctx context.Context) TransitRouterRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterRouteEntryArrayOutput)
}

// TransitRouterRouteEntryMapInput is an input type that accepts TransitRouterRouteEntryMap and TransitRouterRouteEntryMapOutput values.
// You can construct a concrete instance of `TransitRouterRouteEntryMapInput` via:
//
//	TransitRouterRouteEntryMap{ "key": TransitRouterRouteEntryArgs{...} }
type TransitRouterRouteEntryMapInput interface {
	pulumi.Input

	ToTransitRouterRouteEntryMapOutput() TransitRouterRouteEntryMapOutput
	ToTransitRouterRouteEntryMapOutputWithContext(context.Context) TransitRouterRouteEntryMapOutput
}

type TransitRouterRouteEntryMap map[string]TransitRouterRouteEntryInput

func (TransitRouterRouteEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouterRouteEntry)(nil)).Elem()
}

func (i TransitRouterRouteEntryMap) ToTransitRouterRouteEntryMapOutput() TransitRouterRouteEntryMapOutput {
	return i.ToTransitRouterRouteEntryMapOutputWithContext(context.Background())
}

func (i TransitRouterRouteEntryMap) ToTransitRouterRouteEntryMapOutputWithContext(ctx context.Context) TransitRouterRouteEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterRouteEntryMapOutput)
}

type TransitRouterRouteEntryOutput struct{ *pulumi.OutputState }

func (TransitRouterRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouterRouteEntry)(nil)).Elem()
}

func (o TransitRouterRouteEntryOutput) ToTransitRouterRouteEntryOutput() TransitRouterRouteEntryOutput {
	return o
}

func (o TransitRouterRouteEntryOutput) ToTransitRouterRouteEntryOutputWithContext(ctx context.Context) TransitRouterRouteEntryOutput {
	return o
}

// 路由条目的AS路径。
func (o TransitRouterRouteEntryOutput) AsPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringArrayOutput { return v.AsPaths }).(pulumi.StringArrayOutput)
}

// 路由条目的创建时间。
func (o TransitRouterRouteEntryOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
func (o TransitRouterRouteEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 路由条目的目标网段。
func (o TransitRouterRouteEntryOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
func (o TransitRouterRouteEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// TR路由条目的ID。
func (o TransitRouterRouteEntryOutput) TransitRouterRouteEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.TransitRouterRouteEntryId }).(pulumi.StringOutput)
}

// 路由条目的名称。
func (o TransitRouterRouteEntryOutput) TransitRouterRouteEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.TransitRouterRouteEntryName }).(pulumi.StringOutput)
}

// 路由条目的下一跳ID。
func (o TransitRouterRouteEntryOutput) TransitRouterRouteEntryNextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.TransitRouterRouteEntryNextHopId }).(pulumi.StringOutput)
}

// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
func (o TransitRouterRouteEntryOutput) TransitRouterRouteEntryNextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.TransitRouterRouteEntryNextHopType }).(pulumi.StringOutput)
}

// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
func (o TransitRouterRouteEntryOutput) TransitRouterRouteEntryType() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.TransitRouterRouteEntryType }).(pulumi.StringOutput)
}

// 中转路由器实例关联的路由表的ID。
func (o TransitRouterRouteEntryOutput) TransitRouterRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.TransitRouterRouteTableId }).(pulumi.StringOutput)
}

// 路由条目的更新时间。
func (o TransitRouterRouteEntryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouterRouteEntry) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TransitRouterRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (TransitRouterRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouterRouteEntry)(nil)).Elem()
}

func (o TransitRouterRouteEntryArrayOutput) ToTransitRouterRouteEntryArrayOutput() TransitRouterRouteEntryArrayOutput {
	return o
}

func (o TransitRouterRouteEntryArrayOutput) ToTransitRouterRouteEntryArrayOutputWithContext(ctx context.Context) TransitRouterRouteEntryArrayOutput {
	return o
}

func (o TransitRouterRouteEntryArrayOutput) Index(i pulumi.IntInput) TransitRouterRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitRouterRouteEntry {
		return vs[0].([]*TransitRouterRouteEntry)[vs[1].(int)]
	}).(TransitRouterRouteEntryOutput)
}

type TransitRouterRouteEntryMapOutput struct{ *pulumi.OutputState }

func (TransitRouterRouteEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouterRouteEntry)(nil)).Elem()
}

func (o TransitRouterRouteEntryMapOutput) ToTransitRouterRouteEntryMapOutput() TransitRouterRouteEntryMapOutput {
	return o
}

func (o TransitRouterRouteEntryMapOutput) ToTransitRouterRouteEntryMapOutputWithContext(ctx context.Context) TransitRouterRouteEntryMapOutput {
	return o
}

func (o TransitRouterRouteEntryMapOutput) MapIndex(k pulumi.StringInput) TransitRouterRouteEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitRouterRouteEntry {
		return vs[0].(map[string]*TransitRouterRouteEntry)[vs[1].(string)]
	}).(TransitRouterRouteEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterRouteEntryInput)(nil)).Elem(), &TransitRouterRouteEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterRouteEntryArrayInput)(nil)).Elem(), TransitRouterRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterRouteEntryMapInput)(nil)).Elem(), TransitRouterRouteEntryMap{})
	pulumi.RegisterOutputType(TransitRouterRouteEntryOutput{})
	pulumi.RegisterOutputType(TransitRouterRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(TransitRouterRouteEntryMapOutput{})
}
