// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::WAF::Domain
func GetDomain(ctx *pulumi.Context, args *GetDomainArgs, opts ...pulumi.InvokeOption) (*GetDomainResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetDomainResult
	err := ctx.Invoke("volcenginecc:waf/getDomain:getDomain", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDomain.
type GetDomainArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getDomain.
type GetDomainResult struct {
	// 接入模式。10：CNAME 接入，11：负载均衡（CLB）7 层接入。
	AccessMode int `pulumi:"accessMode"`
	// 高防实例 IP。高防型 WAF 接入展示，否则为空。
	AdvancedDefenseIp string `pulumi:"advancedDefenseIp"`
	// 高防实例 Ipv6。高防型 WAF 接入展示，否则为空。
	AdvancedDefenseIpv6 string `pulumi:"advancedDefenseIpv6"`
	// 是否开启了 API 防护策略。0：关闭，1：开启。
	ApiEnable int `pulumi:"apiEnable"`
	// 攻击状态。0:未发现攻击,1:发现攻击。
	AttackStatus int `pulumi:"attackStatus"`
	// 是否开启智能 CC 防护策略。0：关闭，1：开启。
	AutoCcEnable int `pulumi:"autoCcEnable"`
	// 是否开启自动封禁。0：关闭，1：开启。
	AutomaticBlackEnable int `pulumi:"automaticBlackEnable"`
	// 源站配置。
	BackendGroups []GetDomainBackendGroup `pulumi:"backendGroups"`
	// 是否开启了黑名单策略。0：关闭, 1：开启。
	BlackIpEnable int `pulumi:"blackIpEnable"`
	// 是否开启了区域封禁策略。0：关闭;1：开启。
	BlackLctEnable int `pulumi:"blackLctEnable"`
	// 是否开启动态Token防护。
	BotDytokenEnable int `pulumi:"botDytokenEnable"`
	// 是否开启 bot 频率限制策略。
	// 0：关闭
	// 1：开启。
	BotFrequencyEnable int `pulumi:"botFrequencyEnable"`
	// 是否开启 bot 统计防护策略。
	// 0：关闭
	// 1：开启。
	BotRepeatEnable int `pulumi:"botRepeatEnable"`
	// 设置 bot 行为地图策略默认动作，当 BotSequenceEnable = 1 开启状态时生效。默认为 0 （观察）。
	// 0：观察
	// 2：拦截
	// 6：JS 挑战
	// 7：人机验证。
	BotSequenceDefaultAction int `pulumi:"botSequenceDefaultAction"`
	// 是否开启 bot 行为地图。
	// 0：关闭
	// 1：开启。
	BotSequenceEnable int `pulumi:"botSequenceEnable"`
	// 是否开启 CC 防护策略。
	// 0：关闭
	// 1：开启。
	CcEnable int `pulumi:"ccEnable"`
	// 托管至证书中心的证书ID。
	CertificateId string `pulumi:"certificateId"`
	// 证书名称，协议类型包含 HTTPS 时显示。
	CertificateName string `pulumi:"certificateName"`
	// 证书托管平台:waf/certificate_service。
	CertificatePlatform string `pulumi:"certificatePlatform"`
	// CLB实例ID。
	ClbInstanceIds string `pulumi:"clbInstanceIds"`
	// CLB监听器ID。
	ClbListenerId string `pulumi:"clbListenerId"`
	// CLB后端服务器组ID。
	ClbPoolId string `pulumi:"clbPoolId"`
	// CLB后端服务器ID。
	ClbServerId string `pulumi:"clbServerId"`
	// 客户端IP获取方式。0:自定义Header字段,1:通过X-Forwarded-For(XFF)字段中第一个公网IP地址作为客户端真实IP地址。
	ClientIpLocation int `pulumi:"clientIpLocation"`
	// 客户端请求body最大值(MB)。
	ClientMaxBodySize int `pulumi:"clientMaxBodySize"`
	// LB接入参数。
	CloudAccessConfigs []GetDomainCloudAccessConfig `pulumi:"cloudAccessConfigs"`
	// CNAME记录。
	Cname string `pulumi:"cname"`
	// 是否开启自定义BOT防护。
	CustomBotEnable int `pulumi:"customBotEnable"`
	// 自定义Header。
	CustomHeaders []string `pulumi:"customHeaders"`
	// 是否开启自定义响应。
	CustomRspEnable int `pulumi:"customRspEnable"`
	// 自定义SNI。
	CustomSni string `pulumi:"customSni"`
	// 为例外 ALB 实例设置防护模式。
	// 1：启用防护，已配置的防护策略生效。
	// 2：暂停防护，仅执行转发而不检测，已配置的防护策略不生效。
	// 3：回源模式，直接将请求解析至源站，不再转发至 WAF 实例。
	// 设置例外防护实例后，域名可能还会存在以下防护状态：
	// 5：部分启用，默认防护模式为启用防护，但存在例外实例为暂停防护或回源模式状态。
	// 6：部分暂停，默认防护模式为暂停防护，但存在例外实例为启用防护或回源模式状态。
	// 7：部分回源，默认防护模式为回源模式，但存在例外实例为启用防护或暂停防护状态。
	DefenceMode int `pulumi:"defenceMode"`
	// 是否开启数据泄露防护。
	DlpEnable int `pulumi:"dlpEnable"`
	// 防护的域名信息，支持泛域名和精确域名。
	Domain string `pulumi:"domain"`
	// 是否开启用户自定义重定向。0:关闭,1:开启。
	EnableCustomRedirect int `pulumi:"enableCustomRedirect"`
	// 是否开启HTTP2.0。0:关闭,1:开启。
	EnableHttp2 int `pulumi:"enableHttp2"`
	// 是否支持防护Ipv6请求。0:关闭,1:开启。
	EnableIpv6 int `pulumi:"enableIpv6"`
	// 是否开启SNI配置。0:关闭,1:开启。
	EnableSni int `pulumi:"enableSni"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 长连接复用个数。
	KeepAliveRequest int `pulumi:"keepAliveRequest"`
	// 长连接保持时间(秒)。
	KeepAliveTimeout int `pulumi:"keepAliveTimeout"`
	// 负载均衡算法类型。wrr:加权轮询,wlc:加权最小连接数,sh:源地址哈希。
	LbAlgorithm string `pulumi:"lbAlgorithm"`
	// 端口号。
	Port int `pulumi:"port"`
	// 项目名称。
	ProjectName string `pulumi:"projectName"`
	// 是否开启协议跟随。0:关闭,1:开启。
	ProtocolFollow int `pulumi:"protocolFollow"`
	// 接入端口信息。
	ProtocolPorts GetDomainProtocolPorts `pulumi:"protocolPorts"`
	// 接入协议类型,支持HTTP/HTTPS。
	Protocols []string `pulumi:"protocols"`
	// 是否开启代理配置。0:关闭,1:开启。
	ProxyConfig int `pulumi:"proxyConfig"`
	// WAF和后端服务器的建连超时时间(秒)。
	ProxyConnectTimeout int `pulumi:"proxyConnectTimeout"`
	// WAF回源长连接可复用个数。
	ProxyKeepAlive int `pulumi:"proxyKeepAlive"`
	// 空闲长连接超时时间(秒)。
	ProxyKeepAliveTimeout int `pulumi:"proxyKeepAliveTimeout"`
	// WAF从后端服务器读取响应的超时时间(秒)。
	ProxyReadTimeout int `pulumi:"proxyReadTimeout"`
	// WAF回源重试次数。
	ProxyRetry int `pulumi:"proxyRetry"`
	// WAF将请求传输到后端服务器的超时时间(秒)。
	ProxyWriteTimeout int `pulumi:"proxyWriteTimeout"`
	// CNAME接入回源方式。0:私网回源,1:公网回源。
	PublicRealServer int `pulumi:"publicRealServer"`
	// 是否开启异常响应防护。
	RspAbnormalEnable int `pulumi:"rspAbnormalEnable"`
	// 服务IP。
	ServerIps string `pulumi:"serverIps"`
	// WAF回源IP。
	SrcIps string `pulumi:"srcIps"`
	// 源站协议。
	SrcProtocol string `pulumi:"srcProtocol"`
	// 加密套件。
	SslCiphers []string `pulumi:"sslCiphers"`
	// TLS协议版本。如:TLSv1,TLSv1.1,TLSv1.2,TLSv1.3。
	SslProtocols []string `pulumi:"sslProtocols"`
	// 接入状态。0:正常,1:DNS未解析,2:配置中,3:配置失败,4:配置未生效,5:更新中,6:实例已删除。
	Status int `pulumi:"status"`
	// 是否开启托管BOT防护。
	SystemBotEnable int `pulumi:"systemBotEnable"`
	// 是否开启防篡改。
	TamperProofEnable int `pulumi:"tamperProofEnable"`
	// TCP监听器配置。
	TcpListenerConfigs []GetDomainTcpListenerConfig `pulumi:"tcpListenerConfigs"`
	// 是否开启日志服务。0:关闭,1:开启。
	TlsEnable int `pulumi:"tlsEnable"`
	// 日志字段配置详情。
	TlsFieldsConfig GetDomainTlsFieldsConfig `pulumi:"tlsFieldsConfig"`
	// 更新时间。
	UpdateTime string `pulumi:"updateTime"`
	// VPC ID。
	VpcId string `pulumi:"vpcId"`
	// 是否开启WAF防护。
	WafEnable int `pulumi:"wafEnable"`
	// 是否开启白名单请求防护。
	WafWhiteReqEnable int `pulumi:"wafWhiteReqEnable"`
	// 是否开启白名单防护。
	WhiteEnable int `pulumi:"whiteEnable"`
	// 是否开启字段白名单防护。
	WhiteFieldEnable int `pulumi:"whiteFieldEnable"`
}

func GetDomainOutput(ctx *pulumi.Context, args GetDomainOutputArgs, opts ...pulumi.InvokeOption) GetDomainResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetDomainResultOutput, error) {
			args := v.(GetDomainArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:waf/getDomain:getDomain", args, GetDomainResultOutput{}, options).(GetDomainResultOutput), nil
		}).(GetDomainResultOutput)
}

// A collection of arguments for invoking getDomain.
type GetDomainOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetDomainOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainArgs)(nil)).Elem()
}

// A collection of values returned by getDomain.
type GetDomainResultOutput struct{ *pulumi.OutputState }

func (GetDomainResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDomainResult)(nil)).Elem()
}

func (o GetDomainResultOutput) ToGetDomainResultOutput() GetDomainResultOutput {
	return o
}

func (o GetDomainResultOutput) ToGetDomainResultOutputWithContext(ctx context.Context) GetDomainResultOutput {
	return o
}

// 接入模式。10：CNAME 接入，11：负载均衡（CLB）7 层接入。
func (o GetDomainResultOutput) AccessMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.AccessMode }).(pulumi.IntOutput)
}

// 高防实例 IP。高防型 WAF 接入展示，否则为空。
func (o GetDomainResultOutput) AdvancedDefenseIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.AdvancedDefenseIp }).(pulumi.StringOutput)
}

// 高防实例 Ipv6。高防型 WAF 接入展示，否则为空。
func (o GetDomainResultOutput) AdvancedDefenseIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.AdvancedDefenseIpv6 }).(pulumi.StringOutput)
}

// 是否开启了 API 防护策略。0：关闭，1：开启。
func (o GetDomainResultOutput) ApiEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ApiEnable }).(pulumi.IntOutput)
}

// 攻击状态。0:未发现攻击,1:发现攻击。
func (o GetDomainResultOutput) AttackStatus() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.AttackStatus }).(pulumi.IntOutput)
}

// 是否开启智能 CC 防护策略。0：关闭，1：开启。
func (o GetDomainResultOutput) AutoCcEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.AutoCcEnable }).(pulumi.IntOutput)
}

// 是否开启自动封禁。0：关闭，1：开启。
func (o GetDomainResultOutput) AutomaticBlackEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.AutomaticBlackEnable }).(pulumi.IntOutput)
}

// 源站配置。
func (o GetDomainResultOutput) BackendGroups() GetDomainBackendGroupArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []GetDomainBackendGroup { return v.BackendGroups }).(GetDomainBackendGroupArrayOutput)
}

// 是否开启了黑名单策略。0：关闭, 1：开启。
func (o GetDomainResultOutput) BlackIpEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BlackIpEnable }).(pulumi.IntOutput)
}

// 是否开启了区域封禁策略。0：关闭;1：开启。
func (o GetDomainResultOutput) BlackLctEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BlackLctEnable }).(pulumi.IntOutput)
}

// 是否开启动态Token防护。
func (o GetDomainResultOutput) BotDytokenEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BotDytokenEnable }).(pulumi.IntOutput)
}

// 是否开启 bot 频率限制策略。
// 0：关闭
// 1：开启。
func (o GetDomainResultOutput) BotFrequencyEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BotFrequencyEnable }).(pulumi.IntOutput)
}

// 是否开启 bot 统计防护策略。
// 0：关闭
// 1：开启。
func (o GetDomainResultOutput) BotRepeatEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BotRepeatEnable }).(pulumi.IntOutput)
}

// 设置 bot 行为地图策略默认动作，当 BotSequenceEnable = 1 开启状态时生效。默认为 0 （观察）。
// 0：观察
// 2：拦截
// 6：JS 挑战
// 7：人机验证。
func (o GetDomainResultOutput) BotSequenceDefaultAction() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BotSequenceDefaultAction }).(pulumi.IntOutput)
}

// 是否开启 bot 行为地图。
// 0：关闭
// 1：开启。
func (o GetDomainResultOutput) BotSequenceEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.BotSequenceEnable }).(pulumi.IntOutput)
}

// 是否开启 CC 防护策略。
// 0：关闭
// 1：开启。
func (o GetDomainResultOutput) CcEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.CcEnable }).(pulumi.IntOutput)
}

// 托管至证书中心的证书ID。
func (o GetDomainResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// 证书名称，协议类型包含 HTTPS 时显示。
func (o GetDomainResultOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.CertificateName }).(pulumi.StringOutput)
}

// 证书托管平台:waf/certificate_service。
func (o GetDomainResultOutput) CertificatePlatform() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.CertificatePlatform }).(pulumi.StringOutput)
}

// CLB实例ID。
func (o GetDomainResultOutput) ClbInstanceIds() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.ClbInstanceIds }).(pulumi.StringOutput)
}

// CLB监听器ID。
func (o GetDomainResultOutput) ClbListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.ClbListenerId }).(pulumi.StringOutput)
}

// CLB后端服务器组ID。
func (o GetDomainResultOutput) ClbPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.ClbPoolId }).(pulumi.StringOutput)
}

// CLB后端服务器ID。
func (o GetDomainResultOutput) ClbServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.ClbServerId }).(pulumi.StringOutput)
}

// 客户端IP获取方式。0:自定义Header字段,1:通过X-Forwarded-For(XFF)字段中第一个公网IP地址作为客户端真实IP地址。
func (o GetDomainResultOutput) ClientIpLocation() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ClientIpLocation }).(pulumi.IntOutput)
}

// 客户端请求body最大值(MB)。
func (o GetDomainResultOutput) ClientMaxBodySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ClientMaxBodySize }).(pulumi.IntOutput)
}

// LB接入参数。
func (o GetDomainResultOutput) CloudAccessConfigs() GetDomainCloudAccessConfigArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []GetDomainCloudAccessConfig { return v.CloudAccessConfigs }).(GetDomainCloudAccessConfigArrayOutput)
}

// CNAME记录。
func (o GetDomainResultOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.Cname }).(pulumi.StringOutput)
}

// 是否开启自定义BOT防护。
func (o GetDomainResultOutput) CustomBotEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.CustomBotEnable }).(pulumi.IntOutput)
}

// 自定义Header。
func (o GetDomainResultOutput) CustomHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []string { return v.CustomHeaders }).(pulumi.StringArrayOutput)
}

// 是否开启自定义响应。
func (o GetDomainResultOutput) CustomRspEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.CustomRspEnable }).(pulumi.IntOutput)
}

// 自定义SNI。
func (o GetDomainResultOutput) CustomSni() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.CustomSni }).(pulumi.StringOutput)
}

// 为例外 ALB 实例设置防护模式。
// 1：启用防护，已配置的防护策略生效。
// 2：暂停防护，仅执行转发而不检测，已配置的防护策略不生效。
// 3：回源模式，直接将请求解析至源站，不再转发至 WAF 实例。
// 设置例外防护实例后，域名可能还会存在以下防护状态：
// 5：部分启用，默认防护模式为启用防护，但存在例外实例为暂停防护或回源模式状态。
// 6：部分暂停，默认防护模式为暂停防护，但存在例外实例为启用防护或回源模式状态。
// 7：部分回源，默认防护模式为回源模式，但存在例外实例为启用防护或暂停防护状态。
func (o GetDomainResultOutput) DefenceMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.DefenceMode }).(pulumi.IntOutput)
}

// 是否开启数据泄露防护。
func (o GetDomainResultOutput) DlpEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.DlpEnable }).(pulumi.IntOutput)
}

// 防护的域名信息，支持泛域名和精确域名。
func (o GetDomainResultOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.Domain }).(pulumi.StringOutput)
}

// 是否开启用户自定义重定向。0:关闭,1:开启。
func (o GetDomainResultOutput) EnableCustomRedirect() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.EnableCustomRedirect }).(pulumi.IntOutput)
}

// 是否开启HTTP2.0。0:关闭,1:开启。
func (o GetDomainResultOutput) EnableHttp2() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.EnableHttp2 }).(pulumi.IntOutput)
}

// 是否支持防护Ipv6请求。0:关闭,1:开启。
func (o GetDomainResultOutput) EnableIpv6() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.EnableIpv6 }).(pulumi.IntOutput)
}

// 是否开启SNI配置。0:关闭,1:开启。
func (o GetDomainResultOutput) EnableSni() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.EnableSni }).(pulumi.IntOutput)
}

// Uniquely identifies the resource.
func (o GetDomainResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.Id }).(pulumi.StringOutput)
}

// 长连接复用个数。
func (o GetDomainResultOutput) KeepAliveRequest() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.KeepAliveRequest }).(pulumi.IntOutput)
}

// 长连接保持时间(秒)。
func (o GetDomainResultOutput) KeepAliveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.KeepAliveTimeout }).(pulumi.IntOutput)
}

// 负载均衡算法类型。wrr:加权轮询,wlc:加权最小连接数,sh:源地址哈希。
func (o GetDomainResultOutput) LbAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.LbAlgorithm }).(pulumi.StringOutput)
}

// 端口号。
func (o GetDomainResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.Port }).(pulumi.IntOutput)
}

// 项目名称。
func (o GetDomainResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 是否开启协议跟随。0:关闭,1:开启。
func (o GetDomainResultOutput) ProtocolFollow() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProtocolFollow }).(pulumi.IntOutput)
}

// 接入端口信息。
func (o GetDomainResultOutput) ProtocolPorts() GetDomainProtocolPortsOutput {
	return o.ApplyT(func(v GetDomainResult) GetDomainProtocolPorts { return v.ProtocolPorts }).(GetDomainProtocolPortsOutput)
}

// 接入协议类型,支持HTTP/HTTPS。
func (o GetDomainResultOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []string { return v.Protocols }).(pulumi.StringArrayOutput)
}

// 是否开启代理配置。0:关闭,1:开启。
func (o GetDomainResultOutput) ProxyConfig() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyConfig }).(pulumi.IntOutput)
}

// WAF和后端服务器的建连超时时间(秒)。
func (o GetDomainResultOutput) ProxyConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyConnectTimeout }).(pulumi.IntOutput)
}

// WAF回源长连接可复用个数。
func (o GetDomainResultOutput) ProxyKeepAlive() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyKeepAlive }).(pulumi.IntOutput)
}

// 空闲长连接超时时间(秒)。
func (o GetDomainResultOutput) ProxyKeepAliveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyKeepAliveTimeout }).(pulumi.IntOutput)
}

// WAF从后端服务器读取响应的超时时间(秒)。
func (o GetDomainResultOutput) ProxyReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyReadTimeout }).(pulumi.IntOutput)
}

// WAF回源重试次数。
func (o GetDomainResultOutput) ProxyRetry() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyRetry }).(pulumi.IntOutput)
}

// WAF将请求传输到后端服务器的超时时间(秒)。
func (o GetDomainResultOutput) ProxyWriteTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.ProxyWriteTimeout }).(pulumi.IntOutput)
}

// CNAME接入回源方式。0:私网回源,1:公网回源。
func (o GetDomainResultOutput) PublicRealServer() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.PublicRealServer }).(pulumi.IntOutput)
}

// 是否开启异常响应防护。
func (o GetDomainResultOutput) RspAbnormalEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.RspAbnormalEnable }).(pulumi.IntOutput)
}

// 服务IP。
func (o GetDomainResultOutput) ServerIps() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.ServerIps }).(pulumi.StringOutput)
}

// WAF回源IP。
func (o GetDomainResultOutput) SrcIps() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.SrcIps }).(pulumi.StringOutput)
}

// 源站协议。
func (o GetDomainResultOutput) SrcProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.SrcProtocol }).(pulumi.StringOutput)
}

// 加密套件。
func (o GetDomainResultOutput) SslCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []string { return v.SslCiphers }).(pulumi.StringArrayOutput)
}

// TLS协议版本。如:TLSv1,TLSv1.1,TLSv1.2,TLSv1.3。
func (o GetDomainResultOutput) SslProtocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []string { return v.SslProtocols }).(pulumi.StringArrayOutput)
}

// 接入状态。0:正常,1:DNS未解析,2:配置中,3:配置失败,4:配置未生效,5:更新中,6:实例已删除。
func (o GetDomainResultOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.Status }).(pulumi.IntOutput)
}

// 是否开启托管BOT防护。
func (o GetDomainResultOutput) SystemBotEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.SystemBotEnable }).(pulumi.IntOutput)
}

// 是否开启防篡改。
func (o GetDomainResultOutput) TamperProofEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.TamperProofEnable }).(pulumi.IntOutput)
}

// TCP监听器配置。
func (o GetDomainResultOutput) TcpListenerConfigs() GetDomainTcpListenerConfigArrayOutput {
	return o.ApplyT(func(v GetDomainResult) []GetDomainTcpListenerConfig { return v.TcpListenerConfigs }).(GetDomainTcpListenerConfigArrayOutput)
}

// 是否开启日志服务。0:关闭,1:开启。
func (o GetDomainResultOutput) TlsEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.TlsEnable }).(pulumi.IntOutput)
}

// 日志字段配置详情。
func (o GetDomainResultOutput) TlsFieldsConfig() GetDomainTlsFieldsConfigOutput {
	return o.ApplyT(func(v GetDomainResult) GetDomainTlsFieldsConfig { return v.TlsFieldsConfig }).(GetDomainTlsFieldsConfigOutput)
}

// 更新时间。
func (o GetDomainResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// VPC ID。
func (o GetDomainResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDomainResult) string { return v.VpcId }).(pulumi.StringOutput)
}

// 是否开启WAF防护。
func (o GetDomainResultOutput) WafEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.WafEnable }).(pulumi.IntOutput)
}

// 是否开启白名单请求防护。
func (o GetDomainResultOutput) WafWhiteReqEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.WafWhiteReqEnable }).(pulumi.IntOutput)
}

// 是否开启白名单防护。
func (o GetDomainResultOutput) WhiteEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.WhiteEnable }).(pulumi.IntOutput)
}

// 是否开启字段白名单防护。
func (o GetDomainResultOutput) WhiteFieldEnable() pulumi.IntOutput {
	return o.ApplyT(func(v GetDomainResult) int { return v.WhiteFieldEnable }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetDomainResultOutput{})
}
