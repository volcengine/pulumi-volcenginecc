// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 转发规则用于将指定域名和URL的请求引流至指定的后端服务器组。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clb.NewRule(ctx, "RuleDemo", &clb.RuleArgs{
//				ListenerId:    pulumi.String("lsn-13****"),
//				Description:   pulumi.String("RuleDemo Example"),
//				Domain:        pulumi.String("www.***.com"),
//				ActionType:    pulumi.String("Forward"),
//				ServerGroupId: pulumi.String("rsp-mj***"),
//				Url:           pulumi.String("/co3cee"),
//				Tags: clb.RuleTagArray{
//					&clb.RuleTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/rule:Rule example "listener_id|rule_id"
// ```
type Rule struct {
	pulumi.CustomResourceState

	// 转发规则的转发动作。取值如下：Forward：转发至。Redirect：重定向至。
	ActionType pulumi.StringOutput `pulumi:"actionType"`
	// 转发规则的描述，默认值为空字符串。规范如下：必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringOutput `pulumi:"description"`
	// 转发规则的域名。
	Domain pulumi.StringOutput `pulumi:"domain"`
	// 监听器ID。
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// 重定向相关配置信息。
	RedirectConfig RuleRedirectConfigOutput `pulumi:"redirectConfig"`
	// 转发规则ID。
	RuleId pulumi.StringOutput `pulumi:"ruleId"`
	// 转发规则关联的后端服务器组的ID。
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	Tags          RuleTagArrayOutput  `pulumi:"tags"`
	// 转发规则的URL。
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewRule registers a new resource with the given unique name, arguments, and options.
func NewRule(ctx *pulumi.Context,
	name string, args *RuleArgs, opts ...pulumi.ResourceOption) (*Rule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ListenerId == nil {
		return nil, errors.New("invalid value for required argument 'ListenerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Rule
	err := ctx.RegisterResource("volcenginecc:clb/rule:Rule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRule gets an existing Rule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleState, opts ...pulumi.ResourceOption) (*Rule, error) {
	var resource Rule
	err := ctx.ReadResource("volcenginecc:clb/rule:Rule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Rule resources.
type ruleState struct {
	// 转发规则的转发动作。取值如下：Forward：转发至。Redirect：重定向至。
	ActionType *string `pulumi:"actionType"`
	// 转发规则的描述，默认值为空字符串。规范如下：必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description *string `pulumi:"description"`
	// 转发规则的域名。
	Domain *string `pulumi:"domain"`
	// 监听器ID。
	ListenerId *string `pulumi:"listenerId"`
	// 重定向相关配置信息。
	RedirectConfig *RuleRedirectConfig `pulumi:"redirectConfig"`
	// 转发规则ID。
	RuleId *string `pulumi:"ruleId"`
	// 转发规则关联的后端服务器组的ID。
	ServerGroupId *string   `pulumi:"serverGroupId"`
	Tags          []RuleTag `pulumi:"tags"`
	// 转发规则的URL。
	Url *string `pulumi:"url"`
}

type RuleState struct {
	// 转发规则的转发动作。取值如下：Forward：转发至。Redirect：重定向至。
	ActionType pulumi.StringPtrInput
	// 转发规则的描述，默认值为空字符串。规范如下：必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringPtrInput
	// 转发规则的域名。
	Domain pulumi.StringPtrInput
	// 监听器ID。
	ListenerId pulumi.StringPtrInput
	// 重定向相关配置信息。
	RedirectConfig RuleRedirectConfigPtrInput
	// 转发规则ID。
	RuleId pulumi.StringPtrInput
	// 转发规则关联的后端服务器组的ID。
	ServerGroupId pulumi.StringPtrInput
	Tags          RuleTagArrayInput
	// 转发规则的URL。
	Url pulumi.StringPtrInput
}

func (RuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleState)(nil)).Elem()
}

type ruleArgs struct {
	// 转发规则的转发动作。取值如下：Forward：转发至。Redirect：重定向至。
	ActionType *string `pulumi:"actionType"`
	// 转发规则的描述，默认值为空字符串。规范如下：必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description *string `pulumi:"description"`
	// 转发规则的域名。
	Domain *string `pulumi:"domain"`
	// 监听器ID。
	ListenerId string `pulumi:"listenerId"`
	// 重定向相关配置信息。
	RedirectConfig *RuleRedirectConfig `pulumi:"redirectConfig"`
	// 转发规则关联的后端服务器组的ID。
	ServerGroupId *string   `pulumi:"serverGroupId"`
	Tags          []RuleTag `pulumi:"tags"`
	// 转发规则的URL。
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Rule resource.
type RuleArgs struct {
	// 转发规则的转发动作。取值如下：Forward：转发至。Redirect：重定向至。
	ActionType pulumi.StringPtrInput
	// 转发规则的描述，默认值为空字符串。规范如下：必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringPtrInput
	// 转发规则的域名。
	Domain pulumi.StringPtrInput
	// 监听器ID。
	ListenerId pulumi.StringInput
	// 重定向相关配置信息。
	RedirectConfig RuleRedirectConfigPtrInput
	// 转发规则关联的后端服务器组的ID。
	ServerGroupId pulumi.StringPtrInput
	Tags          RuleTagArrayInput
	// 转发规则的URL。
	Url pulumi.StringPtrInput
}

func (RuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleArgs)(nil)).Elem()
}

type RuleInput interface {
	pulumi.Input

	ToRuleOutput() RuleOutput
	ToRuleOutputWithContext(ctx context.Context) RuleOutput
}

func (*Rule) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (i *Rule) ToRuleOutput() RuleOutput {
	return i.ToRuleOutputWithContext(context.Background())
}

func (i *Rule) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleOutput)
}

// RuleArrayInput is an input type that accepts RuleArray and RuleArrayOutput values.
// You can construct a concrete instance of `RuleArrayInput` via:
//
//	RuleArray{ RuleArgs{...} }
type RuleArrayInput interface {
	pulumi.Input

	ToRuleArrayOutput() RuleArrayOutput
	ToRuleArrayOutputWithContext(context.Context) RuleArrayOutput
}

type RuleArray []RuleInput

func (RuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (i RuleArray) ToRuleArrayOutput() RuleArrayOutput {
	return i.ToRuleArrayOutputWithContext(context.Background())
}

func (i RuleArray) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleArrayOutput)
}

// RuleMapInput is an input type that accepts RuleMap and RuleMapOutput values.
// You can construct a concrete instance of `RuleMapInput` via:
//
//	RuleMap{ "key": RuleArgs{...} }
type RuleMapInput interface {
	pulumi.Input

	ToRuleMapOutput() RuleMapOutput
	ToRuleMapOutputWithContext(context.Context) RuleMapOutput
}

type RuleMap map[string]RuleInput

func (RuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (i RuleMap) ToRuleMapOutput() RuleMapOutput {
	return i.ToRuleMapOutputWithContext(context.Background())
}

func (i RuleMap) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleMapOutput)
}

type RuleOutput struct{ *pulumi.OutputState }

func (RuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Rule)(nil)).Elem()
}

func (o RuleOutput) ToRuleOutput() RuleOutput {
	return o
}

func (o RuleOutput) ToRuleOutputWithContext(ctx context.Context) RuleOutput {
	return o
}

// 转发规则的转发动作。取值如下：Forward：转发至。Redirect：重定向至。
func (o RuleOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.ActionType }).(pulumi.StringOutput)
}

// 转发规则的描述，默认值为空字符串。规范如下：必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
func (o RuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 转发规则的域名。
func (o RuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Domain }).(pulumi.StringOutput)
}

// 监听器ID。
func (o RuleOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// 重定向相关配置信息。
func (o RuleOutput) RedirectConfig() RuleRedirectConfigOutput {
	return o.ApplyT(func(v *Rule) RuleRedirectConfigOutput { return v.RedirectConfig }).(RuleRedirectConfigOutput)
}

// 转发规则ID。
func (o RuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.RuleId }).(pulumi.StringOutput)
}

// 转发规则关联的后端服务器组的ID。
func (o RuleOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

func (o RuleOutput) Tags() RuleTagArrayOutput {
	return o.ApplyT(func(v *Rule) RuleTagArrayOutput { return v.Tags }).(RuleTagArrayOutput)
}

// 转发规则的URL。
func (o RuleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *Rule) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type RuleArrayOutput struct{ *pulumi.OutputState }

func (RuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Rule)(nil)).Elem()
}

func (o RuleArrayOutput) ToRuleArrayOutput() RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) ToRuleArrayOutputWithContext(ctx context.Context) RuleArrayOutput {
	return o
}

func (o RuleArrayOutput) Index(i pulumi.IntInput) RuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].([]*Rule)[vs[1].(int)]
	}).(RuleOutput)
}

type RuleMapOutput struct{ *pulumi.OutputState }

func (RuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Rule)(nil)).Elem()
}

func (o RuleMapOutput) ToRuleMapOutput() RuleMapOutput {
	return o
}

func (o RuleMapOutput) ToRuleMapOutputWithContext(ctx context.Context) RuleMapOutput {
	return o
}

func (o RuleMapOutput) MapIndex(k pulumi.StringInput) RuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Rule {
		return vs[0].(map[string]*Rule)[vs[1].(string)]
	}).(RuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleInput)(nil)).Elem(), &Rule{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleArrayInput)(nil)).Elem(), RuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleMapInput)(nil)).Elem(), RuleMap{})
	pulumi.RegisterOutputType(RuleOutput{})
	pulumi.RegisterOutputType(RuleArrayOutput{})
	pulumi.RegisterOutputType(RuleMapOutput{})
}
