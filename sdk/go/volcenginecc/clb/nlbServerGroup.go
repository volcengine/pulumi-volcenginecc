// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 服务器组
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/nlbServerGroup:NlbServerGroup example "server_group_id"
// ```
type NlbServerGroup struct {
	pulumi.CustomResourceState

	// 账号ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// 是否开启全端口转发
	AnyPortEnabled pulumi.BoolOutput `pulumi:"anyPortEnabled"`
	// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
	BypassSecurityGroupEnabled pulumi.BoolOutput `pulumi:"bypassSecurityGroupEnabled"`
	// 是否开启连接优雅中断
	ConnectionDrainEnabled pulumi.BoolOutput `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
	ConnectionDrainTimeout pulumi.IntOutput `pulumi:"connectionDrainTimeout"`
	// 后端服务器组的创建时间
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
	Description pulumi.StringOutput `pulumi:"description"`
	// 健康检查相关参数
	HealthCheck NlbServerGroupHealthCheckOutput `pulumi:"healthCheck"`
	// 服务器组的IP地址类型
	IpAddressVersion pulumi.StringOutput `pulumi:"ipAddressVersion"`
	// 是否开启源地址保持
	PreserveClientIpEnabled pulumi.BoolOutput `pulumi:"preserveClientIpEnabled"`
	// 项目名称
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// NLB转发流量到后端服务器时使用的通信协议
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// 是否开启Proxy-Protocol协议
	ProxyProtocolType pulumi.StringOutput `pulumi:"proxyProtocolType"`
	// 服务器组关联的NLB实例
	RelatedLoadBalancerIds pulumi.StringArrayOutput `pulumi:"relatedLoadBalancerIds"`
	// NLB转发流量时遵循的规则
	Scheduler pulumi.StringOutput `pulumi:"scheduler"`
	// 服务器组中后端服务器的数量
	ServerCount pulumi.IntOutput `pulumi:"serverCount"`
	// 服务器组ID
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
	ServerGroupName pulumi.StringOutput             `pulumi:"serverGroupName"`
	Servers         NlbServerGroupServerArrayOutput `pulumi:"servers"`
	// 是否开启会话保持
	SessionPersistenceEnabled pulumi.BoolOutput `pulumi:"sessionPersistenceEnabled"`
	// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
	SessionPersistenceTimeout pulumi.IntOutput `pulumi:"sessionPersistenceTimeout"`
	// 服务器组的状态
	Status pulumi.StringOutput          `pulumi:"status"`
	Tags   NlbServerGroupTagArrayOutput `pulumi:"tags"`
	// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
	TimestampRemoveEnabled pulumi.BoolOutput `pulumi:"timestampRemoveEnabled"`
	// 服务器组的类型
	Type pulumi.StringOutput `pulumi:"type"`
	// 后端服务器组的更新时间
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 服务器组所属私有网络的ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNlbServerGroup registers a new resource with the given unique name, arguments, and options.
func NewNlbServerGroup(ctx *pulumi.Context,
	name string, args *NlbServerGroupArgs, opts ...pulumi.ResourceOption) (*NlbServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NlbServerGroup
	err := ctx.RegisterResource("volcenginecc:clb/nlbServerGroup:NlbServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNlbServerGroup gets an existing NlbServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNlbServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NlbServerGroupState, opts ...pulumi.ResourceOption) (*NlbServerGroup, error) {
	var resource NlbServerGroup
	err := ctx.ReadResource("volcenginecc:clb/nlbServerGroup:NlbServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NlbServerGroup resources.
type nlbServerGroupState struct {
	// 账号ID
	AccountId *string `pulumi:"accountId"`
	// 是否开启全端口转发
	AnyPortEnabled *bool `pulumi:"anyPortEnabled"`
	// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
	BypassSecurityGroupEnabled *bool `pulumi:"bypassSecurityGroupEnabled"`
	// 是否开启连接优雅中断
	ConnectionDrainEnabled *bool `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
	// 后端服务器组的创建时间
	CreatedTime *string `pulumi:"createdTime"`
	// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
	Description *string `pulumi:"description"`
	// 健康检查相关参数
	HealthCheck *NlbServerGroupHealthCheck `pulumi:"healthCheck"`
	// 服务器组的IP地址类型
	IpAddressVersion *string `pulumi:"ipAddressVersion"`
	// 是否开启源地址保持
	PreserveClientIpEnabled *bool `pulumi:"preserveClientIpEnabled"`
	// 项目名称
	ProjectName *string `pulumi:"projectName"`
	// NLB转发流量到后端服务器时使用的通信协议
	Protocol *string `pulumi:"protocol"`
	// 是否开启Proxy-Protocol协议
	ProxyProtocolType *string `pulumi:"proxyProtocolType"`
	// 服务器组关联的NLB实例
	RelatedLoadBalancerIds []string `pulumi:"relatedLoadBalancerIds"`
	// NLB转发流量时遵循的规则
	Scheduler *string `pulumi:"scheduler"`
	// 服务器组中后端服务器的数量
	ServerCount *int `pulumi:"serverCount"`
	// 服务器组ID
	ServerGroupId *string `pulumi:"serverGroupId"`
	// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
	ServerGroupName *string                `pulumi:"serverGroupName"`
	Servers         []NlbServerGroupServer `pulumi:"servers"`
	// 是否开启会话保持
	SessionPersistenceEnabled *bool `pulumi:"sessionPersistenceEnabled"`
	// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
	SessionPersistenceTimeout *int `pulumi:"sessionPersistenceTimeout"`
	// 服务器组的状态
	Status *string             `pulumi:"status"`
	Tags   []NlbServerGroupTag `pulumi:"tags"`
	// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
	TimestampRemoveEnabled *bool `pulumi:"timestampRemoveEnabled"`
	// 服务器组的类型
	Type *string `pulumi:"type"`
	// 后端服务器组的更新时间
	UpdatedTime *string `pulumi:"updatedTime"`
	// 服务器组所属私有网络的ID。
	VpcId *string `pulumi:"vpcId"`
}

type NlbServerGroupState struct {
	// 账号ID
	AccountId pulumi.StringPtrInput
	// 是否开启全端口转发
	AnyPortEnabled pulumi.BoolPtrInput
	// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
	BypassSecurityGroupEnabled pulumi.BoolPtrInput
	// 是否开启连接优雅中断
	ConnectionDrainEnabled pulumi.BoolPtrInput
	// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
	ConnectionDrainTimeout pulumi.IntPtrInput
	// 后端服务器组的创建时间
	CreatedTime pulumi.StringPtrInput
	// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
	Description pulumi.StringPtrInput
	// 健康检查相关参数
	HealthCheck NlbServerGroupHealthCheckPtrInput
	// 服务器组的IP地址类型
	IpAddressVersion pulumi.StringPtrInput
	// 是否开启源地址保持
	PreserveClientIpEnabled pulumi.BoolPtrInput
	// 项目名称
	ProjectName pulumi.StringPtrInput
	// NLB转发流量到后端服务器时使用的通信协议
	Protocol pulumi.StringPtrInput
	// 是否开启Proxy-Protocol协议
	ProxyProtocolType pulumi.StringPtrInput
	// 服务器组关联的NLB实例
	RelatedLoadBalancerIds pulumi.StringArrayInput
	// NLB转发流量时遵循的规则
	Scheduler pulumi.StringPtrInput
	// 服务器组中后端服务器的数量
	ServerCount pulumi.IntPtrInput
	// 服务器组ID
	ServerGroupId pulumi.StringPtrInput
	// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
	ServerGroupName pulumi.StringPtrInput
	Servers         NlbServerGroupServerArrayInput
	// 是否开启会话保持
	SessionPersistenceEnabled pulumi.BoolPtrInput
	// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
	SessionPersistenceTimeout pulumi.IntPtrInput
	// 服务器组的状态
	Status pulumi.StringPtrInput
	Tags   NlbServerGroupTagArrayInput
	// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
	TimestampRemoveEnabled pulumi.BoolPtrInput
	// 服务器组的类型
	Type pulumi.StringPtrInput
	// 后端服务器组的更新时间
	UpdatedTime pulumi.StringPtrInput
	// 服务器组所属私有网络的ID。
	VpcId pulumi.StringPtrInput
}

func (NlbServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*nlbServerGroupState)(nil)).Elem()
}

type nlbServerGroupArgs struct {
	// 账号ID
	AccountId *string `pulumi:"accountId"`
	// 是否开启全端口转发
	AnyPortEnabled *bool `pulumi:"anyPortEnabled"`
	// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
	BypassSecurityGroupEnabled *bool `pulumi:"bypassSecurityGroupEnabled"`
	// 是否开启连接优雅中断
	ConnectionDrainEnabled *bool `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
	// 后端服务器组的创建时间
	CreatedTime *string `pulumi:"createdTime"`
	// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
	Description *string `pulumi:"description"`
	// 健康检查相关参数
	HealthCheck *NlbServerGroupHealthCheck `pulumi:"healthCheck"`
	// 服务器组的IP地址类型
	IpAddressVersion *string `pulumi:"ipAddressVersion"`
	// 是否开启源地址保持
	PreserveClientIpEnabled *bool `pulumi:"preserveClientIpEnabled"`
	// 项目名称
	ProjectName *string `pulumi:"projectName"`
	// NLB转发流量到后端服务器时使用的通信协议
	Protocol string `pulumi:"protocol"`
	// 是否开启Proxy-Protocol协议
	ProxyProtocolType *string `pulumi:"proxyProtocolType"`
	// NLB转发流量时遵循的规则
	Scheduler *string `pulumi:"scheduler"`
	// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
	ServerGroupName *string                `pulumi:"serverGroupName"`
	Servers         []NlbServerGroupServer `pulumi:"servers"`
	// 是否开启会话保持
	SessionPersistenceEnabled *bool `pulumi:"sessionPersistenceEnabled"`
	// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
	SessionPersistenceTimeout *int                `pulumi:"sessionPersistenceTimeout"`
	Tags                      []NlbServerGroupTag `pulumi:"tags"`
	// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
	TimestampRemoveEnabled *bool `pulumi:"timestampRemoveEnabled"`
	// 服务器组的类型
	Type *string `pulumi:"type"`
	// 后端服务器组的更新时间
	UpdatedTime *string `pulumi:"updatedTime"`
	// 服务器组所属私有网络的ID。
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NlbServerGroup resource.
type NlbServerGroupArgs struct {
	// 账号ID
	AccountId pulumi.StringPtrInput
	// 是否开启全端口转发
	AnyPortEnabled pulumi.BoolPtrInput
	// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
	BypassSecurityGroupEnabled pulumi.BoolPtrInput
	// 是否开启连接优雅中断
	ConnectionDrainEnabled pulumi.BoolPtrInput
	// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
	ConnectionDrainTimeout pulumi.IntPtrInput
	// 后端服务器组的创建时间
	CreatedTime pulumi.StringPtrInput
	// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
	Description pulumi.StringPtrInput
	// 健康检查相关参数
	HealthCheck NlbServerGroupHealthCheckPtrInput
	// 服务器组的IP地址类型
	IpAddressVersion pulumi.StringPtrInput
	// 是否开启源地址保持
	PreserveClientIpEnabled pulumi.BoolPtrInput
	// 项目名称
	ProjectName pulumi.StringPtrInput
	// NLB转发流量到后端服务器时使用的通信协议
	Protocol pulumi.StringInput
	// 是否开启Proxy-Protocol协议
	ProxyProtocolType pulumi.StringPtrInput
	// NLB转发流量时遵循的规则
	Scheduler pulumi.StringPtrInput
	// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
	ServerGroupName pulumi.StringPtrInput
	Servers         NlbServerGroupServerArrayInput
	// 是否开启会话保持
	SessionPersistenceEnabled pulumi.BoolPtrInput
	// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
	SessionPersistenceTimeout pulumi.IntPtrInput
	Tags                      NlbServerGroupTagArrayInput
	// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
	TimestampRemoveEnabled pulumi.BoolPtrInput
	// 服务器组的类型
	Type pulumi.StringPtrInput
	// 后端服务器组的更新时间
	UpdatedTime pulumi.StringPtrInput
	// 服务器组所属私有网络的ID。
	VpcId pulumi.StringInput
}

func (NlbServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nlbServerGroupArgs)(nil)).Elem()
}

type NlbServerGroupInput interface {
	pulumi.Input

	ToNlbServerGroupOutput() NlbServerGroupOutput
	ToNlbServerGroupOutputWithContext(ctx context.Context) NlbServerGroupOutput
}

func (*NlbServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**NlbServerGroup)(nil)).Elem()
}

func (i *NlbServerGroup) ToNlbServerGroupOutput() NlbServerGroupOutput {
	return i.ToNlbServerGroupOutputWithContext(context.Background())
}

func (i *NlbServerGroup) ToNlbServerGroupOutputWithContext(ctx context.Context) NlbServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupOutput)
}

// NlbServerGroupArrayInput is an input type that accepts NlbServerGroupArray and NlbServerGroupArrayOutput values.
// You can construct a concrete instance of `NlbServerGroupArrayInput` via:
//
//	NlbServerGroupArray{ NlbServerGroupArgs{...} }
type NlbServerGroupArrayInput interface {
	pulumi.Input

	ToNlbServerGroupArrayOutput() NlbServerGroupArrayOutput
	ToNlbServerGroupArrayOutputWithContext(context.Context) NlbServerGroupArrayOutput
}

type NlbServerGroupArray []NlbServerGroupInput

func (NlbServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NlbServerGroup)(nil)).Elem()
}

func (i NlbServerGroupArray) ToNlbServerGroupArrayOutput() NlbServerGroupArrayOutput {
	return i.ToNlbServerGroupArrayOutputWithContext(context.Background())
}

func (i NlbServerGroupArray) ToNlbServerGroupArrayOutputWithContext(ctx context.Context) NlbServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupArrayOutput)
}

// NlbServerGroupMapInput is an input type that accepts NlbServerGroupMap and NlbServerGroupMapOutput values.
// You can construct a concrete instance of `NlbServerGroupMapInput` via:
//
//	NlbServerGroupMap{ "key": NlbServerGroupArgs{...} }
type NlbServerGroupMapInput interface {
	pulumi.Input

	ToNlbServerGroupMapOutput() NlbServerGroupMapOutput
	ToNlbServerGroupMapOutputWithContext(context.Context) NlbServerGroupMapOutput
}

type NlbServerGroupMap map[string]NlbServerGroupInput

func (NlbServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NlbServerGroup)(nil)).Elem()
}

func (i NlbServerGroupMap) ToNlbServerGroupMapOutput() NlbServerGroupMapOutput {
	return i.ToNlbServerGroupMapOutputWithContext(context.Background())
}

func (i NlbServerGroupMap) ToNlbServerGroupMapOutputWithContext(ctx context.Context) NlbServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupMapOutput)
}

type NlbServerGroupOutput struct{ *pulumi.OutputState }

func (NlbServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlbServerGroup)(nil)).Elem()
}

func (o NlbServerGroupOutput) ToNlbServerGroupOutput() NlbServerGroupOutput {
	return o
}

func (o NlbServerGroupOutput) ToNlbServerGroupOutputWithContext(ctx context.Context) NlbServerGroupOutput {
	return o
}

// 账号ID
func (o NlbServerGroupOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// 是否开启全端口转发
func (o NlbServerGroupOutput) AnyPortEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.BoolOutput { return v.AnyPortEnabled }).(pulumi.BoolOutput)
}

// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
func (o NlbServerGroupOutput) BypassSecurityGroupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.BoolOutput { return v.BypassSecurityGroupEnabled }).(pulumi.BoolOutput)
}

// 是否开启连接优雅中断
func (o NlbServerGroupOutput) ConnectionDrainEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.BoolOutput { return v.ConnectionDrainEnabled }).(pulumi.BoolOutput)
}

// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
func (o NlbServerGroupOutput) ConnectionDrainTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.IntOutput { return v.ConnectionDrainTimeout }).(pulumi.IntOutput)
}

// 后端服务器组的创建时间
func (o NlbServerGroupOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
func (o NlbServerGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 健康检查相关参数
func (o NlbServerGroupOutput) HealthCheck() NlbServerGroupHealthCheckOutput {
	return o.ApplyT(func(v *NlbServerGroup) NlbServerGroupHealthCheckOutput { return v.HealthCheck }).(NlbServerGroupHealthCheckOutput)
}

// 服务器组的IP地址类型
func (o NlbServerGroupOutput) IpAddressVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.IpAddressVersion }).(pulumi.StringOutput)
}

// 是否开启源地址保持
func (o NlbServerGroupOutput) PreserveClientIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.BoolOutput { return v.PreserveClientIpEnabled }).(pulumi.BoolOutput)
}

// 项目名称
func (o NlbServerGroupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// NLB转发流量到后端服务器时使用的通信协议
func (o NlbServerGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// 是否开启Proxy-Protocol协议
func (o NlbServerGroupOutput) ProxyProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.ProxyProtocolType }).(pulumi.StringOutput)
}

// 服务器组关联的NLB实例
func (o NlbServerGroupOutput) RelatedLoadBalancerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringArrayOutput { return v.RelatedLoadBalancerIds }).(pulumi.StringArrayOutput)
}

// NLB转发流量时遵循的规则
func (o NlbServerGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.Scheduler }).(pulumi.StringOutput)
}

// 服务器组中后端服务器的数量
func (o NlbServerGroupOutput) ServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.IntOutput { return v.ServerCount }).(pulumi.IntOutput)
}

// 服务器组ID
func (o NlbServerGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
func (o NlbServerGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.ServerGroupName }).(pulumi.StringOutput)
}

func (o NlbServerGroupOutput) Servers() NlbServerGroupServerArrayOutput {
	return o.ApplyT(func(v *NlbServerGroup) NlbServerGroupServerArrayOutput { return v.Servers }).(NlbServerGroupServerArrayOutput)
}

// 是否开启会话保持
func (o NlbServerGroupOutput) SessionPersistenceEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.BoolOutput { return v.SessionPersistenceEnabled }).(pulumi.BoolOutput)
}

// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
func (o NlbServerGroupOutput) SessionPersistenceTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.IntOutput { return v.SessionPersistenceTimeout }).(pulumi.IntOutput)
}

// 服务器组的状态
func (o NlbServerGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NlbServerGroupOutput) Tags() NlbServerGroupTagArrayOutput {
	return o.ApplyT(func(v *NlbServerGroup) NlbServerGroupTagArrayOutput { return v.Tags }).(NlbServerGroupTagArrayOutput)
}

// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
func (o NlbServerGroupOutput) TimestampRemoveEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.BoolOutput { return v.TimestampRemoveEnabled }).(pulumi.BoolOutput)
}

// 服务器组的类型
func (o NlbServerGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// 后端服务器组的更新时间
func (o NlbServerGroupOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 服务器组所属私有网络的ID。
func (o NlbServerGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbServerGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NlbServerGroupArrayOutput struct{ *pulumi.OutputState }

func (NlbServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NlbServerGroup)(nil)).Elem()
}

func (o NlbServerGroupArrayOutput) ToNlbServerGroupArrayOutput() NlbServerGroupArrayOutput {
	return o
}

func (o NlbServerGroupArrayOutput) ToNlbServerGroupArrayOutputWithContext(ctx context.Context) NlbServerGroupArrayOutput {
	return o
}

func (o NlbServerGroupArrayOutput) Index(i pulumi.IntInput) NlbServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NlbServerGroup {
		return vs[0].([]*NlbServerGroup)[vs[1].(int)]
	}).(NlbServerGroupOutput)
}

type NlbServerGroupMapOutput struct{ *pulumi.OutputState }

func (NlbServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NlbServerGroup)(nil)).Elem()
}

func (o NlbServerGroupMapOutput) ToNlbServerGroupMapOutput() NlbServerGroupMapOutput {
	return o
}

func (o NlbServerGroupMapOutput) ToNlbServerGroupMapOutputWithContext(ctx context.Context) NlbServerGroupMapOutput {
	return o
}

func (o NlbServerGroupMapOutput) MapIndex(k pulumi.StringInput) NlbServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NlbServerGroup {
		return vs[0].(map[string]*NlbServerGroup)[vs[1].(string)]
	}).(NlbServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupInput)(nil)).Elem(), &NlbServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupArrayInput)(nil)).Elem(), NlbServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupMapInput)(nil)).Elem(), NlbServerGroupMap{})
	pulumi.RegisterOutputType(NlbServerGroupOutput{})
	pulumi.RegisterOutputType(NlbServerGroupArrayOutput{})
	pulumi.RegisterOutputType(NlbServerGroupMapOutput{})
}
