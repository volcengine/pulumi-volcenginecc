// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// CLB提供监听级别的访问控制，如果您希望仅允许某些IP、或仅拒绝某些IP通过监听端口访问CLB实例，可以对该监听器设置访问控制策略。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clb.NewAcl(ctx, "AclDemo", &clb.AclArgs{
//				AclName:     pulumi.String("AclDemo"),
//				Description: pulumi.String("AclDemo Example"),
//				ProjectName: pulumi.String("default"),
//				AclEntries: clb.AclAclEntryArray{
//					&clb.AclAclEntryArgs{
//						Description: pulumi.String("AclDemo description"),
//						Entry:       pulumi.String("1.1.2.2/32"),
//					},
//					&clb.AclAclEntryArgs{
//						Description: pulumi.String("AclDemo description"),
//						Entry:       pulumi.String("2.2.2.2/32"),
//					},
//				},
//				Tags: clb.AclTagArray{
//					&clb.AclTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/acl:Acl example "acl_id"
// ```
type Acl struct {
	pulumi.CustomResourceState

	AclEntries AclAclEntryArrayOutput `pulumi:"aclEntries"`
	// 访问控制策略组包含的IP条目数量。
	AclEntryCount pulumi.IntOutput `pulumi:"aclEntryCount"`
	// 访问控制策略组的ID。
	AclId pulumi.StringOutput `pulumi:"aclId"`
	// 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
	AclName pulumi.StringOutput `pulumi:"aclName"`
	// 访问控制策略组的创建时间。
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
	Description pulumi.StringOutput    `pulumi:"description"`
	Listeners   AclListenerArrayOutput `pulumi:"listeners"`
	// 访问控制策略组所属项目的名称。不填默认为default。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 是否为托管资源。true：是。false：否。
	ServiceManaged pulumi.BoolOutput `pulumi:"serviceManaged"`
	// 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
	Status pulumi.StringOutput `pulumi:"status"`
	Tags   AclTagArrayOutput   `pulumi:"tags"`
	// 访问控制策略组的最近操作时间。
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		args = &AclArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("volcenginecc:clb/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("volcenginecc:clb/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	AclEntries []AclAclEntry `pulumi:"aclEntries"`
	// 访问控制策略组包含的IP条目数量。
	AclEntryCount *int `pulumi:"aclEntryCount"`
	// 访问控制策略组的ID。
	AclId *string `pulumi:"aclId"`
	// 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
	AclName *string `pulumi:"aclName"`
	// 访问控制策略组的创建时间。
	CreateTime *string `pulumi:"createTime"`
	// 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
	Description *string       `pulumi:"description"`
	Listeners   []AclListener `pulumi:"listeners"`
	// 访问控制策略组所属项目的名称。不填默认为default。
	ProjectName *string `pulumi:"projectName"`
	// 是否为托管资源。true：是。false：否。
	ServiceManaged *bool `pulumi:"serviceManaged"`
	// 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
	Status *string  `pulumi:"status"`
	Tags   []AclTag `pulumi:"tags"`
	// 访问控制策略组的最近操作时间。
	UpdateTime *string `pulumi:"updateTime"`
}

type AclState struct {
	AclEntries AclAclEntryArrayInput
	// 访问控制策略组包含的IP条目数量。
	AclEntryCount pulumi.IntPtrInput
	// 访问控制策略组的ID。
	AclId pulumi.StringPtrInput
	// 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
	AclName pulumi.StringPtrInput
	// 访问控制策略组的创建时间。
	CreateTime pulumi.StringPtrInput
	// 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
	Description pulumi.StringPtrInput
	Listeners   AclListenerArrayInput
	// 访问控制策略组所属项目的名称。不填默认为default。
	ProjectName pulumi.StringPtrInput
	// 是否为托管资源。true：是。false：否。
	ServiceManaged pulumi.BoolPtrInput
	// 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
	Status pulumi.StringPtrInput
	Tags   AclTagArrayInput
	// 访问控制策略组的最近操作时间。
	UpdateTime pulumi.StringPtrInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	AclEntries []AclAclEntry `pulumi:"aclEntries"`
	// 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
	AclName *string `pulumi:"aclName"`
	// 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
	Description *string `pulumi:"description"`
	// 访问控制策略组所属项目的名称。不填默认为default。
	ProjectName *string  `pulumi:"projectName"`
	Tags        []AclTag `pulumi:"tags"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	AclEntries AclAclEntryArrayInput
	// 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
	AclName pulumi.StringPtrInput
	// 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
	Description pulumi.StringPtrInput
	// 访问控制策略组所属项目的名称。不填默认为default。
	ProjectName pulumi.StringPtrInput
	Tags        AclTagArrayInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

func (o AclOutput) AclEntries() AclAclEntryArrayOutput {
	return o.ApplyT(func(v *Acl) AclAclEntryArrayOutput { return v.AclEntries }).(AclAclEntryArrayOutput)
}

// 访问控制策略组包含的IP条目数量。
func (o AclOutput) AclEntryCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Acl) pulumi.IntOutput { return v.AclEntryCount }).(pulumi.IntOutput)
}

// 访问控制策略组的ID。
func (o AclOutput) AclId() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclId }).(pulumi.StringOutput)
}

// 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
func (o AclOutput) AclName() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclName }).(pulumi.StringOutput)
}

// 访问控制策略组的创建时间。
func (o AclOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
func (o AclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o AclOutput) Listeners() AclListenerArrayOutput {
	return o.ApplyT(func(v *Acl) AclListenerArrayOutput { return v.Listeners }).(AclListenerArrayOutput)
}

// 访问控制策略组所属项目的名称。不填默认为default。
func (o AclOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 是否为托管资源。true：是。false：否。
func (o AclOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Acl) pulumi.BoolOutput { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
func (o AclOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o AclOutput) Tags() AclTagArrayOutput {
	return o.ApplyT(func(v *Acl) AclTagArrayOutput { return v.Tags }).(AclTagArrayOutput)
}

// 访问控制策略组的最近操作时间。
func (o AclOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}
