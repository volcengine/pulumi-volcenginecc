// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 监听器负责根据指定的协议和端口，监听CLB实例接收到的用户访问请求。CLB将按照该监听器配置的调度算法，将访问请求转发至该后端服务器组内健康的后端服务器。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/listener:Listener example "listener_id"
// ```
type Listener struct {
	pulumi.CustomResourceState

	// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
	AclIds pulumi.StringArrayOutput `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
	AclStatus pulumi.StringOutput `pulumi:"aclStatus"`
	// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
	AclType pulumi.StringOutput `pulumi:"aclType"`
	// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// 双向认证的CA证书。
	CaCertificateId pulumi.StringOutput `pulumi:"caCertificateId"`
	// 是否开启双向认证。on：开启。off（默认值）：不开启。
	CaEnabled pulumi.StringOutput `pulumi:"caEnabled"`
	// 证书中心的证书的ID。
	CertCenterCertificateId pulumi.StringOutput `pulumi:"certCenterCertificateId"`
	// CLB侧证书管理模块的证书的ID。
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
	CertificateSource pulumi.StringOutput `pulumi:"certificateSource"`
	// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
	ClientBodyTimeout pulumi.IntOutput `pulumi:"clientBodyTimeout"`
	// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ClientHeaderTimeout pulumi.IntOutput `pulumi:"clientHeaderTimeout"`
	// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
	ConnectionDrainEnabled pulumi.StringOutput `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
	ConnectionDrainTimeout pulumi.IntOutput `pulumi:"connectionDrainTimeout"`
	// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
	Cookie pulumi.StringOutput `pulumi:"cookie"`
	// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
	Cps pulumi.IntOutput `pulumi:"cps"`
	// 监听器的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
	Description pulumi.StringOutput `pulumi:"description"`
	// 是否启用监听器。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringOutput `pulumi:"enabled"`
	// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
	EndPort pulumi.IntOutput `pulumi:"endPort"`
	// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
	EstablishedTimeout pulumi.IntOutput `pulumi:"establishedTimeout"`
	// 健康检查相关信息。
	HealthCheck ListenerHealthCheckOutput `pulumi:"healthCheck"`
	// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
	Http2Enabled pulumi.StringOutput `pulumi:"http2Enabled"`
	// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	KeepaliveTimeout pulumi.IntOutput `pulumi:"keepaliveTimeout"`
	// 监听器的ID。
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
	ListenerName pulumi.StringOutput `pulumi:"listenerName"`
	// CLB实例的ID。
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
	MaxConnections pulumi.IntOutput `pulumi:"maxConnections"`
	// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
	PersistenceTimeout pulumi.IntOutput `pulumi:"persistenceTimeout"`
	// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
	PersistenceType pulumi.StringOutput `pulumi:"persistenceType"`
	// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
	Port pulumi.IntOutput `pulumi:"port"`
	// 监听器的协议。
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyConnectTimeout pulumi.IntOutput `pulumi:"proxyConnectTimeout"`
	// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
	ProxyProtocolType pulumi.StringOutput `pulumi:"proxyProtocolType"`
	// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyReadTimeout pulumi.IntOutput `pulumi:"proxyReadTimeout"`
	// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxySendTimeout pulumi.IntOutput `pulumi:"proxySendTimeout"`
	// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler pulumi.StringOutput `pulumi:"scheduler"`
	// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	SendTimeout pulumi.IntOutput `pulumi:"sendTimeout"`
	// 监听器关联的后端服务器组 ID。
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
	Status pulumi.StringOutput    `pulumi:"status"`
	Tags   ListenerTagArrayOutput `pulumi:"tags"`
	// 监听器最近一次的操作时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
	WafProtectionEnabled pulumi.StringOutput `pulumi:"wafProtectionEnabled"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Listener
	err := ctx.RegisterResource("volcenginecc:clb/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("volcenginecc:clb/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
	AclIds []string `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
	AclStatus *string `pulumi:"aclStatus"`
	// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
	AclType *string `pulumi:"aclType"`
	// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
	Bandwidth *int `pulumi:"bandwidth"`
	// 双向认证的CA证书。
	CaCertificateId *string `pulumi:"caCertificateId"`
	// 是否开启双向认证。on：开启。off（默认值）：不开启。
	CaEnabled *string `pulumi:"caEnabled"`
	// 证书中心的证书的ID。
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// CLB侧证书管理模块的证书的ID。
	CertificateId *string `pulumi:"certificateId"`
	// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
	CertificateSource *string `pulumi:"certificateSource"`
	// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
	ClientBodyTimeout *int `pulumi:"clientBodyTimeout"`
	// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ClientHeaderTimeout *int `pulumi:"clientHeaderTimeout"`
	// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
	ConnectionDrainEnabled *string `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
	// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
	Cookie *string `pulumi:"cookie"`
	// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
	Cps *int `pulumi:"cps"`
	// 监听器的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
	Description *string `pulumi:"description"`
	// 是否启用监听器。on（默认值）：开启。off：不开启。
	Enabled *string `pulumi:"enabled"`
	// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
	EndPort *int `pulumi:"endPort"`
	// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
	EstablishedTimeout *int `pulumi:"establishedTimeout"`
	// 健康检查相关信息。
	HealthCheck *ListenerHealthCheck `pulumi:"healthCheck"`
	// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
	Http2Enabled *string `pulumi:"http2Enabled"`
	// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	KeepaliveTimeout *int `pulumi:"keepaliveTimeout"`
	// 监听器的ID。
	ListenerId *string `pulumi:"listenerId"`
	// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
	ListenerName *string `pulumi:"listenerName"`
	// CLB实例的ID。
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
	MaxConnections *int `pulumi:"maxConnections"`
	// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
	PersistenceTimeout *int `pulumi:"persistenceTimeout"`
	// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
	PersistenceType *string `pulumi:"persistenceType"`
	// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
	Port *int `pulumi:"port"`
	// 监听器的协议。
	Protocol *string `pulumi:"protocol"`
	// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyConnectTimeout *int `pulumi:"proxyConnectTimeout"`
	// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
	ProxyProtocolType *string `pulumi:"proxyProtocolType"`
	// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyReadTimeout *int `pulumi:"proxyReadTimeout"`
	// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxySendTimeout *int `pulumi:"proxySendTimeout"`
	// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler *string `pulumi:"scheduler"`
	// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	SendTimeout *int `pulumi:"sendTimeout"`
	// 监听器关联的后端服务器组 ID。
	ServerGroupId *string `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
	StartPort *int `pulumi:"startPort"`
	// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
	Status *string       `pulumi:"status"`
	Tags   []ListenerTag `pulumi:"tags"`
	// 监听器最近一次的操作时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
	WafProtectionEnabled *string `pulumi:"wafProtectionEnabled"`
}

type ListenerState struct {
	// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
	AclIds pulumi.StringArrayInput
	// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
	AclStatus pulumi.StringPtrInput
	// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
	AclType pulumi.StringPtrInput
	// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
	Bandwidth pulumi.IntPtrInput
	// 双向认证的CA证书。
	CaCertificateId pulumi.StringPtrInput
	// 是否开启双向认证。on：开启。off（默认值）：不开启。
	CaEnabled pulumi.StringPtrInput
	// 证书中心的证书的ID。
	CertCenterCertificateId pulumi.StringPtrInput
	// CLB侧证书管理模块的证书的ID。
	CertificateId pulumi.StringPtrInput
	// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
	CertificateSource pulumi.StringPtrInput
	// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
	ClientBodyTimeout pulumi.IntPtrInput
	// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ClientHeaderTimeout pulumi.IntPtrInput
	// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
	ConnectionDrainEnabled pulumi.StringPtrInput
	// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
	ConnectionDrainTimeout pulumi.IntPtrInput
	// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
	Cookie pulumi.StringPtrInput
	// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
	Cps pulumi.IntPtrInput
	// 监听器的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
	Description pulumi.StringPtrInput
	// 是否启用监听器。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringPtrInput
	// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
	EndPort pulumi.IntPtrInput
	// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
	EstablishedTimeout pulumi.IntPtrInput
	// 健康检查相关信息。
	HealthCheck ListenerHealthCheckPtrInput
	// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
	Http2Enabled pulumi.StringPtrInput
	// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	KeepaliveTimeout pulumi.IntPtrInput
	// 监听器的ID。
	ListenerId pulumi.StringPtrInput
	// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
	ListenerName pulumi.StringPtrInput
	// CLB实例的ID。
	LoadBalancerId pulumi.StringPtrInput
	// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
	MaxConnections pulumi.IntPtrInput
	// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
	PersistenceTimeout pulumi.IntPtrInput
	// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
	PersistenceType pulumi.StringPtrInput
	// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
	Port pulumi.IntPtrInput
	// 监听器的协议。
	Protocol pulumi.StringPtrInput
	// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyConnectTimeout pulumi.IntPtrInput
	// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
	ProxyProtocolType pulumi.StringPtrInput
	// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyReadTimeout pulumi.IntPtrInput
	// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxySendTimeout pulumi.IntPtrInput
	// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler pulumi.StringPtrInput
	// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
	SecurityPolicyId pulumi.StringPtrInput
	// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	SendTimeout pulumi.IntPtrInput
	// 监听器关联的后端服务器组 ID。
	ServerGroupId pulumi.StringPtrInput
	// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
	StartPort pulumi.IntPtrInput
	// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
	Status pulumi.StringPtrInput
	Tags   ListenerTagArrayInput
	// 监听器最近一次的操作时间。
	UpdatedTime pulumi.StringPtrInput
	// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
	WafProtectionEnabled pulumi.StringPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
	AclIds []string `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
	AclStatus *string `pulumi:"aclStatus"`
	// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
	AclType *string `pulumi:"aclType"`
	// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
	Bandwidth *int `pulumi:"bandwidth"`
	// 双向认证的CA证书。
	CaCertificateId *string `pulumi:"caCertificateId"`
	// 是否开启双向认证。on：开启。off（默认值）：不开启。
	CaEnabled *string `pulumi:"caEnabled"`
	// 证书中心的证书的ID。
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// CLB侧证书管理模块的证书的ID。
	CertificateId *string `pulumi:"certificateId"`
	// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
	CertificateSource *string `pulumi:"certificateSource"`
	// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
	ClientBodyTimeout *int `pulumi:"clientBodyTimeout"`
	// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ClientHeaderTimeout *int `pulumi:"clientHeaderTimeout"`
	// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
	ConnectionDrainEnabled *string `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
	ConnectionDrainTimeout *int `pulumi:"connectionDrainTimeout"`
	// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
	Cookie *string `pulumi:"cookie"`
	// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
	Cps *int `pulumi:"cps"`
	// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
	Description *string `pulumi:"description"`
	// 是否启用监听器。on（默认值）：开启。off：不开启。
	Enabled *string `pulumi:"enabled"`
	// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
	EndPort *int `pulumi:"endPort"`
	// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
	EstablishedTimeout *int `pulumi:"establishedTimeout"`
	// 健康检查相关信息。
	HealthCheck *ListenerHealthCheck `pulumi:"healthCheck"`
	// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
	Http2Enabled *string `pulumi:"http2Enabled"`
	// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	KeepaliveTimeout *int `pulumi:"keepaliveTimeout"`
	// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
	ListenerName *string `pulumi:"listenerName"`
	// CLB实例的ID。
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
	MaxConnections *int `pulumi:"maxConnections"`
	// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
	PersistenceTimeout *int `pulumi:"persistenceTimeout"`
	// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
	PersistenceType *string `pulumi:"persistenceType"`
	// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
	Port int `pulumi:"port"`
	// 监听器的协议。
	Protocol string `pulumi:"protocol"`
	// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyConnectTimeout *int `pulumi:"proxyConnectTimeout"`
	// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
	ProxyProtocolType *string `pulumi:"proxyProtocolType"`
	// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyReadTimeout *int `pulumi:"proxyReadTimeout"`
	// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxySendTimeout *int `pulumi:"proxySendTimeout"`
	// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler *string `pulumi:"scheduler"`
	// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	SendTimeout *int `pulumi:"sendTimeout"`
	// 监听器关联的后端服务器组 ID。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
	StartPort *int          `pulumi:"startPort"`
	Tags      []ListenerTag `pulumi:"tags"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
	AclIds pulumi.StringArrayInput
	// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
	AclStatus pulumi.StringPtrInput
	// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
	AclType pulumi.StringPtrInput
	// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
	Bandwidth pulumi.IntPtrInput
	// 双向认证的CA证书。
	CaCertificateId pulumi.StringPtrInput
	// 是否开启双向认证。on：开启。off（默认值）：不开启。
	CaEnabled pulumi.StringPtrInput
	// 证书中心的证书的ID。
	CertCenterCertificateId pulumi.StringPtrInput
	// CLB侧证书管理模块的证书的ID。
	CertificateId pulumi.StringPtrInput
	// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
	CertificateSource pulumi.StringPtrInput
	// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
	ClientBodyTimeout pulumi.IntPtrInput
	// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ClientHeaderTimeout pulumi.IntPtrInput
	// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
	ConnectionDrainEnabled pulumi.StringPtrInput
	// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
	ConnectionDrainTimeout pulumi.IntPtrInput
	// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
	Cookie pulumi.StringPtrInput
	// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
	Cps pulumi.IntPtrInput
	// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
	Description pulumi.StringPtrInput
	// 是否启用监听器。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringPtrInput
	// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
	EndPort pulumi.IntPtrInput
	// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
	EstablishedTimeout pulumi.IntPtrInput
	// 健康检查相关信息。
	HealthCheck ListenerHealthCheckPtrInput
	// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
	Http2Enabled pulumi.StringPtrInput
	// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	KeepaliveTimeout pulumi.IntPtrInput
	// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
	ListenerName pulumi.StringPtrInput
	// CLB实例的ID。
	LoadBalancerId pulumi.StringInput
	// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
	MaxConnections pulumi.IntPtrInput
	// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
	PersistenceTimeout pulumi.IntPtrInput
	// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
	PersistenceType pulumi.StringPtrInput
	// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
	Port pulumi.IntInput
	// 监听器的协议。
	Protocol pulumi.StringInput
	// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyConnectTimeout pulumi.IntPtrInput
	// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
	ProxyProtocolType pulumi.StringPtrInput
	// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyReadTimeout pulumi.IntPtrInput
	// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxySendTimeout pulumi.IntPtrInput
	// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler pulumi.StringPtrInput
	// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
	SecurityPolicyId pulumi.StringPtrInput
	// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	SendTimeout pulumi.IntPtrInput
	// 监听器关联的后端服务器组 ID。
	ServerGroupId pulumi.StringInput
	// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
	StartPort pulumi.IntPtrInput
	Tags      ListenerTagArrayInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//	ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//	ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
func (o ListenerOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringArrayOutput { return v.AclIds }).(pulumi.StringArrayOutput)
}

// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
func (o ListenerOutput) AclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.AclStatus }).(pulumi.StringOutput)
}

// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
func (o ListenerOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.AclType }).(pulumi.StringOutput)
}

// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
func (o ListenerOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// 双向认证的CA证书。
func (o ListenerOutput) CaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CaCertificateId }).(pulumi.StringOutput)
}

// 是否开启双向认证。on：开启。off（默认值）：不开启。
func (o ListenerOutput) CaEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CaEnabled }).(pulumi.StringOutput)
}

// 证书中心的证书的ID。
func (o ListenerOutput) CertCenterCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CertCenterCertificateId }).(pulumi.StringOutput)
}

// CLB侧证书管理模块的证书的ID。
func (o ListenerOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
func (o ListenerOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CertificateSource }).(pulumi.StringOutput)
}

// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
func (o ListenerOutput) ClientBodyTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ClientBodyTimeout }).(pulumi.IntOutput)
}

// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o ListenerOutput) ClientHeaderTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ClientHeaderTimeout }).(pulumi.IntOutput)
}

// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
func (o ListenerOutput) ConnectionDrainEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ConnectionDrainEnabled }).(pulumi.StringOutput)
}

// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
func (o ListenerOutput) ConnectionDrainTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ConnectionDrainTimeout }).(pulumi.IntOutput)
}

// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
func (o ListenerOutput) Cookie() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Cookie }).(pulumi.StringOutput)
}

// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
func (o ListenerOutput) Cps() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.Cps }).(pulumi.IntOutput)
}

// 监听器的创建时间。
func (o ListenerOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
func (o ListenerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 是否启用监听器。on（默认值）：开启。off：不开启。
func (o ListenerOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Enabled }).(pulumi.StringOutput)
}

// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
func (o ListenerOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
func (o ListenerOutput) EstablishedTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.EstablishedTimeout }).(pulumi.IntOutput)
}

// 健康检查相关信息。
func (o ListenerOutput) HealthCheck() ListenerHealthCheckOutput {
	return o.ApplyT(func(v *Listener) ListenerHealthCheckOutput { return v.HealthCheck }).(ListenerHealthCheckOutput)
}

// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
func (o ListenerOutput) Http2Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Http2Enabled }).(pulumi.StringOutput)
}

// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o ListenerOutput) KeepaliveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.KeepaliveTimeout }).(pulumi.IntOutput)
}

// 监听器的ID。
func (o ListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
func (o ListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerName }).(pulumi.StringOutput)
}

// CLB实例的ID。
func (o ListenerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
func (o ListenerOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.MaxConnections }).(pulumi.IntOutput)
}

// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
func (o ListenerOutput) PersistenceTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.PersistenceTimeout }).(pulumi.IntOutput)
}

// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
func (o ListenerOutput) PersistenceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.PersistenceType }).(pulumi.StringOutput)
}

// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
func (o ListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// 监听器的协议。
func (o ListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o ListenerOutput) ProxyConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ProxyConnectTimeout }).(pulumi.IntOutput)
}

// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
func (o ListenerOutput) ProxyProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ProxyProtocolType }).(pulumi.StringOutput)
}

// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o ListenerOutput) ProxyReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ProxyReadTimeout }).(pulumi.IntOutput)
}

// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o ListenerOutput) ProxySendTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.ProxySendTimeout }).(pulumi.IntOutput)
}

// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
func (o ListenerOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Scheduler }).(pulumi.StringOutput)
}

// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
func (o ListenerOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o ListenerOutput) SendTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.SendTimeout }).(pulumi.IntOutput)
}

// 监听器关联的后端服务器组 ID。
func (o ListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
func (o ListenerOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
func (o ListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ListenerOutput) Tags() ListenerTagArrayOutput {
	return o.ApplyT(func(v *Listener) ListenerTagArrayOutput { return v.Tags }).(ListenerTagArrayOutput)
}

// 监听器最近一次的操作时间。
func (o ListenerOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
func (o ListenerOutput) WafProtectionEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.WafProtectionEnabled }).(pulumi.StringOutput)
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
