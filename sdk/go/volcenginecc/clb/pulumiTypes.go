// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type AclAclEntry struct {
	// IP条目的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description *string `pulumi:"description"`
	// IP条目的地址段，只支持CIDR地址。支持同时传入IPv4和IPv6条目。
	Entry *string `pulumi:"entry"`
}

// AclAclEntryInput is an input type that accepts AclAclEntryArgs and AclAclEntryOutput values.
// You can construct a concrete instance of `AclAclEntryInput` via:
//
//	AclAclEntryArgs{...}
type AclAclEntryInput interface {
	pulumi.Input

	ToAclAclEntryOutput() AclAclEntryOutput
	ToAclAclEntryOutputWithContext(context.Context) AclAclEntryOutput
}

type AclAclEntryArgs struct {
	// IP条目的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// IP条目的地址段，只支持CIDR地址。支持同时传入IPv4和IPv6条目。
	Entry pulumi.StringPtrInput `pulumi:"entry"`
}

func (AclAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAclEntry)(nil)).Elem()
}

func (i AclAclEntryArgs) ToAclAclEntryOutput() AclAclEntryOutput {
	return i.ToAclAclEntryOutputWithContext(context.Background())
}

func (i AclAclEntryArgs) ToAclAclEntryOutputWithContext(ctx context.Context) AclAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAclEntryOutput)
}

// AclAclEntryArrayInput is an input type that accepts AclAclEntryArray and AclAclEntryArrayOutput values.
// You can construct a concrete instance of `AclAclEntryArrayInput` via:
//
//	AclAclEntryArray{ AclAclEntryArgs{...} }
type AclAclEntryArrayInput interface {
	pulumi.Input

	ToAclAclEntryArrayOutput() AclAclEntryArrayOutput
	ToAclAclEntryArrayOutputWithContext(context.Context) AclAclEntryArrayOutput
}

type AclAclEntryArray []AclAclEntryInput

func (AclAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclAclEntry)(nil)).Elem()
}

func (i AclAclEntryArray) ToAclAclEntryArrayOutput() AclAclEntryArrayOutput {
	return i.ToAclAclEntryArrayOutputWithContext(context.Background())
}

func (i AclAclEntryArray) ToAclAclEntryArrayOutputWithContext(ctx context.Context) AclAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAclEntryArrayOutput)
}

type AclAclEntryOutput struct{ *pulumi.OutputState }

func (AclAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAclEntry)(nil)).Elem()
}

func (o AclAclEntryOutput) ToAclAclEntryOutput() AclAclEntryOutput {
	return o
}

func (o AclAclEntryOutput) ToAclAclEntryOutputWithContext(ctx context.Context) AclAclEntryOutput {
	return o
}

// IP条目的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
func (o AclAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// IP条目的地址段，只支持CIDR地址。支持同时传入IPv4和IPv6条目。
func (o AclAclEntryOutput) Entry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAclEntry) *string { return v.Entry }).(pulumi.StringPtrOutput)
}

type AclAclEntryArrayOutput struct{ *pulumi.OutputState }

func (AclAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclAclEntry)(nil)).Elem()
}

func (o AclAclEntryArrayOutput) ToAclAclEntryArrayOutput() AclAclEntryArrayOutput {
	return o
}

func (o AclAclEntryArrayOutput) ToAclAclEntryArrayOutputWithContext(ctx context.Context) AclAclEntryArrayOutput {
	return o
}

func (o AclAclEntryArrayOutput) Index(i pulumi.IntInput) AclAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclAclEntry {
		return vs[0].([]AclAclEntry)[vs[1].(int)]
	}).(AclAclEntryOutput)
}

type AclListener struct {
	// 监听器对本访问控制策略组的控制方式。white：白名单。监听器监听CLB的流量时，CLB仅转发其白名单关联访问控制策略组中IP地址的请求。black：黑名单。监听器监听CLB的流量时，对于黑名单关联访问控制策略组中IP地址的请求，CLB拒绝转发。
	AclType *string `pulumi:"aclType"`
	// 监听器的ID。
	ListenerId *string `pulumi:"listenerId"`
	// 监听器的名称。
	ListenerName *string `pulumi:"listenerName"`
	// 监听器的端口。
	Port *int `pulumi:"port"`
	// 监听器的协议。
	Protocol *string `pulumi:"protocol"`
}

// AclListenerInput is an input type that accepts AclListenerArgs and AclListenerOutput values.
// You can construct a concrete instance of `AclListenerInput` via:
//
//	AclListenerArgs{...}
type AclListenerInput interface {
	pulumi.Input

	ToAclListenerOutput() AclListenerOutput
	ToAclListenerOutputWithContext(context.Context) AclListenerOutput
}

type AclListenerArgs struct {
	// 监听器对本访问控制策略组的控制方式。white：白名单。监听器监听CLB的流量时，CLB仅转发其白名单关联访问控制策略组中IP地址的请求。black：黑名单。监听器监听CLB的流量时，对于黑名单关联访问控制策略组中IP地址的请求，CLB拒绝转发。
	AclType pulumi.StringPtrInput `pulumi:"aclType"`
	// 监听器的ID。
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// 监听器的名称。
	ListenerName pulumi.StringPtrInput `pulumi:"listenerName"`
	// 监听器的端口。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 监听器的协议。
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (AclListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclListener)(nil)).Elem()
}

func (i AclListenerArgs) ToAclListenerOutput() AclListenerOutput {
	return i.ToAclListenerOutputWithContext(context.Background())
}

func (i AclListenerArgs) ToAclListenerOutputWithContext(ctx context.Context) AclListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclListenerOutput)
}

// AclListenerArrayInput is an input type that accepts AclListenerArray and AclListenerArrayOutput values.
// You can construct a concrete instance of `AclListenerArrayInput` via:
//
//	AclListenerArray{ AclListenerArgs{...} }
type AclListenerArrayInput interface {
	pulumi.Input

	ToAclListenerArrayOutput() AclListenerArrayOutput
	ToAclListenerArrayOutputWithContext(context.Context) AclListenerArrayOutput
}

type AclListenerArray []AclListenerInput

func (AclListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclListener)(nil)).Elem()
}

func (i AclListenerArray) ToAclListenerArrayOutput() AclListenerArrayOutput {
	return i.ToAclListenerArrayOutputWithContext(context.Background())
}

func (i AclListenerArray) ToAclListenerArrayOutputWithContext(ctx context.Context) AclListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclListenerArrayOutput)
}

type AclListenerOutput struct{ *pulumi.OutputState }

func (AclListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclListener)(nil)).Elem()
}

func (o AclListenerOutput) ToAclListenerOutput() AclListenerOutput {
	return o
}

func (o AclListenerOutput) ToAclListenerOutputWithContext(ctx context.Context) AclListenerOutput {
	return o
}

// 监听器对本访问控制策略组的控制方式。white：白名单。监听器监听CLB的流量时，CLB仅转发其白名单关联访问控制策略组中IP地址的请求。black：黑名单。监听器监听CLB的流量时，对于黑名单关联访问控制策略组中IP地址的请求，CLB拒绝转发。
func (o AclListenerOutput) AclType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclListener) *string { return v.AclType }).(pulumi.StringPtrOutput)
}

// 监听器的ID。
func (o AclListenerOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclListener) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// 监听器的名称。
func (o AclListenerOutput) ListenerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclListener) *string { return v.ListenerName }).(pulumi.StringPtrOutput)
}

// 监听器的端口。
func (o AclListenerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AclListener) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 监听器的协议。
func (o AclListenerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclListener) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type AclListenerArrayOutput struct{ *pulumi.OutputState }

func (AclListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclListener)(nil)).Elem()
}

func (o AclListenerArrayOutput) ToAclListenerArrayOutput() AclListenerArrayOutput {
	return o
}

func (o AclListenerArrayOutput) ToAclListenerArrayOutputWithContext(ctx context.Context) AclListenerArrayOutput {
	return o
}

func (o AclListenerArrayOutput) Index(i pulumi.IntInput) AclListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclListener {
		return vs[0].([]AclListener)[vs[1].(int)]
	}).(AclListenerOutput)
}

type AclTag struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value *string `pulumi:"value"`
}

// AclTagInput is an input type that accepts AclTagArgs and AclTagOutput values.
// You can construct a concrete instance of `AclTagInput` via:
//
//	AclTagArgs{...}
type AclTagInput interface {
	pulumi.Input

	ToAclTagOutput() AclTagOutput
	ToAclTagOutputWithContext(context.Context) AclTagOutput
}

type AclTagArgs struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (AclTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTag)(nil)).Elem()
}

func (i AclTagArgs) ToAclTagOutput() AclTagOutput {
	return i.ToAclTagOutputWithContext(context.Background())
}

func (i AclTagArgs) ToAclTagOutputWithContext(ctx context.Context) AclTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTagOutput)
}

// AclTagArrayInput is an input type that accepts AclTagArray and AclTagArrayOutput values.
// You can construct a concrete instance of `AclTagArrayInput` via:
//
//	AclTagArray{ AclTagArgs{...} }
type AclTagArrayInput interface {
	pulumi.Input

	ToAclTagArrayOutput() AclTagArrayOutput
	ToAclTagArrayOutputWithContext(context.Context) AclTagArrayOutput
}

type AclTagArray []AclTagInput

func (AclTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTag)(nil)).Elem()
}

func (i AclTagArray) ToAclTagArrayOutput() AclTagArrayOutput {
	return i.ToAclTagArrayOutputWithContext(context.Background())
}

func (i AclTagArray) ToAclTagArrayOutputWithContext(ctx context.Context) AclTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclTagArrayOutput)
}

type AclTagOutput struct{ *pulumi.OutputState }

func (AclTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclTag)(nil)).Elem()
}

func (o AclTagOutput) ToAclTagOutput() AclTagOutput {
	return o
}

func (o AclTagOutput) ToAclTagOutputWithContext(ctx context.Context) AclTagOutput {
	return o
}

// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
func (o AclTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
func (o AclTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type AclTagArrayOutput struct{ *pulumi.OutputState }

func (AclTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclTag)(nil)).Elem()
}

func (o AclTagArrayOutput) ToAclTagArrayOutput() AclTagArrayOutput {
	return o
}

func (o AclTagArrayOutput) ToAclTagArrayOutputWithContext(ctx context.Context) AclTagArrayOutput {
	return o
}

func (o AclTagArrayOutput) Index(i pulumi.IntInput) AclTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclTag {
		return vs[0].([]AclTag)[vs[1].(int)]
	}).(AclTagOutput)
}

type CertificateTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// CertificateTagInput is an input type that accepts CertificateTagArgs and CertificateTagOutput values.
// You can construct a concrete instance of `CertificateTagInput` via:
//
//	CertificateTagArgs{...}
type CertificateTagInput interface {
	pulumi.Input

	ToCertificateTagOutput() CertificateTagOutput
	ToCertificateTagOutputWithContext(context.Context) CertificateTagOutput
}

type CertificateTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTag)(nil)).Elem()
}

func (i CertificateTagArgs) ToCertificateTagOutput() CertificateTagOutput {
	return i.ToCertificateTagOutputWithContext(context.Background())
}

func (i CertificateTagArgs) ToCertificateTagOutputWithContext(ctx context.Context) CertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTagOutput)
}

// CertificateTagArrayInput is an input type that accepts CertificateTagArray and CertificateTagArrayOutput values.
// You can construct a concrete instance of `CertificateTagArrayInput` via:
//
//	CertificateTagArray{ CertificateTagArgs{...} }
type CertificateTagArrayInput interface {
	pulumi.Input

	ToCertificateTagArrayOutput() CertificateTagArrayOutput
	ToCertificateTagArrayOutputWithContext(context.Context) CertificateTagArrayOutput
}

type CertificateTagArray []CertificateTagInput

func (CertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTag)(nil)).Elem()
}

func (i CertificateTagArray) ToCertificateTagArrayOutput() CertificateTagArrayOutput {
	return i.ToCertificateTagArrayOutputWithContext(context.Background())
}

func (i CertificateTagArray) ToCertificateTagArrayOutputWithContext(ctx context.Context) CertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTagArrayOutput)
}

type CertificateTagOutput struct{ *pulumi.OutputState }

func (CertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTag)(nil)).Elem()
}

func (o CertificateTagOutput) ToCertificateTagOutput() CertificateTagOutput {
	return o
}

func (o CertificateTagOutput) ToCertificateTagOutputWithContext(ctx context.Context) CertificateTagOutput {
	return o
}

func (o CertificateTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o CertificateTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CertificateTagArrayOutput struct{ *pulumi.OutputState }

func (CertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTag)(nil)).Elem()
}

func (o CertificateTagArrayOutput) ToCertificateTagArrayOutput() CertificateTagArrayOutput {
	return o
}

func (o CertificateTagArrayOutput) ToCertificateTagArrayOutputWithContext(ctx context.Context) CertificateTagArrayOutput {
	return o
}

func (o CertificateTagArrayOutput) Index(i pulumi.IntInput) CertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateTag {
		return vs[0].([]CertificateTag)[vs[1].(int)]
	}).(CertificateTagOutput)
}

type ClbAccessLog struct {
	// 存储七层访问日志的对象存储桶的名称
	BucketName *string `pulumi:"bucketName"`
	// 日志投递类型
	DeliveryType *string `pulumi:"deliveryType"`
	// 是否开启访问日志（七层）投递至对象存储TOS的功能
	Enabled *bool `pulumi:"enabled"`
	// 日志项目
	TlsProjectId *string `pulumi:"tlsProjectId"`
	// 日志主题
	TlsTopicId *string `pulumi:"tlsTopicId"`
}

// ClbAccessLogInput is an input type that accepts ClbAccessLogArgs and ClbAccessLogOutput values.
// You can construct a concrete instance of `ClbAccessLogInput` via:
//
//	ClbAccessLogArgs{...}
type ClbAccessLogInput interface {
	pulumi.Input

	ToClbAccessLogOutput() ClbAccessLogOutput
	ToClbAccessLogOutputWithContext(context.Context) ClbAccessLogOutput
}

type ClbAccessLogArgs struct {
	// 存储七层访问日志的对象存储桶的名称
	BucketName pulumi.StringPtrInput `pulumi:"bucketName"`
	// 日志投递类型
	DeliveryType pulumi.StringPtrInput `pulumi:"deliveryType"`
	// 是否开启访问日志（七层）投递至对象存储TOS的功能
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// 日志项目
	TlsProjectId pulumi.StringPtrInput `pulumi:"tlsProjectId"`
	// 日志主题
	TlsTopicId pulumi.StringPtrInput `pulumi:"tlsTopicId"`
}

func (ClbAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbAccessLog)(nil)).Elem()
}

func (i ClbAccessLogArgs) ToClbAccessLogOutput() ClbAccessLogOutput {
	return i.ToClbAccessLogOutputWithContext(context.Background())
}

func (i ClbAccessLogArgs) ToClbAccessLogOutputWithContext(ctx context.Context) ClbAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbAccessLogOutput)
}

func (i ClbAccessLogArgs) ToClbAccessLogPtrOutput() ClbAccessLogPtrOutput {
	return i.ToClbAccessLogPtrOutputWithContext(context.Background())
}

func (i ClbAccessLogArgs) ToClbAccessLogPtrOutputWithContext(ctx context.Context) ClbAccessLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbAccessLogOutput).ToClbAccessLogPtrOutputWithContext(ctx)
}

// ClbAccessLogPtrInput is an input type that accepts ClbAccessLogArgs, ClbAccessLogPtr and ClbAccessLogPtrOutput values.
// You can construct a concrete instance of `ClbAccessLogPtrInput` via:
//
//	        ClbAccessLogArgs{...}
//
//	or:
//
//	        nil
type ClbAccessLogPtrInput interface {
	pulumi.Input

	ToClbAccessLogPtrOutput() ClbAccessLogPtrOutput
	ToClbAccessLogPtrOutputWithContext(context.Context) ClbAccessLogPtrOutput
}

type clbAccessLogPtrType ClbAccessLogArgs

func ClbAccessLogPtr(v *ClbAccessLogArgs) ClbAccessLogPtrInput {
	return (*clbAccessLogPtrType)(v)
}

func (*clbAccessLogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbAccessLog)(nil)).Elem()
}

func (i *clbAccessLogPtrType) ToClbAccessLogPtrOutput() ClbAccessLogPtrOutput {
	return i.ToClbAccessLogPtrOutputWithContext(context.Background())
}

func (i *clbAccessLogPtrType) ToClbAccessLogPtrOutputWithContext(ctx context.Context) ClbAccessLogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbAccessLogPtrOutput)
}

type ClbAccessLogOutput struct{ *pulumi.OutputState }

func (ClbAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbAccessLog)(nil)).Elem()
}

func (o ClbAccessLogOutput) ToClbAccessLogOutput() ClbAccessLogOutput {
	return o
}

func (o ClbAccessLogOutput) ToClbAccessLogOutputWithContext(ctx context.Context) ClbAccessLogOutput {
	return o
}

func (o ClbAccessLogOutput) ToClbAccessLogPtrOutput() ClbAccessLogPtrOutput {
	return o.ToClbAccessLogPtrOutputWithContext(context.Background())
}

func (o ClbAccessLogOutput) ToClbAccessLogPtrOutputWithContext(ctx context.Context) ClbAccessLogPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClbAccessLog) *ClbAccessLog {
		return &v
	}).(ClbAccessLogPtrOutput)
}

// 存储七层访问日志的对象存储桶的名称
func (o ClbAccessLogOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbAccessLog) *string { return v.BucketName }).(pulumi.StringPtrOutput)
}

// 日志投递类型
func (o ClbAccessLogOutput) DeliveryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbAccessLog) *string { return v.DeliveryType }).(pulumi.StringPtrOutput)
}

// 是否开启访问日志（七层）投递至对象存储TOS的功能
func (o ClbAccessLogOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ClbAccessLog) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// 日志项目
func (o ClbAccessLogOutput) TlsProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbAccessLog) *string { return v.TlsProjectId }).(pulumi.StringPtrOutput)
}

// 日志主题
func (o ClbAccessLogOutput) TlsTopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbAccessLog) *string { return v.TlsTopicId }).(pulumi.StringPtrOutput)
}

type ClbAccessLogPtrOutput struct{ *pulumi.OutputState }

func (ClbAccessLogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbAccessLog)(nil)).Elem()
}

func (o ClbAccessLogPtrOutput) ToClbAccessLogPtrOutput() ClbAccessLogPtrOutput {
	return o
}

func (o ClbAccessLogPtrOutput) ToClbAccessLogPtrOutputWithContext(ctx context.Context) ClbAccessLogPtrOutput {
	return o
}

func (o ClbAccessLogPtrOutput) Elem() ClbAccessLogOutput {
	return o.ApplyT(func(v *ClbAccessLog) ClbAccessLog {
		if v != nil {
			return *v
		}
		var ret ClbAccessLog
		return ret
	}).(ClbAccessLogOutput)
}

// 存储七层访问日志的对象存储桶的名称
func (o ClbAccessLogPtrOutput) BucketName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbAccessLog) *string {
		if v == nil {
			return nil
		}
		return v.BucketName
	}).(pulumi.StringPtrOutput)
}

// 日志投递类型
func (o ClbAccessLogPtrOutput) DeliveryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbAccessLog) *string {
		if v == nil {
			return nil
		}
		return v.DeliveryType
	}).(pulumi.StringPtrOutput)
}

// 是否开启访问日志（七层）投递至对象存储TOS的功能
func (o ClbAccessLogPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ClbAccessLog) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// 日志项目
func (o ClbAccessLogPtrOutput) TlsProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbAccessLog) *string {
		if v == nil {
			return nil
		}
		return v.TlsProjectId
	}).(pulumi.StringPtrOutput)
}

// 日志主题
func (o ClbAccessLogPtrOutput) TlsTopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbAccessLog) *string {
		if v == nil {
			return nil
		}
		return v.TlsTopicId
	}).(pulumi.StringPtrOutput)
}

type ClbEip struct {
	// 带宽峰值
	Bandwidth *float64 `pulumi:"bandwidth"`
	// 共享带宽包ID
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// 计费方式
	EipBillingType *float64 `pulumi:"eipBillingType"`
	// 线路类型
	Isp *string `pulumi:"isp"`
	// 防护包ID
	SecurityProtectionInstanceId *float64 `pulumi:"securityProtectionInstanceId"`
	// 安全防护类型
	SecurityProtectionTypes []string `pulumi:"securityProtectionTypes"`
}

// ClbEipInput is an input type that accepts ClbEipArgs and ClbEipOutput values.
// You can construct a concrete instance of `ClbEipInput` via:
//
//	ClbEipArgs{...}
type ClbEipInput interface {
	pulumi.Input

	ToClbEipOutput() ClbEipOutput
	ToClbEipOutputWithContext(context.Context) ClbEipOutput
}

type ClbEipArgs struct {
	// 带宽峰值
	Bandwidth pulumi.Float64PtrInput `pulumi:"bandwidth"`
	// 共享带宽包ID
	BandwidthPackageId pulumi.StringPtrInput `pulumi:"bandwidthPackageId"`
	// 计费方式
	EipBillingType pulumi.Float64PtrInput `pulumi:"eipBillingType"`
	// 线路类型
	Isp pulumi.StringPtrInput `pulumi:"isp"`
	// 防护包ID
	SecurityProtectionInstanceId pulumi.Float64PtrInput `pulumi:"securityProtectionInstanceId"`
	// 安全防护类型
	SecurityProtectionTypes pulumi.StringArrayInput `pulumi:"securityProtectionTypes"`
}

func (ClbEipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEip)(nil)).Elem()
}

func (i ClbEipArgs) ToClbEipOutput() ClbEipOutput {
	return i.ToClbEipOutputWithContext(context.Background())
}

func (i ClbEipArgs) ToClbEipOutputWithContext(ctx context.Context) ClbEipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEipOutput)
}

func (i ClbEipArgs) ToClbEipPtrOutput() ClbEipPtrOutput {
	return i.ToClbEipPtrOutputWithContext(context.Background())
}

func (i ClbEipArgs) ToClbEipPtrOutputWithContext(ctx context.Context) ClbEipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEipOutput).ToClbEipPtrOutputWithContext(ctx)
}

// ClbEipPtrInput is an input type that accepts ClbEipArgs, ClbEipPtr and ClbEipPtrOutput values.
// You can construct a concrete instance of `ClbEipPtrInput` via:
//
//	        ClbEipArgs{...}
//
//	or:
//
//	        nil
type ClbEipPtrInput interface {
	pulumi.Input

	ToClbEipPtrOutput() ClbEipPtrOutput
	ToClbEipPtrOutputWithContext(context.Context) ClbEipPtrOutput
}

type clbEipPtrType ClbEipArgs

func ClbEipPtr(v *ClbEipArgs) ClbEipPtrInput {
	return (*clbEipPtrType)(v)
}

func (*clbEipPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEip)(nil)).Elem()
}

func (i *clbEipPtrType) ToClbEipPtrOutput() ClbEipPtrOutput {
	return i.ToClbEipPtrOutputWithContext(context.Background())
}

func (i *clbEipPtrType) ToClbEipPtrOutputWithContext(ctx context.Context) ClbEipPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEipPtrOutput)
}

type ClbEipOutput struct{ *pulumi.OutputState }

func (ClbEipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEip)(nil)).Elem()
}

func (o ClbEipOutput) ToClbEipOutput() ClbEipOutput {
	return o
}

func (o ClbEipOutput) ToClbEipOutputWithContext(ctx context.Context) ClbEipOutput {
	return o
}

func (o ClbEipOutput) ToClbEipPtrOutput() ClbEipPtrOutput {
	return o.ToClbEipPtrOutputWithContext(context.Background())
}

func (o ClbEipOutput) ToClbEipPtrOutputWithContext(ctx context.Context) ClbEipPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClbEip) *ClbEip {
		return &v
	}).(ClbEipPtrOutput)
}

// 带宽峰值
func (o ClbEipOutput) Bandwidth() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClbEip) *float64 { return v.Bandwidth }).(pulumi.Float64PtrOutput)
}

// 共享带宽包ID
func (o ClbEipOutput) BandwidthPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbEip) *string { return v.BandwidthPackageId }).(pulumi.StringPtrOutput)
}

// 计费方式
func (o ClbEipOutput) EipBillingType() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClbEip) *float64 { return v.EipBillingType }).(pulumi.Float64PtrOutput)
}

// 线路类型
func (o ClbEipOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbEip) *string { return v.Isp }).(pulumi.StringPtrOutput)
}

// 防护包ID
func (o ClbEipOutput) SecurityProtectionInstanceId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v ClbEip) *float64 { return v.SecurityProtectionInstanceId }).(pulumi.Float64PtrOutput)
}

// 安全防护类型
func (o ClbEipOutput) SecurityProtectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ClbEip) []string { return v.SecurityProtectionTypes }).(pulumi.StringArrayOutput)
}

type ClbEipPtrOutput struct{ *pulumi.OutputState }

func (ClbEipPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEip)(nil)).Elem()
}

func (o ClbEipPtrOutput) ToClbEipPtrOutput() ClbEipPtrOutput {
	return o
}

func (o ClbEipPtrOutput) ToClbEipPtrOutputWithContext(ctx context.Context) ClbEipPtrOutput {
	return o
}

func (o ClbEipPtrOutput) Elem() ClbEipOutput {
	return o.ApplyT(func(v *ClbEip) ClbEip {
		if v != nil {
			return *v
		}
		var ret ClbEip
		return ret
	}).(ClbEipOutput)
}

// 带宽峰值
func (o ClbEipPtrOutput) Bandwidth() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ClbEip) *float64 {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.Float64PtrOutput)
}

// 共享带宽包ID
func (o ClbEipPtrOutput) BandwidthPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEip) *string {
		if v == nil {
			return nil
		}
		return v.BandwidthPackageId
	}).(pulumi.StringPtrOutput)
}

// 计费方式
func (o ClbEipPtrOutput) EipBillingType() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ClbEip) *float64 {
		if v == nil {
			return nil
		}
		return v.EipBillingType
	}).(pulumi.Float64PtrOutput)
}

// 线路类型
func (o ClbEipPtrOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEip) *string {
		if v == nil {
			return nil
		}
		return v.Isp
	}).(pulumi.StringPtrOutput)
}

// 防护包ID
func (o ClbEipPtrOutput) SecurityProtectionInstanceId() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *ClbEip) *float64 {
		if v == nil {
			return nil
		}
		return v.SecurityProtectionInstanceId
	}).(pulumi.Float64PtrOutput)
}

// 安全防护类型
func (o ClbEipPtrOutput) SecurityProtectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClbEip) []string {
		if v == nil {
			return nil
		}
		return v.SecurityProtectionTypes
	}).(pulumi.StringArrayOutput)
}

type ClbEni struct {
	// 负载均衡实例的私网IP地址
	EniAddress *string `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId *string `pulumi:"eniId"`
}

// ClbEniInput is an input type that accepts ClbEniArgs and ClbEniOutput values.
// You can construct a concrete instance of `ClbEniInput` via:
//
//	ClbEniArgs{...}
type ClbEniInput interface {
	pulumi.Input

	ToClbEniOutput() ClbEniOutput
	ToClbEniOutputWithContext(context.Context) ClbEniOutput
}

type ClbEniArgs struct {
	// 负载均衡实例的私网IP地址
	EniAddress pulumi.StringPtrInput `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId pulumi.StringPtrInput `pulumi:"eniId"`
}

func (ClbEniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEni)(nil)).Elem()
}

func (i ClbEniArgs) ToClbEniOutput() ClbEniOutput {
	return i.ToClbEniOutputWithContext(context.Background())
}

func (i ClbEniArgs) ToClbEniOutputWithContext(ctx context.Context) ClbEniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEniOutput)
}

func (i ClbEniArgs) ToClbEniPtrOutput() ClbEniPtrOutput {
	return i.ToClbEniPtrOutputWithContext(context.Background())
}

func (i ClbEniArgs) ToClbEniPtrOutputWithContext(ctx context.Context) ClbEniPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEniOutput).ToClbEniPtrOutputWithContext(ctx)
}

// ClbEniPtrInput is an input type that accepts ClbEniArgs, ClbEniPtr and ClbEniPtrOutput values.
// You can construct a concrete instance of `ClbEniPtrInput` via:
//
//	        ClbEniArgs{...}
//
//	or:
//
//	        nil
type ClbEniPtrInput interface {
	pulumi.Input

	ToClbEniPtrOutput() ClbEniPtrOutput
	ToClbEniPtrOutputWithContext(context.Context) ClbEniPtrOutput
}

type clbEniPtrType ClbEniArgs

func ClbEniPtr(v *ClbEniArgs) ClbEniPtrInput {
	return (*clbEniPtrType)(v)
}

func (*clbEniPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEni)(nil)).Elem()
}

func (i *clbEniPtrType) ToClbEniPtrOutput() ClbEniPtrOutput {
	return i.ToClbEniPtrOutputWithContext(context.Background())
}

func (i *clbEniPtrType) ToClbEniPtrOutputWithContext(ctx context.Context) ClbEniPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEniPtrOutput)
}

type ClbEniOutput struct{ *pulumi.OutputState }

func (ClbEniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEni)(nil)).Elem()
}

func (o ClbEniOutput) ToClbEniOutput() ClbEniOutput {
	return o
}

func (o ClbEniOutput) ToClbEniOutputWithContext(ctx context.Context) ClbEniOutput {
	return o
}

func (o ClbEniOutput) ToClbEniPtrOutput() ClbEniPtrOutput {
	return o.ToClbEniPtrOutputWithContext(context.Background())
}

func (o ClbEniOutput) ToClbEniPtrOutputWithContext(ctx context.Context) ClbEniPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClbEni) *ClbEni {
		return &v
	}).(ClbEniPtrOutput)
}

// 负载均衡实例的私网IP地址
func (o ClbEniOutput) EniAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbEni) *string { return v.EniAddress }).(pulumi.StringPtrOutput)
}

// 负载均衡实例占用的网卡ID
func (o ClbEniOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbEni) *string { return v.EniId }).(pulumi.StringPtrOutput)
}

type ClbEniPtrOutput struct{ *pulumi.OutputState }

func (ClbEniPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEni)(nil)).Elem()
}

func (o ClbEniPtrOutput) ToClbEniPtrOutput() ClbEniPtrOutput {
	return o
}

func (o ClbEniPtrOutput) ToClbEniPtrOutputWithContext(ctx context.Context) ClbEniPtrOutput {
	return o
}

func (o ClbEniPtrOutput) Elem() ClbEniOutput {
	return o.ApplyT(func(v *ClbEni) ClbEni {
		if v != nil {
			return *v
		}
		var ret ClbEni
		return ret
	}).(ClbEniOutput)
}

// 负载均衡实例的私网IP地址
func (o ClbEniPtrOutput) EniAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEni) *string {
		if v == nil {
			return nil
		}
		return v.EniAddress
	}).(pulumi.StringPtrOutput)
}

// 负载均衡实例占用的网卡ID
func (o ClbEniPtrOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEni) *string {
		if v == nil {
			return nil
		}
		return v.EniId
	}).(pulumi.StringPtrOutput)
}

type ClbEnis struct {
	// 负载均衡实例的私网IP地址
	EniAddress *string `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId *string `pulumi:"eniId"`
}

// ClbEnisInput is an input type that accepts ClbEnisArgs and ClbEnisOutput values.
// You can construct a concrete instance of `ClbEnisInput` via:
//
//	ClbEnisArgs{...}
type ClbEnisInput interface {
	pulumi.Input

	ToClbEnisOutput() ClbEnisOutput
	ToClbEnisOutputWithContext(context.Context) ClbEnisOutput
}

type ClbEnisArgs struct {
	// 负载均衡实例的私网IP地址
	EniAddress pulumi.StringPtrInput `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId pulumi.StringPtrInput `pulumi:"eniId"`
}

func (ClbEnisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEnis)(nil)).Elem()
}

func (i ClbEnisArgs) ToClbEnisOutput() ClbEnisOutput {
	return i.ToClbEnisOutputWithContext(context.Background())
}

func (i ClbEnisArgs) ToClbEnisOutputWithContext(ctx context.Context) ClbEnisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEnisOutput)
}

func (i ClbEnisArgs) ToClbEnisPtrOutput() ClbEnisPtrOutput {
	return i.ToClbEnisPtrOutputWithContext(context.Background())
}

func (i ClbEnisArgs) ToClbEnisPtrOutputWithContext(ctx context.Context) ClbEnisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEnisOutput).ToClbEnisPtrOutputWithContext(ctx)
}

// ClbEnisPtrInput is an input type that accepts ClbEnisArgs, ClbEnisPtr and ClbEnisPtrOutput values.
// You can construct a concrete instance of `ClbEnisPtrInput` via:
//
//	        ClbEnisArgs{...}
//
//	or:
//
//	        nil
type ClbEnisPtrInput interface {
	pulumi.Input

	ToClbEnisPtrOutput() ClbEnisPtrOutput
	ToClbEnisPtrOutputWithContext(context.Context) ClbEnisPtrOutput
}

type clbEnisPtrType ClbEnisArgs

func ClbEnisPtr(v *ClbEnisArgs) ClbEnisPtrInput {
	return (*clbEnisPtrType)(v)
}

func (*clbEnisPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEnis)(nil)).Elem()
}

func (i *clbEnisPtrType) ToClbEnisPtrOutput() ClbEnisPtrOutput {
	return i.ToClbEnisPtrOutputWithContext(context.Background())
}

func (i *clbEnisPtrType) ToClbEnisPtrOutputWithContext(ctx context.Context) ClbEnisPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEnisPtrOutput)
}

type ClbEnisOutput struct{ *pulumi.OutputState }

func (ClbEnisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEnis)(nil)).Elem()
}

func (o ClbEnisOutput) ToClbEnisOutput() ClbEnisOutput {
	return o
}

func (o ClbEnisOutput) ToClbEnisOutputWithContext(ctx context.Context) ClbEnisOutput {
	return o
}

func (o ClbEnisOutput) ToClbEnisPtrOutput() ClbEnisPtrOutput {
	return o.ToClbEnisPtrOutputWithContext(context.Background())
}

func (o ClbEnisOutput) ToClbEnisPtrOutputWithContext(ctx context.Context) ClbEnisPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClbEnis) *ClbEnis {
		return &v
	}).(ClbEnisPtrOutput)
}

// 负载均衡实例的私网IP地址
func (o ClbEnisOutput) EniAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbEnis) *string { return v.EniAddress }).(pulumi.StringPtrOutput)
}

// 负载均衡实例占用的网卡ID
func (o ClbEnisOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbEnis) *string { return v.EniId }).(pulumi.StringPtrOutput)
}

type ClbEnisPtrOutput struct{ *pulumi.OutputState }

func (ClbEnisPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEnis)(nil)).Elem()
}

func (o ClbEnisPtrOutput) ToClbEnisPtrOutput() ClbEnisPtrOutput {
	return o
}

func (o ClbEnisPtrOutput) ToClbEnisPtrOutputWithContext(ctx context.Context) ClbEnisPtrOutput {
	return o
}

func (o ClbEnisPtrOutput) Elem() ClbEnisOutput {
	return o.ApplyT(func(v *ClbEnis) ClbEnis {
		if v != nil {
			return *v
		}
		var ret ClbEnis
		return ret
	}).(ClbEnisOutput)
}

// 负载均衡实例的私网IP地址
func (o ClbEnisPtrOutput) EniAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEnis) *string {
		if v == nil {
			return nil
		}
		return v.EniAddress
	}).(pulumi.StringPtrOutput)
}

// 负载均衡实例占用的网卡ID
func (o ClbEnisPtrOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEnis) *string {
		if v == nil {
			return nil
		}
		return v.EniId
	}).(pulumi.StringPtrOutput)
}

type ClbListener struct {
	// 监听器的ID
	ListenerId *string `pulumi:"listenerId"`
	// 监听器的名称
	ListenerName *string `pulumi:"listenerName"`
}

// ClbListenerInput is an input type that accepts ClbListenerArgs and ClbListenerOutput values.
// You can construct a concrete instance of `ClbListenerInput` via:
//
//	ClbListenerArgs{...}
type ClbListenerInput interface {
	pulumi.Input

	ToClbListenerOutput() ClbListenerOutput
	ToClbListenerOutputWithContext(context.Context) ClbListenerOutput
}

type ClbListenerArgs struct {
	// 监听器的ID
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
	// 监听器的名称
	ListenerName pulumi.StringPtrInput `pulumi:"listenerName"`
}

func (ClbListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbListener)(nil)).Elem()
}

func (i ClbListenerArgs) ToClbListenerOutput() ClbListenerOutput {
	return i.ToClbListenerOutputWithContext(context.Background())
}

func (i ClbListenerArgs) ToClbListenerOutputWithContext(ctx context.Context) ClbListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbListenerOutput)
}

// ClbListenerArrayInput is an input type that accepts ClbListenerArray and ClbListenerArrayOutput values.
// You can construct a concrete instance of `ClbListenerArrayInput` via:
//
//	ClbListenerArray{ ClbListenerArgs{...} }
type ClbListenerArrayInput interface {
	pulumi.Input

	ToClbListenerArrayOutput() ClbListenerArrayOutput
	ToClbListenerArrayOutputWithContext(context.Context) ClbListenerArrayOutput
}

type ClbListenerArray []ClbListenerInput

func (ClbListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbListener)(nil)).Elem()
}

func (i ClbListenerArray) ToClbListenerArrayOutput() ClbListenerArrayOutput {
	return i.ToClbListenerArrayOutputWithContext(context.Background())
}

func (i ClbListenerArray) ToClbListenerArrayOutputWithContext(ctx context.Context) ClbListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbListenerArrayOutput)
}

type ClbListenerOutput struct{ *pulumi.OutputState }

func (ClbListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbListener)(nil)).Elem()
}

func (o ClbListenerOutput) ToClbListenerOutput() ClbListenerOutput {
	return o
}

func (o ClbListenerOutput) ToClbListenerOutputWithContext(ctx context.Context) ClbListenerOutput {
	return o
}

// 监听器的ID
func (o ClbListenerOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbListener) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

// 监听器的名称
func (o ClbListenerOutput) ListenerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbListener) *string { return v.ListenerName }).(pulumi.StringPtrOutput)
}

type ClbListenerArrayOutput struct{ *pulumi.OutputState }

func (ClbListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbListener)(nil)).Elem()
}

func (o ClbListenerArrayOutput) ToClbListenerArrayOutput() ClbListenerArrayOutput {
	return o
}

func (o ClbListenerArrayOutput) ToClbListenerArrayOutputWithContext(ctx context.Context) ClbListenerArrayOutput {
	return o
}

func (o ClbListenerArrayOutput) Index(i pulumi.IntInput) ClbListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbListener {
		return vs[0].([]ClbListener)[vs[1].(int)]
	}).(ClbListenerOutput)
}

type ClbServerGroup struct {
	// 负载均衡实例中后端服务器组的ID
	ServerGroupId *string `pulumi:"serverGroupId"`
	// 负载均衡实例中后端服务器组的名称
	ServerGroupName *string `pulumi:"serverGroupName"`
}

// ClbServerGroupInput is an input type that accepts ClbServerGroupArgs and ClbServerGroupOutput values.
// You can construct a concrete instance of `ClbServerGroupInput` via:
//
//	ClbServerGroupArgs{...}
type ClbServerGroupInput interface {
	pulumi.Input

	ToClbServerGroupOutput() ClbServerGroupOutput
	ToClbServerGroupOutputWithContext(context.Context) ClbServerGroupOutput
}

type ClbServerGroupArgs struct {
	// 负载均衡实例中后端服务器组的ID
	ServerGroupId pulumi.StringPtrInput `pulumi:"serverGroupId"`
	// 负载均衡实例中后端服务器组的名称
	ServerGroupName pulumi.StringPtrInput `pulumi:"serverGroupName"`
}

func (ClbServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbServerGroup)(nil)).Elem()
}

func (i ClbServerGroupArgs) ToClbServerGroupOutput() ClbServerGroupOutput {
	return i.ToClbServerGroupOutputWithContext(context.Background())
}

func (i ClbServerGroupArgs) ToClbServerGroupOutputWithContext(ctx context.Context) ClbServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbServerGroupOutput)
}

// ClbServerGroupArrayInput is an input type that accepts ClbServerGroupArray and ClbServerGroupArrayOutput values.
// You can construct a concrete instance of `ClbServerGroupArrayInput` via:
//
//	ClbServerGroupArray{ ClbServerGroupArgs{...} }
type ClbServerGroupArrayInput interface {
	pulumi.Input

	ToClbServerGroupArrayOutput() ClbServerGroupArrayOutput
	ToClbServerGroupArrayOutputWithContext(context.Context) ClbServerGroupArrayOutput
}

type ClbServerGroupArray []ClbServerGroupInput

func (ClbServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbServerGroup)(nil)).Elem()
}

func (i ClbServerGroupArray) ToClbServerGroupArrayOutput() ClbServerGroupArrayOutput {
	return i.ToClbServerGroupArrayOutputWithContext(context.Background())
}

func (i ClbServerGroupArray) ToClbServerGroupArrayOutputWithContext(ctx context.Context) ClbServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbServerGroupArrayOutput)
}

type ClbServerGroupOutput struct{ *pulumi.OutputState }

func (ClbServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbServerGroup)(nil)).Elem()
}

func (o ClbServerGroupOutput) ToClbServerGroupOutput() ClbServerGroupOutput {
	return o
}

func (o ClbServerGroupOutput) ToClbServerGroupOutputWithContext(ctx context.Context) ClbServerGroupOutput {
	return o
}

// 负载均衡实例中后端服务器组的ID
func (o ClbServerGroupOutput) ServerGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbServerGroup) *string { return v.ServerGroupId }).(pulumi.StringPtrOutput)
}

// 负载均衡实例中后端服务器组的名称
func (o ClbServerGroupOutput) ServerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbServerGroup) *string { return v.ServerGroupName }).(pulumi.StringPtrOutput)
}

type ClbServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ClbServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbServerGroup)(nil)).Elem()
}

func (o ClbServerGroupArrayOutput) ToClbServerGroupArrayOutput() ClbServerGroupArrayOutput {
	return o
}

func (o ClbServerGroupArrayOutput) ToClbServerGroupArrayOutputWithContext(ctx context.Context) ClbServerGroupArrayOutput {
	return o
}

func (o ClbServerGroupArrayOutput) Index(i pulumi.IntInput) ClbServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbServerGroup {
		return vs[0].([]ClbServerGroup)[vs[1].(int)]
	}).(ClbServerGroupOutput)
}

type ClbTag struct {
	// 标签键
	Key *string `pulumi:"key"`
	// 标签值
	Value *string `pulumi:"value"`
}

// ClbTagInput is an input type that accepts ClbTagArgs and ClbTagOutput values.
// You can construct a concrete instance of `ClbTagInput` via:
//
//	ClbTagArgs{...}
type ClbTagInput interface {
	pulumi.Input

	ToClbTagOutput() ClbTagOutput
	ToClbTagOutputWithContext(context.Context) ClbTagOutput
}

type ClbTagArgs struct {
	// 标签键
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ClbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbTag)(nil)).Elem()
}

func (i ClbTagArgs) ToClbTagOutput() ClbTagOutput {
	return i.ToClbTagOutputWithContext(context.Background())
}

func (i ClbTagArgs) ToClbTagOutputWithContext(ctx context.Context) ClbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbTagOutput)
}

// ClbTagArrayInput is an input type that accepts ClbTagArray and ClbTagArrayOutput values.
// You can construct a concrete instance of `ClbTagArrayInput` via:
//
//	ClbTagArray{ ClbTagArgs{...} }
type ClbTagArrayInput interface {
	pulumi.Input

	ToClbTagArrayOutput() ClbTagArrayOutput
	ToClbTagArrayOutputWithContext(context.Context) ClbTagArrayOutput
}

type ClbTagArray []ClbTagInput

func (ClbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbTag)(nil)).Elem()
}

func (i ClbTagArray) ToClbTagArrayOutput() ClbTagArrayOutput {
	return i.ToClbTagArrayOutputWithContext(context.Background())
}

func (i ClbTagArray) ToClbTagArrayOutputWithContext(ctx context.Context) ClbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbTagArrayOutput)
}

type ClbTagOutput struct{ *pulumi.OutputState }

func (ClbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbTag)(nil)).Elem()
}

func (o ClbTagOutput) ToClbTagOutput() ClbTagOutput {
	return o
}

func (o ClbTagOutput) ToClbTagOutputWithContext(ctx context.Context) ClbTagOutput {
	return o
}

// 标签键
func (o ClbTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值
func (o ClbTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ClbTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ClbTagArrayOutput struct{ *pulumi.OutputState }

func (ClbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbTag)(nil)).Elem()
}

func (o ClbTagArrayOutput) ToClbTagArrayOutput() ClbTagArrayOutput {
	return o
}

func (o ClbTagArrayOutput) ToClbTagArrayOutputWithContext(ctx context.Context) ClbTagArrayOutput {
	return o
}

func (o ClbTagArrayOutput) Index(i pulumi.IntInput) ClbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbTag {
		return vs[0].([]ClbTag)[vs[1].(int)]
	}).(ClbTagOutput)
}

type ListenerHealthCheck struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain *string `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled *string `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode *string `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval *int `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method *string `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port *int `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout *int `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect *string `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest *string `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri *string `pulumi:"uri"`
}

// ListenerHealthCheckInput is an input type that accepts ListenerHealthCheckArgs and ListenerHealthCheckOutput values.
// You can construct a concrete instance of `ListenerHealthCheckInput` via:
//
//	ListenerHealthCheckArgs{...}
type ListenerHealthCheckInput interface {
	pulumi.Input

	ToListenerHealthCheckOutput() ListenerHealthCheckOutput
	ToListenerHealthCheckOutputWithContext(context.Context) ListenerHealthCheckOutput
}

type ListenerHealthCheckArgs struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode pulumi.StringPtrInput `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method pulumi.StringPtrInput `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect pulumi.StringPtrInput `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest pulumi.StringPtrInput `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return i.ToListenerHealthCheckOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput)
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput).ToListenerHealthCheckPtrOutputWithContext(ctx)
}

// ListenerHealthCheckPtrInput is an input type that accepts ListenerHealthCheckArgs, ListenerHealthCheckPtr and ListenerHealthCheckPtrOutput values.
// You can construct a concrete instance of `ListenerHealthCheckPtrInput` via:
//
//	        ListenerHealthCheckArgs{...}
//
//	or:
//
//	        nil
type ListenerHealthCheckPtrInput interface {
	pulumi.Input

	ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput
	ToListenerHealthCheckPtrOutputWithContext(context.Context) ListenerHealthCheckPtrOutput
}

type listenerHealthCheckPtrType ListenerHealthCheckArgs

func ListenerHealthCheckPtr(v *ListenerHealthCheckArgs) ListenerHealthCheckPtrInput {
	return (*listenerHealthCheckPtrType)(v)
}

func (*listenerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckPtrOutput)
}

type ListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListenerHealthCheck) *ListenerHealthCheck {
		return &v
	}).(ListenerHealthCheckPtrOutput)
}

// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
func (o ListenerHealthCheckOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
func (o ListenerHealthCheckOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
func (o ListenerHealthCheckOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.HttpCode }).(pulumi.StringPtrOutput)
}

// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
func (o ListenerHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
func (o ListenerHealthCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// 健康检查的端口，取值范围为1-65535。
func (o ListenerHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
func (o ListenerHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.UdpExpect }).(pulumi.StringPtrOutput)
}

// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.UdpRequest }).(pulumi.StringPtrOutput)
}

// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
func (o ListenerHealthCheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ListenerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) Elem() ListenerHealthCheckOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) ListenerHealthCheck {
		if v != nil {
			return *v
		}
		var ret ListenerHealthCheck
		return ret
	}).(ListenerHealthCheckOutput)
}

// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
func (o ListenerHealthCheckPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
func (o ListenerHealthCheckPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
func (o ListenerHealthCheckPtrOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpCode
	}).(pulumi.StringPtrOutput)
}

// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
func (o ListenerHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
func (o ListenerHealthCheckPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// 健康检查的端口，取值范围为1-65535。
func (o ListenerHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
func (o ListenerHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckPtrOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpExpect
	}).(pulumi.StringPtrOutput)
}

// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o ListenerHealthCheckPtrOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpRequest
	}).(pulumi.StringPtrOutput)
}

// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o ListenerHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
func (o ListenerHealthCheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type ListenerTag struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value *string `pulumi:"value"`
}

// ListenerTagInput is an input type that accepts ListenerTagArgs and ListenerTagOutput values.
// You can construct a concrete instance of `ListenerTagInput` via:
//
//	ListenerTagArgs{...}
type ListenerTagInput interface {
	pulumi.Input

	ToListenerTagOutput() ListenerTagOutput
	ToListenerTagOutputWithContext(context.Context) ListenerTagOutput
}

type ListenerTagArgs struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (i ListenerTagArgs) ToListenerTagOutput() ListenerTagOutput {
	return i.ToListenerTagOutputWithContext(context.Background())
}

func (i ListenerTagArgs) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagOutput)
}

// ListenerTagArrayInput is an input type that accepts ListenerTagArray and ListenerTagArrayOutput values.
// You can construct a concrete instance of `ListenerTagArrayInput` via:
//
//	ListenerTagArray{ ListenerTagArgs{...} }
type ListenerTagArrayInput interface {
	pulumi.Input

	ToListenerTagArrayOutput() ListenerTagArrayOutput
	ToListenerTagArrayOutputWithContext(context.Context) ListenerTagArrayOutput
}

type ListenerTagArray []ListenerTagInput

func (ListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (i ListenerTagArray) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return i.ToListenerTagArrayOutputWithContext(context.Background())
}

func (i ListenerTagArray) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerTagArrayOutput)
}

type ListenerTagOutput struct{ *pulumi.OutputState }

func (ListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerTag)(nil)).Elem()
}

func (o ListenerTagOutput) ToListenerTagOutput() ListenerTagOutput {
	return o
}

func (o ListenerTagOutput) ToListenerTagOutputWithContext(ctx context.Context) ListenerTagOutput {
	return o
}

// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
func (o ListenerTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
func (o ListenerTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ListenerTagArrayOutput struct{ *pulumi.OutputState }

func (ListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenerTag)(nil)).Elem()
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutput() ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) ToListenerTagArrayOutputWithContext(ctx context.Context) ListenerTagArrayOutput {
	return o
}

func (o ListenerTagArrayOutput) Index(i pulumi.IntInput) ListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenerTag {
		return vs[0].([]ListenerTag)[vs[1].(int)]
	}).(ListenerTagOutput)
}

type NlbListenerHealth struct {
	// 后端服务器的实例 ID或IP地址。
	InstanceId *string `pulumi:"instanceId"`
	// 后端服务器的IP地址。
	Ip *string `pulumi:"ip"`
	// 后端服务器提供服务的端口。
	Port *int `pulumi:"port"`
	// 后端服务器ID。
	ServerId *string `pulumi:"serverId"`
	// 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
	ServerType *string `pulumi:"serverType"`
	// 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
	Status *string `pulumi:"status"`
	// 健康状态最后更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 后端服务器接收访问流量的可用区ID。
	ZoneId *string `pulumi:"zoneId"`
}

// NlbListenerHealthInput is an input type that accepts NlbListenerHealthArgs and NlbListenerHealthOutput values.
// You can construct a concrete instance of `NlbListenerHealthInput` via:
//
//	NlbListenerHealthArgs{...}
type NlbListenerHealthInput interface {
	pulumi.Input

	ToNlbListenerHealthOutput() NlbListenerHealthOutput
	ToNlbListenerHealthOutputWithContext(context.Context) NlbListenerHealthOutput
}

type NlbListenerHealthArgs struct {
	// 后端服务器的实例 ID或IP地址。
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// 后端服务器的IP地址。
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// 后端服务器提供服务的端口。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 后端服务器ID。
	ServerId pulumi.StringPtrInput `pulumi:"serverId"`
	// 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
	ServerType pulumi.StringPtrInput `pulumi:"serverType"`
	// 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
	Status pulumi.StringPtrInput `pulumi:"status"`
	// 健康状态最后更新时间。
	UpdatedTime pulumi.StringPtrInput `pulumi:"updatedTime"`
	// 后端服务器接收访问流量的可用区ID。
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (NlbListenerHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbListenerHealth)(nil)).Elem()
}

func (i NlbListenerHealthArgs) ToNlbListenerHealthOutput() NlbListenerHealthOutput {
	return i.ToNlbListenerHealthOutputWithContext(context.Background())
}

func (i NlbListenerHealthArgs) ToNlbListenerHealthOutputWithContext(ctx context.Context) NlbListenerHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerHealthOutput)
}

// NlbListenerHealthArrayInput is an input type that accepts NlbListenerHealthArray and NlbListenerHealthArrayOutput values.
// You can construct a concrete instance of `NlbListenerHealthArrayInput` via:
//
//	NlbListenerHealthArray{ NlbListenerHealthArgs{...} }
type NlbListenerHealthArrayInput interface {
	pulumi.Input

	ToNlbListenerHealthArrayOutput() NlbListenerHealthArrayOutput
	ToNlbListenerHealthArrayOutputWithContext(context.Context) NlbListenerHealthArrayOutput
}

type NlbListenerHealthArray []NlbListenerHealthInput

func (NlbListenerHealthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbListenerHealth)(nil)).Elem()
}

func (i NlbListenerHealthArray) ToNlbListenerHealthArrayOutput() NlbListenerHealthArrayOutput {
	return i.ToNlbListenerHealthArrayOutputWithContext(context.Background())
}

func (i NlbListenerHealthArray) ToNlbListenerHealthArrayOutputWithContext(ctx context.Context) NlbListenerHealthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerHealthArrayOutput)
}

type NlbListenerHealthOutput struct{ *pulumi.OutputState }

func (NlbListenerHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbListenerHealth)(nil)).Elem()
}

func (o NlbListenerHealthOutput) ToNlbListenerHealthOutput() NlbListenerHealthOutput {
	return o
}

func (o NlbListenerHealthOutput) ToNlbListenerHealthOutputWithContext(ctx context.Context) NlbListenerHealthOutput {
	return o
}

// 后端服务器的实例 ID或IP地址。
func (o NlbListenerHealthOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// 后端服务器的IP地址。
func (o NlbListenerHealthOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// 后端服务器提供服务的端口。
func (o NlbListenerHealthOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 后端服务器ID。
func (o NlbListenerHealthOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.ServerId }).(pulumi.StringPtrOutput)
}

// 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
func (o NlbListenerHealthOutput) ServerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.ServerType }).(pulumi.StringPtrOutput)
}

// 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
func (o NlbListenerHealthOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// 健康状态最后更新时间。
func (o NlbListenerHealthOutput) UpdatedTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.UpdatedTime }).(pulumi.StringPtrOutput)
}

// 后端服务器接收访问流量的可用区ID。
func (o NlbListenerHealthOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerHealth) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type NlbListenerHealthArrayOutput struct{ *pulumi.OutputState }

func (NlbListenerHealthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbListenerHealth)(nil)).Elem()
}

func (o NlbListenerHealthArrayOutput) ToNlbListenerHealthArrayOutput() NlbListenerHealthArrayOutput {
	return o
}

func (o NlbListenerHealthArrayOutput) ToNlbListenerHealthArrayOutputWithContext(ctx context.Context) NlbListenerHealthArrayOutput {
	return o
}

func (o NlbListenerHealthArrayOutput) Index(i pulumi.IntInput) NlbListenerHealthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlbListenerHealth {
		return vs[0].([]NlbListenerHealth)[vs[1].(int)]
	}).(NlbListenerHealthOutput)
}

type NlbListenerTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// NlbListenerTagInput is an input type that accepts NlbListenerTagArgs and NlbListenerTagOutput values.
// You can construct a concrete instance of `NlbListenerTagInput` via:
//
//	NlbListenerTagArgs{...}
type NlbListenerTagInput interface {
	pulumi.Input

	ToNlbListenerTagOutput() NlbListenerTagOutput
	ToNlbListenerTagOutputWithContext(context.Context) NlbListenerTagOutput
}

type NlbListenerTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NlbListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbListenerTag)(nil)).Elem()
}

func (i NlbListenerTagArgs) ToNlbListenerTagOutput() NlbListenerTagOutput {
	return i.ToNlbListenerTagOutputWithContext(context.Background())
}

func (i NlbListenerTagArgs) ToNlbListenerTagOutputWithContext(ctx context.Context) NlbListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerTagOutput)
}

// NlbListenerTagArrayInput is an input type that accepts NlbListenerTagArray and NlbListenerTagArrayOutput values.
// You can construct a concrete instance of `NlbListenerTagArrayInput` via:
//
//	NlbListenerTagArray{ NlbListenerTagArgs{...} }
type NlbListenerTagArrayInput interface {
	pulumi.Input

	ToNlbListenerTagArrayOutput() NlbListenerTagArrayOutput
	ToNlbListenerTagArrayOutputWithContext(context.Context) NlbListenerTagArrayOutput
}

type NlbListenerTagArray []NlbListenerTagInput

func (NlbListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbListenerTag)(nil)).Elem()
}

func (i NlbListenerTagArray) ToNlbListenerTagArrayOutput() NlbListenerTagArrayOutput {
	return i.ToNlbListenerTagArrayOutputWithContext(context.Background())
}

func (i NlbListenerTagArray) ToNlbListenerTagArrayOutputWithContext(ctx context.Context) NlbListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerTagArrayOutput)
}

type NlbListenerTagOutput struct{ *pulumi.OutputState }

func (NlbListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbListenerTag)(nil)).Elem()
}

func (o NlbListenerTagOutput) ToNlbListenerTagOutput() NlbListenerTagOutput {
	return o
}

func (o NlbListenerTagOutput) ToNlbListenerTagOutputWithContext(ctx context.Context) NlbListenerTagOutput {
	return o
}

// 标签键。
func (o NlbListenerTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o NlbListenerTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbListenerTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NlbListenerTagArrayOutput struct{ *pulumi.OutputState }

func (NlbListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbListenerTag)(nil)).Elem()
}

func (o NlbListenerTagArrayOutput) ToNlbListenerTagArrayOutput() NlbListenerTagArrayOutput {
	return o
}

func (o NlbListenerTagArrayOutput) ToNlbListenerTagArrayOutputWithContext(ctx context.Context) NlbListenerTagArrayOutput {
	return o
}

func (o NlbListenerTagArrayOutput) Index(i pulumi.IntInput) NlbListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlbListenerTag {
		return vs[0].([]NlbListenerTag)[vs[1].(int)]
	}).(NlbListenerTagOutput)
}

type NlbServerGroupHealthCheck struct {
	// 健康检查的域名
	Domain *string `pulumi:"domain"`
	// 是否开启健康检查
	Enabled *bool `pulumi:"enabled"`
	// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码
	HttpCode *string `pulumi:"httpCode"`
	// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
	Interval *int `pulumi:"interval"`
	// 健康检查的请求方法
	Method *string `pulumi:"method"`
	// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
	Port *int `pulumi:"port"`
	// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
	Timeout *int `pulumi:"timeout"`
	// 健康检查的协议类型
	Type *string `pulumi:"type"`
	// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
	UdpExpect *string `pulumi:"udpExpect"`
	// UDP健康检查的预期响应字符串
	UdpRequest *string `pulumi:"udpRequest"`
	// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
	UnhealthyThreshold *int `pulumi:"unhealthyThreshold"`
	// 健康检查的路径
	Uri *string `pulumi:"uri"`
}

// NlbServerGroupHealthCheckInput is an input type that accepts NlbServerGroupHealthCheckArgs and NlbServerGroupHealthCheckOutput values.
// You can construct a concrete instance of `NlbServerGroupHealthCheckInput` via:
//
//	NlbServerGroupHealthCheckArgs{...}
type NlbServerGroupHealthCheckInput interface {
	pulumi.Input

	ToNlbServerGroupHealthCheckOutput() NlbServerGroupHealthCheckOutput
	ToNlbServerGroupHealthCheckOutputWithContext(context.Context) NlbServerGroupHealthCheckOutput
}

type NlbServerGroupHealthCheckArgs struct {
	// 健康检查的域名
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// 是否开启健康检查
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码
	HttpCode pulumi.StringPtrInput `pulumi:"httpCode"`
	// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// 健康检查的请求方法
	Method pulumi.StringPtrInput `pulumi:"method"`
	// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// 健康检查的协议类型
	Type pulumi.StringPtrInput `pulumi:"type"`
	// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
	UdpExpect pulumi.StringPtrInput `pulumi:"udpExpect"`
	// UDP健康检查的预期响应字符串
	UdpRequest pulumi.StringPtrInput `pulumi:"udpRequest"`
	// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
	UnhealthyThreshold pulumi.IntPtrInput `pulumi:"unhealthyThreshold"`
	// 健康检查的路径
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (NlbServerGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbServerGroupHealthCheck)(nil)).Elem()
}

func (i NlbServerGroupHealthCheckArgs) ToNlbServerGroupHealthCheckOutput() NlbServerGroupHealthCheckOutput {
	return i.ToNlbServerGroupHealthCheckOutputWithContext(context.Background())
}

func (i NlbServerGroupHealthCheckArgs) ToNlbServerGroupHealthCheckOutputWithContext(ctx context.Context) NlbServerGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupHealthCheckOutput)
}

func (i NlbServerGroupHealthCheckArgs) ToNlbServerGroupHealthCheckPtrOutput() NlbServerGroupHealthCheckPtrOutput {
	return i.ToNlbServerGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (i NlbServerGroupHealthCheckArgs) ToNlbServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) NlbServerGroupHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupHealthCheckOutput).ToNlbServerGroupHealthCheckPtrOutputWithContext(ctx)
}

// NlbServerGroupHealthCheckPtrInput is an input type that accepts NlbServerGroupHealthCheckArgs, NlbServerGroupHealthCheckPtr and NlbServerGroupHealthCheckPtrOutput values.
// You can construct a concrete instance of `NlbServerGroupHealthCheckPtrInput` via:
//
//	        NlbServerGroupHealthCheckArgs{...}
//
//	or:
//
//	        nil
type NlbServerGroupHealthCheckPtrInput interface {
	pulumi.Input

	ToNlbServerGroupHealthCheckPtrOutput() NlbServerGroupHealthCheckPtrOutput
	ToNlbServerGroupHealthCheckPtrOutputWithContext(context.Context) NlbServerGroupHealthCheckPtrOutput
}

type nlbServerGroupHealthCheckPtrType NlbServerGroupHealthCheckArgs

func NlbServerGroupHealthCheckPtr(v *NlbServerGroupHealthCheckArgs) NlbServerGroupHealthCheckPtrInput {
	return (*nlbServerGroupHealthCheckPtrType)(v)
}

func (*nlbServerGroupHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NlbServerGroupHealthCheck)(nil)).Elem()
}

func (i *nlbServerGroupHealthCheckPtrType) ToNlbServerGroupHealthCheckPtrOutput() NlbServerGroupHealthCheckPtrOutput {
	return i.ToNlbServerGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (i *nlbServerGroupHealthCheckPtrType) ToNlbServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) NlbServerGroupHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupHealthCheckPtrOutput)
}

type NlbServerGroupHealthCheckOutput struct{ *pulumi.OutputState }

func (NlbServerGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbServerGroupHealthCheck)(nil)).Elem()
}

func (o NlbServerGroupHealthCheckOutput) ToNlbServerGroupHealthCheckOutput() NlbServerGroupHealthCheckOutput {
	return o
}

func (o NlbServerGroupHealthCheckOutput) ToNlbServerGroupHealthCheckOutputWithContext(ctx context.Context) NlbServerGroupHealthCheckOutput {
	return o
}

func (o NlbServerGroupHealthCheckOutput) ToNlbServerGroupHealthCheckPtrOutput() NlbServerGroupHealthCheckPtrOutput {
	return o.ToNlbServerGroupHealthCheckPtrOutputWithContext(context.Background())
}

func (o NlbServerGroupHealthCheckOutput) ToNlbServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) NlbServerGroupHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v NlbServerGroupHealthCheck) *NlbServerGroupHealthCheck {
		return &v
	}).(NlbServerGroupHealthCheckPtrOutput)
}

// 健康检查的域名
func (o NlbServerGroupHealthCheckOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// 是否开启健康检查
func (o NlbServerGroupHealthCheckOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
func (o NlbServerGroupHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// 健康检查正常的HTTP状态码
func (o NlbServerGroupHealthCheckOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.HttpCode }).(pulumi.StringPtrOutput)
}

// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
func (o NlbServerGroupHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// 健康检查的请求方法
func (o NlbServerGroupHealthCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
func (o NlbServerGroupHealthCheckOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
func (o NlbServerGroupHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// 健康检查的协议类型
func (o NlbServerGroupHealthCheckOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
func (o NlbServerGroupHealthCheckOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.UdpExpect }).(pulumi.StringPtrOutput)
}

// UDP健康检查的预期响应字符串
func (o NlbServerGroupHealthCheckOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.UdpRequest }).(pulumi.StringPtrOutput)
}

// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
func (o NlbServerGroupHealthCheckOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *int { return v.UnhealthyThreshold }).(pulumi.IntPtrOutput)
}

// 健康检查的路径
func (o NlbServerGroupHealthCheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupHealthCheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type NlbServerGroupHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (NlbServerGroupHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlbServerGroupHealthCheck)(nil)).Elem()
}

func (o NlbServerGroupHealthCheckPtrOutput) ToNlbServerGroupHealthCheckPtrOutput() NlbServerGroupHealthCheckPtrOutput {
	return o
}

func (o NlbServerGroupHealthCheckPtrOutput) ToNlbServerGroupHealthCheckPtrOutputWithContext(ctx context.Context) NlbServerGroupHealthCheckPtrOutput {
	return o
}

func (o NlbServerGroupHealthCheckPtrOutput) Elem() NlbServerGroupHealthCheckOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) NlbServerGroupHealthCheck {
		if v != nil {
			return *v
		}
		var ret NlbServerGroupHealthCheck
		return ret
	}).(NlbServerGroupHealthCheckOutput)
}

// 健康检查的域名
func (o NlbServerGroupHealthCheckPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// 是否开启健康检查
func (o NlbServerGroupHealthCheckPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
func (o NlbServerGroupHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// 健康检查正常的HTTP状态码
func (o NlbServerGroupHealthCheckPtrOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpCode
	}).(pulumi.StringPtrOutput)
}

// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
func (o NlbServerGroupHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// 健康检查的请求方法
func (o NlbServerGroupHealthCheckPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
func (o NlbServerGroupHealthCheckPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
func (o NlbServerGroupHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// 健康检查的协议类型
func (o NlbServerGroupHealthCheckPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
func (o NlbServerGroupHealthCheckPtrOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpExpect
	}).(pulumi.StringPtrOutput)
}

// UDP健康检查的预期响应字符串
func (o NlbServerGroupHealthCheckPtrOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpRequest
	}).(pulumi.StringPtrOutput)
}

// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
func (o NlbServerGroupHealthCheckPtrOutput) UnhealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnhealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// 健康检查的路径
func (o NlbServerGroupHealthCheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NlbServerGroupHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type NlbServerGroupServer struct {
	// 后端服务器的描述，默认值为空字符串
	Description *string `pulumi:"description"`
	// 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
	InstanceId *string `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
	Ip *string `pulumi:"ip"`
	// 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
	Port *int `pulumi:"port"`
	// 后端服务器 ID
	ServerId *string `pulumi:"serverId"`
	// 后端服务器的类型
	Type *string `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
	Weight *int `pulumi:"weight"`
	// 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
	ZoneId *string `pulumi:"zoneId"`
}

// NlbServerGroupServerInput is an input type that accepts NlbServerGroupServerArgs and NlbServerGroupServerOutput values.
// You can construct a concrete instance of `NlbServerGroupServerInput` via:
//
//	NlbServerGroupServerArgs{...}
type NlbServerGroupServerInput interface {
	pulumi.Input

	ToNlbServerGroupServerOutput() NlbServerGroupServerOutput
	ToNlbServerGroupServerOutputWithContext(context.Context) NlbServerGroupServerOutput
}

type NlbServerGroupServerArgs struct {
	// 后端服务器的描述，默认值为空字符串
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 后端服务器 ID
	ServerId pulumi.StringPtrInput `pulumi:"serverId"`
	// 后端服务器的类型
	Type pulumi.StringPtrInput `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
	Weight pulumi.IntPtrInput `pulumi:"weight"`
	// 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (NlbServerGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbServerGroupServer)(nil)).Elem()
}

func (i NlbServerGroupServerArgs) ToNlbServerGroupServerOutput() NlbServerGroupServerOutput {
	return i.ToNlbServerGroupServerOutputWithContext(context.Background())
}

func (i NlbServerGroupServerArgs) ToNlbServerGroupServerOutputWithContext(ctx context.Context) NlbServerGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupServerOutput)
}

// NlbServerGroupServerArrayInput is an input type that accepts NlbServerGroupServerArray and NlbServerGroupServerArrayOutput values.
// You can construct a concrete instance of `NlbServerGroupServerArrayInput` via:
//
//	NlbServerGroupServerArray{ NlbServerGroupServerArgs{...} }
type NlbServerGroupServerArrayInput interface {
	pulumi.Input

	ToNlbServerGroupServerArrayOutput() NlbServerGroupServerArrayOutput
	ToNlbServerGroupServerArrayOutputWithContext(context.Context) NlbServerGroupServerArrayOutput
}

type NlbServerGroupServerArray []NlbServerGroupServerInput

func (NlbServerGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbServerGroupServer)(nil)).Elem()
}

func (i NlbServerGroupServerArray) ToNlbServerGroupServerArrayOutput() NlbServerGroupServerArrayOutput {
	return i.ToNlbServerGroupServerArrayOutputWithContext(context.Background())
}

func (i NlbServerGroupServerArray) ToNlbServerGroupServerArrayOutputWithContext(ctx context.Context) NlbServerGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupServerArrayOutput)
}

type NlbServerGroupServerOutput struct{ *pulumi.OutputState }

func (NlbServerGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbServerGroupServer)(nil)).Elem()
}

func (o NlbServerGroupServerOutput) ToNlbServerGroupServerOutput() NlbServerGroupServerOutput {
	return o
}

func (o NlbServerGroupServerOutput) ToNlbServerGroupServerOutputWithContext(ctx context.Context) NlbServerGroupServerOutput {
	return o
}

// 后端服务器的描述，默认值为空字符串
func (o NlbServerGroupServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
func (o NlbServerGroupServerOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
func (o NlbServerGroupServerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
func (o NlbServerGroupServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 后端服务器 ID
func (o NlbServerGroupServerOutput) ServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *string { return v.ServerId }).(pulumi.StringPtrOutput)
}

// 后端服务器的类型
func (o NlbServerGroupServerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
func (o NlbServerGroupServerOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

// 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
func (o NlbServerGroupServerOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupServer) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type NlbServerGroupServerArrayOutput struct{ *pulumi.OutputState }

func (NlbServerGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbServerGroupServer)(nil)).Elem()
}

func (o NlbServerGroupServerArrayOutput) ToNlbServerGroupServerArrayOutput() NlbServerGroupServerArrayOutput {
	return o
}

func (o NlbServerGroupServerArrayOutput) ToNlbServerGroupServerArrayOutputWithContext(ctx context.Context) NlbServerGroupServerArrayOutput {
	return o
}

func (o NlbServerGroupServerArrayOutput) Index(i pulumi.IntInput) NlbServerGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlbServerGroupServer {
		return vs[0].([]NlbServerGroupServer)[vs[1].(int)]
	}).(NlbServerGroupServerOutput)
}

type NlbServerGroupTag struct {
	// 标签键
	Key *string `pulumi:"key"`
	// 标签值
	Value *string `pulumi:"value"`
}

// NlbServerGroupTagInput is an input type that accepts NlbServerGroupTagArgs and NlbServerGroupTagOutput values.
// You can construct a concrete instance of `NlbServerGroupTagInput` via:
//
//	NlbServerGroupTagArgs{...}
type NlbServerGroupTagInput interface {
	pulumi.Input

	ToNlbServerGroupTagOutput() NlbServerGroupTagOutput
	ToNlbServerGroupTagOutputWithContext(context.Context) NlbServerGroupTagOutput
}

type NlbServerGroupTagArgs struct {
	// 标签键
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NlbServerGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbServerGroupTag)(nil)).Elem()
}

func (i NlbServerGroupTagArgs) ToNlbServerGroupTagOutput() NlbServerGroupTagOutput {
	return i.ToNlbServerGroupTagOutputWithContext(context.Background())
}

func (i NlbServerGroupTagArgs) ToNlbServerGroupTagOutputWithContext(ctx context.Context) NlbServerGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupTagOutput)
}

// NlbServerGroupTagArrayInput is an input type that accepts NlbServerGroupTagArray and NlbServerGroupTagArrayOutput values.
// You can construct a concrete instance of `NlbServerGroupTagArrayInput` via:
//
//	NlbServerGroupTagArray{ NlbServerGroupTagArgs{...} }
type NlbServerGroupTagArrayInput interface {
	pulumi.Input

	ToNlbServerGroupTagArrayOutput() NlbServerGroupTagArrayOutput
	ToNlbServerGroupTagArrayOutputWithContext(context.Context) NlbServerGroupTagArrayOutput
}

type NlbServerGroupTagArray []NlbServerGroupTagInput

func (NlbServerGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbServerGroupTag)(nil)).Elem()
}

func (i NlbServerGroupTagArray) ToNlbServerGroupTagArrayOutput() NlbServerGroupTagArrayOutput {
	return i.ToNlbServerGroupTagArrayOutputWithContext(context.Background())
}

func (i NlbServerGroupTagArray) ToNlbServerGroupTagArrayOutputWithContext(ctx context.Context) NlbServerGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbServerGroupTagArrayOutput)
}

type NlbServerGroupTagOutput struct{ *pulumi.OutputState }

func (NlbServerGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbServerGroupTag)(nil)).Elem()
}

func (o NlbServerGroupTagOutput) ToNlbServerGroupTagOutput() NlbServerGroupTagOutput {
	return o
}

func (o NlbServerGroupTagOutput) ToNlbServerGroupTagOutputWithContext(ctx context.Context) NlbServerGroupTagOutput {
	return o
}

// 标签键
func (o NlbServerGroupTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值
func (o NlbServerGroupTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbServerGroupTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NlbServerGroupTagArrayOutput struct{ *pulumi.OutputState }

func (NlbServerGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbServerGroupTag)(nil)).Elem()
}

func (o NlbServerGroupTagArrayOutput) ToNlbServerGroupTagArrayOutput() NlbServerGroupTagArrayOutput {
	return o
}

func (o NlbServerGroupTagArrayOutput) ToNlbServerGroupTagArrayOutputWithContext(ctx context.Context) NlbServerGroupTagArrayOutput {
	return o
}

func (o NlbServerGroupTagArrayOutput) Index(i pulumi.IntInput) NlbServerGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlbServerGroupTag {
		return vs[0].([]NlbServerGroupTag)[vs[1].(int)]
	}).(NlbServerGroupTagOutput)
}

type NlbTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// NlbTagInput is an input type that accepts NlbTagArgs and NlbTagOutput values.
// You can construct a concrete instance of `NlbTagInput` via:
//
//	NlbTagArgs{...}
type NlbTagInput interface {
	pulumi.Input

	ToNlbTagOutput() NlbTagOutput
	ToNlbTagOutputWithContext(context.Context) NlbTagOutput
}

type NlbTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NlbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbTag)(nil)).Elem()
}

func (i NlbTagArgs) ToNlbTagOutput() NlbTagOutput {
	return i.ToNlbTagOutputWithContext(context.Background())
}

func (i NlbTagArgs) ToNlbTagOutputWithContext(ctx context.Context) NlbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbTagOutput)
}

// NlbTagArrayInput is an input type that accepts NlbTagArray and NlbTagArrayOutput values.
// You can construct a concrete instance of `NlbTagArrayInput` via:
//
//	NlbTagArray{ NlbTagArgs{...} }
type NlbTagArrayInput interface {
	pulumi.Input

	ToNlbTagArrayOutput() NlbTagArrayOutput
	ToNlbTagArrayOutputWithContext(context.Context) NlbTagArrayOutput
}

type NlbTagArray []NlbTagInput

func (NlbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbTag)(nil)).Elem()
}

func (i NlbTagArray) ToNlbTagArrayOutput() NlbTagArrayOutput {
	return i.ToNlbTagArrayOutputWithContext(context.Background())
}

func (i NlbTagArray) ToNlbTagArrayOutputWithContext(ctx context.Context) NlbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbTagArrayOutput)
}

type NlbTagOutput struct{ *pulumi.OutputState }

func (NlbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbTag)(nil)).Elem()
}

func (o NlbTagOutput) ToNlbTagOutput() NlbTagOutput {
	return o
}

func (o NlbTagOutput) ToNlbTagOutputWithContext(ctx context.Context) NlbTagOutput {
	return o
}

// 标签键。
func (o NlbTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o NlbTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NlbTagArrayOutput struct{ *pulumi.OutputState }

func (NlbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbTag)(nil)).Elem()
}

func (o NlbTagArrayOutput) ToNlbTagArrayOutput() NlbTagArrayOutput {
	return o
}

func (o NlbTagArrayOutput) ToNlbTagArrayOutputWithContext(ctx context.Context) NlbTagArrayOutput {
	return o
}

func (o NlbTagArrayOutput) Index(i pulumi.IntInput) NlbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlbTag {
		return vs[0].([]NlbTag)[vs[1].(int)]
	}).(NlbTagOutput)
}

type NlbZoneMapping struct {
	// 网卡ID。
	EniId *string `pulumi:"eniId"`
	// NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
	Ipv4Address *string `pulumi:"ipv4Address"`
	// NLB实例的公网IPv4 EIP地址。
	Ipv4EipAddress *string `pulumi:"ipv4EipAddress"`
	// NLB实例的公网IPv4 EIP ID。
	Ipv4EipId *string `pulumi:"ipv4EipId"`
	// NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv4HcStatus *string `pulumi:"ipv4HcStatus"`
	// NLB实例的私网IPv4 LIP地址。
	Ipv4LocalAddresses []string `pulumi:"ipv4LocalAddresses"`
	// NLB实例的私网IPv6 VIP地址。
	Ipv6Address *string `pulumi:"ipv6Address"`
	// NLB实例关联的IPv6公网带宽的ID。
	Ipv6EipId *string `pulumi:"ipv6EipId"`
	// NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv6HcStatus *string `pulumi:"ipv6HcStatus"`
	// NLB实例的私网IPv6 LIP地址。
	Ipv6LocalAddresses []string `pulumi:"ipv6LocalAddresses"`
	// NLB实例所属的子网ID。
	SubnetId *string `pulumi:"subnetId"`
	// NLB实例所属的可用区ID。
	ZoneId *string `pulumi:"zoneId"`
}

// NlbZoneMappingInput is an input type that accepts NlbZoneMappingArgs and NlbZoneMappingOutput values.
// You can construct a concrete instance of `NlbZoneMappingInput` via:
//
//	NlbZoneMappingArgs{...}
type NlbZoneMappingInput interface {
	pulumi.Input

	ToNlbZoneMappingOutput() NlbZoneMappingOutput
	ToNlbZoneMappingOutputWithContext(context.Context) NlbZoneMappingOutput
}

type NlbZoneMappingArgs struct {
	// 网卡ID。
	EniId pulumi.StringPtrInput `pulumi:"eniId"`
	// NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
	Ipv4Address pulumi.StringPtrInput `pulumi:"ipv4Address"`
	// NLB实例的公网IPv4 EIP地址。
	Ipv4EipAddress pulumi.StringPtrInput `pulumi:"ipv4EipAddress"`
	// NLB实例的公网IPv4 EIP ID。
	Ipv4EipId pulumi.StringPtrInput `pulumi:"ipv4EipId"`
	// NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv4HcStatus pulumi.StringPtrInput `pulumi:"ipv4HcStatus"`
	// NLB实例的私网IPv4 LIP地址。
	Ipv4LocalAddresses pulumi.StringArrayInput `pulumi:"ipv4LocalAddresses"`
	// NLB实例的私网IPv6 VIP地址。
	Ipv6Address pulumi.StringPtrInput `pulumi:"ipv6Address"`
	// NLB实例关联的IPv6公网带宽的ID。
	Ipv6EipId pulumi.StringPtrInput `pulumi:"ipv6EipId"`
	// NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv6HcStatus pulumi.StringPtrInput `pulumi:"ipv6HcStatus"`
	// NLB实例的私网IPv6 LIP地址。
	Ipv6LocalAddresses pulumi.StringArrayInput `pulumi:"ipv6LocalAddresses"`
	// NLB实例所属的子网ID。
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// NLB实例所属的可用区ID。
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (NlbZoneMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbZoneMapping)(nil)).Elem()
}

func (i NlbZoneMappingArgs) ToNlbZoneMappingOutput() NlbZoneMappingOutput {
	return i.ToNlbZoneMappingOutputWithContext(context.Background())
}

func (i NlbZoneMappingArgs) ToNlbZoneMappingOutputWithContext(ctx context.Context) NlbZoneMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbZoneMappingOutput)
}

// NlbZoneMappingArrayInput is an input type that accepts NlbZoneMappingArray and NlbZoneMappingArrayOutput values.
// You can construct a concrete instance of `NlbZoneMappingArrayInput` via:
//
//	NlbZoneMappingArray{ NlbZoneMappingArgs{...} }
type NlbZoneMappingArrayInput interface {
	pulumi.Input

	ToNlbZoneMappingArrayOutput() NlbZoneMappingArrayOutput
	ToNlbZoneMappingArrayOutputWithContext(context.Context) NlbZoneMappingArrayOutput
}

type NlbZoneMappingArray []NlbZoneMappingInput

func (NlbZoneMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbZoneMapping)(nil)).Elem()
}

func (i NlbZoneMappingArray) ToNlbZoneMappingArrayOutput() NlbZoneMappingArrayOutput {
	return i.ToNlbZoneMappingArrayOutputWithContext(context.Background())
}

func (i NlbZoneMappingArray) ToNlbZoneMappingArrayOutputWithContext(ctx context.Context) NlbZoneMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbZoneMappingArrayOutput)
}

type NlbZoneMappingOutput struct{ *pulumi.OutputState }

func (NlbZoneMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NlbZoneMapping)(nil)).Elem()
}

func (o NlbZoneMappingOutput) ToNlbZoneMappingOutput() NlbZoneMappingOutput {
	return o
}

func (o NlbZoneMappingOutput) ToNlbZoneMappingOutputWithContext(ctx context.Context) NlbZoneMappingOutput {
	return o
}

// 网卡ID。
func (o NlbZoneMappingOutput) EniId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.EniId }).(pulumi.StringPtrOutput)
}

// NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
func (o NlbZoneMappingOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

// NLB实例的公网IPv4 EIP地址。
func (o NlbZoneMappingOutput) Ipv4EipAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv4EipAddress }).(pulumi.StringPtrOutput)
}

// NLB实例的公网IPv4 EIP ID。
func (o NlbZoneMappingOutput) Ipv4EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv4EipId }).(pulumi.StringPtrOutput)
}

// NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
func (o NlbZoneMappingOutput) Ipv4HcStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv4HcStatus }).(pulumi.StringPtrOutput)
}

// NLB实例的私网IPv4 LIP地址。
func (o NlbZoneMappingOutput) Ipv4LocalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NlbZoneMapping) []string { return v.Ipv4LocalAddresses }).(pulumi.StringArrayOutput)
}

// NLB实例的私网IPv6 VIP地址。
func (o NlbZoneMappingOutput) Ipv6Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv6Address }).(pulumi.StringPtrOutput)
}

// NLB实例关联的IPv6公网带宽的ID。
func (o NlbZoneMappingOutput) Ipv6EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv6EipId }).(pulumi.StringPtrOutput)
}

// NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
func (o NlbZoneMappingOutput) Ipv6HcStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.Ipv6HcStatus }).(pulumi.StringPtrOutput)
}

// NLB实例的私网IPv6 LIP地址。
func (o NlbZoneMappingOutput) Ipv6LocalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NlbZoneMapping) []string { return v.Ipv6LocalAddresses }).(pulumi.StringArrayOutput)
}

// NLB实例所属的子网ID。
func (o NlbZoneMappingOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// NLB实例所属的可用区ID。
func (o NlbZoneMappingOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NlbZoneMapping) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type NlbZoneMappingArrayOutput struct{ *pulumi.OutputState }

func (NlbZoneMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NlbZoneMapping)(nil)).Elem()
}

func (o NlbZoneMappingArrayOutput) ToNlbZoneMappingArrayOutput() NlbZoneMappingArrayOutput {
	return o
}

func (o NlbZoneMappingArrayOutput) ToNlbZoneMappingArrayOutputWithContext(ctx context.Context) NlbZoneMappingArrayOutput {
	return o
}

func (o NlbZoneMappingArrayOutput) Index(i pulumi.IntInput) NlbZoneMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NlbZoneMapping {
		return vs[0].([]NlbZoneMapping)[vs[1].(int)]
	}).(NlbZoneMappingOutput)
}

type RuleRedirectConfig struct {
	// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
	Host *string `pulumi:"host"`
	// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
	Path *string `pulumi:"path"`
	// 转发规则重定向的端口，取值范围为 1~65535。
	Port *string `pulumi:"port"`
	// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
	Protocol *string `pulumi:"protocol"`
	// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
	StatusCode *string `pulumi:"statusCode"`
}

// RuleRedirectConfigInput is an input type that accepts RuleRedirectConfigArgs and RuleRedirectConfigOutput values.
// You can construct a concrete instance of `RuleRedirectConfigInput` via:
//
//	RuleRedirectConfigArgs{...}
type RuleRedirectConfigInput interface {
	pulumi.Input

	ToRuleRedirectConfigOutput() RuleRedirectConfigOutput
	ToRuleRedirectConfigOutputWithContext(context.Context) RuleRedirectConfigOutput
}

type RuleRedirectConfigArgs struct {
	// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
	Host pulumi.StringPtrInput `pulumi:"host"`
	// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
	Path pulumi.StringPtrInput `pulumi:"path"`
	// 转发规则重定向的端口，取值范围为 1~65535。
	Port pulumi.StringPtrInput `pulumi:"port"`
	// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
	StatusCode pulumi.StringPtrInput `pulumi:"statusCode"`
}

func (RuleRedirectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRedirectConfig)(nil)).Elem()
}

func (i RuleRedirectConfigArgs) ToRuleRedirectConfigOutput() RuleRedirectConfigOutput {
	return i.ToRuleRedirectConfigOutputWithContext(context.Background())
}

func (i RuleRedirectConfigArgs) ToRuleRedirectConfigOutputWithContext(ctx context.Context) RuleRedirectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRedirectConfigOutput)
}

func (i RuleRedirectConfigArgs) ToRuleRedirectConfigPtrOutput() RuleRedirectConfigPtrOutput {
	return i.ToRuleRedirectConfigPtrOutputWithContext(context.Background())
}

func (i RuleRedirectConfigArgs) ToRuleRedirectConfigPtrOutputWithContext(ctx context.Context) RuleRedirectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRedirectConfigOutput).ToRuleRedirectConfigPtrOutputWithContext(ctx)
}

// RuleRedirectConfigPtrInput is an input type that accepts RuleRedirectConfigArgs, RuleRedirectConfigPtr and RuleRedirectConfigPtrOutput values.
// You can construct a concrete instance of `RuleRedirectConfigPtrInput` via:
//
//	        RuleRedirectConfigArgs{...}
//
//	or:
//
//	        nil
type RuleRedirectConfigPtrInput interface {
	pulumi.Input

	ToRuleRedirectConfigPtrOutput() RuleRedirectConfigPtrOutput
	ToRuleRedirectConfigPtrOutputWithContext(context.Context) RuleRedirectConfigPtrOutput
}

type ruleRedirectConfigPtrType RuleRedirectConfigArgs

func RuleRedirectConfigPtr(v *RuleRedirectConfigArgs) RuleRedirectConfigPtrInput {
	return (*ruleRedirectConfigPtrType)(v)
}

func (*ruleRedirectConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRedirectConfig)(nil)).Elem()
}

func (i *ruleRedirectConfigPtrType) ToRuleRedirectConfigPtrOutput() RuleRedirectConfigPtrOutput {
	return i.ToRuleRedirectConfigPtrOutputWithContext(context.Background())
}

func (i *ruleRedirectConfigPtrType) ToRuleRedirectConfigPtrOutputWithContext(ctx context.Context) RuleRedirectConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleRedirectConfigPtrOutput)
}

type RuleRedirectConfigOutput struct{ *pulumi.OutputState }

func (RuleRedirectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleRedirectConfig)(nil)).Elem()
}

func (o RuleRedirectConfigOutput) ToRuleRedirectConfigOutput() RuleRedirectConfigOutput {
	return o
}

func (o RuleRedirectConfigOutput) ToRuleRedirectConfigOutputWithContext(ctx context.Context) RuleRedirectConfigOutput {
	return o
}

func (o RuleRedirectConfigOutput) ToRuleRedirectConfigPtrOutput() RuleRedirectConfigPtrOutput {
	return o.ToRuleRedirectConfigPtrOutputWithContext(context.Background())
}

func (o RuleRedirectConfigOutput) ToRuleRedirectConfigPtrOutputWithContext(ctx context.Context) RuleRedirectConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleRedirectConfig) *RuleRedirectConfig {
		return &v
	}).(RuleRedirectConfigPtrOutput)
}

// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
func (o RuleRedirectConfigOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedirectConfig) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
func (o RuleRedirectConfigOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedirectConfig) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// 转发规则重定向的端口，取值范围为 1~65535。
func (o RuleRedirectConfigOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedirectConfig) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
func (o RuleRedirectConfigOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedirectConfig) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
func (o RuleRedirectConfigOutput) StatusCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleRedirectConfig) *string { return v.StatusCode }).(pulumi.StringPtrOutput)
}

type RuleRedirectConfigPtrOutput struct{ *pulumi.OutputState }

func (RuleRedirectConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleRedirectConfig)(nil)).Elem()
}

func (o RuleRedirectConfigPtrOutput) ToRuleRedirectConfigPtrOutput() RuleRedirectConfigPtrOutput {
	return o
}

func (o RuleRedirectConfigPtrOutput) ToRuleRedirectConfigPtrOutputWithContext(ctx context.Context) RuleRedirectConfigPtrOutput {
	return o
}

func (o RuleRedirectConfigPtrOutput) Elem() RuleRedirectConfigOutput {
	return o.ApplyT(func(v *RuleRedirectConfig) RuleRedirectConfig {
		if v != nil {
			return *v
		}
		var ret RuleRedirectConfig
		return ret
	}).(RuleRedirectConfigOutput)
}

// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
func (o RuleRedirectConfigPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedirectConfig) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
func (o RuleRedirectConfigPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedirectConfig) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// 转发规则重定向的端口，取值范围为 1~65535。
func (o RuleRedirectConfigPtrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedirectConfig) *string {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.StringPtrOutput)
}

// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
func (o RuleRedirectConfigPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedirectConfig) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
func (o RuleRedirectConfigPtrOutput) StatusCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleRedirectConfig) *string {
		if v == nil {
			return nil
		}
		return v.StatusCode
	}).(pulumi.StringPtrOutput)
}

type RuleTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// RuleTagInput is an input type that accepts RuleTagArgs and RuleTagOutput values.
// You can construct a concrete instance of `RuleTagInput` via:
//
//	RuleTagArgs{...}
type RuleTagInput interface {
	pulumi.Input

	ToRuleTagOutput() RuleTagOutput
	ToRuleTagOutputWithContext(context.Context) RuleTagOutput
}

type RuleTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTag)(nil)).Elem()
}

func (i RuleTagArgs) ToRuleTagOutput() RuleTagOutput {
	return i.ToRuleTagOutputWithContext(context.Background())
}

func (i RuleTagArgs) ToRuleTagOutputWithContext(ctx context.Context) RuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTagOutput)
}

// RuleTagArrayInput is an input type that accepts RuleTagArray and RuleTagArrayOutput values.
// You can construct a concrete instance of `RuleTagArrayInput` via:
//
//	RuleTagArray{ RuleTagArgs{...} }
type RuleTagArrayInput interface {
	pulumi.Input

	ToRuleTagArrayOutput() RuleTagArrayOutput
	ToRuleTagArrayOutputWithContext(context.Context) RuleTagArrayOutput
}

type RuleTagArray []RuleTagInput

func (RuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTag)(nil)).Elem()
}

func (i RuleTagArray) ToRuleTagArrayOutput() RuleTagArrayOutput {
	return i.ToRuleTagArrayOutputWithContext(context.Background())
}

func (i RuleTagArray) ToRuleTagArrayOutputWithContext(ctx context.Context) RuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleTagArrayOutput)
}

type RuleTagOutput struct{ *pulumi.OutputState }

func (RuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleTag)(nil)).Elem()
}

func (o RuleTagOutput) ToRuleTagOutput() RuleTagOutput {
	return o
}

func (o RuleTagOutput) ToRuleTagOutputWithContext(ctx context.Context) RuleTagOutput {
	return o
}

// 标签键。
func (o RuleTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o RuleTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RuleTagArrayOutput struct{ *pulumi.OutputState }

func (RuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleTag)(nil)).Elem()
}

func (o RuleTagArrayOutput) ToRuleTagArrayOutput() RuleTagArrayOutput {
	return o
}

func (o RuleTagArrayOutput) ToRuleTagArrayOutputWithContext(ctx context.Context) RuleTagArrayOutput {
	return o
}

func (o RuleTagArrayOutput) Index(i pulumi.IntInput) RuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleTag {
		return vs[0].([]RuleTag)[vs[1].(int)]
	}).(RuleTagOutput)
}

type ServerGroupListener struct {
	// 监听器的ID。
	ListenerId *string `pulumi:"listenerId"`
}

// ServerGroupListenerInput is an input type that accepts ServerGroupListenerArgs and ServerGroupListenerOutput values.
// You can construct a concrete instance of `ServerGroupListenerInput` via:
//
//	ServerGroupListenerArgs{...}
type ServerGroupListenerInput interface {
	pulumi.Input

	ToServerGroupListenerOutput() ServerGroupListenerOutput
	ToServerGroupListenerOutputWithContext(context.Context) ServerGroupListenerOutput
}

type ServerGroupListenerArgs struct {
	// 监听器的ID。
	ListenerId pulumi.StringPtrInput `pulumi:"listenerId"`
}

func (ServerGroupListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupListener)(nil)).Elem()
}

func (i ServerGroupListenerArgs) ToServerGroupListenerOutput() ServerGroupListenerOutput {
	return i.ToServerGroupListenerOutputWithContext(context.Background())
}

func (i ServerGroupListenerArgs) ToServerGroupListenerOutputWithContext(ctx context.Context) ServerGroupListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupListenerOutput)
}

// ServerGroupListenerArrayInput is an input type that accepts ServerGroupListenerArray and ServerGroupListenerArrayOutput values.
// You can construct a concrete instance of `ServerGroupListenerArrayInput` via:
//
//	ServerGroupListenerArray{ ServerGroupListenerArgs{...} }
type ServerGroupListenerArrayInput interface {
	pulumi.Input

	ToServerGroupListenerArrayOutput() ServerGroupListenerArrayOutput
	ToServerGroupListenerArrayOutputWithContext(context.Context) ServerGroupListenerArrayOutput
}

type ServerGroupListenerArray []ServerGroupListenerInput

func (ServerGroupListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupListener)(nil)).Elem()
}

func (i ServerGroupListenerArray) ToServerGroupListenerArrayOutput() ServerGroupListenerArrayOutput {
	return i.ToServerGroupListenerArrayOutputWithContext(context.Background())
}

func (i ServerGroupListenerArray) ToServerGroupListenerArrayOutputWithContext(ctx context.Context) ServerGroupListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupListenerArrayOutput)
}

type ServerGroupListenerOutput struct{ *pulumi.OutputState }

func (ServerGroupListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupListener)(nil)).Elem()
}

func (o ServerGroupListenerOutput) ToServerGroupListenerOutput() ServerGroupListenerOutput {
	return o
}

func (o ServerGroupListenerOutput) ToServerGroupListenerOutputWithContext(ctx context.Context) ServerGroupListenerOutput {
	return o
}

// 监听器的ID。
func (o ServerGroupListenerOutput) ListenerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupListener) *string { return v.ListenerId }).(pulumi.StringPtrOutput)
}

type ServerGroupListenerArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupListener)(nil)).Elem()
}

func (o ServerGroupListenerArrayOutput) ToServerGroupListenerArrayOutput() ServerGroupListenerArrayOutput {
	return o
}

func (o ServerGroupListenerArrayOutput) ToServerGroupListenerArrayOutputWithContext(ctx context.Context) ServerGroupListenerArrayOutput {
	return o
}

func (o ServerGroupListenerArrayOutput) Index(i pulumi.IntInput) ServerGroupListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupListener {
		return vs[0].([]ServerGroupListener)[vs[1].(int)]
	}).(ServerGroupListenerOutput)
}

type ServerGroupServer struct {
	// 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
	Description *string `pulumi:"description"`
	// 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
	InstanceId *string `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
	Ip *string `pulumi:"ip"`
	// 后端服务器接收请求的端口号。取值范围为1～65535。
	Port *int `pulumi:"port"`
	// 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
	Type *string `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
	Weight *int `pulumi:"weight"`
}

// ServerGroupServerInput is an input type that accepts ServerGroupServerArgs and ServerGroupServerOutput values.
// You can construct a concrete instance of `ServerGroupServerInput` via:
//
//	ServerGroupServerArgs{...}
type ServerGroupServerInput interface {
	pulumi.Input

	ToServerGroupServerOutput() ServerGroupServerOutput
	ToServerGroupServerOutputWithContext(context.Context) ServerGroupServerOutput
}

type ServerGroupServerArgs struct {
	// 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// 后端服务器接收请求的端口号。取值范围为1～65535。
	Port pulumi.IntPtrInput `pulumi:"port"`
	// 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
	Type pulumi.StringPtrInput `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (ServerGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServer)(nil)).Elem()
}

func (i ServerGroupServerArgs) ToServerGroupServerOutput() ServerGroupServerOutput {
	return i.ToServerGroupServerOutputWithContext(context.Background())
}

func (i ServerGroupServerArgs) ToServerGroupServerOutputWithContext(ctx context.Context) ServerGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServerOutput)
}

// ServerGroupServerArrayInput is an input type that accepts ServerGroupServerArray and ServerGroupServerArrayOutput values.
// You can construct a concrete instance of `ServerGroupServerArrayInput` via:
//
//	ServerGroupServerArray{ ServerGroupServerArgs{...} }
type ServerGroupServerArrayInput interface {
	pulumi.Input

	ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput
	ToServerGroupServerArrayOutputWithContext(context.Context) ServerGroupServerArrayOutput
}

type ServerGroupServerArray []ServerGroupServerInput

func (ServerGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServer)(nil)).Elem()
}

func (i ServerGroupServerArray) ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput {
	return i.ToServerGroupServerArrayOutputWithContext(context.Background())
}

func (i ServerGroupServerArray) ToServerGroupServerArrayOutputWithContext(ctx context.Context) ServerGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServerArrayOutput)
}

type ServerGroupServerOutput struct{ *pulumi.OutputState }

func (ServerGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServer)(nil)).Elem()
}

func (o ServerGroupServerOutput) ToServerGroupServerOutput() ServerGroupServerOutput {
	return o
}

func (o ServerGroupServerOutput) ToServerGroupServerOutputWithContext(ctx context.Context) ServerGroupServerOutput {
	return o
}

// 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
func (o ServerGroupServerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
func (o ServerGroupServerOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
func (o ServerGroupServerOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

// 后端服务器接收请求的端口号。取值范围为1～65535。
func (o ServerGroupServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
func (o ServerGroupServerOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
func (o ServerGroupServerOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ServerGroupServer) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type ServerGroupServerArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServer)(nil)).Elem()
}

func (o ServerGroupServerArrayOutput) ToServerGroupServerArrayOutput() ServerGroupServerArrayOutput {
	return o
}

func (o ServerGroupServerArrayOutput) ToServerGroupServerArrayOutputWithContext(ctx context.Context) ServerGroupServerArrayOutput {
	return o
}

func (o ServerGroupServerArrayOutput) Index(i pulumi.IntInput) ServerGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupServer {
		return vs[0].([]ServerGroupServer)[vs[1].(int)]
	}).(ServerGroupServerOutput)
}

type ServerGroupTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// ServerGroupTagInput is an input type that accepts ServerGroupTagArgs and ServerGroupTagOutput values.
// You can construct a concrete instance of `ServerGroupTagInput` via:
//
//	ServerGroupTagArgs{...}
type ServerGroupTagInput interface {
	pulumi.Input

	ToServerGroupTagOutput() ServerGroupTagOutput
	ToServerGroupTagOutputWithContext(context.Context) ServerGroupTagOutput
}

type ServerGroupTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ServerGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupTag)(nil)).Elem()
}

func (i ServerGroupTagArgs) ToServerGroupTagOutput() ServerGroupTagOutput {
	return i.ToServerGroupTagOutputWithContext(context.Background())
}

func (i ServerGroupTagArgs) ToServerGroupTagOutputWithContext(ctx context.Context) ServerGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupTagOutput)
}

// ServerGroupTagArrayInput is an input type that accepts ServerGroupTagArray and ServerGroupTagArrayOutput values.
// You can construct a concrete instance of `ServerGroupTagArrayInput` via:
//
//	ServerGroupTagArray{ ServerGroupTagArgs{...} }
type ServerGroupTagArrayInput interface {
	pulumi.Input

	ToServerGroupTagArrayOutput() ServerGroupTagArrayOutput
	ToServerGroupTagArrayOutputWithContext(context.Context) ServerGroupTagArrayOutput
}

type ServerGroupTagArray []ServerGroupTagInput

func (ServerGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupTag)(nil)).Elem()
}

func (i ServerGroupTagArray) ToServerGroupTagArrayOutput() ServerGroupTagArrayOutput {
	return i.ToServerGroupTagArrayOutputWithContext(context.Background())
}

func (i ServerGroupTagArray) ToServerGroupTagArrayOutputWithContext(ctx context.Context) ServerGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupTagArrayOutput)
}

type ServerGroupTagOutput struct{ *pulumi.OutputState }

func (ServerGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupTag)(nil)).Elem()
}

func (o ServerGroupTagOutput) ToServerGroupTagOutput() ServerGroupTagOutput {
	return o
}

func (o ServerGroupTagOutput) ToServerGroupTagOutputWithContext(ctx context.Context) ServerGroupTagOutput {
	return o
}

func (o ServerGroupTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o ServerGroupTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ServerGroupTagArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupTag)(nil)).Elem()
}

func (o ServerGroupTagArrayOutput) ToServerGroupTagArrayOutput() ServerGroupTagArrayOutput {
	return o
}

func (o ServerGroupTagArrayOutput) ToServerGroupTagArrayOutputWithContext(ctx context.Context) ServerGroupTagArrayOutput {
	return o
}

func (o ServerGroupTagArrayOutput) Index(i pulumi.IntInput) ServerGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupTag {
		return vs[0].([]ServerGroupTag)[vs[1].(int)]
	}).(ServerGroupTagOutput)
}

type GetAclAclEntry struct {
	// IP条目的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description string `pulumi:"description"`
	// IP条目的地址段，只支持CIDR地址。支持同时传入IPv4和IPv6条目。
	Entry string `pulumi:"entry"`
}

// GetAclAclEntryInput is an input type that accepts GetAclAclEntryArgs and GetAclAclEntryOutput values.
// You can construct a concrete instance of `GetAclAclEntryInput` via:
//
//	GetAclAclEntryArgs{...}
type GetAclAclEntryInput interface {
	pulumi.Input

	ToGetAclAclEntryOutput() GetAclAclEntryOutput
	ToGetAclAclEntryOutputWithContext(context.Context) GetAclAclEntryOutput
}

type GetAclAclEntryArgs struct {
	// IP条目的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringInput `pulumi:"description"`
	// IP条目的地址段，只支持CIDR地址。支持同时传入IPv4和IPv6条目。
	Entry pulumi.StringInput `pulumi:"entry"`
}

func (GetAclAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclAclEntry)(nil)).Elem()
}

func (i GetAclAclEntryArgs) ToGetAclAclEntryOutput() GetAclAclEntryOutput {
	return i.ToGetAclAclEntryOutputWithContext(context.Background())
}

func (i GetAclAclEntryArgs) ToGetAclAclEntryOutputWithContext(ctx context.Context) GetAclAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclAclEntryOutput)
}

// GetAclAclEntryArrayInput is an input type that accepts GetAclAclEntryArray and GetAclAclEntryArrayOutput values.
// You can construct a concrete instance of `GetAclAclEntryArrayInput` via:
//
//	GetAclAclEntryArray{ GetAclAclEntryArgs{...} }
type GetAclAclEntryArrayInput interface {
	pulumi.Input

	ToGetAclAclEntryArrayOutput() GetAclAclEntryArrayOutput
	ToGetAclAclEntryArrayOutputWithContext(context.Context) GetAclAclEntryArrayOutput
}

type GetAclAclEntryArray []GetAclAclEntryInput

func (GetAclAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclAclEntry)(nil)).Elem()
}

func (i GetAclAclEntryArray) ToGetAclAclEntryArrayOutput() GetAclAclEntryArrayOutput {
	return i.ToGetAclAclEntryArrayOutputWithContext(context.Background())
}

func (i GetAclAclEntryArray) ToGetAclAclEntryArrayOutputWithContext(ctx context.Context) GetAclAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclAclEntryArrayOutput)
}

type GetAclAclEntryOutput struct{ *pulumi.OutputState }

func (GetAclAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclAclEntry)(nil)).Elem()
}

func (o GetAclAclEntryOutput) ToGetAclAclEntryOutput() GetAclAclEntryOutput {
	return o
}

func (o GetAclAclEntryOutput) ToGetAclAclEntryOutputWithContext(ctx context.Context) GetAclAclEntryOutput {
	return o
}

// IP条目的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
func (o GetAclAclEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclAclEntry) string { return v.Description }).(pulumi.StringOutput)
}

// IP条目的地址段，只支持CIDR地址。支持同时传入IPv4和IPv6条目。
func (o GetAclAclEntryOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclAclEntry) string { return v.Entry }).(pulumi.StringOutput)
}

type GetAclAclEntryArrayOutput struct{ *pulumi.OutputState }

func (GetAclAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclAclEntry)(nil)).Elem()
}

func (o GetAclAclEntryArrayOutput) ToGetAclAclEntryArrayOutput() GetAclAclEntryArrayOutput {
	return o
}

func (o GetAclAclEntryArrayOutput) ToGetAclAclEntryArrayOutputWithContext(ctx context.Context) GetAclAclEntryArrayOutput {
	return o
}

func (o GetAclAclEntryArrayOutput) Index(i pulumi.IntInput) GetAclAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclAclEntry {
		return vs[0].([]GetAclAclEntry)[vs[1].(int)]
	}).(GetAclAclEntryOutput)
}

type GetAclListener struct {
	// 监听器对本访问控制策略组的控制方式。white：白名单。监听器监听CLB的流量时，CLB仅转发其白名单关联访问控制策略组中IP地址的请求。black：黑名单。监听器监听CLB的流量时，对于黑名单关联访问控制策略组中IP地址的请求，CLB拒绝转发。
	AclType string `pulumi:"aclType"`
	// 监听器的ID。
	ListenerId string `pulumi:"listenerId"`
	// 监听器的名称。
	ListenerName string `pulumi:"listenerName"`
	// 监听器的端口。
	Port int `pulumi:"port"`
	// 监听器的协议。
	Protocol string `pulumi:"protocol"`
}

// GetAclListenerInput is an input type that accepts GetAclListenerArgs and GetAclListenerOutput values.
// You can construct a concrete instance of `GetAclListenerInput` via:
//
//	GetAclListenerArgs{...}
type GetAclListenerInput interface {
	pulumi.Input

	ToGetAclListenerOutput() GetAclListenerOutput
	ToGetAclListenerOutputWithContext(context.Context) GetAclListenerOutput
}

type GetAclListenerArgs struct {
	// 监听器对本访问控制策略组的控制方式。white：白名单。监听器监听CLB的流量时，CLB仅转发其白名单关联访问控制策略组中IP地址的请求。black：黑名单。监听器监听CLB的流量时，对于黑名单关联访问控制策略组中IP地址的请求，CLB拒绝转发。
	AclType pulumi.StringInput `pulumi:"aclType"`
	// 监听器的ID。
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// 监听器的名称。
	ListenerName pulumi.StringInput `pulumi:"listenerName"`
	// 监听器的端口。
	Port pulumi.IntInput `pulumi:"port"`
	// 监听器的协议。
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetAclListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclListener)(nil)).Elem()
}

func (i GetAclListenerArgs) ToGetAclListenerOutput() GetAclListenerOutput {
	return i.ToGetAclListenerOutputWithContext(context.Background())
}

func (i GetAclListenerArgs) ToGetAclListenerOutputWithContext(ctx context.Context) GetAclListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclListenerOutput)
}

// GetAclListenerArrayInput is an input type that accepts GetAclListenerArray and GetAclListenerArrayOutput values.
// You can construct a concrete instance of `GetAclListenerArrayInput` via:
//
//	GetAclListenerArray{ GetAclListenerArgs{...} }
type GetAclListenerArrayInput interface {
	pulumi.Input

	ToGetAclListenerArrayOutput() GetAclListenerArrayOutput
	ToGetAclListenerArrayOutputWithContext(context.Context) GetAclListenerArrayOutput
}

type GetAclListenerArray []GetAclListenerInput

func (GetAclListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclListener)(nil)).Elem()
}

func (i GetAclListenerArray) ToGetAclListenerArrayOutput() GetAclListenerArrayOutput {
	return i.ToGetAclListenerArrayOutputWithContext(context.Background())
}

func (i GetAclListenerArray) ToGetAclListenerArrayOutputWithContext(ctx context.Context) GetAclListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclListenerArrayOutput)
}

type GetAclListenerOutput struct{ *pulumi.OutputState }

func (GetAclListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclListener)(nil)).Elem()
}

func (o GetAclListenerOutput) ToGetAclListenerOutput() GetAclListenerOutput {
	return o
}

func (o GetAclListenerOutput) ToGetAclListenerOutputWithContext(ctx context.Context) GetAclListenerOutput {
	return o
}

// 监听器对本访问控制策略组的控制方式。white：白名单。监听器监听CLB的流量时，CLB仅转发其白名单关联访问控制策略组中IP地址的请求。black：黑名单。监听器监听CLB的流量时，对于黑名单关联访问控制策略组中IP地址的请求，CLB拒绝转发。
func (o GetAclListenerOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclListener) string { return v.AclType }).(pulumi.StringOutput)
}

// 监听器的ID。
func (o GetAclListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclListener) string { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器的名称。
func (o GetAclListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclListener) string { return v.ListenerName }).(pulumi.StringOutput)
}

// 监听器的端口。
func (o GetAclListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetAclListener) int { return v.Port }).(pulumi.IntOutput)
}

// 监听器的协议。
func (o GetAclListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclListener) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetAclListenerArrayOutput struct{ *pulumi.OutputState }

func (GetAclListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclListener)(nil)).Elem()
}

func (o GetAclListenerArrayOutput) ToGetAclListenerArrayOutput() GetAclListenerArrayOutput {
	return o
}

func (o GetAclListenerArrayOutput) ToGetAclListenerArrayOutputWithContext(ctx context.Context) GetAclListenerArrayOutput {
	return o
}

func (o GetAclListenerArrayOutput) Index(i pulumi.IntInput) GetAclListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclListener {
		return vs[0].([]GetAclListener)[vs[1].(int)]
	}).(GetAclListenerOutput)
}

type GetAclTag struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key string `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value string `pulumi:"value"`
}

// GetAclTagInput is an input type that accepts GetAclTagArgs and GetAclTagOutput values.
// You can construct a concrete instance of `GetAclTagInput` via:
//
//	GetAclTagArgs{...}
type GetAclTagInput interface {
	pulumi.Input

	ToGetAclTagOutput() GetAclTagOutput
	ToGetAclTagOutputWithContext(context.Context) GetAclTagOutput
}

type GetAclTagArgs struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetAclTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTag)(nil)).Elem()
}

func (i GetAclTagArgs) ToGetAclTagOutput() GetAclTagOutput {
	return i.ToGetAclTagOutputWithContext(context.Background())
}

func (i GetAclTagArgs) ToGetAclTagOutputWithContext(ctx context.Context) GetAclTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTagOutput)
}

// GetAclTagArrayInput is an input type that accepts GetAclTagArray and GetAclTagArrayOutput values.
// You can construct a concrete instance of `GetAclTagArrayInput` via:
//
//	GetAclTagArray{ GetAclTagArgs{...} }
type GetAclTagArrayInput interface {
	pulumi.Input

	ToGetAclTagArrayOutput() GetAclTagArrayOutput
	ToGetAclTagArrayOutputWithContext(context.Context) GetAclTagArrayOutput
}

type GetAclTagArray []GetAclTagInput

func (GetAclTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTag)(nil)).Elem()
}

func (i GetAclTagArray) ToGetAclTagArrayOutput() GetAclTagArrayOutput {
	return i.ToGetAclTagArrayOutputWithContext(context.Background())
}

func (i GetAclTagArray) ToGetAclTagArrayOutputWithContext(ctx context.Context) GetAclTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAclTagArrayOutput)
}

type GetAclTagOutput struct{ *pulumi.OutputState }

func (GetAclTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAclTag)(nil)).Elem()
}

func (o GetAclTagOutput) ToGetAclTagOutput() GetAclTagOutput {
	return o
}

func (o GetAclTagOutput) ToGetAclTagOutputWithContext(ctx context.Context) GetAclTagOutput {
	return o
}

// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
func (o GetAclTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
func (o GetAclTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAclTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetAclTagArrayOutput struct{ *pulumi.OutputState }

func (GetAclTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAclTag)(nil)).Elem()
}

func (o GetAclTagArrayOutput) ToGetAclTagArrayOutput() GetAclTagArrayOutput {
	return o
}

func (o GetAclTagArrayOutput) ToGetAclTagArrayOutputWithContext(ctx context.Context) GetAclTagArrayOutput {
	return o
}

func (o GetAclTagArrayOutput) Index(i pulumi.IntInput) GetAclTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAclTag {
		return vs[0].([]GetAclTag)[vs[1].(int)]
	}).(GetAclTagOutput)
}

type GetCertificateTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetCertificateTagInput is an input type that accepts GetCertificateTagArgs and GetCertificateTagOutput values.
// You can construct a concrete instance of `GetCertificateTagInput` via:
//
//	GetCertificateTagArgs{...}
type GetCertificateTagInput interface {
	pulumi.Input

	ToGetCertificateTagOutput() GetCertificateTagOutput
	ToGetCertificateTagOutputWithContext(context.Context) GetCertificateTagOutput
}

type GetCertificateTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetCertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateTag)(nil)).Elem()
}

func (i GetCertificateTagArgs) ToGetCertificateTagOutput() GetCertificateTagOutput {
	return i.ToGetCertificateTagOutputWithContext(context.Background())
}

func (i GetCertificateTagArgs) ToGetCertificateTagOutputWithContext(ctx context.Context) GetCertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateTagOutput)
}

// GetCertificateTagArrayInput is an input type that accepts GetCertificateTagArray and GetCertificateTagArrayOutput values.
// You can construct a concrete instance of `GetCertificateTagArrayInput` via:
//
//	GetCertificateTagArray{ GetCertificateTagArgs{...} }
type GetCertificateTagArrayInput interface {
	pulumi.Input

	ToGetCertificateTagArrayOutput() GetCertificateTagArrayOutput
	ToGetCertificateTagArrayOutputWithContext(context.Context) GetCertificateTagArrayOutput
}

type GetCertificateTagArray []GetCertificateTagInput

func (GetCertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateTag)(nil)).Elem()
}

func (i GetCertificateTagArray) ToGetCertificateTagArrayOutput() GetCertificateTagArrayOutput {
	return i.ToGetCertificateTagArrayOutputWithContext(context.Background())
}

func (i GetCertificateTagArray) ToGetCertificateTagArrayOutputWithContext(ctx context.Context) GetCertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateTagArrayOutput)
}

type GetCertificateTagOutput struct{ *pulumi.OutputState }

func (GetCertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateTag)(nil)).Elem()
}

func (o GetCertificateTagOutput) ToGetCertificateTagOutput() GetCertificateTagOutput {
	return o
}

func (o GetCertificateTagOutput) ToGetCertificateTagOutputWithContext(ctx context.Context) GetCertificateTagOutput {
	return o
}

func (o GetCertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetCertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetCertificateTagArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateTag)(nil)).Elem()
}

func (o GetCertificateTagArrayOutput) ToGetCertificateTagArrayOutput() GetCertificateTagArrayOutput {
	return o
}

func (o GetCertificateTagArrayOutput) ToGetCertificateTagArrayOutputWithContext(ctx context.Context) GetCertificateTagArrayOutput {
	return o
}

func (o GetCertificateTagArrayOutput) Index(i pulumi.IntInput) GetCertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateTag {
		return vs[0].([]GetCertificateTag)[vs[1].(int)]
	}).(GetCertificateTagOutput)
}

type GetClbAccessLog struct {
	// 存储七层访问日志的对象存储桶的名称
	BucketName string `pulumi:"bucketName"`
	// 日志投递类型
	DeliveryType string `pulumi:"deliveryType"`
	// 是否开启访问日志（七层）投递至对象存储TOS的功能
	Enabled bool `pulumi:"enabled"`
	// 日志项目
	TlsProjectId string `pulumi:"tlsProjectId"`
	// 日志主题
	TlsTopicId string `pulumi:"tlsTopicId"`
}

// GetClbAccessLogInput is an input type that accepts GetClbAccessLogArgs and GetClbAccessLogOutput values.
// You can construct a concrete instance of `GetClbAccessLogInput` via:
//
//	GetClbAccessLogArgs{...}
type GetClbAccessLogInput interface {
	pulumi.Input

	ToGetClbAccessLogOutput() GetClbAccessLogOutput
	ToGetClbAccessLogOutputWithContext(context.Context) GetClbAccessLogOutput
}

type GetClbAccessLogArgs struct {
	// 存储七层访问日志的对象存储桶的名称
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// 日志投递类型
	DeliveryType pulumi.StringInput `pulumi:"deliveryType"`
	// 是否开启访问日志（七层）投递至对象存储TOS的功能
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// 日志项目
	TlsProjectId pulumi.StringInput `pulumi:"tlsProjectId"`
	// 日志主题
	TlsTopicId pulumi.StringInput `pulumi:"tlsTopicId"`
}

func (GetClbAccessLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbAccessLog)(nil)).Elem()
}

func (i GetClbAccessLogArgs) ToGetClbAccessLogOutput() GetClbAccessLogOutput {
	return i.ToGetClbAccessLogOutputWithContext(context.Background())
}

func (i GetClbAccessLogArgs) ToGetClbAccessLogOutputWithContext(ctx context.Context) GetClbAccessLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbAccessLogOutput)
}

type GetClbAccessLogOutput struct{ *pulumi.OutputState }

func (GetClbAccessLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbAccessLog)(nil)).Elem()
}

func (o GetClbAccessLogOutput) ToGetClbAccessLogOutput() GetClbAccessLogOutput {
	return o
}

func (o GetClbAccessLogOutput) ToGetClbAccessLogOutputWithContext(ctx context.Context) GetClbAccessLogOutput {
	return o
}

// 存储七层访问日志的对象存储桶的名称
func (o GetClbAccessLogOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbAccessLog) string { return v.BucketName }).(pulumi.StringOutput)
}

// 日志投递类型
func (o GetClbAccessLogOutput) DeliveryType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbAccessLog) string { return v.DeliveryType }).(pulumi.StringOutput)
}

// 是否开启访问日志（七层）投递至对象存储TOS的功能
func (o GetClbAccessLogOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClbAccessLog) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// 日志项目
func (o GetClbAccessLogOutput) TlsProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbAccessLog) string { return v.TlsProjectId }).(pulumi.StringOutput)
}

// 日志主题
func (o GetClbAccessLogOutput) TlsTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbAccessLog) string { return v.TlsTopicId }).(pulumi.StringOutput)
}

type GetClbEip struct {
	// 带宽峰值
	Bandwidth float64 `pulumi:"bandwidth"`
	// 共享带宽包ID
	BandwidthPackageId string `pulumi:"bandwidthPackageId"`
	// 计费方式
	EipBillingType float64 `pulumi:"eipBillingType"`
	// 线路类型
	Isp string `pulumi:"isp"`
	// 防护包ID
	SecurityProtectionInstanceId float64 `pulumi:"securityProtectionInstanceId"`
	// 安全防护类型
	SecurityProtectionTypes []string `pulumi:"securityProtectionTypes"`
}

// GetClbEipInput is an input type that accepts GetClbEipArgs and GetClbEipOutput values.
// You can construct a concrete instance of `GetClbEipInput` via:
//
//	GetClbEipArgs{...}
type GetClbEipInput interface {
	pulumi.Input

	ToGetClbEipOutput() GetClbEipOutput
	ToGetClbEipOutputWithContext(context.Context) GetClbEipOutput
}

type GetClbEipArgs struct {
	// 带宽峰值
	Bandwidth pulumi.Float64Input `pulumi:"bandwidth"`
	// 共享带宽包ID
	BandwidthPackageId pulumi.StringInput `pulumi:"bandwidthPackageId"`
	// 计费方式
	EipBillingType pulumi.Float64Input `pulumi:"eipBillingType"`
	// 线路类型
	Isp pulumi.StringInput `pulumi:"isp"`
	// 防护包ID
	SecurityProtectionInstanceId pulumi.Float64Input `pulumi:"securityProtectionInstanceId"`
	// 安全防护类型
	SecurityProtectionTypes pulumi.StringArrayInput `pulumi:"securityProtectionTypes"`
}

func (GetClbEipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbEip)(nil)).Elem()
}

func (i GetClbEipArgs) ToGetClbEipOutput() GetClbEipOutput {
	return i.ToGetClbEipOutputWithContext(context.Background())
}

func (i GetClbEipArgs) ToGetClbEipOutputWithContext(ctx context.Context) GetClbEipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbEipOutput)
}

type GetClbEipOutput struct{ *pulumi.OutputState }

func (GetClbEipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbEip)(nil)).Elem()
}

func (o GetClbEipOutput) ToGetClbEipOutput() GetClbEipOutput {
	return o
}

func (o GetClbEipOutput) ToGetClbEipOutputWithContext(ctx context.Context) GetClbEipOutput {
	return o
}

// 带宽峰值
func (o GetClbEipOutput) Bandwidth() pulumi.Float64Output {
	return o.ApplyT(func(v GetClbEip) float64 { return v.Bandwidth }).(pulumi.Float64Output)
}

// 共享带宽包ID
func (o GetClbEipOutput) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbEip) string { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// 计费方式
func (o GetClbEipOutput) EipBillingType() pulumi.Float64Output {
	return o.ApplyT(func(v GetClbEip) float64 { return v.EipBillingType }).(pulumi.Float64Output)
}

// 线路类型
func (o GetClbEipOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbEip) string { return v.Isp }).(pulumi.StringOutput)
}

// 防护包ID
func (o GetClbEipOutput) SecurityProtectionInstanceId() pulumi.Float64Output {
	return o.ApplyT(func(v GetClbEip) float64 { return v.SecurityProtectionInstanceId }).(pulumi.Float64Output)
}

// 安全防护类型
func (o GetClbEipOutput) SecurityProtectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClbEip) []string { return v.SecurityProtectionTypes }).(pulumi.StringArrayOutput)
}

type GetClbEni struct {
	// 负载均衡实例的私网IP地址
	EniAddress string `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId string `pulumi:"eniId"`
}

// GetClbEniInput is an input type that accepts GetClbEniArgs and GetClbEniOutput values.
// You can construct a concrete instance of `GetClbEniInput` via:
//
//	GetClbEniArgs{...}
type GetClbEniInput interface {
	pulumi.Input

	ToGetClbEniOutput() GetClbEniOutput
	ToGetClbEniOutputWithContext(context.Context) GetClbEniOutput
}

type GetClbEniArgs struct {
	// 负载均衡实例的私网IP地址
	EniAddress pulumi.StringInput `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId pulumi.StringInput `pulumi:"eniId"`
}

func (GetClbEniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbEni)(nil)).Elem()
}

func (i GetClbEniArgs) ToGetClbEniOutput() GetClbEniOutput {
	return i.ToGetClbEniOutputWithContext(context.Background())
}

func (i GetClbEniArgs) ToGetClbEniOutputWithContext(ctx context.Context) GetClbEniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbEniOutput)
}

type GetClbEniOutput struct{ *pulumi.OutputState }

func (GetClbEniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbEni)(nil)).Elem()
}

func (o GetClbEniOutput) ToGetClbEniOutput() GetClbEniOutput {
	return o
}

func (o GetClbEniOutput) ToGetClbEniOutputWithContext(ctx context.Context) GetClbEniOutput {
	return o
}

// 负载均衡实例的私网IP地址
func (o GetClbEniOutput) EniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbEni) string { return v.EniAddress }).(pulumi.StringOutput)
}

// 负载均衡实例占用的网卡ID
func (o GetClbEniOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbEni) string { return v.EniId }).(pulumi.StringOutput)
}

type GetClbEnis struct {
	// 负载均衡实例的私网IP地址
	EniAddress string `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId string `pulumi:"eniId"`
}

// GetClbEnisInput is an input type that accepts GetClbEnisArgs and GetClbEnisOutput values.
// You can construct a concrete instance of `GetClbEnisInput` via:
//
//	GetClbEnisArgs{...}
type GetClbEnisInput interface {
	pulumi.Input

	ToGetClbEnisOutput() GetClbEnisOutput
	ToGetClbEnisOutputWithContext(context.Context) GetClbEnisOutput
}

type GetClbEnisArgs struct {
	// 负载均衡实例的私网IP地址
	EniAddress pulumi.StringInput `pulumi:"eniAddress"`
	// 负载均衡实例占用的网卡ID
	EniId pulumi.StringInput `pulumi:"eniId"`
}

func (GetClbEnisArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbEnis)(nil)).Elem()
}

func (i GetClbEnisArgs) ToGetClbEnisOutput() GetClbEnisOutput {
	return i.ToGetClbEnisOutputWithContext(context.Background())
}

func (i GetClbEnisArgs) ToGetClbEnisOutputWithContext(ctx context.Context) GetClbEnisOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbEnisOutput)
}

type GetClbEnisOutput struct{ *pulumi.OutputState }

func (GetClbEnisOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbEnis)(nil)).Elem()
}

func (o GetClbEnisOutput) ToGetClbEnisOutput() GetClbEnisOutput {
	return o
}

func (o GetClbEnisOutput) ToGetClbEnisOutputWithContext(ctx context.Context) GetClbEnisOutput {
	return o
}

// 负载均衡实例的私网IP地址
func (o GetClbEnisOutput) EniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbEnis) string { return v.EniAddress }).(pulumi.StringOutput)
}

// 负载均衡实例占用的网卡ID
func (o GetClbEnisOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbEnis) string { return v.EniId }).(pulumi.StringOutput)
}

type GetClbListener struct {
	// 监听器的ID
	ListenerId string `pulumi:"listenerId"`
	// 监听器的名称
	ListenerName string `pulumi:"listenerName"`
}

// GetClbListenerInput is an input type that accepts GetClbListenerArgs and GetClbListenerOutput values.
// You can construct a concrete instance of `GetClbListenerInput` via:
//
//	GetClbListenerArgs{...}
type GetClbListenerInput interface {
	pulumi.Input

	ToGetClbListenerOutput() GetClbListenerOutput
	ToGetClbListenerOutputWithContext(context.Context) GetClbListenerOutput
}

type GetClbListenerArgs struct {
	// 监听器的ID
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// 监听器的名称
	ListenerName pulumi.StringInput `pulumi:"listenerName"`
}

func (GetClbListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbListener)(nil)).Elem()
}

func (i GetClbListenerArgs) ToGetClbListenerOutput() GetClbListenerOutput {
	return i.ToGetClbListenerOutputWithContext(context.Background())
}

func (i GetClbListenerArgs) ToGetClbListenerOutputWithContext(ctx context.Context) GetClbListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbListenerOutput)
}

// GetClbListenerArrayInput is an input type that accepts GetClbListenerArray and GetClbListenerArrayOutput values.
// You can construct a concrete instance of `GetClbListenerArrayInput` via:
//
//	GetClbListenerArray{ GetClbListenerArgs{...} }
type GetClbListenerArrayInput interface {
	pulumi.Input

	ToGetClbListenerArrayOutput() GetClbListenerArrayOutput
	ToGetClbListenerArrayOutputWithContext(context.Context) GetClbListenerArrayOutput
}

type GetClbListenerArray []GetClbListenerInput

func (GetClbListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClbListener)(nil)).Elem()
}

func (i GetClbListenerArray) ToGetClbListenerArrayOutput() GetClbListenerArrayOutput {
	return i.ToGetClbListenerArrayOutputWithContext(context.Background())
}

func (i GetClbListenerArray) ToGetClbListenerArrayOutputWithContext(ctx context.Context) GetClbListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbListenerArrayOutput)
}

type GetClbListenerOutput struct{ *pulumi.OutputState }

func (GetClbListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbListener)(nil)).Elem()
}

func (o GetClbListenerOutput) ToGetClbListenerOutput() GetClbListenerOutput {
	return o
}

func (o GetClbListenerOutput) ToGetClbListenerOutputWithContext(ctx context.Context) GetClbListenerOutput {
	return o
}

// 监听器的ID
func (o GetClbListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbListener) string { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器的名称
func (o GetClbListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbListener) string { return v.ListenerName }).(pulumi.StringOutput)
}

type GetClbListenerArrayOutput struct{ *pulumi.OutputState }

func (GetClbListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClbListener)(nil)).Elem()
}

func (o GetClbListenerArrayOutput) ToGetClbListenerArrayOutput() GetClbListenerArrayOutput {
	return o
}

func (o GetClbListenerArrayOutput) ToGetClbListenerArrayOutputWithContext(ctx context.Context) GetClbListenerArrayOutput {
	return o
}

func (o GetClbListenerArrayOutput) Index(i pulumi.IntInput) GetClbListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClbListener {
		return vs[0].([]GetClbListener)[vs[1].(int)]
	}).(GetClbListenerOutput)
}

type GetClbServerGroup struct {
	// 负载均衡实例中后端服务器组的ID
	ServerGroupId string `pulumi:"serverGroupId"`
	// 负载均衡实例中后端服务器组的名称
	ServerGroupName string `pulumi:"serverGroupName"`
}

// GetClbServerGroupInput is an input type that accepts GetClbServerGroupArgs and GetClbServerGroupOutput values.
// You can construct a concrete instance of `GetClbServerGroupInput` via:
//
//	GetClbServerGroupArgs{...}
type GetClbServerGroupInput interface {
	pulumi.Input

	ToGetClbServerGroupOutput() GetClbServerGroupOutput
	ToGetClbServerGroupOutputWithContext(context.Context) GetClbServerGroupOutput
}

type GetClbServerGroupArgs struct {
	// 负载均衡实例中后端服务器组的ID
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// 负载均衡实例中后端服务器组的名称
	ServerGroupName pulumi.StringInput `pulumi:"serverGroupName"`
}

func (GetClbServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbServerGroup)(nil)).Elem()
}

func (i GetClbServerGroupArgs) ToGetClbServerGroupOutput() GetClbServerGroupOutput {
	return i.ToGetClbServerGroupOutputWithContext(context.Background())
}

func (i GetClbServerGroupArgs) ToGetClbServerGroupOutputWithContext(ctx context.Context) GetClbServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbServerGroupOutput)
}

// GetClbServerGroupArrayInput is an input type that accepts GetClbServerGroupArray and GetClbServerGroupArrayOutput values.
// You can construct a concrete instance of `GetClbServerGroupArrayInput` via:
//
//	GetClbServerGroupArray{ GetClbServerGroupArgs{...} }
type GetClbServerGroupArrayInput interface {
	pulumi.Input

	ToGetClbServerGroupArrayOutput() GetClbServerGroupArrayOutput
	ToGetClbServerGroupArrayOutputWithContext(context.Context) GetClbServerGroupArrayOutput
}

type GetClbServerGroupArray []GetClbServerGroupInput

func (GetClbServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClbServerGroup)(nil)).Elem()
}

func (i GetClbServerGroupArray) ToGetClbServerGroupArrayOutput() GetClbServerGroupArrayOutput {
	return i.ToGetClbServerGroupArrayOutputWithContext(context.Background())
}

func (i GetClbServerGroupArray) ToGetClbServerGroupArrayOutputWithContext(ctx context.Context) GetClbServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbServerGroupArrayOutput)
}

type GetClbServerGroupOutput struct{ *pulumi.OutputState }

func (GetClbServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbServerGroup)(nil)).Elem()
}

func (o GetClbServerGroupOutput) ToGetClbServerGroupOutput() GetClbServerGroupOutput {
	return o
}

func (o GetClbServerGroupOutput) ToGetClbServerGroupOutputWithContext(ctx context.Context) GetClbServerGroupOutput {
	return o
}

// 负载均衡实例中后端服务器组的ID
func (o GetClbServerGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbServerGroup) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 负载均衡实例中后端服务器组的名称
func (o GetClbServerGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbServerGroup) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

type GetClbServerGroupArrayOutput struct{ *pulumi.OutputState }

func (GetClbServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClbServerGroup)(nil)).Elem()
}

func (o GetClbServerGroupArrayOutput) ToGetClbServerGroupArrayOutput() GetClbServerGroupArrayOutput {
	return o
}

func (o GetClbServerGroupArrayOutput) ToGetClbServerGroupArrayOutputWithContext(ctx context.Context) GetClbServerGroupArrayOutput {
	return o
}

func (o GetClbServerGroupArrayOutput) Index(i pulumi.IntInput) GetClbServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClbServerGroup {
		return vs[0].([]GetClbServerGroup)[vs[1].(int)]
	}).(GetClbServerGroupOutput)
}

type GetClbTag struct {
	// 标签键
	Key string `pulumi:"key"`
	// 标签值
	Value string `pulumi:"value"`
}

// GetClbTagInput is an input type that accepts GetClbTagArgs and GetClbTagOutput values.
// You can construct a concrete instance of `GetClbTagInput` via:
//
//	GetClbTagArgs{...}
type GetClbTagInput interface {
	pulumi.Input

	ToGetClbTagOutput() GetClbTagOutput
	ToGetClbTagOutputWithContext(context.Context) GetClbTagOutput
}

type GetClbTagArgs struct {
	// 标签键
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetClbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbTag)(nil)).Elem()
}

func (i GetClbTagArgs) ToGetClbTagOutput() GetClbTagOutput {
	return i.ToGetClbTagOutputWithContext(context.Background())
}

func (i GetClbTagArgs) ToGetClbTagOutputWithContext(ctx context.Context) GetClbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbTagOutput)
}

// GetClbTagArrayInput is an input type that accepts GetClbTagArray and GetClbTagArrayOutput values.
// You can construct a concrete instance of `GetClbTagArrayInput` via:
//
//	GetClbTagArray{ GetClbTagArgs{...} }
type GetClbTagArrayInput interface {
	pulumi.Input

	ToGetClbTagArrayOutput() GetClbTagArrayOutput
	ToGetClbTagArrayOutputWithContext(context.Context) GetClbTagArrayOutput
}

type GetClbTagArray []GetClbTagInput

func (GetClbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClbTag)(nil)).Elem()
}

func (i GetClbTagArray) ToGetClbTagArrayOutput() GetClbTagArrayOutput {
	return i.ToGetClbTagArrayOutputWithContext(context.Background())
}

func (i GetClbTagArray) ToGetClbTagArrayOutputWithContext(ctx context.Context) GetClbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClbTagArrayOutput)
}

type GetClbTagOutput struct{ *pulumi.OutputState }

func (GetClbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbTag)(nil)).Elem()
}

func (o GetClbTagOutput) ToGetClbTagOutput() GetClbTagOutput {
	return o
}

func (o GetClbTagOutput) ToGetClbTagOutputWithContext(ctx context.Context) GetClbTagOutput {
	return o
}

// 标签键
func (o GetClbTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值
func (o GetClbTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetClbTagArrayOutput struct{ *pulumi.OutputState }

func (GetClbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClbTag)(nil)).Elem()
}

func (o GetClbTagArrayOutput) ToGetClbTagArrayOutput() GetClbTagArrayOutput {
	return o
}

func (o GetClbTagArrayOutput) ToGetClbTagArrayOutputWithContext(ctx context.Context) GetClbTagArrayOutput {
	return o
}

func (o GetClbTagArrayOutput) Index(i pulumi.IntInput) GetClbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClbTag {
		return vs[0].([]GetClbTag)[vs[1].(int)]
	}).(GetClbTagOutput)
}

type GetListenerHealthCheck struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain string `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled string `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode string `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval int `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method string `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port int `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout int `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect string `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest string `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri string `pulumi:"uri"`
}

// GetListenerHealthCheckInput is an input type that accepts GetListenerHealthCheckArgs and GetListenerHealthCheckOutput values.
// You can construct a concrete instance of `GetListenerHealthCheckInput` via:
//
//	GetListenerHealthCheckArgs{...}
type GetListenerHealthCheckInput interface {
	pulumi.Input

	ToGetListenerHealthCheckOutput() GetListenerHealthCheckOutput
	ToGetListenerHealthCheckOutputWithContext(context.Context) GetListenerHealthCheckOutput
}

type GetListenerHealthCheckArgs struct {
	// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
	Domain pulumi.StringInput `pulumi:"domain"`
	// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
	Enabled pulumi.StringInput `pulumi:"enabled"`
	// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
	HttpCode pulumi.StringInput `pulumi:"httpCode"`
	// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
	Interval pulumi.IntInput `pulumi:"interval"`
	// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
	Method pulumi.StringInput `pulumi:"method"`
	// 健康检查的端口，取值范围为1-65535。
	Port pulumi.IntInput `pulumi:"port"`
	// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpExpect pulumi.StringInput `pulumi:"udpExpect"`
	// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
	UdpRequest pulumi.StringInput `pulumi:"udpRequest"`
	// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
	// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerHealthCheck)(nil)).Elem()
}

func (i GetListenerHealthCheckArgs) ToGetListenerHealthCheckOutput() GetListenerHealthCheckOutput {
	return i.ToGetListenerHealthCheckOutputWithContext(context.Background())
}

func (i GetListenerHealthCheckArgs) ToGetListenerHealthCheckOutputWithContext(ctx context.Context) GetListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerHealthCheckOutput)
}

type GetListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (GetListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerHealthCheck)(nil)).Elem()
}

func (o GetListenerHealthCheckOutput) ToGetListenerHealthCheckOutput() GetListenerHealthCheckOutput {
	return o
}

func (o GetListenerHealthCheckOutput) ToGetListenerHealthCheckOutputWithContext(ctx context.Context) GetListenerHealthCheckOutput {
	return o
}

// 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
func (o GetListenerHealthCheckOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Domain }).(pulumi.StringOutput)
}

// 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
func (o GetListenerHealthCheckOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Enabled }).(pulumi.StringOutput)
}

// 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o GetListenerHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
func (o GetListenerHealthCheckOutput) HttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.HttpCode }).(pulumi.StringOutput)
}

// 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
func (o GetListenerHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
func (o GetListenerHealthCheckOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Method }).(pulumi.StringOutput)
}

// 健康检查的端口，取值范围为1-65535。
func (o GetListenerHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

// 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
func (o GetListenerHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o GetListenerHealthCheckOutput) UdpExpect() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.UdpExpect }).(pulumi.StringOutput)
}

// 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
func (o GetListenerHealthCheckOutput) UdpRequest() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.UdpRequest }).(pulumi.StringOutput)
}

// 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
func (o GetListenerHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

// 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
func (o GetListenerHealthCheckOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerHealthCheck) string { return v.Uri }).(pulumi.StringOutput)
}

type GetListenerTag struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key string `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value string `pulumi:"value"`
}

// GetListenerTagInput is an input type that accepts GetListenerTagArgs and GetListenerTagOutput values.
// You can construct a concrete instance of `GetListenerTagInput` via:
//
//	GetListenerTagArgs{...}
type GetListenerTagInput interface {
	pulumi.Input

	ToGetListenerTagOutput() GetListenerTagOutput
	ToGetListenerTagOutputWithContext(context.Context) GetListenerTagOutput
}

type GetListenerTagArgs struct {
	// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerTag)(nil)).Elem()
}

func (i GetListenerTagArgs) ToGetListenerTagOutput() GetListenerTagOutput {
	return i.ToGetListenerTagOutputWithContext(context.Background())
}

func (i GetListenerTagArgs) ToGetListenerTagOutputWithContext(ctx context.Context) GetListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerTagOutput)
}

// GetListenerTagArrayInput is an input type that accepts GetListenerTagArray and GetListenerTagArrayOutput values.
// You can construct a concrete instance of `GetListenerTagArrayInput` via:
//
//	GetListenerTagArray{ GetListenerTagArgs{...} }
type GetListenerTagArrayInput interface {
	pulumi.Input

	ToGetListenerTagArrayOutput() GetListenerTagArrayOutput
	ToGetListenerTagArrayOutputWithContext(context.Context) GetListenerTagArrayOutput
}

type GetListenerTagArray []GetListenerTagInput

func (GetListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerTag)(nil)).Elem()
}

func (i GetListenerTagArray) ToGetListenerTagArrayOutput() GetListenerTagArrayOutput {
	return i.ToGetListenerTagArrayOutputWithContext(context.Background())
}

func (i GetListenerTagArray) ToGetListenerTagArrayOutputWithContext(ctx context.Context) GetListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetListenerTagArrayOutput)
}

type GetListenerTagOutput struct{ *pulumi.OutputState }

func (GetListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetListenerTag)(nil)).Elem()
}

func (o GetListenerTagOutput) ToGetListenerTagOutput() GetListenerTagOutput {
	return o
}

func (o GetListenerTagOutput) ToGetListenerTagOutputWithContext(ctx context.Context) GetListenerTagOutput {
	return o
}

// 用户标签的标签键。长度取值范围为1~128字符，允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。若标签键开头或结尾存在空格，系统会自动为其去除。
func (o GetListenerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。允许输入各国语言文字、数字、空格（ ）、下划线（_）、点号（.）、半角冒号（:）、斜杠（/）、等号（=）、加号（+）、中划线（-）和@（@）。大小写敏感。若标签值开头或结尾存在空格，系统会自动为其去除。
func (o GetListenerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetListenerTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetListenerTagArrayOutput struct{ *pulumi.OutputState }

func (GetListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetListenerTag)(nil)).Elem()
}

func (o GetListenerTagArrayOutput) ToGetListenerTagArrayOutput() GetListenerTagArrayOutput {
	return o
}

func (o GetListenerTagArrayOutput) ToGetListenerTagArrayOutputWithContext(ctx context.Context) GetListenerTagArrayOutput {
	return o
}

func (o GetListenerTagArrayOutput) Index(i pulumi.IntInput) GetListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetListenerTag {
		return vs[0].([]GetListenerTag)[vs[1].(int)]
	}).(GetListenerTagOutput)
}

type GetNlbListenerHealth struct {
	// 后端服务器的实例 ID或IP地址。
	InstanceId string `pulumi:"instanceId"`
	// 后端服务器的IP地址。
	Ip string `pulumi:"ip"`
	// 后端服务器提供服务的端口。
	Port int `pulumi:"port"`
	// 后端服务器ID。
	ServerId string `pulumi:"serverId"`
	// 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
	ServerType string `pulumi:"serverType"`
	// 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
	Status string `pulumi:"status"`
	// 健康状态最后更新时间。
	UpdatedTime string `pulumi:"updatedTime"`
	// 后端服务器接收访问流量的可用区ID。
	ZoneId string `pulumi:"zoneId"`
}

// GetNlbListenerHealthInput is an input type that accepts GetNlbListenerHealthArgs and GetNlbListenerHealthOutput values.
// You can construct a concrete instance of `GetNlbListenerHealthInput` via:
//
//	GetNlbListenerHealthArgs{...}
type GetNlbListenerHealthInput interface {
	pulumi.Input

	ToGetNlbListenerHealthOutput() GetNlbListenerHealthOutput
	ToGetNlbListenerHealthOutputWithContext(context.Context) GetNlbListenerHealthOutput
}

type GetNlbListenerHealthArgs struct {
	// 后端服务器的实例 ID或IP地址。
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// 后端服务器的IP地址。
	Ip pulumi.StringInput `pulumi:"ip"`
	// 后端服务器提供服务的端口。
	Port pulumi.IntInput `pulumi:"port"`
	// 后端服务器ID。
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
	ServerType pulumi.StringInput `pulumi:"serverType"`
	// 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
	Status pulumi.StringInput `pulumi:"status"`
	// 健康状态最后更新时间。
	UpdatedTime pulumi.StringInput `pulumi:"updatedTime"`
	// 后端服务器接收访问流量的可用区ID。
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetNlbListenerHealthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbListenerHealth)(nil)).Elem()
}

func (i GetNlbListenerHealthArgs) ToGetNlbListenerHealthOutput() GetNlbListenerHealthOutput {
	return i.ToGetNlbListenerHealthOutputWithContext(context.Background())
}

func (i GetNlbListenerHealthArgs) ToGetNlbListenerHealthOutputWithContext(ctx context.Context) GetNlbListenerHealthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbListenerHealthOutput)
}

// GetNlbListenerHealthArrayInput is an input type that accepts GetNlbListenerHealthArray and GetNlbListenerHealthArrayOutput values.
// You can construct a concrete instance of `GetNlbListenerHealthArrayInput` via:
//
//	GetNlbListenerHealthArray{ GetNlbListenerHealthArgs{...} }
type GetNlbListenerHealthArrayInput interface {
	pulumi.Input

	ToGetNlbListenerHealthArrayOutput() GetNlbListenerHealthArrayOutput
	ToGetNlbListenerHealthArrayOutputWithContext(context.Context) GetNlbListenerHealthArrayOutput
}

type GetNlbListenerHealthArray []GetNlbListenerHealthInput

func (GetNlbListenerHealthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbListenerHealth)(nil)).Elem()
}

func (i GetNlbListenerHealthArray) ToGetNlbListenerHealthArrayOutput() GetNlbListenerHealthArrayOutput {
	return i.ToGetNlbListenerHealthArrayOutputWithContext(context.Background())
}

func (i GetNlbListenerHealthArray) ToGetNlbListenerHealthArrayOutputWithContext(ctx context.Context) GetNlbListenerHealthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbListenerHealthArrayOutput)
}

type GetNlbListenerHealthOutput struct{ *pulumi.OutputState }

func (GetNlbListenerHealthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbListenerHealth)(nil)).Elem()
}

func (o GetNlbListenerHealthOutput) ToGetNlbListenerHealthOutput() GetNlbListenerHealthOutput {
	return o
}

func (o GetNlbListenerHealthOutput) ToGetNlbListenerHealthOutputWithContext(ctx context.Context) GetNlbListenerHealthOutput {
	return o
}

// 后端服务器的实例 ID或IP地址。
func (o GetNlbListenerHealthOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.InstanceId }).(pulumi.StringOutput)
}

// 后端服务器的IP地址。
func (o GetNlbListenerHealthOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.Ip }).(pulumi.StringOutput)
}

// 后端服务器提供服务的端口。
func (o GetNlbListenerHealthOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) int { return v.Port }).(pulumi.IntOutput)
}

// 后端服务器ID。
func (o GetNlbListenerHealthOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.ServerId }).(pulumi.StringOutput)
}

// 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
func (o GetNlbListenerHealthOutput) ServerType() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.ServerType }).(pulumi.StringOutput)
}

// 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
func (o GetNlbListenerHealthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.Status }).(pulumi.StringOutput)
}

// 健康状态最后更新时间。
func (o GetNlbListenerHealthOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 后端服务器接收访问流量的可用区ID。
func (o GetNlbListenerHealthOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerHealth) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetNlbListenerHealthArrayOutput struct{ *pulumi.OutputState }

func (GetNlbListenerHealthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbListenerHealth)(nil)).Elem()
}

func (o GetNlbListenerHealthArrayOutput) ToGetNlbListenerHealthArrayOutput() GetNlbListenerHealthArrayOutput {
	return o
}

func (o GetNlbListenerHealthArrayOutput) ToGetNlbListenerHealthArrayOutputWithContext(ctx context.Context) GetNlbListenerHealthArrayOutput {
	return o
}

func (o GetNlbListenerHealthArrayOutput) Index(i pulumi.IntInput) GetNlbListenerHealthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNlbListenerHealth {
		return vs[0].([]GetNlbListenerHealth)[vs[1].(int)]
	}).(GetNlbListenerHealthOutput)
}

type GetNlbListenerTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetNlbListenerTagInput is an input type that accepts GetNlbListenerTagArgs and GetNlbListenerTagOutput values.
// You can construct a concrete instance of `GetNlbListenerTagInput` via:
//
//	GetNlbListenerTagArgs{...}
type GetNlbListenerTagInput interface {
	pulumi.Input

	ToGetNlbListenerTagOutput() GetNlbListenerTagOutput
	ToGetNlbListenerTagOutputWithContext(context.Context) GetNlbListenerTagOutput
}

type GetNlbListenerTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNlbListenerTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbListenerTag)(nil)).Elem()
}

func (i GetNlbListenerTagArgs) ToGetNlbListenerTagOutput() GetNlbListenerTagOutput {
	return i.ToGetNlbListenerTagOutputWithContext(context.Background())
}

func (i GetNlbListenerTagArgs) ToGetNlbListenerTagOutputWithContext(ctx context.Context) GetNlbListenerTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbListenerTagOutput)
}

// GetNlbListenerTagArrayInput is an input type that accepts GetNlbListenerTagArray and GetNlbListenerTagArrayOutput values.
// You can construct a concrete instance of `GetNlbListenerTagArrayInput` via:
//
//	GetNlbListenerTagArray{ GetNlbListenerTagArgs{...} }
type GetNlbListenerTagArrayInput interface {
	pulumi.Input

	ToGetNlbListenerTagArrayOutput() GetNlbListenerTagArrayOutput
	ToGetNlbListenerTagArrayOutputWithContext(context.Context) GetNlbListenerTagArrayOutput
}

type GetNlbListenerTagArray []GetNlbListenerTagInput

func (GetNlbListenerTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbListenerTag)(nil)).Elem()
}

func (i GetNlbListenerTagArray) ToGetNlbListenerTagArrayOutput() GetNlbListenerTagArrayOutput {
	return i.ToGetNlbListenerTagArrayOutputWithContext(context.Background())
}

func (i GetNlbListenerTagArray) ToGetNlbListenerTagArrayOutputWithContext(ctx context.Context) GetNlbListenerTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbListenerTagArrayOutput)
}

type GetNlbListenerTagOutput struct{ *pulumi.OutputState }

func (GetNlbListenerTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbListenerTag)(nil)).Elem()
}

func (o GetNlbListenerTagOutput) ToGetNlbListenerTagOutput() GetNlbListenerTagOutput {
	return o
}

func (o GetNlbListenerTagOutput) ToGetNlbListenerTagOutputWithContext(ctx context.Context) GetNlbListenerTagOutput {
	return o
}

// 标签键。
func (o GetNlbListenerTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetNlbListenerTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbListenerTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNlbListenerTagArrayOutput struct{ *pulumi.OutputState }

func (GetNlbListenerTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbListenerTag)(nil)).Elem()
}

func (o GetNlbListenerTagArrayOutput) ToGetNlbListenerTagArrayOutput() GetNlbListenerTagArrayOutput {
	return o
}

func (o GetNlbListenerTagArrayOutput) ToGetNlbListenerTagArrayOutputWithContext(ctx context.Context) GetNlbListenerTagArrayOutput {
	return o
}

func (o GetNlbListenerTagArrayOutput) Index(i pulumi.IntInput) GetNlbListenerTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNlbListenerTag {
		return vs[0].([]GetNlbListenerTag)[vs[1].(int)]
	}).(GetNlbListenerTagOutput)
}

type GetNlbServerGroupHealthCheck struct {
	// 健康检查的域名
	Domain string `pulumi:"domain"`
	// 是否开启健康检查
	Enabled bool `pulumi:"enabled"`
	// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
	HealthyThreshold int `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码
	HttpCode string `pulumi:"httpCode"`
	// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
	Interval int `pulumi:"interval"`
	// 健康检查的请求方法
	Method string `pulumi:"method"`
	// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
	Port int `pulumi:"port"`
	// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
	Timeout int `pulumi:"timeout"`
	// 健康检查的协议类型
	Type string `pulumi:"type"`
	// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
	UdpExpect string `pulumi:"udpExpect"`
	// UDP健康检查的预期响应字符串
	UdpRequest string `pulumi:"udpRequest"`
	// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
	UnhealthyThreshold int `pulumi:"unhealthyThreshold"`
	// 健康检查的路径
	Uri string `pulumi:"uri"`
}

// GetNlbServerGroupHealthCheckInput is an input type that accepts GetNlbServerGroupHealthCheckArgs and GetNlbServerGroupHealthCheckOutput values.
// You can construct a concrete instance of `GetNlbServerGroupHealthCheckInput` via:
//
//	GetNlbServerGroupHealthCheckArgs{...}
type GetNlbServerGroupHealthCheckInput interface {
	pulumi.Input

	ToGetNlbServerGroupHealthCheckOutput() GetNlbServerGroupHealthCheckOutput
	ToGetNlbServerGroupHealthCheckOutputWithContext(context.Context) GetNlbServerGroupHealthCheckOutput
}

type GetNlbServerGroupHealthCheckArgs struct {
	// 健康检查的域名
	Domain pulumi.StringInput `pulumi:"domain"`
	// 是否开启健康检查
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
	HealthyThreshold pulumi.IntInput `pulumi:"healthyThreshold"`
	// 健康检查正常的HTTP状态码
	HttpCode pulumi.StringInput `pulumi:"httpCode"`
	// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
	Interval pulumi.IntInput `pulumi:"interval"`
	// 健康检查的请求方法
	Method pulumi.StringInput `pulumi:"method"`
	// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
	Port pulumi.IntInput `pulumi:"port"`
	// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// 健康检查的协议类型
	Type pulumi.StringInput `pulumi:"type"`
	// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
	UdpExpect pulumi.StringInput `pulumi:"udpExpect"`
	// UDP健康检查的预期响应字符串
	UdpRequest pulumi.StringInput `pulumi:"udpRequest"`
	// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
	UnhealthyThreshold pulumi.IntInput `pulumi:"unhealthyThreshold"`
	// 健康检查的路径
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (GetNlbServerGroupHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbServerGroupHealthCheck)(nil)).Elem()
}

func (i GetNlbServerGroupHealthCheckArgs) ToGetNlbServerGroupHealthCheckOutput() GetNlbServerGroupHealthCheckOutput {
	return i.ToGetNlbServerGroupHealthCheckOutputWithContext(context.Background())
}

func (i GetNlbServerGroupHealthCheckArgs) ToGetNlbServerGroupHealthCheckOutputWithContext(ctx context.Context) GetNlbServerGroupHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbServerGroupHealthCheckOutput)
}

type GetNlbServerGroupHealthCheckOutput struct{ *pulumi.OutputState }

func (GetNlbServerGroupHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbServerGroupHealthCheck)(nil)).Elem()
}

func (o GetNlbServerGroupHealthCheckOutput) ToGetNlbServerGroupHealthCheckOutput() GetNlbServerGroupHealthCheckOutput {
	return o
}

func (o GetNlbServerGroupHealthCheckOutput) ToGetNlbServerGroupHealthCheckOutputWithContext(ctx context.Context) GetNlbServerGroupHealthCheckOutput {
	return o
}

// 健康检查的域名
func (o GetNlbServerGroupHealthCheckOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.Domain }).(pulumi.StringOutput)
}

// 是否开启健康检查
func (o GetNlbServerGroupHealthCheckOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
func (o GetNlbServerGroupHealthCheckOutput) HealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) int { return v.HealthyThreshold }).(pulumi.IntOutput)
}

// 健康检查正常的HTTP状态码
func (o GetNlbServerGroupHealthCheckOutput) HttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.HttpCode }).(pulumi.StringOutput)
}

// 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
func (o GetNlbServerGroupHealthCheckOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) int { return v.Interval }).(pulumi.IntOutput)
}

// 健康检查的请求方法
func (o GetNlbServerGroupHealthCheckOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.Method }).(pulumi.StringOutput)
}

// 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
func (o GetNlbServerGroupHealthCheckOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) int { return v.Port }).(pulumi.IntOutput)
}

// 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
func (o GetNlbServerGroupHealthCheckOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) int { return v.Timeout }).(pulumi.IntOutput)
}

// 健康检查的协议类型
func (o GetNlbServerGroupHealthCheckOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.Type }).(pulumi.StringOutput)
}

// UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
func (o GetNlbServerGroupHealthCheckOutput) UdpExpect() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.UdpExpect }).(pulumi.StringOutput)
}

// UDP健康检查的预期响应字符串
func (o GetNlbServerGroupHealthCheckOutput) UdpRequest() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.UdpRequest }).(pulumi.StringOutput)
}

// 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
func (o GetNlbServerGroupHealthCheckOutput) UnhealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) int { return v.UnhealthyThreshold }).(pulumi.IntOutput)
}

// 健康检查的路径
func (o GetNlbServerGroupHealthCheckOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupHealthCheck) string { return v.Uri }).(pulumi.StringOutput)
}

type GetNlbServerGroupServer struct {
	// 后端服务器的描述，默认值为空字符串
	Description string `pulumi:"description"`
	// 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
	InstanceId string `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
	Ip string `pulumi:"ip"`
	// 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
	Port int `pulumi:"port"`
	// 后端服务器 ID
	ServerId string `pulumi:"serverId"`
	// 后端服务器的类型
	Type string `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
	Weight int `pulumi:"weight"`
	// 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
	ZoneId string `pulumi:"zoneId"`
}

// GetNlbServerGroupServerInput is an input type that accepts GetNlbServerGroupServerArgs and GetNlbServerGroupServerOutput values.
// You can construct a concrete instance of `GetNlbServerGroupServerInput` via:
//
//	GetNlbServerGroupServerArgs{...}
type GetNlbServerGroupServerInput interface {
	pulumi.Input

	ToGetNlbServerGroupServerOutput() GetNlbServerGroupServerOutput
	ToGetNlbServerGroupServerOutputWithContext(context.Context) GetNlbServerGroupServerOutput
}

type GetNlbServerGroupServerArgs struct {
	// 后端服务器的描述，默认值为空字符串
	Description pulumi.StringInput `pulumi:"description"`
	// 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
	Ip pulumi.StringInput `pulumi:"ip"`
	// 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
	Port pulumi.IntInput `pulumi:"port"`
	// 后端服务器 ID
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// 后端服务器的类型
	Type pulumi.StringInput `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
	Weight pulumi.IntInput `pulumi:"weight"`
	// 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetNlbServerGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbServerGroupServer)(nil)).Elem()
}

func (i GetNlbServerGroupServerArgs) ToGetNlbServerGroupServerOutput() GetNlbServerGroupServerOutput {
	return i.ToGetNlbServerGroupServerOutputWithContext(context.Background())
}

func (i GetNlbServerGroupServerArgs) ToGetNlbServerGroupServerOutputWithContext(ctx context.Context) GetNlbServerGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbServerGroupServerOutput)
}

// GetNlbServerGroupServerArrayInput is an input type that accepts GetNlbServerGroupServerArray and GetNlbServerGroupServerArrayOutput values.
// You can construct a concrete instance of `GetNlbServerGroupServerArrayInput` via:
//
//	GetNlbServerGroupServerArray{ GetNlbServerGroupServerArgs{...} }
type GetNlbServerGroupServerArrayInput interface {
	pulumi.Input

	ToGetNlbServerGroupServerArrayOutput() GetNlbServerGroupServerArrayOutput
	ToGetNlbServerGroupServerArrayOutputWithContext(context.Context) GetNlbServerGroupServerArrayOutput
}

type GetNlbServerGroupServerArray []GetNlbServerGroupServerInput

func (GetNlbServerGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbServerGroupServer)(nil)).Elem()
}

func (i GetNlbServerGroupServerArray) ToGetNlbServerGroupServerArrayOutput() GetNlbServerGroupServerArrayOutput {
	return i.ToGetNlbServerGroupServerArrayOutputWithContext(context.Background())
}

func (i GetNlbServerGroupServerArray) ToGetNlbServerGroupServerArrayOutputWithContext(ctx context.Context) GetNlbServerGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbServerGroupServerArrayOutput)
}

type GetNlbServerGroupServerOutput struct{ *pulumi.OutputState }

func (GetNlbServerGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbServerGroupServer)(nil)).Elem()
}

func (o GetNlbServerGroupServerOutput) ToGetNlbServerGroupServerOutput() GetNlbServerGroupServerOutput {
	return o
}

func (o GetNlbServerGroupServerOutput) ToGetNlbServerGroupServerOutputWithContext(ctx context.Context) GetNlbServerGroupServerOutput {
	return o
}

// 后端服务器的描述，默认值为空字符串
func (o GetNlbServerGroupServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) string { return v.Description }).(pulumi.StringOutput)
}

// 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
func (o GetNlbServerGroupServerOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) string { return v.InstanceId }).(pulumi.StringOutput)
}

// 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
func (o GetNlbServerGroupServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) string { return v.Ip }).(pulumi.StringOutput)
}

// 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
func (o GetNlbServerGroupServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) int { return v.Port }).(pulumi.IntOutput)
}

// 后端服务器 ID
func (o GetNlbServerGroupServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) string { return v.ServerId }).(pulumi.StringOutput)
}

// 后端服务器的类型
func (o GetNlbServerGroupServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) string { return v.Type }).(pulumi.StringOutput)
}

// 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
func (o GetNlbServerGroupServerOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) int { return v.Weight }).(pulumi.IntOutput)
}

// 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
func (o GetNlbServerGroupServerOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupServer) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetNlbServerGroupServerArrayOutput struct{ *pulumi.OutputState }

func (GetNlbServerGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbServerGroupServer)(nil)).Elem()
}

func (o GetNlbServerGroupServerArrayOutput) ToGetNlbServerGroupServerArrayOutput() GetNlbServerGroupServerArrayOutput {
	return o
}

func (o GetNlbServerGroupServerArrayOutput) ToGetNlbServerGroupServerArrayOutputWithContext(ctx context.Context) GetNlbServerGroupServerArrayOutput {
	return o
}

func (o GetNlbServerGroupServerArrayOutput) Index(i pulumi.IntInput) GetNlbServerGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNlbServerGroupServer {
		return vs[0].([]GetNlbServerGroupServer)[vs[1].(int)]
	}).(GetNlbServerGroupServerOutput)
}

type GetNlbServerGroupTag struct {
	// 标签键
	Key string `pulumi:"key"`
	// 标签值
	Value string `pulumi:"value"`
}

// GetNlbServerGroupTagInput is an input type that accepts GetNlbServerGroupTagArgs and GetNlbServerGroupTagOutput values.
// You can construct a concrete instance of `GetNlbServerGroupTagInput` via:
//
//	GetNlbServerGroupTagArgs{...}
type GetNlbServerGroupTagInput interface {
	pulumi.Input

	ToGetNlbServerGroupTagOutput() GetNlbServerGroupTagOutput
	ToGetNlbServerGroupTagOutputWithContext(context.Context) GetNlbServerGroupTagOutput
}

type GetNlbServerGroupTagArgs struct {
	// 标签键
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNlbServerGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbServerGroupTag)(nil)).Elem()
}

func (i GetNlbServerGroupTagArgs) ToGetNlbServerGroupTagOutput() GetNlbServerGroupTagOutput {
	return i.ToGetNlbServerGroupTagOutputWithContext(context.Background())
}

func (i GetNlbServerGroupTagArgs) ToGetNlbServerGroupTagOutputWithContext(ctx context.Context) GetNlbServerGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbServerGroupTagOutput)
}

// GetNlbServerGroupTagArrayInput is an input type that accepts GetNlbServerGroupTagArray and GetNlbServerGroupTagArrayOutput values.
// You can construct a concrete instance of `GetNlbServerGroupTagArrayInput` via:
//
//	GetNlbServerGroupTagArray{ GetNlbServerGroupTagArgs{...} }
type GetNlbServerGroupTagArrayInput interface {
	pulumi.Input

	ToGetNlbServerGroupTagArrayOutput() GetNlbServerGroupTagArrayOutput
	ToGetNlbServerGroupTagArrayOutputWithContext(context.Context) GetNlbServerGroupTagArrayOutput
}

type GetNlbServerGroupTagArray []GetNlbServerGroupTagInput

func (GetNlbServerGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbServerGroupTag)(nil)).Elem()
}

func (i GetNlbServerGroupTagArray) ToGetNlbServerGroupTagArrayOutput() GetNlbServerGroupTagArrayOutput {
	return i.ToGetNlbServerGroupTagArrayOutputWithContext(context.Background())
}

func (i GetNlbServerGroupTagArray) ToGetNlbServerGroupTagArrayOutputWithContext(ctx context.Context) GetNlbServerGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbServerGroupTagArrayOutput)
}

type GetNlbServerGroupTagOutput struct{ *pulumi.OutputState }

func (GetNlbServerGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbServerGroupTag)(nil)).Elem()
}

func (o GetNlbServerGroupTagOutput) ToGetNlbServerGroupTagOutput() GetNlbServerGroupTagOutput {
	return o
}

func (o GetNlbServerGroupTagOutput) ToGetNlbServerGroupTagOutputWithContext(ctx context.Context) GetNlbServerGroupTagOutput {
	return o
}

// 标签键
func (o GetNlbServerGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值
func (o GetNlbServerGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbServerGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNlbServerGroupTagArrayOutput struct{ *pulumi.OutputState }

func (GetNlbServerGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbServerGroupTag)(nil)).Elem()
}

func (o GetNlbServerGroupTagArrayOutput) ToGetNlbServerGroupTagArrayOutput() GetNlbServerGroupTagArrayOutput {
	return o
}

func (o GetNlbServerGroupTagArrayOutput) ToGetNlbServerGroupTagArrayOutputWithContext(ctx context.Context) GetNlbServerGroupTagArrayOutput {
	return o
}

func (o GetNlbServerGroupTagArrayOutput) Index(i pulumi.IntInput) GetNlbServerGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNlbServerGroupTag {
		return vs[0].([]GetNlbServerGroupTag)[vs[1].(int)]
	}).(GetNlbServerGroupTagOutput)
}

type GetNlbTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetNlbTagInput is an input type that accepts GetNlbTagArgs and GetNlbTagOutput values.
// You can construct a concrete instance of `GetNlbTagInput` via:
//
//	GetNlbTagArgs{...}
type GetNlbTagInput interface {
	pulumi.Input

	ToGetNlbTagOutput() GetNlbTagOutput
	ToGetNlbTagOutputWithContext(context.Context) GetNlbTagOutput
}

type GetNlbTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNlbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbTag)(nil)).Elem()
}

func (i GetNlbTagArgs) ToGetNlbTagOutput() GetNlbTagOutput {
	return i.ToGetNlbTagOutputWithContext(context.Background())
}

func (i GetNlbTagArgs) ToGetNlbTagOutputWithContext(ctx context.Context) GetNlbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbTagOutput)
}

// GetNlbTagArrayInput is an input type that accepts GetNlbTagArray and GetNlbTagArrayOutput values.
// You can construct a concrete instance of `GetNlbTagArrayInput` via:
//
//	GetNlbTagArray{ GetNlbTagArgs{...} }
type GetNlbTagArrayInput interface {
	pulumi.Input

	ToGetNlbTagArrayOutput() GetNlbTagArrayOutput
	ToGetNlbTagArrayOutputWithContext(context.Context) GetNlbTagArrayOutput
}

type GetNlbTagArray []GetNlbTagInput

func (GetNlbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbTag)(nil)).Elem()
}

func (i GetNlbTagArray) ToGetNlbTagArrayOutput() GetNlbTagArrayOutput {
	return i.ToGetNlbTagArrayOutputWithContext(context.Background())
}

func (i GetNlbTagArray) ToGetNlbTagArrayOutputWithContext(ctx context.Context) GetNlbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbTagArrayOutput)
}

type GetNlbTagOutput struct{ *pulumi.OutputState }

func (GetNlbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbTag)(nil)).Elem()
}

func (o GetNlbTagOutput) ToGetNlbTagOutput() GetNlbTagOutput {
	return o
}

func (o GetNlbTagOutput) ToGetNlbTagOutputWithContext(ctx context.Context) GetNlbTagOutput {
	return o
}

// 标签键。
func (o GetNlbTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetNlbTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNlbTagArrayOutput struct{ *pulumi.OutputState }

func (GetNlbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbTag)(nil)).Elem()
}

func (o GetNlbTagArrayOutput) ToGetNlbTagArrayOutput() GetNlbTagArrayOutput {
	return o
}

func (o GetNlbTagArrayOutput) ToGetNlbTagArrayOutputWithContext(ctx context.Context) GetNlbTagArrayOutput {
	return o
}

func (o GetNlbTagArrayOutput) Index(i pulumi.IntInput) GetNlbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNlbTag {
		return vs[0].([]GetNlbTag)[vs[1].(int)]
	}).(GetNlbTagOutput)
}

type GetNlbZoneMapping struct {
	// 网卡ID。
	EniId string `pulumi:"eniId"`
	// NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
	Ipv4Address string `pulumi:"ipv4Address"`
	// NLB实例的公网IPv4 EIP地址。
	Ipv4EipAddress string `pulumi:"ipv4EipAddress"`
	// NLB实例的公网IPv4 EIP ID。
	Ipv4EipId string `pulumi:"ipv4EipId"`
	// NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv4HcStatus string `pulumi:"ipv4HcStatus"`
	// NLB实例的私网IPv4 LIP地址。
	Ipv4LocalAddresses []string `pulumi:"ipv4LocalAddresses"`
	// NLB实例的私网IPv6 VIP地址。
	Ipv6Address string `pulumi:"ipv6Address"`
	// NLB实例关联的IPv6公网带宽的ID。
	Ipv6EipId string `pulumi:"ipv6EipId"`
	// NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv6HcStatus string `pulumi:"ipv6HcStatus"`
	// NLB实例的私网IPv6 LIP地址。
	Ipv6LocalAddresses []string `pulumi:"ipv6LocalAddresses"`
	// NLB实例所属的子网ID。
	SubnetId string `pulumi:"subnetId"`
	// NLB实例所属的可用区ID。
	ZoneId string `pulumi:"zoneId"`
}

// GetNlbZoneMappingInput is an input type that accepts GetNlbZoneMappingArgs and GetNlbZoneMappingOutput values.
// You can construct a concrete instance of `GetNlbZoneMappingInput` via:
//
//	GetNlbZoneMappingArgs{...}
type GetNlbZoneMappingInput interface {
	pulumi.Input

	ToGetNlbZoneMappingOutput() GetNlbZoneMappingOutput
	ToGetNlbZoneMappingOutputWithContext(context.Context) GetNlbZoneMappingOutput
}

type GetNlbZoneMappingArgs struct {
	// 网卡ID。
	EniId pulumi.StringInput `pulumi:"eniId"`
	// NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
	Ipv4Address pulumi.StringInput `pulumi:"ipv4Address"`
	// NLB实例的公网IPv4 EIP地址。
	Ipv4EipAddress pulumi.StringInput `pulumi:"ipv4EipAddress"`
	// NLB实例的公网IPv4 EIP ID。
	Ipv4EipId pulumi.StringInput `pulumi:"ipv4EipId"`
	// NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv4HcStatus pulumi.StringInput `pulumi:"ipv4HcStatus"`
	// NLB实例的私网IPv4 LIP地址。
	Ipv4LocalAddresses pulumi.StringArrayInput `pulumi:"ipv4LocalAddresses"`
	// NLB实例的私网IPv6 VIP地址。
	Ipv6Address pulumi.StringInput `pulumi:"ipv6Address"`
	// NLB实例关联的IPv6公网带宽的ID。
	Ipv6EipId pulumi.StringInput `pulumi:"ipv6EipId"`
	// NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
	Ipv6HcStatus pulumi.StringInput `pulumi:"ipv6HcStatus"`
	// NLB实例的私网IPv6 LIP地址。
	Ipv6LocalAddresses pulumi.StringArrayInput `pulumi:"ipv6LocalAddresses"`
	// NLB实例所属的子网ID。
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// NLB实例所属的可用区ID。
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetNlbZoneMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbZoneMapping)(nil)).Elem()
}

func (i GetNlbZoneMappingArgs) ToGetNlbZoneMappingOutput() GetNlbZoneMappingOutput {
	return i.ToGetNlbZoneMappingOutputWithContext(context.Background())
}

func (i GetNlbZoneMappingArgs) ToGetNlbZoneMappingOutputWithContext(ctx context.Context) GetNlbZoneMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbZoneMappingOutput)
}

// GetNlbZoneMappingArrayInput is an input type that accepts GetNlbZoneMappingArray and GetNlbZoneMappingArrayOutput values.
// You can construct a concrete instance of `GetNlbZoneMappingArrayInput` via:
//
//	GetNlbZoneMappingArray{ GetNlbZoneMappingArgs{...} }
type GetNlbZoneMappingArrayInput interface {
	pulumi.Input

	ToGetNlbZoneMappingArrayOutput() GetNlbZoneMappingArrayOutput
	ToGetNlbZoneMappingArrayOutputWithContext(context.Context) GetNlbZoneMappingArrayOutput
}

type GetNlbZoneMappingArray []GetNlbZoneMappingInput

func (GetNlbZoneMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbZoneMapping)(nil)).Elem()
}

func (i GetNlbZoneMappingArray) ToGetNlbZoneMappingArrayOutput() GetNlbZoneMappingArrayOutput {
	return i.ToGetNlbZoneMappingArrayOutputWithContext(context.Background())
}

func (i GetNlbZoneMappingArray) ToGetNlbZoneMappingArrayOutputWithContext(ctx context.Context) GetNlbZoneMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNlbZoneMappingArrayOutput)
}

type GetNlbZoneMappingOutput struct{ *pulumi.OutputState }

func (GetNlbZoneMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNlbZoneMapping)(nil)).Elem()
}

func (o GetNlbZoneMappingOutput) ToGetNlbZoneMappingOutput() GetNlbZoneMappingOutput {
	return o
}

func (o GetNlbZoneMappingOutput) ToGetNlbZoneMappingOutputWithContext(ctx context.Context) GetNlbZoneMappingOutput {
	return o
}

// 网卡ID。
func (o GetNlbZoneMappingOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.EniId }).(pulumi.StringOutput)
}

// NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
func (o GetNlbZoneMappingOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

// NLB实例的公网IPv4 EIP地址。
func (o GetNlbZoneMappingOutput) Ipv4EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv4EipAddress }).(pulumi.StringOutput)
}

// NLB实例的公网IPv4 EIP ID。
func (o GetNlbZoneMappingOutput) Ipv4EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv4EipId }).(pulumi.StringOutput)
}

// NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
func (o GetNlbZoneMappingOutput) Ipv4HcStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv4HcStatus }).(pulumi.StringOutput)
}

// NLB实例的私网IPv4 LIP地址。
func (o GetNlbZoneMappingOutput) Ipv4LocalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) []string { return v.Ipv4LocalAddresses }).(pulumi.StringArrayOutput)
}

// NLB实例的私网IPv6 VIP地址。
func (o GetNlbZoneMappingOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv6Address }).(pulumi.StringOutput)
}

// NLB实例关联的IPv6公网带宽的ID。
func (o GetNlbZoneMappingOutput) Ipv6EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv6EipId }).(pulumi.StringOutput)
}

// NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
func (o GetNlbZoneMappingOutput) Ipv6HcStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.Ipv6HcStatus }).(pulumi.StringOutput)
}

// NLB实例的私网IPv6 LIP地址。
func (o GetNlbZoneMappingOutput) Ipv6LocalAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) []string { return v.Ipv6LocalAddresses }).(pulumi.StringArrayOutput)
}

// NLB实例所属的子网ID。
func (o GetNlbZoneMappingOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.SubnetId }).(pulumi.StringOutput)
}

// NLB实例所属的可用区ID。
func (o GetNlbZoneMappingOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNlbZoneMapping) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetNlbZoneMappingArrayOutput struct{ *pulumi.OutputState }

func (GetNlbZoneMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNlbZoneMapping)(nil)).Elem()
}

func (o GetNlbZoneMappingArrayOutput) ToGetNlbZoneMappingArrayOutput() GetNlbZoneMappingArrayOutput {
	return o
}

func (o GetNlbZoneMappingArrayOutput) ToGetNlbZoneMappingArrayOutputWithContext(ctx context.Context) GetNlbZoneMappingArrayOutput {
	return o
}

func (o GetNlbZoneMappingArrayOutput) Index(i pulumi.IntInput) GetNlbZoneMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNlbZoneMapping {
		return vs[0].([]GetNlbZoneMapping)[vs[1].(int)]
	}).(GetNlbZoneMappingOutput)
}

type GetRuleRedirectConfig struct {
	// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
	Host string `pulumi:"host"`
	// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
	Path string `pulumi:"path"`
	// 转发规则重定向的端口，取值范围为 1~65535。
	Port string `pulumi:"port"`
	// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
	Protocol string `pulumi:"protocol"`
	// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
	StatusCode string `pulumi:"statusCode"`
}

// GetRuleRedirectConfigInput is an input type that accepts GetRuleRedirectConfigArgs and GetRuleRedirectConfigOutput values.
// You can construct a concrete instance of `GetRuleRedirectConfigInput` via:
//
//	GetRuleRedirectConfigArgs{...}
type GetRuleRedirectConfigInput interface {
	pulumi.Input

	ToGetRuleRedirectConfigOutput() GetRuleRedirectConfigOutput
	ToGetRuleRedirectConfigOutputWithContext(context.Context) GetRuleRedirectConfigOutput
}

type GetRuleRedirectConfigArgs struct {
	// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
	Host pulumi.StringInput `pulumi:"host"`
	// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
	Path pulumi.StringInput `pulumi:"path"`
	// 转发规则重定向的端口，取值范围为 1~65535。
	Port pulumi.StringInput `pulumi:"port"`
	// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
	StatusCode pulumi.StringInput `pulumi:"statusCode"`
}

func (GetRuleRedirectConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRedirectConfig)(nil)).Elem()
}

func (i GetRuleRedirectConfigArgs) ToGetRuleRedirectConfigOutput() GetRuleRedirectConfigOutput {
	return i.ToGetRuleRedirectConfigOutputWithContext(context.Background())
}

func (i GetRuleRedirectConfigArgs) ToGetRuleRedirectConfigOutputWithContext(ctx context.Context) GetRuleRedirectConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleRedirectConfigOutput)
}

type GetRuleRedirectConfigOutput struct{ *pulumi.OutputState }

func (GetRuleRedirectConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleRedirectConfig)(nil)).Elem()
}

func (o GetRuleRedirectConfigOutput) ToGetRuleRedirectConfigOutput() GetRuleRedirectConfigOutput {
	return o
}

func (o GetRuleRedirectConfigOutput) ToGetRuleRedirectConfigOutputWithContext(ctx context.Context) GetRuleRedirectConfigOutput {
	return o
}

// 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
func (o GetRuleRedirectConfigOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRedirectConfig) string { return v.Host }).(pulumi.StringOutput)
}

// 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&’、‘＝’等字符。长度限制为1 ～ 128个字符。
func (o GetRuleRedirectConfigOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRedirectConfig) string { return v.Path }).(pulumi.StringOutput)
}

// 转发规则重定向的端口，取值范围为 1~65535。
func (o GetRuleRedirectConfigOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRedirectConfig) string { return v.Port }).(pulumi.StringOutput)
}

// 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
func (o GetRuleRedirectConfigOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRedirectConfig) string { return v.Protocol }).(pulumi.StringOutput)
}

// 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
func (o GetRuleRedirectConfigOutput) StatusCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleRedirectConfig) string { return v.StatusCode }).(pulumi.StringOutput)
}

type GetRuleTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetRuleTagInput is an input type that accepts GetRuleTagArgs and GetRuleTagOutput values.
// You can construct a concrete instance of `GetRuleTagInput` via:
//
//	GetRuleTagArgs{...}
type GetRuleTagInput interface {
	pulumi.Input

	ToGetRuleTagOutput() GetRuleTagOutput
	ToGetRuleTagOutputWithContext(context.Context) GetRuleTagOutput
}

type GetRuleTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleTag)(nil)).Elem()
}

func (i GetRuleTagArgs) ToGetRuleTagOutput() GetRuleTagOutput {
	return i.ToGetRuleTagOutputWithContext(context.Background())
}

func (i GetRuleTagArgs) ToGetRuleTagOutputWithContext(ctx context.Context) GetRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleTagOutput)
}

// GetRuleTagArrayInput is an input type that accepts GetRuleTagArray and GetRuleTagArrayOutput values.
// You can construct a concrete instance of `GetRuleTagArrayInput` via:
//
//	GetRuleTagArray{ GetRuleTagArgs{...} }
type GetRuleTagArrayInput interface {
	pulumi.Input

	ToGetRuleTagArrayOutput() GetRuleTagArrayOutput
	ToGetRuleTagArrayOutputWithContext(context.Context) GetRuleTagArrayOutput
}

type GetRuleTagArray []GetRuleTagInput

func (GetRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleTag)(nil)).Elem()
}

func (i GetRuleTagArray) ToGetRuleTagArrayOutput() GetRuleTagArrayOutput {
	return i.ToGetRuleTagArrayOutputWithContext(context.Background())
}

func (i GetRuleTagArray) ToGetRuleTagArrayOutputWithContext(ctx context.Context) GetRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRuleTagArrayOutput)
}

type GetRuleTagOutput struct{ *pulumi.OutputState }

func (GetRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRuleTag)(nil)).Elem()
}

func (o GetRuleTagOutput) ToGetRuleTagOutput() GetRuleTagOutput {
	return o
}

func (o GetRuleTagOutput) ToGetRuleTagOutputWithContext(ctx context.Context) GetRuleTagOutput {
	return o
}

// 标签键。
func (o GetRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetRuleTagArrayOutput struct{ *pulumi.OutputState }

func (GetRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRuleTag)(nil)).Elem()
}

func (o GetRuleTagArrayOutput) ToGetRuleTagArrayOutput() GetRuleTagArrayOutput {
	return o
}

func (o GetRuleTagArrayOutput) ToGetRuleTagArrayOutputWithContext(ctx context.Context) GetRuleTagArrayOutput {
	return o
}

func (o GetRuleTagArrayOutput) Index(i pulumi.IntInput) GetRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRuleTag {
		return vs[0].([]GetRuleTag)[vs[1].(int)]
	}).(GetRuleTagOutput)
}

type GetServerGroupListener struct {
	// 监听器的ID。
	ListenerId string `pulumi:"listenerId"`
}

// GetServerGroupListenerInput is an input type that accepts GetServerGroupListenerArgs and GetServerGroupListenerOutput values.
// You can construct a concrete instance of `GetServerGroupListenerInput` via:
//
//	GetServerGroupListenerArgs{...}
type GetServerGroupListenerInput interface {
	pulumi.Input

	ToGetServerGroupListenerOutput() GetServerGroupListenerOutput
	ToGetServerGroupListenerOutputWithContext(context.Context) GetServerGroupListenerOutput
}

type GetServerGroupListenerArgs struct {
	// 监听器的ID。
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
}

func (GetServerGroupListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupListener)(nil)).Elem()
}

func (i GetServerGroupListenerArgs) ToGetServerGroupListenerOutput() GetServerGroupListenerOutput {
	return i.ToGetServerGroupListenerOutputWithContext(context.Background())
}

func (i GetServerGroupListenerArgs) ToGetServerGroupListenerOutputWithContext(ctx context.Context) GetServerGroupListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupListenerOutput)
}

// GetServerGroupListenerArrayInput is an input type that accepts GetServerGroupListenerArray and GetServerGroupListenerArrayOutput values.
// You can construct a concrete instance of `GetServerGroupListenerArrayInput` via:
//
//	GetServerGroupListenerArray{ GetServerGroupListenerArgs{...} }
type GetServerGroupListenerArrayInput interface {
	pulumi.Input

	ToGetServerGroupListenerArrayOutput() GetServerGroupListenerArrayOutput
	ToGetServerGroupListenerArrayOutputWithContext(context.Context) GetServerGroupListenerArrayOutput
}

type GetServerGroupListenerArray []GetServerGroupListenerInput

func (GetServerGroupListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupListener)(nil)).Elem()
}

func (i GetServerGroupListenerArray) ToGetServerGroupListenerArrayOutput() GetServerGroupListenerArrayOutput {
	return i.ToGetServerGroupListenerArrayOutputWithContext(context.Background())
}

func (i GetServerGroupListenerArray) ToGetServerGroupListenerArrayOutputWithContext(ctx context.Context) GetServerGroupListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupListenerArrayOutput)
}

type GetServerGroupListenerOutput struct{ *pulumi.OutputState }

func (GetServerGroupListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupListener)(nil)).Elem()
}

func (o GetServerGroupListenerOutput) ToGetServerGroupListenerOutput() GetServerGroupListenerOutput {
	return o
}

func (o GetServerGroupListenerOutput) ToGetServerGroupListenerOutputWithContext(ctx context.Context) GetServerGroupListenerOutput {
	return o
}

// 监听器的ID。
func (o GetServerGroupListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupListener) string { return v.ListenerId }).(pulumi.StringOutput)
}

type GetServerGroupListenerArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupListener)(nil)).Elem()
}

func (o GetServerGroupListenerArrayOutput) ToGetServerGroupListenerArrayOutput() GetServerGroupListenerArrayOutput {
	return o
}

func (o GetServerGroupListenerArrayOutput) ToGetServerGroupListenerArrayOutputWithContext(ctx context.Context) GetServerGroupListenerArrayOutput {
	return o
}

func (o GetServerGroupListenerArrayOutput) Index(i pulumi.IntInput) GetServerGroupListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupListener {
		return vs[0].([]GetServerGroupListener)[vs[1].(int)]
	}).(GetServerGroupListenerOutput)
}

type GetServerGroupServer struct {
	// 是否开启全端口转发。on：开启。off（默认值）：关闭。
	AnyPortEnabled string `pulumi:"anyPortEnabled"`
	// 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
	Description string `pulumi:"description"`
	// 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
	InstanceId string `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
	Ip string `pulumi:"ip"`
	// 后端服务器接收请求的端口号。取值范围为1～65535。
	Port int `pulumi:"port"`
	// 后端服务器ID。
	ServerId string `pulumi:"serverId"`
	// 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
	Type string `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
	Weight int `pulumi:"weight"`
}

// GetServerGroupServerInput is an input type that accepts GetServerGroupServerArgs and GetServerGroupServerOutput values.
// You can construct a concrete instance of `GetServerGroupServerInput` via:
//
//	GetServerGroupServerArgs{...}
type GetServerGroupServerInput interface {
	pulumi.Input

	ToGetServerGroupServerOutput() GetServerGroupServerOutput
	ToGetServerGroupServerOutputWithContext(context.Context) GetServerGroupServerOutput
}

type GetServerGroupServerArgs struct {
	// 是否开启全端口转发。on：开启。off（默认值）：关闭。
	AnyPortEnabled pulumi.StringInput `pulumi:"anyPortEnabled"`
	// 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
	Description pulumi.StringInput `pulumi:"description"`
	// 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
	Ip pulumi.StringInput `pulumi:"ip"`
	// 后端服务器接收请求的端口号。取值范围为1～65535。
	Port pulumi.IntInput `pulumi:"port"`
	// 后端服务器ID。
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
	Type pulumi.StringInput `pulumi:"type"`
	// 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetServerGroupServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupServer)(nil)).Elem()
}

func (i GetServerGroupServerArgs) ToGetServerGroupServerOutput() GetServerGroupServerOutput {
	return i.ToGetServerGroupServerOutputWithContext(context.Background())
}

func (i GetServerGroupServerArgs) ToGetServerGroupServerOutputWithContext(ctx context.Context) GetServerGroupServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupServerOutput)
}

// GetServerGroupServerArrayInput is an input type that accepts GetServerGroupServerArray and GetServerGroupServerArrayOutput values.
// You can construct a concrete instance of `GetServerGroupServerArrayInput` via:
//
//	GetServerGroupServerArray{ GetServerGroupServerArgs{...} }
type GetServerGroupServerArrayInput interface {
	pulumi.Input

	ToGetServerGroupServerArrayOutput() GetServerGroupServerArrayOutput
	ToGetServerGroupServerArrayOutputWithContext(context.Context) GetServerGroupServerArrayOutput
}

type GetServerGroupServerArray []GetServerGroupServerInput

func (GetServerGroupServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupServer)(nil)).Elem()
}

func (i GetServerGroupServerArray) ToGetServerGroupServerArrayOutput() GetServerGroupServerArrayOutput {
	return i.ToGetServerGroupServerArrayOutputWithContext(context.Background())
}

func (i GetServerGroupServerArray) ToGetServerGroupServerArrayOutputWithContext(ctx context.Context) GetServerGroupServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupServerArrayOutput)
}

type GetServerGroupServerOutput struct{ *pulumi.OutputState }

func (GetServerGroupServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupServer)(nil)).Elem()
}

func (o GetServerGroupServerOutput) ToGetServerGroupServerOutput() GetServerGroupServerOutput {
	return o
}

func (o GetServerGroupServerOutput) ToGetServerGroupServerOutputWithContext(ctx context.Context) GetServerGroupServerOutput {
	return o
}

// 是否开启全端口转发。on：开启。off（默认值）：关闭。
func (o GetServerGroupServerOutput) AnyPortEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServer) string { return v.AnyPortEnabled }).(pulumi.StringOutput)
}

// 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
func (o GetServerGroupServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServer) string { return v.Description }).(pulumi.StringOutput)
}

// 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
func (o GetServerGroupServerOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServer) string { return v.InstanceId }).(pulumi.StringOutput)
}

// 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
func (o GetServerGroupServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServer) string { return v.Ip }).(pulumi.StringOutput)
}

// 后端服务器接收请求的端口号。取值范围为1～65535。
func (o GetServerGroupServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupServer) int { return v.Port }).(pulumi.IntOutput)
}

// 后端服务器ID。
func (o GetServerGroupServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServer) string { return v.ServerId }).(pulumi.StringOutput)
}

// 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
func (o GetServerGroupServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupServer) string { return v.Type }).(pulumi.StringOutput)
}

// 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
func (o GetServerGroupServerOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetServerGroupServer) int { return v.Weight }).(pulumi.IntOutput)
}

type GetServerGroupServerArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupServer)(nil)).Elem()
}

func (o GetServerGroupServerArrayOutput) ToGetServerGroupServerArrayOutput() GetServerGroupServerArrayOutput {
	return o
}

func (o GetServerGroupServerArrayOutput) ToGetServerGroupServerArrayOutputWithContext(ctx context.Context) GetServerGroupServerArrayOutput {
	return o
}

func (o GetServerGroupServerArrayOutput) Index(i pulumi.IntInput) GetServerGroupServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupServer {
		return vs[0].([]GetServerGroupServer)[vs[1].(int)]
	}).(GetServerGroupServerOutput)
}

type GetServerGroupTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetServerGroupTagInput is an input type that accepts GetServerGroupTagArgs and GetServerGroupTagOutput values.
// You can construct a concrete instance of `GetServerGroupTagInput` via:
//
//	GetServerGroupTagArgs{...}
type GetServerGroupTagInput interface {
	pulumi.Input

	ToGetServerGroupTagOutput() GetServerGroupTagOutput
	ToGetServerGroupTagOutputWithContext(context.Context) GetServerGroupTagOutput
}

type GetServerGroupTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetServerGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupTag)(nil)).Elem()
}

func (i GetServerGroupTagArgs) ToGetServerGroupTagOutput() GetServerGroupTagOutput {
	return i.ToGetServerGroupTagOutputWithContext(context.Background())
}

func (i GetServerGroupTagArgs) ToGetServerGroupTagOutputWithContext(ctx context.Context) GetServerGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupTagOutput)
}

// GetServerGroupTagArrayInput is an input type that accepts GetServerGroupTagArray and GetServerGroupTagArrayOutput values.
// You can construct a concrete instance of `GetServerGroupTagArrayInput` via:
//
//	GetServerGroupTagArray{ GetServerGroupTagArgs{...} }
type GetServerGroupTagArrayInput interface {
	pulumi.Input

	ToGetServerGroupTagArrayOutput() GetServerGroupTagArrayOutput
	ToGetServerGroupTagArrayOutputWithContext(context.Context) GetServerGroupTagArrayOutput
}

type GetServerGroupTagArray []GetServerGroupTagInput

func (GetServerGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupTag)(nil)).Elem()
}

func (i GetServerGroupTagArray) ToGetServerGroupTagArrayOutput() GetServerGroupTagArrayOutput {
	return i.ToGetServerGroupTagArrayOutputWithContext(context.Background())
}

func (i GetServerGroupTagArray) ToGetServerGroupTagArrayOutputWithContext(ctx context.Context) GetServerGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServerGroupTagArrayOutput)
}

type GetServerGroupTagOutput struct{ *pulumi.OutputState }

func (GetServerGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServerGroupTag)(nil)).Elem()
}

func (o GetServerGroupTagOutput) ToGetServerGroupTagOutput() GetServerGroupTagOutput {
	return o
}

func (o GetServerGroupTagOutput) ToGetServerGroupTagOutputWithContext(ctx context.Context) GetServerGroupTagOutput {
	return o
}

func (o GetServerGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetServerGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetServerGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetServerGroupTagArrayOutput struct{ *pulumi.OutputState }

func (GetServerGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServerGroupTag)(nil)).Elem()
}

func (o GetServerGroupTagArrayOutput) ToGetServerGroupTagArrayOutput() GetServerGroupTagArrayOutput {
	return o
}

func (o GetServerGroupTagArrayOutput) ToGetServerGroupTagArrayOutputWithContext(ctx context.Context) GetServerGroupTagArrayOutput {
	return o
}

func (o GetServerGroupTagArrayOutput) Index(i pulumi.IntInput) GetServerGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServerGroupTag {
		return vs[0].([]GetServerGroupTag)[vs[1].(int)]
	}).(GetServerGroupTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclAclEntryInput)(nil)).Elem(), AclAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAclEntryArrayInput)(nil)).Elem(), AclAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclListenerInput)(nil)).Elem(), AclListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclListenerArrayInput)(nil)).Elem(), AclListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTagInput)(nil)).Elem(), AclTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclTagArrayInput)(nil)).Elem(), AclTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTagInput)(nil)).Elem(), CertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTagArrayInput)(nil)).Elem(), CertificateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbAccessLogInput)(nil)).Elem(), ClbAccessLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbAccessLogPtrInput)(nil)).Elem(), ClbAccessLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEipInput)(nil)).Elem(), ClbEipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEipPtrInput)(nil)).Elem(), ClbEipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEniInput)(nil)).Elem(), ClbEniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEniPtrInput)(nil)).Elem(), ClbEniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEnisInput)(nil)).Elem(), ClbEnisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEnisPtrInput)(nil)).Elem(), ClbEnisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbListenerInput)(nil)).Elem(), ClbListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbListenerArrayInput)(nil)).Elem(), ClbListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbServerGroupInput)(nil)).Elem(), ClbServerGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbServerGroupArrayInput)(nil)).Elem(), ClbServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbTagInput)(nil)).Elem(), ClbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbTagArrayInput)(nil)).Elem(), ClbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckPtrInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagInput)(nil)).Elem(), ListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerTagArrayInput)(nil)).Elem(), ListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerHealthInput)(nil)).Elem(), NlbListenerHealthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerHealthArrayInput)(nil)).Elem(), NlbListenerHealthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerTagInput)(nil)).Elem(), NlbListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerTagArrayInput)(nil)).Elem(), NlbListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupHealthCheckInput)(nil)).Elem(), NlbServerGroupHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupHealthCheckPtrInput)(nil)).Elem(), NlbServerGroupHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupServerInput)(nil)).Elem(), NlbServerGroupServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupServerArrayInput)(nil)).Elem(), NlbServerGroupServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupTagInput)(nil)).Elem(), NlbServerGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbServerGroupTagArrayInput)(nil)).Elem(), NlbServerGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbTagInput)(nil)).Elem(), NlbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbTagArrayInput)(nil)).Elem(), NlbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbZoneMappingInput)(nil)).Elem(), NlbZoneMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbZoneMappingArrayInput)(nil)).Elem(), NlbZoneMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRedirectConfigInput)(nil)).Elem(), RuleRedirectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleRedirectConfigPtrInput)(nil)).Elem(), RuleRedirectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTagInput)(nil)).Elem(), RuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleTagArrayInput)(nil)).Elem(), RuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupListenerInput)(nil)).Elem(), ServerGroupListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupListenerArrayInput)(nil)).Elem(), ServerGroupListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServerInput)(nil)).Elem(), ServerGroupServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServerArrayInput)(nil)).Elem(), ServerGroupServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupTagInput)(nil)).Elem(), ServerGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupTagArrayInput)(nil)).Elem(), ServerGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclAclEntryInput)(nil)).Elem(), GetAclAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclAclEntryArrayInput)(nil)).Elem(), GetAclAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclListenerInput)(nil)).Elem(), GetAclListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclListenerArrayInput)(nil)).Elem(), GetAclListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTagInput)(nil)).Elem(), GetAclTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAclTagArrayInput)(nil)).Elem(), GetAclTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateTagInput)(nil)).Elem(), GetCertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateTagArrayInput)(nil)).Elem(), GetCertificateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbAccessLogInput)(nil)).Elem(), GetClbAccessLogArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbEipInput)(nil)).Elem(), GetClbEipArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbEniInput)(nil)).Elem(), GetClbEniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbEnisInput)(nil)).Elem(), GetClbEnisArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbListenerInput)(nil)).Elem(), GetClbListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbListenerArrayInput)(nil)).Elem(), GetClbListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbServerGroupInput)(nil)).Elem(), GetClbServerGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbServerGroupArrayInput)(nil)).Elem(), GetClbServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbTagInput)(nil)).Elem(), GetClbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClbTagArrayInput)(nil)).Elem(), GetClbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerHealthCheckInput)(nil)).Elem(), GetListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerTagInput)(nil)).Elem(), GetListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetListenerTagArrayInput)(nil)).Elem(), GetListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbListenerHealthInput)(nil)).Elem(), GetNlbListenerHealthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbListenerHealthArrayInput)(nil)).Elem(), GetNlbListenerHealthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbListenerTagInput)(nil)).Elem(), GetNlbListenerTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbListenerTagArrayInput)(nil)).Elem(), GetNlbListenerTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbServerGroupHealthCheckInput)(nil)).Elem(), GetNlbServerGroupHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbServerGroupServerInput)(nil)).Elem(), GetNlbServerGroupServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbServerGroupServerArrayInput)(nil)).Elem(), GetNlbServerGroupServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbServerGroupTagInput)(nil)).Elem(), GetNlbServerGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbServerGroupTagArrayInput)(nil)).Elem(), GetNlbServerGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbTagInput)(nil)).Elem(), GetNlbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbTagArrayInput)(nil)).Elem(), GetNlbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbZoneMappingInput)(nil)).Elem(), GetNlbZoneMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNlbZoneMappingArrayInput)(nil)).Elem(), GetNlbZoneMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleRedirectConfigInput)(nil)).Elem(), GetRuleRedirectConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleTagInput)(nil)).Elem(), GetRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRuleTagArrayInput)(nil)).Elem(), GetRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupListenerInput)(nil)).Elem(), GetServerGroupListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupListenerArrayInput)(nil)).Elem(), GetServerGroupListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupServerInput)(nil)).Elem(), GetServerGroupServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupServerArrayInput)(nil)).Elem(), GetServerGroupServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupTagInput)(nil)).Elem(), GetServerGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServerGroupTagArrayInput)(nil)).Elem(), GetServerGroupTagArray{})
	pulumi.RegisterOutputType(AclAclEntryOutput{})
	pulumi.RegisterOutputType(AclAclEntryArrayOutput{})
	pulumi.RegisterOutputType(AclListenerOutput{})
	pulumi.RegisterOutputType(AclListenerArrayOutput{})
	pulumi.RegisterOutputType(AclTagOutput{})
	pulumi.RegisterOutputType(AclTagArrayOutput{})
	pulumi.RegisterOutputType(CertificateTagOutput{})
	pulumi.RegisterOutputType(CertificateTagArrayOutput{})
	pulumi.RegisterOutputType(ClbAccessLogOutput{})
	pulumi.RegisterOutputType(ClbAccessLogPtrOutput{})
	pulumi.RegisterOutputType(ClbEipOutput{})
	pulumi.RegisterOutputType(ClbEipPtrOutput{})
	pulumi.RegisterOutputType(ClbEniOutput{})
	pulumi.RegisterOutputType(ClbEniPtrOutput{})
	pulumi.RegisterOutputType(ClbEnisOutput{})
	pulumi.RegisterOutputType(ClbEnisPtrOutput{})
	pulumi.RegisterOutputType(ClbListenerOutput{})
	pulumi.RegisterOutputType(ClbListenerArrayOutput{})
	pulumi.RegisterOutputType(ClbServerGroupOutput{})
	pulumi.RegisterOutputType(ClbServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ClbTagOutput{})
	pulumi.RegisterOutputType(ClbTagArrayOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(ListenerTagOutput{})
	pulumi.RegisterOutputType(ListenerTagArrayOutput{})
	pulumi.RegisterOutputType(NlbListenerHealthOutput{})
	pulumi.RegisterOutputType(NlbListenerHealthArrayOutput{})
	pulumi.RegisterOutputType(NlbListenerTagOutput{})
	pulumi.RegisterOutputType(NlbListenerTagArrayOutput{})
	pulumi.RegisterOutputType(NlbServerGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(NlbServerGroupHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(NlbServerGroupServerOutput{})
	pulumi.RegisterOutputType(NlbServerGroupServerArrayOutput{})
	pulumi.RegisterOutputType(NlbServerGroupTagOutput{})
	pulumi.RegisterOutputType(NlbServerGroupTagArrayOutput{})
	pulumi.RegisterOutputType(NlbTagOutput{})
	pulumi.RegisterOutputType(NlbTagArrayOutput{})
	pulumi.RegisterOutputType(NlbZoneMappingOutput{})
	pulumi.RegisterOutputType(NlbZoneMappingArrayOutput{})
	pulumi.RegisterOutputType(RuleRedirectConfigOutput{})
	pulumi.RegisterOutputType(RuleRedirectConfigPtrOutput{})
	pulumi.RegisterOutputType(RuleTagOutput{})
	pulumi.RegisterOutputType(RuleTagArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupListenerOutput{})
	pulumi.RegisterOutputType(ServerGroupListenerArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupServerOutput{})
	pulumi.RegisterOutputType(ServerGroupServerArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupTagOutput{})
	pulumi.RegisterOutputType(ServerGroupTagArrayOutput{})
	pulumi.RegisterOutputType(GetAclAclEntryOutput{})
	pulumi.RegisterOutputType(GetAclAclEntryArrayOutput{})
	pulumi.RegisterOutputType(GetAclListenerOutput{})
	pulumi.RegisterOutputType(GetAclListenerArrayOutput{})
	pulumi.RegisterOutputType(GetAclTagOutput{})
	pulumi.RegisterOutputType(GetAclTagArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateTagOutput{})
	pulumi.RegisterOutputType(GetCertificateTagArrayOutput{})
	pulumi.RegisterOutputType(GetClbAccessLogOutput{})
	pulumi.RegisterOutputType(GetClbEipOutput{})
	pulumi.RegisterOutputType(GetClbEniOutput{})
	pulumi.RegisterOutputType(GetClbEnisOutput{})
	pulumi.RegisterOutputType(GetClbListenerOutput{})
	pulumi.RegisterOutputType(GetClbListenerArrayOutput{})
	pulumi.RegisterOutputType(GetClbServerGroupOutput{})
	pulumi.RegisterOutputType(GetClbServerGroupArrayOutput{})
	pulumi.RegisterOutputType(GetClbTagOutput{})
	pulumi.RegisterOutputType(GetClbTagArrayOutput{})
	pulumi.RegisterOutputType(GetListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(GetListenerTagOutput{})
	pulumi.RegisterOutputType(GetListenerTagArrayOutput{})
	pulumi.RegisterOutputType(GetNlbListenerHealthOutput{})
	pulumi.RegisterOutputType(GetNlbListenerHealthArrayOutput{})
	pulumi.RegisterOutputType(GetNlbListenerTagOutput{})
	pulumi.RegisterOutputType(GetNlbListenerTagArrayOutput{})
	pulumi.RegisterOutputType(GetNlbServerGroupHealthCheckOutput{})
	pulumi.RegisterOutputType(GetNlbServerGroupServerOutput{})
	pulumi.RegisterOutputType(GetNlbServerGroupServerArrayOutput{})
	pulumi.RegisterOutputType(GetNlbServerGroupTagOutput{})
	pulumi.RegisterOutputType(GetNlbServerGroupTagArrayOutput{})
	pulumi.RegisterOutputType(GetNlbTagOutput{})
	pulumi.RegisterOutputType(GetNlbTagArrayOutput{})
	pulumi.RegisterOutputType(GetNlbZoneMappingOutput{})
	pulumi.RegisterOutputType(GetNlbZoneMappingArrayOutput{})
	pulumi.RegisterOutputType(GetRuleRedirectConfigOutput{})
	pulumi.RegisterOutputType(GetRuleTagOutput{})
	pulumi.RegisterOutputType(GetRuleTagArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupListenerOutput{})
	pulumi.RegisterOutputType(GetServerGroupListenerArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupServerOutput{})
	pulumi.RegisterOutputType(GetServerGroupServerArrayOutput{})
	pulumi.RegisterOutputType(GetServerGroupTagOutput{})
	pulumi.RegisterOutputType(GetServerGroupTagArrayOutput{})
}
