// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 负载均衡实例
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/clb:Clb example "load_balancer_id"
// ```
type Clb struct {
	pulumi.CustomResourceState

	// 负载均衡实例中访问日志的信息
	AccessLog ClbAccessLogOutput `pulumi:"accessLog"`
	// 负载均衡实例所属的账号ID
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// 负载均衡实例的IP地址类型
	AddressIpVersion pulumi.StringOutput `pulumi:"addressIpVersion"`
	// 允许的多个端口范围
	AllowedPorts pulumi.StringArrayOutput `pulumi:"allowedPorts"`
	// 负载均衡实例是否被锁定
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// 是否开启bypass安全组功能
	BypassSecurityGroupEnabled pulumi.StringOutput `pulumi:"bypassSecurityGroupEnabled"`
	// 负载均衡实例的创建时间
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// 负载均衡实例的预期回收时间
	DeletedTime pulumi.StringOutput `pulumi:"deletedTime"`
	// 负载均衡实例的描述
	Description pulumi.StringOutput `pulumi:"description"`
	// 负载均衡实例的公网IP的信息
	Eip ClbEipOutput `pulumi:"eip"`
	// 公网IP地址
	EipAddress pulumi.StringOutput `pulumi:"eipAddress"`
	// 公网IP ID
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// 负载均衡实例的启用状态
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// 负载均衡实例的私网IPv4地址信息
	Eni ClbEniOutput `pulumi:"eni"`
	// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
	EniAddressNum pulumi.Float64Output `pulumi:"eniAddressNum"`
	// 负载均衡实例的私网IPv6地址
	EniIpv6Address pulumi.StringOutput `pulumi:"eniIpv6Address"`
	// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
	Enis ClbEnisOutput `pulumi:"enis"`
	// 独占集群Id
	ExclusiveClusterId pulumi.StringOutput `pulumi:"exclusiveClusterId"`
	// 负载均衡实例到期时间
	ExpiredTime pulumi.StringOutput    `pulumi:"expiredTime"`
	Listeners   ClbListenerArrayOutput `pulumi:"listeners"`
	// 负载均衡实例计费方式
	LoadBalancerBillingType pulumi.Float64Output `pulumi:"loadBalancerBillingType"`
	// 负载均衡实例ID
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// 负载均衡实例的名称
	LoadBalancerName pulumi.StringOutput `pulumi:"loadBalancerName"`
	// 负载均衡实例的规格
	LoadBalancerSpec pulumi.StringOutput `pulumi:"loadBalancerSpec"`
	// 负载均衡实例被冻结的原因
	LockReason pulumi.StringOutput `pulumi:"lockReason"`
	// 负载均衡实例的主可用区ID
	MasterZoneId pulumi.StringOutput `pulumi:"masterZoneId"`
	// 设置修改保护状态的原因
	ModificationProtectionReason pulumi.StringOutput `pulumi:"modificationProtectionReason"`
	// 负载均衡实例在控制台上修改保护的状态
	ModificationProtectionStatus pulumi.StringOutput `pulumi:"modificationProtectionStatus"`
	// 是否为新架构
	NewArch pulumi.BoolOutput `pulumi:"newArch"`
	// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
	OrderId pulumi.StringOutput `pulumi:"orderId"`
	// 负载均衡实例的冻结时间
	OverdueTime pulumi.StringOutput `pulumi:"overdueTime"`
	// 包年包月计费类型的时长数量
	Period pulumi.Float64Output `pulumi:"period"`
	// 包年包月计费类型的时长单位
	PeriodUnit pulumi.StringOutput `pulumi:"periodUnit"`
	// CLB实例所属项目的名称
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 请求的Region
	RegionId     pulumi.StringOutput       `pulumi:"regionId"`
	ServerGroups ClbServerGroupArrayOutput `pulumi:"serverGroups"`
	// CLB实例是否为托管资源
	ServiceManaged pulumi.BoolOutput `pulumi:"serviceManaged"`
	// 负载均衡实例的备可用区ID
	SlaveZoneId pulumi.StringOutput `pulumi:"slaveZoneId"`
	// 负载均衡实例状态
	Status pulumi.StringOutput `pulumi:"status"`
	// 负载均衡实例所属VPC内的子网ID
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	Tags     ClbTagArrayOutput   `pulumi:"tags"`
	// 是否开启 TCP Timestamp 清除功能
	TimestampRemoveEnabled pulumi.StringOutput `pulumi:"timestampRemoveEnabled"`
	// 负载均衡实例的类型
	Type pulumi.StringOutput `pulumi:"type"`
	// 负载均衡实例的最近操作时间
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// 负载均衡实例所属的VPC ID
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// 负载均衡实例的可用区类型
	ZoneType pulumi.StringOutput `pulumi:"zoneType"`
}

// NewClb registers a new resource with the given unique name, arguments, and options.
func NewClb(ctx *pulumi.Context,
	name string, args *ClbArgs, opts ...pulumi.ResourceOption) (*Clb, error) {
	if args == nil {
		args = &ClbArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Clb
	err := ctx.RegisterResource("volcenginecc:clb/clb:Clb", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClb gets an existing Clb resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClb(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClbState, opts ...pulumi.ResourceOption) (*Clb, error) {
	var resource Clb
	err := ctx.ReadResource("volcenginecc:clb/clb:Clb", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Clb resources.
type clbState struct {
	// 负载均衡实例中访问日志的信息
	AccessLog *ClbAccessLog `pulumi:"accessLog"`
	// 负载均衡实例所属的账号ID
	AccountId *string `pulumi:"accountId"`
	// 负载均衡实例的IP地址类型
	AddressIpVersion *string `pulumi:"addressIpVersion"`
	// 允许的多个端口范围
	AllowedPorts []string `pulumi:"allowedPorts"`
	// 负载均衡实例是否被锁定
	BusinessStatus *string `pulumi:"businessStatus"`
	// 是否开启bypass安全组功能
	BypassSecurityGroupEnabled *string `pulumi:"bypassSecurityGroupEnabled"`
	// 负载均衡实例的创建时间
	CreateTime *string `pulumi:"createTime"`
	// 负载均衡实例的预期回收时间
	DeletedTime *string `pulumi:"deletedTime"`
	// 负载均衡实例的描述
	Description *string `pulumi:"description"`
	// 负载均衡实例的公网IP的信息
	Eip *ClbEip `pulumi:"eip"`
	// 公网IP地址
	EipAddress *string `pulumi:"eipAddress"`
	// 公网IP ID
	EipId *string `pulumi:"eipId"`
	// 负载均衡实例的启用状态
	Enabled *bool `pulumi:"enabled"`
	// 负载均衡实例的私网IPv4地址信息
	Eni *ClbEni `pulumi:"eni"`
	// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
	EniAddressNum *float64 `pulumi:"eniAddressNum"`
	// 负载均衡实例的私网IPv6地址
	EniIpv6Address *string `pulumi:"eniIpv6Address"`
	// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
	Enis *ClbEnis `pulumi:"enis"`
	// 独占集群Id
	ExclusiveClusterId *string `pulumi:"exclusiveClusterId"`
	// 负载均衡实例到期时间
	ExpiredTime *string       `pulumi:"expiredTime"`
	Listeners   []ClbListener `pulumi:"listeners"`
	// 负载均衡实例计费方式
	LoadBalancerBillingType *float64 `pulumi:"loadBalancerBillingType"`
	// 负载均衡实例ID
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// 负载均衡实例的名称
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// 负载均衡实例的规格
	LoadBalancerSpec *string `pulumi:"loadBalancerSpec"`
	// 负载均衡实例被冻结的原因
	LockReason *string `pulumi:"lockReason"`
	// 负载均衡实例的主可用区ID
	MasterZoneId *string `pulumi:"masterZoneId"`
	// 设置修改保护状态的原因
	ModificationProtectionReason *string `pulumi:"modificationProtectionReason"`
	// 负载均衡实例在控制台上修改保护的状态
	ModificationProtectionStatus *string `pulumi:"modificationProtectionStatus"`
	// 是否为新架构
	NewArch *bool `pulumi:"newArch"`
	// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
	OrderId *string `pulumi:"orderId"`
	// 负载均衡实例的冻结时间
	OverdueTime *string `pulumi:"overdueTime"`
	// 包年包月计费类型的时长数量
	Period *float64 `pulumi:"period"`
	// 包年包月计费类型的时长单位
	PeriodUnit *string `pulumi:"periodUnit"`
	// CLB实例所属项目的名称
	ProjectName *string `pulumi:"projectName"`
	// 请求的Region
	RegionId     *string          `pulumi:"regionId"`
	ServerGroups []ClbServerGroup `pulumi:"serverGroups"`
	// CLB实例是否为托管资源
	ServiceManaged *bool `pulumi:"serviceManaged"`
	// 负载均衡实例的备可用区ID
	SlaveZoneId *string `pulumi:"slaveZoneId"`
	// 负载均衡实例状态
	Status *string `pulumi:"status"`
	// 负载均衡实例所属VPC内的子网ID
	SubnetId *string  `pulumi:"subnetId"`
	Tags     []ClbTag `pulumi:"tags"`
	// 是否开启 TCP Timestamp 清除功能
	TimestampRemoveEnabled *string `pulumi:"timestampRemoveEnabled"`
	// 负载均衡实例的类型
	Type *string `pulumi:"type"`
	// 负载均衡实例的最近操作时间
	UpdateTime *string `pulumi:"updateTime"`
	// 负载均衡实例所属的VPC ID
	VpcId *string `pulumi:"vpcId"`
	// 负载均衡实例的可用区类型
	ZoneType *string `pulumi:"zoneType"`
}

type ClbState struct {
	// 负载均衡实例中访问日志的信息
	AccessLog ClbAccessLogPtrInput
	// 负载均衡实例所属的账号ID
	AccountId pulumi.StringPtrInput
	// 负载均衡实例的IP地址类型
	AddressIpVersion pulumi.StringPtrInput
	// 允许的多个端口范围
	AllowedPorts pulumi.StringArrayInput
	// 负载均衡实例是否被锁定
	BusinessStatus pulumi.StringPtrInput
	// 是否开启bypass安全组功能
	BypassSecurityGroupEnabled pulumi.StringPtrInput
	// 负载均衡实例的创建时间
	CreateTime pulumi.StringPtrInput
	// 负载均衡实例的预期回收时间
	DeletedTime pulumi.StringPtrInput
	// 负载均衡实例的描述
	Description pulumi.StringPtrInput
	// 负载均衡实例的公网IP的信息
	Eip ClbEipPtrInput
	// 公网IP地址
	EipAddress pulumi.StringPtrInput
	// 公网IP ID
	EipId pulumi.StringPtrInput
	// 负载均衡实例的启用状态
	Enabled pulumi.BoolPtrInput
	// 负载均衡实例的私网IPv4地址信息
	Eni ClbEniPtrInput
	// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
	EniAddressNum pulumi.Float64PtrInput
	// 负载均衡实例的私网IPv6地址
	EniIpv6Address pulumi.StringPtrInput
	// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
	Enis ClbEnisPtrInput
	// 独占集群Id
	ExclusiveClusterId pulumi.StringPtrInput
	// 负载均衡实例到期时间
	ExpiredTime pulumi.StringPtrInput
	Listeners   ClbListenerArrayInput
	// 负载均衡实例计费方式
	LoadBalancerBillingType pulumi.Float64PtrInput
	// 负载均衡实例ID
	LoadBalancerId pulumi.StringPtrInput
	// 负载均衡实例的名称
	LoadBalancerName pulumi.StringPtrInput
	// 负载均衡实例的规格
	LoadBalancerSpec pulumi.StringPtrInput
	// 负载均衡实例被冻结的原因
	LockReason pulumi.StringPtrInput
	// 负载均衡实例的主可用区ID
	MasterZoneId pulumi.StringPtrInput
	// 设置修改保护状态的原因
	ModificationProtectionReason pulumi.StringPtrInput
	// 负载均衡实例在控制台上修改保护的状态
	ModificationProtectionStatus pulumi.StringPtrInput
	// 是否为新架构
	NewArch pulumi.BoolPtrInput
	// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
	OrderId pulumi.StringPtrInput
	// 负载均衡实例的冻结时间
	OverdueTime pulumi.StringPtrInput
	// 包年包月计费类型的时长数量
	Period pulumi.Float64PtrInput
	// 包年包月计费类型的时长单位
	PeriodUnit pulumi.StringPtrInput
	// CLB实例所属项目的名称
	ProjectName pulumi.StringPtrInput
	// 请求的Region
	RegionId     pulumi.StringPtrInput
	ServerGroups ClbServerGroupArrayInput
	// CLB实例是否为托管资源
	ServiceManaged pulumi.BoolPtrInput
	// 负载均衡实例的备可用区ID
	SlaveZoneId pulumi.StringPtrInput
	// 负载均衡实例状态
	Status pulumi.StringPtrInput
	// 负载均衡实例所属VPC内的子网ID
	SubnetId pulumi.StringPtrInput
	Tags     ClbTagArrayInput
	// 是否开启 TCP Timestamp 清除功能
	TimestampRemoveEnabled pulumi.StringPtrInput
	// 负载均衡实例的类型
	Type pulumi.StringPtrInput
	// 负载均衡实例的最近操作时间
	UpdateTime pulumi.StringPtrInput
	// 负载均衡实例所属的VPC ID
	VpcId pulumi.StringPtrInput
	// 负载均衡实例的可用区类型
	ZoneType pulumi.StringPtrInput
}

func (ClbState) ElementType() reflect.Type {
	return reflect.TypeOf((*clbState)(nil)).Elem()
}

type clbArgs struct {
	// 负载均衡实例中访问日志的信息
	AccessLog *ClbAccessLog `pulumi:"accessLog"`
	// 负载均衡实例的IP地址类型
	AddressIpVersion *string `pulumi:"addressIpVersion"`
	// 允许的多个端口范围
	AllowedPorts []string `pulumi:"allowedPorts"`
	// 是否开启bypass安全组功能
	BypassSecurityGroupEnabled *string `pulumi:"bypassSecurityGroupEnabled"`
	// 负载均衡实例的描述
	Description *string `pulumi:"description"`
	// 负载均衡实例的公网IP的信息
	Eip *ClbEip `pulumi:"eip"`
	// 公网IP地址
	EipAddress *string `pulumi:"eipAddress"`
	// 公网IP ID
	EipId *string `pulumi:"eipId"`
	// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
	EniAddressNum *float64 `pulumi:"eniAddressNum"`
	// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
	Enis *ClbEnis `pulumi:"enis"`
	// 独占集群Id
	ExclusiveClusterId *string       `pulumi:"exclusiveClusterId"`
	Listeners          []ClbListener `pulumi:"listeners"`
	// 负载均衡实例计费方式
	LoadBalancerBillingType *float64 `pulumi:"loadBalancerBillingType"`
	// 负载均衡实例的名称
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// 负载均衡实例的规格
	LoadBalancerSpec *string `pulumi:"loadBalancerSpec"`
	// 负载均衡实例的主可用区ID
	MasterZoneId *string `pulumi:"masterZoneId"`
	// 设置修改保护状态的原因
	ModificationProtectionReason *string `pulumi:"modificationProtectionReason"`
	// 负载均衡实例在控制台上修改保护的状态
	ModificationProtectionStatus *string `pulumi:"modificationProtectionStatus"`
	// 是否为新架构
	NewArch *bool `pulumi:"newArch"`
	// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
	OrderId *string `pulumi:"orderId"`
	// 包年包月计费类型的时长数量
	Period *float64 `pulumi:"period"`
	// 包年包月计费类型的时长单位
	PeriodUnit *string `pulumi:"periodUnit"`
	// CLB实例所属项目的名称
	ProjectName *string `pulumi:"projectName"`
	// 请求的Region
	RegionId     *string          `pulumi:"regionId"`
	ServerGroups []ClbServerGroup `pulumi:"serverGroups"`
	// 负载均衡实例的备可用区ID
	SlaveZoneId *string `pulumi:"slaveZoneId"`
	// 负载均衡实例所属VPC内的子网ID
	SubnetId *string  `pulumi:"subnetId"`
	Tags     []ClbTag `pulumi:"tags"`
	// 负载均衡实例的类型
	Type *string `pulumi:"type"`
	// 负载均衡实例所属的VPC ID
	VpcId *string `pulumi:"vpcId"`
	// 负载均衡实例的可用区类型
	ZoneType *string `pulumi:"zoneType"`
}

// The set of arguments for constructing a Clb resource.
type ClbArgs struct {
	// 负载均衡实例中访问日志的信息
	AccessLog ClbAccessLogPtrInput
	// 负载均衡实例的IP地址类型
	AddressIpVersion pulumi.StringPtrInput
	// 允许的多个端口范围
	AllowedPorts pulumi.StringArrayInput
	// 是否开启bypass安全组功能
	BypassSecurityGroupEnabled pulumi.StringPtrInput
	// 负载均衡实例的描述
	Description pulumi.StringPtrInput
	// 负载均衡实例的公网IP的信息
	Eip ClbEipPtrInput
	// 公网IP地址
	EipAddress pulumi.StringPtrInput
	// 公网IP ID
	EipId pulumi.StringPtrInput
	// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
	EniAddressNum pulumi.Float64PtrInput
	// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
	Enis ClbEnisPtrInput
	// 独占集群Id
	ExclusiveClusterId pulumi.StringPtrInput
	Listeners          ClbListenerArrayInput
	// 负载均衡实例计费方式
	LoadBalancerBillingType pulumi.Float64PtrInput
	// 负载均衡实例的名称
	LoadBalancerName pulumi.StringPtrInput
	// 负载均衡实例的规格
	LoadBalancerSpec pulumi.StringPtrInput
	// 负载均衡实例的主可用区ID
	MasterZoneId pulumi.StringPtrInput
	// 设置修改保护状态的原因
	ModificationProtectionReason pulumi.StringPtrInput
	// 负载均衡实例在控制台上修改保护的状态
	ModificationProtectionStatus pulumi.StringPtrInput
	// 是否为新架构
	NewArch pulumi.BoolPtrInput
	// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
	OrderId pulumi.StringPtrInput
	// 包年包月计费类型的时长数量
	Period pulumi.Float64PtrInput
	// 包年包月计费类型的时长单位
	PeriodUnit pulumi.StringPtrInput
	// CLB实例所属项目的名称
	ProjectName pulumi.StringPtrInput
	// 请求的Region
	RegionId     pulumi.StringPtrInput
	ServerGroups ClbServerGroupArrayInput
	// 负载均衡实例的备可用区ID
	SlaveZoneId pulumi.StringPtrInput
	// 负载均衡实例所属VPC内的子网ID
	SubnetId pulumi.StringPtrInput
	Tags     ClbTagArrayInput
	// 负载均衡实例的类型
	Type pulumi.StringPtrInput
	// 负载均衡实例所属的VPC ID
	VpcId pulumi.StringPtrInput
	// 负载均衡实例的可用区类型
	ZoneType pulumi.StringPtrInput
}

func (ClbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clbArgs)(nil)).Elem()
}

type ClbInput interface {
	pulumi.Input

	ToClbOutput() ClbOutput
	ToClbOutputWithContext(ctx context.Context) ClbOutput
}

func (*Clb) ElementType() reflect.Type {
	return reflect.TypeOf((**Clb)(nil)).Elem()
}

func (i *Clb) ToClbOutput() ClbOutput {
	return i.ToClbOutputWithContext(context.Background())
}

func (i *Clb) ToClbOutputWithContext(ctx context.Context) ClbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbOutput)
}

// ClbArrayInput is an input type that accepts ClbArray and ClbArrayOutput values.
// You can construct a concrete instance of `ClbArrayInput` via:
//
//	ClbArray{ ClbArgs{...} }
type ClbArrayInput interface {
	pulumi.Input

	ToClbArrayOutput() ClbArrayOutput
	ToClbArrayOutputWithContext(context.Context) ClbArrayOutput
}

type ClbArray []ClbInput

func (ClbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clb)(nil)).Elem()
}

func (i ClbArray) ToClbArrayOutput() ClbArrayOutput {
	return i.ToClbArrayOutputWithContext(context.Background())
}

func (i ClbArray) ToClbArrayOutputWithContext(ctx context.Context) ClbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbArrayOutput)
}

// ClbMapInput is an input type that accepts ClbMap and ClbMapOutput values.
// You can construct a concrete instance of `ClbMapInput` via:
//
//	ClbMap{ "key": ClbArgs{...} }
type ClbMapInput interface {
	pulumi.Input

	ToClbMapOutput() ClbMapOutput
	ToClbMapOutputWithContext(context.Context) ClbMapOutput
}

type ClbMap map[string]ClbInput

func (ClbMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clb)(nil)).Elem()
}

func (i ClbMap) ToClbMapOutput() ClbMapOutput {
	return i.ToClbMapOutputWithContext(context.Background())
}

func (i ClbMap) ToClbMapOutputWithContext(ctx context.Context) ClbMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbMapOutput)
}

type ClbOutput struct{ *pulumi.OutputState }

func (ClbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clb)(nil)).Elem()
}

func (o ClbOutput) ToClbOutput() ClbOutput {
	return o
}

func (o ClbOutput) ToClbOutputWithContext(ctx context.Context) ClbOutput {
	return o
}

// 负载均衡实例中访问日志的信息
func (o ClbOutput) AccessLog() ClbAccessLogOutput {
	return o.ApplyT(func(v *Clb) ClbAccessLogOutput { return v.AccessLog }).(ClbAccessLogOutput)
}

// 负载均衡实例所属的账号ID
func (o ClbOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// 负载均衡实例的IP地址类型
func (o ClbOutput) AddressIpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.AddressIpVersion }).(pulumi.StringOutput)
}

// 允许的多个端口范围
func (o ClbOutput) AllowedPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringArrayOutput { return v.AllowedPorts }).(pulumi.StringArrayOutput)
}

// 负载均衡实例是否被锁定
func (o ClbOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// 是否开启bypass安全组功能
func (o ClbOutput) BypassSecurityGroupEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.BypassSecurityGroupEnabled }).(pulumi.StringOutput)
}

// 负载均衡实例的创建时间
func (o ClbOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// 负载均衡实例的预期回收时间
func (o ClbOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.DeletedTime }).(pulumi.StringOutput)
}

// 负载均衡实例的描述
func (o ClbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 负载均衡实例的公网IP的信息
func (o ClbOutput) Eip() ClbEipOutput {
	return o.ApplyT(func(v *Clb) ClbEipOutput { return v.Eip }).(ClbEipOutput)
}

// 公网IP地址
func (o ClbOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.EipAddress }).(pulumi.StringOutput)
}

// 公网IP ID
func (o ClbOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// 负载均衡实例的启用状态
func (o ClbOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Clb) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// 负载均衡实例的私网IPv4地址信息
func (o ClbOutput) Eni() ClbEniOutput {
	return o.ApplyT(func(v *Clb) ClbEniOutput { return v.Eni }).(ClbEniOutput)
}

// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
func (o ClbOutput) EniAddressNum() pulumi.Float64Output {
	return o.ApplyT(func(v *Clb) pulumi.Float64Output { return v.EniAddressNum }).(pulumi.Float64Output)
}

// 负载均衡实例的私网IPv6地址
func (o ClbOutput) EniIpv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.EniIpv6Address }).(pulumi.StringOutput)
}

// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
func (o ClbOutput) Enis() ClbEnisOutput {
	return o.ApplyT(func(v *Clb) ClbEnisOutput { return v.Enis }).(ClbEnisOutput)
}

// 独占集群Id
func (o ClbOutput) ExclusiveClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.ExclusiveClusterId }).(pulumi.StringOutput)
}

// 负载均衡实例到期时间
func (o ClbOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.ExpiredTime }).(pulumi.StringOutput)
}

func (o ClbOutput) Listeners() ClbListenerArrayOutput {
	return o.ApplyT(func(v *Clb) ClbListenerArrayOutput { return v.Listeners }).(ClbListenerArrayOutput)
}

// 负载均衡实例计费方式
func (o ClbOutput) LoadBalancerBillingType() pulumi.Float64Output {
	return o.ApplyT(func(v *Clb) pulumi.Float64Output { return v.LoadBalancerBillingType }).(pulumi.Float64Output)
}

// 负载均衡实例ID
func (o ClbOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// 负载均衡实例的名称
func (o ClbOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// 负载均衡实例的规格
func (o ClbOutput) LoadBalancerSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.LoadBalancerSpec }).(pulumi.StringOutput)
}

// 负载均衡实例被冻结的原因
func (o ClbOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.LockReason }).(pulumi.StringOutput)
}

// 负载均衡实例的主可用区ID
func (o ClbOutput) MasterZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.MasterZoneId }).(pulumi.StringOutput)
}

// 设置修改保护状态的原因
func (o ClbOutput) ModificationProtectionReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.ModificationProtectionReason }).(pulumi.StringOutput)
}

// 负载均衡实例在控制台上修改保护的状态
func (o ClbOutput) ModificationProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.ModificationProtectionStatus }).(pulumi.StringOutput)
}

// 是否为新架构
func (o ClbOutput) NewArch() pulumi.BoolOutput {
	return o.ApplyT(func(v *Clb) pulumi.BoolOutput { return v.NewArch }).(pulumi.BoolOutput)
}

// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
func (o ClbOutput) OrderId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.OrderId }).(pulumi.StringOutput)
}

// 负载均衡实例的冻结时间
func (o ClbOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.OverdueTime }).(pulumi.StringOutput)
}

// 包年包月计费类型的时长数量
func (o ClbOutput) Period() pulumi.Float64Output {
	return o.ApplyT(func(v *Clb) pulumi.Float64Output { return v.Period }).(pulumi.Float64Output)
}

// 包年包月计费类型的时长单位
func (o ClbOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.PeriodUnit }).(pulumi.StringOutput)
}

// CLB实例所属项目的名称
func (o ClbOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 请求的Region
func (o ClbOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

func (o ClbOutput) ServerGroups() ClbServerGroupArrayOutput {
	return o.ApplyT(func(v *Clb) ClbServerGroupArrayOutput { return v.ServerGroups }).(ClbServerGroupArrayOutput)
}

// CLB实例是否为托管资源
func (o ClbOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Clb) pulumi.BoolOutput { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 负载均衡实例的备可用区ID
func (o ClbOutput) SlaveZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.SlaveZoneId }).(pulumi.StringOutput)
}

// 负载均衡实例状态
func (o ClbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 负载均衡实例所属VPC内的子网ID
func (o ClbOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o ClbOutput) Tags() ClbTagArrayOutput {
	return o.ApplyT(func(v *Clb) ClbTagArrayOutput { return v.Tags }).(ClbTagArrayOutput)
}

// 是否开启 TCP Timestamp 清除功能
func (o ClbOutput) TimestampRemoveEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.TimestampRemoveEnabled }).(pulumi.StringOutput)
}

// 负载均衡实例的类型
func (o ClbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// 负载均衡实例的最近操作时间
func (o ClbOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// 负载均衡实例所属的VPC ID
func (o ClbOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// 负载均衡实例的可用区类型
func (o ClbOutput) ZoneType() pulumi.StringOutput {
	return o.ApplyT(func(v *Clb) pulumi.StringOutput { return v.ZoneType }).(pulumi.StringOutput)
}

type ClbArrayOutput struct{ *pulumi.OutputState }

func (ClbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clb)(nil)).Elem()
}

func (o ClbArrayOutput) ToClbArrayOutput() ClbArrayOutput {
	return o
}

func (o ClbArrayOutput) ToClbArrayOutputWithContext(ctx context.Context) ClbArrayOutput {
	return o
}

func (o ClbArrayOutput) Index(i pulumi.IntInput) ClbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Clb {
		return vs[0].([]*Clb)[vs[1].(int)]
	}).(ClbOutput)
}

type ClbMapOutput struct{ *pulumi.OutputState }

func (ClbMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clb)(nil)).Elem()
}

func (o ClbMapOutput) ToClbMapOutput() ClbMapOutput {
	return o
}

func (o ClbMapOutput) ToClbMapOutputWithContext(ctx context.Context) ClbMapOutput {
	return o
}

func (o ClbMapOutput) MapIndex(k pulumi.StringInput) ClbOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Clb {
		return vs[0].(map[string]*Clb)[vs[1].(string)]
	}).(ClbOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClbInput)(nil)).Elem(), &Clb{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbArrayInput)(nil)).Elem(), ClbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbMapInput)(nil)).Elem(), ClbMap{})
	pulumi.RegisterOutputType(ClbOutput{})
	pulumi.RegisterOutputType(ClbArrayOutput{})
	pulumi.RegisterOutputType(ClbMapOutput{})
}
