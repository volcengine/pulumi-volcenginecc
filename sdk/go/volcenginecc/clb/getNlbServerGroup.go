// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::CLB::NLBServerGroup
func LookupNlbServerGroup(ctx *pulumi.Context, args *LookupNlbServerGroupArgs, opts ...pulumi.InvokeOption) (*LookupNlbServerGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNlbServerGroupResult
	err := ctx.Invoke("volcenginecc:clb/getNlbServerGroup:getNlbServerGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNlbServerGroup.
type LookupNlbServerGroupArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getNlbServerGroup.
type LookupNlbServerGroupResult struct {
	// 账号ID
	AccountId string `pulumi:"accountId"`
	// 是否开启全端口转发
	AnyPortEnabled bool `pulumi:"anyPortEnabled"`
	// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
	BypassSecurityGroupEnabled bool `pulumi:"bypassSecurityGroupEnabled"`
	// 是否开启连接优雅中断
	ConnectionDrainEnabled bool `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
	ConnectionDrainTimeout int `pulumi:"connectionDrainTimeout"`
	// 后端服务器组的创建时间
	CreatedTime string `pulumi:"createdTime"`
	// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
	Description string `pulumi:"description"`
	// 健康检查相关参数
	HealthCheck GetNlbServerGroupHealthCheck `pulumi:"healthCheck"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 服务器组的IP地址类型
	IpAddressVersion string `pulumi:"ipAddressVersion"`
	// 是否开启源地址保持
	PreserveClientIpEnabled bool `pulumi:"preserveClientIpEnabled"`
	// 项目名称
	ProjectName string `pulumi:"projectName"`
	// NLB转发流量到后端服务器时使用的通信协议
	Protocol string `pulumi:"protocol"`
	// 是否开启Proxy-Protocol协议
	ProxyProtocolType string `pulumi:"proxyProtocolType"`
	// 服务器组关联的NLB实例
	RelatedLoadBalancerIds []string `pulumi:"relatedLoadBalancerIds"`
	// NLB转发流量时遵循的规则
	Scheduler string `pulumi:"scheduler"`
	// 服务器组中后端服务器的数量
	ServerCount int `pulumi:"serverCount"`
	// 服务器组ID
	ServerGroupId string `pulumi:"serverGroupId"`
	// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
	ServerGroupName string `pulumi:"serverGroupName"`
	// 服务器组中待添加后端服务器的信息
	Servers []GetNlbServerGroupServer `pulumi:"servers"`
	// 是否开启会话保持
	SessionPersistenceEnabled bool `pulumi:"sessionPersistenceEnabled"`
	// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
	SessionPersistenceTimeout int `pulumi:"sessionPersistenceTimeout"`
	// 服务器组的状态
	Status string `pulumi:"status"`
	// 标签
	Tags []GetNlbServerGroupTag `pulumi:"tags"`
	// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
	TimestampRemoveEnabled bool `pulumi:"timestampRemoveEnabled"`
	// 服务器组的类型
	Type string `pulumi:"type"`
	// 后端服务器组的更新时间
	UpdatedTime string `pulumi:"updatedTime"`
	// 服务器组所属私有网络的ID。
	VpcId string `pulumi:"vpcId"`
}

func LookupNlbServerGroupOutput(ctx *pulumi.Context, args LookupNlbServerGroupOutputArgs, opts ...pulumi.InvokeOption) LookupNlbServerGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNlbServerGroupResultOutput, error) {
			args := v.(LookupNlbServerGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:clb/getNlbServerGroup:getNlbServerGroup", args, LookupNlbServerGroupResultOutput{}, options).(LookupNlbServerGroupResultOutput), nil
		}).(LookupNlbServerGroupResultOutput)
}

// A collection of arguments for invoking getNlbServerGroup.
type LookupNlbServerGroupOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNlbServerGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNlbServerGroupArgs)(nil)).Elem()
}

// A collection of values returned by getNlbServerGroup.
type LookupNlbServerGroupResultOutput struct{ *pulumi.OutputState }

func (LookupNlbServerGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNlbServerGroupResult)(nil)).Elem()
}

func (o LookupNlbServerGroupResultOutput) ToLookupNlbServerGroupResultOutput() LookupNlbServerGroupResultOutput {
	return o
}

func (o LookupNlbServerGroupResultOutput) ToLookupNlbServerGroupResultOutputWithContext(ctx context.Context) LookupNlbServerGroupResultOutput {
	return o
}

// 账号ID
func (o LookupNlbServerGroupResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// 是否开启全端口转发
func (o LookupNlbServerGroupResultOutput) AnyPortEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) bool { return v.AnyPortEnabled }).(pulumi.BoolOutput)
}

// 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
func (o LookupNlbServerGroupResultOutput) BypassSecurityGroupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) bool { return v.BypassSecurityGroupEnabled }).(pulumi.BoolOutput)
}

// 是否开启连接优雅中断
func (o LookupNlbServerGroupResultOutput) ConnectionDrainEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) bool { return v.ConnectionDrainEnabled }).(pulumi.BoolOutput)
}

// 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
func (o LookupNlbServerGroupResultOutput) ConnectionDrainTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) int { return v.ConnectionDrainTimeout }).(pulumi.IntOutput)
}

// 后端服务器组的创建时间
func (o LookupNlbServerGroupResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
func (o LookupNlbServerGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// 健康检查相关参数
func (o LookupNlbServerGroupResultOutput) HealthCheck() GetNlbServerGroupHealthCheckOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) GetNlbServerGroupHealthCheck { return v.HealthCheck }).(GetNlbServerGroupHealthCheckOutput)
}

// Uniquely identifies the resource.
func (o LookupNlbServerGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// 服务器组的IP地址类型
func (o LookupNlbServerGroupResultOutput) IpAddressVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.IpAddressVersion }).(pulumi.StringOutput)
}

// 是否开启源地址保持
func (o LookupNlbServerGroupResultOutput) PreserveClientIpEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) bool { return v.PreserveClientIpEnabled }).(pulumi.BoolOutput)
}

// 项目名称
func (o LookupNlbServerGroupResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// NLB转发流量到后端服务器时使用的通信协议
func (o LookupNlbServerGroupResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// 是否开启Proxy-Protocol协议
func (o LookupNlbServerGroupResultOutput) ProxyProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.ProxyProtocolType }).(pulumi.StringOutput)
}

// 服务器组关联的NLB实例
func (o LookupNlbServerGroupResultOutput) RelatedLoadBalancerIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) []string { return v.RelatedLoadBalancerIds }).(pulumi.StringArrayOutput)
}

// NLB转发流量时遵循的规则
func (o LookupNlbServerGroupResultOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.Scheduler }).(pulumi.StringOutput)
}

// 服务器组中后端服务器的数量
func (o LookupNlbServerGroupResultOutput) ServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) int { return v.ServerCount }).(pulumi.IntOutput)
}

// 服务器组ID
func (o LookupNlbServerGroupResultOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
func (o LookupNlbServerGroupResultOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

// 服务器组中待添加后端服务器的信息
func (o LookupNlbServerGroupResultOutput) Servers() GetNlbServerGroupServerArrayOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) []GetNlbServerGroupServer { return v.Servers }).(GetNlbServerGroupServerArrayOutput)
}

// 是否开启会话保持
func (o LookupNlbServerGroupResultOutput) SessionPersistenceEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) bool { return v.SessionPersistenceEnabled }).(pulumi.BoolOutput)
}

// 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
func (o LookupNlbServerGroupResultOutput) SessionPersistenceTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) int { return v.SessionPersistenceTimeout }).(pulumi.IntOutput)
}

// 服务器组的状态
func (o LookupNlbServerGroupResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.Status }).(pulumi.StringOutput)
}

// 标签
func (o LookupNlbServerGroupResultOutput) Tags() GetNlbServerGroupTagArrayOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) []GetNlbServerGroupTag { return v.Tags }).(GetNlbServerGroupTagArrayOutput)
}

// 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
func (o LookupNlbServerGroupResultOutput) TimestampRemoveEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) bool { return v.TimestampRemoveEnabled }).(pulumi.BoolOutput)
}

// 服务器组的类型
func (o LookupNlbServerGroupResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.Type }).(pulumi.StringOutput)
}

// 后端服务器组的更新时间
func (o LookupNlbServerGroupResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 服务器组所属私有网络的ID。
func (o LookupNlbServerGroupResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbServerGroupResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNlbServerGroupResultOutput{})
}
