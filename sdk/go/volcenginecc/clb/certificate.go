// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 针对HTTPS协议，提供统一的证书管理服务，证书无需上传到后端服务器，支持在CLB实例上解密处理，降低了后端服务器的CPU开销。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clb.NewCertificate(ctx, "CertificatDemo", &clb.CertificateArgs{
//				CertificateName: pulumi.String("CertificatDemo"),
//				PrivateKey:      pulumi.String("-----BEGIN RSA PRIVATE KEY-----***----END RSA PRIVATE KEY-----"),
//				PublicKey:       pulumi.String("-----BEGIN CERTIFICATE-----***-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----***-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----***-----END CERTIFICATE-----"),
//				Description:     pulumi.String("CertificateDemo Example"),
//				ProjectName:     pulumi.String("default"),
//				Tags: clb.CertificateTagArray{
//					&clb.CertificateTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/certificate:Certificate example "certificate_id"
// ```
type Certificate struct {
	pulumi.CustomResourceState

	// 证书的ID。
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
	CertificateName pulumi.StringOutput `pulumi:"certificateName"`
	// 证书的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringOutput `pulumi:"description"`
	// 证书的主域名。
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// 证书的过期时间。
	ExpiredAt pulumi.StringOutput `pulumi:"expiredAt"`
	// 证书关联的监听器的ID。
	Listeners pulumi.StringArrayOutput `pulumi:"listeners"`
	// 证书的私钥。
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// 证书所属项目的名称。不填默认为default。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 证书的公钥。
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// 是否为托管资源。true：托管资源。false：非托管资源。
	ServiceManaged pulumi.BoolOutput `pulumi:"serviceManaged"`
	// 证书的备用域名列表。
	SubjectAlternativeNames pulumi.StringArrayOutput  `pulumi:"subjectAlternativeNames"`
	Tags                    CertificateTagArrayOutput `pulumi:"tags"`
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOption) (*Certificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certificate
	err := ctx.RegisterResource("volcenginecc:clb/certificate:Certificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateState, opts ...pulumi.ResourceOption) (*Certificate, error) {
	var resource Certificate
	err := ctx.ReadResource("volcenginecc:clb/certificate:Certificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certificate resources.
type certificateState struct {
	// 证书的ID。
	CertificateId *string `pulumi:"certificateId"`
	// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
	CertificateName *string `pulumi:"certificateName"`
	// 证书的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description *string `pulumi:"description"`
	// 证书的主域名。
	DomainName *string `pulumi:"domainName"`
	// 证书的过期时间。
	ExpiredAt *string `pulumi:"expiredAt"`
	// 证书关联的监听器的ID。
	Listeners []string `pulumi:"listeners"`
	// 证书的私钥。
	PrivateKey *string `pulumi:"privateKey"`
	// 证书所属项目的名称。不填默认为default。
	ProjectName *string `pulumi:"projectName"`
	// 证书的公钥。
	PublicKey *string `pulumi:"publicKey"`
	// 是否为托管资源。true：托管资源。false：非托管资源。
	ServiceManaged *bool `pulumi:"serviceManaged"`
	// 证书的备用域名列表。
	SubjectAlternativeNames []string         `pulumi:"subjectAlternativeNames"`
	Tags                    []CertificateTag `pulumi:"tags"`
}

type CertificateState struct {
	// 证书的ID。
	CertificateId pulumi.StringPtrInput
	// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
	CertificateName pulumi.StringPtrInput
	// 证书的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringPtrInput
	// 证书的主域名。
	DomainName pulumi.StringPtrInput
	// 证书的过期时间。
	ExpiredAt pulumi.StringPtrInput
	// 证书关联的监听器的ID。
	Listeners pulumi.StringArrayInput
	// 证书的私钥。
	PrivateKey pulumi.StringPtrInput
	// 证书所属项目的名称。不填默认为default。
	ProjectName pulumi.StringPtrInput
	// 证书的公钥。
	PublicKey pulumi.StringPtrInput
	// 是否为托管资源。true：托管资源。false：非托管资源。
	ServiceManaged pulumi.BoolPtrInput
	// 证书的备用域名列表。
	SubjectAlternativeNames pulumi.StringArrayInput
	Tags                    CertificateTagArrayInput
}

func (CertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateState)(nil)).Elem()
}

type certificateArgs struct {
	// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
	CertificateName *string `pulumi:"certificateName"`
	// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description *string `pulumi:"description"`
	// 证书的私钥。
	PrivateKey string `pulumi:"privateKey"`
	// 证书所属项目的名称。不填默认为default。
	ProjectName *string `pulumi:"projectName"`
	// 证书的公钥。
	PublicKey string           `pulumi:"publicKey"`
	Tags      []CertificateTag `pulumi:"tags"`
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
	CertificateName pulumi.StringPtrInput
	// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description pulumi.StringPtrInput
	// 证书的私钥。
	PrivateKey pulumi.StringInput
	// 证书所属项目的名称。不填默认为default。
	ProjectName pulumi.StringPtrInput
	// 证书的公钥。
	PublicKey pulumi.StringInput
	Tags      CertificateTagArrayInput
}

func (CertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateArgs)(nil)).Elem()
}

type CertificateInput interface {
	pulumi.Input

	ToCertificateOutput() CertificateOutput
	ToCertificateOutputWithContext(ctx context.Context) CertificateOutput
}

func (*Certificate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (i *Certificate) ToCertificateOutput() CertificateOutput {
	return i.ToCertificateOutputWithContext(context.Background())
}

func (i *Certificate) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateOutput)
}

// CertificateArrayInput is an input type that accepts CertificateArray and CertificateArrayOutput values.
// You can construct a concrete instance of `CertificateArrayInput` via:
//
//	CertificateArray{ CertificateArgs{...} }
type CertificateArrayInput interface {
	pulumi.Input

	ToCertificateArrayOutput() CertificateArrayOutput
	ToCertificateArrayOutputWithContext(context.Context) CertificateArrayOutput
}

type CertificateArray []CertificateInput

func (CertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (i CertificateArray) ToCertificateArrayOutput() CertificateArrayOutput {
	return i.ToCertificateArrayOutputWithContext(context.Background())
}

func (i CertificateArray) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateArrayOutput)
}

// CertificateMapInput is an input type that accepts CertificateMap and CertificateMapOutput values.
// You can construct a concrete instance of `CertificateMapInput` via:
//
//	CertificateMap{ "key": CertificateArgs{...} }
type CertificateMapInput interface {
	pulumi.Input

	ToCertificateMapOutput() CertificateMapOutput
	ToCertificateMapOutputWithContext(context.Context) CertificateMapOutput
}

type CertificateMap map[string]CertificateInput

func (CertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (i CertificateMap) ToCertificateMapOutput() CertificateMapOutput {
	return i.ToCertificateMapOutputWithContext(context.Background())
}

func (i CertificateMap) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateMapOutput)
}

type CertificateOutput struct{ *pulumi.OutputState }

func (CertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certificate)(nil)).Elem()
}

func (o CertificateOutput) ToCertificateOutput() CertificateOutput {
	return o
}

func (o CertificateOutput) ToCertificateOutputWithContext(ctx context.Context) CertificateOutput {
	return o
}

// 证书的ID。
func (o CertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
func (o CertificateOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CertificateName }).(pulumi.StringOutput)
}

// 证书的创建时间。
func (o CertificateOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
func (o CertificateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 证书的主域名。
func (o CertificateOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// 证书的过期时间。
func (o CertificateOutput) ExpiredAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ExpiredAt }).(pulumi.StringOutput)
}

// 证书关联的监听器的ID。
func (o CertificateOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.Listeners }).(pulumi.StringArrayOutput)
}

// 证书的私钥。
func (o CertificateOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.PrivateKey }).(pulumi.StringOutput)
}

// 证书所属项目的名称。不填默认为default。
func (o CertificateOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 证书的公钥。
func (o CertificateOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringOutput { return v.PublicKey }).(pulumi.StringOutput)
}

// 是否为托管资源。true：托管资源。false：非托管资源。
func (o CertificateOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Certificate) pulumi.BoolOutput { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 证书的备用域名列表。
func (o CertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Certificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func (o CertificateOutput) Tags() CertificateTagArrayOutput {
	return o.ApplyT(func(v *Certificate) CertificateTagArrayOutput { return v.Tags }).(CertificateTagArrayOutput)
}

type CertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certificate)(nil)).Elem()
}

func (o CertificateArrayOutput) ToCertificateArrayOutput() CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) ToCertificateArrayOutputWithContext(ctx context.Context) CertificateArrayOutput {
	return o
}

func (o CertificateArrayOutput) Index(i pulumi.IntInput) CertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].([]*Certificate)[vs[1].(int)]
	}).(CertificateOutput)
}

type CertificateMapOutput struct{ *pulumi.OutputState }

func (CertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certificate)(nil)).Elem()
}

func (o CertificateMapOutput) ToCertificateMapOutput() CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) ToCertificateMapOutputWithContext(ctx context.Context) CertificateMapOutput {
	return o
}

func (o CertificateMapOutput) MapIndex(k pulumi.StringInput) CertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certificate {
		return vs[0].(map[string]*Certificate)[vs[1].(string)]
	}).(CertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateInput)(nil)).Elem(), &Certificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateArrayInput)(nil)).Elem(), CertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateMapInput)(nil)).Elem(), CertificateMap{})
	pulumi.RegisterOutputType(CertificateOutput{})
	pulumi.RegisterOutputType(CertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificateMapOutput{})
}
