// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 监听器负责根据指定的协议和端口，监听NLB实例接收到的用户访问请求。NLB将按照该监听器关联的服务器组配置的调度算法，将访问请求转发至该服务器组内健康的后端服务器。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := clb.NewNlbListener(ctx, "CLBNLBListenerDemo", &clb.NlbListenerArgs{
//				LoadBalancerId:    pulumi.String("nlb-11zz9w3jqptz449iegfwvxxxx"),
//				Protocol:          pulumi.String("TCP"),
//				Port:              pulumi.Int(0),
//				ServerGroupId:     pulumi.String("rsp-11zz9wdewa3uo49ieggq8xxxx"),
//				ConnectionTimeout: pulumi.Int(60),
//				Description:       pulumi.String("CLBNLBListenerDemo description"),
//				Enabled:           pulumi.Bool(true),
//				ListenerName:      pulumi.String("CLBNLBListenerDemo"),
//				Tags: clb.NlbListenerTagArray{
//					&clb.NlbListenerTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("Test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:clb/nlbListener:NlbListener example "listener_id"
// ```
type NlbListener struct {
	pulumi.CustomResourceState

	// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// 监听器的连接超时时间（秒）。
	ConnectionTimeout pulumi.IntOutput `pulumi:"connectionTimeout"`
	// 监听器的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 监听器描述信息。
	Description pulumi.StringOutput `pulumi:"description"`
	// 是否启用监听器。true：开启；false：关闭。
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// 全端口监听的结束端口，仅当Port为0时有效。
	EndPort pulumi.IntOutput             `pulumi:"endPort"`
	Healths NlbListenerHealthArrayOutput `pulumi:"healths"`
	// 监听器唯一标识。
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// 监听器名称。
	ListenerName pulumi.StringOutput `pulumi:"listenerName"`
	// 负载均衡实例ID。
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// 监听器接收请求的端口，0表示启用全端口监听。
	Port pulumi.IntOutput `pulumi:"port"`
	// 监听协议类型。
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
	SecurityPolicyId pulumi.StringOutput `pulumi:"securityPolicyId"`
	// 监听器关联的服务器组ID。
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，仅当Port为0时有效。
	StartPort pulumi.IntOutput `pulumi:"startPort"`
	// 监听器的状态。
	Status pulumi.StringOutput       `pulumi:"status"`
	Tags   NlbListenerTagArrayOutput `pulumi:"tags"`
	// 监听器最近操作时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
}

// NewNlbListener registers a new resource with the given unique name, arguments, and options.
func NewNlbListener(ctx *pulumi.Context,
	name string, args *NlbListenerArgs, opts ...pulumi.ResourceOption) (*NlbListener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NlbListener
	err := ctx.RegisterResource("volcenginecc:clb/nlbListener:NlbListener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNlbListener gets an existing NlbListener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNlbListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NlbListenerState, opts ...pulumi.ResourceOption) (*NlbListener, error) {
	var resource NlbListener
	err := ctx.ReadResource("volcenginecc:clb/nlbListener:NlbListener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NlbListener resources.
type nlbListenerState struct {
	// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
	CertificateId *string `pulumi:"certificateId"`
	// 监听器的连接超时时间（秒）。
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// 监听器的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 监听器描述信息。
	Description *string `pulumi:"description"`
	// 是否启用监听器。true：开启；false：关闭。
	Enabled *bool `pulumi:"enabled"`
	// 全端口监听的结束端口，仅当Port为0时有效。
	EndPort *int                `pulumi:"endPort"`
	Healths []NlbListenerHealth `pulumi:"healths"`
	// 监听器唯一标识。
	ListenerId *string `pulumi:"listenerId"`
	// 监听器名称。
	ListenerName *string `pulumi:"listenerName"`
	// 负载均衡实例ID。
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// 监听器接收请求的端口，0表示启用全端口监听。
	Port *int `pulumi:"port"`
	// 监听协议类型。
	Protocol *string `pulumi:"protocol"`
	// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// 监听器关联的服务器组ID。
	ServerGroupId *string `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，仅当Port为0时有效。
	StartPort *int `pulumi:"startPort"`
	// 监听器的状态。
	Status *string          `pulumi:"status"`
	Tags   []NlbListenerTag `pulumi:"tags"`
	// 监听器最近操作时间。
	UpdatedTime *string `pulumi:"updatedTime"`
}

type NlbListenerState struct {
	// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
	CertificateId pulumi.StringPtrInput
	// 监听器的连接超时时间（秒）。
	ConnectionTimeout pulumi.IntPtrInput
	// 监听器的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 监听器描述信息。
	Description pulumi.StringPtrInput
	// 是否启用监听器。true：开启；false：关闭。
	Enabled pulumi.BoolPtrInput
	// 全端口监听的结束端口，仅当Port为0时有效。
	EndPort pulumi.IntPtrInput
	Healths NlbListenerHealthArrayInput
	// 监听器唯一标识。
	ListenerId pulumi.StringPtrInput
	// 监听器名称。
	ListenerName pulumi.StringPtrInput
	// 负载均衡实例ID。
	LoadBalancerId pulumi.StringPtrInput
	// 监听器接收请求的端口，0表示启用全端口监听。
	Port pulumi.IntPtrInput
	// 监听协议类型。
	Protocol pulumi.StringPtrInput
	// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
	SecurityPolicyId pulumi.StringPtrInput
	// 监听器关联的服务器组ID。
	ServerGroupId pulumi.StringPtrInput
	// 全端口监听的起始端口，仅当Port为0时有效。
	StartPort pulumi.IntPtrInput
	// 监听器的状态。
	Status pulumi.StringPtrInput
	Tags   NlbListenerTagArrayInput
	// 监听器最近操作时间。
	UpdatedTime pulumi.StringPtrInput
}

func (NlbListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*nlbListenerState)(nil)).Elem()
}

type nlbListenerArgs struct {
	// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
	CertificateId *string `pulumi:"certificateId"`
	// 监听器的连接超时时间（秒）。
	ConnectionTimeout *int `pulumi:"connectionTimeout"`
	// 监听器描述信息。
	Description *string `pulumi:"description"`
	// 是否启用监听器。true：开启；false：关闭。
	Enabled *bool `pulumi:"enabled"`
	// 全端口监听的结束端口，仅当Port为0时有效。
	EndPort *int                `pulumi:"endPort"`
	Healths []NlbListenerHealth `pulumi:"healths"`
	// 监听器名称。
	ListenerName *string `pulumi:"listenerName"`
	// 负载均衡实例ID。
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// 监听器接收请求的端口，0表示启用全端口监听。
	Port int `pulumi:"port"`
	// 监听协议类型。
	Protocol string `pulumi:"protocol"`
	// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
	SecurityPolicyId *string `pulumi:"securityPolicyId"`
	// 监听器关联的服务器组ID。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，仅当Port为0时有效。
	StartPort *int             `pulumi:"startPort"`
	Tags      []NlbListenerTag `pulumi:"tags"`
}

// The set of arguments for constructing a NlbListener resource.
type NlbListenerArgs struct {
	// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
	CertificateId pulumi.StringPtrInput
	// 监听器的连接超时时间（秒）。
	ConnectionTimeout pulumi.IntPtrInput
	// 监听器描述信息。
	Description pulumi.StringPtrInput
	// 是否启用监听器。true：开启；false：关闭。
	Enabled pulumi.BoolPtrInput
	// 全端口监听的结束端口，仅当Port为0时有效。
	EndPort pulumi.IntPtrInput
	Healths NlbListenerHealthArrayInput
	// 监听器名称。
	ListenerName pulumi.StringPtrInput
	// 负载均衡实例ID。
	LoadBalancerId pulumi.StringInput
	// 监听器接收请求的端口，0表示启用全端口监听。
	Port pulumi.IntInput
	// 监听协议类型。
	Protocol pulumi.StringInput
	// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
	SecurityPolicyId pulumi.StringPtrInput
	// 监听器关联的服务器组ID。
	ServerGroupId pulumi.StringInput
	// 全端口监听的起始端口，仅当Port为0时有效。
	StartPort pulumi.IntPtrInput
	Tags      NlbListenerTagArrayInput
}

func (NlbListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nlbListenerArgs)(nil)).Elem()
}

type NlbListenerInput interface {
	pulumi.Input

	ToNlbListenerOutput() NlbListenerOutput
	ToNlbListenerOutputWithContext(ctx context.Context) NlbListenerOutput
}

func (*NlbListener) ElementType() reflect.Type {
	return reflect.TypeOf((**NlbListener)(nil)).Elem()
}

func (i *NlbListener) ToNlbListenerOutput() NlbListenerOutput {
	return i.ToNlbListenerOutputWithContext(context.Background())
}

func (i *NlbListener) ToNlbListenerOutputWithContext(ctx context.Context) NlbListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerOutput)
}

// NlbListenerArrayInput is an input type that accepts NlbListenerArray and NlbListenerArrayOutput values.
// You can construct a concrete instance of `NlbListenerArrayInput` via:
//
//	NlbListenerArray{ NlbListenerArgs{...} }
type NlbListenerArrayInput interface {
	pulumi.Input

	ToNlbListenerArrayOutput() NlbListenerArrayOutput
	ToNlbListenerArrayOutputWithContext(context.Context) NlbListenerArrayOutput
}

type NlbListenerArray []NlbListenerInput

func (NlbListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NlbListener)(nil)).Elem()
}

func (i NlbListenerArray) ToNlbListenerArrayOutput() NlbListenerArrayOutput {
	return i.ToNlbListenerArrayOutputWithContext(context.Background())
}

func (i NlbListenerArray) ToNlbListenerArrayOutputWithContext(ctx context.Context) NlbListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerArrayOutput)
}

// NlbListenerMapInput is an input type that accepts NlbListenerMap and NlbListenerMapOutput values.
// You can construct a concrete instance of `NlbListenerMapInput` via:
//
//	NlbListenerMap{ "key": NlbListenerArgs{...} }
type NlbListenerMapInput interface {
	pulumi.Input

	ToNlbListenerMapOutput() NlbListenerMapOutput
	ToNlbListenerMapOutputWithContext(context.Context) NlbListenerMapOutput
}

type NlbListenerMap map[string]NlbListenerInput

func (NlbListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NlbListener)(nil)).Elem()
}

func (i NlbListenerMap) ToNlbListenerMapOutput() NlbListenerMapOutput {
	return i.ToNlbListenerMapOutputWithContext(context.Background())
}

func (i NlbListenerMap) ToNlbListenerMapOutputWithContext(ctx context.Context) NlbListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NlbListenerMapOutput)
}

type NlbListenerOutput struct{ *pulumi.OutputState }

func (NlbListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NlbListener)(nil)).Elem()
}

func (o NlbListenerOutput) ToNlbListenerOutput() NlbListenerOutput {
	return o
}

func (o NlbListenerOutput) ToNlbListenerOutputWithContext(ctx context.Context) NlbListenerOutput {
	return o
}

// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
func (o NlbListenerOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// 监听器的连接超时时间（秒）。
func (o NlbListenerOutput) ConnectionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.IntOutput { return v.ConnectionTimeout }).(pulumi.IntOutput)
}

// 监听器的创建时间。
func (o NlbListenerOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 监听器描述信息。
func (o NlbListenerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 是否启用监听器。true：开启；false：关闭。
func (o NlbListenerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// 全端口监听的结束端口，仅当Port为0时有效。
func (o NlbListenerOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.IntOutput { return v.EndPort }).(pulumi.IntOutput)
}

func (o NlbListenerOutput) Healths() NlbListenerHealthArrayOutput {
	return o.ApplyT(func(v *NlbListener) NlbListenerHealthArrayOutput { return v.Healths }).(NlbListenerHealthArrayOutput)
}

// 监听器唯一标识。
func (o NlbListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器名称。
func (o NlbListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.ListenerName }).(pulumi.StringOutput)
}

// 负载均衡实例ID。
func (o NlbListenerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// 监听器接收请求的端口，0表示启用全端口监听。
func (o NlbListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// 监听协议类型。
func (o NlbListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
func (o NlbListenerOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// 监听器关联的服务器组ID。
func (o NlbListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 全端口监听的起始端口，仅当Port为0时有效。
func (o NlbListenerOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.IntOutput { return v.StartPort }).(pulumi.IntOutput)
}

// 监听器的状态。
func (o NlbListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NlbListenerOutput) Tags() NlbListenerTagArrayOutput {
	return o.ApplyT(func(v *NlbListener) NlbListenerTagArrayOutput { return v.Tags }).(NlbListenerTagArrayOutput)
}

// 监听器最近操作时间。
func (o NlbListenerOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NlbListener) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

type NlbListenerArrayOutput struct{ *pulumi.OutputState }

func (NlbListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NlbListener)(nil)).Elem()
}

func (o NlbListenerArrayOutput) ToNlbListenerArrayOutput() NlbListenerArrayOutput {
	return o
}

func (o NlbListenerArrayOutput) ToNlbListenerArrayOutputWithContext(ctx context.Context) NlbListenerArrayOutput {
	return o
}

func (o NlbListenerArrayOutput) Index(i pulumi.IntInput) NlbListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NlbListener {
		return vs[0].([]*NlbListener)[vs[1].(int)]
	}).(NlbListenerOutput)
}

type NlbListenerMapOutput struct{ *pulumi.OutputState }

func (NlbListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NlbListener)(nil)).Elem()
}

func (o NlbListenerMapOutput) ToNlbListenerMapOutput() NlbListenerMapOutput {
	return o
}

func (o NlbListenerMapOutput) ToNlbListenerMapOutputWithContext(ctx context.Context) NlbListenerMapOutput {
	return o
}

func (o NlbListenerMapOutput) MapIndex(k pulumi.StringInput) NlbListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NlbListener {
		return vs[0].(map[string]*NlbListener)[vs[1].(string)]
	}).(NlbListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerInput)(nil)).Elem(), &NlbListener{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerArrayInput)(nil)).Elem(), NlbListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NlbListenerMapInput)(nil)).Elem(), NlbListenerMap{})
	pulumi.RegisterOutputType(NlbListenerOutput{})
	pulumi.RegisterOutputType(NlbListenerArrayOutput{})
	pulumi.RegisterOutputType(NlbListenerMapOutput{})
}
