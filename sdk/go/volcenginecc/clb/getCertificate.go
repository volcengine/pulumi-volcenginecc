// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::CLB::Certificate
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("volcenginecc:clb/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// 证书的ID。
	CertificateId string `pulumi:"certificateId"`
	// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
	CertificateName string `pulumi:"certificateName"`
	// 证书的创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
	Description string `pulumi:"description"`
	// 证书的主域名。
	DomainName string `pulumi:"domainName"`
	// 证书的过期时间。
	ExpiredAt string `pulumi:"expiredAt"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 证书关联的监听器的ID。
	Listeners []string `pulumi:"listeners"`
	// 证书的私钥。
	PrivateKey string `pulumi:"privateKey"`
	// 证书所属项目的名称。不填默认为default。
	ProjectName string `pulumi:"projectName"`
	// 证书的公钥。
	PublicKey string `pulumi:"publicKey"`
	// 是否为托管资源。true：托管资源。false：非托管资源。
	ServiceManaged bool `pulumi:"serviceManaged"`
	// 证书的备用域名列表。
	SubjectAlternativeNames []string `pulumi:"subjectAlternativeNames"`
	// 标签列表。
	Tags []GetCertificateTag `pulumi:"tags"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificateResultOutput, error) {
			args := v.(LookupCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:clb/getCertificate:getCertificate", args, LookupCertificateResultOutput{}, options).(LookupCertificateResultOutput), nil
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// 证书的ID。
func (o LookupCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
func (o LookupCertificateResultOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateName }).(pulumi.StringOutput)
}

// 证书的创建时间。
func (o LookupCertificateResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
func (o LookupCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// 证书的主域名。
func (o LookupCertificateResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// 证书的过期时间。
func (o LookupCertificateResultOutput) ExpiredAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ExpiredAt }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// 证书关联的监听器的ID。
func (o LookupCertificateResultOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []string { return v.Listeners }).(pulumi.StringArrayOutput)
}

// 证书的私钥。
func (o LookupCertificateResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// 证书所属项目的名称。不填默认为default。
func (o LookupCertificateResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 证书的公钥。
func (o LookupCertificateResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// 是否为托管资源。true：托管资源。false：非托管资源。
func (o LookupCertificateResultOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCertificateResult) bool { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 证书的备用域名列表。
func (o LookupCertificateResultOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []string { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

// 标签列表。
func (o LookupCertificateResultOutput) Tags() GetCertificateTagArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateTag { return v.Tags }).(GetCertificateTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
