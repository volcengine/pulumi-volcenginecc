// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::CLB::CLB
func LookupClb(ctx *pulumi.Context, args *LookupClbArgs, opts ...pulumi.InvokeOption) (*LookupClbResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClbResult
	err := ctx.Invoke("volcenginecc:clb/getClb:getClb", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClb.
type LookupClbArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getClb.
type LookupClbResult struct {
	// 负载均衡实例中访问日志的信息
	AccessLog GetClbAccessLog `pulumi:"accessLog"`
	// 负载均衡实例所属的账号ID
	AccountId string `pulumi:"accountId"`
	// 负载均衡实例的IP地址类型
	AddressIpVersion string `pulumi:"addressIpVersion"`
	// 允许的多个端口范围
	AllowedPorts []string `pulumi:"allowedPorts"`
	// 负载均衡实例是否被锁定
	BusinessStatus string `pulumi:"businessStatus"`
	// 是否开启bypass安全组功能
	BypassSecurityGroupEnabled string `pulumi:"bypassSecurityGroupEnabled"`
	// 负载均衡实例的创建时间
	CreateTime string `pulumi:"createTime"`
	// 负载均衡实例的预期回收时间
	DeletedTime string `pulumi:"deletedTime"`
	// 负载均衡实例的描述
	Description string `pulumi:"description"`
	// 负载均衡实例的公网IP的信息
	Eip GetClbEip `pulumi:"eip"`
	// 公网IP地址
	EipAddress string `pulumi:"eipAddress"`
	// 公网IP ID
	EipId string `pulumi:"eipId"`
	// 负载均衡实例的启用状态
	Enabled bool `pulumi:"enabled"`
	// 负载均衡实例的私网IPv4地址信息
	Eni GetClbEni `pulumi:"eni"`
	// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
	EniAddressNum float64 `pulumi:"eniAddressNum"`
	// 负载均衡实例的私网IPv6地址
	EniIpv6Address string `pulumi:"eniIpv6Address"`
	// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
	Enis GetClbEnis `pulumi:"enis"`
	// 独占集群Id
	ExclusiveClusterId string `pulumi:"exclusiveClusterId"`
	// 负载均衡实例到期时间
	ExpiredTime string `pulumi:"expiredTime"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 负载均衡实例中监听器的信息
	Listeners []GetClbListener `pulumi:"listeners"`
	// 负载均衡实例计费方式
	LoadBalancerBillingType float64 `pulumi:"loadBalancerBillingType"`
	// 负载均衡实例ID
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// 负载均衡实例的名称
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// 负载均衡实例的规格
	LoadBalancerSpec string `pulumi:"loadBalancerSpec"`
	// 负载均衡实例被冻结的原因
	LockReason string `pulumi:"lockReason"`
	// 负载均衡实例的主可用区ID
	MasterZoneId string `pulumi:"masterZoneId"`
	// 设置修改保护状态的原因
	ModificationProtectionReason string `pulumi:"modificationProtectionReason"`
	// 负载均衡实例在控制台上修改保护的状态
	ModificationProtectionStatus string `pulumi:"modificationProtectionStatus"`
	// 是否为新架构
	NewArch bool `pulumi:"newArch"`
	// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
	OrderId string `pulumi:"orderId"`
	// 负载均衡实例的冻结时间
	OverdueTime string `pulumi:"overdueTime"`
	// 包年包月计费类型的时长数量
	Period float64 `pulumi:"period"`
	// 包年包月计费类型的时长单位
	PeriodUnit string `pulumi:"periodUnit"`
	// CLB实例所属项目的名称
	ProjectName string `pulumi:"projectName"`
	// 请求的Region
	RegionId string `pulumi:"regionId"`
	// 负载均衡实例中后端服务器组的信息
	ServerGroups []GetClbServerGroup `pulumi:"serverGroups"`
	// CLB实例是否为托管资源
	ServiceManaged bool `pulumi:"serviceManaged"`
	// 负载均衡实例的备可用区ID
	SlaveZoneId string `pulumi:"slaveZoneId"`
	// 负载均衡实例状态
	Status string `pulumi:"status"`
	// 负载均衡实例所属VPC内的子网ID
	SubnetId string `pulumi:"subnetId"`
	// CLB实例标签
	Tags []GetClbTag `pulumi:"tags"`
	// 是否开启 TCP Timestamp 清除功能
	TimestampRemoveEnabled string `pulumi:"timestampRemoveEnabled"`
	// 负载均衡实例的类型
	Type string `pulumi:"type"`
	// 负载均衡实例的最近操作时间
	UpdateTime string `pulumi:"updateTime"`
	// 负载均衡实例所属的VPC ID
	VpcId string `pulumi:"vpcId"`
	// 负载均衡实例的可用区类型
	ZoneType string `pulumi:"zoneType"`
}

func LookupClbOutput(ctx *pulumi.Context, args LookupClbOutputArgs, opts ...pulumi.InvokeOption) LookupClbResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupClbResultOutput, error) {
			args := v.(LookupClbArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:clb/getClb:getClb", args, LookupClbResultOutput{}, options).(LookupClbResultOutput), nil
		}).(LookupClbResultOutput)
}

// A collection of arguments for invoking getClb.
type LookupClbOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupClbOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClbArgs)(nil)).Elem()
}

// A collection of values returned by getClb.
type LookupClbResultOutput struct{ *pulumi.OutputState }

func (LookupClbResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClbResult)(nil)).Elem()
}

func (o LookupClbResultOutput) ToLookupClbResultOutput() LookupClbResultOutput {
	return o
}

func (o LookupClbResultOutput) ToLookupClbResultOutputWithContext(ctx context.Context) LookupClbResultOutput {
	return o
}

// 负载均衡实例中访问日志的信息
func (o LookupClbResultOutput) AccessLog() GetClbAccessLogOutput {
	return o.ApplyT(func(v LookupClbResult) GetClbAccessLog { return v.AccessLog }).(GetClbAccessLogOutput)
}

// 负载均衡实例所属的账号ID
func (o LookupClbResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// 负载均衡实例的IP地址类型
func (o LookupClbResultOutput) AddressIpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.AddressIpVersion }).(pulumi.StringOutput)
}

// 允许的多个端口范围
func (o LookupClbResultOutput) AllowedPorts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupClbResult) []string { return v.AllowedPorts }).(pulumi.StringArrayOutput)
}

// 负载均衡实例是否被锁定
func (o LookupClbResultOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// 是否开启bypass安全组功能
func (o LookupClbResultOutput) BypassSecurityGroupEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.BypassSecurityGroupEnabled }).(pulumi.StringOutput)
}

// 负载均衡实例的创建时间
func (o LookupClbResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// 负载均衡实例的预期回收时间
func (o LookupClbResultOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// 负载均衡实例的描述
func (o LookupClbResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.Description }).(pulumi.StringOutput)
}

// 负载均衡实例的公网IP的信息
func (o LookupClbResultOutput) Eip() GetClbEipOutput {
	return o.ApplyT(func(v LookupClbResult) GetClbEip { return v.Eip }).(GetClbEipOutput)
}

// 公网IP地址
func (o LookupClbResultOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.EipAddress }).(pulumi.StringOutput)
}

// 公网IP ID
func (o LookupClbResultOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.EipId }).(pulumi.StringOutput)
}

// 负载均衡实例的启用状态
func (o LookupClbResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClbResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// 负载均衡实例的私网IPv4地址信息
func (o LookupClbResultOutput) Eni() GetClbEniOutput {
	return o.ApplyT(func(v LookupClbResult) GetClbEni { return v.Eni }).(GetClbEniOutput)
}

// 负载均衡实例的私网IPv4地址数量。该参数和参数EniAddress不能同时传入，如果传入该参数，则无需传入EniAddress
func (o LookupClbResultOutput) EniAddressNum() pulumi.Float64Output {
	return o.ApplyT(func(v LookupClbResult) float64 { return v.EniAddressNum }).(pulumi.Float64Output)
}

// 负载均衡实例的私网IPv6地址
func (o LookupClbResultOutput) EniIpv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.EniIpv6Address }).(pulumi.StringOutput)
}

// 负载均衡实例的私网IPv4地址信息列表，创建时通过EniAddressNum指定数量
func (o LookupClbResultOutput) Enis() GetClbEnisOutput {
	return o.ApplyT(func(v LookupClbResult) GetClbEnis { return v.Enis }).(GetClbEnisOutput)
}

// 独占集群Id
func (o LookupClbResultOutput) ExclusiveClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.ExclusiveClusterId }).(pulumi.StringOutput)
}

// 负载均衡实例到期时间
func (o LookupClbResultOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupClbResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.Id }).(pulumi.StringOutput)
}

// 负载均衡实例中监听器的信息
func (o LookupClbResultOutput) Listeners() GetClbListenerArrayOutput {
	return o.ApplyT(func(v LookupClbResult) []GetClbListener { return v.Listeners }).(GetClbListenerArrayOutput)
}

// 负载均衡实例计费方式
func (o LookupClbResultOutput) LoadBalancerBillingType() pulumi.Float64Output {
	return o.ApplyT(func(v LookupClbResult) float64 { return v.LoadBalancerBillingType }).(pulumi.Float64Output)
}

// 负载均衡实例ID
func (o LookupClbResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// 负载均衡实例的名称
func (o LookupClbResultOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// 负载均衡实例的规格
func (o LookupClbResultOutput) LoadBalancerSpec() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.LoadBalancerSpec }).(pulumi.StringOutput)
}

// 负载均衡实例被冻结的原因
func (o LookupClbResultOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.LockReason }).(pulumi.StringOutput)
}

// 负载均衡实例的主可用区ID
func (o LookupClbResultOutput) MasterZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.MasterZoneId }).(pulumi.StringOutput)
}

// 设置修改保护状态的原因
func (o LookupClbResultOutput) ModificationProtectionReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.ModificationProtectionReason }).(pulumi.StringOutput)
}

// 负载均衡实例在控制台上修改保护的状态
func (o LookupClbResultOutput) ModificationProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.ModificationProtectionStatus }).(pulumi.StringOutput)
}

// 是否为新架构
func (o LookupClbResultOutput) NewArch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClbResult) bool { return v.NewArch }).(pulumi.BoolOutput)
}

// 订单ID。仅在创建动作的参数LoadBalancerBillingType配置为1时，改参数有值
func (o LookupClbResultOutput) OrderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.OrderId }).(pulumi.StringOutput)
}

// 负载均衡实例的冻结时间
func (o LookupClbResultOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// 包年包月计费类型的时长数量
func (o LookupClbResultOutput) Period() pulumi.Float64Output {
	return o.ApplyT(func(v LookupClbResult) float64 { return v.Period }).(pulumi.Float64Output)
}

// 包年包月计费类型的时长单位
func (o LookupClbResultOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// CLB实例所属项目的名称
func (o LookupClbResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 请求的Region
func (o LookupClbResultOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.RegionId }).(pulumi.StringOutput)
}

// 负载均衡实例中后端服务器组的信息
func (o LookupClbResultOutput) ServerGroups() GetClbServerGroupArrayOutput {
	return o.ApplyT(func(v LookupClbResult) []GetClbServerGroup { return v.ServerGroups }).(GetClbServerGroupArrayOutput)
}

// CLB实例是否为托管资源
func (o LookupClbResultOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClbResult) bool { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 负载均衡实例的备可用区ID
func (o LookupClbResultOutput) SlaveZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.SlaveZoneId }).(pulumi.StringOutput)
}

// 负载均衡实例状态
func (o LookupClbResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.Status }).(pulumi.StringOutput)
}

// 负载均衡实例所属VPC内的子网ID
func (o LookupClbResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

// CLB实例标签
func (o LookupClbResultOutput) Tags() GetClbTagArrayOutput {
	return o.ApplyT(func(v LookupClbResult) []GetClbTag { return v.Tags }).(GetClbTagArrayOutput)
}

// 是否开启 TCP Timestamp 清除功能
func (o LookupClbResultOutput) TimestampRemoveEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.TimestampRemoveEnabled }).(pulumi.StringOutput)
}

// 负载均衡实例的类型
func (o LookupClbResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.Type }).(pulumi.StringOutput)
}

// 负载均衡实例的最近操作时间
func (o LookupClbResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// 负载均衡实例所属的VPC ID
func (o LookupClbResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.VpcId }).(pulumi.StringOutput)
}

// 负载均衡实例的可用区类型
func (o LookupClbResultOutput) ZoneType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClbResult) string { return v.ZoneType }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClbResultOutput{})
}
