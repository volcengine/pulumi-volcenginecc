// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::CLB::NLBListener
func LookupNlbListener(ctx *pulumi.Context, args *LookupNlbListenerArgs, opts ...pulumi.InvokeOption) (*LookupNlbListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNlbListenerResult
	err := ctx.Invoke("volcenginecc:clb/getNlbListener:getNlbListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNlbListener.
type LookupNlbListenerArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getNlbListener.
type LookupNlbListenerResult struct {
	// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
	CertificateId string `pulumi:"certificateId"`
	// 监听器的连接超时时间（秒）。
	ConnectionTimeout int `pulumi:"connectionTimeout"`
	// 监听器的创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 监听器描述信息。
	Description string `pulumi:"description"`
	// 是否启用监听器。true：开启；false：关闭。
	Enabled bool `pulumi:"enabled"`
	// 全端口监听的结束端口，仅当Port为0时有效。
	EndPort int `pulumi:"endPort"`
	// 后端实例健康检查响应信息。
	Healths []GetNlbListenerHealth `pulumi:"healths"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 监听器唯一标识。
	ListenerId string `pulumi:"listenerId"`
	// 监听器名称。
	ListenerName string `pulumi:"listenerName"`
	// 负载均衡实例ID。
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// 监听器接收请求的端口，0表示启用全端口监听。
	Port int `pulumi:"port"`
	// 监听协议类型。
	Protocol string `pulumi:"protocol"`
	// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// 监听器关联的服务器组ID。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，仅当Port为0时有效。
	StartPort int `pulumi:"startPort"`
	// 监听器的状态。
	Status string `pulumi:"status"`
	// 资源标签。
	Tags []GetNlbListenerTag `pulumi:"tags"`
	// 监听器最近操作时间。
	UpdatedTime string `pulumi:"updatedTime"`
}

func LookupNlbListenerOutput(ctx *pulumi.Context, args LookupNlbListenerOutputArgs, opts ...pulumi.InvokeOption) LookupNlbListenerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupNlbListenerResultOutput, error) {
			args := v.(LookupNlbListenerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:clb/getNlbListener:getNlbListener", args, LookupNlbListenerResultOutput{}, options).(LookupNlbListenerResultOutput), nil
		}).(LookupNlbListenerResultOutput)
}

// A collection of arguments for invoking getNlbListener.
type LookupNlbListenerOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupNlbListenerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNlbListenerArgs)(nil)).Elem()
}

// A collection of values returned by getNlbListener.
type LookupNlbListenerResultOutput struct{ *pulumi.OutputState }

func (LookupNlbListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNlbListenerResult)(nil)).Elem()
}

func (o LookupNlbListenerResultOutput) ToLookupNlbListenerResultOutput() LookupNlbListenerResultOutput {
	return o
}

func (o LookupNlbListenerResultOutput) ToLookupNlbListenerResultOutputWithContext(ctx context.Context) LookupNlbListenerResultOutput {
	return o
}

// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
func (o LookupNlbListenerResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// 监听器的连接超时时间（秒）。
func (o LookupNlbListenerResultOutput) ConnectionTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) int { return v.ConnectionTimeout }).(pulumi.IntOutput)
}

// 监听器的创建时间。
func (o LookupNlbListenerResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 监听器描述信息。
func (o LookupNlbListenerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.Description }).(pulumi.StringOutput)
}

// 是否启用监听器。true：开启；false：关闭。
func (o LookupNlbListenerResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// 全端口监听的结束端口，仅当Port为0时有效。
func (o LookupNlbListenerResultOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) int { return v.EndPort }).(pulumi.IntOutput)
}

// 后端实例健康检查响应信息。
func (o LookupNlbListenerResultOutput) Healths() GetNlbListenerHealthArrayOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) []GetNlbListenerHealth { return v.Healths }).(GetNlbListenerHealthArrayOutput)
}

// Uniquely identifies the resource.
func (o LookupNlbListenerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.Id }).(pulumi.StringOutput)
}

// 监听器唯一标识。
func (o LookupNlbListenerResultOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器名称。
func (o LookupNlbListenerResultOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.ListenerName }).(pulumi.StringOutput)
}

// 负载均衡实例ID。
func (o LookupNlbListenerResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// 监听器接收请求的端口，0表示启用全端口监听。
func (o LookupNlbListenerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) int { return v.Port }).(pulumi.IntOutput)
}

// 监听协议类型。
func (o LookupNlbListenerResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
func (o LookupNlbListenerResultOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// 监听器关联的服务器组ID。
func (o LookupNlbListenerResultOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 全端口监听的起始端口，仅当Port为0时有效。
func (o LookupNlbListenerResultOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) int { return v.StartPort }).(pulumi.IntOutput)
}

// 监听器的状态。
func (o LookupNlbListenerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.Status }).(pulumi.StringOutput)
}

// 资源标签。
func (o LookupNlbListenerResultOutput) Tags() GetNlbListenerTagArrayOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) []GetNlbListenerTag { return v.Tags }).(GetNlbListenerTagArrayOutput)
}

// 监听器最近操作时间。
func (o LookupNlbListenerResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNlbListenerResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNlbListenerResultOutput{})
}
