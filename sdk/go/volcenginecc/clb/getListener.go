// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::CLB::Listener
func LookupListener(ctx *pulumi.Context, args *LookupListenerArgs, opts ...pulumi.InvokeOption) (*LookupListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerResult
	err := ctx.Invoke("volcenginecc:clb/getListener:getListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListener.
type LookupListenerArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getListener.
type LookupListenerResult struct {
	// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
	AclIds []string `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
	AclStatus string `pulumi:"aclStatus"`
	// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
	AclType string `pulumi:"aclType"`
	// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
	Bandwidth int `pulumi:"bandwidth"`
	// 双向认证的CA证书。
	CaCertificateId string `pulumi:"caCertificateId"`
	// 是否开启双向认证。on：开启。off（默认值）：不开启。
	CaEnabled string `pulumi:"caEnabled"`
	// 证书中心的证书的ID。
	CertCenterCertificateId string `pulumi:"certCenterCertificateId"`
	// CLB侧证书管理模块的证书的ID。
	CertificateId string `pulumi:"certificateId"`
	// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
	CertificateSource string `pulumi:"certificateSource"`
	// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
	ClientBodyTimeout int `pulumi:"clientBodyTimeout"`
	// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ClientHeaderTimeout int `pulumi:"clientHeaderTimeout"`
	// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
	ConnectionDrainEnabled string `pulumi:"connectionDrainEnabled"`
	// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
	ConnectionDrainTimeout int `pulumi:"connectionDrainTimeout"`
	// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
	Cookie string `pulumi:"cookie"`
	// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
	Cps int `pulumi:"cps"`
	// 监听器的创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
	Description string `pulumi:"description"`
	// 是否启用监听器。on（默认值）：开启。off：不开启。
	Enabled string `pulumi:"enabled"`
	// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
	EndPort int `pulumi:"endPort"`
	// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
	EstablishedTimeout int `pulumi:"establishedTimeout"`
	// 健康检查相关信息。
	HealthCheck GetListenerHealthCheck `pulumi:"healthCheck"`
	// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
	Http2Enabled string `pulumi:"http2Enabled"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	KeepaliveTimeout int `pulumi:"keepaliveTimeout"`
	// 监听器的ID。
	ListenerId string `pulumi:"listenerId"`
	// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
	ListenerName string `pulumi:"listenerName"`
	// CLB实例的ID。
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
	MaxConnections int `pulumi:"maxConnections"`
	// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
	PersistenceTimeout int `pulumi:"persistenceTimeout"`
	// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
	PersistenceType string `pulumi:"persistenceType"`
	// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
	Port int `pulumi:"port"`
	// 监听器的协议。
	Protocol string `pulumi:"protocol"`
	// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyConnectTimeout int `pulumi:"proxyConnectTimeout"`
	// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
	ProxyProtocolType string `pulumi:"proxyProtocolType"`
	// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxyReadTimeout int `pulumi:"proxyReadTimeout"`
	// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	ProxySendTimeout int `pulumi:"proxySendTimeout"`
	// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler string `pulumi:"scheduler"`
	// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
	SecurityPolicyId string `pulumi:"securityPolicyId"`
	// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
	SendTimeout int `pulumi:"sendTimeout"`
	// 监听器关联的后端服务器组 ID。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
	StartPort int `pulumi:"startPort"`
	// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
	Status string `pulumi:"status"`
	// 监听器所属标签。
	Tags []GetListenerTag `pulumi:"tags"`
	// 监听器最近一次的操作时间。
	UpdatedTime string `pulumi:"updatedTime"`
	// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
	WafProtectionEnabled string `pulumi:"wafProtectionEnabled"`
}

func LookupListenerOutput(ctx *pulumi.Context, args LookupListenerOutputArgs, opts ...pulumi.InvokeOption) LookupListenerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupListenerResultOutput, error) {
			args := v.(LookupListenerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:clb/getListener:getListener", args, LookupListenerResultOutput{}, options).(LookupListenerResultOutput), nil
		}).(LookupListenerResultOutput)
}

// A collection of arguments for invoking getListener.
type LookupListenerOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupListenerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerArgs)(nil)).Elem()
}

// A collection of values returned by getListener.
type LookupListenerResultOutput struct{ *pulumi.OutputState }

func (LookupListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerResult)(nil)).Elem()
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutput() LookupListenerResultOutput {
	return o
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutputWithContext(ctx context.Context) LookupListenerResultOutput {
	return o
}

// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
func (o LookupListenerResultOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []string { return v.AclIds }).(pulumi.StringArrayOutput)
}

// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
func (o LookupListenerResultOutput) AclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.AclStatus }).(pulumi.StringOutput)
}

// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
func (o LookupListenerResultOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.AclType }).(pulumi.StringOutput)
}

// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
func (o LookupListenerResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// 双向认证的CA证书。
func (o LookupListenerResultOutput) CaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CaCertificateId }).(pulumi.StringOutput)
}

// 是否开启双向认证。on：开启。off（默认值）：不开启。
func (o LookupListenerResultOutput) CaEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CaEnabled }).(pulumi.StringOutput)
}

// 证书中心的证书的ID。
func (o LookupListenerResultOutput) CertCenterCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CertCenterCertificateId }).(pulumi.StringOutput)
}

// CLB侧证书管理模块的证书的ID。
func (o LookupListenerResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
func (o LookupListenerResultOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
func (o LookupListenerResultOutput) ClientBodyTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.ClientBodyTimeout }).(pulumi.IntOutput)
}

// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o LookupListenerResultOutput) ClientHeaderTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.ClientHeaderTimeout }).(pulumi.IntOutput)
}

// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
func (o LookupListenerResultOutput) ConnectionDrainEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ConnectionDrainEnabled }).(pulumi.StringOutput)
}

// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
func (o LookupListenerResultOutput) ConnectionDrainTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.ConnectionDrainTimeout }).(pulumi.IntOutput)
}

// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
func (o LookupListenerResultOutput) Cookie() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Cookie }).(pulumi.StringOutput)
}

// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
func (o LookupListenerResultOutput) Cps() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.Cps }).(pulumi.IntOutput)
}

// 监听器的创建时间。
func (o LookupListenerResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
func (o LookupListenerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Description }).(pulumi.StringOutput)
}

// 是否启用监听器。on（默认值）：开启。off：不开启。
func (o LookupListenerResultOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Enabled }).(pulumi.StringOutput)
}

// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
func (o LookupListenerResultOutput) EndPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.EndPort }).(pulumi.IntOutput)
}

// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
func (o LookupListenerResultOutput) EstablishedTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.EstablishedTimeout }).(pulumi.IntOutput)
}

// 健康检查相关信息。
func (o LookupListenerResultOutput) HealthCheck() GetListenerHealthCheckOutput {
	return o.ApplyT(func(v LookupListenerResult) GetListenerHealthCheck { return v.HealthCheck }).(GetListenerHealthCheckOutput)
}

// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
func (o LookupListenerResultOutput) Http2Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Http2Enabled }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupListenerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Id }).(pulumi.StringOutput)
}

// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o LookupListenerResultOutput) KeepaliveTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.KeepaliveTimeout }).(pulumi.IntOutput)
}

// 监听器的ID。
func (o LookupListenerResultOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
func (o LookupListenerResultOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ListenerName }).(pulumi.StringOutput)
}

// CLB实例的ID。
func (o LookupListenerResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
func (o LookupListenerResultOutput) MaxConnections() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.MaxConnections }).(pulumi.IntOutput)
}

// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
func (o LookupListenerResultOutput) PersistenceTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.PersistenceTimeout }).(pulumi.IntOutput)
}

// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
func (o LookupListenerResultOutput) PersistenceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.PersistenceType }).(pulumi.StringOutput)
}

// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
func (o LookupListenerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.Port }).(pulumi.IntOutput)
}

// 监听器的协议。
func (o LookupListenerResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o LookupListenerResultOutput) ProxyConnectTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.ProxyConnectTimeout }).(pulumi.IntOutput)
}

// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
func (o LookupListenerResultOutput) ProxyProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ProxyProtocolType }).(pulumi.StringOutput)
}

// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o LookupListenerResultOutput) ProxyReadTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.ProxyReadTimeout }).(pulumi.IntOutput)
}

// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o LookupListenerResultOutput) ProxySendTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.ProxySendTimeout }).(pulumi.IntOutput)
}

// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
func (o LookupListenerResultOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Scheduler }).(pulumi.StringOutput)
}

// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
func (o LookupListenerResultOutput) SecurityPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.SecurityPolicyId }).(pulumi.StringOutput)
}

// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
func (o LookupListenerResultOutput) SendTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.SendTimeout }).(pulumi.IntOutput)
}

// 监听器关联的后端服务器组 ID。
func (o LookupListenerResultOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
func (o LookupListenerResultOutput) StartPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.StartPort }).(pulumi.IntOutput)
}

// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
func (o LookupListenerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Status }).(pulumi.StringOutput)
}

// 监听器所属标签。
func (o LookupListenerResultOutput) Tags() GetListenerTagArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []GetListenerTag { return v.Tags }).(GetListenerTagArrayOutput)
}

// 监听器最近一次的操作时间。
func (o LookupListenerResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
func (o LookupListenerResultOutput) WafProtectionEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.WafProtectionEnabled }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupListenerResultOutput{})
}
