// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// API 网关支持基于容器服务（VKE）集和容器服务的注册集群功能，将集群导入到 API 网关实例，将其作为网关的 Upstream 来源，以便网关获取集群中的 Service 列表。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:apig/upstreamSource:UpstreamSource example "upstream_source_id"
// ```
type UpstreamSource struct {
	pulumi.CustomResourceState

	// 备注，长度限制为0~253个字符。
	Comments pulumi.StringOutput `pulumi:"comments"`
	// 创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 网关实例ID。
	GatewayId pulumi.StringOutput `pulumi:"gatewayId"`
	// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
	IngressSettings UpstreamSourceIngressSettingsOutput `pulumi:"ingressSettings"`
	// Upstream来源配置。
	SourceSpec UpstreamSourceSourceSpecOutput `pulumi:"sourceSpec"`
	// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
	Status pulumi.StringOutput `pulumi:"status"`
	// 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// 更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// Upstream来源ID。
	UpstreamSourceId pulumi.StringOutput `pulumi:"upstreamSourceId"`
	// 指定命名空间。
	WatchNamespaces pulumi.StringArrayOutput `pulumi:"watchNamespaces"`
}

// NewUpstreamSource registers a new resource with the given unique name, arguments, and options.
func NewUpstreamSource(ctx *pulumi.Context,
	name string, args *UpstreamSourceArgs, opts ...pulumi.ResourceOption) (*UpstreamSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GatewayId == nil {
		return nil, errors.New("invalid value for required argument 'GatewayId'")
	}
	if args.SourceSpec == nil {
		return nil, errors.New("invalid value for required argument 'SourceSpec'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UpstreamSource
	err := ctx.RegisterResource("volcenginecc:apig/upstreamSource:UpstreamSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpstreamSource gets an existing UpstreamSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpstreamSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpstreamSourceState, opts ...pulumi.ResourceOption) (*UpstreamSource, error) {
	var resource UpstreamSource
	err := ctx.ReadResource("volcenginecc:apig/upstreamSource:UpstreamSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UpstreamSource resources.
type upstreamSourceState struct {
	// 备注，长度限制为0~253个字符。
	Comments *string `pulumi:"comments"`
	// 创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 网关实例ID。
	GatewayId *string `pulumi:"gatewayId"`
	// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
	IngressSettings *UpstreamSourceIngressSettings `pulumi:"ingressSettings"`
	// Upstream来源配置。
	SourceSpec *UpstreamSourceSourceSpec `pulumi:"sourceSpec"`
	// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
	SourceType *string `pulumi:"sourceType"`
	// 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
	Status *string `pulumi:"status"`
	// 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
	StatusMessage *string `pulumi:"statusMessage"`
	// 更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// Upstream来源ID。
	UpstreamSourceId *string `pulumi:"upstreamSourceId"`
	// 指定命名空间。
	WatchNamespaces []string `pulumi:"watchNamespaces"`
}

type UpstreamSourceState struct {
	// 备注，长度限制为0~253个字符。
	Comments pulumi.StringPtrInput
	// 创建时间。
	CreatedTime pulumi.StringPtrInput
	// 网关实例ID。
	GatewayId pulumi.StringPtrInput
	// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
	IngressSettings UpstreamSourceIngressSettingsPtrInput
	// Upstream来源配置。
	SourceSpec UpstreamSourceSourceSpecPtrInput
	// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
	SourceType pulumi.StringPtrInput
	// 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
	Status pulumi.StringPtrInput
	// 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
	StatusMessage pulumi.StringPtrInput
	// 更新时间。
	UpdatedTime pulumi.StringPtrInput
	// Upstream来源ID。
	UpstreamSourceId pulumi.StringPtrInput
	// 指定命名空间。
	WatchNamespaces pulumi.StringArrayInput
}

func (UpstreamSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamSourceState)(nil)).Elem()
}

type upstreamSourceArgs struct {
	// 备注，长度限制为0~253个字符。
	Comments *string `pulumi:"comments"`
	// 网关实例ID。
	GatewayId string `pulumi:"gatewayId"`
	// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
	IngressSettings *UpstreamSourceIngressSettings `pulumi:"ingressSettings"`
	// Upstream来源配置。
	SourceSpec UpstreamSourceSourceSpec `pulumi:"sourceSpec"`
	// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
	SourceType string `pulumi:"sourceType"`
	// 指定命名空间。
	WatchNamespaces []string `pulumi:"watchNamespaces"`
}

// The set of arguments for constructing a UpstreamSource resource.
type UpstreamSourceArgs struct {
	// 备注，长度限制为0~253个字符。
	Comments pulumi.StringPtrInput
	// 网关实例ID。
	GatewayId pulumi.StringInput
	// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
	IngressSettings UpstreamSourceIngressSettingsPtrInput
	// Upstream来源配置。
	SourceSpec UpstreamSourceSourceSpecInput
	// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
	SourceType pulumi.StringInput
	// 指定命名空间。
	WatchNamespaces pulumi.StringArrayInput
}

func (UpstreamSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamSourceArgs)(nil)).Elem()
}

type UpstreamSourceInput interface {
	pulumi.Input

	ToUpstreamSourceOutput() UpstreamSourceOutput
	ToUpstreamSourceOutputWithContext(ctx context.Context) UpstreamSourceOutput
}

func (*UpstreamSource) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamSource)(nil)).Elem()
}

func (i *UpstreamSource) ToUpstreamSourceOutput() UpstreamSourceOutput {
	return i.ToUpstreamSourceOutputWithContext(context.Background())
}

func (i *UpstreamSource) ToUpstreamSourceOutputWithContext(ctx context.Context) UpstreamSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamSourceOutput)
}

// UpstreamSourceArrayInput is an input type that accepts UpstreamSourceArray and UpstreamSourceArrayOutput values.
// You can construct a concrete instance of `UpstreamSourceArrayInput` via:
//
//	UpstreamSourceArray{ UpstreamSourceArgs{...} }
type UpstreamSourceArrayInput interface {
	pulumi.Input

	ToUpstreamSourceArrayOutput() UpstreamSourceArrayOutput
	ToUpstreamSourceArrayOutputWithContext(context.Context) UpstreamSourceArrayOutput
}

type UpstreamSourceArray []UpstreamSourceInput

func (UpstreamSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpstreamSource)(nil)).Elem()
}

func (i UpstreamSourceArray) ToUpstreamSourceArrayOutput() UpstreamSourceArrayOutput {
	return i.ToUpstreamSourceArrayOutputWithContext(context.Background())
}

func (i UpstreamSourceArray) ToUpstreamSourceArrayOutputWithContext(ctx context.Context) UpstreamSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamSourceArrayOutput)
}

// UpstreamSourceMapInput is an input type that accepts UpstreamSourceMap and UpstreamSourceMapOutput values.
// You can construct a concrete instance of `UpstreamSourceMapInput` via:
//
//	UpstreamSourceMap{ "key": UpstreamSourceArgs{...} }
type UpstreamSourceMapInput interface {
	pulumi.Input

	ToUpstreamSourceMapOutput() UpstreamSourceMapOutput
	ToUpstreamSourceMapOutputWithContext(context.Context) UpstreamSourceMapOutput
}

type UpstreamSourceMap map[string]UpstreamSourceInput

func (UpstreamSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpstreamSource)(nil)).Elem()
}

func (i UpstreamSourceMap) ToUpstreamSourceMapOutput() UpstreamSourceMapOutput {
	return i.ToUpstreamSourceMapOutputWithContext(context.Background())
}

func (i UpstreamSourceMap) ToUpstreamSourceMapOutputWithContext(ctx context.Context) UpstreamSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamSourceMapOutput)
}

type UpstreamSourceOutput struct{ *pulumi.OutputState }

func (UpstreamSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UpstreamSource)(nil)).Elem()
}

func (o UpstreamSourceOutput) ToUpstreamSourceOutput() UpstreamSourceOutput {
	return o
}

func (o UpstreamSourceOutput) ToUpstreamSourceOutputWithContext(ctx context.Context) UpstreamSourceOutput {
	return o
}

// 备注，长度限制为0~253个字符。
func (o UpstreamSourceOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.Comments }).(pulumi.StringOutput)
}

// 创建时间。
func (o UpstreamSourceOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 网关实例ID。
func (o UpstreamSourceOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.GatewayId }).(pulumi.StringOutput)
}

// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
func (o UpstreamSourceOutput) IngressSettings() UpstreamSourceIngressSettingsOutput {
	return o.ApplyT(func(v *UpstreamSource) UpstreamSourceIngressSettingsOutput { return v.IngressSettings }).(UpstreamSourceIngressSettingsOutput)
}

// Upstream来源配置。
func (o UpstreamSourceOutput) SourceSpec() UpstreamSourceSourceSpecOutput {
	return o.ApplyT(func(v *UpstreamSource) UpstreamSourceSourceSpecOutput { return v.SourceSpec }).(UpstreamSourceSourceSpecOutput)
}

// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
func (o UpstreamSourceOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
func (o UpstreamSourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
func (o UpstreamSourceOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// 更新时间。
func (o UpstreamSourceOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// Upstream来源ID。
func (o UpstreamSourceOutput) UpstreamSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringOutput { return v.UpstreamSourceId }).(pulumi.StringOutput)
}

// 指定命名空间。
func (o UpstreamSourceOutput) WatchNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *UpstreamSource) pulumi.StringArrayOutput { return v.WatchNamespaces }).(pulumi.StringArrayOutput)
}

type UpstreamSourceArrayOutput struct{ *pulumi.OutputState }

func (UpstreamSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UpstreamSource)(nil)).Elem()
}

func (o UpstreamSourceArrayOutput) ToUpstreamSourceArrayOutput() UpstreamSourceArrayOutput {
	return o
}

func (o UpstreamSourceArrayOutput) ToUpstreamSourceArrayOutputWithContext(ctx context.Context) UpstreamSourceArrayOutput {
	return o
}

func (o UpstreamSourceArrayOutput) Index(i pulumi.IntInput) UpstreamSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UpstreamSource {
		return vs[0].([]*UpstreamSource)[vs[1].(int)]
	}).(UpstreamSourceOutput)
}

type UpstreamSourceMapOutput struct{ *pulumi.OutputState }

func (UpstreamSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UpstreamSource)(nil)).Elem()
}

func (o UpstreamSourceMapOutput) ToUpstreamSourceMapOutput() UpstreamSourceMapOutput {
	return o
}

func (o UpstreamSourceMapOutput) ToUpstreamSourceMapOutputWithContext(ctx context.Context) UpstreamSourceMapOutput {
	return o
}

func (o UpstreamSourceMapOutput) MapIndex(k pulumi.StringInput) UpstreamSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UpstreamSource {
		return vs[0].(map[string]*UpstreamSource)[vs[1].(string)]
	}).(UpstreamSourceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamSourceInput)(nil)).Elem(), &UpstreamSource{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamSourceArrayInput)(nil)).Elem(), UpstreamSourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamSourceMapInput)(nil)).Elem(), UpstreamSourceMap{})
	pulumi.RegisterOutputType(UpstreamSourceOutput{})
	pulumi.RegisterOutputType(UpstreamSourceArrayOutput{})
	pulumi.RegisterOutputType(UpstreamSourceMapOutput{})
}
