// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::APIG::UpstreamSource
func LookupUpstreamSource(ctx *pulumi.Context, args *LookupUpstreamSourceArgs, opts ...pulumi.InvokeOption) (*LookupUpstreamSourceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupUpstreamSourceResult
	err := ctx.Invoke("volcenginecc:apig/getUpstreamSource:getUpstreamSource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUpstreamSource.
type LookupUpstreamSourceArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getUpstreamSource.
type LookupUpstreamSourceResult struct {
	// 备注，长度限制为0~253个字符。
	Comments string `pulumi:"comments"`
	// 创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 网关实例ID。
	GatewayId string `pulumi:"gatewayId"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
	IngressSettings GetUpstreamSourceIngressSettings `pulumi:"ingressSettings"`
	// Upstream来源配置。
	SourceSpec GetUpstreamSourceSourceSpec `pulumi:"sourceSpec"`
	// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
	SourceType string `pulumi:"sourceType"`
	// 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
	Status string `pulumi:"status"`
	// 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
	StatusMessage string `pulumi:"statusMessage"`
	// 更新时间。
	UpdatedTime string `pulumi:"updatedTime"`
	// Upstream来源ID。
	UpstreamSourceId string `pulumi:"upstreamSourceId"`
	// 指定命名空间。
	WatchNamespaces []string `pulumi:"watchNamespaces"`
}

func LookupUpstreamSourceOutput(ctx *pulumi.Context, args LookupUpstreamSourceOutputArgs, opts ...pulumi.InvokeOption) LookupUpstreamSourceResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupUpstreamSourceResultOutput, error) {
			args := v.(LookupUpstreamSourceArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:apig/getUpstreamSource:getUpstreamSource", args, LookupUpstreamSourceResultOutput{}, options).(LookupUpstreamSourceResultOutput), nil
		}).(LookupUpstreamSourceResultOutput)
}

// A collection of arguments for invoking getUpstreamSource.
type LookupUpstreamSourceOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupUpstreamSourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUpstreamSourceArgs)(nil)).Elem()
}

// A collection of values returned by getUpstreamSource.
type LookupUpstreamSourceResultOutput struct{ *pulumi.OutputState }

func (LookupUpstreamSourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupUpstreamSourceResult)(nil)).Elem()
}

func (o LookupUpstreamSourceResultOutput) ToLookupUpstreamSourceResultOutput() LookupUpstreamSourceResultOutput {
	return o
}

func (o LookupUpstreamSourceResultOutput) ToLookupUpstreamSourceResultOutputWithContext(ctx context.Context) LookupUpstreamSourceResultOutput {
	return o
}

// 备注，长度限制为0~253个字符。
func (o LookupUpstreamSourceResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.Comments }).(pulumi.StringOutput)
}

// 创建时间。
func (o LookupUpstreamSourceResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 网关实例ID。
func (o LookupUpstreamSourceResultOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.GatewayId }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupUpstreamSourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.Id }).(pulumi.StringOutput)
}

// 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
func (o LookupUpstreamSourceResultOutput) IngressSettings() GetUpstreamSourceIngressSettingsOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) GetUpstreamSourceIngressSettings { return v.IngressSettings }).(GetUpstreamSourceIngressSettingsOutput)
}

// Upstream来源配置。
func (o LookupUpstreamSourceResultOutput) SourceSpec() GetUpstreamSourceSourceSpecOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) GetUpstreamSourceSourceSpec { return v.SourceSpec }).(GetUpstreamSourceSourceSpecOutput)
}

// Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
func (o LookupUpstreamSourceResultOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.SourceType }).(pulumi.StringOutput)
}

// 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
func (o LookupUpstreamSourceResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.Status }).(pulumi.StringOutput)
}

// 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
func (o LookupUpstreamSourceResultOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.StatusMessage }).(pulumi.StringOutput)
}

// 更新时间。
func (o LookupUpstreamSourceResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// Upstream来源ID。
func (o LookupUpstreamSourceResultOutput) UpstreamSourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) string { return v.UpstreamSourceId }).(pulumi.StringOutput)
}

// 指定命名空间。
func (o LookupUpstreamSourceResultOutput) WatchNamespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupUpstreamSourceResult) []string { return v.WatchNamespaces }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupUpstreamSourceResultOutput{})
}
