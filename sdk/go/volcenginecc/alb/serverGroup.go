// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 服务器组是后端服务器的逻辑集合。ALB 实例按照您配置的转发规则确定客户端请求将被转发到的服务器组。然后，ALB 实例根据您配置的负载均衡策略，将请求分发给服务器组内的后端服务器。后端服务器接收并处理请求。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:alb/serverGroup:ServerGroup example "server_group_id"
// ```
type ServerGroup struct {
	pulumi.CustomResourceState

	// 后端服务器组的创建时间。
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// 后端服务器组的描述。
	Description pulumi.StringOutput `pulumi:"description"`
	// 服务器组健康检查配置信息。
	HealthCheck ServerGroupHealthCheckOutput `pulumi:"healthCheck"`
	// 服务器组的IP地址类型。目前只支持 IPv4
	IpAddressType pulumi.StringOutput            `pulumi:"ipAddressType"`
	Listeners     ServerGroupListenerArrayOutput `pulumi:"listeners"`
	// 后端服务器组所属项目名称。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 后端协议：HTTP，HTTPS。
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler pulumi.StringOutput `pulumi:"scheduler"`
	// 服务器组内后端服务器的个数。
	ServerCount pulumi.IntOutput `pulumi:"serverCount"`
	// 后端服务器组的ID。
	ServerGroupId pulumi.StringOutput `pulumi:"serverGroupId"`
	// 后端服务器组的名称。
	ServerGroupName pulumi.StringOutput `pulumi:"serverGroupName"`
	// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
	ServerGroupType pulumi.StringOutput          `pulumi:"serverGroupType"`
	Servers         ServerGroupServerArrayOutput `pulumi:"servers"`
	// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
	Status pulumi.StringOutput `pulumi:"status"`
	// 会话保持功能的参数信息。
	StickySessionConfig ServerGroupStickySessionConfigOutput `pulumi:"stickySessionConfig"`
	Tags                ServerGroupTagArrayOutput            `pulumi:"tags"`
	// 后端服务器组的最近操作时间。
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// 后端服务器组所属 Vpc 的 ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewServerGroup registers a new resource with the given unique name, arguments, and options.
func NewServerGroup(ctx *pulumi.Context,
	name string, args *ServerGroupArgs, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ServerGroup
	err := ctx.RegisterResource("volcenginecc:alb/serverGroup:ServerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServerGroup gets an existing ServerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServerGroupState, opts ...pulumi.ResourceOption) (*ServerGroup, error) {
	var resource ServerGroup
	err := ctx.ReadResource("volcenginecc:alb/serverGroup:ServerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServerGroup resources.
type serverGroupState struct {
	// 后端服务器组的创建时间。
	CreateTime *string `pulumi:"createTime"`
	// 后端服务器组的描述。
	Description *string `pulumi:"description"`
	// 服务器组健康检查配置信息。
	HealthCheck *ServerGroupHealthCheck `pulumi:"healthCheck"`
	// 服务器组的IP地址类型。目前只支持 IPv4
	IpAddressType *string               `pulumi:"ipAddressType"`
	Listeners     []ServerGroupListener `pulumi:"listeners"`
	// 后端服务器组所属项目名称。
	ProjectName *string `pulumi:"projectName"`
	// 后端协议：HTTP，HTTPS。
	Protocol *string `pulumi:"protocol"`
	// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler *string `pulumi:"scheduler"`
	// 服务器组内后端服务器的个数。
	ServerCount *int `pulumi:"serverCount"`
	// 后端服务器组的ID。
	ServerGroupId *string `pulumi:"serverGroupId"`
	// 后端服务器组的名称。
	ServerGroupName *string `pulumi:"serverGroupName"`
	// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
	ServerGroupType *string             `pulumi:"serverGroupType"`
	Servers         []ServerGroupServer `pulumi:"servers"`
	// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
	Status *string `pulumi:"status"`
	// 会话保持功能的参数信息。
	StickySessionConfig *ServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	Tags                []ServerGroupTag                `pulumi:"tags"`
	// 后端服务器组的最近操作时间。
	UpdateTime *string `pulumi:"updateTime"`
	// 后端服务器组所属 Vpc 的 ID。
	VpcId *string `pulumi:"vpcId"`
}

type ServerGroupState struct {
	// 后端服务器组的创建时间。
	CreateTime pulumi.StringPtrInput
	// 后端服务器组的描述。
	Description pulumi.StringPtrInput
	// 服务器组健康检查配置信息。
	HealthCheck ServerGroupHealthCheckPtrInput
	// 服务器组的IP地址类型。目前只支持 IPv4
	IpAddressType pulumi.StringPtrInput
	Listeners     ServerGroupListenerArrayInput
	// 后端服务器组所属项目名称。
	ProjectName pulumi.StringPtrInput
	// 后端协议：HTTP，HTTPS。
	Protocol pulumi.StringPtrInput
	// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler pulumi.StringPtrInput
	// 服务器组内后端服务器的个数。
	ServerCount pulumi.IntPtrInput
	// 后端服务器组的ID。
	ServerGroupId pulumi.StringPtrInput
	// 后端服务器组的名称。
	ServerGroupName pulumi.StringPtrInput
	// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
	ServerGroupType pulumi.StringPtrInput
	Servers         ServerGroupServerArrayInput
	// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
	Status pulumi.StringPtrInput
	// 会话保持功能的参数信息。
	StickySessionConfig ServerGroupStickySessionConfigPtrInput
	Tags                ServerGroupTagArrayInput
	// 后端服务器组的最近操作时间。
	UpdateTime pulumi.StringPtrInput
	// 后端服务器组所属 Vpc 的 ID。
	VpcId pulumi.StringPtrInput
}

func (ServerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupState)(nil)).Elem()
}

type serverGroupArgs struct {
	// 后端服务器组的描述。
	Description *string `pulumi:"description"`
	// 服务器组健康检查配置信息。
	HealthCheck *ServerGroupHealthCheck `pulumi:"healthCheck"`
	// 服务器组的IP地址类型。目前只支持 IPv4
	IpAddressType *string `pulumi:"ipAddressType"`
	// 后端服务器组所属项目名称。
	ProjectName *string `pulumi:"projectName"`
	// 后端协议：HTTP，HTTPS。
	Protocol *string `pulumi:"protocol"`
	// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler *string `pulumi:"scheduler"`
	// 后端服务器组的名称。
	ServerGroupName *string `pulumi:"serverGroupName"`
	// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
	ServerGroupType *string             `pulumi:"serverGroupType"`
	Servers         []ServerGroupServer `pulumi:"servers"`
	// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
	Status *string `pulumi:"status"`
	// 会话保持功能的参数信息。
	StickySessionConfig *ServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	Tags                []ServerGroupTag                `pulumi:"tags"`
	// 后端服务器组所属 Vpc 的 ID。
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a ServerGroup resource.
type ServerGroupArgs struct {
	// 后端服务器组的描述。
	Description pulumi.StringPtrInput
	// 服务器组健康检查配置信息。
	HealthCheck ServerGroupHealthCheckPtrInput
	// 服务器组的IP地址类型。目前只支持 IPv4
	IpAddressType pulumi.StringPtrInput
	// 后端服务器组所属项目名称。
	ProjectName pulumi.StringPtrInput
	// 后端协议：HTTP，HTTPS。
	Protocol pulumi.StringPtrInput
	// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler pulumi.StringPtrInput
	// 后端服务器组的名称。
	ServerGroupName pulumi.StringPtrInput
	// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
	ServerGroupType pulumi.StringPtrInput
	Servers         ServerGroupServerArrayInput
	// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
	Status pulumi.StringPtrInput
	// 会话保持功能的参数信息。
	StickySessionConfig ServerGroupStickySessionConfigPtrInput
	Tags                ServerGroupTagArrayInput
	// 后端服务器组所属 Vpc 的 ID。
	VpcId pulumi.StringInput
}

func (ServerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serverGroupArgs)(nil)).Elem()
}

type ServerGroupInput interface {
	pulumi.Input

	ToServerGroupOutput() ServerGroupOutput
	ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput
}

func (*ServerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (i *ServerGroup) ToServerGroupOutput() ServerGroupOutput {
	return i.ToServerGroupOutputWithContext(context.Background())
}

func (i *ServerGroup) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupOutput)
}

// ServerGroupArrayInput is an input type that accepts ServerGroupArray and ServerGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupArrayInput` via:
//
//	ServerGroupArray{ ServerGroupArgs{...} }
type ServerGroupArrayInput interface {
	pulumi.Input

	ToServerGroupArrayOutput() ServerGroupArrayOutput
	ToServerGroupArrayOutputWithContext(context.Context) ServerGroupArrayOutput
}

type ServerGroupArray []ServerGroupInput

func (ServerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupArray) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return i.ToServerGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupArray) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupArrayOutput)
}

// ServerGroupMapInput is an input type that accepts ServerGroupMap and ServerGroupMapOutput values.
// You can construct a concrete instance of `ServerGroupMapInput` via:
//
//	ServerGroupMap{ "key": ServerGroupArgs{...} }
type ServerGroupMapInput interface {
	pulumi.Input

	ToServerGroupMapOutput() ServerGroupMapOutput
	ToServerGroupMapOutputWithContext(context.Context) ServerGroupMapOutput
}

type ServerGroupMap map[string]ServerGroupInput

func (ServerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (i ServerGroupMap) ToServerGroupMapOutput() ServerGroupMapOutput {
	return i.ToServerGroupMapOutputWithContext(context.Background())
}

func (i ServerGroupMap) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupMapOutput)
}

type ServerGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServerGroup)(nil)).Elem()
}

func (o ServerGroupOutput) ToServerGroupOutput() ServerGroupOutput {
	return o
}

func (o ServerGroupOutput) ToServerGroupOutputWithContext(ctx context.Context) ServerGroupOutput {
	return o
}

// 后端服务器组的创建时间。
func (o ServerGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// 后端服务器组的描述。
func (o ServerGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 服务器组健康检查配置信息。
func (o ServerGroupOutput) HealthCheck() ServerGroupHealthCheckOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupHealthCheckOutput { return v.HealthCheck }).(ServerGroupHealthCheckOutput)
}

// 服务器组的IP地址类型。目前只支持 IPv4
func (o ServerGroupOutput) IpAddressType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.IpAddressType }).(pulumi.StringOutput)
}

func (o ServerGroupOutput) Listeners() ServerGroupListenerArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupListenerArrayOutput { return v.Listeners }).(ServerGroupListenerArrayOutput)
}

// 后端服务器组所属项目名称。
func (o ServerGroupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 后端协议：HTTP，HTTPS。
func (o ServerGroupOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
func (o ServerGroupOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Scheduler }).(pulumi.StringOutput)
}

// 服务器组内后端服务器的个数。
func (o ServerGroupOutput) ServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.IntOutput { return v.ServerCount }).(pulumi.IntOutput)
}

// 后端服务器组的ID。
func (o ServerGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 后端服务器组的名称。
func (o ServerGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupName }).(pulumi.StringOutput)
}

// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
func (o ServerGroupOutput) ServerGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.ServerGroupType }).(pulumi.StringOutput)
}

func (o ServerGroupOutput) Servers() ServerGroupServerArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupServerArrayOutput { return v.Servers }).(ServerGroupServerArrayOutput)
}

// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
func (o ServerGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 会话保持功能的参数信息。
func (o ServerGroupOutput) StickySessionConfig() ServerGroupStickySessionConfigOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupStickySessionConfigOutput { return v.StickySessionConfig }).(ServerGroupStickySessionConfigOutput)
}

func (o ServerGroupOutput) Tags() ServerGroupTagArrayOutput {
	return o.ApplyT(func(v *ServerGroup) ServerGroupTagArrayOutput { return v.Tags }).(ServerGroupTagArrayOutput)
}

// 后端服务器组的最近操作时间。
func (o ServerGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// 后端服务器组所属 Vpc 的 ID。
func (o ServerGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ServerGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type ServerGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutput() ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) ToServerGroupArrayOutputWithContext(ctx context.Context) ServerGroupArrayOutput {
	return o
}

func (o ServerGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].([]*ServerGroup)[vs[1].(int)]
	}).(ServerGroupOutput)
}

type ServerGroupMapOutput struct{ *pulumi.OutputState }

func (ServerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServerGroup)(nil)).Elem()
}

func (o ServerGroupMapOutput) ToServerGroupMapOutput() ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) ToServerGroupMapOutputWithContext(ctx context.Context) ServerGroupMapOutput {
	return o
}

func (o ServerGroupMapOutput) MapIndex(k pulumi.StringInput) ServerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServerGroup {
		return vs[0].(map[string]*ServerGroup)[vs[1].(string)]
	}).(ServerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupInput)(nil)).Elem(), &ServerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupArrayInput)(nil)).Elem(), ServerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupMapInput)(nil)).Elem(), ServerGroupMap{})
	pulumi.RegisterOutputType(ServerGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupMapOutput{})
}
