// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type CertificateTag struct {
	Key   *string `pulumi:"key"`
	Value *string `pulumi:"value"`
}

// CertificateTagInput is an input type that accepts CertificateTagArgs and CertificateTagOutput values.
// You can construct a concrete instance of `CertificateTagInput` via:
//
//	CertificateTagArgs{...}
type CertificateTagInput interface {
	pulumi.Input

	ToCertificateTagOutput() CertificateTagOutput
	ToCertificateTagOutputWithContext(context.Context) CertificateTagOutput
}

type CertificateTagArgs struct {
	Key   pulumi.StringPtrInput `pulumi:"key"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTag)(nil)).Elem()
}

func (i CertificateTagArgs) ToCertificateTagOutput() CertificateTagOutput {
	return i.ToCertificateTagOutputWithContext(context.Background())
}

func (i CertificateTagArgs) ToCertificateTagOutputWithContext(ctx context.Context) CertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTagOutput)
}

// CertificateTagArrayInput is an input type that accepts CertificateTagArray and CertificateTagArrayOutput values.
// You can construct a concrete instance of `CertificateTagArrayInput` via:
//
//	CertificateTagArray{ CertificateTagArgs{...} }
type CertificateTagArrayInput interface {
	pulumi.Input

	ToCertificateTagArrayOutput() CertificateTagArrayOutput
	ToCertificateTagArrayOutputWithContext(context.Context) CertificateTagArrayOutput
}

type CertificateTagArray []CertificateTagInput

func (CertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTag)(nil)).Elem()
}

func (i CertificateTagArray) ToCertificateTagArrayOutput() CertificateTagArrayOutput {
	return i.ToCertificateTagArrayOutputWithContext(context.Background())
}

func (i CertificateTagArray) ToCertificateTagArrayOutputWithContext(ctx context.Context) CertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTagArrayOutput)
}

type CertificateTagOutput struct{ *pulumi.OutputState }

func (CertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTag)(nil)).Elem()
}

func (o CertificateTagOutput) ToCertificateTagOutput() CertificateTagOutput {
	return o
}

func (o CertificateTagOutput) ToCertificateTagOutputWithContext(ctx context.Context) CertificateTagOutput {
	return o
}

func (o CertificateTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

func (o CertificateTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CertificateTagArrayOutput struct{ *pulumi.OutputState }

func (CertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTag)(nil)).Elem()
}

func (o CertificateTagArrayOutput) ToCertificateTagArrayOutput() CertificateTagArrayOutput {
	return o
}

func (o CertificateTagArrayOutput) ToCertificateTagArrayOutputWithContext(ctx context.Context) CertificateTagArrayOutput {
	return o
}

func (o CertificateTagArrayOutput) Index(i pulumi.IntInput) CertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateTag {
		return vs[0].([]CertificateTag)[vs[1].(int)]
	}).(CertificateTagOutput)
}

type GetCertificateTag struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetCertificateTagInput is an input type that accepts GetCertificateTagArgs and GetCertificateTagOutput values.
// You can construct a concrete instance of `GetCertificateTagInput` via:
//
//	GetCertificateTagArgs{...}
type GetCertificateTagInput interface {
	pulumi.Input

	ToGetCertificateTagOutput() GetCertificateTagOutput
	ToGetCertificateTagOutputWithContext(context.Context) GetCertificateTagOutput
}

type GetCertificateTagArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetCertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateTag)(nil)).Elem()
}

func (i GetCertificateTagArgs) ToGetCertificateTagOutput() GetCertificateTagOutput {
	return i.ToGetCertificateTagOutputWithContext(context.Background())
}

func (i GetCertificateTagArgs) ToGetCertificateTagOutputWithContext(ctx context.Context) GetCertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateTagOutput)
}

// GetCertificateTagArrayInput is an input type that accepts GetCertificateTagArray and GetCertificateTagArrayOutput values.
// You can construct a concrete instance of `GetCertificateTagArrayInput` via:
//
//	GetCertificateTagArray{ GetCertificateTagArgs{...} }
type GetCertificateTagArrayInput interface {
	pulumi.Input

	ToGetCertificateTagArrayOutput() GetCertificateTagArrayOutput
	ToGetCertificateTagArrayOutputWithContext(context.Context) GetCertificateTagArrayOutput
}

type GetCertificateTagArray []GetCertificateTagInput

func (GetCertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateTag)(nil)).Elem()
}

func (i GetCertificateTagArray) ToGetCertificateTagArrayOutput() GetCertificateTagArrayOutput {
	return i.ToGetCertificateTagArrayOutputWithContext(context.Background())
}

func (i GetCertificateTagArray) ToGetCertificateTagArrayOutputWithContext(ctx context.Context) GetCertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateTagArrayOutput)
}

type GetCertificateTagOutput struct{ *pulumi.OutputState }

func (GetCertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateTag)(nil)).Elem()
}

func (o GetCertificateTagOutput) ToGetCertificateTagOutput() GetCertificateTagOutput {
	return o
}

func (o GetCertificateTagOutput) ToGetCertificateTagOutputWithContext(ctx context.Context) GetCertificateTagOutput {
	return o
}

func (o GetCertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetCertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetCertificateTagArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateTag)(nil)).Elem()
}

func (o GetCertificateTagArrayOutput) ToGetCertificateTagArrayOutput() GetCertificateTagArrayOutput {
	return o
}

func (o GetCertificateTagArrayOutput) ToGetCertificateTagArrayOutputWithContext(ctx context.Context) GetCertificateTagArrayOutput {
	return o
}

func (o GetCertificateTagArrayOutput) Index(i pulumi.IntInput) GetCertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateTag {
		return vs[0].([]GetCertificateTag)[vs[1].(int)]
	}).(GetCertificateTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTagInput)(nil)).Elem(), CertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTagArrayInput)(nil)).Elem(), CertificateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateTagInput)(nil)).Elem(), GetCertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateTagArrayInput)(nil)).Elem(), GetCertificateTagArray{})
	pulumi.RegisterOutputType(CertificateTagOutput{})
	pulumi.RegisterOutputType(CertificateTagArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateTagOutput{})
	pulumi.RegisterOutputType(GetCertificateTagArrayOutput{})
}
