// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::ALB::ServerGroup
func LookupServerGroup(ctx *pulumi.Context, args *LookupServerGroupArgs, opts ...pulumi.InvokeOption) (*LookupServerGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServerGroupResult
	err := ctx.Invoke("volcenginecc:alb/getServerGroup:getServerGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerGroup.
type LookupServerGroupArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getServerGroup.
type LookupServerGroupResult struct {
	// 后端服务器组的创建时间。
	CreateTime string `pulumi:"createTime"`
	// 后端服务器组的描述。
	Description string `pulumi:"description"`
	// 服务器组健康检查配置信息。
	HealthCheck GetServerGroupHealthCheck `pulumi:"healthCheck"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 服务器组的IP地址类型。目前只支持 IPv4
	IpAddressType string `pulumi:"ipAddressType"`
	// 后端服务器组关联的监听器信息。
	Listeners []GetServerGroupListener `pulumi:"listeners"`
	// 后端服务器组所属项目名称。
	ProjectName string `pulumi:"projectName"`
	// 后端协议：HTTP，HTTPS。
	Protocol string `pulumi:"protocol"`
	// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
	Scheduler string `pulumi:"scheduler"`
	// 服务器组内后端服务器的个数。
	ServerCount int `pulumi:"serverCount"`
	// 后端服务器组的ID。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 后端服务器组的名称。
	ServerGroupName string `pulumi:"serverGroupName"`
	// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
	ServerGroupType string `pulumi:"serverGroupType"`
	// 后端服务器组中服务器的信息。
	Servers []GetServerGroupServer `pulumi:"servers"`
	// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
	Status string `pulumi:"status"`
	// 会话保持功能的参数信息。
	StickySessionConfig GetServerGroupStickySessionConfig `pulumi:"stickySessionConfig"`
	// 标签信息。
	Tags []GetServerGroupTag `pulumi:"tags"`
	// 后端服务器组的最近操作时间。
	UpdateTime string `pulumi:"updateTime"`
	// 后端服务器组所属 Vpc 的 ID。
	VpcId string `pulumi:"vpcId"`
}

func LookupServerGroupOutput(ctx *pulumi.Context, args LookupServerGroupOutputArgs, opts ...pulumi.InvokeOption) LookupServerGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupServerGroupResultOutput, error) {
			args := v.(LookupServerGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:alb/getServerGroup:getServerGroup", args, LookupServerGroupResultOutput{}, options).(LookupServerGroupResultOutput), nil
		}).(LookupServerGroupResultOutput)
}

// A collection of arguments for invoking getServerGroup.
type LookupServerGroupOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupServerGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerGroupArgs)(nil)).Elem()
}

// A collection of values returned by getServerGroup.
type LookupServerGroupResultOutput struct{ *pulumi.OutputState }

func (LookupServerGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerGroupResult)(nil)).Elem()
}

func (o LookupServerGroupResultOutput) ToLookupServerGroupResultOutput() LookupServerGroupResultOutput {
	return o
}

func (o LookupServerGroupResultOutput) ToLookupServerGroupResultOutputWithContext(ctx context.Context) LookupServerGroupResultOutput {
	return o
}

// 后端服务器组的创建时间。
func (o LookupServerGroupResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// 后端服务器组的描述。
func (o LookupServerGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// 服务器组健康检查配置信息。
func (o LookupServerGroupResultOutput) HealthCheck() GetServerGroupHealthCheckOutput {
	return o.ApplyT(func(v LookupServerGroupResult) GetServerGroupHealthCheck { return v.HealthCheck }).(GetServerGroupHealthCheckOutput)
}

// Uniquely identifies the resource.
func (o LookupServerGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// 服务器组的IP地址类型。目前只支持 IPv4
func (o LookupServerGroupResultOutput) IpAddressType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.IpAddressType }).(pulumi.StringOutput)
}

// 后端服务器组关联的监听器信息。
func (o LookupServerGroupResultOutput) Listeners() GetServerGroupListenerArrayOutput {
	return o.ApplyT(func(v LookupServerGroupResult) []GetServerGroupListener { return v.Listeners }).(GetServerGroupListenerArrayOutput)
}

// 后端服务器组所属项目名称。
func (o LookupServerGroupResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 后端协议：HTTP，HTTPS。
func (o LookupServerGroupResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
func (o LookupServerGroupResultOutput) Scheduler() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.Scheduler }).(pulumi.StringOutput)
}

// 服务器组内后端服务器的个数。
func (o LookupServerGroupResultOutput) ServerCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupServerGroupResult) int { return v.ServerCount }).(pulumi.IntOutput)
}

// 后端服务器组的ID。
func (o LookupServerGroupResultOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 后端服务器组的名称。
func (o LookupServerGroupResultOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
func (o LookupServerGroupResultOutput) ServerGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.ServerGroupType }).(pulumi.StringOutput)
}

// 后端服务器组中服务器的信息。
func (o LookupServerGroupResultOutput) Servers() GetServerGroupServerArrayOutput {
	return o.ApplyT(func(v LookupServerGroupResult) []GetServerGroupServer { return v.Servers }).(GetServerGroupServerArrayOutput)
}

// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
func (o LookupServerGroupResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.Status }).(pulumi.StringOutput)
}

// 会话保持功能的参数信息。
func (o LookupServerGroupResultOutput) StickySessionConfig() GetServerGroupStickySessionConfigOutput {
	return o.ApplyT(func(v LookupServerGroupResult) GetServerGroupStickySessionConfig { return v.StickySessionConfig }).(GetServerGroupStickySessionConfigOutput)
}

// 标签信息。
func (o LookupServerGroupResultOutput) Tags() GetServerGroupTagArrayOutput {
	return o.ApplyT(func(v LookupServerGroupResult) []GetServerGroupTag { return v.Tags }).(GetServerGroupTagArrayOutput)
}

// 后端服务器组的最近操作时间。
func (o LookupServerGroupResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// 后端服务器组所属 Vpc 的 ID。
func (o LookupServerGroupResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerGroupResult) string { return v.VpcId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerGroupResultOutput{})
}
