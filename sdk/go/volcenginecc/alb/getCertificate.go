// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::ALB::Certificate
func LookupCertificate(ctx *pulumi.Context, args *LookupCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCertificateResult
	err := ctx.Invoke("volcenginecc:alb/getCertificate:getCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getCertificate.
type LookupCertificateResult struct {
	// 证书ID。
	CertificateId string `pulumi:"certificateId"`
	// 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
	CertificateName string `pulumi:"certificateName"`
	// 证书类型，取值：CA：CA证书、Server：服务器证书。
	CertificateType string `pulumi:"certificateType"`
	// 证书创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 证书描述。
	Description string `pulumi:"description"`
	// 证书域名。
	DomainName string `pulumi:"domainName"`
	// 证书过期时间。
	ExpiredAt string `pulumi:"expiredAt"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 证书关联的监听器列表。
	Listeners []string `pulumi:"listeners"`
	// 服务器证书的私钥，当证书类型为Server时必填。
	PrivateKey string `pulumi:"privateKey"`
	// 项目名称。
	ProjectName string `pulumi:"projectName"`
	// 服务器证书的公钥。
	PublicKey string `pulumi:"publicKey"`
	// 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
	San string `pulumi:"san"`
	// 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
	Status string `pulumi:"status"`
	// 标签列表。
	Tags []GetCertificateTag `pulumi:"tags"`
}

func LookupCertificateOutput(ctx *pulumi.Context, args LookupCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCertificateResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCertificateResultOutput, error) {
			args := v.(LookupCertificateArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:alb/getCertificate:getCertificate", args, LookupCertificateResultOutput{}, options).(LookupCertificateResultOutput), nil
		}).(LookupCertificateResultOutput)
}

// A collection of arguments for invoking getCertificate.
type LookupCertificateOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCertificate.
type LookupCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCertificateResult)(nil)).Elem()
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutput() LookupCertificateResultOutput {
	return o
}

func (o LookupCertificateResultOutput) ToLookupCertificateResultOutputWithContext(ctx context.Context) LookupCertificateResultOutput {
	return o
}

// 证书ID。
func (o LookupCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
func (o LookupCertificateResultOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateName }).(pulumi.StringOutput)
}

// 证书类型，取值：CA：CA证书、Server：服务器证书。
func (o LookupCertificateResultOutput) CertificateType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CertificateType }).(pulumi.StringOutput)
}

// 证书创建时间。
func (o LookupCertificateResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 证书描述。
func (o LookupCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

// 证书域名。
func (o LookupCertificateResultOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.DomainName }).(pulumi.StringOutput)
}

// 证书过期时间。
func (o LookupCertificateResultOutput) ExpiredAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ExpiredAt }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

// 证书关联的监听器列表。
func (o LookupCertificateResultOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []string { return v.Listeners }).(pulumi.StringArrayOutput)
}

// 服务器证书的私钥，当证书类型为Server时必填。
func (o LookupCertificateResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// 项目名称。
func (o LookupCertificateResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 服务器证书的公钥。
func (o LookupCertificateResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
func (o LookupCertificateResultOutput) San() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.San }).(pulumi.StringOutput)
}

// 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
func (o LookupCertificateResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCertificateResult) string { return v.Status }).(pulumi.StringOutput)
}

// 标签列表。
func (o LookupCertificateResultOutput) Tags() GetCertificateTagArrayOutput {
	return o.ApplyT(func(v LookupCertificateResult) []GetCertificateTag { return v.Tags }).(GetCertificateTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCertificateResultOutput{})
}
