// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 每个 ALB 实例至少要有一个监听器才能正常工作。监听器接收客户端请求，并根据您配置的转发规则和负载均衡算法将请求分发到后端服务器上。您可以在一个 ALB 实例下创建多个监听器，并为监听器配置不同的监听协议，以处理使用不同协议的客户端请求。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:alb/listener:Listener example "listener_id"
// ```
type Listener struct {
	pulumi.CustomResourceState

	// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
	AccessLogRecordCustomizedHeadersEnabled pulumi.StringOutput `pulumi:"accessLogRecordCustomizedHeadersEnabled"`
	// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
	AclIds pulumi.StringArrayOutput `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
	AclStatus pulumi.StringOutput `pulumi:"aclStatus"`
	// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
	AclType pulumi.StringOutput `pulumi:"aclType"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
	CaCertificateId pulumi.StringOutput `pulumi:"caCertificateId"`
	// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
	CaCertificateSource pulumi.StringOutput `pulumi:"caCertificateSource"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
	CertCenterCertificateId pulumi.StringOutput `pulumi:"certCenterCertificateId"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
	CertificateId pulumi.StringOutput `pulumi:"certificateId"`
	// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
	CertificateSource pulumi.StringOutput `pulumi:"certificateSource"`
	// 监听器的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 个性化配置ID，未绑定时值为空字符串。
	CustomizedCfgId pulumi.StringOutput `pulumi:"customizedCfgId"`
	// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
	Description      pulumi.StringOutput                `pulumi:"description"`
	DomainExtensions ListenerDomainExtensionArrayOutput `pulumi:"domainExtensions"`
	// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
	EnableHttp2 pulumi.StringOutput `pulumi:"enableHttp2"`
	// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
	EnableQuic pulumi.StringOutput `pulumi:"enableQuic"`
	// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
	Enabled pulumi.StringOutput `pulumi:"enabled"`
	// 监听器 ID。
	ListenerId pulumi.StringOutput `pulumi:"listenerId"`
	// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
	ListenerName pulumi.StringOutput `pulumi:"listenerName"`
	// 监听器所属的负载均衡实例 ID。
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId pulumi.StringOutput `pulumi:"pcaLeafCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
	PcaRootCaCertificateId pulumi.StringOutput `pulumi:"pcaRootCaCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
	PcaSubCaCertificateId pulumi.StringOutput `pulumi:"pcaSubCaCertificateId"`
	// 监听器的监听端口，取值：1 - 65535 。
	Port pulumi.IntOutput `pulumi:"port"`
	// 监听器所属项目名称。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// 监听器的默认服务器组。
	ServerGroupId pulumi.StringOutput            `pulumi:"serverGroupId"`
	ServerGroups  ListenerServerGroupArrayOutput `pulumi:"serverGroups"`
	// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
	Status pulumi.StringOutput    `pulumi:"status"`
	Tags   ListenerTagArrayOutput `pulumi:"tags"`
	// 监听器最近一次的操作时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
}

// NewListener registers a new resource with the given unique name, arguments, and options.
func NewListener(ctx *pulumi.Context,
	name string, args *ListenerArgs, opts ...pulumi.ResourceOption) (*Listener, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.ServerGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ServerGroupId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Listener
	err := ctx.RegisterResource("volcenginecc:alb/listener:Listener", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetListener gets an existing Listener resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetListener(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ListenerState, opts ...pulumi.ResourceOption) (*Listener, error) {
	var resource Listener
	err := ctx.ReadResource("volcenginecc:alb/listener:Listener", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Listener resources.
type listenerState struct {
	// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
	AccessLogRecordCustomizedHeadersEnabled *string `pulumi:"accessLogRecordCustomizedHeadersEnabled"`
	// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
	AclIds []string `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
	AclStatus *string `pulumi:"aclStatus"`
	// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
	AclType *string `pulumi:"aclType"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
	CaCertificateId *string `pulumi:"caCertificateId"`
	// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
	CaCertificateSource *string `pulumi:"caCertificateSource"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
	CertificateId *string `pulumi:"certificateId"`
	// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
	CertificateSource *string `pulumi:"certificateSource"`
	// 监听器的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 个性化配置ID，未绑定时值为空字符串。
	CustomizedCfgId *string `pulumi:"customizedCfgId"`
	// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
	Description      *string                   `pulumi:"description"`
	DomainExtensions []ListenerDomainExtension `pulumi:"domainExtensions"`
	// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
	EnableHttp2 *string `pulumi:"enableHttp2"`
	// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
	EnableQuic *string `pulumi:"enableQuic"`
	// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
	Enabled *string `pulumi:"enabled"`
	// 监听器 ID。
	ListenerId *string `pulumi:"listenerId"`
	// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
	ListenerName *string `pulumi:"listenerName"`
	// 监听器所属的负载均衡实例 ID。
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId *string `pulumi:"pcaLeafCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
	PcaRootCaCertificateId *string `pulumi:"pcaRootCaCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
	PcaSubCaCertificateId *string `pulumi:"pcaSubCaCertificateId"`
	// 监听器的监听端口，取值：1 - 65535 。
	Port *int `pulumi:"port"`
	// 监听器所属项目名称。
	ProjectName *string `pulumi:"projectName"`
	// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
	Protocol *string `pulumi:"protocol"`
	// 监听器的默认服务器组。
	ServerGroupId *string               `pulumi:"serverGroupId"`
	ServerGroups  []ListenerServerGroup `pulumi:"serverGroups"`
	// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
	Status *string       `pulumi:"status"`
	Tags   []ListenerTag `pulumi:"tags"`
	// 监听器最近一次的操作时间。
	UpdatedTime *string `pulumi:"updatedTime"`
}

type ListenerState struct {
	// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
	AccessLogRecordCustomizedHeadersEnabled pulumi.StringPtrInput
	// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
	AclIds pulumi.StringArrayInput
	// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
	AclStatus pulumi.StringPtrInput
	// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
	AclType pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
	CaCertificateId pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
	CaCertificateSource pulumi.StringPtrInput
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
	CertCenterCertificateId pulumi.StringPtrInput
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
	CertificateId pulumi.StringPtrInput
	// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
	CertificateSource pulumi.StringPtrInput
	// 监听器的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 个性化配置ID，未绑定时值为空字符串。
	CustomizedCfgId pulumi.StringPtrInput
	// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
	Description      pulumi.StringPtrInput
	DomainExtensions ListenerDomainExtensionArrayInput
	// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
	EnableHttp2 pulumi.StringPtrInput
	// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
	EnableQuic pulumi.StringPtrInput
	// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
	Enabled pulumi.StringPtrInput
	// 监听器 ID。
	ListenerId pulumi.StringPtrInput
	// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
	ListenerName pulumi.StringPtrInput
	// 监听器所属的负载均衡实例 ID。
	LoadBalancerId pulumi.StringPtrInput
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
	PcaRootCaCertificateId pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
	PcaSubCaCertificateId pulumi.StringPtrInput
	// 监听器的监听端口，取值：1 - 65535 。
	Port pulumi.IntPtrInput
	// 监听器所属项目名称。
	ProjectName pulumi.StringPtrInput
	// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
	Protocol pulumi.StringPtrInput
	// 监听器的默认服务器组。
	ServerGroupId pulumi.StringPtrInput
	ServerGroups  ListenerServerGroupArrayInput
	// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
	Status pulumi.StringPtrInput
	Tags   ListenerTagArrayInput
	// 监听器最近一次的操作时间。
	UpdatedTime pulumi.StringPtrInput
}

func (ListenerState) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerState)(nil)).Elem()
}

type listenerArgs struct {
	// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
	AccessLogRecordCustomizedHeadersEnabled *string `pulumi:"accessLogRecordCustomizedHeadersEnabled"`
	// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
	AclIds []string `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
	AclStatus *string `pulumi:"aclStatus"`
	// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
	AclType *string `pulumi:"aclType"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
	CaCertificateId *string `pulumi:"caCertificateId"`
	// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
	CaCertificateSource *string `pulumi:"caCertificateSource"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
	CertCenterCertificateId *string `pulumi:"certCenterCertificateId"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
	CertificateId *string `pulumi:"certificateId"`
	// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
	CertificateSource *string `pulumi:"certificateSource"`
	// 个性化配置ID，未绑定时值为空字符串。
	CustomizedCfgId *string `pulumi:"customizedCfgId"`
	// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
	Description      *string                   `pulumi:"description"`
	DomainExtensions []ListenerDomainExtension `pulumi:"domainExtensions"`
	// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
	EnableHttp2 *string `pulumi:"enableHttp2"`
	// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
	EnableQuic *string `pulumi:"enableQuic"`
	// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
	Enabled *string `pulumi:"enabled"`
	// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
	ListenerName *string `pulumi:"listenerName"`
	// 监听器所属的负载均衡实例 ID。
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId *string `pulumi:"pcaLeafCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
	PcaRootCaCertificateId *string `pulumi:"pcaRootCaCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
	PcaSubCaCertificateId *string `pulumi:"pcaSubCaCertificateId"`
	// 监听器的监听端口，取值：1 - 65535 。
	Port int `pulumi:"port"`
	// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
	Protocol string `pulumi:"protocol"`
	// 监听器的默认服务器组。
	ServerGroupId string                `pulumi:"serverGroupId"`
	ServerGroups  []ListenerServerGroup `pulumi:"serverGroups"`
	Tags          []ListenerTag         `pulumi:"tags"`
}

// The set of arguments for constructing a Listener resource.
type ListenerArgs struct {
	// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
	AccessLogRecordCustomizedHeadersEnabled pulumi.StringPtrInput
	// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
	AclIds pulumi.StringArrayInput
	// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
	AclStatus pulumi.StringPtrInput
	// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
	AclType pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
	CaCertificateId pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
	CaCertificateSource pulumi.StringPtrInput
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
	CertCenterCertificateId pulumi.StringPtrInput
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
	CertificateId pulumi.StringPtrInput
	// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
	CertificateSource pulumi.StringPtrInput
	// 个性化配置ID，未绑定时值为空字符串。
	CustomizedCfgId pulumi.StringPtrInput
	// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
	Description      pulumi.StringPtrInput
	DomainExtensions ListenerDomainExtensionArrayInput
	// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
	EnableHttp2 pulumi.StringPtrInput
	// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
	EnableQuic pulumi.StringPtrInput
	// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
	Enabled pulumi.StringPtrInput
	// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
	ListenerName pulumi.StringPtrInput
	// 监听器所属的负载均衡实例 ID。
	LoadBalancerId pulumi.StringInput
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
	PcaRootCaCertificateId pulumi.StringPtrInput
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
	PcaSubCaCertificateId pulumi.StringPtrInput
	// 监听器的监听端口，取值：1 - 65535 。
	Port pulumi.IntInput
	// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
	Protocol pulumi.StringInput
	// 监听器的默认服务器组。
	ServerGroupId pulumi.StringInput
	ServerGroups  ListenerServerGroupArrayInput
	Tags          ListenerTagArrayInput
}

func (ListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*listenerArgs)(nil)).Elem()
}

type ListenerInput interface {
	pulumi.Input

	ToListenerOutput() ListenerOutput
	ToListenerOutputWithContext(ctx context.Context) ListenerOutput
}

func (*Listener) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (i *Listener) ToListenerOutput() ListenerOutput {
	return i.ToListenerOutputWithContext(context.Background())
}

func (i *Listener) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerOutput)
}

// ListenerArrayInput is an input type that accepts ListenerArray and ListenerArrayOutput values.
// You can construct a concrete instance of `ListenerArrayInput` via:
//
//	ListenerArray{ ListenerArgs{...} }
type ListenerArrayInput interface {
	pulumi.Input

	ToListenerArrayOutput() ListenerArrayOutput
	ToListenerArrayOutputWithContext(context.Context) ListenerArrayOutput
}

type ListenerArray []ListenerInput

func (ListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (i ListenerArray) ToListenerArrayOutput() ListenerArrayOutput {
	return i.ToListenerArrayOutputWithContext(context.Background())
}

func (i ListenerArray) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerArrayOutput)
}

// ListenerMapInput is an input type that accepts ListenerMap and ListenerMapOutput values.
// You can construct a concrete instance of `ListenerMapInput` via:
//
//	ListenerMap{ "key": ListenerArgs{...} }
type ListenerMapInput interface {
	pulumi.Input

	ToListenerMapOutput() ListenerMapOutput
	ToListenerMapOutputWithContext(context.Context) ListenerMapOutput
}

type ListenerMap map[string]ListenerInput

func (ListenerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (i ListenerMap) ToListenerMapOutput() ListenerMapOutput {
	return i.ToListenerMapOutputWithContext(context.Background())
}

func (i ListenerMap) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerMapOutput)
}

type ListenerOutput struct{ *pulumi.OutputState }

func (ListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Listener)(nil)).Elem()
}

func (o ListenerOutput) ToListenerOutput() ListenerOutput {
	return o
}

func (o ListenerOutput) ToListenerOutputWithContext(ctx context.Context) ListenerOutput {
	return o
}

// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
func (o ListenerOutput) AccessLogRecordCustomizedHeadersEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.AccessLogRecordCustomizedHeadersEnabled }).(pulumi.StringOutput)
}

// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
func (o ListenerOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringArrayOutput { return v.AclIds }).(pulumi.StringArrayOutput)
}

// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
func (o ListenerOutput) AclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.AclStatus }).(pulumi.StringOutput)
}

// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
func (o ListenerOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.AclType }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
func (o ListenerOutput) CaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CaCertificateId }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
func (o ListenerOutput) CaCertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CaCertificateSource }).(pulumi.StringOutput)
}

// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
func (o ListenerOutput) CertCenterCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CertCenterCertificateId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
func (o ListenerOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CertificateId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
func (o ListenerOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CertificateSource }).(pulumi.StringOutput)
}

// 监听器的创建时间。
func (o ListenerOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 个性化配置ID，未绑定时值为空字符串。
func (o ListenerOutput) CustomizedCfgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.CustomizedCfgId }).(pulumi.StringOutput)
}

// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
func (o ListenerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o ListenerOutput) DomainExtensions() ListenerDomainExtensionArrayOutput {
	return o.ApplyT(func(v *Listener) ListenerDomainExtensionArrayOutput { return v.DomainExtensions }).(ListenerDomainExtensionArrayOutput)
}

// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
func (o ListenerOutput) EnableHttp2() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.EnableHttp2 }).(pulumi.StringOutput)
}

// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
func (o ListenerOutput) EnableQuic() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.EnableQuic }).(pulumi.StringOutput)
}

// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
func (o ListenerOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Enabled }).(pulumi.StringOutput)
}

// 监听器 ID。
func (o ListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
func (o ListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ListenerName }).(pulumi.StringOutput)
}

// 监听器所属的负载均衡实例 ID。
func (o ListenerOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
func (o ListenerOutput) PcaLeafCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.PcaLeafCertificateId }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
func (o ListenerOutput) PcaRootCaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.PcaRootCaCertificateId }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
func (o ListenerOutput) PcaSubCaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.PcaSubCaCertificateId }).(pulumi.StringOutput)
}

// 监听器的监听端口，取值：1 - 65535 。
func (o ListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Listener) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// 监听器所属项目名称。
func (o ListenerOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
func (o ListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// 监听器的默认服务器组。
func (o ListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.ServerGroupId }).(pulumi.StringOutput)
}

func (o ListenerOutput) ServerGroups() ListenerServerGroupArrayOutput {
	return o.ApplyT(func(v *Listener) ListenerServerGroupArrayOutput { return v.ServerGroups }).(ListenerServerGroupArrayOutput)
}

// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
func (o ListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o ListenerOutput) Tags() ListenerTagArrayOutput {
	return o.ApplyT(func(v *Listener) ListenerTagArrayOutput { return v.Tags }).(ListenerTagArrayOutput)
}

// 监听器最近一次的操作时间。
func (o ListenerOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Listener) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

type ListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Listener)(nil)).Elem()
}

func (o ListenerArrayOutput) ToListenerArrayOutput() ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) ToListenerArrayOutputWithContext(ctx context.Context) ListenerArrayOutput {
	return o
}

func (o ListenerArrayOutput) Index(i pulumi.IntInput) ListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].([]*Listener)[vs[1].(int)]
	}).(ListenerOutput)
}

type ListenerMapOutput struct{ *pulumi.OutputState }

func (ListenerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Listener)(nil)).Elem()
}

func (o ListenerMapOutput) ToListenerMapOutput() ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) ToListenerMapOutputWithContext(ctx context.Context) ListenerMapOutput {
	return o
}

func (o ListenerMapOutput) MapIndex(k pulumi.StringInput) ListenerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Listener {
		return vs[0].(map[string]*Listener)[vs[1].(string)]
	}).(ListenerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerInput)(nil)).Elem(), &Listener{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerArrayInput)(nil)).Elem(), ListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerMapInput)(nil)).Elem(), ListenerMap{})
	pulumi.RegisterOutputType(ListenerOutput{})
	pulumi.RegisterOutputType(ListenerArrayOutput{})
	pulumi.RegisterOutputType(ListenerMapOutput{})
}
