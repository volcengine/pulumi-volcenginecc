// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::ALB::Listener
func LookupListener(ctx *pulumi.Context, args *LookupListenerArgs, opts ...pulumi.InvokeOption) (*LookupListenerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupListenerResult
	err := ctx.Invoke("volcenginecc:alb/getListener:getListener", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getListener.
type LookupListenerArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getListener.
type LookupListenerResult struct {
	// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
	AccessLogRecordCustomizedHeadersEnabled string `pulumi:"accessLogRecordCustomizedHeadersEnabled"`
	// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
	AclIds []string `pulumi:"aclIds"`
	// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
	AclStatus string `pulumi:"aclStatus"`
	// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
	AclType string `pulumi:"aclType"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
	CaCertificateId string `pulumi:"caCertificateId"`
	// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
	CaCertificateSource string `pulumi:"caCertificateSource"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
	CertCenterCertificateId string `pulumi:"certCenterCertificateId"`
	// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
	CertificateId string `pulumi:"certificateId"`
	// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
	CertificateSource string `pulumi:"certificateSource"`
	// 监听器的创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 个性化配置ID，未绑定时值为空字符串。
	CustomizedCfgId string `pulumi:"customizedCfgId"`
	// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
	Description string `pulumi:"description"`
	// HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。
	DomainExtensions []GetListenerDomainExtension `pulumi:"domainExtensions"`
	// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
	EnableHttp2 string `pulumi:"enableHttp2"`
	// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
	EnableQuic string `pulumi:"enableQuic"`
	// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
	Enabled string `pulumi:"enabled"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 监听器 ID。
	ListenerId string `pulumi:"listenerId"`
	// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
	ListenerName string `pulumi:"listenerName"`
	// 监听器所属的负载均衡实例 ID。
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
	PcaLeafCertificateId string `pulumi:"pcaLeafCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
	PcaRootCaCertificateId string `pulumi:"pcaRootCaCertificateId"`
	// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
	PcaSubCaCertificateId string `pulumi:"pcaSubCaCertificateId"`
	// 监听器的监听端口，取值：1 - 65535 。
	Port int `pulumi:"port"`
	// 监听器所属项目名称。
	ProjectName string `pulumi:"projectName"`
	// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
	Protocol string `pulumi:"protocol"`
	// 监听器的默认服务器组。
	ServerGroupId string `pulumi:"serverGroupId"`
	// 关联监听器的所有服务器组。
	ServerGroups []GetListenerServerGroup `pulumi:"serverGroups"`
	// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
	Status string `pulumi:"status"`
	// 监听器所属标签。
	Tags []GetListenerTag `pulumi:"tags"`
	// 监听器最近一次的操作时间。
	UpdatedTime string `pulumi:"updatedTime"`
}

func LookupListenerOutput(ctx *pulumi.Context, args LookupListenerOutputArgs, opts ...pulumi.InvokeOption) LookupListenerResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupListenerResultOutput, error) {
			args := v.(LookupListenerArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:alb/getListener:getListener", args, LookupListenerResultOutput{}, options).(LookupListenerResultOutput), nil
		}).(LookupListenerResultOutput)
}

// A collection of arguments for invoking getListener.
type LookupListenerOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupListenerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerArgs)(nil)).Elem()
}

// A collection of values returned by getListener.
type LookupListenerResultOutput struct{ *pulumi.OutputState }

func (LookupListenerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupListenerResult)(nil)).Elem()
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutput() LookupListenerResultOutput {
	return o
}

func (o LookupListenerResultOutput) ToLookupListenerResultOutputWithContext(ctx context.Context) LookupListenerResultOutput {
	return o
}

// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
func (o LookupListenerResultOutput) AccessLogRecordCustomizedHeadersEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.AccessLogRecordCustomizedHeadersEnabled }).(pulumi.StringOutput)
}

// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
func (o LookupListenerResultOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []string { return v.AclIds }).(pulumi.StringArrayOutput)
}

// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
func (o LookupListenerResultOutput) AclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.AclStatus }).(pulumi.StringOutput)
}

// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
func (o LookupListenerResultOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.AclType }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
func (o LookupListenerResultOutput) CaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CaCertificateId }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
func (o LookupListenerResultOutput) CaCertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CaCertificateSource }).(pulumi.StringOutput)
}

// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
func (o LookupListenerResultOutput) CertCenterCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CertCenterCertificateId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
func (o LookupListenerResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
func (o LookupListenerResultOutput) CertificateSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CertificateSource }).(pulumi.StringOutput)
}

// 监听器的创建时间。
func (o LookupListenerResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 个性化配置ID，未绑定时值为空字符串。
func (o LookupListenerResultOutput) CustomizedCfgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.CustomizedCfgId }).(pulumi.StringOutput)
}

// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
func (o LookupListenerResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Description }).(pulumi.StringOutput)
}

// HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。
func (o LookupListenerResultOutput) DomainExtensions() GetListenerDomainExtensionArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []GetListenerDomainExtension { return v.DomainExtensions }).(GetListenerDomainExtensionArrayOutput)
}

// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
func (o LookupListenerResultOutput) EnableHttp2() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.EnableHttp2 }).(pulumi.StringOutput)
}

// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
func (o LookupListenerResultOutput) EnableQuic() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.EnableQuic }).(pulumi.StringOutput)
}

// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
func (o LookupListenerResultOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Enabled }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupListenerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Id }).(pulumi.StringOutput)
}

// 监听器 ID。
func (o LookupListenerResultOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ListenerId }).(pulumi.StringOutput)
}

// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
func (o LookupListenerResultOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ListenerName }).(pulumi.StringOutput)
}

// 监听器所属的负载均衡实例 ID。
func (o LookupListenerResultOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
func (o LookupListenerResultOutput) PcaLeafCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.PcaLeafCertificateId }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
func (o LookupListenerResultOutput) PcaRootCaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.PcaRootCaCertificateId }).(pulumi.StringOutput)
}

// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
func (o LookupListenerResultOutput) PcaSubCaCertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.PcaSubCaCertificateId }).(pulumi.StringOutput)
}

// 监听器的监听端口，取值：1 - 65535 。
func (o LookupListenerResultOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v LookupListenerResult) int { return v.Port }).(pulumi.IntOutput)
}

// 监听器所属项目名称。
func (o LookupListenerResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
func (o LookupListenerResultOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Protocol }).(pulumi.StringOutput)
}

// 监听器的默认服务器组。
func (o LookupListenerResultOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// 关联监听器的所有服务器组。
func (o LookupListenerResultOutput) ServerGroups() GetListenerServerGroupArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []GetListenerServerGroup { return v.ServerGroups }).(GetListenerServerGroupArrayOutput)
}

// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
func (o LookupListenerResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.Status }).(pulumi.StringOutput)
}

// 监听器所属标签。
func (o LookupListenerResultOutput) Tags() GetListenerTagArrayOutput {
	return o.ApplyT(func(v LookupListenerResult) []GetListenerTag { return v.Tags }).(GetListenerTagArrayOutput)
}

// 监听器最近一次的操作时间。
func (o LookupListenerResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupListenerResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupListenerResultOutput{})
}
