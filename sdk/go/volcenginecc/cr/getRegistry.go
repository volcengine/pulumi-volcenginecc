// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::CR::Registry
func LookupRegistry(ctx *pulumi.Context, args *LookupRegistryArgs, opts ...pulumi.InvokeOption) (*LookupRegistryResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRegistryResult
	err := ctx.Invoke("volcenginecc:cr/getRegistry:getRegistry", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getRegistry.
type LookupRegistryResult struct {
	// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
	ChargeType string `pulumi:"chargeType"`
	// 创建镜像仓库实例的时间。
	CreatedTime string `pulumi:"createdTime"`
	// 仅计费类型为HybridCharge有值，实例到期时间
	ExpireTime string `pulumi:"expireTime"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
	Name string `pulumi:"name"`
	// 填写实例需要关联的项目。一个实例仅支持关联一个项目
	Project string `pulumi:"project"`
	// ProxyCache配置，设置为ProxyCache时必填
	ProxyCache GetRegistryProxyCache `pulumi:"proxyCache"`
	// 是否设置为ProxyCache实例
	ProxyCacheEnabled bool `pulumi:"proxyCacheEnabled"`
	// 仅计费类型为HybridCharge有值，实例自动续费类型
	RenewType string `pulumi:"renewType"`
	// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
	Status GetRegistryStatus `pulumi:"status"`
	// 实例的标签
	Tags []GetRegistryTag `pulumi:"tags"`
	// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
	Type string `pulumi:"type"`
}

func LookupRegistryOutput(ctx *pulumi.Context, args LookupRegistryOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegistryResultOutput, error) {
			args := v.(LookupRegistryArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:cr/getRegistry:getRegistry", args, LookupRegistryResultOutput{}, options).(LookupRegistryResultOutput), nil
		}).(LookupRegistryResultOutput)
}

// A collection of arguments for invoking getRegistry.
type LookupRegistryOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupRegistryOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryArgs)(nil)).Elem()
}

// A collection of values returned by getRegistry.
type LookupRegistryResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryResult)(nil)).Elem()
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutput() LookupRegistryResultOutput {
	return o
}

func (o LookupRegistryResultOutput) ToLookupRegistryResultOutputWithContext(ctx context.Context) LookupRegistryResultOutput {
	return o
}

// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
func (o LookupRegistryResultOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.ChargeType }).(pulumi.StringOutput)
}

// 创建镜像仓库实例的时间。
func (o LookupRegistryResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 仅计费类型为HybridCharge有值，实例到期时间
func (o LookupRegistryResultOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupRegistryResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Id }).(pulumi.StringOutput)
}

// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
func (o LookupRegistryResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Name }).(pulumi.StringOutput)
}

// 填写实例需要关联的项目。一个实例仅支持关联一个项目
func (o LookupRegistryResultOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Project }).(pulumi.StringOutput)
}

// ProxyCache配置，设置为ProxyCache时必填
func (o LookupRegistryResultOutput) ProxyCache() GetRegistryProxyCacheOutput {
	return o.ApplyT(func(v LookupRegistryResult) GetRegistryProxyCache { return v.ProxyCache }).(GetRegistryProxyCacheOutput)
}

// 是否设置为ProxyCache实例
func (o LookupRegistryResultOutput) ProxyCacheEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRegistryResult) bool { return v.ProxyCacheEnabled }).(pulumi.BoolOutput)
}

// 仅计费类型为HybridCharge有值，实例自动续费类型
func (o LookupRegistryResultOutput) RenewType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.RenewType }).(pulumi.StringOutput)
}

// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
func (o LookupRegistryResultOutput) Status() GetRegistryStatusOutput {
	return o.ApplyT(func(v LookupRegistryResult) GetRegistryStatus { return v.Status }).(GetRegistryStatusOutput)
}

// 实例的标签
func (o LookupRegistryResultOutput) Tags() GetRegistryTagArrayOutput {
	return o.ApplyT(func(v LookupRegistryResult) []GetRegistryTag { return v.Tags }).(GetRegistryTagArrayOutput)
}

// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
func (o LookupRegistryResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryResultOutput{})
}
