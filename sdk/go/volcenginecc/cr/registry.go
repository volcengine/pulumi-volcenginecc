// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 镜像仓库（Container Registry，CR）提供安全高可用的容器镜像、Helm Chart 等符合 OCI 标准的云原生制品托管服务，方便企业用户管理容器镜像和 Helm Chart 的全生命周期。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:cr/registry:Registry example "name"
// ```
type Registry struct {
	pulumi.CustomResourceState

	// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// 创建镜像仓库实例的时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 仅计费类型为HybridCharge有值，实例到期时间
	ExpireTime pulumi.StringOutput `pulumi:"expireTime"`
	// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
	Name pulumi.StringOutput `pulumi:"name"`
	// 填写实例需要关联的项目。一个实例仅支持关联一个项目
	Project pulumi.StringOutput `pulumi:"project"`
	// ProxyCache配置，设置为ProxyCache时必填
	ProxyCache RegistryProxyCacheOutput `pulumi:"proxyCache"`
	// 是否设置为ProxyCache实例
	ProxyCacheEnabled pulumi.BoolOutput `pulumi:"proxyCacheEnabled"`
	// 仅计费类型为HybridCharge有值，实例自动续费类型
	RenewType pulumi.StringOutput `pulumi:"renewType"`
	// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
	Status RegistryStatusOutput   `pulumi:"status"`
	Tags   RegistryTagArrayOutput `pulumi:"tags"`
	// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOption) (*Registry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Registry
	err := ctx.RegisterResource("volcenginecc:cr/registry:Registry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryState, opts ...pulumi.ResourceOption) (*Registry, error) {
	var resource Registry
	err := ctx.ReadResource("volcenginecc:cr/registry:Registry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Registry resources.
type registryState struct {
	// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
	ChargeType *string `pulumi:"chargeType"`
	// 创建镜像仓库实例的时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 仅计费类型为HybridCharge有值，实例到期时间
	ExpireTime *string `pulumi:"expireTime"`
	// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
	Name *string `pulumi:"name"`
	// 填写实例需要关联的项目。一个实例仅支持关联一个项目
	Project *string `pulumi:"project"`
	// ProxyCache配置，设置为ProxyCache时必填
	ProxyCache *RegistryProxyCache `pulumi:"proxyCache"`
	// 是否设置为ProxyCache实例
	ProxyCacheEnabled *bool `pulumi:"proxyCacheEnabled"`
	// 仅计费类型为HybridCharge有值，实例自动续费类型
	RenewType *string `pulumi:"renewType"`
	// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
	Status *RegistryStatus `pulumi:"status"`
	Tags   []RegistryTag   `pulumi:"tags"`
	// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
	Type *string `pulumi:"type"`
}

type RegistryState struct {
	// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
	ChargeType pulumi.StringPtrInput
	// 创建镜像仓库实例的时间。
	CreatedTime pulumi.StringPtrInput
	// 仅计费类型为HybridCharge有值，实例到期时间
	ExpireTime pulumi.StringPtrInput
	// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
	Name pulumi.StringPtrInput
	// 填写实例需要关联的项目。一个实例仅支持关联一个项目
	Project pulumi.StringPtrInput
	// ProxyCache配置，设置为ProxyCache时必填
	ProxyCache RegistryProxyCachePtrInput
	// 是否设置为ProxyCache实例
	ProxyCacheEnabled pulumi.BoolPtrInput
	// 仅计费类型为HybridCharge有值，实例自动续费类型
	RenewType pulumi.StringPtrInput
	// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
	Status RegistryStatusPtrInput
	Tags   RegistryTagArrayInput
	// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
	Type pulumi.StringPtrInput
}

func (RegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryState)(nil)).Elem()
}

type registryArgs struct {
	// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
	Name string `pulumi:"name"`
	// 填写实例需要关联的项目。一个实例仅支持关联一个项目
	Project *string       `pulumi:"project"`
	Tags    []RegistryTag `pulumi:"tags"`
	// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
	Name pulumi.StringInput
	// 填写实例需要关联的项目。一个实例仅支持关联一个项目
	Project pulumi.StringPtrInput
	Tags    RegistryTagArrayInput
	// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
	Type pulumi.StringPtrInput
}

func (RegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryArgs)(nil)).Elem()
}

type RegistryInput interface {
	pulumi.Input

	ToRegistryOutput() RegistryOutput
	ToRegistryOutputWithContext(ctx context.Context) RegistryOutput
}

func (*Registry) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (i *Registry) ToRegistryOutput() RegistryOutput {
	return i.ToRegistryOutputWithContext(context.Background())
}

func (i *Registry) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryOutput)
}

// RegistryArrayInput is an input type that accepts RegistryArray and RegistryArrayOutput values.
// You can construct a concrete instance of `RegistryArrayInput` via:
//
//	RegistryArray{ RegistryArgs{...} }
type RegistryArrayInput interface {
	pulumi.Input

	ToRegistryArrayOutput() RegistryArrayOutput
	ToRegistryArrayOutputWithContext(context.Context) RegistryArrayOutput
}

type RegistryArray []RegistryInput

func (RegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Registry)(nil)).Elem()
}

func (i RegistryArray) ToRegistryArrayOutput() RegistryArrayOutput {
	return i.ToRegistryArrayOutputWithContext(context.Background())
}

func (i RegistryArray) ToRegistryArrayOutputWithContext(ctx context.Context) RegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryArrayOutput)
}

// RegistryMapInput is an input type that accepts RegistryMap and RegistryMapOutput values.
// You can construct a concrete instance of `RegistryMapInput` via:
//
//	RegistryMap{ "key": RegistryArgs{...} }
type RegistryMapInput interface {
	pulumi.Input

	ToRegistryMapOutput() RegistryMapOutput
	ToRegistryMapOutputWithContext(context.Context) RegistryMapOutput
}

type RegistryMap map[string]RegistryInput

func (RegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Registry)(nil)).Elem()
}

func (i RegistryMap) ToRegistryMapOutput() RegistryMapOutput {
	return i.ToRegistryMapOutputWithContext(context.Background())
}

func (i RegistryMap) ToRegistryMapOutputWithContext(ctx context.Context) RegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryMapOutput)
}

type RegistryOutput struct{ *pulumi.OutputState }

func (RegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Registry)(nil)).Elem()
}

func (o RegistryOutput) ToRegistryOutput() RegistryOutput {
	return o
}

func (o RegistryOutput) ToRegistryOutputWithContext(ctx context.Context) RegistryOutput {
	return o
}

// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
func (o RegistryOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.ChargeType }).(pulumi.StringOutput)
}

// 创建镜像仓库实例的时间。
func (o RegistryOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 仅计费类型为HybridCharge有值，实例到期时间
func (o RegistryOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.ExpireTime }).(pulumi.StringOutput)
}

// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
func (o RegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 填写实例需要关联的项目。一个实例仅支持关联一个项目
func (o RegistryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// ProxyCache配置，设置为ProxyCache时必填
func (o RegistryOutput) ProxyCache() RegistryProxyCacheOutput {
	return o.ApplyT(func(v *Registry) RegistryProxyCacheOutput { return v.ProxyCache }).(RegistryProxyCacheOutput)
}

// 是否设置为ProxyCache实例
func (o RegistryOutput) ProxyCacheEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Registry) pulumi.BoolOutput { return v.ProxyCacheEnabled }).(pulumi.BoolOutput)
}

// 仅计费类型为HybridCharge有值，实例自动续费类型
func (o RegistryOutput) RenewType() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.RenewType }).(pulumi.StringOutput)
}

// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
func (o RegistryOutput) Status() RegistryStatusOutput {
	return o.ApplyT(func(v *Registry) RegistryStatusOutput { return v.Status }).(RegistryStatusOutput)
}

func (o RegistryOutput) Tags() RegistryTagArrayOutput {
	return o.ApplyT(func(v *Registry) RegistryTagArrayOutput { return v.Tags }).(RegistryTagArrayOutput)
}

// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
func (o RegistryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Registry) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type RegistryArrayOutput struct{ *pulumi.OutputState }

func (RegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Registry)(nil)).Elem()
}

func (o RegistryArrayOutput) ToRegistryArrayOutput() RegistryArrayOutput {
	return o
}

func (o RegistryArrayOutput) ToRegistryArrayOutputWithContext(ctx context.Context) RegistryArrayOutput {
	return o
}

func (o RegistryArrayOutput) Index(i pulumi.IntInput) RegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Registry {
		return vs[0].([]*Registry)[vs[1].(int)]
	}).(RegistryOutput)
}

type RegistryMapOutput struct{ *pulumi.OutputState }

func (RegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Registry)(nil)).Elem()
}

func (o RegistryMapOutput) ToRegistryMapOutput() RegistryMapOutput {
	return o
}

func (o RegistryMapOutput) ToRegistryMapOutputWithContext(ctx context.Context) RegistryMapOutput {
	return o
}

func (o RegistryMapOutput) MapIndex(k pulumi.StringInput) RegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Registry {
		return vs[0].(map[string]*Registry)[vs[1].(string)]
	}).(RegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryInput)(nil)).Elem(), &Registry{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryArrayInput)(nil)).Elem(), RegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryMapInput)(nil)).Elem(), RegistryMap{})
	pulumi.RegisterOutputType(RegistryOutput{})
	pulumi.RegisterOutputType(RegistryArrayOutput{})
	pulumi.RegisterOutputType(RegistryMapOutput{})
}
