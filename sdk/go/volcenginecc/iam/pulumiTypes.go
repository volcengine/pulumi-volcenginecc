// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type RolePolicy struct {
	// 策略名。
	PolicyName *string `pulumi:"policyName"`
	// 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType *string `pulumi:"policyType"`
}

// RolePolicyInput is an input type that accepts RolePolicyArgs and RolePolicyOutput values.
// You can construct a concrete instance of `RolePolicyInput` via:
//
//	RolePolicyArgs{...}
type RolePolicyInput interface {
	pulumi.Input

	ToRolePolicyOutput() RolePolicyOutput
	ToRolePolicyOutputWithContext(context.Context) RolePolicyOutput
}

type RolePolicyArgs struct {
	// 策略名。
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (RolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicy)(nil)).Elem()
}

func (i RolePolicyArgs) ToRolePolicyOutput() RolePolicyOutput {
	return i.ToRolePolicyOutputWithContext(context.Background())
}

func (i RolePolicyArgs) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyOutput)
}

// RolePolicyArrayInput is an input type that accepts RolePolicyArray and RolePolicyArrayOutput values.
// You can construct a concrete instance of `RolePolicyArrayInput` via:
//
//	RolePolicyArray{ RolePolicyArgs{...} }
type RolePolicyArrayInput interface {
	pulumi.Input

	ToRolePolicyArrayOutput() RolePolicyArrayOutput
	ToRolePolicyArrayOutputWithContext(context.Context) RolePolicyArrayOutput
}

type RolePolicyArray []RolePolicyInput

func (RolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePolicy)(nil)).Elem()
}

func (i RolePolicyArray) ToRolePolicyArrayOutput() RolePolicyArrayOutput {
	return i.ToRolePolicyArrayOutputWithContext(context.Background())
}

func (i RolePolicyArray) ToRolePolicyArrayOutputWithContext(ctx context.Context) RolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePolicyArrayOutput)
}

type RolePolicyOutput struct{ *pulumi.OutputState }

func (RolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePolicy)(nil)).Elem()
}

func (o RolePolicyOutput) ToRolePolicyOutput() RolePolicyOutput {
	return o
}

func (o RolePolicyOutput) ToRolePolicyOutputWithContext(ctx context.Context) RolePolicyOutput {
	return o
}

// 策略名。
func (o RolePolicyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePolicy) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
func (o RolePolicyOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePolicy) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type RolePolicyArrayOutput struct{ *pulumi.OutputState }

func (RolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePolicy)(nil)).Elem()
}

func (o RolePolicyArrayOutput) ToRolePolicyArrayOutput() RolePolicyArrayOutput {
	return o
}

func (o RolePolicyArrayOutput) ToRolePolicyArrayOutputWithContext(ctx context.Context) RolePolicyArrayOutput {
	return o
}

func (o RolePolicyArrayOutput) Index(i pulumi.IntInput) RolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePolicy {
		return vs[0].([]RolePolicy)[vs[1].(int)]
	}).(RolePolicyOutput)
}

type RoleTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// RoleTagInput is an input type that accepts RoleTagArgs and RoleTagOutput values.
// You can construct a concrete instance of `RoleTagInput` via:
//
//	RoleTagArgs{...}
type RoleTagInput interface {
	pulumi.Input

	ToRoleTagOutput() RoleTagOutput
	ToRoleTagOutputWithContext(context.Context) RoleTagOutput
}

type RoleTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RoleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (i RoleTagArgs) ToRoleTagOutput() RoleTagOutput {
	return i.ToRoleTagOutputWithContext(context.Background())
}

func (i RoleTagArgs) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagOutput)
}

// RoleTagArrayInput is an input type that accepts RoleTagArray and RoleTagArrayOutput values.
// You can construct a concrete instance of `RoleTagArrayInput` via:
//
//	RoleTagArray{ RoleTagArgs{...} }
type RoleTagArrayInput interface {
	pulumi.Input

	ToRoleTagArrayOutput() RoleTagArrayOutput
	ToRoleTagArrayOutputWithContext(context.Context) RoleTagArrayOutput
}

type RoleTagArray []RoleTagInput

func (RoleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (i RoleTagArray) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return i.ToRoleTagArrayOutputWithContext(context.Background())
}

func (i RoleTagArray) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleTagArrayOutput)
}

type RoleTagOutput struct{ *pulumi.OutputState }

func (RoleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RoleTag)(nil)).Elem()
}

func (o RoleTagOutput) ToRoleTagOutput() RoleTagOutput {
	return o
}

func (o RoleTagOutput) ToRoleTagOutputWithContext(ctx context.Context) RoleTagOutput {
	return o
}

// 标签键。
func (o RoleTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o RoleTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RoleTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RoleTagArrayOutput struct{ *pulumi.OutputState }

func (RoleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RoleTag)(nil)).Elem()
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutput() RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) ToRoleTagArrayOutputWithContext(ctx context.Context) RoleTagArrayOutput {
	return o
}

func (o RoleTagArrayOutput) Index(i pulumi.IntInput) RoleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RoleTag {
		return vs[0].([]RoleTag)[vs[1].(int)]
	}).(RoleTagOutput)
}

type UserLoginProfile struct {
	// 登录配置创建时间。
	CreateDate *string `pulumi:"createDate"`
	// 上次登录时间。
	LastLoginDate *string `pulumi:"lastLoginDate"`
	// 上次登录IP。
	LastLoginIp *string `pulumi:"lastLoginIp"`
	// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
	LastResetPasswordTime *float64 `pulumi:"lastResetPasswordTime"`
	// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
	LoginAllowed *bool `pulumi:"loginAllowed"`
	// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
	LoginLocked *bool `pulumi:"loginLocked"`
	// 登录密码。
	Password *string `pulumi:"password"`
	// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
	PasswordExpireAt *float64 `pulumi:"passwordExpireAt"`
	// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
	PasswordResetRequired *bool `pulumi:"passwordResetRequired"`
	// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
	SafeAuthExemptDuration *float64 `pulumi:"safeAuthExemptDuration"`
	// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
	SafeAuthExemptRequired *float64 `pulumi:"safeAuthExemptRequired"`
	// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
	SafeAuthExemptUnit *float64 `pulumi:"safeAuthExemptUnit"`
	// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
	SafeAuthFlag *bool `pulumi:"safeAuthFlag"`
	// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
	SafeAuthType *string `pulumi:"safeAuthType"`
	// 登录配置更新时间。
	UpdateDate *string `pulumi:"updateDate"`
}

// UserLoginProfileInput is an input type that accepts UserLoginProfileArgs and UserLoginProfileOutput values.
// You can construct a concrete instance of `UserLoginProfileInput` via:
//
//	UserLoginProfileArgs{...}
type UserLoginProfileInput interface {
	pulumi.Input

	ToUserLoginProfileOutput() UserLoginProfileOutput
	ToUserLoginProfileOutputWithContext(context.Context) UserLoginProfileOutput
}

type UserLoginProfileArgs struct {
	// 登录配置创建时间。
	CreateDate pulumi.StringPtrInput `pulumi:"createDate"`
	// 上次登录时间。
	LastLoginDate pulumi.StringPtrInput `pulumi:"lastLoginDate"`
	// 上次登录IP。
	LastLoginIp pulumi.StringPtrInput `pulumi:"lastLoginIp"`
	// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
	LastResetPasswordTime pulumi.Float64PtrInput `pulumi:"lastResetPasswordTime"`
	// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
	LoginAllowed pulumi.BoolPtrInput `pulumi:"loginAllowed"`
	// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
	LoginLocked pulumi.BoolPtrInput `pulumi:"loginLocked"`
	// 登录密码。
	Password pulumi.StringPtrInput `pulumi:"password"`
	// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
	PasswordExpireAt pulumi.Float64PtrInput `pulumi:"passwordExpireAt"`
	// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
	PasswordResetRequired pulumi.BoolPtrInput `pulumi:"passwordResetRequired"`
	// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
	SafeAuthExemptDuration pulumi.Float64PtrInput `pulumi:"safeAuthExemptDuration"`
	// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
	SafeAuthExemptRequired pulumi.Float64PtrInput `pulumi:"safeAuthExemptRequired"`
	// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
	SafeAuthExemptUnit pulumi.Float64PtrInput `pulumi:"safeAuthExemptUnit"`
	// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
	SafeAuthFlag pulumi.BoolPtrInput `pulumi:"safeAuthFlag"`
	// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
	SafeAuthType pulumi.StringPtrInput `pulumi:"safeAuthType"`
	// 登录配置更新时间。
	UpdateDate pulumi.StringPtrInput `pulumi:"updateDate"`
}

func (UserLoginProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLoginProfile)(nil)).Elem()
}

func (i UserLoginProfileArgs) ToUserLoginProfileOutput() UserLoginProfileOutput {
	return i.ToUserLoginProfileOutputWithContext(context.Background())
}

func (i UserLoginProfileArgs) ToUserLoginProfileOutputWithContext(ctx context.Context) UserLoginProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfileOutput)
}

func (i UserLoginProfileArgs) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return i.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (i UserLoginProfileArgs) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfileOutput).ToUserLoginProfilePtrOutputWithContext(ctx)
}

// UserLoginProfilePtrInput is an input type that accepts UserLoginProfileArgs, UserLoginProfilePtr and UserLoginProfilePtrOutput values.
// You can construct a concrete instance of `UserLoginProfilePtrInput` via:
//
//	        UserLoginProfileArgs{...}
//
//	or:
//
//	        nil
type UserLoginProfilePtrInput interface {
	pulumi.Input

	ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput
	ToUserLoginProfilePtrOutputWithContext(context.Context) UserLoginProfilePtrOutput
}

type userLoginProfilePtrType UserLoginProfileArgs

func UserLoginProfilePtr(v *UserLoginProfileArgs) UserLoginProfilePtrInput {
	return (*userLoginProfilePtrType)(v)
}

func (*userLoginProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserLoginProfile)(nil)).Elem()
}

func (i *userLoginProfilePtrType) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return i.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (i *userLoginProfilePtrType) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLoginProfilePtrOutput)
}

type UserLoginProfileOutput struct{ *pulumi.OutputState }

func (UserLoginProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLoginProfile)(nil)).Elem()
}

func (o UserLoginProfileOutput) ToUserLoginProfileOutput() UserLoginProfileOutput {
	return o
}

func (o UserLoginProfileOutput) ToUserLoginProfileOutputWithContext(ctx context.Context) UserLoginProfileOutput {
	return o
}

func (o UserLoginProfileOutput) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return o.ToUserLoginProfilePtrOutputWithContext(context.Background())
}

func (o UserLoginProfileOutput) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserLoginProfile) *UserLoginProfile {
		return &v
	}).(UserLoginProfilePtrOutput)
}

// 登录配置创建时间。
func (o UserLoginProfileOutput) CreateDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *string { return v.CreateDate }).(pulumi.StringPtrOutput)
}

// 上次登录时间。
func (o UserLoginProfileOutput) LastLoginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *string { return v.LastLoginDate }).(pulumi.StringPtrOutput)
}

// 上次登录IP。
func (o UserLoginProfileOutput) LastLoginIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *string { return v.LastLoginIp }).(pulumi.StringPtrOutput)
}

// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
func (o UserLoginProfileOutput) LastResetPasswordTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *float64 { return v.LastResetPasswordTime }).(pulumi.Float64PtrOutput)
}

// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
func (o UserLoginProfileOutput) LoginAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *bool { return v.LoginAllowed }).(pulumi.BoolPtrOutput)
}

// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
func (o UserLoginProfileOutput) LoginLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *bool { return v.LoginLocked }).(pulumi.BoolPtrOutput)
}

// 登录密码。
func (o UserLoginProfileOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
func (o UserLoginProfileOutput) PasswordExpireAt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *float64 { return v.PasswordExpireAt }).(pulumi.Float64PtrOutput)
}

// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
func (o UserLoginProfileOutput) PasswordResetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *bool { return v.PasswordResetRequired }).(pulumi.BoolPtrOutput)
}

// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
func (o UserLoginProfileOutput) SafeAuthExemptDuration() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *float64 { return v.SafeAuthExemptDuration }).(pulumi.Float64PtrOutput)
}

// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
func (o UserLoginProfileOutput) SafeAuthExemptRequired() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *float64 { return v.SafeAuthExemptRequired }).(pulumi.Float64PtrOutput)
}

// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
func (o UserLoginProfileOutput) SafeAuthExemptUnit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *float64 { return v.SafeAuthExemptUnit }).(pulumi.Float64PtrOutput)
}

// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
func (o UserLoginProfileOutput) SafeAuthFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *bool { return v.SafeAuthFlag }).(pulumi.BoolPtrOutput)
}

// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
func (o UserLoginProfileOutput) SafeAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *string { return v.SafeAuthType }).(pulumi.StringPtrOutput)
}

// 登录配置更新时间。
func (o UserLoginProfileOutput) UpdateDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLoginProfile) *string { return v.UpdateDate }).(pulumi.StringPtrOutput)
}

type UserLoginProfilePtrOutput struct{ *pulumi.OutputState }

func (UserLoginProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserLoginProfile)(nil)).Elem()
}

func (o UserLoginProfilePtrOutput) ToUserLoginProfilePtrOutput() UserLoginProfilePtrOutput {
	return o
}

func (o UserLoginProfilePtrOutput) ToUserLoginProfilePtrOutputWithContext(ctx context.Context) UserLoginProfilePtrOutput {
	return o
}

func (o UserLoginProfilePtrOutput) Elem() UserLoginProfileOutput {
	return o.ApplyT(func(v *UserLoginProfile) UserLoginProfile {
		if v != nil {
			return *v
		}
		var ret UserLoginProfile
		return ret
	}).(UserLoginProfileOutput)
}

// 登录配置创建时间。
func (o UserLoginProfilePtrOutput) CreateDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return v.CreateDate
	}).(pulumi.StringPtrOutput)
}

// 上次登录时间。
func (o UserLoginProfilePtrOutput) LastLoginDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return v.LastLoginDate
	}).(pulumi.StringPtrOutput)
}

// 上次登录IP。
func (o UserLoginProfilePtrOutput) LastLoginIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return v.LastLoginIp
	}).(pulumi.StringPtrOutput)
}

// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
func (o UserLoginProfilePtrOutput) LastResetPasswordTime() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.LastResetPasswordTime
	}).(pulumi.Float64PtrOutput)
}

// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
func (o UserLoginProfilePtrOutput) LoginAllowed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *bool {
		if v == nil {
			return nil
		}
		return v.LoginAllowed
	}).(pulumi.BoolPtrOutput)
}

// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
func (o UserLoginProfilePtrOutput) LoginLocked() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *bool {
		if v == nil {
			return nil
		}
		return v.LoginLocked
	}).(pulumi.BoolPtrOutput)
}

// 登录密码。
func (o UserLoginProfilePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
func (o UserLoginProfilePtrOutput) PasswordExpireAt() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.PasswordExpireAt
	}).(pulumi.Float64PtrOutput)
}

// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
func (o UserLoginProfilePtrOutput) PasswordResetRequired() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *bool {
		if v == nil {
			return nil
		}
		return v.PasswordResetRequired
	}).(pulumi.BoolPtrOutput)
}

// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
func (o UserLoginProfilePtrOutput) SafeAuthExemptDuration() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.SafeAuthExemptDuration
	}).(pulumi.Float64PtrOutput)
}

// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
func (o UserLoginProfilePtrOutput) SafeAuthExemptRequired() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.SafeAuthExemptRequired
	}).(pulumi.Float64PtrOutput)
}

// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
func (o UserLoginProfilePtrOutput) SafeAuthExemptUnit() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *float64 {
		if v == nil {
			return nil
		}
		return v.SafeAuthExemptUnit
	}).(pulumi.Float64PtrOutput)
}

// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
func (o UserLoginProfilePtrOutput) SafeAuthFlag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *bool {
		if v == nil {
			return nil
		}
		return v.SafeAuthFlag
	}).(pulumi.BoolPtrOutput)
}

// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
func (o UserLoginProfilePtrOutput) SafeAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return v.SafeAuthType
	}).(pulumi.StringPtrOutput)
}

// 登录配置更新时间。
func (o UserLoginProfilePtrOutput) UpdateDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserLoginProfile) *string {
		if v == nil {
			return nil
		}
		return v.UpdateDate
	}).(pulumi.StringPtrOutput)
}

type UserPolicy struct {
	// 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName *string `pulumi:"policyName"`
	// 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType *string `pulumi:"policyType"`
}

// UserPolicyInput is an input type that accepts UserPolicyArgs and UserPolicyOutput values.
// You can construct a concrete instance of `UserPolicyInput` via:
//
//	UserPolicyArgs{...}
type UserPolicyInput interface {
	pulumi.Input

	ToUserPolicyOutput() UserPolicyOutput
	ToUserPolicyOutputWithContext(context.Context) UserPolicyOutput
}

type UserPolicyArgs struct {
	// 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName pulumi.StringPtrInput `pulumi:"policyName"`
	// 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType pulumi.StringPtrInput `pulumi:"policyType"`
}

func (UserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (i UserPolicyArgs) ToUserPolicyOutput() UserPolicyOutput {
	return i.ToUserPolicyOutputWithContext(context.Background())
}

func (i UserPolicyArgs) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyOutput)
}

// UserPolicyArrayInput is an input type that accepts UserPolicyArray and UserPolicyArrayOutput values.
// You can construct a concrete instance of `UserPolicyArrayInput` via:
//
//	UserPolicyArray{ UserPolicyArgs{...} }
type UserPolicyArrayInput interface {
	pulumi.Input

	ToUserPolicyArrayOutput() UserPolicyArrayOutput
	ToUserPolicyArrayOutputWithContext(context.Context) UserPolicyArrayOutput
}

type UserPolicyArray []UserPolicyInput

func (UserPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicy)(nil)).Elem()
}

func (i UserPolicyArray) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return i.ToUserPolicyArrayOutputWithContext(context.Background())
}

func (i UserPolicyArray) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPolicyArrayOutput)
}

type UserPolicyOutput struct{ *pulumi.OutputState }

func (UserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPolicy)(nil)).Elem()
}

func (o UserPolicyOutput) ToUserPolicyOutput() UserPolicyOutput {
	return o
}

func (o UserPolicyOutput) ToUserPolicyOutputWithContext(ctx context.Context) UserPolicyOutput {
	return o
}

// 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
func (o UserPolicyOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPolicy) *string { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
func (o UserPolicyOutput) PolicyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPolicy) *string { return v.PolicyType }).(pulumi.StringPtrOutput)
}

type UserPolicyArrayOutput struct{ *pulumi.OutputState }

func (UserPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPolicy)(nil)).Elem()
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutput() UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) ToUserPolicyArrayOutputWithContext(ctx context.Context) UserPolicyArrayOutput {
	return o
}

func (o UserPolicyArrayOutput) Index(i pulumi.IntInput) UserPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPolicy {
		return vs[0].([]UserPolicy)[vs[1].(int)]
	}).(UserPolicyOutput)
}

type UserSecurityConfig struct {
	// 是否开启操作保护。0代表开启，1代表关闭。
	SafeAuthClose *float64 `pulumi:"safeAuthClose"`
	// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
	SafeAuthExemptDuration *float64 `pulumi:"safeAuthExemptDuration"`
	// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
	SafeAuthType *string `pulumi:"safeAuthType"`
}

// UserSecurityConfigInput is an input type that accepts UserSecurityConfigArgs and UserSecurityConfigOutput values.
// You can construct a concrete instance of `UserSecurityConfigInput` via:
//
//	UserSecurityConfigArgs{...}
type UserSecurityConfigInput interface {
	pulumi.Input

	ToUserSecurityConfigOutput() UserSecurityConfigOutput
	ToUserSecurityConfigOutputWithContext(context.Context) UserSecurityConfigOutput
}

type UserSecurityConfigArgs struct {
	// 是否开启操作保护。0代表开启，1代表关闭。
	SafeAuthClose pulumi.Float64PtrInput `pulumi:"safeAuthClose"`
	// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
	SafeAuthExemptDuration pulumi.Float64PtrInput `pulumi:"safeAuthExemptDuration"`
	// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
	SafeAuthType pulumi.StringPtrInput `pulumi:"safeAuthType"`
}

func (UserSecurityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSecurityConfig)(nil)).Elem()
}

func (i UserSecurityConfigArgs) ToUserSecurityConfigOutput() UserSecurityConfigOutput {
	return i.ToUserSecurityConfigOutputWithContext(context.Background())
}

func (i UserSecurityConfigArgs) ToUserSecurityConfigOutputWithContext(ctx context.Context) UserSecurityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSecurityConfigOutput)
}

func (i UserSecurityConfigArgs) ToUserSecurityConfigPtrOutput() UserSecurityConfigPtrOutput {
	return i.ToUserSecurityConfigPtrOutputWithContext(context.Background())
}

func (i UserSecurityConfigArgs) ToUserSecurityConfigPtrOutputWithContext(ctx context.Context) UserSecurityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSecurityConfigOutput).ToUserSecurityConfigPtrOutputWithContext(ctx)
}

// UserSecurityConfigPtrInput is an input type that accepts UserSecurityConfigArgs, UserSecurityConfigPtr and UserSecurityConfigPtrOutput values.
// You can construct a concrete instance of `UserSecurityConfigPtrInput` via:
//
//	        UserSecurityConfigArgs{...}
//
//	or:
//
//	        nil
type UserSecurityConfigPtrInput interface {
	pulumi.Input

	ToUserSecurityConfigPtrOutput() UserSecurityConfigPtrOutput
	ToUserSecurityConfigPtrOutputWithContext(context.Context) UserSecurityConfigPtrOutput
}

type userSecurityConfigPtrType UserSecurityConfigArgs

func UserSecurityConfigPtr(v *UserSecurityConfigArgs) UserSecurityConfigPtrInput {
	return (*userSecurityConfigPtrType)(v)
}

func (*userSecurityConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSecurityConfig)(nil)).Elem()
}

func (i *userSecurityConfigPtrType) ToUserSecurityConfigPtrOutput() UserSecurityConfigPtrOutput {
	return i.ToUserSecurityConfigPtrOutputWithContext(context.Background())
}

func (i *userSecurityConfigPtrType) ToUserSecurityConfigPtrOutputWithContext(ctx context.Context) UserSecurityConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSecurityConfigPtrOutput)
}

type UserSecurityConfigOutput struct{ *pulumi.OutputState }

func (UserSecurityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSecurityConfig)(nil)).Elem()
}

func (o UserSecurityConfigOutput) ToUserSecurityConfigOutput() UserSecurityConfigOutput {
	return o
}

func (o UserSecurityConfigOutput) ToUserSecurityConfigOutputWithContext(ctx context.Context) UserSecurityConfigOutput {
	return o
}

func (o UserSecurityConfigOutput) ToUserSecurityConfigPtrOutput() UserSecurityConfigPtrOutput {
	return o.ToUserSecurityConfigPtrOutputWithContext(context.Background())
}

func (o UserSecurityConfigOutput) ToUserSecurityConfigPtrOutputWithContext(ctx context.Context) UserSecurityConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserSecurityConfig) *UserSecurityConfig {
		return &v
	}).(UserSecurityConfigPtrOutput)
}

// 是否开启操作保护。0代表开启，1代表关闭。
func (o UserSecurityConfigOutput) SafeAuthClose() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserSecurityConfig) *float64 { return v.SafeAuthClose }).(pulumi.Float64PtrOutput)
}

// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
func (o UserSecurityConfigOutput) SafeAuthExemptDuration() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v UserSecurityConfig) *float64 { return v.SafeAuthExemptDuration }).(pulumi.Float64PtrOutput)
}

// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
func (o UserSecurityConfigOutput) SafeAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSecurityConfig) *string { return v.SafeAuthType }).(pulumi.StringPtrOutput)
}

type UserSecurityConfigPtrOutput struct{ *pulumi.OutputState }

func (UserSecurityConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserSecurityConfig)(nil)).Elem()
}

func (o UserSecurityConfigPtrOutput) ToUserSecurityConfigPtrOutput() UserSecurityConfigPtrOutput {
	return o
}

func (o UserSecurityConfigPtrOutput) ToUserSecurityConfigPtrOutputWithContext(ctx context.Context) UserSecurityConfigPtrOutput {
	return o
}

func (o UserSecurityConfigPtrOutput) Elem() UserSecurityConfigOutput {
	return o.ApplyT(func(v *UserSecurityConfig) UserSecurityConfig {
		if v != nil {
			return *v
		}
		var ret UserSecurityConfig
		return ret
	}).(UserSecurityConfigOutput)
}

// 是否开启操作保护。0代表开启，1代表关闭。
func (o UserSecurityConfigPtrOutput) SafeAuthClose() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserSecurityConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SafeAuthClose
	}).(pulumi.Float64PtrOutput)
}

// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
func (o UserSecurityConfigPtrOutput) SafeAuthExemptDuration() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *UserSecurityConfig) *float64 {
		if v == nil {
			return nil
		}
		return v.SafeAuthExemptDuration
	}).(pulumi.Float64PtrOutput)
}

// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
func (o UserSecurityConfigPtrOutput) SafeAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserSecurityConfig) *string {
		if v == nil {
			return nil
		}
		return v.SafeAuthType
	}).(pulumi.StringPtrOutput)
}

type UserTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// UserTagInput is an input type that accepts UserTagArgs and UserTagOutput values.
// You can construct a concrete instance of `UserTagInput` via:
//
//	UserTagArgs{...}
type UserTagInput interface {
	pulumi.Input

	ToUserTagOutput() UserTagOutput
	ToUserTagOutputWithContext(context.Context) UserTagOutput
}

type UserTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (UserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (i UserTagArgs) ToUserTagOutput() UserTagOutput {
	return i.ToUserTagOutputWithContext(context.Background())
}

func (i UserTagArgs) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagOutput)
}

// UserTagArrayInput is an input type that accepts UserTagArray and UserTagArrayOutput values.
// You can construct a concrete instance of `UserTagArrayInput` via:
//
//	UserTagArray{ UserTagArgs{...} }
type UserTagArrayInput interface {
	pulumi.Input

	ToUserTagArrayOutput() UserTagArrayOutput
	ToUserTagArrayOutputWithContext(context.Context) UserTagArrayOutput
}

type UserTagArray []UserTagInput

func (UserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (i UserTagArray) ToUserTagArrayOutput() UserTagArrayOutput {
	return i.ToUserTagArrayOutputWithContext(context.Background())
}

func (i UserTagArray) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserTagArrayOutput)
}

type UserTagOutput struct{ *pulumi.OutputState }

func (UserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserTag)(nil)).Elem()
}

func (o UserTagOutput) ToUserTagOutput() UserTagOutput {
	return o
}

func (o UserTagOutput) ToUserTagOutputWithContext(ctx context.Context) UserTagOutput {
	return o
}

// 标签键。
func (o UserTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o UserTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type UserTagArrayOutput struct{ *pulumi.OutputState }

func (UserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserTag)(nil)).Elem()
}

func (o UserTagArrayOutput) ToUserTagArrayOutput() UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) ToUserTagArrayOutputWithContext(ctx context.Context) UserTagArrayOutput {
	return o
}

func (o UserTagArrayOutput) Index(i pulumi.IntInput) UserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserTag {
		return vs[0].([]UserTag)[vs[1].(int)]
	}).(UserTagOutput)
}

type GetRolePolicy struct {
	// 策略名。
	PolicyName string `pulumi:"policyName"`
	// 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType string `pulumi:"policyType"`
}

// GetRolePolicyInput is an input type that accepts GetRolePolicyArgs and GetRolePolicyOutput values.
// You can construct a concrete instance of `GetRolePolicyInput` via:
//
//	GetRolePolicyArgs{...}
type GetRolePolicyInput interface {
	pulumi.Input

	ToGetRolePolicyOutput() GetRolePolicyOutput
	ToGetRolePolicyOutputWithContext(context.Context) GetRolePolicyOutput
}

type GetRolePolicyArgs struct {
	// 策略名。
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}

func (GetRolePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePolicy)(nil)).Elem()
}

func (i GetRolePolicyArgs) ToGetRolePolicyOutput() GetRolePolicyOutput {
	return i.ToGetRolePolicyOutputWithContext(context.Background())
}

func (i GetRolePolicyArgs) ToGetRolePolicyOutputWithContext(ctx context.Context) GetRolePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePolicyOutput)
}

// GetRolePolicyArrayInput is an input type that accepts GetRolePolicyArray and GetRolePolicyArrayOutput values.
// You can construct a concrete instance of `GetRolePolicyArrayInput` via:
//
//	GetRolePolicyArray{ GetRolePolicyArgs{...} }
type GetRolePolicyArrayInput interface {
	pulumi.Input

	ToGetRolePolicyArrayOutput() GetRolePolicyArrayOutput
	ToGetRolePolicyArrayOutputWithContext(context.Context) GetRolePolicyArrayOutput
}

type GetRolePolicyArray []GetRolePolicyInput

func (GetRolePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePolicy)(nil)).Elem()
}

func (i GetRolePolicyArray) ToGetRolePolicyArrayOutput() GetRolePolicyArrayOutput {
	return i.ToGetRolePolicyArrayOutputWithContext(context.Background())
}

func (i GetRolePolicyArray) ToGetRolePolicyArrayOutputWithContext(ctx context.Context) GetRolePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePolicyArrayOutput)
}

type GetRolePolicyOutput struct{ *pulumi.OutputState }

func (GetRolePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePolicy)(nil)).Elem()
}

func (o GetRolePolicyOutput) ToGetRolePolicyOutput() GetRolePolicyOutput {
	return o
}

func (o GetRolePolicyOutput) ToGetRolePolicyOutputWithContext(ctx context.Context) GetRolePolicyOutput {
	return o
}

// 策略名。
func (o GetRolePolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolePolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

// 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
func (o GetRolePolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolePolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

type GetRolePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetRolePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePolicy)(nil)).Elem()
}

func (o GetRolePolicyArrayOutput) ToGetRolePolicyArrayOutput() GetRolePolicyArrayOutput {
	return o
}

func (o GetRolePolicyArrayOutput) ToGetRolePolicyArrayOutputWithContext(ctx context.Context) GetRolePolicyArrayOutput {
	return o
}

func (o GetRolePolicyArrayOutput) Index(i pulumi.IntInput) GetRolePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRolePolicy {
		return vs[0].([]GetRolePolicy)[vs[1].(int)]
	}).(GetRolePolicyOutput)
}

type GetRoleTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetRoleTagInput is an input type that accepts GetRoleTagArgs and GetRoleTagOutput values.
// You can construct a concrete instance of `GetRoleTagInput` via:
//
//	GetRoleTagArgs{...}
type GetRoleTagInput interface {
	pulumi.Input

	ToGetRoleTagOutput() GetRoleTagOutput
	ToGetRoleTagOutputWithContext(context.Context) GetRoleTagOutput
}

type GetRoleTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRoleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleTag)(nil)).Elem()
}

func (i GetRoleTagArgs) ToGetRoleTagOutput() GetRoleTagOutput {
	return i.ToGetRoleTagOutputWithContext(context.Background())
}

func (i GetRoleTagArgs) ToGetRoleTagOutputWithContext(ctx context.Context) GetRoleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleTagOutput)
}

// GetRoleTagArrayInput is an input type that accepts GetRoleTagArray and GetRoleTagArrayOutput values.
// You can construct a concrete instance of `GetRoleTagArrayInput` via:
//
//	GetRoleTagArray{ GetRoleTagArgs{...} }
type GetRoleTagArrayInput interface {
	pulumi.Input

	ToGetRoleTagArrayOutput() GetRoleTagArrayOutput
	ToGetRoleTagArrayOutputWithContext(context.Context) GetRoleTagArrayOutput
}

type GetRoleTagArray []GetRoleTagInput

func (GetRoleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoleTag)(nil)).Elem()
}

func (i GetRoleTagArray) ToGetRoleTagArrayOutput() GetRoleTagArrayOutput {
	return i.ToGetRoleTagArrayOutputWithContext(context.Background())
}

func (i GetRoleTagArray) ToGetRoleTagArrayOutputWithContext(ctx context.Context) GetRoleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRoleTagArrayOutput)
}

type GetRoleTagOutput struct{ *pulumi.OutputState }

func (GetRoleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRoleTag)(nil)).Elem()
}

func (o GetRoleTagOutput) ToGetRoleTagOutput() GetRoleTagOutput {
	return o
}

func (o GetRoleTagOutput) ToGetRoleTagOutputWithContext(ctx context.Context) GetRoleTagOutput {
	return o
}

// 标签键。
func (o GetRoleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoleTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetRoleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRoleTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetRoleTagArrayOutput struct{ *pulumi.OutputState }

func (GetRoleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRoleTag)(nil)).Elem()
}

func (o GetRoleTagArrayOutput) ToGetRoleTagArrayOutput() GetRoleTagArrayOutput {
	return o
}

func (o GetRoleTagArrayOutput) ToGetRoleTagArrayOutputWithContext(ctx context.Context) GetRoleTagArrayOutput {
	return o
}

func (o GetRoleTagArrayOutput) Index(i pulumi.IntInput) GetRoleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRoleTag {
		return vs[0].([]GetRoleTag)[vs[1].(int)]
	}).(GetRoleTagOutput)
}

type GetUserLoginProfile struct {
	// 登录配置创建时间。
	CreateDate string `pulumi:"createDate"`
	// 上次登录时间。
	LastLoginDate string `pulumi:"lastLoginDate"`
	// 上次登录IP。
	LastLoginIp string `pulumi:"lastLoginIp"`
	// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
	LastResetPasswordTime float64 `pulumi:"lastResetPasswordTime"`
	// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
	LoginAllowed bool `pulumi:"loginAllowed"`
	// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
	LoginLocked bool `pulumi:"loginLocked"`
	// 登录密码。
	Password string `pulumi:"password"`
	// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
	PasswordExpireAt float64 `pulumi:"passwordExpireAt"`
	// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
	PasswordResetRequired bool `pulumi:"passwordResetRequired"`
	// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
	SafeAuthExemptDuration float64 `pulumi:"safeAuthExemptDuration"`
	// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
	SafeAuthExemptRequired float64 `pulumi:"safeAuthExemptRequired"`
	// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
	SafeAuthExemptUnit float64 `pulumi:"safeAuthExemptUnit"`
	// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
	SafeAuthFlag bool `pulumi:"safeAuthFlag"`
	// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
	SafeAuthType string `pulumi:"safeAuthType"`
	// 登录配置更新时间。
	UpdateDate string `pulumi:"updateDate"`
}

// GetUserLoginProfileInput is an input type that accepts GetUserLoginProfileArgs and GetUserLoginProfileOutput values.
// You can construct a concrete instance of `GetUserLoginProfileInput` via:
//
//	GetUserLoginProfileArgs{...}
type GetUserLoginProfileInput interface {
	pulumi.Input

	ToGetUserLoginProfileOutput() GetUserLoginProfileOutput
	ToGetUserLoginProfileOutputWithContext(context.Context) GetUserLoginProfileOutput
}

type GetUserLoginProfileArgs struct {
	// 登录配置创建时间。
	CreateDate pulumi.StringInput `pulumi:"createDate"`
	// 上次登录时间。
	LastLoginDate pulumi.StringInput `pulumi:"lastLoginDate"`
	// 上次登录IP。
	LastLoginIp pulumi.StringInput `pulumi:"lastLoginIp"`
	// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
	LastResetPasswordTime pulumi.Float64Input `pulumi:"lastResetPasswordTime"`
	// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
	LoginAllowed pulumi.BoolInput `pulumi:"loginAllowed"`
	// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
	LoginLocked pulumi.BoolInput `pulumi:"loginLocked"`
	// 登录密码。
	Password pulumi.StringInput `pulumi:"password"`
	// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
	PasswordExpireAt pulumi.Float64Input `pulumi:"passwordExpireAt"`
	// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
	PasswordResetRequired pulumi.BoolInput `pulumi:"passwordResetRequired"`
	// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
	SafeAuthExemptDuration pulumi.Float64Input `pulumi:"safeAuthExemptDuration"`
	// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
	SafeAuthExemptRequired pulumi.Float64Input `pulumi:"safeAuthExemptRequired"`
	// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
	SafeAuthExemptUnit pulumi.Float64Input `pulumi:"safeAuthExemptUnit"`
	// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
	SafeAuthFlag pulumi.BoolInput `pulumi:"safeAuthFlag"`
	// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
	SafeAuthType pulumi.StringInput `pulumi:"safeAuthType"`
	// 登录配置更新时间。
	UpdateDate pulumi.StringInput `pulumi:"updateDate"`
}

func (GetUserLoginProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLoginProfile)(nil)).Elem()
}

func (i GetUserLoginProfileArgs) ToGetUserLoginProfileOutput() GetUserLoginProfileOutput {
	return i.ToGetUserLoginProfileOutputWithContext(context.Background())
}

func (i GetUserLoginProfileArgs) ToGetUserLoginProfileOutputWithContext(ctx context.Context) GetUserLoginProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLoginProfileOutput)
}

type GetUserLoginProfileOutput struct{ *pulumi.OutputState }

func (GetUserLoginProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLoginProfile)(nil)).Elem()
}

func (o GetUserLoginProfileOutput) ToGetUserLoginProfileOutput() GetUserLoginProfileOutput {
	return o
}

func (o GetUserLoginProfileOutput) ToGetUserLoginProfileOutputWithContext(ctx context.Context) GetUserLoginProfileOutput {
	return o
}

// 登录配置创建时间。
func (o GetUserLoginProfileOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLoginProfile) string { return v.CreateDate }).(pulumi.StringOutput)
}

// 上次登录时间。
func (o GetUserLoginProfileOutput) LastLoginDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLoginProfile) string { return v.LastLoginDate }).(pulumi.StringOutput)
}

// 上次登录IP。
func (o GetUserLoginProfileOutput) LastLoginIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLoginProfile) string { return v.LastLoginIp }).(pulumi.StringOutput)
}

// 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
func (o GetUserLoginProfileOutput) LastResetPasswordTime() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserLoginProfile) float64 { return v.LastResetPasswordTime }).(pulumi.Float64Output)
}

// 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
func (o GetUserLoginProfileOutput) LoginAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserLoginProfile) bool { return v.LoginAllowed }).(pulumi.BoolOutput)
}

// 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
func (o GetUserLoginProfileOutput) LoginLocked() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserLoginProfile) bool { return v.LoginLocked }).(pulumi.BoolOutput)
}

// 登录密码。
func (o GetUserLoginProfileOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLoginProfile) string { return v.Password }).(pulumi.StringOutput)
}

// 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
func (o GetUserLoginProfileOutput) PasswordExpireAt() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserLoginProfile) float64 { return v.PasswordExpireAt }).(pulumi.Float64Output)
}

// 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
func (o GetUserLoginProfileOutput) PasswordResetRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserLoginProfile) bool { return v.PasswordResetRequired }).(pulumi.BoolOutput)
}

// 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
func (o GetUserLoginProfileOutput) SafeAuthExemptDuration() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserLoginProfile) float64 { return v.SafeAuthExemptDuration }).(pulumi.Float64Output)
}

// 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
func (o GetUserLoginProfileOutput) SafeAuthExemptRequired() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserLoginProfile) float64 { return v.SafeAuthExemptRequired }).(pulumi.Float64Output)
}

// 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
func (o GetUserLoginProfileOutput) SafeAuthExemptUnit() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserLoginProfile) float64 { return v.SafeAuthExemptUnit }).(pulumi.Float64Output)
}

// 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
func (o GetUserLoginProfileOutput) SafeAuthFlag() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserLoginProfile) bool { return v.SafeAuthFlag }).(pulumi.BoolOutput)
}

// 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
func (o GetUserLoginProfileOutput) SafeAuthType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLoginProfile) string { return v.SafeAuthType }).(pulumi.StringOutput)
}

// 登录配置更新时间。
func (o GetUserLoginProfileOutput) UpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLoginProfile) string { return v.UpdateDate }).(pulumi.StringOutput)
}

type GetUserPolicy struct {
	// 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName string `pulumi:"policyName"`
	// 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType string `pulumi:"policyType"`
}

// GetUserPolicyInput is an input type that accepts GetUserPolicyArgs and GetUserPolicyOutput values.
// You can construct a concrete instance of `GetUserPolicyInput` via:
//
//	GetUserPolicyArgs{...}
type GetUserPolicyInput interface {
	pulumi.Input

	ToGetUserPolicyOutput() GetUserPolicyOutput
	ToGetUserPolicyOutputWithContext(context.Context) GetUserPolicyOutput
}

type GetUserPolicyArgs struct {
	// 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType pulumi.StringInput `pulumi:"policyType"`
}

func (GetUserPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPolicy)(nil)).Elem()
}

func (i GetUserPolicyArgs) ToGetUserPolicyOutput() GetUserPolicyOutput {
	return i.ToGetUserPolicyOutputWithContext(context.Background())
}

func (i GetUserPolicyArgs) ToGetUserPolicyOutputWithContext(ctx context.Context) GetUserPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPolicyOutput)
}

// GetUserPolicyArrayInput is an input type that accepts GetUserPolicyArray and GetUserPolicyArrayOutput values.
// You can construct a concrete instance of `GetUserPolicyArrayInput` via:
//
//	GetUserPolicyArray{ GetUserPolicyArgs{...} }
type GetUserPolicyArrayInput interface {
	pulumi.Input

	ToGetUserPolicyArrayOutput() GetUserPolicyArrayOutput
	ToGetUserPolicyArrayOutputWithContext(context.Context) GetUserPolicyArrayOutput
}

type GetUserPolicyArray []GetUserPolicyInput

func (GetUserPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPolicy)(nil)).Elem()
}

func (i GetUserPolicyArray) ToGetUserPolicyArrayOutput() GetUserPolicyArrayOutput {
	return i.ToGetUserPolicyArrayOutputWithContext(context.Background())
}

func (i GetUserPolicyArray) ToGetUserPolicyArrayOutputWithContext(ctx context.Context) GetUserPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPolicyArrayOutput)
}

type GetUserPolicyOutput struct{ *pulumi.OutputState }

func (GetUserPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPolicy)(nil)).Elem()
}

func (o GetUserPolicyOutput) ToGetUserPolicyOutput() GetUserPolicyOutput {
	return o
}

func (o GetUserPolicyOutput) ToGetUserPolicyOutputWithContext(ctx context.Context) GetUserPolicyOutput {
	return o
}

// 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
func (o GetUserPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

// 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
func (o GetUserPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

type GetUserPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetUserPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPolicy)(nil)).Elem()
}

func (o GetUserPolicyArrayOutput) ToGetUserPolicyArrayOutput() GetUserPolicyArrayOutput {
	return o
}

func (o GetUserPolicyArrayOutput) ToGetUserPolicyArrayOutputWithContext(ctx context.Context) GetUserPolicyArrayOutput {
	return o
}

func (o GetUserPolicyArrayOutput) Index(i pulumi.IntInput) GetUserPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserPolicy {
		return vs[0].([]GetUserPolicy)[vs[1].(int)]
	}).(GetUserPolicyOutput)
}

type GetUserSecurityConfig struct {
	// 是否开启操作保护。0代表开启，1代表关闭。
	SafeAuthClose float64 `pulumi:"safeAuthClose"`
	// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
	SafeAuthExemptDuration float64 `pulumi:"safeAuthExemptDuration"`
	// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
	SafeAuthType string `pulumi:"safeAuthType"`
}

// GetUserSecurityConfigInput is an input type that accepts GetUserSecurityConfigArgs and GetUserSecurityConfigOutput values.
// You can construct a concrete instance of `GetUserSecurityConfigInput` via:
//
//	GetUserSecurityConfigArgs{...}
type GetUserSecurityConfigInput interface {
	pulumi.Input

	ToGetUserSecurityConfigOutput() GetUserSecurityConfigOutput
	ToGetUserSecurityConfigOutputWithContext(context.Context) GetUserSecurityConfigOutput
}

type GetUserSecurityConfigArgs struct {
	// 是否开启操作保护。0代表开启，1代表关闭。
	SafeAuthClose pulumi.Float64Input `pulumi:"safeAuthClose"`
	// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
	SafeAuthExemptDuration pulumi.Float64Input `pulumi:"safeAuthExemptDuration"`
	// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
	SafeAuthType pulumi.StringInput `pulumi:"safeAuthType"`
}

func (GetUserSecurityConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSecurityConfig)(nil)).Elem()
}

func (i GetUserSecurityConfigArgs) ToGetUserSecurityConfigOutput() GetUserSecurityConfigOutput {
	return i.ToGetUserSecurityConfigOutputWithContext(context.Background())
}

func (i GetUserSecurityConfigArgs) ToGetUserSecurityConfigOutputWithContext(ctx context.Context) GetUserSecurityConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSecurityConfigOutput)
}

type GetUserSecurityConfigOutput struct{ *pulumi.OutputState }

func (GetUserSecurityConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSecurityConfig)(nil)).Elem()
}

func (o GetUserSecurityConfigOutput) ToGetUserSecurityConfigOutput() GetUserSecurityConfigOutput {
	return o
}

func (o GetUserSecurityConfigOutput) ToGetUserSecurityConfigOutputWithContext(ctx context.Context) GetUserSecurityConfigOutput {
	return o
}

// 是否开启操作保护。0代表开启，1代表关闭。
func (o GetUserSecurityConfigOutput) SafeAuthClose() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserSecurityConfig) float64 { return v.SafeAuthClose }).(pulumi.Float64Output)
}

// 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
func (o GetUserSecurityConfigOutput) SafeAuthExemptDuration() pulumi.Float64Output {
	return o.ApplyT(func(v GetUserSecurityConfig) float64 { return v.SafeAuthExemptDuration }).(pulumi.Float64Output)
}

// 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
func (o GetUserSecurityConfigOutput) SafeAuthType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSecurityConfig) string { return v.SafeAuthType }).(pulumi.StringOutput)
}

type GetUserTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetUserTagInput is an input type that accepts GetUserTagArgs and GetUserTagOutput values.
// You can construct a concrete instance of `GetUserTagInput` via:
//
//	GetUserTagArgs{...}
type GetUserTagInput interface {
	pulumi.Input

	ToGetUserTagOutput() GetUserTagOutput
	ToGetUserTagOutputWithContext(context.Context) GetUserTagOutput
}

type GetUserTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetUserTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTag)(nil)).Elem()
}

func (i GetUserTagArgs) ToGetUserTagOutput() GetUserTagOutput {
	return i.ToGetUserTagOutputWithContext(context.Background())
}

func (i GetUserTagArgs) ToGetUserTagOutputWithContext(ctx context.Context) GetUserTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTagOutput)
}

// GetUserTagArrayInput is an input type that accepts GetUserTagArray and GetUserTagArrayOutput values.
// You can construct a concrete instance of `GetUserTagArrayInput` via:
//
//	GetUserTagArray{ GetUserTagArgs{...} }
type GetUserTagArrayInput interface {
	pulumi.Input

	ToGetUserTagArrayOutput() GetUserTagArrayOutput
	ToGetUserTagArrayOutputWithContext(context.Context) GetUserTagArrayOutput
}

type GetUserTagArray []GetUserTagInput

func (GetUserTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTag)(nil)).Elem()
}

func (i GetUserTagArray) ToGetUserTagArrayOutput() GetUserTagArrayOutput {
	return i.ToGetUserTagArrayOutputWithContext(context.Background())
}

func (i GetUserTagArray) ToGetUserTagArrayOutputWithContext(ctx context.Context) GetUserTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserTagArrayOutput)
}

type GetUserTagOutput struct{ *pulumi.OutputState }

func (GetUserTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserTag)(nil)).Elem()
}

func (o GetUserTagOutput) ToGetUserTagOutput() GetUserTagOutput {
	return o
}

func (o GetUserTagOutput) ToGetUserTagOutputWithContext(ctx context.Context) GetUserTagOutput {
	return o
}

// 标签键。
func (o GetUserTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetUserTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetUserTagArrayOutput struct{ *pulumi.OutputState }

func (GetUserTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserTag)(nil)).Elem()
}

func (o GetUserTagArrayOutput) ToGetUserTagArrayOutput() GetUserTagArrayOutput {
	return o
}

func (o GetUserTagArrayOutput) ToGetUserTagArrayOutputWithContext(ctx context.Context) GetUserTagArrayOutput {
	return o
}

func (o GetUserTagArrayOutput) Index(i pulumi.IntInput) GetUserTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserTag {
		return vs[0].([]GetUserTag)[vs[1].(int)]
	}).(GetUserTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyInput)(nil)).Elem(), RolePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePolicyArrayInput)(nil)).Elem(), RolePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagInput)(nil)).Elem(), RoleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleTagArrayInput)(nil)).Elem(), RoleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLoginProfileInput)(nil)).Elem(), UserLoginProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLoginProfilePtrInput)(nil)).Elem(), UserLoginProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyInput)(nil)).Elem(), UserPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPolicyArrayInput)(nil)).Elem(), UserPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSecurityConfigInput)(nil)).Elem(), UserSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSecurityConfigPtrInput)(nil)).Elem(), UserSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagInput)(nil)).Elem(), UserTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserTagArrayInput)(nil)).Elem(), UserTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePolicyInput)(nil)).Elem(), GetRolePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePolicyArrayInput)(nil)).Elem(), GetRolePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoleTagInput)(nil)).Elem(), GetRoleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRoleTagArrayInput)(nil)).Elem(), GetRoleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLoginProfileInput)(nil)).Elem(), GetUserLoginProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPolicyInput)(nil)).Elem(), GetUserPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPolicyArrayInput)(nil)).Elem(), GetUserPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSecurityConfigInput)(nil)).Elem(), GetUserSecurityConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserTagInput)(nil)).Elem(), GetUserTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserTagArrayInput)(nil)).Elem(), GetUserTagArray{})
	pulumi.RegisterOutputType(RolePolicyOutput{})
	pulumi.RegisterOutputType(RolePolicyArrayOutput{})
	pulumi.RegisterOutputType(RoleTagOutput{})
	pulumi.RegisterOutputType(RoleTagArrayOutput{})
	pulumi.RegisterOutputType(UserLoginProfileOutput{})
	pulumi.RegisterOutputType(UserLoginProfilePtrOutput{})
	pulumi.RegisterOutputType(UserPolicyOutput{})
	pulumi.RegisterOutputType(UserPolicyArrayOutput{})
	pulumi.RegisterOutputType(UserSecurityConfigOutput{})
	pulumi.RegisterOutputType(UserSecurityConfigPtrOutput{})
	pulumi.RegisterOutputType(UserTagOutput{})
	pulumi.RegisterOutputType(UserTagArrayOutput{})
	pulumi.RegisterOutputType(GetRolePolicyOutput{})
	pulumi.RegisterOutputType(GetRolePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetRoleTagOutput{})
	pulumi.RegisterOutputType(GetRoleTagArrayOutput{})
	pulumi.RegisterOutputType(GetUserLoginProfileOutput{})
	pulumi.RegisterOutputType(GetUserPolicyOutput{})
	pulumi.RegisterOutputType(GetUserPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetUserSecurityConfigOutput{})
	pulumi.RegisterOutputType(GetUserTagOutput{})
	pulumi.RegisterOutputType(GetUserTagArrayOutput{})
}
