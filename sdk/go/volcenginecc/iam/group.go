// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 用户组是用户的集合。当用户组被关联上策略后，同一用户组里的所有用户会拥有对应的策略权限，同一个用户可存在于多个用户组中，可同时拥有多个用户组的权限。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:iam/group:Group example "user_group_name"
// ```
type Group struct {
	pulumi.CustomResourceState

	// 用户组所属主账号的ID。
	AccountId       pulumi.IntOutput               `pulumi:"accountId"`
	AttachedPolicys GroupAttachedPolicyArrayOutput `pulumi:"attachedPolicys"`
	// 用户组的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 用户组描述信息。长度不超过128。
	Description pulumi.StringOutput `pulumi:"description"`
	// 用户组显示名称。长度不超过64。
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// 用户组的更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 用户组ID。
	UserGroupId pulumi.IntOutput `pulumi:"userGroupId"`
	// 用户组名称。长度1~64，支持英文、数字和.-_符号。
	UserGroupName pulumi.StringOutput  `pulumi:"userGroupName"`
	Users         GroupUserArrayOutput `pulumi:"users"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserGroupName == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("volcenginecc:iam/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("volcenginecc:iam/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// 用户组所属主账号的ID。
	AccountId       *int                  `pulumi:"accountId"`
	AttachedPolicys []GroupAttachedPolicy `pulumi:"attachedPolicys"`
	// 用户组的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 用户组描述信息。长度不超过128。
	Description *string `pulumi:"description"`
	// 用户组显示名称。长度不超过64。
	DisplayName *string `pulumi:"displayName"`
	// 用户组的更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 用户组ID。
	UserGroupId *int `pulumi:"userGroupId"`
	// 用户组名称。长度1~64，支持英文、数字和.-_符号。
	UserGroupName *string     `pulumi:"userGroupName"`
	Users         []GroupUser `pulumi:"users"`
}

type GroupState struct {
	// 用户组所属主账号的ID。
	AccountId       pulumi.IntPtrInput
	AttachedPolicys GroupAttachedPolicyArrayInput
	// 用户组的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 用户组描述信息。长度不超过128。
	Description pulumi.StringPtrInput
	// 用户组显示名称。长度不超过64。
	DisplayName pulumi.StringPtrInput
	// 用户组的更新时间。
	UpdatedTime pulumi.StringPtrInput
	// 用户组ID。
	UserGroupId pulumi.IntPtrInput
	// 用户组名称。长度1~64，支持英文、数字和.-_符号。
	UserGroupName pulumi.StringPtrInput
	Users         GroupUserArrayInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	AttachedPolicys []GroupAttachedPolicy `pulumi:"attachedPolicys"`
	// 用户组描述信息。长度不超过128。
	Description *string `pulumi:"description"`
	// 用户组显示名称。长度不超过64。
	DisplayName *string `pulumi:"displayName"`
	// 用户组名称。长度1~64，支持英文、数字和.-_符号。
	UserGroupName string      `pulumi:"userGroupName"`
	Users         []GroupUser `pulumi:"users"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	AttachedPolicys GroupAttachedPolicyArrayInput
	// 用户组描述信息。长度不超过128。
	Description pulumi.StringPtrInput
	// 用户组显示名称。长度不超过64。
	DisplayName pulumi.StringPtrInput
	// 用户组名称。长度1~64，支持英文、数字和.-_符号。
	UserGroupName pulumi.StringInput
	Users         GroupUserArrayInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// 用户组所属主账号的ID。
func (o GroupOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.AccountId }).(pulumi.IntOutput)
}

func (o GroupOutput) AttachedPolicys() GroupAttachedPolicyArrayOutput {
	return o.ApplyT(func(v *Group) GroupAttachedPolicyArrayOutput { return v.AttachedPolicys }).(GroupAttachedPolicyArrayOutput)
}

// 用户组的创建时间。
func (o GroupOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 用户组描述信息。长度不超过128。
func (o GroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 用户组显示名称。长度不超过64。
func (o GroupOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// 用户组的更新时间。
func (o GroupOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 用户组ID。
func (o GroupOutput) UserGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *Group) pulumi.IntOutput { return v.UserGroupId }).(pulumi.IntOutput)
}

// 用户组名称。长度1~64，支持英文、数字和.-_符号。
func (o GroupOutput) UserGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.UserGroupName }).(pulumi.StringOutput)
}

func (o GroupOutput) Users() GroupUserArrayOutput {
	return o.ApplyT(func(v *Group) GroupUserArrayOutput { return v.Users }).(GroupUserArrayOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
