// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// IAM子用户是访问控制的一种身份，由账号或是拥有权限的用户创建。用户被授予权限后，可登录控制台或使用访问密钥调用API访问云资源。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:iam/user:User example "user_name"
// ```
type User struct {
	pulumi.CustomResourceState

	// 子用户归属的主账号。
	AccountId pulumi.Float64Output `pulumi:"accountId"`
	// 子用户对应的创建时间。
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// 子用户对应的描述信息，长度不超过255。
	Description pulumi.StringOutput `pulumi:"description"`
	// 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// 子用户对应的电子邮件地址。
	Email pulumi.StringOutput `pulumi:"email"`
	// 子用户归属的用户组。
	Groups pulumi.StringArrayOutput `pulumi:"groups"`
	// 子用户的登录配置。
	LoginProfile UserLoginProfileOutput `pulumi:"loginProfile"`
	// 子用户对应的手机号。
	MobilePhone pulumi.StringOutput   `pulumi:"mobilePhone"`
	Policies    UserPolicyArrayOutput `pulumi:"policies"`
	// 子用户的操作保护配置。
	SecurityConfig UserSecurityConfigOutput `pulumi:"securityConfig"`
	Tags           UserTagArrayOutput       `pulumi:"tags"`
	// 子用户对应的Trn表达式。
	Trn pulumi.StringOutput `pulumi:"trn"`
	// 子用户对应的更新时间。
	UpdateDate pulumi.StringOutput `pulumi:"updateDate"`
	// 子用户的ID。
	UserId pulumi.IntOutput `pulumi:"userId"`
	// 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewUser registers a new resource with the given unique name, arguments, and options.
func NewUser(ctx *pulumi.Context,
	name string, args *UserArgs, opts ...pulumi.ResourceOption) (*User, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource User
	err := ctx.RegisterResource("volcenginecc:iam/user:User", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUser gets an existing User resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserState, opts ...pulumi.ResourceOption) (*User, error) {
	var resource User
	err := ctx.ReadResource("volcenginecc:iam/user:User", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering User resources.
type userState struct {
	// 子用户归属的主账号。
	AccountId *float64 `pulumi:"accountId"`
	// 子用户对应的创建时间。
	CreateDate *string `pulumi:"createDate"`
	// 子用户对应的描述信息，长度不超过255。
	Description *string `pulumi:"description"`
	// 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
	DisplayName *string `pulumi:"displayName"`
	// 子用户对应的电子邮件地址。
	Email *string `pulumi:"email"`
	// 子用户归属的用户组。
	Groups []string `pulumi:"groups"`
	// 子用户的登录配置。
	LoginProfile *UserLoginProfile `pulumi:"loginProfile"`
	// 子用户对应的手机号。
	MobilePhone *string      `pulumi:"mobilePhone"`
	Policies    []UserPolicy `pulumi:"policies"`
	// 子用户的操作保护配置。
	SecurityConfig *UserSecurityConfig `pulumi:"securityConfig"`
	Tags           []UserTag           `pulumi:"tags"`
	// 子用户对应的Trn表达式。
	Trn *string `pulumi:"trn"`
	// 子用户对应的更新时间。
	UpdateDate *string `pulumi:"updateDate"`
	// 子用户的ID。
	UserId *int `pulumi:"userId"`
	// 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
	UserName *string `pulumi:"userName"`
}

type UserState struct {
	// 子用户归属的主账号。
	AccountId pulumi.Float64PtrInput
	// 子用户对应的创建时间。
	CreateDate pulumi.StringPtrInput
	// 子用户对应的描述信息，长度不超过255。
	Description pulumi.StringPtrInput
	// 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
	DisplayName pulumi.StringPtrInput
	// 子用户对应的电子邮件地址。
	Email pulumi.StringPtrInput
	// 子用户归属的用户组。
	Groups pulumi.StringArrayInput
	// 子用户的登录配置。
	LoginProfile UserLoginProfilePtrInput
	// 子用户对应的手机号。
	MobilePhone pulumi.StringPtrInput
	Policies    UserPolicyArrayInput
	// 子用户的操作保护配置。
	SecurityConfig UserSecurityConfigPtrInput
	Tags           UserTagArrayInput
	// 子用户对应的Trn表达式。
	Trn pulumi.StringPtrInput
	// 子用户对应的更新时间。
	UpdateDate pulumi.StringPtrInput
	// 子用户的ID。
	UserId pulumi.IntPtrInput
	// 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
	UserName pulumi.StringPtrInput
}

func (UserState) ElementType() reflect.Type {
	return reflect.TypeOf((*userState)(nil)).Elem()
}

type userArgs struct {
	// 子用户对应的描述信息，长度不超过255。
	Description *string `pulumi:"description"`
	// 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
	DisplayName *string `pulumi:"displayName"`
	// 子用户对应的电子邮件地址。
	Email *string `pulumi:"email"`
	// 子用户归属的用户组。
	Groups []string `pulumi:"groups"`
	// 子用户的登录配置。
	LoginProfile *UserLoginProfile `pulumi:"loginProfile"`
	// 子用户对应的手机号。
	MobilePhone *string      `pulumi:"mobilePhone"`
	Policies    []UserPolicy `pulumi:"policies"`
	// 子用户的操作保护配置。
	SecurityConfig *UserSecurityConfig `pulumi:"securityConfig"`
	Tags           []UserTag           `pulumi:"tags"`
	// 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a User resource.
type UserArgs struct {
	// 子用户对应的描述信息，长度不超过255。
	Description pulumi.StringPtrInput
	// 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
	DisplayName pulumi.StringPtrInput
	// 子用户对应的电子邮件地址。
	Email pulumi.StringPtrInput
	// 子用户归属的用户组。
	Groups pulumi.StringArrayInput
	// 子用户的登录配置。
	LoginProfile UserLoginProfilePtrInput
	// 子用户对应的手机号。
	MobilePhone pulumi.StringPtrInput
	Policies    UserPolicyArrayInput
	// 子用户的操作保护配置。
	SecurityConfig UserSecurityConfigPtrInput
	Tags           UserTagArrayInput
	// 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
	UserName pulumi.StringInput
}

func (UserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userArgs)(nil)).Elem()
}

type UserInput interface {
	pulumi.Input

	ToUserOutput() UserOutput
	ToUserOutputWithContext(ctx context.Context) UserOutput
}

func (*User) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (i *User) ToUserOutput() UserOutput {
	return i.ToUserOutputWithContext(context.Background())
}

func (i *User) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOutput)
}

// UserArrayInput is an input type that accepts UserArray and UserArrayOutput values.
// You can construct a concrete instance of `UserArrayInput` via:
//
//	UserArray{ UserArgs{...} }
type UserArrayInput interface {
	pulumi.Input

	ToUserArrayOutput() UserArrayOutput
	ToUserArrayOutputWithContext(context.Context) UserArrayOutput
}

type UserArray []UserInput

func (UserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (i UserArray) ToUserArrayOutput() UserArrayOutput {
	return i.ToUserArrayOutputWithContext(context.Background())
}

func (i UserArray) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserArrayOutput)
}

// UserMapInput is an input type that accepts UserMap and UserMapOutput values.
// You can construct a concrete instance of `UserMapInput` via:
//
//	UserMap{ "key": UserArgs{...} }
type UserMapInput interface {
	pulumi.Input

	ToUserMapOutput() UserMapOutput
	ToUserMapOutputWithContext(context.Context) UserMapOutput
}

type UserMap map[string]UserInput

func (UserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (i UserMap) ToUserMapOutput() UserMapOutput {
	return i.ToUserMapOutputWithContext(context.Background())
}

func (i UserMap) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserMapOutput)
}

type UserOutput struct{ *pulumi.OutputState }

func (UserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**User)(nil)).Elem()
}

func (o UserOutput) ToUserOutput() UserOutput {
	return o
}

func (o UserOutput) ToUserOutputWithContext(ctx context.Context) UserOutput {
	return o
}

// 子用户归属的主账号。
func (o UserOutput) AccountId() pulumi.Float64Output {
	return o.ApplyT(func(v *User) pulumi.Float64Output { return v.AccountId }).(pulumi.Float64Output)
}

// 子用户对应的创建时间。
func (o UserOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// 子用户对应的描述信息，长度不超过255。
func (o UserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
func (o UserOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// 子用户对应的电子邮件地址。
func (o UserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// 子用户归属的用户组。
func (o UserOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *User) pulumi.StringArrayOutput { return v.Groups }).(pulumi.StringArrayOutput)
}

// 子用户的登录配置。
func (o UserOutput) LoginProfile() UserLoginProfileOutput {
	return o.ApplyT(func(v *User) UserLoginProfileOutput { return v.LoginProfile }).(UserLoginProfileOutput)
}

// 子用户对应的手机号。
func (o UserOutput) MobilePhone() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.MobilePhone }).(pulumi.StringOutput)
}

func (o UserOutput) Policies() UserPolicyArrayOutput {
	return o.ApplyT(func(v *User) UserPolicyArrayOutput { return v.Policies }).(UserPolicyArrayOutput)
}

// 子用户的操作保护配置。
func (o UserOutput) SecurityConfig() UserSecurityConfigOutput {
	return o.ApplyT(func(v *User) UserSecurityConfigOutput { return v.SecurityConfig }).(UserSecurityConfigOutput)
}

func (o UserOutput) Tags() UserTagArrayOutput {
	return o.ApplyT(func(v *User) UserTagArrayOutput { return v.Tags }).(UserTagArrayOutput)
}

// 子用户对应的Trn表达式。
func (o UserOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.Trn }).(pulumi.StringOutput)
}

// 子用户对应的更新时间。
func (o UserOutput) UpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UpdateDate }).(pulumi.StringOutput)
}

// 子用户的ID。
func (o UserOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *User) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

// 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
func (o UserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *User) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type UserArrayOutput struct{ *pulumi.OutputState }

func (UserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*User)(nil)).Elem()
}

func (o UserArrayOutput) ToUserArrayOutput() UserArrayOutput {
	return o
}

func (o UserArrayOutput) ToUserArrayOutputWithContext(ctx context.Context) UserArrayOutput {
	return o
}

func (o UserArrayOutput) Index(i pulumi.IntInput) UserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *User {
		return vs[0].([]*User)[vs[1].(int)]
	}).(UserOutput)
}

type UserMapOutput struct{ *pulumi.OutputState }

func (UserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*User)(nil)).Elem()
}

func (o UserMapOutput) ToUserMapOutput() UserMapOutput {
	return o
}

func (o UserMapOutput) ToUserMapOutputWithContext(ctx context.Context) UserMapOutput {
	return o
}

func (o UserMapOutput) MapIndex(k pulumi.StringInput) UserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *User {
		return vs[0].(map[string]*User)[vs[1].(string)]
	}).(UserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserInput)(nil)).Elem(), &User{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserArrayInput)(nil)).Elem(), UserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserMapInput)(nil)).Elem(), UserMap{})
	pulumi.RegisterOutputType(UserOutput{})
	pulumi.RegisterOutputType(UserArrayOutput{})
	pulumi.RegisterOutputType(UserMapOutput{})
}
