// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 策略是对权限的一种描述，IAM用户、用户组或角色均需通过关联策略来赋予权限。当系统预设策略不能满足要求时，您可以创建自定义策略，对权限进行细粒度的定义。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:iam/policy:Policy example "policy_name|policy_type"
// ```
type Policy struct {
	pulumi.CustomResourceState

	// 策略绑定的身份数量。
	AttachmentCount pulumi.IntOutput `pulumi:"attachmentCount"`
	// 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
	Category pulumi.StringOutput `pulumi:"category"`
	// 策略创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 策略描述，长度不超过128。
	Description pulumi.StringOutput `pulumi:"description"`
	// 是否是服务关联角色的策略，0代表否，1代表是。
	IsServiceRolePolicy pulumi.IntOutput `pulumi:"isServiceRolePolicy"`
	// 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
	PolicyDocument pulumi.StringOutput `pulumi:"policyDocument"`
	// 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName  pulumi.StringOutput         `pulumi:"policyName"`
	PolicyRoles PolicyPolicyRoleArrayOutput `pulumi:"policyRoles"`
	// 策略的TRN。
	PolicyTrn pulumi.StringOutput `pulumi:"policyTrn"`
	// 策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType       pulumi.StringOutput              `pulumi:"policyType"`
	PolicyUserGroups PolicyPolicyUserGroupArrayOutput `pulumi:"policyUserGroups"`
	PolicyUsers      PolicyPolicyUserArrayOutput      `pulumi:"policyUsers"`
	// 策略更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyDocument == nil {
		return nil, errors.New("invalid value for required argument 'PolicyDocument'")
	}
	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("volcenginecc:iam/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("volcenginecc:iam/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// 策略绑定的身份数量。
	AttachmentCount *int `pulumi:"attachmentCount"`
	// 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
	Category *string `pulumi:"category"`
	// 策略创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 策略描述，长度不超过128。
	Description *string `pulumi:"description"`
	// 是否是服务关联角色的策略，0代表否，1代表是。
	IsServiceRolePolicy *int `pulumi:"isServiceRolePolicy"`
	// 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
	PolicyDocument *string `pulumi:"policyDocument"`
	// 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName  *string            `pulumi:"policyName"`
	PolicyRoles []PolicyPolicyRole `pulumi:"policyRoles"`
	// 策略的TRN。
	PolicyTrn *string `pulumi:"policyTrn"`
	// 策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType       *string                 `pulumi:"policyType"`
	PolicyUserGroups []PolicyPolicyUserGroup `pulumi:"policyUserGroups"`
	PolicyUsers      []PolicyPolicyUser      `pulumi:"policyUsers"`
	// 策略更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
}

type PolicyState struct {
	// 策略绑定的身份数量。
	AttachmentCount pulumi.IntPtrInput
	// 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
	Category pulumi.StringPtrInput
	// 策略创建时间。
	CreatedTime pulumi.StringPtrInput
	// 策略描述，长度不超过128。
	Description pulumi.StringPtrInput
	// 是否是服务关联角色的策略，0代表否，1代表是。
	IsServiceRolePolicy pulumi.IntPtrInput
	// 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
	PolicyDocument pulumi.StringPtrInput
	// 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName  pulumi.StringPtrInput
	PolicyRoles PolicyPolicyRoleArrayInput
	// 策略的TRN。
	PolicyTrn pulumi.StringPtrInput
	// 策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType       pulumi.StringPtrInput
	PolicyUserGroups PolicyPolicyUserGroupArrayInput
	PolicyUsers      PolicyPolicyUserArrayInput
	// 策略更新时间。
	UpdatedTime pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
	Category *string `pulumi:"category"`
	// 策略描述，长度不超过128。
	Description *string `pulumi:"description"`
	// 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
	PolicyDocument string `pulumi:"policyDocument"`
	// 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName  string             `pulumi:"policyName"`
	PolicyRoles []PolicyPolicyRole `pulumi:"policyRoles"`
	// 策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType       string                  `pulumi:"policyType"`
	PolicyUserGroups []PolicyPolicyUserGroup `pulumi:"policyUserGroups"`
	PolicyUsers      []PolicyPolicyUser      `pulumi:"policyUsers"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
	Category pulumi.StringPtrInput
	// 策略描述，长度不超过128。
	Description pulumi.StringPtrInput
	// 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
	PolicyDocument pulumi.StringInput
	// 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
	PolicyName  pulumi.StringInput
	PolicyRoles PolicyPolicyRoleArrayInput
	// 策略类型。System代表系统预设策略，Custom代表自定义策略。
	PolicyType       pulumi.StringInput
	PolicyUserGroups PolicyPolicyUserGroupArrayInput
	PolicyUsers      PolicyPolicyUserArrayInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// 策略绑定的身份数量。
func (o PolicyOutput) AttachmentCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.AttachmentCount }).(pulumi.IntOutput)
}

// 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
func (o PolicyOutput) Category() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Category }).(pulumi.StringOutput)
}

// 策略创建时间。
func (o PolicyOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 策略描述，长度不超过128。
func (o PolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 是否是服务关联角色的策略，0代表否，1代表是。
func (o PolicyOutput) IsServiceRolePolicy() pulumi.IntOutput {
	return o.ApplyT(func(v *Policy) pulumi.IntOutput { return v.IsServiceRolePolicy }).(pulumi.IntOutput)
}

// 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
func (o PolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyDocument }).(pulumi.StringOutput)
}

// 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
func (o PolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

func (o PolicyOutput) PolicyRoles() PolicyPolicyRoleArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyPolicyRoleArrayOutput { return v.PolicyRoles }).(PolicyPolicyRoleArrayOutput)
}

// 策略的TRN。
func (o PolicyOutput) PolicyTrn() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyTrn }).(pulumi.StringOutput)
}

// 策略类型。System代表系统预设策略，Custom代表自定义策略。
func (o PolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

func (o PolicyOutput) PolicyUserGroups() PolicyPolicyUserGroupArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyPolicyUserGroupArrayOutput { return v.PolicyUserGroups }).(PolicyPolicyUserGroupArrayOutput)
}

func (o PolicyOutput) PolicyUsers() PolicyPolicyUserArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyPolicyUserArrayOutput { return v.PolicyUsers }).(PolicyPolicyUserArrayOutput)
}

// 策略更新时间。
func (o PolicyOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
