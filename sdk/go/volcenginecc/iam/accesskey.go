// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewAccesskey(ctx, "AccesskeyDemo", &iam.AccesskeyArgs{
//				UserName: pulumi.String("s2222"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:iam/accesskey:Accesskey example "access_key_id|user_name"
// ```
type Accesskey struct {
	pulumi.CustomResourceState

	// 密钥ID（Access Key Id）。
	AccessKeyId pulumi.StringOutput `pulumi:"accessKeyId"`
	// 密钥创建时间
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// API密钥最后访问的地域。
	Region pulumi.StringOutput `pulumi:"region"`
	// API密钥的最后使用的时间。
	RequestTime pulumi.StringOutput `pulumi:"requestTime"`
	// 私有密钥（Secret Access Key）。
	SecretAccessKey pulumi.StringOutput `pulumi:"secretAccessKey"`
	// API密钥最后访问的服务的英文简称。
	Service pulumi.StringOutput `pulumi:"service"`
	// 密钥状态 (active/inactive)
	Status pulumi.StringOutput `pulumi:"status"`
	// 密钥更新时间
	UpdateDate pulumi.StringOutput `pulumi:"updateDate"`
	// 用户名
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewAccesskey registers a new resource with the given unique name, arguments, and options.
func NewAccesskey(ctx *pulumi.Context,
	name string, args *AccesskeyArgs, opts ...pulumi.ResourceOption) (*Accesskey, error) {
	if args == nil {
		args = &AccesskeyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Accesskey
	err := ctx.RegisterResource("volcenginecc:iam/accesskey:Accesskey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccesskey gets an existing Accesskey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccesskey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccesskeyState, opts ...pulumi.ResourceOption) (*Accesskey, error) {
	var resource Accesskey
	err := ctx.ReadResource("volcenginecc:iam/accesskey:Accesskey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Accesskey resources.
type accesskeyState struct {
	// 密钥ID（Access Key Id）。
	AccessKeyId *string `pulumi:"accessKeyId"`
	// 密钥创建时间
	CreateDate *string `pulumi:"createDate"`
	// API密钥最后访问的地域。
	Region *string `pulumi:"region"`
	// API密钥的最后使用的时间。
	RequestTime *string `pulumi:"requestTime"`
	// 私有密钥（Secret Access Key）。
	SecretAccessKey *string `pulumi:"secretAccessKey"`
	// API密钥最后访问的服务的英文简称。
	Service *string `pulumi:"service"`
	// 密钥状态 (active/inactive)
	Status *string `pulumi:"status"`
	// 密钥更新时间
	UpdateDate *string `pulumi:"updateDate"`
	// 用户名
	UserName *string `pulumi:"userName"`
}

type AccesskeyState struct {
	// 密钥ID（Access Key Id）。
	AccessKeyId pulumi.StringPtrInput
	// 密钥创建时间
	CreateDate pulumi.StringPtrInput
	// API密钥最后访问的地域。
	Region pulumi.StringPtrInput
	// API密钥的最后使用的时间。
	RequestTime pulumi.StringPtrInput
	// 私有密钥（Secret Access Key）。
	SecretAccessKey pulumi.StringPtrInput
	// API密钥最后访问的服务的英文简称。
	Service pulumi.StringPtrInput
	// 密钥状态 (active/inactive)
	Status pulumi.StringPtrInput
	// 密钥更新时间
	UpdateDate pulumi.StringPtrInput
	// 用户名
	UserName pulumi.StringPtrInput
}

func (AccesskeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*accesskeyState)(nil)).Elem()
}

type accesskeyArgs struct {
	// 密钥ID（Access Key Id）。
	AccessKeyId *string `pulumi:"accessKeyId"`
	// 密钥状态 (active/inactive)
	Status *string `pulumi:"status"`
	// 用户名
	UserName *string `pulumi:"userName"`
}

// The set of arguments for constructing a Accesskey resource.
type AccesskeyArgs struct {
	// 密钥ID（Access Key Id）。
	AccessKeyId pulumi.StringPtrInput
	// 密钥状态 (active/inactive)
	Status pulumi.StringPtrInput
	// 用户名
	UserName pulumi.StringPtrInput
}

func (AccesskeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accesskeyArgs)(nil)).Elem()
}

type AccesskeyInput interface {
	pulumi.Input

	ToAccesskeyOutput() AccesskeyOutput
	ToAccesskeyOutputWithContext(ctx context.Context) AccesskeyOutput
}

func (*Accesskey) ElementType() reflect.Type {
	return reflect.TypeOf((**Accesskey)(nil)).Elem()
}

func (i *Accesskey) ToAccesskeyOutput() AccesskeyOutput {
	return i.ToAccesskeyOutputWithContext(context.Background())
}

func (i *Accesskey) ToAccesskeyOutputWithContext(ctx context.Context) AccesskeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesskeyOutput)
}

// AccesskeyArrayInput is an input type that accepts AccesskeyArray and AccesskeyArrayOutput values.
// You can construct a concrete instance of `AccesskeyArrayInput` via:
//
//	AccesskeyArray{ AccesskeyArgs{...} }
type AccesskeyArrayInput interface {
	pulumi.Input

	ToAccesskeyArrayOutput() AccesskeyArrayOutput
	ToAccesskeyArrayOutputWithContext(context.Context) AccesskeyArrayOutput
}

type AccesskeyArray []AccesskeyInput

func (AccesskeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Accesskey)(nil)).Elem()
}

func (i AccesskeyArray) ToAccesskeyArrayOutput() AccesskeyArrayOutput {
	return i.ToAccesskeyArrayOutputWithContext(context.Background())
}

func (i AccesskeyArray) ToAccesskeyArrayOutputWithContext(ctx context.Context) AccesskeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesskeyArrayOutput)
}

// AccesskeyMapInput is an input type that accepts AccesskeyMap and AccesskeyMapOutput values.
// You can construct a concrete instance of `AccesskeyMapInput` via:
//
//	AccesskeyMap{ "key": AccesskeyArgs{...} }
type AccesskeyMapInput interface {
	pulumi.Input

	ToAccesskeyMapOutput() AccesskeyMapOutput
	ToAccesskeyMapOutputWithContext(context.Context) AccesskeyMapOutput
}

type AccesskeyMap map[string]AccesskeyInput

func (AccesskeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Accesskey)(nil)).Elem()
}

func (i AccesskeyMap) ToAccesskeyMapOutput() AccesskeyMapOutput {
	return i.ToAccesskeyMapOutputWithContext(context.Background())
}

func (i AccesskeyMap) ToAccesskeyMapOutputWithContext(ctx context.Context) AccesskeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccesskeyMapOutput)
}

type AccesskeyOutput struct{ *pulumi.OutputState }

func (AccesskeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Accesskey)(nil)).Elem()
}

func (o AccesskeyOutput) ToAccesskeyOutput() AccesskeyOutput {
	return o
}

func (o AccesskeyOutput) ToAccesskeyOutputWithContext(ctx context.Context) AccesskeyOutput {
	return o
}

// 密钥ID（Access Key Id）。
func (o AccesskeyOutput) AccessKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.AccessKeyId }).(pulumi.StringOutput)
}

// 密钥创建时间
func (o AccesskeyOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// API密钥最后访问的地域。
func (o AccesskeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// API密钥的最后使用的时间。
func (o AccesskeyOutput) RequestTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.RequestTime }).(pulumi.StringOutput)
}

// 私有密钥（Secret Access Key）。
func (o AccesskeyOutput) SecretAccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.SecretAccessKey }).(pulumi.StringOutput)
}

// API密钥最后访问的服务的英文简称。
func (o AccesskeyOutput) Service() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.Service }).(pulumi.StringOutput)
}

// 密钥状态 (active/inactive)
func (o AccesskeyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 密钥更新时间
func (o AccesskeyOutput) UpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.UpdateDate }).(pulumi.StringOutput)
}

// 用户名
func (o AccesskeyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Accesskey) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type AccesskeyArrayOutput struct{ *pulumi.OutputState }

func (AccesskeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Accesskey)(nil)).Elem()
}

func (o AccesskeyArrayOutput) ToAccesskeyArrayOutput() AccesskeyArrayOutput {
	return o
}

func (o AccesskeyArrayOutput) ToAccesskeyArrayOutputWithContext(ctx context.Context) AccesskeyArrayOutput {
	return o
}

func (o AccesskeyArrayOutput) Index(i pulumi.IntInput) AccesskeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Accesskey {
		return vs[0].([]*Accesskey)[vs[1].(int)]
	}).(AccesskeyOutput)
}

type AccesskeyMapOutput struct{ *pulumi.OutputState }

func (AccesskeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Accesskey)(nil)).Elem()
}

func (o AccesskeyMapOutput) ToAccesskeyMapOutput() AccesskeyMapOutput {
	return o
}

func (o AccesskeyMapOutput) ToAccesskeyMapOutputWithContext(ctx context.Context) AccesskeyMapOutput {
	return o
}

func (o AccesskeyMapOutput) MapIndex(k pulumi.StringInput) AccesskeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Accesskey {
		return vs[0].(map[string]*Accesskey)[vs[1].(string)]
	}).(AccesskeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccesskeyInput)(nil)).Elem(), &Accesskey{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesskeyArrayInput)(nil)).Elem(), AccesskeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccesskeyMapInput)(nil)).Elem(), AccesskeyMap{})
	pulumi.RegisterOutputType(AccesskeyOutput{})
	pulumi.RegisterOutputType(AccesskeyArrayOutput{})
	pulumi.RegisterOutputType(AccesskeyMapOutput{})
}
