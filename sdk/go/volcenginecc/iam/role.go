// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 角色（Role）是IAM体系里的一种虚拟身份，用于将账号内某些访问权限授予给各类身份实体，受信任的身份实体可扮演该角色来访问账号内的云资源。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewRole(ctx, "RoleDemo", &iam.RoleArgs{
//				RoleName:           pulumi.String("RoleDemo"),
//				Description:        pulumi.String("role attach policies"),
//				MaxSessionDuration: pulumi.Int(3600),
//				TrustPolicyDocument: pulumi.String(`{
//	    "Statement": [
//	        {
//	            "Effect": "Allow",
//	            "Action": [
//	                "sts:AssumeRole"
//	            ],
//	            "Principal": {
//	                "IAM": [
//	                    "trn:iam::20000000xx:root"
//	                ]
//	            }
//	        }
//	    ]
//	}`),
//
//				Tags: iam.RoleTagArray{
//					&iam.RoleTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:iam/role:Role example "role_name"
// ```
type Role struct {
	pulumi.CustomResourceState

	// 角色创建时间。
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// 角色描述，长度不超过128。
	Description pulumi.StringOutput `pulumi:"description"`
	// 角色显示名，长度不超过64。
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// 是否是服务关联角色, 0否，1是。
	IsServiceLinkedRole pulumi.IntOutput `pulumi:"isServiceLinkedRole"`
	// 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
	MaxSessionDuration pulumi.IntOutput      `pulumi:"maxSessionDuration"`
	Policies           RolePolicyArrayOutput `pulumi:"policies"`
	// 角色ID。
	RoleId pulumi.IntOutput `pulumi:"roleId"`
	// 角色名，长度1~64，支持英文、数字和.-_符号。
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	Tags     RoleTagArrayOutput  `pulumi:"tags"`
	// 角色TRN。
	Trn pulumi.StringOutput `pulumi:"trn"`
	// 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
	TrustPolicyDocument pulumi.StringOutput `pulumi:"trustPolicyDocument"`
	// 角色更新时间。
	UpdateDate pulumi.StringOutput `pulumi:"updateDate"`
}

// NewRole registers a new resource with the given unique name, arguments, and options.
func NewRole(ctx *pulumi.Context,
	name string, args *RoleArgs, opts ...pulumi.ResourceOption) (*Role, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Role
	err := ctx.RegisterResource("volcenginecc:iam/role:Role", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRole gets an existing Role resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleState, opts ...pulumi.ResourceOption) (*Role, error) {
	var resource Role
	err := ctx.ReadResource("volcenginecc:iam/role:Role", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Role resources.
type roleState struct {
	// 角色创建时间。
	CreateDate *string `pulumi:"createDate"`
	// 角色描述，长度不超过128。
	Description *string `pulumi:"description"`
	// 角色显示名，长度不超过64。
	DisplayName *string `pulumi:"displayName"`
	// 是否是服务关联角色, 0否，1是。
	IsServiceLinkedRole *int `pulumi:"isServiceLinkedRole"`
	// 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
	MaxSessionDuration *int         `pulumi:"maxSessionDuration"`
	Policies           []RolePolicy `pulumi:"policies"`
	// 角色ID。
	RoleId *int `pulumi:"roleId"`
	// 角色名，长度1~64，支持英文、数字和.-_符号。
	RoleName *string   `pulumi:"roleName"`
	Tags     []RoleTag `pulumi:"tags"`
	// 角色TRN。
	Trn *string `pulumi:"trn"`
	// 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
	TrustPolicyDocument *string `pulumi:"trustPolicyDocument"`
	// 角色更新时间。
	UpdateDate *string `pulumi:"updateDate"`
}

type RoleState struct {
	// 角色创建时间。
	CreateDate pulumi.StringPtrInput
	// 角色描述，长度不超过128。
	Description pulumi.StringPtrInput
	// 角色显示名，长度不超过64。
	DisplayName pulumi.StringPtrInput
	// 是否是服务关联角色, 0否，1是。
	IsServiceLinkedRole pulumi.IntPtrInput
	// 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
	MaxSessionDuration pulumi.IntPtrInput
	Policies           RolePolicyArrayInput
	// 角色ID。
	RoleId pulumi.IntPtrInput
	// 角色名，长度1~64，支持英文、数字和.-_符号。
	RoleName pulumi.StringPtrInput
	Tags     RoleTagArrayInput
	// 角色TRN。
	Trn pulumi.StringPtrInput
	// 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
	TrustPolicyDocument pulumi.StringPtrInput
	// 角色更新时间。
	UpdateDate pulumi.StringPtrInput
}

func (RoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleState)(nil)).Elem()
}

type roleArgs struct {
	// 角色描述，长度不超过128。
	Description *string `pulumi:"description"`
	// 角色显示名，长度不超过64。
	DisplayName *string `pulumi:"displayName"`
	// 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
	MaxSessionDuration *int         `pulumi:"maxSessionDuration"`
	Policies           []RolePolicy `pulumi:"policies"`
	// 角色名，长度1~64，支持英文、数字和.-_符号。
	RoleName string    `pulumi:"roleName"`
	Tags     []RoleTag `pulumi:"tags"`
	// 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
	TrustPolicyDocument *string `pulumi:"trustPolicyDocument"`
}

// The set of arguments for constructing a Role resource.
type RoleArgs struct {
	// 角色描述，长度不超过128。
	Description pulumi.StringPtrInput
	// 角色显示名，长度不超过64。
	DisplayName pulumi.StringPtrInput
	// 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
	MaxSessionDuration pulumi.IntPtrInput
	Policies           RolePolicyArrayInput
	// 角色名，长度1~64，支持英文、数字和.-_符号。
	RoleName pulumi.StringInput
	Tags     RoleTagArrayInput
	// 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
	TrustPolicyDocument pulumi.StringPtrInput
}

func (RoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleArgs)(nil)).Elem()
}

type RoleInput interface {
	pulumi.Input

	ToRoleOutput() RoleOutput
	ToRoleOutputWithContext(ctx context.Context) RoleOutput
}

func (*Role) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (i *Role) ToRoleOutput() RoleOutput {
	return i.ToRoleOutputWithContext(context.Background())
}

func (i *Role) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleOutput)
}

// RoleArrayInput is an input type that accepts RoleArray and RoleArrayOutput values.
// You can construct a concrete instance of `RoleArrayInput` via:
//
//	RoleArray{ RoleArgs{...} }
type RoleArrayInput interface {
	pulumi.Input

	ToRoleArrayOutput() RoleArrayOutput
	ToRoleArrayOutputWithContext(context.Context) RoleArrayOutput
}

type RoleArray []RoleInput

func (RoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (i RoleArray) ToRoleArrayOutput() RoleArrayOutput {
	return i.ToRoleArrayOutputWithContext(context.Background())
}

func (i RoleArray) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleArrayOutput)
}

// RoleMapInput is an input type that accepts RoleMap and RoleMapOutput values.
// You can construct a concrete instance of `RoleMapInput` via:
//
//	RoleMap{ "key": RoleArgs{...} }
type RoleMapInput interface {
	pulumi.Input

	ToRoleMapOutput() RoleMapOutput
	ToRoleMapOutputWithContext(context.Context) RoleMapOutput
}

type RoleMap map[string]RoleInput

func (RoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (i RoleMap) ToRoleMapOutput() RoleMapOutput {
	return i.ToRoleMapOutputWithContext(context.Background())
}

func (i RoleMap) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleMapOutput)
}

type RoleOutput struct{ *pulumi.OutputState }

func (RoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Role)(nil)).Elem()
}

func (o RoleOutput) ToRoleOutput() RoleOutput {
	return o
}

func (o RoleOutput) ToRoleOutputWithContext(ctx context.Context) RoleOutput {
	return o
}

// 角色创建时间。
func (o RoleOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// 角色描述，长度不超过128。
func (o RoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 角色显示名，长度不超过64。
func (o RoleOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.DisplayName }).(pulumi.StringOutput)
}

// 是否是服务关联角色, 0否，1是。
func (o RoleOutput) IsServiceLinkedRole() pulumi.IntOutput {
	return o.ApplyT(func(v *Role) pulumi.IntOutput { return v.IsServiceLinkedRole }).(pulumi.IntOutput)
}

// 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
func (o RoleOutput) MaxSessionDuration() pulumi.IntOutput {
	return o.ApplyT(func(v *Role) pulumi.IntOutput { return v.MaxSessionDuration }).(pulumi.IntOutput)
}

func (o RoleOutput) Policies() RolePolicyArrayOutput {
	return o.ApplyT(func(v *Role) RolePolicyArrayOutput { return v.Policies }).(RolePolicyArrayOutput)
}

// 角色ID。
func (o RoleOutput) RoleId() pulumi.IntOutput {
	return o.ApplyT(func(v *Role) pulumi.IntOutput { return v.RoleId }).(pulumi.IntOutput)
}

// 角色名，长度1~64，支持英文、数字和.-_符号。
func (o RoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

func (o RoleOutput) Tags() RoleTagArrayOutput {
	return o.ApplyT(func(v *Role) RoleTagArrayOutput { return v.Tags }).(RoleTagArrayOutput)
}

// 角色TRN。
func (o RoleOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.Trn }).(pulumi.StringOutput)
}

// 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
func (o RoleOutput) TrustPolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.TrustPolicyDocument }).(pulumi.StringOutput)
}

// 角色更新时间。
func (o RoleOutput) UpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Role) pulumi.StringOutput { return v.UpdateDate }).(pulumi.StringOutput)
}

type RoleArrayOutput struct{ *pulumi.OutputState }

func (RoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Role)(nil)).Elem()
}

func (o RoleArrayOutput) ToRoleArrayOutput() RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) ToRoleArrayOutputWithContext(ctx context.Context) RoleArrayOutput {
	return o
}

func (o RoleArrayOutput) Index(i pulumi.IntInput) RoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Role {
		return vs[0].([]*Role)[vs[1].(int)]
	}).(RoleOutput)
}

type RoleMapOutput struct{ *pulumi.OutputState }

func (RoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Role)(nil)).Elem()
}

func (o RoleMapOutput) ToRoleMapOutput() RoleMapOutput {
	return o
}

func (o RoleMapOutput) ToRoleMapOutputWithContext(ctx context.Context) RoleMapOutput {
	return o
}

func (o RoleMapOutput) MapIndex(k pulumi.StringInput) RoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Role {
		return vs[0].(map[string]*Role)[vs[1].(string)]
	}).(RoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleInput)(nil)).Elem(), &Role{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleArrayInput)(nil)).Elem(), RoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleMapInput)(nil)).Elem(), RoleMap{})
	pulumi.RegisterOutputType(RoleOutput{})
	pulumi.RegisterOutputType(RoleArrayOutput{})
	pulumi.RegisterOutputType(RoleMapOutput{})
}
