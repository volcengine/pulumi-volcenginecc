// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::TOS::Bucket
func LookupBucket(ctx *pulumi.Context, args *LookupBucketArgs, opts ...pulumi.InvokeOption) (*LookupBucketResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBucketResult
	err := ctx.Invoke("volcenginecc:tos/getBucket:getBucket", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBucket.
type LookupBucketArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getBucket.
type LookupBucketResult struct {
	// 桶的访问控制权限。
	Acl      GetBucketAcl      `pulumi:"acl"`
	AclGrant GetBucketAclGrant `pulumi:"aclGrant"`
	// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
	AzRedundancy string `pulumi:"azRedundancy"`
	// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
	BucketType string `pulumi:"bucketType"`
	// 桶的创建时间。
	CreationDate string `pulumi:"creationDate"`
	// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
	EnableVersionStatus string `pulumi:"enableVersionStatus"`
	// 存储桶的 TOS 协议公网访问域名。
	ExtranetEndpoint string `pulumi:"extranetEndpoint"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 存储桶的 TOS 协议私网访问域名
	IntranetEndpoint string `pulumi:"intranetEndpoint"`
	// 存储桶的声明周期。
	LifecycleConfigs []GetBucketLifecycleConfig `pulumi:"lifecycleConfigs"`
	// 桶所在区域。
	Location string `pulumi:"location"`
	// 桶名。
	Name string `pulumi:"name"`
	// 存储桶所属项目。
	ProjectName string `pulumi:"projectName"`
	// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
	StorageClass string `pulumi:"storageClass"`
	// 存储桶的标签信息。
	Tags []GetBucketTag `pulumi:"tags"`
}

func LookupBucketOutput(ctx *pulumi.Context, args LookupBucketOutputArgs, opts ...pulumi.InvokeOption) LookupBucketResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupBucketResultOutput, error) {
			args := v.(LookupBucketArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:tos/getBucket:getBucket", args, LookupBucketResultOutput{}, options).(LookupBucketResultOutput), nil
		}).(LookupBucketResultOutput)
}

// A collection of arguments for invoking getBucket.
type LookupBucketOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupBucketOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBucketArgs)(nil)).Elem()
}

// A collection of values returned by getBucket.
type LookupBucketResultOutput struct{ *pulumi.OutputState }

func (LookupBucketResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBucketResult)(nil)).Elem()
}

func (o LookupBucketResultOutput) ToLookupBucketResultOutput() LookupBucketResultOutput {
	return o
}

func (o LookupBucketResultOutput) ToLookupBucketResultOutputWithContext(ctx context.Context) LookupBucketResultOutput {
	return o
}

// 桶的访问控制权限。
func (o LookupBucketResultOutput) Acl() GetBucketAclOutput {
	return o.ApplyT(func(v LookupBucketResult) GetBucketAcl { return v.Acl }).(GetBucketAclOutput)
}

func (o LookupBucketResultOutput) AclGrant() GetBucketAclGrantOutput {
	return o.ApplyT(func(v LookupBucketResult) GetBucketAclGrant { return v.AclGrant }).(GetBucketAclGrantOutput)
}

// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
func (o LookupBucketResultOutput) AzRedundancy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.AzRedundancy }).(pulumi.StringOutput)
}

// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
func (o LookupBucketResultOutput) BucketType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.BucketType }).(pulumi.StringOutput)
}

// 桶的创建时间。
func (o LookupBucketResultOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.CreationDate }).(pulumi.StringOutput)
}

// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
func (o LookupBucketResultOutput) EnableVersionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.EnableVersionStatus }).(pulumi.StringOutput)
}

// 存储桶的 TOS 协议公网访问域名。
func (o LookupBucketResultOutput) ExtranetEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.ExtranetEndpoint }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupBucketResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Id }).(pulumi.StringOutput)
}

// 存储桶的 TOS 协议私网访问域名
func (o LookupBucketResultOutput) IntranetEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.IntranetEndpoint }).(pulumi.StringOutput)
}

// 存储桶的声明周期。
func (o LookupBucketResultOutput) LifecycleConfigs() GetBucketLifecycleConfigArrayOutput {
	return o.ApplyT(func(v LookupBucketResult) []GetBucketLifecycleConfig { return v.LifecycleConfigs }).(GetBucketLifecycleConfigArrayOutput)
}

// 桶所在区域。
func (o LookupBucketResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Location }).(pulumi.StringOutput)
}

// 桶名。
func (o LookupBucketResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.Name }).(pulumi.StringOutput)
}

// 存储桶所属项目。
func (o LookupBucketResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
func (o LookupBucketResultOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBucketResult) string { return v.StorageClass }).(pulumi.StringOutput)
}

// 存储桶的标签信息。
func (o LookupBucketResultOutput) Tags() GetBucketTagArrayOutput {
	return o.ApplyT(func(v LookupBucketResult) []GetBucketTag { return v.Tags }).(GetBucketTagArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBucketResultOutput{})
}
