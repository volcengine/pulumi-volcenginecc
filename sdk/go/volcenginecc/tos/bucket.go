// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:tos/bucket:Bucket example "name"
// ```
type Bucket struct {
	pulumi.CustomResourceState

	// 桶的访问控制权限。
	Acl      BucketAclOutput      `pulumi:"acl"`
	AclGrant BucketAclGrantOutput `pulumi:"aclGrant"`
	// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
	AzRedundancy pulumi.StringOutput `pulumi:"azRedundancy"`
	// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
	BucketType pulumi.StringOutput `pulumi:"bucketType"`
	// 桶的创建时间。
	CreationDate pulumi.StringOutput `pulumi:"creationDate"`
	// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
	EnableVersionStatus pulumi.StringOutput `pulumi:"enableVersionStatus"`
	// 存储桶的 TOS 协议公网访问域名。
	ExtranetEndpoint pulumi.StringOutput `pulumi:"extranetEndpoint"`
	// 存储桶的 TOS 协议私网访问域名
	IntranetEndpoint pulumi.StringOutput              `pulumi:"intranetEndpoint"`
	LifecycleConfigs BucketLifecycleConfigArrayOutput `pulumi:"lifecycleConfigs"`
	// 桶所在区域。
	Location pulumi.StringOutput `pulumi:"location"`
	// 桶名。
	Name pulumi.StringOutput `pulumi:"name"`
	// 存储桶所属项目。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
	StorageClass pulumi.StringOutput  `pulumi:"storageClass"`
	Tags         BucketTagArrayOutput `pulumi:"tags"`
}

// NewBucket registers a new resource with the given unique name, arguments, and options.
func NewBucket(ctx *pulumi.Context,
	name string, args *BucketArgs, opts ...pulumi.ResourceOption) (*Bucket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bucket
	err := ctx.RegisterResource("volcenginecc:tos/bucket:Bucket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucket gets an existing Bucket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketState, opts ...pulumi.ResourceOption) (*Bucket, error) {
	var resource Bucket
	err := ctx.ReadResource("volcenginecc:tos/bucket:Bucket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bucket resources.
type bucketState struct {
	// 桶的访问控制权限。
	Acl      *BucketAcl      `pulumi:"acl"`
	AclGrant *BucketAclGrant `pulumi:"aclGrant"`
	// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
	AzRedundancy *string `pulumi:"azRedundancy"`
	// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
	BucketType *string `pulumi:"bucketType"`
	// 桶的创建时间。
	CreationDate *string `pulumi:"creationDate"`
	// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
	EnableVersionStatus *string `pulumi:"enableVersionStatus"`
	// 存储桶的 TOS 协议公网访问域名。
	ExtranetEndpoint *string `pulumi:"extranetEndpoint"`
	// 存储桶的 TOS 协议私网访问域名
	IntranetEndpoint *string                 `pulumi:"intranetEndpoint"`
	LifecycleConfigs []BucketLifecycleConfig `pulumi:"lifecycleConfigs"`
	// 桶所在区域。
	Location *string `pulumi:"location"`
	// 桶名。
	Name *string `pulumi:"name"`
	// 存储桶所属项目。
	ProjectName *string `pulumi:"projectName"`
	// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
	StorageClass *string     `pulumi:"storageClass"`
	Tags         []BucketTag `pulumi:"tags"`
}

type BucketState struct {
	// 桶的访问控制权限。
	Acl      BucketAclPtrInput
	AclGrant BucketAclGrantPtrInput
	// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
	AzRedundancy pulumi.StringPtrInput
	// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
	BucketType pulumi.StringPtrInput
	// 桶的创建时间。
	CreationDate pulumi.StringPtrInput
	// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
	EnableVersionStatus pulumi.StringPtrInput
	// 存储桶的 TOS 协议公网访问域名。
	ExtranetEndpoint pulumi.StringPtrInput
	// 存储桶的 TOS 协议私网访问域名
	IntranetEndpoint pulumi.StringPtrInput
	LifecycleConfigs BucketLifecycleConfigArrayInput
	// 桶所在区域。
	Location pulumi.StringPtrInput
	// 桶名。
	Name pulumi.StringPtrInput
	// 存储桶所属项目。
	ProjectName pulumi.StringPtrInput
	// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
	StorageClass pulumi.StringPtrInput
	Tags         BucketTagArrayInput
}

func (BucketState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketState)(nil)).Elem()
}

type bucketArgs struct {
	// 桶的访问控制权限。
	Acl      *BucketAcl      `pulumi:"acl"`
	AclGrant *BucketAclGrant `pulumi:"aclGrant"`
	// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
	AzRedundancy *string `pulumi:"azRedundancy"`
	// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
	BucketType *string `pulumi:"bucketType"`
	// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
	EnableVersionStatus *string                 `pulumi:"enableVersionStatus"`
	LifecycleConfigs    []BucketLifecycleConfig `pulumi:"lifecycleConfigs"`
	// 桶名。
	Name string `pulumi:"name"`
	// 存储桶所属项目。
	ProjectName *string `pulumi:"projectName"`
	// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
	StorageClass *string     `pulumi:"storageClass"`
	Tags         []BucketTag `pulumi:"tags"`
}

// The set of arguments for constructing a Bucket resource.
type BucketArgs struct {
	// 桶的访问控制权限。
	Acl      BucketAclPtrInput
	AclGrant BucketAclGrantPtrInput
	// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
	AzRedundancy pulumi.StringPtrInput
	// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
	BucketType pulumi.StringPtrInput
	// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
	EnableVersionStatus pulumi.StringPtrInput
	LifecycleConfigs    BucketLifecycleConfigArrayInput
	// 桶名。
	Name pulumi.StringInput
	// 存储桶所属项目。
	ProjectName pulumi.StringPtrInput
	// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
	StorageClass pulumi.StringPtrInput
	Tags         BucketTagArrayInput
}

func (BucketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketArgs)(nil)).Elem()
}

type BucketInput interface {
	pulumi.Input

	ToBucketOutput() BucketOutput
	ToBucketOutputWithContext(ctx context.Context) BucketOutput
}

func (*Bucket) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (i *Bucket) ToBucketOutput() BucketOutput {
	return i.ToBucketOutputWithContext(context.Background())
}

func (i *Bucket) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketOutput)
}

// BucketArrayInput is an input type that accepts BucketArray and BucketArrayOutput values.
// You can construct a concrete instance of `BucketArrayInput` via:
//
//	BucketArray{ BucketArgs{...} }
type BucketArrayInput interface {
	pulumi.Input

	ToBucketArrayOutput() BucketArrayOutput
	ToBucketArrayOutputWithContext(context.Context) BucketArrayOutput
}

type BucketArray []BucketInput

func (BucketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bucket)(nil)).Elem()
}

func (i BucketArray) ToBucketArrayOutput() BucketArrayOutput {
	return i.ToBucketArrayOutputWithContext(context.Background())
}

func (i BucketArray) ToBucketArrayOutputWithContext(ctx context.Context) BucketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketArrayOutput)
}

// BucketMapInput is an input type that accepts BucketMap and BucketMapOutput values.
// You can construct a concrete instance of `BucketMapInput` via:
//
//	BucketMap{ "key": BucketArgs{...} }
type BucketMapInput interface {
	pulumi.Input

	ToBucketMapOutput() BucketMapOutput
	ToBucketMapOutputWithContext(context.Context) BucketMapOutput
}

type BucketMap map[string]BucketInput

func (BucketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bucket)(nil)).Elem()
}

func (i BucketMap) ToBucketMapOutput() BucketMapOutput {
	return i.ToBucketMapOutputWithContext(context.Background())
}

func (i BucketMap) ToBucketMapOutputWithContext(ctx context.Context) BucketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketMapOutput)
}

type BucketOutput struct{ *pulumi.OutputState }

func (BucketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bucket)(nil)).Elem()
}

func (o BucketOutput) ToBucketOutput() BucketOutput {
	return o
}

func (o BucketOutput) ToBucketOutputWithContext(ctx context.Context) BucketOutput {
	return o
}

// 桶的访问控制权限。
func (o BucketOutput) Acl() BucketAclOutput {
	return o.ApplyT(func(v *Bucket) BucketAclOutput { return v.Acl }).(BucketAclOutput)
}

func (o BucketOutput) AclGrant() BucketAclGrantOutput {
	return o.ApplyT(func(v *Bucket) BucketAclGrantOutput { return v.AclGrant }).(BucketAclGrantOutput)
}

// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
func (o BucketOutput) AzRedundancy() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.AzRedundancy }).(pulumi.StringOutput)
}

// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
func (o BucketOutput) BucketType() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.BucketType }).(pulumi.StringOutput)
}

// 桶的创建时间。
func (o BucketOutput) CreationDate() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.CreationDate }).(pulumi.StringOutput)
}

// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
func (o BucketOutput) EnableVersionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.EnableVersionStatus }).(pulumi.StringOutput)
}

// 存储桶的 TOS 协议公网访问域名。
func (o BucketOutput) ExtranetEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.ExtranetEndpoint }).(pulumi.StringOutput)
}

// 存储桶的 TOS 协议私网访问域名
func (o BucketOutput) IntranetEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.IntranetEndpoint }).(pulumi.StringOutput)
}

func (o BucketOutput) LifecycleConfigs() BucketLifecycleConfigArrayOutput {
	return o.ApplyT(func(v *Bucket) BucketLifecycleConfigArrayOutput { return v.LifecycleConfigs }).(BucketLifecycleConfigArrayOutput)
}

// 桶所在区域。
func (o BucketOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// 桶名。
func (o BucketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 存储桶所属项目。
func (o BucketOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
func (o BucketOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v *Bucket) pulumi.StringOutput { return v.StorageClass }).(pulumi.StringOutput)
}

func (o BucketOutput) Tags() BucketTagArrayOutput {
	return o.ApplyT(func(v *Bucket) BucketTagArrayOutput { return v.Tags }).(BucketTagArrayOutput)
}

type BucketArrayOutput struct{ *pulumi.OutputState }

func (BucketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bucket)(nil)).Elem()
}

func (o BucketArrayOutput) ToBucketArrayOutput() BucketArrayOutput {
	return o
}

func (o BucketArrayOutput) ToBucketArrayOutputWithContext(ctx context.Context) BucketArrayOutput {
	return o
}

func (o BucketArrayOutput) Index(i pulumi.IntInput) BucketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bucket {
		return vs[0].([]*Bucket)[vs[1].(int)]
	}).(BucketOutput)
}

type BucketMapOutput struct{ *pulumi.OutputState }

func (BucketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bucket)(nil)).Elem()
}

func (o BucketMapOutput) ToBucketMapOutput() BucketMapOutput {
	return o
}

func (o BucketMapOutput) ToBucketMapOutputWithContext(ctx context.Context) BucketMapOutput {
	return o
}

func (o BucketMapOutput) MapIndex(k pulumi.StringInput) BucketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bucket {
		return vs[0].(map[string]*Bucket)[vs[1].(string)]
	}).(BucketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketInput)(nil)).Elem(), &Bucket{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketArrayInput)(nil)).Elem(), BucketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketMapInput)(nil)).Elem(), BucketMap{})
	pulumi.RegisterOutputType(BucketOutput{})
	pulumi.RegisterOutputType(BucketArrayOutput{})
	pulumi.RegisterOutputType(BucketMapOutput{})
}
