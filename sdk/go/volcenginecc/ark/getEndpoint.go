// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ark

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::ARK::Endpoint
func LookupEndpoint(ctx *pulumi.Context, args *LookupEndpointArgs, opts ...pulumi.InvokeOption) (*LookupEndpointResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEndpointResult
	err := ctx.Invoke("volcenginecc:ark/getEndpoint:getEndpoint", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEndpoint.
type LookupEndpointArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getEndpoint.
type LookupEndpointResult struct {
	// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
	BatchOnly bool `pulumi:"batchOnly"`
	// 证书信息。
	Certificate GetEndpointCertificate `pulumi:"certificate"`
	// 接入点创建时间，RFC3339格式。
	CreateTime string `pulumi:"createTime"`
	// 接入点描述。
	Description string `pulumi:"description"`
	// 推理接入点的ID。
	EndpointId string `pulumi:"endpointId"`
	// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
	EndpointModelType string `pulumi:"endpointModelType"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 接入点接入模型。
	ModelReference GetEndpointModelReference `pulumi:"modelReference"`
	// 模型单元，为空表示后付费；否则预付费。
	ModelUnitId string `pulumi:"modelUnitId"`
	// 内容护栏方案。
	Moderation GetEndpointModeration `pulumi:"moderation"`
	// 接入点名称。
	Name string `pulumi:"name"`
	// 资源所属的项目名称，默认值为default。
	ProjectName string `pulumi:"projectName"`
	// 接入点限流。
	RateLimit GetEndpointRateLimit `pulumi:"rateLimit"`
	// 接入点切换的Id。
	RollingId string `pulumi:"rollingId"`
	// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
	ScaleTierId string `pulumi:"scaleTierId"`
	// 接入点状态。
	Status string `pulumi:"status"`
	// 状态附加说明信息。
	StatusReason string `pulumi:"statusReason"`
	// 是否支持接入点切换模型版本。
	SupportRolling bool `pulumi:"supportRolling"`
	// 是否支持TPM保障包。
	SupportScaleTier bool `pulumi:"supportScaleTier"`
	// 接入点绑定的标签。
	Tags []GetEndpointTag `pulumi:"tags"`
	// 接入点更新时间，RFC3339格式。
	UpdateTime string `pulumi:"updateTime"`
}

func LookupEndpointOutput(ctx *pulumi.Context, args LookupEndpointOutputArgs, opts ...pulumi.InvokeOption) LookupEndpointResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEndpointResultOutput, error) {
			args := v.(LookupEndpointArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:ark/getEndpoint:getEndpoint", args, LookupEndpointResultOutput{}, options).(LookupEndpointResultOutput), nil
		}).(LookupEndpointResultOutput)
}

// A collection of arguments for invoking getEndpoint.
type LookupEndpointOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEndpointOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointArgs)(nil)).Elem()
}

// A collection of values returned by getEndpoint.
type LookupEndpointResultOutput struct{ *pulumi.OutputState }

func (LookupEndpointResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEndpointResult)(nil)).Elem()
}

func (o LookupEndpointResultOutput) ToLookupEndpointResultOutput() LookupEndpointResultOutput {
	return o
}

func (o LookupEndpointResultOutput) ToLookupEndpointResultOutputWithContext(ctx context.Context) LookupEndpointResultOutput {
	return o
}

// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
func (o LookupEndpointResultOutput) BatchOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEndpointResult) bool { return v.BatchOnly }).(pulumi.BoolOutput)
}

// 证书信息。
func (o LookupEndpointResultOutput) Certificate() GetEndpointCertificateOutput {
	return o.ApplyT(func(v LookupEndpointResult) GetEndpointCertificate { return v.Certificate }).(GetEndpointCertificateOutput)
}

// 接入点创建时间，RFC3339格式。
func (o LookupEndpointResultOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.CreateTime }).(pulumi.StringOutput)
}

// 接入点描述。
func (o LookupEndpointResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Description }).(pulumi.StringOutput)
}

// 推理接入点的ID。
func (o LookupEndpointResultOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.EndpointId }).(pulumi.StringOutput)
}

// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
func (o LookupEndpointResultOutput) EndpointModelType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.EndpointModelType }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupEndpointResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Id }).(pulumi.StringOutput)
}

// 接入点接入模型。
func (o LookupEndpointResultOutput) ModelReference() GetEndpointModelReferenceOutput {
	return o.ApplyT(func(v LookupEndpointResult) GetEndpointModelReference { return v.ModelReference }).(GetEndpointModelReferenceOutput)
}

// 模型单元，为空表示后付费；否则预付费。
func (o LookupEndpointResultOutput) ModelUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.ModelUnitId }).(pulumi.StringOutput)
}

// 内容护栏方案。
func (o LookupEndpointResultOutput) Moderation() GetEndpointModerationOutput {
	return o.ApplyT(func(v LookupEndpointResult) GetEndpointModeration { return v.Moderation }).(GetEndpointModerationOutput)
}

// 接入点名称。
func (o LookupEndpointResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Name }).(pulumi.StringOutput)
}

// 资源所属的项目名称，默认值为default。
func (o LookupEndpointResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 接入点限流。
func (o LookupEndpointResultOutput) RateLimit() GetEndpointRateLimitOutput {
	return o.ApplyT(func(v LookupEndpointResult) GetEndpointRateLimit { return v.RateLimit }).(GetEndpointRateLimitOutput)
}

// 接入点切换的Id。
func (o LookupEndpointResultOutput) RollingId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.RollingId }).(pulumi.StringOutput)
}

// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
func (o LookupEndpointResultOutput) ScaleTierId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.ScaleTierId }).(pulumi.StringOutput)
}

// 接入点状态。
func (o LookupEndpointResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.Status }).(pulumi.StringOutput)
}

// 状态附加说明信息。
func (o LookupEndpointResultOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.StatusReason }).(pulumi.StringOutput)
}

// 是否支持接入点切换模型版本。
func (o LookupEndpointResultOutput) SupportRolling() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEndpointResult) bool { return v.SupportRolling }).(pulumi.BoolOutput)
}

// 是否支持TPM保障包。
func (o LookupEndpointResultOutput) SupportScaleTier() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEndpointResult) bool { return v.SupportScaleTier }).(pulumi.BoolOutput)
}

// 接入点绑定的标签。
func (o LookupEndpointResultOutput) Tags() GetEndpointTagArrayOutput {
	return o.ApplyT(func(v LookupEndpointResult) []GetEndpointTag { return v.Tags }).(GetEndpointTagArrayOutput)
}

// 接入点更新时间，RFC3339格式。
func (o LookupEndpointResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEndpointResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEndpointResultOutput{})
}
