// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ark

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 在使用大语言模型进行推理服务时，推理接入点（Endpoint）是模型调用的关键入口。开发者只需通过指定的 ID 即可向大模型发起 API / SDK 推理请求，实现快速接入与灵活调用。系统提供统一的 API 调用方式、调用监控、限流策略与安全保障机制，确保推理过程的稳定性与安全性。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:ark/endpoint:Endpoint example "endpoint_id"
// ```
type Endpoint struct {
	pulumi.CustomResourceState

	// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
	BatchOnly pulumi.BoolOutput `pulumi:"batchOnly"`
	// 证书信息。
	Certificate EndpointCertificateOutput `pulumi:"certificate"`
	// 接入点创建时间，RFC3339格式。
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// 接入点描述。
	Description pulumi.StringOutput `pulumi:"description"`
	// 推理接入点的ID。
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
	EndpointModelType pulumi.StringOutput `pulumi:"endpointModelType"`
	// 接入点接入模型。
	ModelReference EndpointModelReferenceOutput `pulumi:"modelReference"`
	// 模型单元，为空表示后付费；否则预付费。
	ModelUnitId pulumi.StringOutput `pulumi:"modelUnitId"`
	// 内容护栏方案。
	Moderation EndpointModerationOutput `pulumi:"moderation"`
	// 接入点名称。
	Name pulumi.StringOutput `pulumi:"name"`
	// 资源所属的项目名称，默认值为default。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 接入点限流。
	RateLimit EndpointRateLimitOutput `pulumi:"rateLimit"`
	// 接入点切换的Id。
	RollingId pulumi.StringOutput `pulumi:"rollingId"`
	// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
	ScaleTierId pulumi.StringOutput `pulumi:"scaleTierId"`
	// 接入点状态。
	Status pulumi.StringOutput `pulumi:"status"`
	// 状态附加说明信息。
	StatusReason pulumi.StringOutput `pulumi:"statusReason"`
	// 是否支持接入点切换模型版本。
	SupportRolling pulumi.BoolOutput `pulumi:"supportRolling"`
	// 是否支持TPM保障包。
	SupportScaleTier pulumi.BoolOutput      `pulumi:"supportScaleTier"`
	Tags             EndpointTagArrayOutput `pulumi:"tags"`
	// 接入点更新时间，RFC3339格式。
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ModelReference == nil {
		return nil, errors.New("invalid value for required argument 'ModelReference'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("volcenginecc:ark/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("volcenginecc:ark/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
	BatchOnly *bool `pulumi:"batchOnly"`
	// 证书信息。
	Certificate *EndpointCertificate `pulumi:"certificate"`
	// 接入点创建时间，RFC3339格式。
	CreateTime *string `pulumi:"createTime"`
	// 接入点描述。
	Description *string `pulumi:"description"`
	// 推理接入点的ID。
	EndpointId *string `pulumi:"endpointId"`
	// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
	EndpointModelType *string `pulumi:"endpointModelType"`
	// 接入点接入模型。
	ModelReference *EndpointModelReference `pulumi:"modelReference"`
	// 模型单元，为空表示后付费；否则预付费。
	ModelUnitId *string `pulumi:"modelUnitId"`
	// 内容护栏方案。
	Moderation *EndpointModeration `pulumi:"moderation"`
	// 接入点名称。
	Name *string `pulumi:"name"`
	// 资源所属的项目名称，默认值为default。
	ProjectName *string `pulumi:"projectName"`
	// 接入点限流。
	RateLimit *EndpointRateLimit `pulumi:"rateLimit"`
	// 接入点切换的Id。
	RollingId *string `pulumi:"rollingId"`
	// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
	ScaleTierId *string `pulumi:"scaleTierId"`
	// 接入点状态。
	Status *string `pulumi:"status"`
	// 状态附加说明信息。
	StatusReason *string `pulumi:"statusReason"`
	// 是否支持接入点切换模型版本。
	SupportRolling *bool `pulumi:"supportRolling"`
	// 是否支持TPM保障包。
	SupportScaleTier *bool         `pulumi:"supportScaleTier"`
	Tags             []EndpointTag `pulumi:"tags"`
	// 接入点更新时间，RFC3339格式。
	UpdateTime *string `pulumi:"updateTime"`
}

type EndpointState struct {
	// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
	BatchOnly pulumi.BoolPtrInput
	// 证书信息。
	Certificate EndpointCertificatePtrInput
	// 接入点创建时间，RFC3339格式。
	CreateTime pulumi.StringPtrInput
	// 接入点描述。
	Description pulumi.StringPtrInput
	// 推理接入点的ID。
	EndpointId pulumi.StringPtrInput
	// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
	EndpointModelType pulumi.StringPtrInput
	// 接入点接入模型。
	ModelReference EndpointModelReferencePtrInput
	// 模型单元，为空表示后付费；否则预付费。
	ModelUnitId pulumi.StringPtrInput
	// 内容护栏方案。
	Moderation EndpointModerationPtrInput
	// 接入点名称。
	Name pulumi.StringPtrInput
	// 资源所属的项目名称，默认值为default。
	ProjectName pulumi.StringPtrInput
	// 接入点限流。
	RateLimit EndpointRateLimitPtrInput
	// 接入点切换的Id。
	RollingId pulumi.StringPtrInput
	// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
	ScaleTierId pulumi.StringPtrInput
	// 接入点状态。
	Status pulumi.StringPtrInput
	// 状态附加说明信息。
	StatusReason pulumi.StringPtrInput
	// 是否支持接入点切换模型版本。
	SupportRolling pulumi.BoolPtrInput
	// 是否支持TPM保障包。
	SupportScaleTier pulumi.BoolPtrInput
	Tags             EndpointTagArrayInput
	// 接入点更新时间，RFC3339格式。
	UpdateTime pulumi.StringPtrInput
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// 接入点描述。
	Description *string `pulumi:"description"`
	// 接入点接入模型。
	ModelReference EndpointModelReference `pulumi:"modelReference"`
	// 模型单元，为空表示后付费；否则预付费。
	ModelUnitId *string `pulumi:"modelUnitId"`
	// 内容护栏方案。
	Moderation *EndpointModeration `pulumi:"moderation"`
	// 接入点名称。
	Name string `pulumi:"name"`
	// 资源所属的项目名称，默认值为default。
	ProjectName *string `pulumi:"projectName"`
	// 接入点限流。
	RateLimit *EndpointRateLimit `pulumi:"rateLimit"`
	Tags      []EndpointTag      `pulumi:"tags"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// 接入点描述。
	Description pulumi.StringPtrInput
	// 接入点接入模型。
	ModelReference EndpointModelReferenceInput
	// 模型单元，为空表示后付费；否则预付费。
	ModelUnitId pulumi.StringPtrInput
	// 内容护栏方案。
	Moderation EndpointModerationPtrInput
	// 接入点名称。
	Name pulumi.StringInput
	// 资源所属的项目名称，默认值为default。
	ProjectName pulumi.StringPtrInput
	// 接入点限流。
	RateLimit EndpointRateLimitPtrInput
	Tags      EndpointTagArrayInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// EndpointMapInput is an input type that accepts EndpointMap and EndpointMapOutput values.
// You can construct a concrete instance of `EndpointMapInput` via:
//
//	EndpointMap{ "key": EndpointArgs{...} }
type EndpointMapInput interface {
	pulumi.Input

	ToEndpointMapOutput() EndpointMapOutput
	ToEndpointMapOutputWithContext(context.Context) EndpointMapOutput
}

type EndpointMap map[string]EndpointInput

func (EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (i EndpointMap) ToEndpointMapOutput() EndpointMapOutput {
	return i.ToEndpointMapOutputWithContext(context.Background())
}

func (i EndpointMap) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMapOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
func (o EndpointOutput) BatchOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolOutput { return v.BatchOnly }).(pulumi.BoolOutput)
}

// 证书信息。
func (o EndpointOutput) Certificate() EndpointCertificateOutput {
	return o.ApplyT(func(v *Endpoint) EndpointCertificateOutput { return v.Certificate }).(EndpointCertificateOutput)
}

// 接入点创建时间，RFC3339格式。
func (o EndpointOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// 接入点描述。
func (o EndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 推理接入点的ID。
func (o EndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
func (o EndpointOutput) EndpointModelType() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointModelType }).(pulumi.StringOutput)
}

// 接入点接入模型。
func (o EndpointOutput) ModelReference() EndpointModelReferenceOutput {
	return o.ApplyT(func(v *Endpoint) EndpointModelReferenceOutput { return v.ModelReference }).(EndpointModelReferenceOutput)
}

// 模型单元，为空表示后付费；否则预付费。
func (o EndpointOutput) ModelUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ModelUnitId }).(pulumi.StringOutput)
}

// 内容护栏方案。
func (o EndpointOutput) Moderation() EndpointModerationOutput {
	return o.ApplyT(func(v *Endpoint) EndpointModerationOutput { return v.Moderation }).(EndpointModerationOutput)
}

// 接入点名称。
func (o EndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// 资源所属的项目名称，默认值为default。
func (o EndpointOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 接入点限流。
func (o EndpointOutput) RateLimit() EndpointRateLimitOutput {
	return o.ApplyT(func(v *Endpoint) EndpointRateLimitOutput { return v.RateLimit }).(EndpointRateLimitOutput)
}

// 接入点切换的Id。
func (o EndpointOutput) RollingId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.RollingId }).(pulumi.StringOutput)
}

// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
func (o EndpointOutput) ScaleTierId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ScaleTierId }).(pulumi.StringOutput)
}

// 接入点状态。
func (o EndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 状态附加说明信息。
func (o EndpointOutput) StatusReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.StatusReason }).(pulumi.StringOutput)
}

// 是否支持接入点切换模型版本。
func (o EndpointOutput) SupportRolling() pulumi.BoolOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolOutput { return v.SupportRolling }).(pulumi.BoolOutput)
}

// 是否支持TPM保障包。
func (o EndpointOutput) SupportScaleTier() pulumi.BoolOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolOutput { return v.SupportScaleTier }).(pulumi.BoolOutput)
}

func (o EndpointOutput) Tags() EndpointTagArrayOutput {
	return o.ApplyT(func(v *Endpoint) EndpointTagArrayOutput { return v.Tags }).(EndpointTagArrayOutput)
}

// 接入点更新时间，RFC3339格式。
func (o EndpointOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].([]*Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

type EndpointMapOutput struct{ *pulumi.OutputState }

func (EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (o EndpointMapOutput) ToEndpointMapOutput() EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) MapIndex(k pulumi.StringInput) EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].(map[string]*Endpoint)[vs[1].(string)]
	}).(EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMapInput)(nil)).Elem(), EndpointMap{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointMapOutput{})
}
