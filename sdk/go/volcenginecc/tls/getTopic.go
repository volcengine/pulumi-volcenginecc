// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::TLS::Topic
func LookupTopic(ctx *pulumi.Context, args *LookupTopicArgs, opts ...pulumi.InvokeOption) (*LookupTopicResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTopicResult
	err := ctx.Invoke("volcenginecc:tls/getTopic:getTopic", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopic.
type LookupTopicArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getTopic.
type LookupTopicResult struct {
	// 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
	ArchiveTtl int `pulumi:"archiveTtl"`
	// 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
	AutoSplit bool `pulumi:"autoSplit"`
	// 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
	ColdTtl int `pulumi:"coldTtl"`
	// 日志主题创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 日志主题描述信息。不支持 <>、'、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
	Description string `pulumi:"description"`
	// 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
	EnableHotTtl bool `pulumi:"enableHotTtl"`
	// 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
	EnableTracking bool `pulumi:"enableTracking"`
	// 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
	HotTtl int `pulumi:"hotTtl"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
	LogPublicIp bool `pulumi:"logPublicIp"`
	// 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
	MaxSplitShard int `pulumi:"maxSplitShard"`
	// 日志主题所属的日志项目 ID。
	ProjectId string `pulumi:"projectId"`
	// 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
	ShardCount int `pulumi:"shardCount"`
	// 标签列表。
	Tags []GetTopicTag `pulumi:"tags"`
	// 时间格式
	TimeFormat string `pulumi:"timeFormat"`
	// 时间字段名
	TimeKey string `pulumi:"timeKey"`
	// 日志主题 ID。
	TopicId string `pulumi:"topicId"`
	// 日志主题名称。
	TopicName string `pulumi:"topicName"`
	// 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
	Ttl int `pulumi:"ttl"`
	// 日志主题修改时间。
	UpdatedTime string `pulumi:"updatedTime"`
}

func LookupTopicOutput(ctx *pulumi.Context, args LookupTopicOutputArgs, opts ...pulumi.InvokeOption) LookupTopicResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTopicResultOutput, error) {
			args := v.(LookupTopicArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:tls/getTopic:getTopic", args, LookupTopicResultOutput{}, options).(LookupTopicResultOutput), nil
		}).(LookupTopicResultOutput)
}

// A collection of arguments for invoking getTopic.
type LookupTopicOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTopicOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicArgs)(nil)).Elem()
}

// A collection of values returned by getTopic.
type LookupTopicResultOutput struct{ *pulumi.OutputState }

func (LookupTopicResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTopicResult)(nil)).Elem()
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutput() LookupTopicResultOutput {
	return o
}

func (o LookupTopicResultOutput) ToLookupTopicResultOutputWithContext(ctx context.Context) LookupTopicResultOutput {
	return o
}

// 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
func (o LookupTopicResultOutput) ArchiveTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.ArchiveTtl }).(pulumi.IntOutput)
}

// 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
func (o LookupTopicResultOutput) AutoSplit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicResult) bool { return v.AutoSplit }).(pulumi.BoolOutput)
}

// 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
func (o LookupTopicResultOutput) ColdTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.ColdTtl }).(pulumi.IntOutput)
}

// 日志主题创建时间。
func (o LookupTopicResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 日志主题描述信息。不支持 <>、'、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
func (o LookupTopicResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Description }).(pulumi.StringOutput)
}

// 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
func (o LookupTopicResultOutput) EnableHotTtl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicResult) bool { return v.EnableHotTtl }).(pulumi.BoolOutput)
}

// 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
func (o LookupTopicResultOutput) EnableTracking() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicResult) bool { return v.EnableTracking }).(pulumi.BoolOutput)
}

// 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
func (o LookupTopicResultOutput) HotTtl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.HotTtl }).(pulumi.IntOutput)
}

// Uniquely identifies the resource.
func (o LookupTopicResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.Id }).(pulumi.StringOutput)
}

// 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
func (o LookupTopicResultOutput) LogPublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTopicResult) bool { return v.LogPublicIp }).(pulumi.BoolOutput)
}

// 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
func (o LookupTopicResultOutput) MaxSplitShard() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.MaxSplitShard }).(pulumi.IntOutput)
}

// 日志主题所属的日志项目 ID。
func (o LookupTopicResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
func (o LookupTopicResultOutput) ShardCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.ShardCount }).(pulumi.IntOutput)
}

// 标签列表。
func (o LookupTopicResultOutput) Tags() GetTopicTagArrayOutput {
	return o.ApplyT(func(v LookupTopicResult) []GetTopicTag { return v.Tags }).(GetTopicTagArrayOutput)
}

// 时间格式
func (o LookupTopicResultOutput) TimeFormat() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.TimeFormat }).(pulumi.StringOutput)
}

// 时间字段名
func (o LookupTopicResultOutput) TimeKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.TimeKey }).(pulumi.StringOutput)
}

// 日志主题 ID。
func (o LookupTopicResultOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.TopicId }).(pulumi.StringOutput)
}

// 日志主题名称。
func (o LookupTopicResultOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.TopicName }).(pulumi.StringOutput)
}

// 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
func (o LookupTopicResultOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTopicResult) int { return v.Ttl }).(pulumi.IntOutput)
}

// 日志主题修改时间。
func (o LookupTopicResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTopicResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTopicResultOutput{})
}
