// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type TopicTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// TopicTagInput is an input type that accepts TopicTagArgs and TopicTagOutput values.
// You can construct a concrete instance of `TopicTagInput` via:
//
//	TopicTagArgs{...}
type TopicTagInput interface {
	pulumi.Input

	ToTopicTagOutput() TopicTagOutput
	ToTopicTagOutputWithContext(context.Context) TopicTagOutput
}

type TopicTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (TopicTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicTag)(nil)).Elem()
}

func (i TopicTagArgs) ToTopicTagOutput() TopicTagOutput {
	return i.ToTopicTagOutputWithContext(context.Background())
}

func (i TopicTagArgs) ToTopicTagOutputWithContext(ctx context.Context) TopicTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTagOutput)
}

// TopicTagArrayInput is an input type that accepts TopicTagArray and TopicTagArrayOutput values.
// You can construct a concrete instance of `TopicTagArrayInput` via:
//
//	TopicTagArray{ TopicTagArgs{...} }
type TopicTagArrayInput interface {
	pulumi.Input

	ToTopicTagArrayOutput() TopicTagArrayOutput
	ToTopicTagArrayOutputWithContext(context.Context) TopicTagArrayOutput
}

type TopicTagArray []TopicTagInput

func (TopicTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicTag)(nil)).Elem()
}

func (i TopicTagArray) ToTopicTagArrayOutput() TopicTagArrayOutput {
	return i.ToTopicTagArrayOutputWithContext(context.Background())
}

func (i TopicTagArray) ToTopicTagArrayOutputWithContext(ctx context.Context) TopicTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicTagArrayOutput)
}

type TopicTagOutput struct{ *pulumi.OutputState }

func (TopicTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicTag)(nil)).Elem()
}

func (o TopicTagOutput) ToTopicTagOutput() TopicTagOutput {
	return o
}

func (o TopicTagOutput) ToTopicTagOutputWithContext(ctx context.Context) TopicTagOutput {
	return o
}

// 用户标签的标签键。
func (o TopicTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o TopicTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TopicTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type TopicTagArrayOutput struct{ *pulumi.OutputState }

func (TopicTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicTag)(nil)).Elem()
}

func (o TopicTagArrayOutput) ToTopicTagArrayOutput() TopicTagArrayOutput {
	return o
}

func (o TopicTagArrayOutput) ToTopicTagArrayOutputWithContext(ctx context.Context) TopicTagArrayOutput {
	return o
}

func (o TopicTagArrayOutput) Index(i pulumi.IntInput) TopicTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicTag {
		return vs[0].([]TopicTag)[vs[1].(int)]
	}).(TopicTagOutput)
}

type GetTopicTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetTopicTagInput is an input type that accepts GetTopicTagArgs and GetTopicTagOutput values.
// You can construct a concrete instance of `GetTopicTagInput` via:
//
//	GetTopicTagArgs{...}
type GetTopicTagInput interface {
	pulumi.Input

	ToGetTopicTagOutput() GetTopicTagOutput
	ToGetTopicTagOutputWithContext(context.Context) GetTopicTagOutput
}

type GetTopicTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetTopicTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicTag)(nil)).Elem()
}

func (i GetTopicTagArgs) ToGetTopicTagOutput() GetTopicTagOutput {
	return i.ToGetTopicTagOutputWithContext(context.Background())
}

func (i GetTopicTagArgs) ToGetTopicTagOutputWithContext(ctx context.Context) GetTopicTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicTagOutput)
}

// GetTopicTagArrayInput is an input type that accepts GetTopicTagArray and GetTopicTagArrayOutput values.
// You can construct a concrete instance of `GetTopicTagArrayInput` via:
//
//	GetTopicTagArray{ GetTopicTagArgs{...} }
type GetTopicTagArrayInput interface {
	pulumi.Input

	ToGetTopicTagArrayOutput() GetTopicTagArrayOutput
	ToGetTopicTagArrayOutputWithContext(context.Context) GetTopicTagArrayOutput
}

type GetTopicTagArray []GetTopicTagInput

func (GetTopicTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicTag)(nil)).Elem()
}

func (i GetTopicTagArray) ToGetTopicTagArrayOutput() GetTopicTagArrayOutput {
	return i.ToGetTopicTagArrayOutputWithContext(context.Background())
}

func (i GetTopicTagArray) ToGetTopicTagArrayOutputWithContext(ctx context.Context) GetTopicTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicTagArrayOutput)
}

type GetTopicTagOutput struct{ *pulumi.OutputState }

func (GetTopicTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicTag)(nil)).Elem()
}

func (o GetTopicTagOutput) ToGetTopicTagOutput() GetTopicTagOutput {
	return o
}

func (o GetTopicTagOutput) ToGetTopicTagOutputWithContext(ctx context.Context) GetTopicTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetTopicTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetTopicTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetTopicTagArrayOutput struct{ *pulumi.OutputState }

func (GetTopicTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicTag)(nil)).Elem()
}

func (o GetTopicTagArrayOutput) ToGetTopicTagArrayOutput() GetTopicTagArrayOutput {
	return o
}

func (o GetTopicTagArrayOutput) ToGetTopicTagArrayOutputWithContext(ctx context.Context) GetTopicTagArrayOutput {
	return o
}

func (o GetTopicTagArrayOutput) Index(i pulumi.IntInput) GetTopicTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicTag {
		return vs[0].([]GetTopicTag)[vs[1].(int)]
	}).(GetTopicTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicTagInput)(nil)).Elem(), TopicTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicTagArrayInput)(nil)).Elem(), TopicTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicTagInput)(nil)).Elem(), GetTopicTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicTagArrayInput)(nil)).Elem(), GetTopicTagArray{})
	pulumi.RegisterOutputType(TopicTagOutput{})
	pulumi.RegisterOutputType(TopicTagArrayOutput{})
	pulumi.RegisterOutputType(GetTopicTagOutput{})
	pulumi.RegisterOutputType(GetTopicTagArrayOutput{})
}
