// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type InstanceCapacity struct {
	// 当前实例的内存总容量。单位：MiB。
	Total *int `pulumi:"total"`
	// 当前实例已用容量。单位：MiB。
	Used *int `pulumi:"used"`
}

// InstanceCapacityInput is an input type that accepts InstanceCapacityArgs and InstanceCapacityOutput values.
// You can construct a concrete instance of `InstanceCapacityInput` via:
//
//	InstanceCapacityArgs{...}
type InstanceCapacityInput interface {
	pulumi.Input

	ToInstanceCapacityOutput() InstanceCapacityOutput
	ToInstanceCapacityOutputWithContext(context.Context) InstanceCapacityOutput
}

type InstanceCapacityArgs struct {
	// 当前实例的内存总容量。单位：MiB。
	Total pulumi.IntPtrInput `pulumi:"total"`
	// 当前实例已用容量。单位：MiB。
	Used pulumi.IntPtrInput `pulumi:"used"`
}

func (InstanceCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCapacity)(nil)).Elem()
}

func (i InstanceCapacityArgs) ToInstanceCapacityOutput() InstanceCapacityOutput {
	return i.ToInstanceCapacityOutputWithContext(context.Background())
}

func (i InstanceCapacityArgs) ToInstanceCapacityOutputWithContext(ctx context.Context) InstanceCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCapacityOutput)
}

func (i InstanceCapacityArgs) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return i.ToInstanceCapacityPtrOutputWithContext(context.Background())
}

func (i InstanceCapacityArgs) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCapacityOutput).ToInstanceCapacityPtrOutputWithContext(ctx)
}

// InstanceCapacityPtrInput is an input type that accepts InstanceCapacityArgs, InstanceCapacityPtr and InstanceCapacityPtrOutput values.
// You can construct a concrete instance of `InstanceCapacityPtrInput` via:
//
//	        InstanceCapacityArgs{...}
//
//	or:
//
//	        nil
type InstanceCapacityPtrInput interface {
	pulumi.Input

	ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput
	ToInstanceCapacityPtrOutputWithContext(context.Context) InstanceCapacityPtrOutput
}

type instanceCapacityPtrType InstanceCapacityArgs

func InstanceCapacityPtr(v *InstanceCapacityArgs) InstanceCapacityPtrInput {
	return (*instanceCapacityPtrType)(v)
}

func (*instanceCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCapacity)(nil)).Elem()
}

func (i *instanceCapacityPtrType) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return i.ToInstanceCapacityPtrOutputWithContext(context.Background())
}

func (i *instanceCapacityPtrType) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCapacityPtrOutput)
}

type InstanceCapacityOutput struct{ *pulumi.OutputState }

func (InstanceCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCapacity)(nil)).Elem()
}

func (o InstanceCapacityOutput) ToInstanceCapacityOutput() InstanceCapacityOutput {
	return o
}

func (o InstanceCapacityOutput) ToInstanceCapacityOutputWithContext(ctx context.Context) InstanceCapacityOutput {
	return o
}

func (o InstanceCapacityOutput) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return o.ToInstanceCapacityPtrOutputWithContext(context.Background())
}

func (o InstanceCapacityOutput) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCapacity) *InstanceCapacity {
		return &v
	}).(InstanceCapacityPtrOutput)
}

// 当前实例的内存总容量。单位：MiB。
func (o InstanceCapacityOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCapacity) *int { return v.Total }).(pulumi.IntPtrOutput)
}

// 当前实例已用容量。单位：MiB。
func (o InstanceCapacityOutput) Used() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCapacity) *int { return v.Used }).(pulumi.IntPtrOutput)
}

type InstanceCapacityPtrOutput struct{ *pulumi.OutputState }

func (InstanceCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCapacity)(nil)).Elem()
}

func (o InstanceCapacityPtrOutput) ToInstanceCapacityPtrOutput() InstanceCapacityPtrOutput {
	return o
}

func (o InstanceCapacityPtrOutput) ToInstanceCapacityPtrOutputWithContext(ctx context.Context) InstanceCapacityPtrOutput {
	return o
}

func (o InstanceCapacityPtrOutput) Elem() InstanceCapacityOutput {
	return o.ApplyT(func(v *InstanceCapacity) InstanceCapacity {
		if v != nil {
			return *v
		}
		var ret InstanceCapacity
		return ret
	}).(InstanceCapacityOutput)
}

// 当前实例的内存总容量。单位：MiB。
func (o InstanceCapacityPtrOutput) Total() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCapacity) *int {
		if v == nil {
			return nil
		}
		return v.Total
	}).(pulumi.IntPtrOutput)
}

// 当前实例已用容量。单位：MiB。
func (o InstanceCapacityPtrOutput) Used() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCapacity) *int {
		if v == nil {
			return nil
		}
		return v.Used
	}).(pulumi.IntPtrOutput)
}

type InstanceConfigureNode struct {
	// 每个节点所属的可用区。
	Az *string `pulumi:"az"`
}

// InstanceConfigureNodeInput is an input type that accepts InstanceConfigureNodeArgs and InstanceConfigureNodeOutput values.
// You can construct a concrete instance of `InstanceConfigureNodeInput` via:
//
//	InstanceConfigureNodeArgs{...}
type InstanceConfigureNodeInput interface {
	pulumi.Input

	ToInstanceConfigureNodeOutput() InstanceConfigureNodeOutput
	ToInstanceConfigureNodeOutputWithContext(context.Context) InstanceConfigureNodeOutput
}

type InstanceConfigureNodeArgs struct {
	// 每个节点所属的可用区。
	Az pulumi.StringPtrInput `pulumi:"az"`
}

func (InstanceConfigureNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigureNode)(nil)).Elem()
}

func (i InstanceConfigureNodeArgs) ToInstanceConfigureNodeOutput() InstanceConfigureNodeOutput {
	return i.ToInstanceConfigureNodeOutputWithContext(context.Background())
}

func (i InstanceConfigureNodeArgs) ToInstanceConfigureNodeOutputWithContext(ctx context.Context) InstanceConfigureNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigureNodeOutput)
}

// InstanceConfigureNodeArrayInput is an input type that accepts InstanceConfigureNodeArray and InstanceConfigureNodeArrayOutput values.
// You can construct a concrete instance of `InstanceConfigureNodeArrayInput` via:
//
//	InstanceConfigureNodeArray{ InstanceConfigureNodeArgs{...} }
type InstanceConfigureNodeArrayInput interface {
	pulumi.Input

	ToInstanceConfigureNodeArrayOutput() InstanceConfigureNodeArrayOutput
	ToInstanceConfigureNodeArrayOutputWithContext(context.Context) InstanceConfigureNodeArrayOutput
}

type InstanceConfigureNodeArray []InstanceConfigureNodeInput

func (InstanceConfigureNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfigureNode)(nil)).Elem()
}

func (i InstanceConfigureNodeArray) ToInstanceConfigureNodeArrayOutput() InstanceConfigureNodeArrayOutput {
	return i.ToInstanceConfigureNodeArrayOutputWithContext(context.Background())
}

func (i InstanceConfigureNodeArray) ToInstanceConfigureNodeArrayOutputWithContext(ctx context.Context) InstanceConfigureNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceConfigureNodeArrayOutput)
}

type InstanceConfigureNodeOutput struct{ *pulumi.OutputState }

func (InstanceConfigureNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceConfigureNode)(nil)).Elem()
}

func (o InstanceConfigureNodeOutput) ToInstanceConfigureNodeOutput() InstanceConfigureNodeOutput {
	return o
}

func (o InstanceConfigureNodeOutput) ToInstanceConfigureNodeOutputWithContext(ctx context.Context) InstanceConfigureNodeOutput {
	return o
}

// 每个节点所属的可用区。
func (o InstanceConfigureNodeOutput) Az() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceConfigureNode) *string { return v.Az }).(pulumi.StringPtrOutput)
}

type InstanceConfigureNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceConfigureNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceConfigureNode)(nil)).Elem()
}

func (o InstanceConfigureNodeArrayOutput) ToInstanceConfigureNodeArrayOutput() InstanceConfigureNodeArrayOutput {
	return o
}

func (o InstanceConfigureNodeArrayOutput) ToInstanceConfigureNodeArrayOutputWithContext(ctx context.Context) InstanceConfigureNodeArrayOutput {
	return o
}

func (o InstanceConfigureNodeArrayOutput) Index(i pulumi.IntInput) InstanceConfigureNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceConfigureNode {
		return vs[0].([]InstanceConfigureNode)[vs[1].(int)]
	}).(InstanceConfigureNodeOutput)
}

type InstanceInstanceShard struct {
	// 分片中的节点数量
	NodeNumber  *int                              `pulumi:"nodeNumber"`
	ServerNodes []InstanceInstanceShardServerNode `pulumi:"serverNodes"`
	// 分片 ID。
	ShardId *string `pulumi:"shardId"`
}

// InstanceInstanceShardInput is an input type that accepts InstanceInstanceShardArgs and InstanceInstanceShardOutput values.
// You can construct a concrete instance of `InstanceInstanceShardInput` via:
//
//	InstanceInstanceShardArgs{...}
type InstanceInstanceShardInput interface {
	pulumi.Input

	ToInstanceInstanceShardOutput() InstanceInstanceShardOutput
	ToInstanceInstanceShardOutputWithContext(context.Context) InstanceInstanceShardOutput
}

type InstanceInstanceShardArgs struct {
	// 分片中的节点数量
	NodeNumber  pulumi.IntPtrInput                        `pulumi:"nodeNumber"`
	ServerNodes InstanceInstanceShardServerNodeArrayInput `pulumi:"serverNodes"`
	// 分片 ID。
	ShardId pulumi.StringPtrInput `pulumi:"shardId"`
}

func (InstanceInstanceShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInstanceShard)(nil)).Elem()
}

func (i InstanceInstanceShardArgs) ToInstanceInstanceShardOutput() InstanceInstanceShardOutput {
	return i.ToInstanceInstanceShardOutputWithContext(context.Background())
}

func (i InstanceInstanceShardArgs) ToInstanceInstanceShardOutputWithContext(ctx context.Context) InstanceInstanceShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInstanceShardOutput)
}

// InstanceInstanceShardArrayInput is an input type that accepts InstanceInstanceShardArray and InstanceInstanceShardArrayOutput values.
// You can construct a concrete instance of `InstanceInstanceShardArrayInput` via:
//
//	InstanceInstanceShardArray{ InstanceInstanceShardArgs{...} }
type InstanceInstanceShardArrayInput interface {
	pulumi.Input

	ToInstanceInstanceShardArrayOutput() InstanceInstanceShardArrayOutput
	ToInstanceInstanceShardArrayOutputWithContext(context.Context) InstanceInstanceShardArrayOutput
}

type InstanceInstanceShardArray []InstanceInstanceShardInput

func (InstanceInstanceShardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceInstanceShard)(nil)).Elem()
}

func (i InstanceInstanceShardArray) ToInstanceInstanceShardArrayOutput() InstanceInstanceShardArrayOutput {
	return i.ToInstanceInstanceShardArrayOutputWithContext(context.Background())
}

func (i InstanceInstanceShardArray) ToInstanceInstanceShardArrayOutputWithContext(ctx context.Context) InstanceInstanceShardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInstanceShardArrayOutput)
}

type InstanceInstanceShardOutput struct{ *pulumi.OutputState }

func (InstanceInstanceShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInstanceShard)(nil)).Elem()
}

func (o InstanceInstanceShardOutput) ToInstanceInstanceShardOutput() InstanceInstanceShardOutput {
	return o
}

func (o InstanceInstanceShardOutput) ToInstanceInstanceShardOutputWithContext(ctx context.Context) InstanceInstanceShardOutput {
	return o
}

// 分片中的节点数量
func (o InstanceInstanceShardOutput) NodeNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceInstanceShard) *int { return v.NodeNumber }).(pulumi.IntPtrOutput)
}

func (o InstanceInstanceShardOutput) ServerNodes() InstanceInstanceShardServerNodeArrayOutput {
	return o.ApplyT(func(v InstanceInstanceShard) []InstanceInstanceShardServerNode { return v.ServerNodes }).(InstanceInstanceShardServerNodeArrayOutput)
}

// 分片 ID。
func (o InstanceInstanceShardOutput) ShardId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInstanceShard) *string { return v.ShardId }).(pulumi.StringPtrOutput)
}

type InstanceInstanceShardArrayOutput struct{ *pulumi.OutputState }

func (InstanceInstanceShardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceInstanceShard)(nil)).Elem()
}

func (o InstanceInstanceShardArrayOutput) ToInstanceInstanceShardArrayOutput() InstanceInstanceShardArrayOutput {
	return o
}

func (o InstanceInstanceShardArrayOutput) ToInstanceInstanceShardArrayOutputWithContext(ctx context.Context) InstanceInstanceShardArrayOutput {
	return o
}

func (o InstanceInstanceShardArrayOutput) Index(i pulumi.IntInput) InstanceInstanceShardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceInstanceShard {
		return vs[0].([]InstanceInstanceShard)[vs[1].(int)]
	}).(InstanceInstanceShardOutput)
}

type InstanceInstanceShardServerNode struct {
	// 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
	CurrentRole *string `pulumi:"currentRole"`
	// 节点 ID。
	NodeId *string `pulumi:"nodeId"`
	// 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
	Status *string `pulumi:"status"`
	// 节点所在的可用区。
	ZoneId *string `pulumi:"zoneId"`
}

// InstanceInstanceShardServerNodeInput is an input type that accepts InstanceInstanceShardServerNodeArgs and InstanceInstanceShardServerNodeOutput values.
// You can construct a concrete instance of `InstanceInstanceShardServerNodeInput` via:
//
//	InstanceInstanceShardServerNodeArgs{...}
type InstanceInstanceShardServerNodeInput interface {
	pulumi.Input

	ToInstanceInstanceShardServerNodeOutput() InstanceInstanceShardServerNodeOutput
	ToInstanceInstanceShardServerNodeOutputWithContext(context.Context) InstanceInstanceShardServerNodeOutput
}

type InstanceInstanceShardServerNodeArgs struct {
	// 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
	CurrentRole pulumi.StringPtrInput `pulumi:"currentRole"`
	// 节点 ID。
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
	Status pulumi.StringPtrInput `pulumi:"status"`
	// 节点所在的可用区。
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (InstanceInstanceShardServerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInstanceShardServerNode)(nil)).Elem()
}

func (i InstanceInstanceShardServerNodeArgs) ToInstanceInstanceShardServerNodeOutput() InstanceInstanceShardServerNodeOutput {
	return i.ToInstanceInstanceShardServerNodeOutputWithContext(context.Background())
}

func (i InstanceInstanceShardServerNodeArgs) ToInstanceInstanceShardServerNodeOutputWithContext(ctx context.Context) InstanceInstanceShardServerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInstanceShardServerNodeOutput)
}

// InstanceInstanceShardServerNodeArrayInput is an input type that accepts InstanceInstanceShardServerNodeArray and InstanceInstanceShardServerNodeArrayOutput values.
// You can construct a concrete instance of `InstanceInstanceShardServerNodeArrayInput` via:
//
//	InstanceInstanceShardServerNodeArray{ InstanceInstanceShardServerNodeArgs{...} }
type InstanceInstanceShardServerNodeArrayInput interface {
	pulumi.Input

	ToInstanceInstanceShardServerNodeArrayOutput() InstanceInstanceShardServerNodeArrayOutput
	ToInstanceInstanceShardServerNodeArrayOutputWithContext(context.Context) InstanceInstanceShardServerNodeArrayOutput
}

type InstanceInstanceShardServerNodeArray []InstanceInstanceShardServerNodeInput

func (InstanceInstanceShardServerNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceInstanceShardServerNode)(nil)).Elem()
}

func (i InstanceInstanceShardServerNodeArray) ToInstanceInstanceShardServerNodeArrayOutput() InstanceInstanceShardServerNodeArrayOutput {
	return i.ToInstanceInstanceShardServerNodeArrayOutputWithContext(context.Background())
}

func (i InstanceInstanceShardServerNodeArray) ToInstanceInstanceShardServerNodeArrayOutputWithContext(ctx context.Context) InstanceInstanceShardServerNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceInstanceShardServerNodeArrayOutput)
}

type InstanceInstanceShardServerNodeOutput struct{ *pulumi.OutputState }

func (InstanceInstanceShardServerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceInstanceShardServerNode)(nil)).Elem()
}

func (o InstanceInstanceShardServerNodeOutput) ToInstanceInstanceShardServerNodeOutput() InstanceInstanceShardServerNodeOutput {
	return o
}

func (o InstanceInstanceShardServerNodeOutput) ToInstanceInstanceShardServerNodeOutputWithContext(ctx context.Context) InstanceInstanceShardServerNodeOutput {
	return o
}

// 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
func (o InstanceInstanceShardServerNodeOutput) CurrentRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInstanceShardServerNode) *string { return v.CurrentRole }).(pulumi.StringPtrOutput)
}

// 节点 ID。
func (o InstanceInstanceShardServerNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInstanceShardServerNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
func (o InstanceInstanceShardServerNodeOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInstanceShardServerNode) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// 节点所在的可用区。
func (o InstanceInstanceShardServerNodeOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceInstanceShardServerNode) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type InstanceInstanceShardServerNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceInstanceShardServerNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceInstanceShardServerNode)(nil)).Elem()
}

func (o InstanceInstanceShardServerNodeArrayOutput) ToInstanceInstanceShardServerNodeArrayOutput() InstanceInstanceShardServerNodeArrayOutput {
	return o
}

func (o InstanceInstanceShardServerNodeArrayOutput) ToInstanceInstanceShardServerNodeArrayOutputWithContext(ctx context.Context) InstanceInstanceShardServerNodeArrayOutput {
	return o
}

func (o InstanceInstanceShardServerNodeArrayOutput) Index(i pulumi.IntInput) InstanceInstanceShardServerNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceInstanceShardServerNode {
		return vs[0].([]InstanceInstanceShardServerNode)[vs[1].(int)]
	}).(InstanceInstanceShardServerNodeOutput)
}

type InstanceTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// 标签键。
func (o InstanceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o InstanceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstanceVisitAddr struct {
	// 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
	AddrType *string `pulumi:"addrType"`
	// IP 地址或者域名。
	Address *string `pulumi:"address"`
	// 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
	EipId *string `pulumi:"eipId"`
	// 端口号。
	Port *string `pulumi:"port"`
	// 连接地址所对应的 IPv6 地址。
	ViPv6 *string `pulumi:"viPv6"`
	// 连接地址所对应的 IPv4 地址。
	Vip *string `pulumi:"vip"`
}

// InstanceVisitAddrInput is an input type that accepts InstanceVisitAddrArgs and InstanceVisitAddrOutput values.
// You can construct a concrete instance of `InstanceVisitAddrInput` via:
//
//	InstanceVisitAddrArgs{...}
type InstanceVisitAddrInput interface {
	pulumi.Input

	ToInstanceVisitAddrOutput() InstanceVisitAddrOutput
	ToInstanceVisitAddrOutputWithContext(context.Context) InstanceVisitAddrOutput
}

type InstanceVisitAddrArgs struct {
	// 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
	AddrType pulumi.StringPtrInput `pulumi:"addrType"`
	// IP 地址或者域名。
	Address pulumi.StringPtrInput `pulumi:"address"`
	// 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
	EipId pulumi.StringPtrInput `pulumi:"eipId"`
	// 端口号。
	Port pulumi.StringPtrInput `pulumi:"port"`
	// 连接地址所对应的 IPv6 地址。
	ViPv6 pulumi.StringPtrInput `pulumi:"viPv6"`
	// 连接地址所对应的 IPv4 地址。
	Vip pulumi.StringPtrInput `pulumi:"vip"`
}

func (InstanceVisitAddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceVisitAddr)(nil)).Elem()
}

func (i InstanceVisitAddrArgs) ToInstanceVisitAddrOutput() InstanceVisitAddrOutput {
	return i.ToInstanceVisitAddrOutputWithContext(context.Background())
}

func (i InstanceVisitAddrArgs) ToInstanceVisitAddrOutputWithContext(ctx context.Context) InstanceVisitAddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVisitAddrOutput)
}

// InstanceVisitAddrArrayInput is an input type that accepts InstanceVisitAddrArray and InstanceVisitAddrArrayOutput values.
// You can construct a concrete instance of `InstanceVisitAddrArrayInput` via:
//
//	InstanceVisitAddrArray{ InstanceVisitAddrArgs{...} }
type InstanceVisitAddrArrayInput interface {
	pulumi.Input

	ToInstanceVisitAddrArrayOutput() InstanceVisitAddrArrayOutput
	ToInstanceVisitAddrArrayOutputWithContext(context.Context) InstanceVisitAddrArrayOutput
}

type InstanceVisitAddrArray []InstanceVisitAddrInput

func (InstanceVisitAddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceVisitAddr)(nil)).Elem()
}

func (i InstanceVisitAddrArray) ToInstanceVisitAddrArrayOutput() InstanceVisitAddrArrayOutput {
	return i.ToInstanceVisitAddrArrayOutputWithContext(context.Background())
}

func (i InstanceVisitAddrArray) ToInstanceVisitAddrArrayOutputWithContext(ctx context.Context) InstanceVisitAddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceVisitAddrArrayOutput)
}

type InstanceVisitAddrOutput struct{ *pulumi.OutputState }

func (InstanceVisitAddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceVisitAddr)(nil)).Elem()
}

func (o InstanceVisitAddrOutput) ToInstanceVisitAddrOutput() InstanceVisitAddrOutput {
	return o
}

func (o InstanceVisitAddrOutput) ToInstanceVisitAddrOutputWithContext(ctx context.Context) InstanceVisitAddrOutput {
	return o
}

// 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
func (o InstanceVisitAddrOutput) AddrType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVisitAddr) *string { return v.AddrType }).(pulumi.StringPtrOutput)
}

// IP 地址或者域名。
func (o InstanceVisitAddrOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVisitAddr) *string { return v.Address }).(pulumi.StringPtrOutput)
}

// 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
func (o InstanceVisitAddrOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVisitAddr) *string { return v.EipId }).(pulumi.StringPtrOutput)
}

// 端口号。
func (o InstanceVisitAddrOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVisitAddr) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// 连接地址所对应的 IPv6 地址。
func (o InstanceVisitAddrOutput) ViPv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVisitAddr) *string { return v.ViPv6 }).(pulumi.StringPtrOutput)
}

// 连接地址所对应的 IPv4 地址。
func (o InstanceVisitAddrOutput) Vip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceVisitAddr) *string { return v.Vip }).(pulumi.StringPtrOutput)
}

type InstanceVisitAddrArrayOutput struct{ *pulumi.OutputState }

func (InstanceVisitAddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceVisitAddr)(nil)).Elem()
}

func (o InstanceVisitAddrArrayOutput) ToInstanceVisitAddrArrayOutput() InstanceVisitAddrArrayOutput {
	return o
}

func (o InstanceVisitAddrArrayOutput) ToInstanceVisitAddrArrayOutputWithContext(ctx context.Context) InstanceVisitAddrArrayOutput {
	return o
}

func (o InstanceVisitAddrArrayOutput) Index(i pulumi.IntInput) InstanceVisitAddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceVisitAddr {
		return vs[0].([]InstanceVisitAddr)[vs[1].(int)]
	}).(InstanceVisitAddrOutput)
}

type GetInstanceCapacity struct {
	// 当前实例的内存总容量。单位：MiB。
	Total int `pulumi:"total"`
	// 当前实例已用容量。单位：MiB。
	Used int `pulumi:"used"`
}

// GetInstanceCapacityInput is an input type that accepts GetInstanceCapacityArgs and GetInstanceCapacityOutput values.
// You can construct a concrete instance of `GetInstanceCapacityInput` via:
//
//	GetInstanceCapacityArgs{...}
type GetInstanceCapacityInput interface {
	pulumi.Input

	ToGetInstanceCapacityOutput() GetInstanceCapacityOutput
	ToGetInstanceCapacityOutputWithContext(context.Context) GetInstanceCapacityOutput
}

type GetInstanceCapacityArgs struct {
	// 当前实例的内存总容量。单位：MiB。
	Total pulumi.IntInput `pulumi:"total"`
	// 当前实例已用容量。单位：MiB。
	Used pulumi.IntInput `pulumi:"used"`
}

func (GetInstanceCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceCapacity)(nil)).Elem()
}

func (i GetInstanceCapacityArgs) ToGetInstanceCapacityOutput() GetInstanceCapacityOutput {
	return i.ToGetInstanceCapacityOutputWithContext(context.Background())
}

func (i GetInstanceCapacityArgs) ToGetInstanceCapacityOutputWithContext(ctx context.Context) GetInstanceCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceCapacityOutput)
}

type GetInstanceCapacityOutput struct{ *pulumi.OutputState }

func (GetInstanceCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceCapacity)(nil)).Elem()
}

func (o GetInstanceCapacityOutput) ToGetInstanceCapacityOutput() GetInstanceCapacityOutput {
	return o
}

func (o GetInstanceCapacityOutput) ToGetInstanceCapacityOutputWithContext(ctx context.Context) GetInstanceCapacityOutput {
	return o
}

// 当前实例的内存总容量。单位：MiB。
func (o GetInstanceCapacityOutput) Total() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceCapacity) int { return v.Total }).(pulumi.IntOutput)
}

// 当前实例已用容量。单位：MiB。
func (o GetInstanceCapacityOutput) Used() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceCapacity) int { return v.Used }).(pulumi.IntOutput)
}

type GetInstanceConfigureNode struct {
	// 每个节点所属的可用区。
	Az string `pulumi:"az"`
}

// GetInstanceConfigureNodeInput is an input type that accepts GetInstanceConfigureNodeArgs and GetInstanceConfigureNodeOutput values.
// You can construct a concrete instance of `GetInstanceConfigureNodeInput` via:
//
//	GetInstanceConfigureNodeArgs{...}
type GetInstanceConfigureNodeInput interface {
	pulumi.Input

	ToGetInstanceConfigureNodeOutput() GetInstanceConfigureNodeOutput
	ToGetInstanceConfigureNodeOutputWithContext(context.Context) GetInstanceConfigureNodeOutput
}

type GetInstanceConfigureNodeArgs struct {
	// 每个节点所属的可用区。
	Az pulumi.StringInput `pulumi:"az"`
}

func (GetInstanceConfigureNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigureNode)(nil)).Elem()
}

func (i GetInstanceConfigureNodeArgs) ToGetInstanceConfigureNodeOutput() GetInstanceConfigureNodeOutput {
	return i.ToGetInstanceConfigureNodeOutputWithContext(context.Background())
}

func (i GetInstanceConfigureNodeArgs) ToGetInstanceConfigureNodeOutputWithContext(ctx context.Context) GetInstanceConfigureNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigureNodeOutput)
}

// GetInstanceConfigureNodeArrayInput is an input type that accepts GetInstanceConfigureNodeArray and GetInstanceConfigureNodeArrayOutput values.
// You can construct a concrete instance of `GetInstanceConfigureNodeArrayInput` via:
//
//	GetInstanceConfigureNodeArray{ GetInstanceConfigureNodeArgs{...} }
type GetInstanceConfigureNodeArrayInput interface {
	pulumi.Input

	ToGetInstanceConfigureNodeArrayOutput() GetInstanceConfigureNodeArrayOutput
	ToGetInstanceConfigureNodeArrayOutputWithContext(context.Context) GetInstanceConfigureNodeArrayOutput
}

type GetInstanceConfigureNodeArray []GetInstanceConfigureNodeInput

func (GetInstanceConfigureNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceConfigureNode)(nil)).Elem()
}

func (i GetInstanceConfigureNodeArray) ToGetInstanceConfigureNodeArrayOutput() GetInstanceConfigureNodeArrayOutput {
	return i.ToGetInstanceConfigureNodeArrayOutputWithContext(context.Background())
}

func (i GetInstanceConfigureNodeArray) ToGetInstanceConfigureNodeArrayOutputWithContext(ctx context.Context) GetInstanceConfigureNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceConfigureNodeArrayOutput)
}

type GetInstanceConfigureNodeOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigureNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceConfigureNode)(nil)).Elem()
}

func (o GetInstanceConfigureNodeOutput) ToGetInstanceConfigureNodeOutput() GetInstanceConfigureNodeOutput {
	return o
}

func (o GetInstanceConfigureNodeOutput) ToGetInstanceConfigureNodeOutputWithContext(ctx context.Context) GetInstanceConfigureNodeOutput {
	return o
}

// 每个节点所属的可用区。
func (o GetInstanceConfigureNodeOutput) Az() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceConfigureNode) string { return v.Az }).(pulumi.StringOutput)
}

type GetInstanceConfigureNodeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceConfigureNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceConfigureNode)(nil)).Elem()
}

func (o GetInstanceConfigureNodeArrayOutput) ToGetInstanceConfigureNodeArrayOutput() GetInstanceConfigureNodeArrayOutput {
	return o
}

func (o GetInstanceConfigureNodeArrayOutput) ToGetInstanceConfigureNodeArrayOutputWithContext(ctx context.Context) GetInstanceConfigureNodeArrayOutput {
	return o
}

func (o GetInstanceConfigureNodeArrayOutput) Index(i pulumi.IntInput) GetInstanceConfigureNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceConfigureNode {
		return vs[0].([]GetInstanceConfigureNode)[vs[1].(int)]
	}).(GetInstanceConfigureNodeOutput)
}

type GetInstanceInstanceShard struct {
	// 分片中的节点数量
	NodeNumber int `pulumi:"nodeNumber"`
	// 分片中所有 Server 节点的详情列表。
	ServerNodes []GetInstanceInstanceShardServerNode `pulumi:"serverNodes"`
	// 分片 ID。
	ShardId string `pulumi:"shardId"`
}

// GetInstanceInstanceShardInput is an input type that accepts GetInstanceInstanceShardArgs and GetInstanceInstanceShardOutput values.
// You can construct a concrete instance of `GetInstanceInstanceShardInput` via:
//
//	GetInstanceInstanceShardArgs{...}
type GetInstanceInstanceShardInput interface {
	pulumi.Input

	ToGetInstanceInstanceShardOutput() GetInstanceInstanceShardOutput
	ToGetInstanceInstanceShardOutputWithContext(context.Context) GetInstanceInstanceShardOutput
}

type GetInstanceInstanceShardArgs struct {
	// 分片中的节点数量
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// 分片中所有 Server 节点的详情列表。
	ServerNodes GetInstanceInstanceShardServerNodeArrayInput `pulumi:"serverNodes"`
	// 分片 ID。
	ShardId pulumi.StringInput `pulumi:"shardId"`
}

func (GetInstanceInstanceShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceInstanceShard)(nil)).Elem()
}

func (i GetInstanceInstanceShardArgs) ToGetInstanceInstanceShardOutput() GetInstanceInstanceShardOutput {
	return i.ToGetInstanceInstanceShardOutputWithContext(context.Background())
}

func (i GetInstanceInstanceShardArgs) ToGetInstanceInstanceShardOutputWithContext(ctx context.Context) GetInstanceInstanceShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceInstanceShardOutput)
}

// GetInstanceInstanceShardArrayInput is an input type that accepts GetInstanceInstanceShardArray and GetInstanceInstanceShardArrayOutput values.
// You can construct a concrete instance of `GetInstanceInstanceShardArrayInput` via:
//
//	GetInstanceInstanceShardArray{ GetInstanceInstanceShardArgs{...} }
type GetInstanceInstanceShardArrayInput interface {
	pulumi.Input

	ToGetInstanceInstanceShardArrayOutput() GetInstanceInstanceShardArrayOutput
	ToGetInstanceInstanceShardArrayOutputWithContext(context.Context) GetInstanceInstanceShardArrayOutput
}

type GetInstanceInstanceShardArray []GetInstanceInstanceShardInput

func (GetInstanceInstanceShardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceInstanceShard)(nil)).Elem()
}

func (i GetInstanceInstanceShardArray) ToGetInstanceInstanceShardArrayOutput() GetInstanceInstanceShardArrayOutput {
	return i.ToGetInstanceInstanceShardArrayOutputWithContext(context.Background())
}

func (i GetInstanceInstanceShardArray) ToGetInstanceInstanceShardArrayOutputWithContext(ctx context.Context) GetInstanceInstanceShardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceInstanceShardArrayOutput)
}

type GetInstanceInstanceShardOutput struct{ *pulumi.OutputState }

func (GetInstanceInstanceShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceInstanceShard)(nil)).Elem()
}

func (o GetInstanceInstanceShardOutput) ToGetInstanceInstanceShardOutput() GetInstanceInstanceShardOutput {
	return o
}

func (o GetInstanceInstanceShardOutput) ToGetInstanceInstanceShardOutputWithContext(ctx context.Context) GetInstanceInstanceShardOutput {
	return o
}

// 分片中的节点数量
func (o GetInstanceInstanceShardOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceInstanceShard) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// 分片中所有 Server 节点的详情列表。
func (o GetInstanceInstanceShardOutput) ServerNodes() GetInstanceInstanceShardServerNodeArrayOutput {
	return o.ApplyT(func(v GetInstanceInstanceShard) []GetInstanceInstanceShardServerNode { return v.ServerNodes }).(GetInstanceInstanceShardServerNodeArrayOutput)
}

// 分片 ID。
func (o GetInstanceInstanceShardOutput) ShardId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceInstanceShard) string { return v.ShardId }).(pulumi.StringOutput)
}

type GetInstanceInstanceShardArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceInstanceShardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceInstanceShard)(nil)).Elem()
}

func (o GetInstanceInstanceShardArrayOutput) ToGetInstanceInstanceShardArrayOutput() GetInstanceInstanceShardArrayOutput {
	return o
}

func (o GetInstanceInstanceShardArrayOutput) ToGetInstanceInstanceShardArrayOutputWithContext(ctx context.Context) GetInstanceInstanceShardArrayOutput {
	return o
}

func (o GetInstanceInstanceShardArrayOutput) Index(i pulumi.IntInput) GetInstanceInstanceShardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceInstanceShard {
		return vs[0].([]GetInstanceInstanceShard)[vs[1].(int)]
	}).(GetInstanceInstanceShardOutput)
}

type GetInstanceInstanceShardServerNode struct {
	// 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
	CurrentRole string `pulumi:"currentRole"`
	// 节点 ID。
	NodeId string `pulumi:"nodeId"`
	// 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
	Status string `pulumi:"status"`
	// 节点所在的可用区。
	ZoneId string `pulumi:"zoneId"`
}

// GetInstanceInstanceShardServerNodeInput is an input type that accepts GetInstanceInstanceShardServerNodeArgs and GetInstanceInstanceShardServerNodeOutput values.
// You can construct a concrete instance of `GetInstanceInstanceShardServerNodeInput` via:
//
//	GetInstanceInstanceShardServerNodeArgs{...}
type GetInstanceInstanceShardServerNodeInput interface {
	pulumi.Input

	ToGetInstanceInstanceShardServerNodeOutput() GetInstanceInstanceShardServerNodeOutput
	ToGetInstanceInstanceShardServerNodeOutputWithContext(context.Context) GetInstanceInstanceShardServerNodeOutput
}

type GetInstanceInstanceShardServerNodeArgs struct {
	// 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
	CurrentRole pulumi.StringInput `pulumi:"currentRole"`
	// 节点 ID。
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
	Status pulumi.StringInput `pulumi:"status"`
	// 节点所在的可用区。
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstanceInstanceShardServerNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceInstanceShardServerNode)(nil)).Elem()
}

func (i GetInstanceInstanceShardServerNodeArgs) ToGetInstanceInstanceShardServerNodeOutput() GetInstanceInstanceShardServerNodeOutput {
	return i.ToGetInstanceInstanceShardServerNodeOutputWithContext(context.Background())
}

func (i GetInstanceInstanceShardServerNodeArgs) ToGetInstanceInstanceShardServerNodeOutputWithContext(ctx context.Context) GetInstanceInstanceShardServerNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceInstanceShardServerNodeOutput)
}

// GetInstanceInstanceShardServerNodeArrayInput is an input type that accepts GetInstanceInstanceShardServerNodeArray and GetInstanceInstanceShardServerNodeArrayOutput values.
// You can construct a concrete instance of `GetInstanceInstanceShardServerNodeArrayInput` via:
//
//	GetInstanceInstanceShardServerNodeArray{ GetInstanceInstanceShardServerNodeArgs{...} }
type GetInstanceInstanceShardServerNodeArrayInput interface {
	pulumi.Input

	ToGetInstanceInstanceShardServerNodeArrayOutput() GetInstanceInstanceShardServerNodeArrayOutput
	ToGetInstanceInstanceShardServerNodeArrayOutputWithContext(context.Context) GetInstanceInstanceShardServerNodeArrayOutput
}

type GetInstanceInstanceShardServerNodeArray []GetInstanceInstanceShardServerNodeInput

func (GetInstanceInstanceShardServerNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceInstanceShardServerNode)(nil)).Elem()
}

func (i GetInstanceInstanceShardServerNodeArray) ToGetInstanceInstanceShardServerNodeArrayOutput() GetInstanceInstanceShardServerNodeArrayOutput {
	return i.ToGetInstanceInstanceShardServerNodeArrayOutputWithContext(context.Background())
}

func (i GetInstanceInstanceShardServerNodeArray) ToGetInstanceInstanceShardServerNodeArrayOutputWithContext(ctx context.Context) GetInstanceInstanceShardServerNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceInstanceShardServerNodeArrayOutput)
}

type GetInstanceInstanceShardServerNodeOutput struct{ *pulumi.OutputState }

func (GetInstanceInstanceShardServerNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceInstanceShardServerNode)(nil)).Elem()
}

func (o GetInstanceInstanceShardServerNodeOutput) ToGetInstanceInstanceShardServerNodeOutput() GetInstanceInstanceShardServerNodeOutput {
	return o
}

func (o GetInstanceInstanceShardServerNodeOutput) ToGetInstanceInstanceShardServerNodeOutputWithContext(ctx context.Context) GetInstanceInstanceShardServerNodeOutput {
	return o
}

// 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
func (o GetInstanceInstanceShardServerNodeOutput) CurrentRole() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceInstanceShardServerNode) string { return v.CurrentRole }).(pulumi.StringOutput)
}

// 节点 ID。
func (o GetInstanceInstanceShardServerNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceInstanceShardServerNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
func (o GetInstanceInstanceShardServerNodeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceInstanceShardServerNode) string { return v.Status }).(pulumi.StringOutput)
}

// 节点所在的可用区。
func (o GetInstanceInstanceShardServerNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceInstanceShardServerNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstanceInstanceShardServerNodeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceInstanceShardServerNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceInstanceShardServerNode)(nil)).Elem()
}

func (o GetInstanceInstanceShardServerNodeArrayOutput) ToGetInstanceInstanceShardServerNodeArrayOutput() GetInstanceInstanceShardServerNodeArrayOutput {
	return o
}

func (o GetInstanceInstanceShardServerNodeArrayOutput) ToGetInstanceInstanceShardServerNodeArrayOutputWithContext(ctx context.Context) GetInstanceInstanceShardServerNodeArrayOutput {
	return o
}

func (o GetInstanceInstanceShardServerNodeArrayOutput) Index(i pulumi.IntInput) GetInstanceInstanceShardServerNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceInstanceShardServerNode {
		return vs[0].([]GetInstanceInstanceShardServerNode)[vs[1].(int)]
	}).(GetInstanceInstanceShardServerNodeOutput)
}

type GetInstanceTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetInstanceTagInput is an input type that accepts GetInstanceTagArgs and GetInstanceTagOutput values.
// You can construct a concrete instance of `GetInstanceTagInput` via:
//
//	GetInstanceTagArgs{...}
type GetInstanceTagInput interface {
	pulumi.Input

	ToGetInstanceTagOutput() GetInstanceTagOutput
	ToGetInstanceTagOutputWithContext(context.Context) GetInstanceTagOutput
}

type GetInstanceTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTag)(nil)).Elem()
}

func (i GetInstanceTagArgs) ToGetInstanceTagOutput() GetInstanceTagOutput {
	return i.ToGetInstanceTagOutputWithContext(context.Background())
}

func (i GetInstanceTagArgs) ToGetInstanceTagOutputWithContext(ctx context.Context) GetInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTagOutput)
}

// GetInstanceTagArrayInput is an input type that accepts GetInstanceTagArray and GetInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstanceTagArrayInput` via:
//
//	GetInstanceTagArray{ GetInstanceTagArgs{...} }
type GetInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstanceTagArrayOutput() GetInstanceTagArrayOutput
	ToGetInstanceTagArrayOutputWithContext(context.Context) GetInstanceTagArrayOutput
}

type GetInstanceTagArray []GetInstanceTagInput

func (GetInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTag)(nil)).Elem()
}

func (i GetInstanceTagArray) ToGetInstanceTagArrayOutput() GetInstanceTagArrayOutput {
	return i.ToGetInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstanceTagArray) ToGetInstanceTagArrayOutputWithContext(ctx context.Context) GetInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTagArrayOutput)
}

type GetInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTag)(nil)).Elem()
}

func (o GetInstanceTagOutput) ToGetInstanceTagOutput() GetInstanceTagOutput {
	return o
}

func (o GetInstanceTagOutput) ToGetInstanceTagOutputWithContext(ctx context.Context) GetInstanceTagOutput {
	return o
}

// 标签键。
func (o GetInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTag)(nil)).Elem()
}

func (o GetInstanceTagArrayOutput) ToGetInstanceTagArrayOutput() GetInstanceTagArrayOutput {
	return o
}

func (o GetInstanceTagArrayOutput) ToGetInstanceTagArrayOutputWithContext(ctx context.Context) GetInstanceTagArrayOutput {
	return o
}

func (o GetInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTag {
		return vs[0].([]GetInstanceTag)[vs[1].(int)]
	}).(GetInstanceTagOutput)
}

type GetInstanceVisitAddr struct {
	// 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
	AddrType string `pulumi:"addrType"`
	// IP 地址或者域名。
	Address string `pulumi:"address"`
	// 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
	EipId string `pulumi:"eipId"`
	// 端口号。
	Port string `pulumi:"port"`
	// 连接地址所对应的 IPv6 地址。
	ViPv6 string `pulumi:"viPv6"`
	// 连接地址所对应的 IPv4 地址。
	Vip string `pulumi:"vip"`
}

// GetInstanceVisitAddrInput is an input type that accepts GetInstanceVisitAddrArgs and GetInstanceVisitAddrOutput values.
// You can construct a concrete instance of `GetInstanceVisitAddrInput` via:
//
//	GetInstanceVisitAddrArgs{...}
type GetInstanceVisitAddrInput interface {
	pulumi.Input

	ToGetInstanceVisitAddrOutput() GetInstanceVisitAddrOutput
	ToGetInstanceVisitAddrOutputWithContext(context.Context) GetInstanceVisitAddrOutput
}

type GetInstanceVisitAddrArgs struct {
	// 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
	AddrType pulumi.StringInput `pulumi:"addrType"`
	// IP 地址或者域名。
	Address pulumi.StringInput `pulumi:"address"`
	// 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
	EipId pulumi.StringInput `pulumi:"eipId"`
	// 端口号。
	Port pulumi.StringInput `pulumi:"port"`
	// 连接地址所对应的 IPv6 地址。
	ViPv6 pulumi.StringInput `pulumi:"viPv6"`
	// 连接地址所对应的 IPv4 地址。
	Vip pulumi.StringInput `pulumi:"vip"`
}

func (GetInstanceVisitAddrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVisitAddr)(nil)).Elem()
}

func (i GetInstanceVisitAddrArgs) ToGetInstanceVisitAddrOutput() GetInstanceVisitAddrOutput {
	return i.ToGetInstanceVisitAddrOutputWithContext(context.Background())
}

func (i GetInstanceVisitAddrArgs) ToGetInstanceVisitAddrOutputWithContext(ctx context.Context) GetInstanceVisitAddrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVisitAddrOutput)
}

// GetInstanceVisitAddrArrayInput is an input type that accepts GetInstanceVisitAddrArray and GetInstanceVisitAddrArrayOutput values.
// You can construct a concrete instance of `GetInstanceVisitAddrArrayInput` via:
//
//	GetInstanceVisitAddrArray{ GetInstanceVisitAddrArgs{...} }
type GetInstanceVisitAddrArrayInput interface {
	pulumi.Input

	ToGetInstanceVisitAddrArrayOutput() GetInstanceVisitAddrArrayOutput
	ToGetInstanceVisitAddrArrayOutputWithContext(context.Context) GetInstanceVisitAddrArrayOutput
}

type GetInstanceVisitAddrArray []GetInstanceVisitAddrInput

func (GetInstanceVisitAddrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVisitAddr)(nil)).Elem()
}

func (i GetInstanceVisitAddrArray) ToGetInstanceVisitAddrArrayOutput() GetInstanceVisitAddrArrayOutput {
	return i.ToGetInstanceVisitAddrArrayOutputWithContext(context.Background())
}

func (i GetInstanceVisitAddrArray) ToGetInstanceVisitAddrArrayOutputWithContext(ctx context.Context) GetInstanceVisitAddrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceVisitAddrArrayOutput)
}

type GetInstanceVisitAddrOutput struct{ *pulumi.OutputState }

func (GetInstanceVisitAddrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceVisitAddr)(nil)).Elem()
}

func (o GetInstanceVisitAddrOutput) ToGetInstanceVisitAddrOutput() GetInstanceVisitAddrOutput {
	return o
}

func (o GetInstanceVisitAddrOutput) ToGetInstanceVisitAddrOutputWithContext(ctx context.Context) GetInstanceVisitAddrOutput {
	return o
}

// 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
func (o GetInstanceVisitAddrOutput) AddrType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVisitAddr) string { return v.AddrType }).(pulumi.StringOutput)
}

// IP 地址或者域名。
func (o GetInstanceVisitAddrOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVisitAddr) string { return v.Address }).(pulumi.StringOutput)
}

// 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
func (o GetInstanceVisitAddrOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVisitAddr) string { return v.EipId }).(pulumi.StringOutput)
}

// 端口号。
func (o GetInstanceVisitAddrOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVisitAddr) string { return v.Port }).(pulumi.StringOutput)
}

// 连接地址所对应的 IPv6 地址。
func (o GetInstanceVisitAddrOutput) ViPv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVisitAddr) string { return v.ViPv6 }).(pulumi.StringOutput)
}

// 连接地址所对应的 IPv4 地址。
func (o GetInstanceVisitAddrOutput) Vip() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceVisitAddr) string { return v.Vip }).(pulumi.StringOutput)
}

type GetInstanceVisitAddrArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceVisitAddrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceVisitAddr)(nil)).Elem()
}

func (o GetInstanceVisitAddrArrayOutput) ToGetInstanceVisitAddrArrayOutput() GetInstanceVisitAddrArrayOutput {
	return o
}

func (o GetInstanceVisitAddrArrayOutput) ToGetInstanceVisitAddrArrayOutputWithContext(ctx context.Context) GetInstanceVisitAddrArrayOutput {
	return o
}

func (o GetInstanceVisitAddrArrayOutput) Index(i pulumi.IntInput) GetInstanceVisitAddrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceVisitAddr {
		return vs[0].([]GetInstanceVisitAddr)[vs[1].(int)]
	}).(GetInstanceVisitAddrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCapacityInput)(nil)).Elem(), InstanceCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCapacityPtrInput)(nil)).Elem(), InstanceCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigureNodeInput)(nil)).Elem(), InstanceConfigureNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceConfigureNodeArrayInput)(nil)).Elem(), InstanceConfigureNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInstanceShardInput)(nil)).Elem(), InstanceInstanceShardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInstanceShardArrayInput)(nil)).Elem(), InstanceInstanceShardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInstanceShardServerNodeInput)(nil)).Elem(), InstanceInstanceShardServerNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInstanceShardServerNodeArrayInput)(nil)).Elem(), InstanceInstanceShardServerNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceVisitAddrInput)(nil)).Elem(), InstanceVisitAddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceVisitAddrArrayInput)(nil)).Elem(), InstanceVisitAddrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceCapacityInput)(nil)).Elem(), GetInstanceCapacityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigureNodeInput)(nil)).Elem(), GetInstanceConfigureNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceConfigureNodeArrayInput)(nil)).Elem(), GetInstanceConfigureNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceInstanceShardInput)(nil)).Elem(), GetInstanceInstanceShardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceInstanceShardArrayInput)(nil)).Elem(), GetInstanceInstanceShardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceInstanceShardServerNodeInput)(nil)).Elem(), GetInstanceInstanceShardServerNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceInstanceShardServerNodeArrayInput)(nil)).Elem(), GetInstanceInstanceShardServerNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTagInput)(nil)).Elem(), GetInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTagArrayInput)(nil)).Elem(), GetInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVisitAddrInput)(nil)).Elem(), GetInstanceVisitAddrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceVisitAddrArrayInput)(nil)).Elem(), GetInstanceVisitAddrArray{})
	pulumi.RegisterOutputType(InstanceCapacityOutput{})
	pulumi.RegisterOutputType(InstanceCapacityPtrOutput{})
	pulumi.RegisterOutputType(InstanceConfigureNodeOutput{})
	pulumi.RegisterOutputType(InstanceConfigureNodeArrayOutput{})
	pulumi.RegisterOutputType(InstanceInstanceShardOutput{})
	pulumi.RegisterOutputType(InstanceInstanceShardArrayOutput{})
	pulumi.RegisterOutputType(InstanceInstanceShardServerNodeOutput{})
	pulumi.RegisterOutputType(InstanceInstanceShardServerNodeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstanceVisitAddrOutput{})
	pulumi.RegisterOutputType(InstanceVisitAddrArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceCapacityOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigureNodeOutput{})
	pulumi.RegisterOutputType(GetInstanceConfigureNodeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceInstanceShardOutput{})
	pulumi.RegisterOutputType(GetInstanceInstanceShardArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceInstanceShardServerNodeOutput{})
	pulumi.RegisterOutputType(GetInstanceInstanceShardServerNodeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceVisitAddrOutput{})
	pulumi.RegisterOutputType(GetInstanceVisitAddrArrayOutput{})
}
