// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package storageebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type VolumeBaselinePerformance struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops *float64 `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput *float64 `pulumi:"throughput"`
}

// VolumeBaselinePerformanceInput is an input type that accepts VolumeBaselinePerformanceArgs and VolumeBaselinePerformanceOutput values.
// You can construct a concrete instance of `VolumeBaselinePerformanceInput` via:
//
//	VolumeBaselinePerformanceArgs{...}
type VolumeBaselinePerformanceInput interface {
	pulumi.Input

	ToVolumeBaselinePerformanceOutput() VolumeBaselinePerformanceOutput
	ToVolumeBaselinePerformanceOutputWithContext(context.Context) VolumeBaselinePerformanceOutput
}

type VolumeBaselinePerformanceArgs struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops pulumi.Float64PtrInput `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput pulumi.Float64PtrInput `pulumi:"throughput"`
}

func (VolumeBaselinePerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBaselinePerformance)(nil)).Elem()
}

func (i VolumeBaselinePerformanceArgs) ToVolumeBaselinePerformanceOutput() VolumeBaselinePerformanceOutput {
	return i.ToVolumeBaselinePerformanceOutputWithContext(context.Background())
}

func (i VolumeBaselinePerformanceArgs) ToVolumeBaselinePerformanceOutputWithContext(ctx context.Context) VolumeBaselinePerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBaselinePerformanceOutput)
}

func (i VolumeBaselinePerformanceArgs) ToVolumeBaselinePerformancePtrOutput() VolumeBaselinePerformancePtrOutput {
	return i.ToVolumeBaselinePerformancePtrOutputWithContext(context.Background())
}

func (i VolumeBaselinePerformanceArgs) ToVolumeBaselinePerformancePtrOutputWithContext(ctx context.Context) VolumeBaselinePerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBaselinePerformanceOutput).ToVolumeBaselinePerformancePtrOutputWithContext(ctx)
}

// VolumeBaselinePerformancePtrInput is an input type that accepts VolumeBaselinePerformanceArgs, VolumeBaselinePerformancePtr and VolumeBaselinePerformancePtrOutput values.
// You can construct a concrete instance of `VolumeBaselinePerformancePtrInput` via:
//
//	        VolumeBaselinePerformanceArgs{...}
//
//	or:
//
//	        nil
type VolumeBaselinePerformancePtrInput interface {
	pulumi.Input

	ToVolumeBaselinePerformancePtrOutput() VolumeBaselinePerformancePtrOutput
	ToVolumeBaselinePerformancePtrOutputWithContext(context.Context) VolumeBaselinePerformancePtrOutput
}

type volumeBaselinePerformancePtrType VolumeBaselinePerformanceArgs

func VolumeBaselinePerformancePtr(v *VolumeBaselinePerformanceArgs) VolumeBaselinePerformancePtrInput {
	return (*volumeBaselinePerformancePtrType)(v)
}

func (*volumeBaselinePerformancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBaselinePerformance)(nil)).Elem()
}

func (i *volumeBaselinePerformancePtrType) ToVolumeBaselinePerformancePtrOutput() VolumeBaselinePerformancePtrOutput {
	return i.ToVolumeBaselinePerformancePtrOutputWithContext(context.Background())
}

func (i *volumeBaselinePerformancePtrType) ToVolumeBaselinePerformancePtrOutputWithContext(ctx context.Context) VolumeBaselinePerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeBaselinePerformancePtrOutput)
}

type VolumeBaselinePerformanceOutput struct{ *pulumi.OutputState }

func (VolumeBaselinePerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeBaselinePerformance)(nil)).Elem()
}

func (o VolumeBaselinePerformanceOutput) ToVolumeBaselinePerformanceOutput() VolumeBaselinePerformanceOutput {
	return o
}

func (o VolumeBaselinePerformanceOutput) ToVolumeBaselinePerformanceOutputWithContext(ctx context.Context) VolumeBaselinePerformanceOutput {
	return o
}

func (o VolumeBaselinePerformanceOutput) ToVolumeBaselinePerformancePtrOutput() VolumeBaselinePerformancePtrOutput {
	return o.ToVolumeBaselinePerformancePtrOutputWithContext(context.Background())
}

func (o VolumeBaselinePerformanceOutput) ToVolumeBaselinePerformancePtrOutputWithContext(ctx context.Context) VolumeBaselinePerformancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeBaselinePerformance) *VolumeBaselinePerformance {
		return &v
	}).(VolumeBaselinePerformancePtrOutput)
}

// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
func (o VolumeBaselinePerformanceOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeBaselinePerformance) *float64 { return v.Iops }).(pulumi.Float64PtrOutput)
}

// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
func (o VolumeBaselinePerformanceOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeBaselinePerformance) *float64 { return v.Throughput }).(pulumi.Float64PtrOutput)
}

type VolumeBaselinePerformancePtrOutput struct{ *pulumi.OutputState }

func (VolumeBaselinePerformancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeBaselinePerformance)(nil)).Elem()
}

func (o VolumeBaselinePerformancePtrOutput) ToVolumeBaselinePerformancePtrOutput() VolumeBaselinePerformancePtrOutput {
	return o
}

func (o VolumeBaselinePerformancePtrOutput) ToVolumeBaselinePerformancePtrOutputWithContext(ctx context.Context) VolumeBaselinePerformancePtrOutput {
	return o
}

func (o VolumeBaselinePerformancePtrOutput) Elem() VolumeBaselinePerformanceOutput {
	return o.ApplyT(func(v *VolumeBaselinePerformance) VolumeBaselinePerformance {
		if v != nil {
			return *v
		}
		var ret VolumeBaselinePerformance
		return ret
	}).(VolumeBaselinePerformanceOutput)
}

// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
func (o VolumeBaselinePerformancePtrOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeBaselinePerformance) *float64 {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.Float64PtrOutput)
}

// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
func (o VolumeBaselinePerformancePtrOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeBaselinePerformance) *float64 {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.Float64PtrOutput)
}

type VolumeExtraPerformance struct {
	// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
	ExtraPerformanceTypeId *string `pulumi:"extraPerformanceTypeId"`
	// 云盘的额外IOPS。
	Iops *float64 `pulumi:"iops"`
	// 云盘的额外吞吐量。
	Throughput *float64 `pulumi:"throughput"`
}

// VolumeExtraPerformanceInput is an input type that accepts VolumeExtraPerformanceArgs and VolumeExtraPerformanceOutput values.
// You can construct a concrete instance of `VolumeExtraPerformanceInput` via:
//
//	VolumeExtraPerformanceArgs{...}
type VolumeExtraPerformanceInput interface {
	pulumi.Input

	ToVolumeExtraPerformanceOutput() VolumeExtraPerformanceOutput
	ToVolumeExtraPerformanceOutputWithContext(context.Context) VolumeExtraPerformanceOutput
}

type VolumeExtraPerformanceArgs struct {
	// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
	ExtraPerformanceTypeId pulumi.StringPtrInput `pulumi:"extraPerformanceTypeId"`
	// 云盘的额外IOPS。
	Iops pulumi.Float64PtrInput `pulumi:"iops"`
	// 云盘的额外吞吐量。
	Throughput pulumi.Float64PtrInput `pulumi:"throughput"`
}

func (VolumeExtraPerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExtraPerformance)(nil)).Elem()
}

func (i VolumeExtraPerformanceArgs) ToVolumeExtraPerformanceOutput() VolumeExtraPerformanceOutput {
	return i.ToVolumeExtraPerformanceOutputWithContext(context.Background())
}

func (i VolumeExtraPerformanceArgs) ToVolumeExtraPerformanceOutputWithContext(ctx context.Context) VolumeExtraPerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExtraPerformanceOutput)
}

func (i VolumeExtraPerformanceArgs) ToVolumeExtraPerformancePtrOutput() VolumeExtraPerformancePtrOutput {
	return i.ToVolumeExtraPerformancePtrOutputWithContext(context.Background())
}

func (i VolumeExtraPerformanceArgs) ToVolumeExtraPerformancePtrOutputWithContext(ctx context.Context) VolumeExtraPerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExtraPerformanceOutput).ToVolumeExtraPerformancePtrOutputWithContext(ctx)
}

// VolumeExtraPerformancePtrInput is an input type that accepts VolumeExtraPerformanceArgs, VolumeExtraPerformancePtr and VolumeExtraPerformancePtrOutput values.
// You can construct a concrete instance of `VolumeExtraPerformancePtrInput` via:
//
//	        VolumeExtraPerformanceArgs{...}
//
//	or:
//
//	        nil
type VolumeExtraPerformancePtrInput interface {
	pulumi.Input

	ToVolumeExtraPerformancePtrOutput() VolumeExtraPerformancePtrOutput
	ToVolumeExtraPerformancePtrOutputWithContext(context.Context) VolumeExtraPerformancePtrOutput
}

type volumeExtraPerformancePtrType VolumeExtraPerformanceArgs

func VolumeExtraPerformancePtr(v *VolumeExtraPerformanceArgs) VolumeExtraPerformancePtrInput {
	return (*volumeExtraPerformancePtrType)(v)
}

func (*volumeExtraPerformancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeExtraPerformance)(nil)).Elem()
}

func (i *volumeExtraPerformancePtrType) ToVolumeExtraPerformancePtrOutput() VolumeExtraPerformancePtrOutput {
	return i.ToVolumeExtraPerformancePtrOutputWithContext(context.Background())
}

func (i *volumeExtraPerformancePtrType) ToVolumeExtraPerformancePtrOutputWithContext(ctx context.Context) VolumeExtraPerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeExtraPerformancePtrOutput)
}

type VolumeExtraPerformanceOutput struct{ *pulumi.OutputState }

func (VolumeExtraPerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeExtraPerformance)(nil)).Elem()
}

func (o VolumeExtraPerformanceOutput) ToVolumeExtraPerformanceOutput() VolumeExtraPerformanceOutput {
	return o
}

func (o VolumeExtraPerformanceOutput) ToVolumeExtraPerformanceOutputWithContext(ctx context.Context) VolumeExtraPerformanceOutput {
	return o
}

func (o VolumeExtraPerformanceOutput) ToVolumeExtraPerformancePtrOutput() VolumeExtraPerformancePtrOutput {
	return o.ToVolumeExtraPerformancePtrOutputWithContext(context.Background())
}

func (o VolumeExtraPerformanceOutput) ToVolumeExtraPerformancePtrOutputWithContext(ctx context.Context) VolumeExtraPerformancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeExtraPerformance) *VolumeExtraPerformance {
		return &v
	}).(VolumeExtraPerformancePtrOutput)
}

// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
func (o VolumeExtraPerformanceOutput) ExtraPerformanceTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VolumeExtraPerformance) *string { return v.ExtraPerformanceTypeId }).(pulumi.StringPtrOutput)
}

// 云盘的额外IOPS。
func (o VolumeExtraPerformanceOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeExtraPerformance) *float64 { return v.Iops }).(pulumi.Float64PtrOutput)
}

// 云盘的额外吞吐量。
func (o VolumeExtraPerformanceOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeExtraPerformance) *float64 { return v.Throughput }).(pulumi.Float64PtrOutput)
}

type VolumeExtraPerformancePtrOutput struct{ *pulumi.OutputState }

func (VolumeExtraPerformancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeExtraPerformance)(nil)).Elem()
}

func (o VolumeExtraPerformancePtrOutput) ToVolumeExtraPerformancePtrOutput() VolumeExtraPerformancePtrOutput {
	return o
}

func (o VolumeExtraPerformancePtrOutput) ToVolumeExtraPerformancePtrOutputWithContext(ctx context.Context) VolumeExtraPerformancePtrOutput {
	return o
}

func (o VolumeExtraPerformancePtrOutput) Elem() VolumeExtraPerformanceOutput {
	return o.ApplyT(func(v *VolumeExtraPerformance) VolumeExtraPerformance {
		if v != nil {
			return *v
		}
		var ret VolumeExtraPerformance
		return ret
	}).(VolumeExtraPerformanceOutput)
}

// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
func (o VolumeExtraPerformancePtrOutput) ExtraPerformanceTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeExtraPerformance) *string {
		if v == nil {
			return nil
		}
		return v.ExtraPerformanceTypeId
	}).(pulumi.StringPtrOutput)
}

// 云盘的额外IOPS。
func (o VolumeExtraPerformancePtrOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeExtraPerformance) *float64 {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.Float64PtrOutput)
}

// 云盘的额外吞吐量。
func (o VolumeExtraPerformancePtrOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeExtraPerformance) *float64 {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.Float64PtrOutput)
}

type VolumeTotalPerformance struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops *float64 `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput *float64 `pulumi:"throughput"`
}

// VolumeTotalPerformanceInput is an input type that accepts VolumeTotalPerformanceArgs and VolumeTotalPerformanceOutput values.
// You can construct a concrete instance of `VolumeTotalPerformanceInput` via:
//
//	VolumeTotalPerformanceArgs{...}
type VolumeTotalPerformanceInput interface {
	pulumi.Input

	ToVolumeTotalPerformanceOutput() VolumeTotalPerformanceOutput
	ToVolumeTotalPerformanceOutputWithContext(context.Context) VolumeTotalPerformanceOutput
}

type VolumeTotalPerformanceArgs struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops pulumi.Float64PtrInput `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput pulumi.Float64PtrInput `pulumi:"throughput"`
}

func (VolumeTotalPerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTotalPerformance)(nil)).Elem()
}

func (i VolumeTotalPerformanceArgs) ToVolumeTotalPerformanceOutput() VolumeTotalPerformanceOutput {
	return i.ToVolumeTotalPerformanceOutputWithContext(context.Background())
}

func (i VolumeTotalPerformanceArgs) ToVolumeTotalPerformanceOutputWithContext(ctx context.Context) VolumeTotalPerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTotalPerformanceOutput)
}

func (i VolumeTotalPerformanceArgs) ToVolumeTotalPerformancePtrOutput() VolumeTotalPerformancePtrOutput {
	return i.ToVolumeTotalPerformancePtrOutputWithContext(context.Background())
}

func (i VolumeTotalPerformanceArgs) ToVolumeTotalPerformancePtrOutputWithContext(ctx context.Context) VolumeTotalPerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTotalPerformanceOutput).ToVolumeTotalPerformancePtrOutputWithContext(ctx)
}

// VolumeTotalPerformancePtrInput is an input type that accepts VolumeTotalPerformanceArgs, VolumeTotalPerformancePtr and VolumeTotalPerformancePtrOutput values.
// You can construct a concrete instance of `VolumeTotalPerformancePtrInput` via:
//
//	        VolumeTotalPerformanceArgs{...}
//
//	or:
//
//	        nil
type VolumeTotalPerformancePtrInput interface {
	pulumi.Input

	ToVolumeTotalPerformancePtrOutput() VolumeTotalPerformancePtrOutput
	ToVolumeTotalPerformancePtrOutputWithContext(context.Context) VolumeTotalPerformancePtrOutput
}

type volumeTotalPerformancePtrType VolumeTotalPerformanceArgs

func VolumeTotalPerformancePtr(v *VolumeTotalPerformanceArgs) VolumeTotalPerformancePtrInput {
	return (*volumeTotalPerformancePtrType)(v)
}

func (*volumeTotalPerformancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTotalPerformance)(nil)).Elem()
}

func (i *volumeTotalPerformancePtrType) ToVolumeTotalPerformancePtrOutput() VolumeTotalPerformancePtrOutput {
	return i.ToVolumeTotalPerformancePtrOutputWithContext(context.Background())
}

func (i *volumeTotalPerformancePtrType) ToVolumeTotalPerformancePtrOutputWithContext(ctx context.Context) VolumeTotalPerformancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeTotalPerformancePtrOutput)
}

type VolumeTotalPerformanceOutput struct{ *pulumi.OutputState }

func (VolumeTotalPerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VolumeTotalPerformance)(nil)).Elem()
}

func (o VolumeTotalPerformanceOutput) ToVolumeTotalPerformanceOutput() VolumeTotalPerformanceOutput {
	return o
}

func (o VolumeTotalPerformanceOutput) ToVolumeTotalPerformanceOutputWithContext(ctx context.Context) VolumeTotalPerformanceOutput {
	return o
}

func (o VolumeTotalPerformanceOutput) ToVolumeTotalPerformancePtrOutput() VolumeTotalPerformancePtrOutput {
	return o.ToVolumeTotalPerformancePtrOutputWithContext(context.Background())
}

func (o VolumeTotalPerformanceOutput) ToVolumeTotalPerformancePtrOutputWithContext(ctx context.Context) VolumeTotalPerformancePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VolumeTotalPerformance) *VolumeTotalPerformance {
		return &v
	}).(VolumeTotalPerformancePtrOutput)
}

// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
func (o VolumeTotalPerformanceOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeTotalPerformance) *float64 { return v.Iops }).(pulumi.Float64PtrOutput)
}

// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
func (o VolumeTotalPerformanceOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v VolumeTotalPerformance) *float64 { return v.Throughput }).(pulumi.Float64PtrOutput)
}

type VolumeTotalPerformancePtrOutput struct{ *pulumi.OutputState }

func (VolumeTotalPerformancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeTotalPerformance)(nil)).Elem()
}

func (o VolumeTotalPerformancePtrOutput) ToVolumeTotalPerformancePtrOutput() VolumeTotalPerformancePtrOutput {
	return o
}

func (o VolumeTotalPerformancePtrOutput) ToVolumeTotalPerformancePtrOutputWithContext(ctx context.Context) VolumeTotalPerformancePtrOutput {
	return o
}

func (o VolumeTotalPerformancePtrOutput) Elem() VolumeTotalPerformanceOutput {
	return o.ApplyT(func(v *VolumeTotalPerformance) VolumeTotalPerformance {
		if v != nil {
			return *v
		}
		var ret VolumeTotalPerformance
		return ret
	}).(VolumeTotalPerformanceOutput)
}

// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
func (o VolumeTotalPerformancePtrOutput) Iops() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeTotalPerformance) *float64 {
		if v == nil {
			return nil
		}
		return v.Iops
	}).(pulumi.Float64PtrOutput)
}

// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
func (o VolumeTotalPerformancePtrOutput) Throughput() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *VolumeTotalPerformance) *float64 {
		if v == nil {
			return nil
		}
		return v.Throughput
	}).(pulumi.Float64PtrOutput)
}

type GetVolumeBaselinePerformance struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops float64 `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput float64 `pulumi:"throughput"`
}

// GetVolumeBaselinePerformanceInput is an input type that accepts GetVolumeBaselinePerformanceArgs and GetVolumeBaselinePerformanceOutput values.
// You can construct a concrete instance of `GetVolumeBaselinePerformanceInput` via:
//
//	GetVolumeBaselinePerformanceArgs{...}
type GetVolumeBaselinePerformanceInput interface {
	pulumi.Input

	ToGetVolumeBaselinePerformanceOutput() GetVolumeBaselinePerformanceOutput
	ToGetVolumeBaselinePerformanceOutputWithContext(context.Context) GetVolumeBaselinePerformanceOutput
}

type GetVolumeBaselinePerformanceArgs struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops pulumi.Float64Input `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput pulumi.Float64Input `pulumi:"throughput"`
}

func (GetVolumeBaselinePerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeBaselinePerformance)(nil)).Elem()
}

func (i GetVolumeBaselinePerformanceArgs) ToGetVolumeBaselinePerformanceOutput() GetVolumeBaselinePerformanceOutput {
	return i.ToGetVolumeBaselinePerformanceOutputWithContext(context.Background())
}

func (i GetVolumeBaselinePerformanceArgs) ToGetVolumeBaselinePerformanceOutputWithContext(ctx context.Context) GetVolumeBaselinePerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeBaselinePerformanceOutput)
}

type GetVolumeBaselinePerformanceOutput struct{ *pulumi.OutputState }

func (GetVolumeBaselinePerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeBaselinePerformance)(nil)).Elem()
}

func (o GetVolumeBaselinePerformanceOutput) ToGetVolumeBaselinePerformanceOutput() GetVolumeBaselinePerformanceOutput {
	return o
}

func (o GetVolumeBaselinePerformanceOutput) ToGetVolumeBaselinePerformanceOutputWithContext(ctx context.Context) GetVolumeBaselinePerformanceOutput {
	return o
}

// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
func (o GetVolumeBaselinePerformanceOutput) Iops() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeBaselinePerformance) float64 { return v.Iops }).(pulumi.Float64Output)
}

// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
func (o GetVolumeBaselinePerformanceOutput) Throughput() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeBaselinePerformance) float64 { return v.Throughput }).(pulumi.Float64Output)
}

type GetVolumeExtraPerformance struct {
	// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
	ExtraPerformanceTypeId string `pulumi:"extraPerformanceTypeId"`
	// 云盘的额外IOPS。
	Iops float64 `pulumi:"iops"`
	// 云盘的额外吞吐量。
	Throughput float64 `pulumi:"throughput"`
}

// GetVolumeExtraPerformanceInput is an input type that accepts GetVolumeExtraPerformanceArgs and GetVolumeExtraPerformanceOutput values.
// You can construct a concrete instance of `GetVolumeExtraPerformanceInput` via:
//
//	GetVolumeExtraPerformanceArgs{...}
type GetVolumeExtraPerformanceInput interface {
	pulumi.Input

	ToGetVolumeExtraPerformanceOutput() GetVolumeExtraPerformanceOutput
	ToGetVolumeExtraPerformanceOutputWithContext(context.Context) GetVolumeExtraPerformanceOutput
}

type GetVolumeExtraPerformanceArgs struct {
	// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
	ExtraPerformanceTypeId pulumi.StringInput `pulumi:"extraPerformanceTypeId"`
	// 云盘的额外IOPS。
	Iops pulumi.Float64Input `pulumi:"iops"`
	// 云盘的额外吞吐量。
	Throughput pulumi.Float64Input `pulumi:"throughput"`
}

func (GetVolumeExtraPerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeExtraPerformance)(nil)).Elem()
}

func (i GetVolumeExtraPerformanceArgs) ToGetVolumeExtraPerformanceOutput() GetVolumeExtraPerformanceOutput {
	return i.ToGetVolumeExtraPerformanceOutputWithContext(context.Background())
}

func (i GetVolumeExtraPerformanceArgs) ToGetVolumeExtraPerformanceOutputWithContext(ctx context.Context) GetVolumeExtraPerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeExtraPerformanceOutput)
}

type GetVolumeExtraPerformanceOutput struct{ *pulumi.OutputState }

func (GetVolumeExtraPerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeExtraPerformance)(nil)).Elem()
}

func (o GetVolumeExtraPerformanceOutput) ToGetVolumeExtraPerformanceOutput() GetVolumeExtraPerformanceOutput {
	return o
}

func (o GetVolumeExtraPerformanceOutput) ToGetVolumeExtraPerformanceOutputWithContext(ctx context.Context) GetVolumeExtraPerformanceOutput {
	return o
}

// 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
func (o GetVolumeExtraPerformanceOutput) ExtraPerformanceTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumeExtraPerformance) string { return v.ExtraPerformanceTypeId }).(pulumi.StringOutput)
}

// 云盘的额外IOPS。
func (o GetVolumeExtraPerformanceOutput) Iops() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeExtraPerformance) float64 { return v.Iops }).(pulumi.Float64Output)
}

// 云盘的额外吞吐量。
func (o GetVolumeExtraPerformanceOutput) Throughput() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeExtraPerformance) float64 { return v.Throughput }).(pulumi.Float64Output)
}

type GetVolumeTotalPerformance struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops float64 `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput float64 `pulumi:"throughput"`
}

// GetVolumeTotalPerformanceInput is an input type that accepts GetVolumeTotalPerformanceArgs and GetVolumeTotalPerformanceOutput values.
// You can construct a concrete instance of `GetVolumeTotalPerformanceInput` via:
//
//	GetVolumeTotalPerformanceArgs{...}
type GetVolumeTotalPerformanceInput interface {
	pulumi.Input

	ToGetVolumeTotalPerformanceOutput() GetVolumeTotalPerformanceOutput
	ToGetVolumeTotalPerformanceOutputWithContext(context.Context) GetVolumeTotalPerformanceOutput
}

type GetVolumeTotalPerformanceArgs struct {
	// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
	Iops pulumi.Float64Input `pulumi:"iops"`
	// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
	Throughput pulumi.Float64Input `pulumi:"throughput"`
}

func (GetVolumeTotalPerformanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeTotalPerformance)(nil)).Elem()
}

func (i GetVolumeTotalPerformanceArgs) ToGetVolumeTotalPerformanceOutput() GetVolumeTotalPerformanceOutput {
	return i.ToGetVolumeTotalPerformanceOutputWithContext(context.Background())
}

func (i GetVolumeTotalPerformanceArgs) ToGetVolumeTotalPerformanceOutputWithContext(ctx context.Context) GetVolumeTotalPerformanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVolumeTotalPerformanceOutput)
}

type GetVolumeTotalPerformanceOutput struct{ *pulumi.OutputState }

func (GetVolumeTotalPerformanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumeTotalPerformance)(nil)).Elem()
}

func (o GetVolumeTotalPerformanceOutput) ToGetVolumeTotalPerformanceOutput() GetVolumeTotalPerformanceOutput {
	return o
}

func (o GetVolumeTotalPerformanceOutput) ToGetVolumeTotalPerformanceOutputWithContext(ctx context.Context) GetVolumeTotalPerformanceOutput {
	return o
}

// 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
func (o GetVolumeTotalPerformanceOutput) Iops() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeTotalPerformance) float64 { return v.Iops }).(pulumi.Float64Output)
}

// 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
func (o GetVolumeTotalPerformanceOutput) Throughput() pulumi.Float64Output {
	return o.ApplyT(func(v GetVolumeTotalPerformance) float64 { return v.Throughput }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeBaselinePerformanceInput)(nil)).Elem(), VolumeBaselinePerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeBaselinePerformancePtrInput)(nil)).Elem(), VolumeBaselinePerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExtraPerformanceInput)(nil)).Elem(), VolumeExtraPerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeExtraPerformancePtrInput)(nil)).Elem(), VolumeExtraPerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTotalPerformanceInput)(nil)).Elem(), VolumeTotalPerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeTotalPerformancePtrInput)(nil)).Elem(), VolumeTotalPerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeBaselinePerformanceInput)(nil)).Elem(), GetVolumeBaselinePerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeExtraPerformanceInput)(nil)).Elem(), GetVolumeExtraPerformanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVolumeTotalPerformanceInput)(nil)).Elem(), GetVolumeTotalPerformanceArgs{})
	pulumi.RegisterOutputType(VolumeBaselinePerformanceOutput{})
	pulumi.RegisterOutputType(VolumeBaselinePerformancePtrOutput{})
	pulumi.RegisterOutputType(VolumeExtraPerformanceOutput{})
	pulumi.RegisterOutputType(VolumeExtraPerformancePtrOutput{})
	pulumi.RegisterOutputType(VolumeTotalPerformanceOutput{})
	pulumi.RegisterOutputType(VolumeTotalPerformancePtrOutput{})
	pulumi.RegisterOutputType(GetVolumeBaselinePerformanceOutput{})
	pulumi.RegisterOutputType(GetVolumeExtraPerformanceOutput{})
	pulumi.RegisterOutputType(GetVolumeTotalPerformanceOutput{})
}
