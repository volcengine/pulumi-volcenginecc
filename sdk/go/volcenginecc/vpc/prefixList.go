// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 前缀列表是一组CIDR地址块的集合，用于简化安全组规则、路由表条目的配置。当前缀列表修改时，所有关联它的资源均会同步修改。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewPrefixList(ctx, "PrefixlistDemo", &vpc.PrefixListArgs{
//				Description:    pulumi.String("PrefixlistDemo Example"),
//				IpVersion:      pulumi.String("IPv4"),
//				MaxEntries:     pulumi.Int(20),
//				PrefixListName: pulumi.String("my-prefix-list"),
//				ProjectName:    pulumi.String("default"),
//				PrefixListEntries: vpc.PrefixListPrefixListEntryArray{
//					&vpc.PrefixListPrefixListEntryArgs{
//						Cidr:        pulumi.String("192.168.0.0/*"),
//						Description: pulumi.String("privite description"),
//					},
//				},
//				Tags: vpc.PrefixListTagArray{
//					&vpc.PrefixListTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/prefixList:PrefixList example "prefix_list_id"
// ```
type PrefixList struct {
	pulumi.CustomResourceState

	// 前缀列表关联的资源数量。
	AssociationCount           pulumi.IntOutput                               `pulumi:"associationCount"`
	AssociationsRouteTables    PrefixListAssociationsRouteTableArrayOutput    `pulumi:"associationsRouteTables"`
	AssociationsSecurityGroups PrefixListAssociationsSecurityGroupArrayOutput `pulumi:"associationsSecurityGroups"`
	// 前缀列表的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description pulumi.StringOutput `pulumi:"description"`
	// IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
	MaxEntries        pulumi.IntOutput                     `pulumi:"maxEntries"`
	PrefixListEntries PrefixListPrefixListEntryArrayOutput `pulumi:"prefixListEntries"`
	// 前缀列表的ID。
	PrefixListId pulumi.StringOutput `pulumi:"prefixListId"`
	// 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
	PrefixListName pulumi.StringOutput `pulumi:"prefixListName"`
	// 前缀列表所属项目的名称，不填默认加入default项目。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
	Status pulumi.StringOutput      `pulumi:"status"`
	Tags   PrefixListTagArrayOutput `pulumi:"tags"`
	// 前缀列表的最近一次修改时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
}

// NewPrefixList registers a new resource with the given unique name, arguments, and options.
func NewPrefixList(ctx *pulumi.Context,
	name string, args *PrefixListArgs, opts ...pulumi.ResourceOption) (*PrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxEntries == nil {
		return nil, errors.New("invalid value for required argument 'MaxEntries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrefixList
	err := ctx.RegisterResource("volcenginecc:vpc/prefixList:PrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefixList gets an existing PrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixListState, opts ...pulumi.ResourceOption) (*PrefixList, error) {
	var resource PrefixList
	err := ctx.ReadResource("volcenginecc:vpc/prefixList:PrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrefixList resources.
type prefixListState struct {
	// 前缀列表关联的资源数量。
	AssociationCount           *int                                  `pulumi:"associationCount"`
	AssociationsRouteTables    []PrefixListAssociationsRouteTable    `pulumi:"associationsRouteTables"`
	AssociationsSecurityGroups []PrefixListAssociationsSecurityGroup `pulumi:"associationsSecurityGroups"`
	// 前缀列表的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description *string `pulumi:"description"`
	// IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
	IpVersion *string `pulumi:"ipVersion"`
	// 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
	MaxEntries        *int                        `pulumi:"maxEntries"`
	PrefixListEntries []PrefixListPrefixListEntry `pulumi:"prefixListEntries"`
	// 前缀列表的ID。
	PrefixListId *string `pulumi:"prefixListId"`
	// 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
	PrefixListName *string `pulumi:"prefixListName"`
	// 前缀列表所属项目的名称，不填默认加入default项目。
	ProjectName *string `pulumi:"projectName"`
	// 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
	Status *string         `pulumi:"status"`
	Tags   []PrefixListTag `pulumi:"tags"`
	// 前缀列表的最近一次修改时间。
	UpdatedTime *string `pulumi:"updatedTime"`
}

type PrefixListState struct {
	// 前缀列表关联的资源数量。
	AssociationCount           pulumi.IntPtrInput
	AssociationsRouteTables    PrefixListAssociationsRouteTableArrayInput
	AssociationsSecurityGroups PrefixListAssociationsSecurityGroupArrayInput
	// 前缀列表的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description pulumi.StringPtrInput
	// IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
	IpVersion pulumi.StringPtrInput
	// 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
	MaxEntries        pulumi.IntPtrInput
	PrefixListEntries PrefixListPrefixListEntryArrayInput
	// 前缀列表的ID。
	PrefixListId pulumi.StringPtrInput
	// 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
	PrefixListName pulumi.StringPtrInput
	// 前缀列表所属项目的名称，不填默认加入default项目。
	ProjectName pulumi.StringPtrInput
	// 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
	Status pulumi.StringPtrInput
	Tags   PrefixListTagArrayInput
	// 前缀列表的最近一次修改时间。
	UpdatedTime pulumi.StringPtrInput
}

func (PrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListState)(nil)).Elem()
}

type prefixListArgs struct {
	// 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description *string `pulumi:"description"`
	// IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
	IpVersion *string `pulumi:"ipVersion"`
	// 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
	MaxEntries        int                         `pulumi:"maxEntries"`
	PrefixListEntries []PrefixListPrefixListEntry `pulumi:"prefixListEntries"`
	// 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
	PrefixListName *string `pulumi:"prefixListName"`
	// 前缀列表所属项目的名称，不填默认加入default项目。
	ProjectName *string         `pulumi:"projectName"`
	Tags        []PrefixListTag `pulumi:"tags"`
}

// The set of arguments for constructing a PrefixList resource.
type PrefixListArgs struct {
	// 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description pulumi.StringPtrInput
	// IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
	IpVersion pulumi.StringPtrInput
	// 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
	MaxEntries        pulumi.IntInput
	PrefixListEntries PrefixListPrefixListEntryArrayInput
	// 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
	PrefixListName pulumi.StringPtrInput
	// 前缀列表所属项目的名称，不填默认加入default项目。
	ProjectName pulumi.StringPtrInput
	Tags        PrefixListTagArrayInput
}

func (PrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListArgs)(nil)).Elem()
}

type PrefixListInput interface {
	pulumi.Input

	ToPrefixListOutput() PrefixListOutput
	ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput
}

func (*PrefixList) ElementType() reflect.Type {
	return reflect.TypeOf((**PrefixList)(nil)).Elem()
}

func (i *PrefixList) ToPrefixListOutput() PrefixListOutput {
	return i.ToPrefixListOutputWithContext(context.Background())
}

func (i *PrefixList) ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListOutput)
}

// PrefixListArrayInput is an input type that accepts PrefixListArray and PrefixListArrayOutput values.
// You can construct a concrete instance of `PrefixListArrayInput` via:
//
//	PrefixListArray{ PrefixListArgs{...} }
type PrefixListArrayInput interface {
	pulumi.Input

	ToPrefixListArrayOutput() PrefixListArrayOutput
	ToPrefixListArrayOutputWithContext(context.Context) PrefixListArrayOutput
}

type PrefixListArray []PrefixListInput

func (PrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrefixList)(nil)).Elem()
}

func (i PrefixListArray) ToPrefixListArrayOutput() PrefixListArrayOutput {
	return i.ToPrefixListArrayOutputWithContext(context.Background())
}

func (i PrefixListArray) ToPrefixListArrayOutputWithContext(ctx context.Context) PrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListArrayOutput)
}

// PrefixListMapInput is an input type that accepts PrefixListMap and PrefixListMapOutput values.
// You can construct a concrete instance of `PrefixListMapInput` via:
//
//	PrefixListMap{ "key": PrefixListArgs{...} }
type PrefixListMapInput interface {
	pulumi.Input

	ToPrefixListMapOutput() PrefixListMapOutput
	ToPrefixListMapOutputWithContext(context.Context) PrefixListMapOutput
}

type PrefixListMap map[string]PrefixListInput

func (PrefixListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrefixList)(nil)).Elem()
}

func (i PrefixListMap) ToPrefixListMapOutput() PrefixListMapOutput {
	return i.ToPrefixListMapOutputWithContext(context.Background())
}

func (i PrefixListMap) ToPrefixListMapOutputWithContext(ctx context.Context) PrefixListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListMapOutput)
}

type PrefixListOutput struct{ *pulumi.OutputState }

func (PrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrefixList)(nil)).Elem()
}

func (o PrefixListOutput) ToPrefixListOutput() PrefixListOutput {
	return o
}

func (o PrefixListOutput) ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput {
	return o
}

// 前缀列表关联的资源数量。
func (o PrefixListOutput) AssociationCount() pulumi.IntOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.IntOutput { return v.AssociationCount }).(pulumi.IntOutput)
}

func (o PrefixListOutput) AssociationsRouteTables() PrefixListAssociationsRouteTableArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListAssociationsRouteTableArrayOutput { return v.AssociationsRouteTables }).(PrefixListAssociationsRouteTableArrayOutput)
}

func (o PrefixListOutput) AssociationsSecurityGroups() PrefixListAssociationsSecurityGroupArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListAssociationsSecurityGroupArrayOutput {
		return v.AssociationsSecurityGroups
	}).(PrefixListAssociationsSecurityGroupArrayOutput)
}

// 前缀列表的创建时间。
func (o PrefixListOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
func (o PrefixListOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
func (o PrefixListOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
func (o PrefixListOutput) MaxEntries() pulumi.IntOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.IntOutput { return v.MaxEntries }).(pulumi.IntOutput)
}

func (o PrefixListOutput) PrefixListEntries() PrefixListPrefixListEntryArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListPrefixListEntryArrayOutput { return v.PrefixListEntries }).(PrefixListPrefixListEntryArrayOutput)
}

// 前缀列表的ID。
func (o PrefixListOutput) PrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.PrefixListId }).(pulumi.StringOutput)
}

// 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
func (o PrefixListOutput) PrefixListName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.PrefixListName }).(pulumi.StringOutput)
}

// 前缀列表所属项目的名称，不填默认加入default项目。
func (o PrefixListOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
func (o PrefixListOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o PrefixListOutput) Tags() PrefixListTagArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListTagArrayOutput { return v.Tags }).(PrefixListTagArrayOutput)
}

// 前缀列表的最近一次修改时间。
func (o PrefixListOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

type PrefixListArrayOutput struct{ *pulumi.OutputState }

func (PrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrefixList)(nil)).Elem()
}

func (o PrefixListArrayOutput) ToPrefixListArrayOutput() PrefixListArrayOutput {
	return o
}

func (o PrefixListArrayOutput) ToPrefixListArrayOutputWithContext(ctx context.Context) PrefixListArrayOutput {
	return o
}

func (o PrefixListArrayOutput) Index(i pulumi.IntInput) PrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrefixList {
		return vs[0].([]*PrefixList)[vs[1].(int)]
	}).(PrefixListOutput)
}

type PrefixListMapOutput struct{ *pulumi.OutputState }

func (PrefixListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrefixList)(nil)).Elem()
}

func (o PrefixListMapOutput) ToPrefixListMapOutput() PrefixListMapOutput {
	return o
}

func (o PrefixListMapOutput) ToPrefixListMapOutputWithContext(ctx context.Context) PrefixListMapOutput {
	return o
}

func (o PrefixListMapOutput) MapIndex(k pulumi.StringInput) PrefixListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrefixList {
		return vs[0].(map[string]*PrefixList)[vs[1].(string)]
	}).(PrefixListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListInput)(nil)).Elem(), &PrefixList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListArrayInput)(nil)).Elem(), PrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListMapInput)(nil)).Elem(), PrefixListMap{})
	pulumi.RegisterOutputType(PrefixListOutput{})
	pulumi.RegisterOutputType(PrefixListArrayOutput{})
	pulumi.RegisterOutputType(PrefixListMapOutput{})
}
