// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 安全组是一个逻辑意义上的分组，为同一个私有网络内具有相同安全保护需求并相互信任的网卡提供访问策略。您可以通过配置安全组规则，控制安全组关联网卡的出入流量。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/securityGroup:SecurityGroup example "security_group_id"
// ```
type SecurityGroup struct {
	pulumi.CustomResourceState

	// 安全组创建时间。
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
	Description        pulumi.StringOutput                       `pulumi:"description"`
	EgressPermissions  SecurityGroupEgressPermissionArrayOutput  `pulumi:"egressPermissions"`
	IngressPermissions SecurityGroupIngressPermissionArrayOutput `pulumi:"ingressPermissions"`
	// 安全组所属项目名称。不填默认项目为default。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 安全组ID。
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
	SecurityGroupName pulumi.StringOutput `pulumi:"securityGroupName"`
	// 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
	ServiceManaged pulumi.BoolOutput `pulumi:"serviceManaged"`
	// 安全组状态。Available为可用，Creating为创建中。
	Status pulumi.StringOutput         `pulumi:"status"`
	Tags   SecurityGroupTagArrayOutput `pulumi:"tags"`
	// 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
	Type pulumi.StringOutput `pulumi:"type"`
	// 安全组所属的VPC ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewSecurityGroup registers a new resource with the given unique name, arguments, and options.
func NewSecurityGroup(ctx *pulumi.Context,
	name string, args *SecurityGroupArgs, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SecurityGroup
	err := ctx.RegisterResource("volcenginecc:vpc/securityGroup:SecurityGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityGroup gets an existing SecurityGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityGroupState, opts ...pulumi.ResourceOption) (*SecurityGroup, error) {
	var resource SecurityGroup
	err := ctx.ReadResource("volcenginecc:vpc/securityGroup:SecurityGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityGroup resources.
type securityGroupState struct {
	// 安全组创建时间。
	CreationTime *string `pulumi:"creationTime"`
	// 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
	Description        *string                          `pulumi:"description"`
	EgressPermissions  []SecurityGroupEgressPermission  `pulumi:"egressPermissions"`
	IngressPermissions []SecurityGroupIngressPermission `pulumi:"ingressPermissions"`
	// 安全组所属项目名称。不填默认项目为default。
	ProjectName *string `pulumi:"projectName"`
	// 安全组ID。
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
	SecurityGroupName *string `pulumi:"securityGroupName"`
	// 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
	ServiceManaged *bool `pulumi:"serviceManaged"`
	// 安全组状态。Available为可用，Creating为创建中。
	Status *string            `pulumi:"status"`
	Tags   []SecurityGroupTag `pulumi:"tags"`
	// 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
	Type *string `pulumi:"type"`
	// 安全组所属的VPC ID。
	VpcId *string `pulumi:"vpcId"`
}

type SecurityGroupState struct {
	// 安全组创建时间。
	CreationTime pulumi.StringPtrInput
	// 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
	Description        pulumi.StringPtrInput
	EgressPermissions  SecurityGroupEgressPermissionArrayInput
	IngressPermissions SecurityGroupIngressPermissionArrayInput
	// 安全组所属项目名称。不填默认项目为default。
	ProjectName pulumi.StringPtrInput
	// 安全组ID。
	SecurityGroupId pulumi.StringPtrInput
	// 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
	SecurityGroupName pulumi.StringPtrInput
	// 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
	ServiceManaged pulumi.BoolPtrInput
	// 安全组状态。Available为可用，Creating为创建中。
	Status pulumi.StringPtrInput
	Tags   SecurityGroupTagArrayInput
	// 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
	Type pulumi.StringPtrInput
	// 安全组所属的VPC ID。
	VpcId pulumi.StringPtrInput
}

func (SecurityGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupState)(nil)).Elem()
}

type securityGroupArgs struct {
	// 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
	Description        *string                          `pulumi:"description"`
	EgressPermissions  []SecurityGroupEgressPermission  `pulumi:"egressPermissions"`
	IngressPermissions []SecurityGroupIngressPermission `pulumi:"ingressPermissions"`
	// 安全组所属项目名称。不填默认项目为default。
	ProjectName *string `pulumi:"projectName"`
	// 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
	SecurityGroupName *string            `pulumi:"securityGroupName"`
	Tags              []SecurityGroupTag `pulumi:"tags"`
	// 安全组所属的VPC ID。
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a SecurityGroup resource.
type SecurityGroupArgs struct {
	// 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
	Description        pulumi.StringPtrInput
	EgressPermissions  SecurityGroupEgressPermissionArrayInput
	IngressPermissions SecurityGroupIngressPermissionArrayInput
	// 安全组所属项目名称。不填默认项目为default。
	ProjectName pulumi.StringPtrInput
	// 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
	SecurityGroupName pulumi.StringPtrInput
	Tags              SecurityGroupTagArrayInput
	// 安全组所属的VPC ID。
	VpcId pulumi.StringInput
}

func (SecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityGroupArgs)(nil)).Elem()
}

type SecurityGroupInput interface {
	pulumi.Input

	ToSecurityGroupOutput() SecurityGroupOutput
	ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput
}

func (*SecurityGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (i *SecurityGroup) ToSecurityGroupOutput() SecurityGroupOutput {
	return i.ToSecurityGroupOutputWithContext(context.Background())
}

func (i *SecurityGroup) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupOutput)
}

// SecurityGroupArrayInput is an input type that accepts SecurityGroupArray and SecurityGroupArrayOutput values.
// You can construct a concrete instance of `SecurityGroupArrayInput` via:
//
//	SecurityGroupArray{ SecurityGroupArgs{...} }
type SecurityGroupArrayInput interface {
	pulumi.Input

	ToSecurityGroupArrayOutput() SecurityGroupArrayOutput
	ToSecurityGroupArrayOutputWithContext(context.Context) SecurityGroupArrayOutput
}

type SecurityGroupArray []SecurityGroupInput

func (SecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return i.ToSecurityGroupArrayOutputWithContext(context.Background())
}

func (i SecurityGroupArray) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupArrayOutput)
}

// SecurityGroupMapInput is an input type that accepts SecurityGroupMap and SecurityGroupMapOutput values.
// You can construct a concrete instance of `SecurityGroupMapInput` via:
//
//	SecurityGroupMap{ "key": SecurityGroupArgs{...} }
type SecurityGroupMapInput interface {
	pulumi.Input

	ToSecurityGroupMapOutput() SecurityGroupMapOutput
	ToSecurityGroupMapOutputWithContext(context.Context) SecurityGroupMapOutput
}

type SecurityGroupMap map[string]SecurityGroupInput

func (SecurityGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (i SecurityGroupMap) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return i.ToSecurityGroupMapOutputWithContext(context.Background())
}

func (i SecurityGroupMap) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupMapOutput)
}

type SecurityGroupOutput struct{ *pulumi.OutputState }

func (SecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupOutput) ToSecurityGroupOutput() SecurityGroupOutput {
	return o
}

func (o SecurityGroupOutput) ToSecurityGroupOutputWithContext(ctx context.Context) SecurityGroupOutput {
	return o
}

// 安全组创建时间。
func (o SecurityGroupOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
func (o SecurityGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) EgressPermissions() SecurityGroupEgressPermissionArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupEgressPermissionArrayOutput { return v.EgressPermissions }).(SecurityGroupEgressPermissionArrayOutput)
}

func (o SecurityGroupOutput) IngressPermissions() SecurityGroupIngressPermissionArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupIngressPermissionArrayOutput { return v.IngressPermissions }).(SecurityGroupIngressPermissionArrayOutput)
}

// 安全组所属项目名称。不填默认项目为default。
func (o SecurityGroupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 安全组ID。
func (o SecurityGroupOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
func (o SecurityGroupOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.SecurityGroupName }).(pulumi.StringOutput)
}

// 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
func (o SecurityGroupOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.BoolOutput { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 安全组状态。Available为可用，Creating为创建中。
func (o SecurityGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o SecurityGroupOutput) Tags() SecurityGroupTagArrayOutput {
	return o.ApplyT(func(v *SecurityGroup) SecurityGroupTagArrayOutput { return v.Tags }).(SecurityGroupTagArrayOutput)
}

// 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
func (o SecurityGroupOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// 安全组所属的VPC ID。
func (o SecurityGroupOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *SecurityGroup) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type SecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutput() SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) ToSecurityGroupArrayOutputWithContext(ctx context.Context) SecurityGroupArrayOutput {
	return o
}

func (o SecurityGroupArrayOutput) Index(i pulumi.IntInput) SecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].([]*SecurityGroup)[vs[1].(int)]
	}).(SecurityGroupOutput)
}

type SecurityGroupMapOutput struct{ *pulumi.OutputState }

func (SecurityGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SecurityGroup)(nil)).Elem()
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutput() SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) ToSecurityGroupMapOutputWithContext(ctx context.Context) SecurityGroupMapOutput {
	return o
}

func (o SecurityGroupMapOutput) MapIndex(k pulumi.StringInput) SecurityGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SecurityGroup {
		return vs[0].(map[string]*SecurityGroup)[vs[1].(string)]
	}).(SecurityGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupInput)(nil)).Elem(), &SecurityGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupArrayInput)(nil)).Elem(), SecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupMapInput)(nil)).Elem(), SecurityGroupMap{})
	pulumi.RegisterOutputType(SecurityGroupOutput{})
	pulumi.RegisterOutputType(SecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupMapOutput{})
}
