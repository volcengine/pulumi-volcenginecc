// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 路由表由一系列路由条目组成，为私有网络的流量指定下一跳的云资源，每个子网必须且仅支持关联一个路由表，使子网内的资源通过路由表转发流量。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/routeTable:RouteTable example "route_table_id"
// ```
type RouteTable struct {
	pulumi.CustomResourceState

	// 路由表所属账号的ID。
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
	AssociateType pulumi.StringOutput `pulumi:"associateType"`
	// 路由表创建时间。
	CreatedTime        pulumi.StringOutput                   `pulumi:"createdTime"`
	CustomRouteEntries RouteTableCustomRouteEntryArrayOutput `pulumi:"customRouteEntries"`
	// 路由表描述信息。
	Description pulumi.StringOutput `pulumi:"description"`
	// 关联路由表的IPv4网关ID。
	Ipv4GatewayId pulumi.StringOutput `pulumi:"ipv4GatewayId"`
	// 关联路由表的IPv6网关ID。
	Ipv6GatewayId pulumi.StringOutput `pulumi:"ipv6GatewayId"`
	// 路由表所属项目的名称。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 路由表ID。
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// 路由表名称。
	RouteTableName pulumi.StringOutput `pulumi:"routeTableName"`
	// 路由表类型。1、Custom：自定义路由表。2、System：系统路由表。
	RouteTableType pulumi.StringOutput `pulumi:"routeTableType"`
	// 关联的子网的ID列表。
	SubnetIds          pulumi.StringArrayOutput              `pulumi:"subnetIds"`
	SystemRouteEntries RouteTableSystemRouteEntryArrayOutput `pulumi:"systemRouteEntries"`
	Tags               RouteTableTagArrayOutput              `pulumi:"tags"`
	// 路由表更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 路由表所属VPC的ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// VPC的名称。
	VpcName pulumi.StringOutput `pulumi:"vpcName"`
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTable
	err := ctx.RegisterResource("volcenginecc:vpc/routeTable:RouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableState, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	var resource RouteTable
	err := ctx.ReadResource("volcenginecc:vpc/routeTable:RouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTable resources.
type routeTableState struct {
	// 路由表所属账号的ID。
	AccountId *string `pulumi:"accountId"`
	// 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
	AssociateType *string `pulumi:"associateType"`
	// 路由表创建时间。
	CreatedTime        *string                      `pulumi:"createdTime"`
	CustomRouteEntries []RouteTableCustomRouteEntry `pulumi:"customRouteEntries"`
	// 路由表描述信息。
	Description *string `pulumi:"description"`
	// 关联路由表的IPv4网关ID。
	Ipv4GatewayId *string `pulumi:"ipv4GatewayId"`
	// 关联路由表的IPv6网关ID。
	Ipv6GatewayId *string `pulumi:"ipv6GatewayId"`
	// 路由表所属项目的名称。
	ProjectName *string `pulumi:"projectName"`
	// 路由表ID。
	RouteTableId *string `pulumi:"routeTableId"`
	// 路由表名称。
	RouteTableName *string `pulumi:"routeTableName"`
	// 路由表类型。1、Custom：自定义路由表。2、System：系统路由表。
	RouteTableType *string `pulumi:"routeTableType"`
	// 关联的子网的ID列表。
	SubnetIds          []string                     `pulumi:"subnetIds"`
	SystemRouteEntries []RouteTableSystemRouteEntry `pulumi:"systemRouteEntries"`
	Tags               []RouteTableTag              `pulumi:"tags"`
	// 路由表更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 路由表所属VPC的ID。
	VpcId *string `pulumi:"vpcId"`
	// VPC的名称。
	VpcName *string `pulumi:"vpcName"`
}

type RouteTableState struct {
	// 路由表所属账号的ID。
	AccountId pulumi.StringPtrInput
	// 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
	AssociateType pulumi.StringPtrInput
	// 路由表创建时间。
	CreatedTime        pulumi.StringPtrInput
	CustomRouteEntries RouteTableCustomRouteEntryArrayInput
	// 路由表描述信息。
	Description pulumi.StringPtrInput
	// 关联路由表的IPv4网关ID。
	Ipv4GatewayId pulumi.StringPtrInput
	// 关联路由表的IPv6网关ID。
	Ipv6GatewayId pulumi.StringPtrInput
	// 路由表所属项目的名称。
	ProjectName pulumi.StringPtrInput
	// 路由表ID。
	RouteTableId pulumi.StringPtrInput
	// 路由表名称。
	RouteTableName pulumi.StringPtrInput
	// 路由表类型。1、Custom：自定义路由表。2、System：系统路由表。
	RouteTableType pulumi.StringPtrInput
	// 关联的子网的ID列表。
	SubnetIds          pulumi.StringArrayInput
	SystemRouteEntries RouteTableSystemRouteEntryArrayInput
	Tags               RouteTableTagArrayInput
	// 路由表更新时间。
	UpdatedTime pulumi.StringPtrInput
	// 路由表所属VPC的ID。
	VpcId pulumi.StringPtrInput
	// VPC的名称。
	VpcName pulumi.StringPtrInput
}

func (RouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableState)(nil)).Elem()
}

type routeTableArgs struct {
	// 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
	AssociateType      *string                      `pulumi:"associateType"`
	CustomRouteEntries []RouteTableCustomRouteEntry `pulumi:"customRouteEntries"`
	// 路由表描述信息。
	Description *string `pulumi:"description"`
	// 关联路由表的IPv4网关ID。
	Ipv4GatewayId *string `pulumi:"ipv4GatewayId"`
	// 关联路由表的IPv6网关ID。
	Ipv6GatewayId *string `pulumi:"ipv6GatewayId"`
	// 路由表所属项目的名称。
	ProjectName *string `pulumi:"projectName"`
	// 路由表名称。
	RouteTableName *string `pulumi:"routeTableName"`
	// 关联的子网的ID列表。
	SubnetIds []string        `pulumi:"subnetIds"`
	Tags      []RouteTableTag `pulumi:"tags"`
	// 路由表所属VPC的ID。
	VpcId string `pulumi:"vpcId"`
	// VPC的名称。
	VpcName *string `pulumi:"vpcName"`
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
	AssociateType      pulumi.StringPtrInput
	CustomRouteEntries RouteTableCustomRouteEntryArrayInput
	// 路由表描述信息。
	Description pulumi.StringPtrInput
	// 关联路由表的IPv4网关ID。
	Ipv4GatewayId pulumi.StringPtrInput
	// 关联路由表的IPv6网关ID。
	Ipv6GatewayId pulumi.StringPtrInput
	// 路由表所属项目的名称。
	ProjectName pulumi.StringPtrInput
	// 路由表名称。
	RouteTableName pulumi.StringPtrInput
	// 关联的子网的ID列表。
	SubnetIds pulumi.StringArrayInput
	Tags      RouteTableTagArrayInput
	// 路由表所属VPC的ID。
	VpcId pulumi.StringInput
	// VPC的名称。
	VpcName pulumi.StringPtrInput
}

func (RouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableArgs)(nil)).Elem()
}

type RouteTableInput interface {
	pulumi.Input

	ToRouteTableOutput() RouteTableOutput
	ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput
}

func (*RouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (i *RouteTable) ToRouteTableOutput() RouteTableOutput {
	return i.ToRouteTableOutputWithContext(context.Background())
}

func (i *RouteTable) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableOutput)
}

// RouteTableArrayInput is an input type that accepts RouteTableArray and RouteTableArrayOutput values.
// You can construct a concrete instance of `RouteTableArrayInput` via:
//
//	RouteTableArray{ RouteTableArgs{...} }
type RouteTableArrayInput interface {
	pulumi.Input

	ToRouteTableArrayOutput() RouteTableArrayOutput
	ToRouteTableArrayOutputWithContext(context.Context) RouteTableArrayOutput
}

type RouteTableArray []RouteTableInput

func (RouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (i RouteTableArray) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return i.ToRouteTableArrayOutputWithContext(context.Background())
}

func (i RouteTableArray) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableArrayOutput)
}

// RouteTableMapInput is an input type that accepts RouteTableMap and RouteTableMapOutput values.
// You can construct a concrete instance of `RouteTableMapInput` via:
//
//	RouteTableMap{ "key": RouteTableArgs{...} }
type RouteTableMapInput interface {
	pulumi.Input

	ToRouteTableMapOutput() RouteTableMapOutput
	ToRouteTableMapOutputWithContext(context.Context) RouteTableMapOutput
}

type RouteTableMap map[string]RouteTableInput

func (RouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (i RouteTableMap) ToRouteTableMapOutput() RouteTableMapOutput {
	return i.ToRouteTableMapOutputWithContext(context.Background())
}

func (i RouteTableMap) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableMapOutput)
}

type RouteTableOutput struct{ *pulumi.OutputState }

func (RouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (o RouteTableOutput) ToRouteTableOutput() RouteTableOutput {
	return o
}

func (o RouteTableOutput) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return o
}

// 路由表所属账号的ID。
func (o RouteTableOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
func (o RouteTableOutput) AssociateType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.AssociateType }).(pulumi.StringOutput)
}

// 路由表创建时间。
func (o RouteTableOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o RouteTableOutput) CustomRouteEntries() RouteTableCustomRouteEntryArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableCustomRouteEntryArrayOutput { return v.CustomRouteEntries }).(RouteTableCustomRouteEntryArrayOutput)
}

// 路由表描述信息。
func (o RouteTableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 关联路由表的IPv4网关ID。
func (o RouteTableOutput) Ipv4GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Ipv4GatewayId }).(pulumi.StringOutput)
}

// 关联路由表的IPv6网关ID。
func (o RouteTableOutput) Ipv6GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Ipv6GatewayId }).(pulumi.StringOutput)
}

// 路由表所属项目的名称。
func (o RouteTableOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 路由表ID。
func (o RouteTableOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// 路由表名称。
func (o RouteTableOutput) RouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.RouteTableName }).(pulumi.StringOutput)
}

// 路由表类型。1、Custom：自定义路由表。2、System：系统路由表。
func (o RouteTableOutput) RouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.RouteTableType }).(pulumi.StringOutput)
}

// 关联的子网的ID列表。
func (o RouteTableOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

func (o RouteTableOutput) SystemRouteEntries() RouteTableSystemRouteEntryArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableSystemRouteEntryArrayOutput { return v.SystemRouteEntries }).(RouteTableSystemRouteEntryArrayOutput)
}

func (o RouteTableOutput) Tags() RouteTableTagArrayOutput {
	return o.ApplyT(func(v *RouteTable) RouteTableTagArrayOutput { return v.Tags }).(RouteTableTagArrayOutput)
}

// 路由表更新时间。
func (o RouteTableOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 路由表所属VPC的ID。
func (o RouteTableOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// VPC的名称。
func (o RouteTableOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.VpcName }).(pulumi.StringOutput)
}

type RouteTableArrayOutput struct{ *pulumi.OutputState }

func (RouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) Index(i pulumi.IntInput) RouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].([]*RouteTable)[vs[1].(int)]
	}).(RouteTableOutput)
}

type RouteTableMapOutput struct{ *pulumi.OutputState }

func (RouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (o RouteTableMapOutput) ToRouteTableMapOutput() RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) MapIndex(k pulumi.StringInput) RouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].(map[string]*RouteTable)[vs[1].(string)]
	}).(RouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableInput)(nil)).Elem(), &RouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableArrayInput)(nil)).Elem(), RouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableMapInput)(nil)).Elem(), RouteTableMap{})
	pulumi.RegisterOutputType(RouteTableOutput{})
	pulumi.RegisterOutputType(RouteTableArrayOutput{})
	pulumi.RegisterOutputType(RouteTableMapOutput{})
}
