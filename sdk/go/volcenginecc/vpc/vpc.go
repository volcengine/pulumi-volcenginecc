// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 私有网络为云上资源构建隔离的、自主配置的虚拟网络环境。可以在私有网络中自定义IP地址段、安全组、路由策略等网络特性，简单高效安全地管理云上资源。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/vpc:Vpc example "vpc_id"
// ```
type Vpc struct {
	pulumi.CustomResourceState

	// VPC所属账号的ID。
	AccountId     pulumi.StringOutput        `pulumi:"accountId"`
	AssociateCens VpcAssociateCenArrayOutput `pulumi:"associateCens"`
	// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// 创建VPC的时间。
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
	Description pulumi.StringOutput `pulumi:"description"`
	// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// VPC 绑定的 IPv4 网关的 ID。
	Ipv4GatewayId pulumi.StringOutput `pulumi:"ipv4GatewayId"`
	// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
	Ipv6CidrBlock pulumi.StringOutput `pulumi:"ipv6CidrBlock"`
	// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// VPC中创建的NAT网关的ID。
	NatGatewayIds pulumi.StringArrayOutput `pulumi:"natGatewayIds"`
	// VPC中的网络ACL的数量。
	NetworkAclNum pulumi.StringOutput `pulumi:"networkAclNum"`
	// VPC所属项目的名称。不填默认加入default项目。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// VPC关联的路由表ID。
	RouteTableIds pulumi.StringArrayOutput `pulumi:"routeTableIds"`
	// VPC的辅助网段。
	SecondaryCidrBlocks pulumi.StringArrayOutput `pulumi:"secondaryCidrBlocks"`
	// VPC中安全组的列表。
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
	Status pulumi.StringOutput `pulumi:"status"`
	// VPC中子网的列表。
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
	SupportIpv4Gateway pulumi.BoolOutput `pulumi:"supportIpv4Gateway"`
	Tags               VpcTagArrayOutput `pulumi:"tags"`
	// 更新VPC的时间。
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// VPC的用户网段。
	UserCidrBlocks pulumi.StringArrayOutput `pulumi:"userCidrBlocks"`
	// VPC的ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
	VpcName pulumi.StringOutput `pulumi:"vpcName"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		args = &VpcArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vpc
	err := ctx.RegisterResource("volcenginecc:vpc/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("volcenginecc:vpc/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	// VPC所属账号的ID。
	AccountId     *string           `pulumi:"accountId"`
	AssociateCens []VpcAssociateCen `pulumi:"associateCens"`
	// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
	CidrBlock *string `pulumi:"cidrBlock"`
	// 创建VPC的时间。
	CreationTime *string `pulumi:"creationTime"`
	// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
	Description *string `pulumi:"description"`
	// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
	DnsServers []string `pulumi:"dnsServers"`
	// VPC 绑定的 IPv4 网关的 ID。
	Ipv4GatewayId *string `pulumi:"ipv4GatewayId"`
	// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
	IsDefault *bool `pulumi:"isDefault"`
	// VPC中创建的NAT网关的ID。
	NatGatewayIds []string `pulumi:"natGatewayIds"`
	// VPC中的网络ACL的数量。
	NetworkAclNum *string `pulumi:"networkAclNum"`
	// VPC所属项目的名称。不填默认加入default项目。
	ProjectName *string `pulumi:"projectName"`
	// VPC关联的路由表ID。
	RouteTableIds []string `pulumi:"routeTableIds"`
	// VPC的辅助网段。
	SecondaryCidrBlocks []string `pulumi:"secondaryCidrBlocks"`
	// VPC中安全组的列表。
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
	Status *string `pulumi:"status"`
	// VPC中子网的列表。
	SubnetIds []string `pulumi:"subnetIds"`
	// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
	SupportIpv4Gateway *bool    `pulumi:"supportIpv4Gateway"`
	Tags               []VpcTag `pulumi:"tags"`
	// 更新VPC的时间。
	UpdateTime *string `pulumi:"updateTime"`
	// VPC的用户网段。
	UserCidrBlocks []string `pulumi:"userCidrBlocks"`
	// VPC的ID。
	VpcId *string `pulumi:"vpcId"`
	// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
	VpcName *string `pulumi:"vpcName"`
}

type VpcState struct {
	// VPC所属账号的ID。
	AccountId     pulumi.StringPtrInput
	AssociateCens VpcAssociateCenArrayInput
	// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
	CidrBlock pulumi.StringPtrInput
	// 创建VPC的时间。
	CreationTime pulumi.StringPtrInput
	// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
	Description pulumi.StringPtrInput
	// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
	DnsServers pulumi.StringArrayInput
	// VPC 绑定的 IPv4 网关的 ID。
	Ipv4GatewayId pulumi.StringPtrInput
	// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
	Ipv6CidrBlock pulumi.StringPtrInput
	// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
	IsDefault pulumi.BoolPtrInput
	// VPC中创建的NAT网关的ID。
	NatGatewayIds pulumi.StringArrayInput
	// VPC中的网络ACL的数量。
	NetworkAclNum pulumi.StringPtrInput
	// VPC所属项目的名称。不填默认加入default项目。
	ProjectName pulumi.StringPtrInput
	// VPC关联的路由表ID。
	RouteTableIds pulumi.StringArrayInput
	// VPC的辅助网段。
	SecondaryCidrBlocks pulumi.StringArrayInput
	// VPC中安全组的列表。
	SecurityGroupIds pulumi.StringArrayInput
	// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
	Status pulumi.StringPtrInput
	// VPC中子网的列表。
	SubnetIds pulumi.StringArrayInput
	// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
	SupportIpv4Gateway pulumi.BoolPtrInput
	Tags               VpcTagArrayInput
	// 更新VPC的时间。
	UpdateTime pulumi.StringPtrInput
	// VPC的用户网段。
	UserCidrBlocks pulumi.StringArrayInput
	// VPC的ID。
	VpcId pulumi.StringPtrInput
	// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
	VpcName pulumi.StringPtrInput
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	AssociateCens []VpcAssociateCen `pulumi:"associateCens"`
	// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
	CidrBlock *string `pulumi:"cidrBlock"`
	// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
	Description *string `pulumi:"description"`
	// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
	DnsServers []string `pulumi:"dnsServers"`
	// VPC 绑定的 IPv4 网关的 ID。
	Ipv4GatewayId *string `pulumi:"ipv4GatewayId"`
	// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// VPC中创建的NAT网关的ID。
	NatGatewayIds []string `pulumi:"natGatewayIds"`
	// VPC所属项目的名称。不填默认加入default项目。
	ProjectName *string `pulumi:"projectName"`
	// VPC关联的路由表ID。
	RouteTableIds []string `pulumi:"routeTableIds"`
	// VPC的辅助网段。
	SecondaryCidrBlocks []string `pulumi:"secondaryCidrBlocks"`
	// VPC中安全组的列表。
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// VPC中子网的列表。
	SubnetIds []string `pulumi:"subnetIds"`
	// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
	SupportIpv4Gateway *bool    `pulumi:"supportIpv4Gateway"`
	Tags               []VpcTag `pulumi:"tags"`
	// VPC的用户网段。
	UserCidrBlocks []string `pulumi:"userCidrBlocks"`
	// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
	VpcName *string `pulumi:"vpcName"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	AssociateCens VpcAssociateCenArrayInput
	// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
	CidrBlock pulumi.StringPtrInput
	// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
	Description pulumi.StringPtrInput
	// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
	DnsServers pulumi.StringArrayInput
	// VPC 绑定的 IPv4 网关的 ID。
	Ipv4GatewayId pulumi.StringPtrInput
	// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
	Ipv6CidrBlock pulumi.StringPtrInput
	// VPC中创建的NAT网关的ID。
	NatGatewayIds pulumi.StringArrayInput
	// VPC所属项目的名称。不填默认加入default项目。
	ProjectName pulumi.StringPtrInput
	// VPC关联的路由表ID。
	RouteTableIds pulumi.StringArrayInput
	// VPC的辅助网段。
	SecondaryCidrBlocks pulumi.StringArrayInput
	// VPC中安全组的列表。
	SecurityGroupIds pulumi.StringArrayInput
	// VPC中子网的列表。
	SubnetIds pulumi.StringArrayInput
	// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
	SupportIpv4Gateway pulumi.BoolPtrInput
	Tags               VpcTagArrayInput
	// VPC的用户网段。
	UserCidrBlocks pulumi.StringArrayInput
	// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
	VpcName pulumi.StringPtrInput
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcInput interface {
	pulumi.Input

	ToVpcOutput() VpcOutput
	ToVpcOutputWithContext(ctx context.Context) VpcOutput
}

func (*Vpc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (i *Vpc) ToVpcOutput() VpcOutput {
	return i.ToVpcOutputWithContext(context.Background())
}

func (i *Vpc) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcOutput)
}

// VpcArrayInput is an input type that accepts VpcArray and VpcArrayOutput values.
// You can construct a concrete instance of `VpcArrayInput` via:
//
//	VpcArray{ VpcArgs{...} }
type VpcArrayInput interface {
	pulumi.Input

	ToVpcArrayOutput() VpcArrayOutput
	ToVpcArrayOutputWithContext(context.Context) VpcArrayOutput
}

type VpcArray []VpcInput

func (VpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (i VpcArray) ToVpcArrayOutput() VpcArrayOutput {
	return i.ToVpcArrayOutputWithContext(context.Background())
}

func (i VpcArray) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcArrayOutput)
}

// VpcMapInput is an input type that accepts VpcMap and VpcMapOutput values.
// You can construct a concrete instance of `VpcMapInput` via:
//
//	VpcMap{ "key": VpcArgs{...} }
type VpcMapInput interface {
	pulumi.Input

	ToVpcMapOutput() VpcMapOutput
	ToVpcMapOutputWithContext(context.Context) VpcMapOutput
}

type VpcMap map[string]VpcInput

func (VpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (i VpcMap) ToVpcMapOutput() VpcMapOutput {
	return i.ToVpcMapOutputWithContext(context.Background())
}

func (i VpcMap) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcMapOutput)
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

// VPC所属账号的ID。
func (o VpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

func (o VpcOutput) AssociateCens() VpcAssociateCenArrayOutput {
	return o.ApplyT(func(v *Vpc) VpcAssociateCenArrayOutput { return v.AssociateCens }).(VpcAssociateCenArrayOutput)
}

// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
func (o VpcOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// 创建VPC的时间。
func (o VpcOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
func (o VpcOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
func (o VpcOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// VPC 绑定的 IPv4 网关的 ID。
func (o VpcOutput) Ipv4GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Ipv4GatewayId }).(pulumi.StringOutput)
}

// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
func (o VpcOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
func (o VpcOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vpc) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// VPC中创建的NAT网关的ID。
func (o VpcOutput) NatGatewayIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.NatGatewayIds }).(pulumi.StringArrayOutput)
}

// VPC中的网络ACL的数量。
func (o VpcOutput) NetworkAclNum() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.NetworkAclNum }).(pulumi.StringOutput)
}

// VPC所属项目的名称。不填默认加入default项目。
func (o VpcOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// VPC关联的路由表ID。
func (o VpcOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

// VPC的辅助网段。
func (o VpcOutput) SecondaryCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.SecondaryCidrBlocks }).(pulumi.StringArrayOutput)
}

// VPC中安全组的列表。
func (o VpcOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
func (o VpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// VPC中子网的列表。
func (o VpcOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
func (o VpcOutput) SupportIpv4Gateway() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vpc) pulumi.BoolOutput { return v.SupportIpv4Gateway }).(pulumi.BoolOutput)
}

func (o VpcOutput) Tags() VpcTagArrayOutput {
	return o.ApplyT(func(v *Vpc) VpcTagArrayOutput { return v.Tags }).(VpcTagArrayOutput)
}

// 更新VPC的时间。
func (o VpcOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// VPC的用户网段。
func (o VpcOutput) UserCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.UserCidrBlocks }).(pulumi.StringArrayOutput)
}

// VPC的ID。
func (o VpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
func (o VpcOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.VpcName }).(pulumi.StringOutput)
}

type VpcArrayOutput struct{ *pulumi.OutputState }

func (VpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (o VpcArrayOutput) ToVpcArrayOutput() VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) Index(i pulumi.IntInput) VpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].([]*Vpc)[vs[1].(int)]
	}).(VpcOutput)
}

type VpcMapOutput struct{ *pulumi.OutputState }

func (VpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (o VpcMapOutput) ToVpcMapOutput() VpcMapOutput {
	return o
}

func (o VpcMapOutput) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return o
}

func (o VpcMapOutput) MapIndex(k pulumi.StringInput) VpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].(map[string]*Vpc)[vs[1].(string)]
	}).(VpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInput)(nil)).Elem(), &Vpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcArrayInput)(nil)).Elem(), VpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcMapInput)(nil)).Elem(), VpcMap{})
	pulumi.RegisterOutputType(VpcOutput{})
	pulumi.RegisterOutputType(VpcArrayOutput{})
	pulumi.RegisterOutputType(VpcMapOutput{})
}
