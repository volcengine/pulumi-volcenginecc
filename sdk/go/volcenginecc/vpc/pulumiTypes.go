// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

var _ = internal.GetEnvOrDefault

type BandwidthPackageEipAddress struct {
	// 分配ID
	AllocationId *string `pulumi:"allocationId"`
	// 弹性IP地址
	EipAddress *string `pulumi:"eipAddress"`
}

// BandwidthPackageEipAddressInput is an input type that accepts BandwidthPackageEipAddressArgs and BandwidthPackageEipAddressOutput values.
// You can construct a concrete instance of `BandwidthPackageEipAddressInput` via:
//
//	BandwidthPackageEipAddressArgs{...}
type BandwidthPackageEipAddressInput interface {
	pulumi.Input

	ToBandwidthPackageEipAddressOutput() BandwidthPackageEipAddressOutput
	ToBandwidthPackageEipAddressOutputWithContext(context.Context) BandwidthPackageEipAddressOutput
}

type BandwidthPackageEipAddressArgs struct {
	// 分配ID
	AllocationId pulumi.StringPtrInput `pulumi:"allocationId"`
	// 弹性IP地址
	EipAddress pulumi.StringPtrInput `pulumi:"eipAddress"`
}

func (BandwidthPackageEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthPackageEipAddress)(nil)).Elem()
}

func (i BandwidthPackageEipAddressArgs) ToBandwidthPackageEipAddressOutput() BandwidthPackageEipAddressOutput {
	return i.ToBandwidthPackageEipAddressOutputWithContext(context.Background())
}

func (i BandwidthPackageEipAddressArgs) ToBandwidthPackageEipAddressOutputWithContext(ctx context.Context) BandwidthPackageEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageEipAddressOutput)
}

// BandwidthPackageEipAddressArrayInput is an input type that accepts BandwidthPackageEipAddressArray and BandwidthPackageEipAddressArrayOutput values.
// You can construct a concrete instance of `BandwidthPackageEipAddressArrayInput` via:
//
//	BandwidthPackageEipAddressArray{ BandwidthPackageEipAddressArgs{...} }
type BandwidthPackageEipAddressArrayInput interface {
	pulumi.Input

	ToBandwidthPackageEipAddressArrayOutput() BandwidthPackageEipAddressArrayOutput
	ToBandwidthPackageEipAddressArrayOutputWithContext(context.Context) BandwidthPackageEipAddressArrayOutput
}

type BandwidthPackageEipAddressArray []BandwidthPackageEipAddressInput

func (BandwidthPackageEipAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthPackageEipAddress)(nil)).Elem()
}

func (i BandwidthPackageEipAddressArray) ToBandwidthPackageEipAddressArrayOutput() BandwidthPackageEipAddressArrayOutput {
	return i.ToBandwidthPackageEipAddressArrayOutputWithContext(context.Background())
}

func (i BandwidthPackageEipAddressArray) ToBandwidthPackageEipAddressArrayOutputWithContext(ctx context.Context) BandwidthPackageEipAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageEipAddressArrayOutput)
}

type BandwidthPackageEipAddressOutput struct{ *pulumi.OutputState }

func (BandwidthPackageEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthPackageEipAddress)(nil)).Elem()
}

func (o BandwidthPackageEipAddressOutput) ToBandwidthPackageEipAddressOutput() BandwidthPackageEipAddressOutput {
	return o
}

func (o BandwidthPackageEipAddressOutput) ToBandwidthPackageEipAddressOutputWithContext(ctx context.Context) BandwidthPackageEipAddressOutput {
	return o
}

// 分配ID
func (o BandwidthPackageEipAddressOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPackageEipAddress) *string { return v.AllocationId }).(pulumi.StringPtrOutput)
}

// 弹性IP地址
func (o BandwidthPackageEipAddressOutput) EipAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPackageEipAddress) *string { return v.EipAddress }).(pulumi.StringPtrOutput)
}

type BandwidthPackageEipAddressArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPackageEipAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthPackageEipAddress)(nil)).Elem()
}

func (o BandwidthPackageEipAddressArrayOutput) ToBandwidthPackageEipAddressArrayOutput() BandwidthPackageEipAddressArrayOutput {
	return o
}

func (o BandwidthPackageEipAddressArrayOutput) ToBandwidthPackageEipAddressArrayOutputWithContext(ctx context.Context) BandwidthPackageEipAddressArrayOutput {
	return o
}

func (o BandwidthPackageEipAddressArrayOutput) Index(i pulumi.IntInput) BandwidthPackageEipAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BandwidthPackageEipAddress {
		return vs[0].([]BandwidthPackageEipAddress)[vs[1].(int)]
	}).(BandwidthPackageEipAddressOutput)
}

type BandwidthPackageTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// BandwidthPackageTagInput is an input type that accepts BandwidthPackageTagArgs and BandwidthPackageTagOutput values.
// You can construct a concrete instance of `BandwidthPackageTagInput` via:
//
//	BandwidthPackageTagArgs{...}
type BandwidthPackageTagInput interface {
	pulumi.Input

	ToBandwidthPackageTagOutput() BandwidthPackageTagOutput
	ToBandwidthPackageTagOutputWithContext(context.Context) BandwidthPackageTagOutput
}

type BandwidthPackageTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (BandwidthPackageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthPackageTag)(nil)).Elem()
}

func (i BandwidthPackageTagArgs) ToBandwidthPackageTagOutput() BandwidthPackageTagOutput {
	return i.ToBandwidthPackageTagOutputWithContext(context.Background())
}

func (i BandwidthPackageTagArgs) ToBandwidthPackageTagOutputWithContext(ctx context.Context) BandwidthPackageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageTagOutput)
}

// BandwidthPackageTagArrayInput is an input type that accepts BandwidthPackageTagArray and BandwidthPackageTagArrayOutput values.
// You can construct a concrete instance of `BandwidthPackageTagArrayInput` via:
//
//	BandwidthPackageTagArray{ BandwidthPackageTagArgs{...} }
type BandwidthPackageTagArrayInput interface {
	pulumi.Input

	ToBandwidthPackageTagArrayOutput() BandwidthPackageTagArrayOutput
	ToBandwidthPackageTagArrayOutputWithContext(context.Context) BandwidthPackageTagArrayOutput
}

type BandwidthPackageTagArray []BandwidthPackageTagInput

func (BandwidthPackageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthPackageTag)(nil)).Elem()
}

func (i BandwidthPackageTagArray) ToBandwidthPackageTagArrayOutput() BandwidthPackageTagArrayOutput {
	return i.ToBandwidthPackageTagArrayOutputWithContext(context.Background())
}

func (i BandwidthPackageTagArray) ToBandwidthPackageTagArrayOutputWithContext(ctx context.Context) BandwidthPackageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BandwidthPackageTagArrayOutput)
}

type BandwidthPackageTagOutput struct{ *pulumi.OutputState }

func (BandwidthPackageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BandwidthPackageTag)(nil)).Elem()
}

func (o BandwidthPackageTagOutput) ToBandwidthPackageTagOutput() BandwidthPackageTagOutput {
	return o
}

func (o BandwidthPackageTagOutput) ToBandwidthPackageTagOutputWithContext(ctx context.Context) BandwidthPackageTagOutput {
	return o
}

// 用户标签的标签键。
func (o BandwidthPackageTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPackageTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o BandwidthPackageTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BandwidthPackageTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type BandwidthPackageTagArrayOutput struct{ *pulumi.OutputState }

func (BandwidthPackageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BandwidthPackageTag)(nil)).Elem()
}

func (o BandwidthPackageTagArrayOutput) ToBandwidthPackageTagArrayOutput() BandwidthPackageTagArrayOutput {
	return o
}

func (o BandwidthPackageTagArrayOutput) ToBandwidthPackageTagArrayOutputWithContext(ctx context.Context) BandwidthPackageTagArrayOutput {
	return o
}

func (o BandwidthPackageTagArrayOutput) Index(i pulumi.IntInput) BandwidthPackageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BandwidthPackageTag {
		return vs[0].([]BandwidthPackageTag)[vs[1].(int)]
	}).(BandwidthPackageTagOutput)
}

type EipTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// EipTagInput is an input type that accepts EipTagArgs and EipTagOutput values.
// You can construct a concrete instance of `EipTagInput` via:
//
//	EipTagArgs{...}
type EipTagInput interface {
	pulumi.Input

	ToEipTagOutput() EipTagOutput
	ToEipTagOutputWithContext(context.Context) EipTagOutput
}

type EipTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EipTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EipTag)(nil)).Elem()
}

func (i EipTagArgs) ToEipTagOutput() EipTagOutput {
	return i.ToEipTagOutputWithContext(context.Background())
}

func (i EipTagArgs) ToEipTagOutputWithContext(ctx context.Context) EipTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipTagOutput)
}

// EipTagArrayInput is an input type that accepts EipTagArray and EipTagArrayOutput values.
// You can construct a concrete instance of `EipTagArrayInput` via:
//
//	EipTagArray{ EipTagArgs{...} }
type EipTagArrayInput interface {
	pulumi.Input

	ToEipTagArrayOutput() EipTagArrayOutput
	ToEipTagArrayOutputWithContext(context.Context) EipTagArrayOutput
}

type EipTagArray []EipTagInput

func (EipTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EipTag)(nil)).Elem()
}

func (i EipTagArray) ToEipTagArrayOutput() EipTagArrayOutput {
	return i.ToEipTagArrayOutputWithContext(context.Background())
}

func (i EipTagArray) ToEipTagArrayOutputWithContext(ctx context.Context) EipTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EipTagArrayOutput)
}

type EipTagOutput struct{ *pulumi.OutputState }

func (EipTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EipTag)(nil)).Elem()
}

func (o EipTagOutput) ToEipTagOutput() EipTagOutput {
	return o
}

func (o EipTagOutput) ToEipTagOutputWithContext(ctx context.Context) EipTagOutput {
	return o
}

// 标签键。
func (o EipTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o EipTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EipTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EipTagArrayOutput struct{ *pulumi.OutputState }

func (EipTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EipTag)(nil)).Elem()
}

func (o EipTagArrayOutput) ToEipTagArrayOutput() EipTagArrayOutput {
	return o
}

func (o EipTagArrayOutput) ToEipTagArrayOutputWithContext(ctx context.Context) EipTagArrayOutput {
	return o
}

func (o EipTagArrayOutput) Index(i pulumi.IntInput) EipTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EipTag {
		return vs[0].([]EipTag)[vs[1].(int)]
	}).(EipTagOutput)
}

type EniPrimaryIpAddress struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp *EniPrimaryIpAddressAssociatedElasticIp `pulumi:"associatedElasticIp"`
	// 是否为主私网IPv4地址。
	Primary *bool `pulumi:"primary"`
	// 网卡的私网IP地址。
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
}

// EniPrimaryIpAddressInput is an input type that accepts EniPrimaryIpAddressArgs and EniPrimaryIpAddressOutput values.
// You can construct a concrete instance of `EniPrimaryIpAddressInput` via:
//
//	EniPrimaryIpAddressArgs{...}
type EniPrimaryIpAddressInput interface {
	pulumi.Input

	ToEniPrimaryIpAddressOutput() EniPrimaryIpAddressOutput
	ToEniPrimaryIpAddressOutputWithContext(context.Context) EniPrimaryIpAddressOutput
}

type EniPrimaryIpAddressArgs struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp EniPrimaryIpAddressAssociatedElasticIpPtrInput `pulumi:"associatedElasticIp"`
	// 是否为主私网IPv4地址。
	Primary pulumi.BoolPtrInput `pulumi:"primary"`
	// 网卡的私网IP地址。
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
}

func (EniPrimaryIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrimaryIpAddress)(nil)).Elem()
}

func (i EniPrimaryIpAddressArgs) ToEniPrimaryIpAddressOutput() EniPrimaryIpAddressOutput {
	return i.ToEniPrimaryIpAddressOutputWithContext(context.Background())
}

func (i EniPrimaryIpAddressArgs) ToEniPrimaryIpAddressOutputWithContext(ctx context.Context) EniPrimaryIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrimaryIpAddressOutput)
}

func (i EniPrimaryIpAddressArgs) ToEniPrimaryIpAddressPtrOutput() EniPrimaryIpAddressPtrOutput {
	return i.ToEniPrimaryIpAddressPtrOutputWithContext(context.Background())
}

func (i EniPrimaryIpAddressArgs) ToEniPrimaryIpAddressPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrimaryIpAddressOutput).ToEniPrimaryIpAddressPtrOutputWithContext(ctx)
}

// EniPrimaryIpAddressPtrInput is an input type that accepts EniPrimaryIpAddressArgs, EniPrimaryIpAddressPtr and EniPrimaryIpAddressPtrOutput values.
// You can construct a concrete instance of `EniPrimaryIpAddressPtrInput` via:
//
//	        EniPrimaryIpAddressArgs{...}
//
//	or:
//
//	        nil
type EniPrimaryIpAddressPtrInput interface {
	pulumi.Input

	ToEniPrimaryIpAddressPtrOutput() EniPrimaryIpAddressPtrOutput
	ToEniPrimaryIpAddressPtrOutputWithContext(context.Context) EniPrimaryIpAddressPtrOutput
}

type eniPrimaryIpAddressPtrType EniPrimaryIpAddressArgs

func EniPrimaryIpAddressPtr(v *EniPrimaryIpAddressArgs) EniPrimaryIpAddressPtrInput {
	return (*eniPrimaryIpAddressPtrType)(v)
}

func (*eniPrimaryIpAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EniPrimaryIpAddress)(nil)).Elem()
}

func (i *eniPrimaryIpAddressPtrType) ToEniPrimaryIpAddressPtrOutput() EniPrimaryIpAddressPtrOutput {
	return i.ToEniPrimaryIpAddressPtrOutputWithContext(context.Background())
}

func (i *eniPrimaryIpAddressPtrType) ToEniPrimaryIpAddressPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrimaryIpAddressPtrOutput)
}

type EniPrimaryIpAddressOutput struct{ *pulumi.OutputState }

func (EniPrimaryIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrimaryIpAddress)(nil)).Elem()
}

func (o EniPrimaryIpAddressOutput) ToEniPrimaryIpAddressOutput() EniPrimaryIpAddressOutput {
	return o
}

func (o EniPrimaryIpAddressOutput) ToEniPrimaryIpAddressOutputWithContext(ctx context.Context) EniPrimaryIpAddressOutput {
	return o
}

func (o EniPrimaryIpAddressOutput) ToEniPrimaryIpAddressPtrOutput() EniPrimaryIpAddressPtrOutput {
	return o.ToEniPrimaryIpAddressPtrOutputWithContext(context.Background())
}

func (o EniPrimaryIpAddressOutput) ToEniPrimaryIpAddressPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EniPrimaryIpAddress) *EniPrimaryIpAddress {
		return &v
	}).(EniPrimaryIpAddressPtrOutput)
}

// 网卡主私网IPv4关联的公网IP的信息。
func (o EniPrimaryIpAddressOutput) AssociatedElasticIp() EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return o.ApplyT(func(v EniPrimaryIpAddress) *EniPrimaryIpAddressAssociatedElasticIp { return v.AssociatedElasticIp }).(EniPrimaryIpAddressAssociatedElasticIpPtrOutput)
}

// 是否为主私网IPv4地址。
func (o EniPrimaryIpAddressOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EniPrimaryIpAddress) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

// 网卡的私网IP地址。
func (o EniPrimaryIpAddressOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniPrimaryIpAddress) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

type EniPrimaryIpAddressPtrOutput struct{ *pulumi.OutputState }

func (EniPrimaryIpAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EniPrimaryIpAddress)(nil)).Elem()
}

func (o EniPrimaryIpAddressPtrOutput) ToEniPrimaryIpAddressPtrOutput() EniPrimaryIpAddressPtrOutput {
	return o
}

func (o EniPrimaryIpAddressPtrOutput) ToEniPrimaryIpAddressPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressPtrOutput {
	return o
}

func (o EniPrimaryIpAddressPtrOutput) Elem() EniPrimaryIpAddressOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddress) EniPrimaryIpAddress {
		if v != nil {
			return *v
		}
		var ret EniPrimaryIpAddress
		return ret
	}).(EniPrimaryIpAddressOutput)
}

// 网卡主私网IPv4关联的公网IP的信息。
func (o EniPrimaryIpAddressPtrOutput) AssociatedElasticIp() EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddress) *EniPrimaryIpAddressAssociatedElasticIp {
		if v == nil {
			return nil
		}
		return v.AssociatedElasticIp
	}).(EniPrimaryIpAddressAssociatedElasticIpPtrOutput)
}

// 是否为主私网IPv4地址。
func (o EniPrimaryIpAddressPtrOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddress) *bool {
		if v == nil {
			return nil
		}
		return v.Primary
	}).(pulumi.BoolPtrOutput)
}

// 网卡的私网IP地址。
func (o EniPrimaryIpAddressPtrOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddress) *string {
		if v == nil {
			return nil
		}
		return v.PrivateIpAddress
	}).(pulumi.StringPtrOutput)
}

type EniPrimaryIpAddressAssociatedElasticIp struct {
	// 公网IP的ID。
	AllocationId *string `pulumi:"allocationId"`
	// 公网IP的地址。
	EipAddress *string `pulumi:"eipAddress"`
	// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
	ReleaseWithInstance *bool `pulumi:"releaseWithInstance"`
}

// EniPrimaryIpAddressAssociatedElasticIpInput is an input type that accepts EniPrimaryIpAddressAssociatedElasticIpArgs and EniPrimaryIpAddressAssociatedElasticIpOutput values.
// You can construct a concrete instance of `EniPrimaryIpAddressAssociatedElasticIpInput` via:
//
//	EniPrimaryIpAddressAssociatedElasticIpArgs{...}
type EniPrimaryIpAddressAssociatedElasticIpInput interface {
	pulumi.Input

	ToEniPrimaryIpAddressAssociatedElasticIpOutput() EniPrimaryIpAddressAssociatedElasticIpOutput
	ToEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(context.Context) EniPrimaryIpAddressAssociatedElasticIpOutput
}

type EniPrimaryIpAddressAssociatedElasticIpArgs struct {
	// 公网IP的ID。
	AllocationId pulumi.StringPtrInput `pulumi:"allocationId"`
	// 公网IP的地址。
	EipAddress pulumi.StringPtrInput `pulumi:"eipAddress"`
	// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
	ReleaseWithInstance pulumi.BoolPtrInput `pulumi:"releaseWithInstance"`
}

func (EniPrimaryIpAddressAssociatedElasticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrimaryIpAddressAssociatedElasticIp)(nil)).Elem()
}

func (i EniPrimaryIpAddressAssociatedElasticIpArgs) ToEniPrimaryIpAddressAssociatedElasticIpOutput() EniPrimaryIpAddressAssociatedElasticIpOutput {
	return i.ToEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(context.Background())
}

func (i EniPrimaryIpAddressAssociatedElasticIpArgs) ToEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(ctx context.Context) EniPrimaryIpAddressAssociatedElasticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrimaryIpAddressAssociatedElasticIpOutput)
}

func (i EniPrimaryIpAddressAssociatedElasticIpArgs) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutput() EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return i.ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(context.Background())
}

func (i EniPrimaryIpAddressAssociatedElasticIpArgs) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrimaryIpAddressAssociatedElasticIpOutput).ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(ctx)
}

// EniPrimaryIpAddressAssociatedElasticIpPtrInput is an input type that accepts EniPrimaryIpAddressAssociatedElasticIpArgs, EniPrimaryIpAddressAssociatedElasticIpPtr and EniPrimaryIpAddressAssociatedElasticIpPtrOutput values.
// You can construct a concrete instance of `EniPrimaryIpAddressAssociatedElasticIpPtrInput` via:
//
//	        EniPrimaryIpAddressAssociatedElasticIpArgs{...}
//
//	or:
//
//	        nil
type EniPrimaryIpAddressAssociatedElasticIpPtrInput interface {
	pulumi.Input

	ToEniPrimaryIpAddressAssociatedElasticIpPtrOutput() EniPrimaryIpAddressAssociatedElasticIpPtrOutput
	ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(context.Context) EniPrimaryIpAddressAssociatedElasticIpPtrOutput
}

type eniPrimaryIpAddressAssociatedElasticIpPtrType EniPrimaryIpAddressAssociatedElasticIpArgs

func EniPrimaryIpAddressAssociatedElasticIpPtr(v *EniPrimaryIpAddressAssociatedElasticIpArgs) EniPrimaryIpAddressAssociatedElasticIpPtrInput {
	return (*eniPrimaryIpAddressAssociatedElasticIpPtrType)(v)
}

func (*eniPrimaryIpAddressAssociatedElasticIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EniPrimaryIpAddressAssociatedElasticIp)(nil)).Elem()
}

func (i *eniPrimaryIpAddressAssociatedElasticIpPtrType) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutput() EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return i.ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(context.Background())
}

func (i *eniPrimaryIpAddressAssociatedElasticIpPtrType) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrimaryIpAddressAssociatedElasticIpPtrOutput)
}

type EniPrimaryIpAddressAssociatedElasticIpOutput struct{ *pulumi.OutputState }

func (EniPrimaryIpAddressAssociatedElasticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrimaryIpAddressAssociatedElasticIp)(nil)).Elem()
}

func (o EniPrimaryIpAddressAssociatedElasticIpOutput) ToEniPrimaryIpAddressAssociatedElasticIpOutput() EniPrimaryIpAddressAssociatedElasticIpOutput {
	return o
}

func (o EniPrimaryIpAddressAssociatedElasticIpOutput) ToEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(ctx context.Context) EniPrimaryIpAddressAssociatedElasticIpOutput {
	return o
}

func (o EniPrimaryIpAddressAssociatedElasticIpOutput) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutput() EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return o.ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(context.Background())
}

func (o EniPrimaryIpAddressAssociatedElasticIpOutput) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EniPrimaryIpAddressAssociatedElasticIp) *EniPrimaryIpAddressAssociatedElasticIp {
		return &v
	}).(EniPrimaryIpAddressAssociatedElasticIpPtrOutput)
}

// 公网IP的ID。
func (o EniPrimaryIpAddressAssociatedElasticIpOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniPrimaryIpAddressAssociatedElasticIp) *string { return v.AllocationId }).(pulumi.StringPtrOutput)
}

// 公网IP的地址。
func (o EniPrimaryIpAddressAssociatedElasticIpOutput) EipAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniPrimaryIpAddressAssociatedElasticIp) *string { return v.EipAddress }).(pulumi.StringPtrOutput)
}

// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
func (o EniPrimaryIpAddressAssociatedElasticIpOutput) ReleaseWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v EniPrimaryIpAddressAssociatedElasticIp) *bool { return v.ReleaseWithInstance }).(pulumi.BoolPtrOutput)
}

type EniPrimaryIpAddressAssociatedElasticIpPtrOutput struct{ *pulumi.OutputState }

func (EniPrimaryIpAddressAssociatedElasticIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EniPrimaryIpAddressAssociatedElasticIp)(nil)).Elem()
}

func (o EniPrimaryIpAddressAssociatedElasticIpPtrOutput) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutput() EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return o
}

func (o EniPrimaryIpAddressAssociatedElasticIpPtrOutput) ToEniPrimaryIpAddressAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrimaryIpAddressAssociatedElasticIpPtrOutput {
	return o
}

func (o EniPrimaryIpAddressAssociatedElasticIpPtrOutput) Elem() EniPrimaryIpAddressAssociatedElasticIpOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddressAssociatedElasticIp) EniPrimaryIpAddressAssociatedElasticIp {
		if v != nil {
			return *v
		}
		var ret EniPrimaryIpAddressAssociatedElasticIp
		return ret
	}).(EniPrimaryIpAddressAssociatedElasticIpOutput)
}

// 公网IP的ID。
func (o EniPrimaryIpAddressAssociatedElasticIpPtrOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddressAssociatedElasticIp) *string {
		if v == nil {
			return nil
		}
		return v.AllocationId
	}).(pulumi.StringPtrOutput)
}

// 公网IP的地址。
func (o EniPrimaryIpAddressAssociatedElasticIpPtrOutput) EipAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddressAssociatedElasticIp) *string {
		if v == nil {
			return nil
		}
		return v.EipAddress
	}).(pulumi.StringPtrOutput)
}

// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
func (o EniPrimaryIpAddressAssociatedElasticIpPtrOutput) ReleaseWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *EniPrimaryIpAddressAssociatedElasticIp) *bool {
		if v == nil {
			return nil
		}
		return v.ReleaseWithInstance
	}).(pulumi.BoolPtrOutput)
}

type EniPrivateIpSet struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp *EniPrivateIpSetAssociatedElasticIp `pulumi:"associatedElasticIp"`
	// 网卡的私网IP地址。
	PrivateIpAddress *string `pulumi:"privateIpAddress"`
}

// EniPrivateIpSetInput is an input type that accepts EniPrivateIpSetArgs and EniPrivateIpSetOutput values.
// You can construct a concrete instance of `EniPrivateIpSetInput` via:
//
//	EniPrivateIpSetArgs{...}
type EniPrivateIpSetInput interface {
	pulumi.Input

	ToEniPrivateIpSetOutput() EniPrivateIpSetOutput
	ToEniPrivateIpSetOutputWithContext(context.Context) EniPrivateIpSetOutput
}

type EniPrivateIpSetArgs struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp EniPrivateIpSetAssociatedElasticIpPtrInput `pulumi:"associatedElasticIp"`
	// 网卡的私网IP地址。
	PrivateIpAddress pulumi.StringPtrInput `pulumi:"privateIpAddress"`
}

func (EniPrivateIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrivateIpSet)(nil)).Elem()
}

func (i EniPrivateIpSetArgs) ToEniPrivateIpSetOutput() EniPrivateIpSetOutput {
	return i.ToEniPrivateIpSetOutputWithContext(context.Background())
}

func (i EniPrivateIpSetArgs) ToEniPrivateIpSetOutputWithContext(ctx context.Context) EniPrivateIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrivateIpSetOutput)
}

// EniPrivateIpSetArrayInput is an input type that accepts EniPrivateIpSetArray and EniPrivateIpSetArrayOutput values.
// You can construct a concrete instance of `EniPrivateIpSetArrayInput` via:
//
//	EniPrivateIpSetArray{ EniPrivateIpSetArgs{...} }
type EniPrivateIpSetArrayInput interface {
	pulumi.Input

	ToEniPrivateIpSetArrayOutput() EniPrivateIpSetArrayOutput
	ToEniPrivateIpSetArrayOutputWithContext(context.Context) EniPrivateIpSetArrayOutput
}

type EniPrivateIpSetArray []EniPrivateIpSetInput

func (EniPrivateIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniPrivateIpSet)(nil)).Elem()
}

func (i EniPrivateIpSetArray) ToEniPrivateIpSetArrayOutput() EniPrivateIpSetArrayOutput {
	return i.ToEniPrivateIpSetArrayOutputWithContext(context.Background())
}

func (i EniPrivateIpSetArray) ToEniPrivateIpSetArrayOutputWithContext(ctx context.Context) EniPrivateIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrivateIpSetArrayOutput)
}

type EniPrivateIpSetOutput struct{ *pulumi.OutputState }

func (EniPrivateIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrivateIpSet)(nil)).Elem()
}

func (o EniPrivateIpSetOutput) ToEniPrivateIpSetOutput() EniPrivateIpSetOutput {
	return o
}

func (o EniPrivateIpSetOutput) ToEniPrivateIpSetOutputWithContext(ctx context.Context) EniPrivateIpSetOutput {
	return o
}

// 网卡主私网IPv4关联的公网IP的信息。
func (o EniPrivateIpSetOutput) AssociatedElasticIp() EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return o.ApplyT(func(v EniPrivateIpSet) *EniPrivateIpSetAssociatedElasticIp { return v.AssociatedElasticIp }).(EniPrivateIpSetAssociatedElasticIpPtrOutput)
}

// 网卡的私网IP地址。
func (o EniPrivateIpSetOutput) PrivateIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniPrivateIpSet) *string { return v.PrivateIpAddress }).(pulumi.StringPtrOutput)
}

type EniPrivateIpSetArrayOutput struct{ *pulumi.OutputState }

func (EniPrivateIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniPrivateIpSet)(nil)).Elem()
}

func (o EniPrivateIpSetArrayOutput) ToEniPrivateIpSetArrayOutput() EniPrivateIpSetArrayOutput {
	return o
}

func (o EniPrivateIpSetArrayOutput) ToEniPrivateIpSetArrayOutputWithContext(ctx context.Context) EniPrivateIpSetArrayOutput {
	return o
}

func (o EniPrivateIpSetArrayOutput) Index(i pulumi.IntInput) EniPrivateIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EniPrivateIpSet {
		return vs[0].([]EniPrivateIpSet)[vs[1].(int)]
	}).(EniPrivateIpSetOutput)
}

type EniPrivateIpSetAssociatedElasticIp struct {
	// 公网IP的ID。
	AllocationId *string `pulumi:"allocationId"`
}

// EniPrivateIpSetAssociatedElasticIpInput is an input type that accepts EniPrivateIpSetAssociatedElasticIpArgs and EniPrivateIpSetAssociatedElasticIpOutput values.
// You can construct a concrete instance of `EniPrivateIpSetAssociatedElasticIpInput` via:
//
//	EniPrivateIpSetAssociatedElasticIpArgs{...}
type EniPrivateIpSetAssociatedElasticIpInput interface {
	pulumi.Input

	ToEniPrivateIpSetAssociatedElasticIpOutput() EniPrivateIpSetAssociatedElasticIpOutput
	ToEniPrivateIpSetAssociatedElasticIpOutputWithContext(context.Context) EniPrivateIpSetAssociatedElasticIpOutput
}

type EniPrivateIpSetAssociatedElasticIpArgs struct {
	// 公网IP的ID。
	AllocationId pulumi.StringPtrInput `pulumi:"allocationId"`
}

func (EniPrivateIpSetAssociatedElasticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrivateIpSetAssociatedElasticIp)(nil)).Elem()
}

func (i EniPrivateIpSetAssociatedElasticIpArgs) ToEniPrivateIpSetAssociatedElasticIpOutput() EniPrivateIpSetAssociatedElasticIpOutput {
	return i.ToEniPrivateIpSetAssociatedElasticIpOutputWithContext(context.Background())
}

func (i EniPrivateIpSetAssociatedElasticIpArgs) ToEniPrivateIpSetAssociatedElasticIpOutputWithContext(ctx context.Context) EniPrivateIpSetAssociatedElasticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrivateIpSetAssociatedElasticIpOutput)
}

func (i EniPrivateIpSetAssociatedElasticIpArgs) ToEniPrivateIpSetAssociatedElasticIpPtrOutput() EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return i.ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(context.Background())
}

func (i EniPrivateIpSetAssociatedElasticIpArgs) ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrivateIpSetAssociatedElasticIpOutput).ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(ctx)
}

// EniPrivateIpSetAssociatedElasticIpPtrInput is an input type that accepts EniPrivateIpSetAssociatedElasticIpArgs, EniPrivateIpSetAssociatedElasticIpPtr and EniPrivateIpSetAssociatedElasticIpPtrOutput values.
// You can construct a concrete instance of `EniPrivateIpSetAssociatedElasticIpPtrInput` via:
//
//	        EniPrivateIpSetAssociatedElasticIpArgs{...}
//
//	or:
//
//	        nil
type EniPrivateIpSetAssociatedElasticIpPtrInput interface {
	pulumi.Input

	ToEniPrivateIpSetAssociatedElasticIpPtrOutput() EniPrivateIpSetAssociatedElasticIpPtrOutput
	ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(context.Context) EniPrivateIpSetAssociatedElasticIpPtrOutput
}

type eniPrivateIpSetAssociatedElasticIpPtrType EniPrivateIpSetAssociatedElasticIpArgs

func EniPrivateIpSetAssociatedElasticIpPtr(v *EniPrivateIpSetAssociatedElasticIpArgs) EniPrivateIpSetAssociatedElasticIpPtrInput {
	return (*eniPrivateIpSetAssociatedElasticIpPtrType)(v)
}

func (*eniPrivateIpSetAssociatedElasticIpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EniPrivateIpSetAssociatedElasticIp)(nil)).Elem()
}

func (i *eniPrivateIpSetAssociatedElasticIpPtrType) ToEniPrivateIpSetAssociatedElasticIpPtrOutput() EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return i.ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(context.Background())
}

func (i *eniPrivateIpSetAssociatedElasticIpPtrType) ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniPrivateIpSetAssociatedElasticIpPtrOutput)
}

type EniPrivateIpSetAssociatedElasticIpOutput struct{ *pulumi.OutputState }

func (EniPrivateIpSetAssociatedElasticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EniPrivateIpSetAssociatedElasticIp)(nil)).Elem()
}

func (o EniPrivateIpSetAssociatedElasticIpOutput) ToEniPrivateIpSetAssociatedElasticIpOutput() EniPrivateIpSetAssociatedElasticIpOutput {
	return o
}

func (o EniPrivateIpSetAssociatedElasticIpOutput) ToEniPrivateIpSetAssociatedElasticIpOutputWithContext(ctx context.Context) EniPrivateIpSetAssociatedElasticIpOutput {
	return o
}

func (o EniPrivateIpSetAssociatedElasticIpOutput) ToEniPrivateIpSetAssociatedElasticIpPtrOutput() EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return o.ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(context.Background())
}

func (o EniPrivateIpSetAssociatedElasticIpOutput) ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EniPrivateIpSetAssociatedElasticIp) *EniPrivateIpSetAssociatedElasticIp {
		return &v
	}).(EniPrivateIpSetAssociatedElasticIpPtrOutput)
}

// 公网IP的ID。
func (o EniPrivateIpSetAssociatedElasticIpOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniPrivateIpSetAssociatedElasticIp) *string { return v.AllocationId }).(pulumi.StringPtrOutput)
}

type EniPrivateIpSetAssociatedElasticIpPtrOutput struct{ *pulumi.OutputState }

func (EniPrivateIpSetAssociatedElasticIpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EniPrivateIpSetAssociatedElasticIp)(nil)).Elem()
}

func (o EniPrivateIpSetAssociatedElasticIpPtrOutput) ToEniPrivateIpSetAssociatedElasticIpPtrOutput() EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return o
}

func (o EniPrivateIpSetAssociatedElasticIpPtrOutput) ToEniPrivateIpSetAssociatedElasticIpPtrOutputWithContext(ctx context.Context) EniPrivateIpSetAssociatedElasticIpPtrOutput {
	return o
}

func (o EniPrivateIpSetAssociatedElasticIpPtrOutput) Elem() EniPrivateIpSetAssociatedElasticIpOutput {
	return o.ApplyT(func(v *EniPrivateIpSetAssociatedElasticIp) EniPrivateIpSetAssociatedElasticIp {
		if v != nil {
			return *v
		}
		var ret EniPrivateIpSetAssociatedElasticIp
		return ret
	}).(EniPrivateIpSetAssociatedElasticIpOutput)
}

// 公网IP的ID。
func (o EniPrivateIpSetAssociatedElasticIpPtrOutput) AllocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EniPrivateIpSetAssociatedElasticIp) *string {
		if v == nil {
			return nil
		}
		return v.AllocationId
	}).(pulumi.StringPtrOutput)
}

type EniTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// EniTagInput is an input type that accepts EniTagArgs and EniTagOutput values.
// You can construct a concrete instance of `EniTagInput` via:
//
//	EniTagArgs{...}
type EniTagInput interface {
	pulumi.Input

	ToEniTagOutput() EniTagOutput
	ToEniTagOutputWithContext(context.Context) EniTagOutput
}

type EniTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (EniTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EniTag)(nil)).Elem()
}

func (i EniTagArgs) ToEniTagOutput() EniTagOutput {
	return i.ToEniTagOutputWithContext(context.Background())
}

func (i EniTagArgs) ToEniTagOutputWithContext(ctx context.Context) EniTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniTagOutput)
}

// EniTagArrayInput is an input type that accepts EniTagArray and EniTagArrayOutput values.
// You can construct a concrete instance of `EniTagArrayInput` via:
//
//	EniTagArray{ EniTagArgs{...} }
type EniTagArrayInput interface {
	pulumi.Input

	ToEniTagArrayOutput() EniTagArrayOutput
	ToEniTagArrayOutputWithContext(context.Context) EniTagArrayOutput
}

type EniTagArray []EniTagInput

func (EniTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniTag)(nil)).Elem()
}

func (i EniTagArray) ToEniTagArrayOutput() EniTagArrayOutput {
	return i.ToEniTagArrayOutputWithContext(context.Background())
}

func (i EniTagArray) ToEniTagArrayOutputWithContext(ctx context.Context) EniTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniTagArrayOutput)
}

type EniTagOutput struct{ *pulumi.OutputState }

func (EniTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EniTag)(nil)).Elem()
}

func (o EniTagOutput) ToEniTagOutput() EniTagOutput {
	return o
}

func (o EniTagOutput) ToEniTagOutputWithContext(ctx context.Context) EniTagOutput {
	return o
}

// 用户标签的标签键。
func (o EniTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o EniTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EniTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type EniTagArrayOutput struct{ *pulumi.OutputState }

func (EniTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EniTag)(nil)).Elem()
}

func (o EniTagArrayOutput) ToEniTagArrayOutput() EniTagArrayOutput {
	return o
}

func (o EniTagArrayOutput) ToEniTagArrayOutputWithContext(ctx context.Context) EniTagArrayOutput {
	return o
}

func (o EniTagArrayOutput) Index(i pulumi.IntInput) EniTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EniTag {
		return vs[0].([]EniTag)[vs[1].(int)]
	}).(EniTagOutput)
}

type NetworkAclDefaultEgressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp *string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description *string `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId *string `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName *string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy *string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port *string `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority *int `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol *string `pulumi:"protocol"`
}

// NetworkAclDefaultEgressAclEntryInput is an input type that accepts NetworkAclDefaultEgressAclEntryArgs and NetworkAclDefaultEgressAclEntryOutput values.
// You can construct a concrete instance of `NetworkAclDefaultEgressAclEntryInput` via:
//
//	NetworkAclDefaultEgressAclEntryArgs{...}
type NetworkAclDefaultEgressAclEntryInput interface {
	pulumi.Input

	ToNetworkAclDefaultEgressAclEntryOutput() NetworkAclDefaultEgressAclEntryOutput
	ToNetworkAclDefaultEgressAclEntryOutputWithContext(context.Context) NetworkAclDefaultEgressAclEntryOutput
}

type NetworkAclDefaultEgressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringPtrInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId pulumi.StringPtrInput `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringPtrInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringPtrInput `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkAclDefaultEgressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (i NetworkAclDefaultEgressAclEntryArgs) ToNetworkAclDefaultEgressAclEntryOutput() NetworkAclDefaultEgressAclEntryOutput {
	return i.ToNetworkAclDefaultEgressAclEntryOutputWithContext(context.Background())
}

func (i NetworkAclDefaultEgressAclEntryArgs) ToNetworkAclDefaultEgressAclEntryOutputWithContext(ctx context.Context) NetworkAclDefaultEgressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclDefaultEgressAclEntryOutput)
}

// NetworkAclDefaultEgressAclEntryArrayInput is an input type that accepts NetworkAclDefaultEgressAclEntryArray and NetworkAclDefaultEgressAclEntryArrayOutput values.
// You can construct a concrete instance of `NetworkAclDefaultEgressAclEntryArrayInput` via:
//
//	NetworkAclDefaultEgressAclEntryArray{ NetworkAclDefaultEgressAclEntryArgs{...} }
type NetworkAclDefaultEgressAclEntryArrayInput interface {
	pulumi.Input

	ToNetworkAclDefaultEgressAclEntryArrayOutput() NetworkAclDefaultEgressAclEntryArrayOutput
	ToNetworkAclDefaultEgressAclEntryArrayOutputWithContext(context.Context) NetworkAclDefaultEgressAclEntryArrayOutput
}

type NetworkAclDefaultEgressAclEntryArray []NetworkAclDefaultEgressAclEntryInput

func (NetworkAclDefaultEgressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (i NetworkAclDefaultEgressAclEntryArray) ToNetworkAclDefaultEgressAclEntryArrayOutput() NetworkAclDefaultEgressAclEntryArrayOutput {
	return i.ToNetworkAclDefaultEgressAclEntryArrayOutputWithContext(context.Background())
}

func (i NetworkAclDefaultEgressAclEntryArray) ToNetworkAclDefaultEgressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclDefaultEgressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclDefaultEgressAclEntryArrayOutput)
}

type NetworkAclDefaultEgressAclEntryOutput struct{ *pulumi.OutputState }

func (NetworkAclDefaultEgressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (o NetworkAclDefaultEgressAclEntryOutput) ToNetworkAclDefaultEgressAclEntryOutput() NetworkAclDefaultEgressAclEntryOutput {
	return o
}

func (o NetworkAclDefaultEgressAclEntryOutput) ToNetworkAclDefaultEgressAclEntryOutputWithContext(ctx context.Context) NetworkAclDefaultEgressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o NetworkAclDefaultEgressAclEntryOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// 规则的描述信息。
func (o NetworkAclDefaultEgressAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 规则的ID。
func (o NetworkAclDefaultEgressAclEntryOutput) NetworkAclEntryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.NetworkAclEntryId }).(pulumi.StringPtrOutput)
}

// 规则的名称。
func (o NetworkAclDefaultEgressAclEntryOutput) NetworkAclEntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.NetworkAclEntryName }).(pulumi.StringPtrOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o NetworkAclDefaultEgressAclEntryOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o NetworkAclDefaultEgressAclEntryOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
func (o NetworkAclDefaultEgressAclEntryOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o NetworkAclDefaultEgressAclEntryOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultEgressAclEntry) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkAclDefaultEgressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclDefaultEgressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (o NetworkAclDefaultEgressAclEntryArrayOutput) ToNetworkAclDefaultEgressAclEntryArrayOutput() NetworkAclDefaultEgressAclEntryArrayOutput {
	return o
}

func (o NetworkAclDefaultEgressAclEntryArrayOutput) ToNetworkAclDefaultEgressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclDefaultEgressAclEntryArrayOutput {
	return o
}

func (o NetworkAclDefaultEgressAclEntryArrayOutput) Index(i pulumi.IntInput) NetworkAclDefaultEgressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclDefaultEgressAclEntry {
		return vs[0].([]NetworkAclDefaultEgressAclEntry)[vs[1].(int)]
	}).(NetworkAclDefaultEgressAclEntryOutput)
}

type NetworkAclDefaultIngressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp *string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description *string `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId *string `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName *string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy *string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port *string `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority *int `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol *string `pulumi:"protocol"`
}

// NetworkAclDefaultIngressAclEntryInput is an input type that accepts NetworkAclDefaultIngressAclEntryArgs and NetworkAclDefaultIngressAclEntryOutput values.
// You can construct a concrete instance of `NetworkAclDefaultIngressAclEntryInput` via:
//
//	NetworkAclDefaultIngressAclEntryArgs{...}
type NetworkAclDefaultIngressAclEntryInput interface {
	pulumi.Input

	ToNetworkAclDefaultIngressAclEntryOutput() NetworkAclDefaultIngressAclEntryOutput
	ToNetworkAclDefaultIngressAclEntryOutputWithContext(context.Context) NetworkAclDefaultIngressAclEntryOutput
}

type NetworkAclDefaultIngressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringPtrInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId pulumi.StringPtrInput `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringPtrInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringPtrInput `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkAclDefaultIngressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (i NetworkAclDefaultIngressAclEntryArgs) ToNetworkAclDefaultIngressAclEntryOutput() NetworkAclDefaultIngressAclEntryOutput {
	return i.ToNetworkAclDefaultIngressAclEntryOutputWithContext(context.Background())
}

func (i NetworkAclDefaultIngressAclEntryArgs) ToNetworkAclDefaultIngressAclEntryOutputWithContext(ctx context.Context) NetworkAclDefaultIngressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclDefaultIngressAclEntryOutput)
}

// NetworkAclDefaultIngressAclEntryArrayInput is an input type that accepts NetworkAclDefaultIngressAclEntryArray and NetworkAclDefaultIngressAclEntryArrayOutput values.
// You can construct a concrete instance of `NetworkAclDefaultIngressAclEntryArrayInput` via:
//
//	NetworkAclDefaultIngressAclEntryArray{ NetworkAclDefaultIngressAclEntryArgs{...} }
type NetworkAclDefaultIngressAclEntryArrayInput interface {
	pulumi.Input

	ToNetworkAclDefaultIngressAclEntryArrayOutput() NetworkAclDefaultIngressAclEntryArrayOutput
	ToNetworkAclDefaultIngressAclEntryArrayOutputWithContext(context.Context) NetworkAclDefaultIngressAclEntryArrayOutput
}

type NetworkAclDefaultIngressAclEntryArray []NetworkAclDefaultIngressAclEntryInput

func (NetworkAclDefaultIngressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (i NetworkAclDefaultIngressAclEntryArray) ToNetworkAclDefaultIngressAclEntryArrayOutput() NetworkAclDefaultIngressAclEntryArrayOutput {
	return i.ToNetworkAclDefaultIngressAclEntryArrayOutputWithContext(context.Background())
}

func (i NetworkAclDefaultIngressAclEntryArray) ToNetworkAclDefaultIngressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclDefaultIngressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclDefaultIngressAclEntryArrayOutput)
}

type NetworkAclDefaultIngressAclEntryOutput struct{ *pulumi.OutputState }

func (NetworkAclDefaultIngressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (o NetworkAclDefaultIngressAclEntryOutput) ToNetworkAclDefaultIngressAclEntryOutput() NetworkAclDefaultIngressAclEntryOutput {
	return o
}

func (o NetworkAclDefaultIngressAclEntryOutput) ToNetworkAclDefaultIngressAclEntryOutputWithContext(ctx context.Context) NetworkAclDefaultIngressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o NetworkAclDefaultIngressAclEntryOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// 规则的描述信息。
func (o NetworkAclDefaultIngressAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 规则的ID。
func (o NetworkAclDefaultIngressAclEntryOutput) NetworkAclEntryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.NetworkAclEntryId }).(pulumi.StringPtrOutput)
}

// 规则的名称。
func (o NetworkAclDefaultIngressAclEntryOutput) NetworkAclEntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.NetworkAclEntryName }).(pulumi.StringPtrOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o NetworkAclDefaultIngressAclEntryOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o NetworkAclDefaultIngressAclEntryOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
func (o NetworkAclDefaultIngressAclEntryOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o NetworkAclDefaultIngressAclEntryOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclDefaultIngressAclEntry) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkAclDefaultIngressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclDefaultIngressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (o NetworkAclDefaultIngressAclEntryArrayOutput) ToNetworkAclDefaultIngressAclEntryArrayOutput() NetworkAclDefaultIngressAclEntryArrayOutput {
	return o
}

func (o NetworkAclDefaultIngressAclEntryArrayOutput) ToNetworkAclDefaultIngressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclDefaultIngressAclEntryArrayOutput {
	return o
}

func (o NetworkAclDefaultIngressAclEntryArrayOutput) Index(i pulumi.IntInput) NetworkAclDefaultIngressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclDefaultIngressAclEntry {
		return vs[0].([]NetworkAclDefaultIngressAclEntry)[vs[1].(int)]
	}).(NetworkAclDefaultIngressAclEntryOutput)
}

type NetworkAclEgressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp *string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description *string `pulumi:"description"`
	// 规则的名称。
	NetworkAclEntryName *string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy *string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port *string `pulumi:"port"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol *string `pulumi:"protocol"`
}

// NetworkAclEgressAclEntryInput is an input type that accepts NetworkAclEgressAclEntryArgs and NetworkAclEgressAclEntryOutput values.
// You can construct a concrete instance of `NetworkAclEgressAclEntryInput` via:
//
//	NetworkAclEgressAclEntryArgs{...}
type NetworkAclEgressAclEntryInput interface {
	pulumi.Input

	ToNetworkAclEgressAclEntryOutput() NetworkAclEgressAclEntryOutput
	ToNetworkAclEgressAclEntryOutputWithContext(context.Context) NetworkAclEgressAclEntryOutput
}

type NetworkAclEgressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringPtrInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringPtrInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringPtrInput `pulumi:"port"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkAclEgressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEgressAclEntry)(nil)).Elem()
}

func (i NetworkAclEgressAclEntryArgs) ToNetworkAclEgressAclEntryOutput() NetworkAclEgressAclEntryOutput {
	return i.ToNetworkAclEgressAclEntryOutputWithContext(context.Background())
}

func (i NetworkAclEgressAclEntryArgs) ToNetworkAclEgressAclEntryOutputWithContext(ctx context.Context) NetworkAclEgressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEgressAclEntryOutput)
}

// NetworkAclEgressAclEntryArrayInput is an input type that accepts NetworkAclEgressAclEntryArray and NetworkAclEgressAclEntryArrayOutput values.
// You can construct a concrete instance of `NetworkAclEgressAclEntryArrayInput` via:
//
//	NetworkAclEgressAclEntryArray{ NetworkAclEgressAclEntryArgs{...} }
type NetworkAclEgressAclEntryArrayInput interface {
	pulumi.Input

	ToNetworkAclEgressAclEntryArrayOutput() NetworkAclEgressAclEntryArrayOutput
	ToNetworkAclEgressAclEntryArrayOutputWithContext(context.Context) NetworkAclEgressAclEntryArrayOutput
}

type NetworkAclEgressAclEntryArray []NetworkAclEgressAclEntryInput

func (NetworkAclEgressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEgressAclEntry)(nil)).Elem()
}

func (i NetworkAclEgressAclEntryArray) ToNetworkAclEgressAclEntryArrayOutput() NetworkAclEgressAclEntryArrayOutput {
	return i.ToNetworkAclEgressAclEntryArrayOutputWithContext(context.Background())
}

func (i NetworkAclEgressAclEntryArray) ToNetworkAclEgressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclEgressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclEgressAclEntryArrayOutput)
}

type NetworkAclEgressAclEntryOutput struct{ *pulumi.OutputState }

func (NetworkAclEgressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclEgressAclEntry)(nil)).Elem()
}

func (o NetworkAclEgressAclEntryOutput) ToNetworkAclEgressAclEntryOutput() NetworkAclEgressAclEntryOutput {
	return o
}

func (o NetworkAclEgressAclEntryOutput) ToNetworkAclEgressAclEntryOutputWithContext(ctx context.Context) NetworkAclEgressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o NetworkAclEgressAclEntryOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEgressAclEntry) *string { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// 规则的描述信息。
func (o NetworkAclEgressAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEgressAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 规则的名称。
func (o NetworkAclEgressAclEntryOutput) NetworkAclEntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEgressAclEntry) *string { return v.NetworkAclEntryName }).(pulumi.StringPtrOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o NetworkAclEgressAclEntryOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEgressAclEntry) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o NetworkAclEgressAclEntryOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEgressAclEntry) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o NetworkAclEgressAclEntryOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclEgressAclEntry) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkAclEgressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclEgressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclEgressAclEntry)(nil)).Elem()
}

func (o NetworkAclEgressAclEntryArrayOutput) ToNetworkAclEgressAclEntryArrayOutput() NetworkAclEgressAclEntryArrayOutput {
	return o
}

func (o NetworkAclEgressAclEntryArrayOutput) ToNetworkAclEgressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclEgressAclEntryArrayOutput {
	return o
}

func (o NetworkAclEgressAclEntryArrayOutput) Index(i pulumi.IntInput) NetworkAclEgressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclEgressAclEntry {
		return vs[0].([]NetworkAclEgressAclEntry)[vs[1].(int)]
	}).(NetworkAclEgressAclEntryOutput)
}

type NetworkAclIngressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp *string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description *string `pulumi:"description"`
	// 规则的名称。
	NetworkAclEntryName *string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy *string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port *string `pulumi:"port"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol *string `pulumi:"protocol"`
}

// NetworkAclIngressAclEntryInput is an input type that accepts NetworkAclIngressAclEntryArgs and NetworkAclIngressAclEntryOutput values.
// You can construct a concrete instance of `NetworkAclIngressAclEntryInput` via:
//
//	NetworkAclIngressAclEntryArgs{...}
type NetworkAclIngressAclEntryInput interface {
	pulumi.Input

	ToNetworkAclIngressAclEntryOutput() NetworkAclIngressAclEntryOutput
	ToNetworkAclIngressAclEntryOutputWithContext(context.Context) NetworkAclIngressAclEntryOutput
}

type NetworkAclIngressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringPtrInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringPtrInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringPtrInput `pulumi:"port"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
}

func (NetworkAclIngressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclIngressAclEntry)(nil)).Elem()
}

func (i NetworkAclIngressAclEntryArgs) ToNetworkAclIngressAclEntryOutput() NetworkAclIngressAclEntryOutput {
	return i.ToNetworkAclIngressAclEntryOutputWithContext(context.Background())
}

func (i NetworkAclIngressAclEntryArgs) ToNetworkAclIngressAclEntryOutputWithContext(ctx context.Context) NetworkAclIngressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclIngressAclEntryOutput)
}

// NetworkAclIngressAclEntryArrayInput is an input type that accepts NetworkAclIngressAclEntryArray and NetworkAclIngressAclEntryArrayOutput values.
// You can construct a concrete instance of `NetworkAclIngressAclEntryArrayInput` via:
//
//	NetworkAclIngressAclEntryArray{ NetworkAclIngressAclEntryArgs{...} }
type NetworkAclIngressAclEntryArrayInput interface {
	pulumi.Input

	ToNetworkAclIngressAclEntryArrayOutput() NetworkAclIngressAclEntryArrayOutput
	ToNetworkAclIngressAclEntryArrayOutputWithContext(context.Context) NetworkAclIngressAclEntryArrayOutput
}

type NetworkAclIngressAclEntryArray []NetworkAclIngressAclEntryInput

func (NetworkAclIngressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclIngressAclEntry)(nil)).Elem()
}

func (i NetworkAclIngressAclEntryArray) ToNetworkAclIngressAclEntryArrayOutput() NetworkAclIngressAclEntryArrayOutput {
	return i.ToNetworkAclIngressAclEntryArrayOutputWithContext(context.Background())
}

func (i NetworkAclIngressAclEntryArray) ToNetworkAclIngressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclIngressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclIngressAclEntryArrayOutput)
}

type NetworkAclIngressAclEntryOutput struct{ *pulumi.OutputState }

func (NetworkAclIngressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclIngressAclEntry)(nil)).Elem()
}

func (o NetworkAclIngressAclEntryOutput) ToNetworkAclIngressAclEntryOutput() NetworkAclIngressAclEntryOutput {
	return o
}

func (o NetworkAclIngressAclEntryOutput) ToNetworkAclIngressAclEntryOutputWithContext(ctx context.Context) NetworkAclIngressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o NetworkAclIngressAclEntryOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclIngressAclEntry) *string { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// 规则的描述信息。
func (o NetworkAclIngressAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclIngressAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 规则的名称。
func (o NetworkAclIngressAclEntryOutput) NetworkAclEntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclIngressAclEntry) *string { return v.NetworkAclEntryName }).(pulumi.StringPtrOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o NetworkAclIngressAclEntryOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclIngressAclEntry) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o NetworkAclIngressAclEntryOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclIngressAclEntry) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o NetworkAclIngressAclEntryOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclIngressAclEntry) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

type NetworkAclIngressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclIngressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclIngressAclEntry)(nil)).Elem()
}

func (o NetworkAclIngressAclEntryArrayOutput) ToNetworkAclIngressAclEntryArrayOutput() NetworkAclIngressAclEntryArrayOutput {
	return o
}

func (o NetworkAclIngressAclEntryArrayOutput) ToNetworkAclIngressAclEntryArrayOutputWithContext(ctx context.Context) NetworkAclIngressAclEntryArrayOutput {
	return o
}

func (o NetworkAclIngressAclEntryArrayOutput) Index(i pulumi.IntInput) NetworkAclIngressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclIngressAclEntry {
		return vs[0].([]NetworkAclIngressAclEntry)[vs[1].(int)]
	}).(NetworkAclIngressAclEntryOutput)
}

type NetworkAclResource struct {
	// 关联资源的ID。
	ResourceId *string `pulumi:"resourceId"`
}

// NetworkAclResourceInput is an input type that accepts NetworkAclResourceArgs and NetworkAclResourceOutput values.
// You can construct a concrete instance of `NetworkAclResourceInput` via:
//
//	NetworkAclResourceArgs{...}
type NetworkAclResourceInput interface {
	pulumi.Input

	ToNetworkAclResourceOutput() NetworkAclResourceOutput
	ToNetworkAclResourceOutputWithContext(context.Context) NetworkAclResourceOutput
}

type NetworkAclResourceArgs struct {
	// 关联资源的ID。
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
}

func (NetworkAclResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclResource)(nil)).Elem()
}

func (i NetworkAclResourceArgs) ToNetworkAclResourceOutput() NetworkAclResourceOutput {
	return i.ToNetworkAclResourceOutputWithContext(context.Background())
}

func (i NetworkAclResourceArgs) ToNetworkAclResourceOutputWithContext(ctx context.Context) NetworkAclResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclResourceOutput)
}

// NetworkAclResourceArrayInput is an input type that accepts NetworkAclResourceArray and NetworkAclResourceArrayOutput values.
// You can construct a concrete instance of `NetworkAclResourceArrayInput` via:
//
//	NetworkAclResourceArray{ NetworkAclResourceArgs{...} }
type NetworkAclResourceArrayInput interface {
	pulumi.Input

	ToNetworkAclResourceArrayOutput() NetworkAclResourceArrayOutput
	ToNetworkAclResourceArrayOutputWithContext(context.Context) NetworkAclResourceArrayOutput
}

type NetworkAclResourceArray []NetworkAclResourceInput

func (NetworkAclResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclResource)(nil)).Elem()
}

func (i NetworkAclResourceArray) ToNetworkAclResourceArrayOutput() NetworkAclResourceArrayOutput {
	return i.ToNetworkAclResourceArrayOutputWithContext(context.Background())
}

func (i NetworkAclResourceArray) ToNetworkAclResourceArrayOutputWithContext(ctx context.Context) NetworkAclResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclResourceArrayOutput)
}

type NetworkAclResourceOutput struct{ *pulumi.OutputState }

func (NetworkAclResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclResource)(nil)).Elem()
}

func (o NetworkAclResourceOutput) ToNetworkAclResourceOutput() NetworkAclResourceOutput {
	return o
}

func (o NetworkAclResourceOutput) ToNetworkAclResourceOutputWithContext(ctx context.Context) NetworkAclResourceOutput {
	return o
}

// 关联资源的ID。
func (o NetworkAclResourceOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclResource) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

type NetworkAclResourceArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclResource)(nil)).Elem()
}

func (o NetworkAclResourceArrayOutput) ToNetworkAclResourceArrayOutput() NetworkAclResourceArrayOutput {
	return o
}

func (o NetworkAclResourceArrayOutput) ToNetworkAclResourceArrayOutputWithContext(ctx context.Context) NetworkAclResourceArrayOutput {
	return o
}

func (o NetworkAclResourceArrayOutput) Index(i pulumi.IntInput) NetworkAclResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclResource {
		return vs[0].([]NetworkAclResource)[vs[1].(int)]
	}).(NetworkAclResourceOutput)
}

type NetworkAclTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// NetworkAclTagInput is an input type that accepts NetworkAclTagArgs and NetworkAclTagOutput values.
// You can construct a concrete instance of `NetworkAclTagInput` via:
//
//	NetworkAclTagArgs{...}
type NetworkAclTagInput interface {
	pulumi.Input

	ToNetworkAclTagOutput() NetworkAclTagOutput
	ToNetworkAclTagOutputWithContext(context.Context) NetworkAclTagOutput
}

type NetworkAclTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (NetworkAclTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclTag)(nil)).Elem()
}

func (i NetworkAclTagArgs) ToNetworkAclTagOutput() NetworkAclTagOutput {
	return i.ToNetworkAclTagOutputWithContext(context.Background())
}

func (i NetworkAclTagArgs) ToNetworkAclTagOutputWithContext(ctx context.Context) NetworkAclTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclTagOutput)
}

// NetworkAclTagArrayInput is an input type that accepts NetworkAclTagArray and NetworkAclTagArrayOutput values.
// You can construct a concrete instance of `NetworkAclTagArrayInput` via:
//
//	NetworkAclTagArray{ NetworkAclTagArgs{...} }
type NetworkAclTagArrayInput interface {
	pulumi.Input

	ToNetworkAclTagArrayOutput() NetworkAclTagArrayOutput
	ToNetworkAclTagArrayOutputWithContext(context.Context) NetworkAclTagArrayOutput
}

type NetworkAclTagArray []NetworkAclTagInput

func (NetworkAclTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclTag)(nil)).Elem()
}

func (i NetworkAclTagArray) ToNetworkAclTagArrayOutput() NetworkAclTagArrayOutput {
	return i.ToNetworkAclTagArrayOutputWithContext(context.Background())
}

func (i NetworkAclTagArray) ToNetworkAclTagArrayOutputWithContext(ctx context.Context) NetworkAclTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclTagArrayOutput)
}

type NetworkAclTagOutput struct{ *pulumi.OutputState }

func (NetworkAclTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkAclTag)(nil)).Elem()
}

func (o NetworkAclTagOutput) ToNetworkAclTagOutput() NetworkAclTagOutput {
	return o
}

func (o NetworkAclTagOutput) ToNetworkAclTagOutputWithContext(ctx context.Context) NetworkAclTagOutput {
	return o
}

// 用户标签的标签键。
func (o NetworkAclTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o NetworkAclTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NetworkAclTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type NetworkAclTagArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkAclTag)(nil)).Elem()
}

func (o NetworkAclTagArrayOutput) ToNetworkAclTagArrayOutput() NetworkAclTagArrayOutput {
	return o
}

func (o NetworkAclTagArrayOutput) ToNetworkAclTagArrayOutputWithContext(ctx context.Context) NetworkAclTagArrayOutput {
	return o
}

func (o NetworkAclTagArrayOutput) Index(i pulumi.IntInput) NetworkAclTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkAclTag {
		return vs[0].([]NetworkAclTag)[vs[1].(int)]
	}).(NetworkAclTagOutput)
}

type PrefixListAssociationsRouteTable struct {
	// 关联资源的ID。
	ResourceId *string `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType *string `pulumi:"resourceType"`
}

// PrefixListAssociationsRouteTableInput is an input type that accepts PrefixListAssociationsRouteTableArgs and PrefixListAssociationsRouteTableOutput values.
// You can construct a concrete instance of `PrefixListAssociationsRouteTableInput` via:
//
//	PrefixListAssociationsRouteTableArgs{...}
type PrefixListAssociationsRouteTableInput interface {
	pulumi.Input

	ToPrefixListAssociationsRouteTableOutput() PrefixListAssociationsRouteTableOutput
	ToPrefixListAssociationsRouteTableOutputWithContext(context.Context) PrefixListAssociationsRouteTableOutput
}

type PrefixListAssociationsRouteTableArgs struct {
	// 关联资源的ID。
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
}

func (PrefixListAssociationsRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListAssociationsRouteTable)(nil)).Elem()
}

func (i PrefixListAssociationsRouteTableArgs) ToPrefixListAssociationsRouteTableOutput() PrefixListAssociationsRouteTableOutput {
	return i.ToPrefixListAssociationsRouteTableOutputWithContext(context.Background())
}

func (i PrefixListAssociationsRouteTableArgs) ToPrefixListAssociationsRouteTableOutputWithContext(ctx context.Context) PrefixListAssociationsRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListAssociationsRouteTableOutput)
}

// PrefixListAssociationsRouteTableArrayInput is an input type that accepts PrefixListAssociationsRouteTableArray and PrefixListAssociationsRouteTableArrayOutput values.
// You can construct a concrete instance of `PrefixListAssociationsRouteTableArrayInput` via:
//
//	PrefixListAssociationsRouteTableArray{ PrefixListAssociationsRouteTableArgs{...} }
type PrefixListAssociationsRouteTableArrayInput interface {
	pulumi.Input

	ToPrefixListAssociationsRouteTableArrayOutput() PrefixListAssociationsRouteTableArrayOutput
	ToPrefixListAssociationsRouteTableArrayOutputWithContext(context.Context) PrefixListAssociationsRouteTableArrayOutput
}

type PrefixListAssociationsRouteTableArray []PrefixListAssociationsRouteTableInput

func (PrefixListAssociationsRouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListAssociationsRouteTable)(nil)).Elem()
}

func (i PrefixListAssociationsRouteTableArray) ToPrefixListAssociationsRouteTableArrayOutput() PrefixListAssociationsRouteTableArrayOutput {
	return i.ToPrefixListAssociationsRouteTableArrayOutputWithContext(context.Background())
}

func (i PrefixListAssociationsRouteTableArray) ToPrefixListAssociationsRouteTableArrayOutputWithContext(ctx context.Context) PrefixListAssociationsRouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListAssociationsRouteTableArrayOutput)
}

type PrefixListAssociationsRouteTableOutput struct{ *pulumi.OutputState }

func (PrefixListAssociationsRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListAssociationsRouteTable)(nil)).Elem()
}

func (o PrefixListAssociationsRouteTableOutput) ToPrefixListAssociationsRouteTableOutput() PrefixListAssociationsRouteTableOutput {
	return o
}

func (o PrefixListAssociationsRouteTableOutput) ToPrefixListAssociationsRouteTableOutputWithContext(ctx context.Context) PrefixListAssociationsRouteTableOutput {
	return o
}

// 关联资源的ID。
func (o PrefixListAssociationsRouteTableOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListAssociationsRouteTable) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
func (o PrefixListAssociationsRouteTableOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListAssociationsRouteTable) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type PrefixListAssociationsRouteTableArrayOutput struct{ *pulumi.OutputState }

func (PrefixListAssociationsRouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListAssociationsRouteTable)(nil)).Elem()
}

func (o PrefixListAssociationsRouteTableArrayOutput) ToPrefixListAssociationsRouteTableArrayOutput() PrefixListAssociationsRouteTableArrayOutput {
	return o
}

func (o PrefixListAssociationsRouteTableArrayOutput) ToPrefixListAssociationsRouteTableArrayOutputWithContext(ctx context.Context) PrefixListAssociationsRouteTableArrayOutput {
	return o
}

func (o PrefixListAssociationsRouteTableArrayOutput) Index(i pulumi.IntInput) PrefixListAssociationsRouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrefixListAssociationsRouteTable {
		return vs[0].([]PrefixListAssociationsRouteTable)[vs[1].(int)]
	}).(PrefixListAssociationsRouteTableOutput)
}

type PrefixListAssociationsSecurityGroup struct {
	// 关联资源的ID。
	ResourceId *string `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType *string `pulumi:"resourceType"`
}

// PrefixListAssociationsSecurityGroupInput is an input type that accepts PrefixListAssociationsSecurityGroupArgs and PrefixListAssociationsSecurityGroupOutput values.
// You can construct a concrete instance of `PrefixListAssociationsSecurityGroupInput` via:
//
//	PrefixListAssociationsSecurityGroupArgs{...}
type PrefixListAssociationsSecurityGroupInput interface {
	pulumi.Input

	ToPrefixListAssociationsSecurityGroupOutput() PrefixListAssociationsSecurityGroupOutput
	ToPrefixListAssociationsSecurityGroupOutputWithContext(context.Context) PrefixListAssociationsSecurityGroupOutput
}

type PrefixListAssociationsSecurityGroupArgs struct {
	// 关联资源的ID。
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
}

func (PrefixListAssociationsSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (i PrefixListAssociationsSecurityGroupArgs) ToPrefixListAssociationsSecurityGroupOutput() PrefixListAssociationsSecurityGroupOutput {
	return i.ToPrefixListAssociationsSecurityGroupOutputWithContext(context.Background())
}

func (i PrefixListAssociationsSecurityGroupArgs) ToPrefixListAssociationsSecurityGroupOutputWithContext(ctx context.Context) PrefixListAssociationsSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListAssociationsSecurityGroupOutput)
}

// PrefixListAssociationsSecurityGroupArrayInput is an input type that accepts PrefixListAssociationsSecurityGroupArray and PrefixListAssociationsSecurityGroupArrayOutput values.
// You can construct a concrete instance of `PrefixListAssociationsSecurityGroupArrayInput` via:
//
//	PrefixListAssociationsSecurityGroupArray{ PrefixListAssociationsSecurityGroupArgs{...} }
type PrefixListAssociationsSecurityGroupArrayInput interface {
	pulumi.Input

	ToPrefixListAssociationsSecurityGroupArrayOutput() PrefixListAssociationsSecurityGroupArrayOutput
	ToPrefixListAssociationsSecurityGroupArrayOutputWithContext(context.Context) PrefixListAssociationsSecurityGroupArrayOutput
}

type PrefixListAssociationsSecurityGroupArray []PrefixListAssociationsSecurityGroupInput

func (PrefixListAssociationsSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (i PrefixListAssociationsSecurityGroupArray) ToPrefixListAssociationsSecurityGroupArrayOutput() PrefixListAssociationsSecurityGroupArrayOutput {
	return i.ToPrefixListAssociationsSecurityGroupArrayOutputWithContext(context.Background())
}

func (i PrefixListAssociationsSecurityGroupArray) ToPrefixListAssociationsSecurityGroupArrayOutputWithContext(ctx context.Context) PrefixListAssociationsSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListAssociationsSecurityGroupArrayOutput)
}

type PrefixListAssociationsSecurityGroupOutput struct{ *pulumi.OutputState }

func (PrefixListAssociationsSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (o PrefixListAssociationsSecurityGroupOutput) ToPrefixListAssociationsSecurityGroupOutput() PrefixListAssociationsSecurityGroupOutput {
	return o
}

func (o PrefixListAssociationsSecurityGroupOutput) ToPrefixListAssociationsSecurityGroupOutputWithContext(ctx context.Context) PrefixListAssociationsSecurityGroupOutput {
	return o
}

// 关联资源的ID。
func (o PrefixListAssociationsSecurityGroupOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListAssociationsSecurityGroup) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
func (o PrefixListAssociationsSecurityGroupOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListAssociationsSecurityGroup) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

type PrefixListAssociationsSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (PrefixListAssociationsSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (o PrefixListAssociationsSecurityGroupArrayOutput) ToPrefixListAssociationsSecurityGroupArrayOutput() PrefixListAssociationsSecurityGroupArrayOutput {
	return o
}

func (o PrefixListAssociationsSecurityGroupArrayOutput) ToPrefixListAssociationsSecurityGroupArrayOutputWithContext(ctx context.Context) PrefixListAssociationsSecurityGroupArrayOutput {
	return o
}

func (o PrefixListAssociationsSecurityGroupArrayOutput) Index(i pulumi.IntInput) PrefixListAssociationsSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrefixListAssociationsSecurityGroup {
		return vs[0].([]PrefixListAssociationsSecurityGroup)[vs[1].(int)]
	}).(PrefixListAssociationsSecurityGroupOutput)
}

type PrefixListPrefixListEntry struct {
	// 前缀列表条目的CIDR。
	Cidr *string `pulumi:"cidr"`
	// 前缀列表条目的描述。长度限制为0~255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description *string `pulumi:"description"`
}

// PrefixListPrefixListEntryInput is an input type that accepts PrefixListPrefixListEntryArgs and PrefixListPrefixListEntryOutput values.
// You can construct a concrete instance of `PrefixListPrefixListEntryInput` via:
//
//	PrefixListPrefixListEntryArgs{...}
type PrefixListPrefixListEntryInput interface {
	pulumi.Input

	ToPrefixListPrefixListEntryOutput() PrefixListPrefixListEntryOutput
	ToPrefixListPrefixListEntryOutputWithContext(context.Context) PrefixListPrefixListEntryOutput
}

type PrefixListPrefixListEntryArgs struct {
	// 前缀列表条目的CIDR。
	Cidr pulumi.StringPtrInput `pulumi:"cidr"`
	// 前缀列表条目的描述。长度限制为0~255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description pulumi.StringPtrInput `pulumi:"description"`
}

func (PrefixListPrefixListEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListPrefixListEntry)(nil)).Elem()
}

func (i PrefixListPrefixListEntryArgs) ToPrefixListPrefixListEntryOutput() PrefixListPrefixListEntryOutput {
	return i.ToPrefixListPrefixListEntryOutputWithContext(context.Background())
}

func (i PrefixListPrefixListEntryArgs) ToPrefixListPrefixListEntryOutputWithContext(ctx context.Context) PrefixListPrefixListEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListPrefixListEntryOutput)
}

// PrefixListPrefixListEntryArrayInput is an input type that accepts PrefixListPrefixListEntryArray and PrefixListPrefixListEntryArrayOutput values.
// You can construct a concrete instance of `PrefixListPrefixListEntryArrayInput` via:
//
//	PrefixListPrefixListEntryArray{ PrefixListPrefixListEntryArgs{...} }
type PrefixListPrefixListEntryArrayInput interface {
	pulumi.Input

	ToPrefixListPrefixListEntryArrayOutput() PrefixListPrefixListEntryArrayOutput
	ToPrefixListPrefixListEntryArrayOutputWithContext(context.Context) PrefixListPrefixListEntryArrayOutput
}

type PrefixListPrefixListEntryArray []PrefixListPrefixListEntryInput

func (PrefixListPrefixListEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListPrefixListEntry)(nil)).Elem()
}

func (i PrefixListPrefixListEntryArray) ToPrefixListPrefixListEntryArrayOutput() PrefixListPrefixListEntryArrayOutput {
	return i.ToPrefixListPrefixListEntryArrayOutputWithContext(context.Background())
}

func (i PrefixListPrefixListEntryArray) ToPrefixListPrefixListEntryArrayOutputWithContext(ctx context.Context) PrefixListPrefixListEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListPrefixListEntryArrayOutput)
}

type PrefixListPrefixListEntryOutput struct{ *pulumi.OutputState }

func (PrefixListPrefixListEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListPrefixListEntry)(nil)).Elem()
}

func (o PrefixListPrefixListEntryOutput) ToPrefixListPrefixListEntryOutput() PrefixListPrefixListEntryOutput {
	return o
}

func (o PrefixListPrefixListEntryOutput) ToPrefixListPrefixListEntryOutputWithContext(ctx context.Context) PrefixListPrefixListEntryOutput {
	return o
}

// 前缀列表条目的CIDR。
func (o PrefixListPrefixListEntryOutput) Cidr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListPrefixListEntry) *string { return v.Cidr }).(pulumi.StringPtrOutput)
}

// 前缀列表条目的描述。长度限制为0~255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
func (o PrefixListPrefixListEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListPrefixListEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

type PrefixListPrefixListEntryArrayOutput struct{ *pulumi.OutputState }

func (PrefixListPrefixListEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListPrefixListEntry)(nil)).Elem()
}

func (o PrefixListPrefixListEntryArrayOutput) ToPrefixListPrefixListEntryArrayOutput() PrefixListPrefixListEntryArrayOutput {
	return o
}

func (o PrefixListPrefixListEntryArrayOutput) ToPrefixListPrefixListEntryArrayOutputWithContext(ctx context.Context) PrefixListPrefixListEntryArrayOutput {
	return o
}

func (o PrefixListPrefixListEntryArrayOutput) Index(i pulumi.IntInput) PrefixListPrefixListEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrefixListPrefixListEntry {
		return vs[0].([]PrefixListPrefixListEntry)[vs[1].(int)]
	}).(PrefixListPrefixListEntryOutput)
}

type PrefixListTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// PrefixListTagInput is an input type that accepts PrefixListTagArgs and PrefixListTagOutput values.
// You can construct a concrete instance of `PrefixListTagInput` via:
//
//	PrefixListTagArgs{...}
type PrefixListTagInput interface {
	pulumi.Input

	ToPrefixListTagOutput() PrefixListTagOutput
	ToPrefixListTagOutputWithContext(context.Context) PrefixListTagOutput
}

type PrefixListTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PrefixListTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListTag)(nil)).Elem()
}

func (i PrefixListTagArgs) ToPrefixListTagOutput() PrefixListTagOutput {
	return i.ToPrefixListTagOutputWithContext(context.Background())
}

func (i PrefixListTagArgs) ToPrefixListTagOutputWithContext(ctx context.Context) PrefixListTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListTagOutput)
}

// PrefixListTagArrayInput is an input type that accepts PrefixListTagArray and PrefixListTagArrayOutput values.
// You can construct a concrete instance of `PrefixListTagArrayInput` via:
//
//	PrefixListTagArray{ PrefixListTagArgs{...} }
type PrefixListTagArrayInput interface {
	pulumi.Input

	ToPrefixListTagArrayOutput() PrefixListTagArrayOutput
	ToPrefixListTagArrayOutputWithContext(context.Context) PrefixListTagArrayOutput
}

type PrefixListTagArray []PrefixListTagInput

func (PrefixListTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListTag)(nil)).Elem()
}

func (i PrefixListTagArray) ToPrefixListTagArrayOutput() PrefixListTagArrayOutput {
	return i.ToPrefixListTagArrayOutputWithContext(context.Background())
}

func (i PrefixListTagArray) ToPrefixListTagArrayOutputWithContext(ctx context.Context) PrefixListTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListTagArrayOutput)
}

type PrefixListTagOutput struct{ *pulumi.OutputState }

func (PrefixListTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListTag)(nil)).Elem()
}

func (o PrefixListTagOutput) ToPrefixListTagOutput() PrefixListTagOutput {
	return o
}

func (o PrefixListTagOutput) ToPrefixListTagOutputWithContext(ctx context.Context) PrefixListTagOutput {
	return o
}

// 用户标签的标签键。
func (o PrefixListTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o PrefixListTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PrefixListTagArrayOutput struct{ *pulumi.OutputState }

func (PrefixListTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListTag)(nil)).Elem()
}

func (o PrefixListTagArrayOutput) ToPrefixListTagArrayOutput() PrefixListTagArrayOutput {
	return o
}

func (o PrefixListTagArrayOutput) ToPrefixListTagArrayOutputWithContext(ctx context.Context) PrefixListTagArrayOutput {
	return o
}

func (o PrefixListTagArrayOutput) Index(i pulumi.IntInput) PrefixListTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrefixListTag {
		return vs[0].([]PrefixListTag)[vs[1].(int)]
	}).(PrefixListTagOutput)
}

type RouteTableCustomRouteEntry struct {
	// 路由条目描述。
	Description *string `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId *string `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId *string `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName *string `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType *string `pulumi:"nextHopType"`
	// 路由条目名称。
	RouteEntryName *string `pulumi:"routeEntryName"`
}

// RouteTableCustomRouteEntryInput is an input type that accepts RouteTableCustomRouteEntryArgs and RouteTableCustomRouteEntryOutput values.
// You can construct a concrete instance of `RouteTableCustomRouteEntryInput` via:
//
//	RouteTableCustomRouteEntryArgs{...}
type RouteTableCustomRouteEntryInput interface {
	pulumi.Input

	ToRouteTableCustomRouteEntryOutput() RouteTableCustomRouteEntryOutput
	ToRouteTableCustomRouteEntryOutputWithContext(context.Context) RouteTableCustomRouteEntryOutput
}

type RouteTableCustomRouteEntryArgs struct {
	// 路由条目描述。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringPtrInput `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId pulumi.StringPtrInput `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId pulumi.StringPtrInput `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName pulumi.StringPtrInput `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType pulumi.StringPtrInput `pulumi:"nextHopType"`
	// 路由条目名称。
	RouteEntryName pulumi.StringPtrInput `pulumi:"routeEntryName"`
}

func (RouteTableCustomRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableCustomRouteEntry)(nil)).Elem()
}

func (i RouteTableCustomRouteEntryArgs) ToRouteTableCustomRouteEntryOutput() RouteTableCustomRouteEntryOutput {
	return i.ToRouteTableCustomRouteEntryOutputWithContext(context.Background())
}

func (i RouteTableCustomRouteEntryArgs) ToRouteTableCustomRouteEntryOutputWithContext(ctx context.Context) RouteTableCustomRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableCustomRouteEntryOutput)
}

// RouteTableCustomRouteEntryArrayInput is an input type that accepts RouteTableCustomRouteEntryArray and RouteTableCustomRouteEntryArrayOutput values.
// You can construct a concrete instance of `RouteTableCustomRouteEntryArrayInput` via:
//
//	RouteTableCustomRouteEntryArray{ RouteTableCustomRouteEntryArgs{...} }
type RouteTableCustomRouteEntryArrayInput interface {
	pulumi.Input

	ToRouteTableCustomRouteEntryArrayOutput() RouteTableCustomRouteEntryArrayOutput
	ToRouteTableCustomRouteEntryArrayOutputWithContext(context.Context) RouteTableCustomRouteEntryArrayOutput
}

type RouteTableCustomRouteEntryArray []RouteTableCustomRouteEntryInput

func (RouteTableCustomRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableCustomRouteEntry)(nil)).Elem()
}

func (i RouteTableCustomRouteEntryArray) ToRouteTableCustomRouteEntryArrayOutput() RouteTableCustomRouteEntryArrayOutput {
	return i.ToRouteTableCustomRouteEntryArrayOutputWithContext(context.Background())
}

func (i RouteTableCustomRouteEntryArray) ToRouteTableCustomRouteEntryArrayOutputWithContext(ctx context.Context) RouteTableCustomRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableCustomRouteEntryArrayOutput)
}

type RouteTableCustomRouteEntryOutput struct{ *pulumi.OutputState }

func (RouteTableCustomRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableCustomRouteEntry)(nil)).Elem()
}

func (o RouteTableCustomRouteEntryOutput) ToRouteTableCustomRouteEntryOutput() RouteTableCustomRouteEntryOutput {
	return o
}

func (o RouteTableCustomRouteEntryOutput) ToRouteTableCustomRouteEntryOutputWithContext(ctx context.Context) RouteTableCustomRouteEntryOutput {
	return o
}

// 路由条目描述。
func (o RouteTableCustomRouteEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 路由条目的目标网段。
func (o RouteTableCustomRouteEntryOutput) DestinationCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.DestinationCidrBlock }).(pulumi.StringPtrOutput)
}

// 前缀列表ID。
func (o RouteTableCustomRouteEntryOutput) DestinationPrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.DestinationPrefixListId }).(pulumi.StringPtrOutput)
}

// 下一跳资源ID。
func (o RouteTableCustomRouteEntryOutput) NextHopId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.NextHopId }).(pulumi.StringPtrOutput)
}

// 路由条目下一跳资源的名称。
func (o RouteTableCustomRouteEntryOutput) NextHopName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.NextHopName }).(pulumi.StringPtrOutput)
}

// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
func (o RouteTableCustomRouteEntryOutput) NextHopType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.NextHopType }).(pulumi.StringPtrOutput)
}

// 路由条目名称。
func (o RouteTableCustomRouteEntryOutput) RouteEntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableCustomRouteEntry) *string { return v.RouteEntryName }).(pulumi.StringPtrOutput)
}

type RouteTableCustomRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (RouteTableCustomRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableCustomRouteEntry)(nil)).Elem()
}

func (o RouteTableCustomRouteEntryArrayOutput) ToRouteTableCustomRouteEntryArrayOutput() RouteTableCustomRouteEntryArrayOutput {
	return o
}

func (o RouteTableCustomRouteEntryArrayOutput) ToRouteTableCustomRouteEntryArrayOutputWithContext(ctx context.Context) RouteTableCustomRouteEntryArrayOutput {
	return o
}

func (o RouteTableCustomRouteEntryArrayOutput) Index(i pulumi.IntInput) RouteTableCustomRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTableCustomRouteEntry {
		return vs[0].([]RouteTableCustomRouteEntry)[vs[1].(int)]
	}).(RouteTableCustomRouteEntryOutput)
}

type RouteTableSystemRouteEntry struct {
	// 路由条目描述。
	Description *string `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId *string `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId *string `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName *string `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType *string `pulumi:"nextHopType"`
	// 前缀列表的CIDR。
	PrefixListCidrBlocks []string `pulumi:"prefixListCidrBlocks"`
	// 路由条目ID。
	RouteEntryId *string `pulumi:"routeEntryId"`
	// 路由条目名称。
	RouteEntryName *string `pulumi:"routeEntryName"`
	// 路由表ID。
	RouteTableId *string `pulumi:"routeTableId"`
	// 路由条目状态。1、Pending：待创建。2、Available：可用。
	Status *string `pulumi:"status"`
	// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
	Type *string `pulumi:"type"`
	// 路由条目所属私有网络的ID。
	VpcId *string `pulumi:"vpcId"`
}

// RouteTableSystemRouteEntryInput is an input type that accepts RouteTableSystemRouteEntryArgs and RouteTableSystemRouteEntryOutput values.
// You can construct a concrete instance of `RouteTableSystemRouteEntryInput` via:
//
//	RouteTableSystemRouteEntryArgs{...}
type RouteTableSystemRouteEntryInput interface {
	pulumi.Input

	ToRouteTableSystemRouteEntryOutput() RouteTableSystemRouteEntryOutput
	ToRouteTableSystemRouteEntryOutputWithContext(context.Context) RouteTableSystemRouteEntryOutput
}

type RouteTableSystemRouteEntryArgs struct {
	// 路由条目描述。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringPtrInput `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId pulumi.StringPtrInput `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId pulumi.StringPtrInput `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName pulumi.StringPtrInput `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType pulumi.StringPtrInput `pulumi:"nextHopType"`
	// 前缀列表的CIDR。
	PrefixListCidrBlocks pulumi.StringArrayInput `pulumi:"prefixListCidrBlocks"`
	// 路由条目ID。
	RouteEntryId pulumi.StringPtrInput `pulumi:"routeEntryId"`
	// 路由条目名称。
	RouteEntryName pulumi.StringPtrInput `pulumi:"routeEntryName"`
	// 路由表ID。
	RouteTableId pulumi.StringPtrInput `pulumi:"routeTableId"`
	// 路由条目状态。1、Pending：待创建。2、Available：可用。
	Status pulumi.StringPtrInput `pulumi:"status"`
	// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
	Type pulumi.StringPtrInput `pulumi:"type"`
	// 路由条目所属私有网络的ID。
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (RouteTableSystemRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableSystemRouteEntry)(nil)).Elem()
}

func (i RouteTableSystemRouteEntryArgs) ToRouteTableSystemRouteEntryOutput() RouteTableSystemRouteEntryOutput {
	return i.ToRouteTableSystemRouteEntryOutputWithContext(context.Background())
}

func (i RouteTableSystemRouteEntryArgs) ToRouteTableSystemRouteEntryOutputWithContext(ctx context.Context) RouteTableSystemRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableSystemRouteEntryOutput)
}

// RouteTableSystemRouteEntryArrayInput is an input type that accepts RouteTableSystemRouteEntryArray and RouteTableSystemRouteEntryArrayOutput values.
// You can construct a concrete instance of `RouteTableSystemRouteEntryArrayInput` via:
//
//	RouteTableSystemRouteEntryArray{ RouteTableSystemRouteEntryArgs{...} }
type RouteTableSystemRouteEntryArrayInput interface {
	pulumi.Input

	ToRouteTableSystemRouteEntryArrayOutput() RouteTableSystemRouteEntryArrayOutput
	ToRouteTableSystemRouteEntryArrayOutputWithContext(context.Context) RouteTableSystemRouteEntryArrayOutput
}

type RouteTableSystemRouteEntryArray []RouteTableSystemRouteEntryInput

func (RouteTableSystemRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableSystemRouteEntry)(nil)).Elem()
}

func (i RouteTableSystemRouteEntryArray) ToRouteTableSystemRouteEntryArrayOutput() RouteTableSystemRouteEntryArrayOutput {
	return i.ToRouteTableSystemRouteEntryArrayOutputWithContext(context.Background())
}

func (i RouteTableSystemRouteEntryArray) ToRouteTableSystemRouteEntryArrayOutputWithContext(ctx context.Context) RouteTableSystemRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableSystemRouteEntryArrayOutput)
}

type RouteTableSystemRouteEntryOutput struct{ *pulumi.OutputState }

func (RouteTableSystemRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableSystemRouteEntry)(nil)).Elem()
}

func (o RouteTableSystemRouteEntryOutput) ToRouteTableSystemRouteEntryOutput() RouteTableSystemRouteEntryOutput {
	return o
}

func (o RouteTableSystemRouteEntryOutput) ToRouteTableSystemRouteEntryOutputWithContext(ctx context.Context) RouteTableSystemRouteEntryOutput {
	return o
}

// 路由条目描述。
func (o RouteTableSystemRouteEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 路由条目的目标网段。
func (o RouteTableSystemRouteEntryOutput) DestinationCidrBlock() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.DestinationCidrBlock }).(pulumi.StringPtrOutput)
}

// 前缀列表ID。
func (o RouteTableSystemRouteEntryOutput) DestinationPrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.DestinationPrefixListId }).(pulumi.StringPtrOutput)
}

// 下一跳资源ID。
func (o RouteTableSystemRouteEntryOutput) NextHopId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.NextHopId }).(pulumi.StringPtrOutput)
}

// 路由条目下一跳资源的名称。
func (o RouteTableSystemRouteEntryOutput) NextHopName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.NextHopName }).(pulumi.StringPtrOutput)
}

// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
func (o RouteTableSystemRouteEntryOutput) NextHopType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.NextHopType }).(pulumi.StringPtrOutput)
}

// 前缀列表的CIDR。
func (o RouteTableSystemRouteEntryOutput) PrefixListCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) []string { return v.PrefixListCidrBlocks }).(pulumi.StringArrayOutput)
}

// 路由条目ID。
func (o RouteTableSystemRouteEntryOutput) RouteEntryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.RouteEntryId }).(pulumi.StringPtrOutput)
}

// 路由条目名称。
func (o RouteTableSystemRouteEntryOutput) RouteEntryName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.RouteEntryName }).(pulumi.StringPtrOutput)
}

// 路由表ID。
func (o RouteTableSystemRouteEntryOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

// 路由条目状态。1、Pending：待创建。2、Available：可用。
func (o RouteTableSystemRouteEntryOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
func (o RouteTableSystemRouteEntryOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// 路由条目所属私有网络的ID。
func (o RouteTableSystemRouteEntryOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableSystemRouteEntry) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type RouteTableSystemRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (RouteTableSystemRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableSystemRouteEntry)(nil)).Elem()
}

func (o RouteTableSystemRouteEntryArrayOutput) ToRouteTableSystemRouteEntryArrayOutput() RouteTableSystemRouteEntryArrayOutput {
	return o
}

func (o RouteTableSystemRouteEntryArrayOutput) ToRouteTableSystemRouteEntryArrayOutputWithContext(ctx context.Context) RouteTableSystemRouteEntryArrayOutput {
	return o
}

func (o RouteTableSystemRouteEntryArrayOutput) Index(i pulumi.IntInput) RouteTableSystemRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTableSystemRouteEntry {
		return vs[0].([]RouteTableSystemRouteEntry)[vs[1].(int)]
	}).(RouteTableSystemRouteEntryOutput)
}

type RouteTableTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// RouteTableTagInput is an input type that accepts RouteTableTagArgs and RouteTableTagOutput values.
// You can construct a concrete instance of `RouteTableTagInput` via:
//
//	RouteTableTagArgs{...}
type RouteTableTagInput interface {
	pulumi.Input

	ToRouteTableTagOutput() RouteTableTagOutput
	ToRouteTableTagOutputWithContext(context.Context) RouteTableTagOutput
}

type RouteTableTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RouteTableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableTag)(nil)).Elem()
}

func (i RouteTableTagArgs) ToRouteTableTagOutput() RouteTableTagOutput {
	return i.ToRouteTableTagOutputWithContext(context.Background())
}

func (i RouteTableTagArgs) ToRouteTableTagOutputWithContext(ctx context.Context) RouteTableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableTagOutput)
}

// RouteTableTagArrayInput is an input type that accepts RouteTableTagArray and RouteTableTagArrayOutput values.
// You can construct a concrete instance of `RouteTableTagArrayInput` via:
//
//	RouteTableTagArray{ RouteTableTagArgs{...} }
type RouteTableTagArrayInput interface {
	pulumi.Input

	ToRouteTableTagArrayOutput() RouteTableTagArrayOutput
	ToRouteTableTagArrayOutputWithContext(context.Context) RouteTableTagArrayOutput
}

type RouteTableTagArray []RouteTableTagInput

func (RouteTableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableTag)(nil)).Elem()
}

func (i RouteTableTagArray) ToRouteTableTagArrayOutput() RouteTableTagArrayOutput {
	return i.ToRouteTableTagArrayOutputWithContext(context.Background())
}

func (i RouteTableTagArray) ToRouteTableTagArrayOutputWithContext(ctx context.Context) RouteTableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableTagArrayOutput)
}

type RouteTableTagOutput struct{ *pulumi.OutputState }

func (RouteTableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteTableTag)(nil)).Elem()
}

func (o RouteTableTagOutput) ToRouteTableTagOutput() RouteTableTagOutput {
	return o
}

func (o RouteTableTagOutput) ToRouteTableTagOutputWithContext(ctx context.Context) RouteTableTagOutput {
	return o
}

// 用户标签的标签键。
func (o RouteTableTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o RouteTableTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteTableTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RouteTableTagArrayOutput struct{ *pulumi.OutputState }

func (RouteTableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteTableTag)(nil)).Elem()
}

func (o RouteTableTagArrayOutput) ToRouteTableTagArrayOutput() RouteTableTagArrayOutput {
	return o
}

func (o RouteTableTagArrayOutput) ToRouteTableTagArrayOutputWithContext(ctx context.Context) RouteTableTagArrayOutput {
	return o
}

func (o RouteTableTagArrayOutput) Index(i pulumi.IntInput) RouteTableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteTableTag {
		return vs[0].([]RouteTableTag)[vs[1].(int)]
	}).(RouteTableTagOutput)
}

type SecurityGroupEgressPermission struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp *string `pulumi:"cidrIp"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description *string `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction *string `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy *string `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd *int `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart *int `pulumi:"portStart"`
	// 前缀列表的ID
	PrefixListId *string `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority *int `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol *string `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId *string `pulumi:"sourceGroupId"`
}

// SecurityGroupEgressPermissionInput is an input type that accepts SecurityGroupEgressPermissionArgs and SecurityGroupEgressPermissionOutput values.
// You can construct a concrete instance of `SecurityGroupEgressPermissionInput` via:
//
//	SecurityGroupEgressPermissionArgs{...}
type SecurityGroupEgressPermissionInput interface {
	pulumi.Input

	ToSecurityGroupEgressPermissionOutput() SecurityGroupEgressPermissionOutput
	ToSecurityGroupEgressPermissionOutputWithContext(context.Context) SecurityGroupEgressPermissionOutput
}

type SecurityGroupEgressPermissionArgs struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp pulumi.StringPtrInput `pulumi:"cidrIp"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd pulumi.IntPtrInput `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart pulumi.IntPtrInput `pulumi:"portStart"`
	// 前缀列表的ID
	PrefixListId pulumi.StringPtrInput `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId pulumi.StringPtrInput `pulumi:"sourceGroupId"`
}

func (SecurityGroupEgressPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupEgressPermission)(nil)).Elem()
}

func (i SecurityGroupEgressPermissionArgs) ToSecurityGroupEgressPermissionOutput() SecurityGroupEgressPermissionOutput {
	return i.ToSecurityGroupEgressPermissionOutputWithContext(context.Background())
}

func (i SecurityGroupEgressPermissionArgs) ToSecurityGroupEgressPermissionOutputWithContext(ctx context.Context) SecurityGroupEgressPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupEgressPermissionOutput)
}

// SecurityGroupEgressPermissionArrayInput is an input type that accepts SecurityGroupEgressPermissionArray and SecurityGroupEgressPermissionArrayOutput values.
// You can construct a concrete instance of `SecurityGroupEgressPermissionArrayInput` via:
//
//	SecurityGroupEgressPermissionArray{ SecurityGroupEgressPermissionArgs{...} }
type SecurityGroupEgressPermissionArrayInput interface {
	pulumi.Input

	ToSecurityGroupEgressPermissionArrayOutput() SecurityGroupEgressPermissionArrayOutput
	ToSecurityGroupEgressPermissionArrayOutputWithContext(context.Context) SecurityGroupEgressPermissionArrayOutput
}

type SecurityGroupEgressPermissionArray []SecurityGroupEgressPermissionInput

func (SecurityGroupEgressPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupEgressPermission)(nil)).Elem()
}

func (i SecurityGroupEgressPermissionArray) ToSecurityGroupEgressPermissionArrayOutput() SecurityGroupEgressPermissionArrayOutput {
	return i.ToSecurityGroupEgressPermissionArrayOutputWithContext(context.Background())
}

func (i SecurityGroupEgressPermissionArray) ToSecurityGroupEgressPermissionArrayOutputWithContext(ctx context.Context) SecurityGroupEgressPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupEgressPermissionArrayOutput)
}

type SecurityGroupEgressPermissionOutput struct{ *pulumi.OutputState }

func (SecurityGroupEgressPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupEgressPermission)(nil)).Elem()
}

func (o SecurityGroupEgressPermissionOutput) ToSecurityGroupEgressPermissionOutput() SecurityGroupEgressPermissionOutput {
	return o
}

func (o SecurityGroupEgressPermissionOutput) ToSecurityGroupEgressPermissionOutputWithContext(ctx context.Context) SecurityGroupEgressPermissionOutput {
	return o
}

// 源地址的IPv4 CIDR或IPv6 CIDR
func (o SecurityGroupEgressPermissionOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
func (o SecurityGroupEgressPermissionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 安全组规则方向。ingress：入方向。egress：出方向
func (o SecurityGroupEgressPermissionOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
func (o SecurityGroupEgressPermissionOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o SecurityGroupEgressPermissionOutput) PortEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *int { return v.PortEnd }).(pulumi.IntPtrOutput)
}

// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o SecurityGroupEgressPermissionOutput) PortStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *int { return v.PortStart }).(pulumi.IntPtrOutput)
}

// 前缀列表的ID
func (o SecurityGroupEgressPermissionOutput) PrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.PrefixListId }).(pulumi.StringPtrOutput)
}

// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
func (o SecurityGroupEgressPermissionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// 协议类型。tcp、udp、icmp、icmpv6、all
func (o SecurityGroupEgressPermissionOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
func (o SecurityGroupEgressPermissionOutput) SourceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupEgressPermission) *string { return v.SourceGroupId }).(pulumi.StringPtrOutput)
}

type SecurityGroupEgressPermissionArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupEgressPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupEgressPermission)(nil)).Elem()
}

func (o SecurityGroupEgressPermissionArrayOutput) ToSecurityGroupEgressPermissionArrayOutput() SecurityGroupEgressPermissionArrayOutput {
	return o
}

func (o SecurityGroupEgressPermissionArrayOutput) ToSecurityGroupEgressPermissionArrayOutputWithContext(ctx context.Context) SecurityGroupEgressPermissionArrayOutput {
	return o
}

func (o SecurityGroupEgressPermissionArrayOutput) Index(i pulumi.IntInput) SecurityGroupEgressPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupEgressPermission {
		return vs[0].([]SecurityGroupEgressPermission)[vs[1].(int)]
	}).(SecurityGroupEgressPermissionOutput)
}

type SecurityGroupIngressPermission struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp *string `pulumi:"cidrIp"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description *string `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction *string `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy *string `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd *int `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart *int `pulumi:"portStart"`
	// 前缀列表的ID
	PrefixListId *string `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority *int `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol *string `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId *string `pulumi:"sourceGroupId"`
}

// SecurityGroupIngressPermissionInput is an input type that accepts SecurityGroupIngressPermissionArgs and SecurityGroupIngressPermissionOutput values.
// You can construct a concrete instance of `SecurityGroupIngressPermissionInput` via:
//
//	SecurityGroupIngressPermissionArgs{...}
type SecurityGroupIngressPermissionInput interface {
	pulumi.Input

	ToSecurityGroupIngressPermissionOutput() SecurityGroupIngressPermissionOutput
	ToSecurityGroupIngressPermissionOutputWithContext(context.Context) SecurityGroupIngressPermissionOutput
}

type SecurityGroupIngressPermissionArgs struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp pulumi.StringPtrInput `pulumi:"cidrIp"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description pulumi.StringPtrInput `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd pulumi.IntPtrInput `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart pulumi.IntPtrInput `pulumi:"portStart"`
	// 前缀列表的ID
	PrefixListId pulumi.StringPtrInput `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId pulumi.StringPtrInput `pulumi:"sourceGroupId"`
}

func (SecurityGroupIngressPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngressPermission)(nil)).Elem()
}

func (i SecurityGroupIngressPermissionArgs) ToSecurityGroupIngressPermissionOutput() SecurityGroupIngressPermissionOutput {
	return i.ToSecurityGroupIngressPermissionOutputWithContext(context.Background())
}

func (i SecurityGroupIngressPermissionArgs) ToSecurityGroupIngressPermissionOutputWithContext(ctx context.Context) SecurityGroupIngressPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressPermissionOutput)
}

// SecurityGroupIngressPermissionArrayInput is an input type that accepts SecurityGroupIngressPermissionArray and SecurityGroupIngressPermissionArrayOutput values.
// You can construct a concrete instance of `SecurityGroupIngressPermissionArrayInput` via:
//
//	SecurityGroupIngressPermissionArray{ SecurityGroupIngressPermissionArgs{...} }
type SecurityGroupIngressPermissionArrayInput interface {
	pulumi.Input

	ToSecurityGroupIngressPermissionArrayOutput() SecurityGroupIngressPermissionArrayOutput
	ToSecurityGroupIngressPermissionArrayOutputWithContext(context.Context) SecurityGroupIngressPermissionArrayOutput
}

type SecurityGroupIngressPermissionArray []SecurityGroupIngressPermissionInput

func (SecurityGroupIngressPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupIngressPermission)(nil)).Elem()
}

func (i SecurityGroupIngressPermissionArray) ToSecurityGroupIngressPermissionArrayOutput() SecurityGroupIngressPermissionArrayOutput {
	return i.ToSecurityGroupIngressPermissionArrayOutputWithContext(context.Background())
}

func (i SecurityGroupIngressPermissionArray) ToSecurityGroupIngressPermissionArrayOutputWithContext(ctx context.Context) SecurityGroupIngressPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupIngressPermissionArrayOutput)
}

type SecurityGroupIngressPermissionOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupIngressPermission)(nil)).Elem()
}

func (o SecurityGroupIngressPermissionOutput) ToSecurityGroupIngressPermissionOutput() SecurityGroupIngressPermissionOutput {
	return o
}

func (o SecurityGroupIngressPermissionOutput) ToSecurityGroupIngressPermissionOutputWithContext(ctx context.Context) SecurityGroupIngressPermissionOutput {
	return o
}

// 源地址的IPv4 CIDR或IPv6 CIDR
func (o SecurityGroupIngressPermissionOutput) CidrIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.CidrIp }).(pulumi.StringPtrOutput)
}

// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
func (o SecurityGroupIngressPermissionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// 安全组规则方向。ingress：入方向。egress：出方向
func (o SecurityGroupIngressPermissionOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
func (o SecurityGroupIngressPermissionOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o SecurityGroupIngressPermissionOutput) PortEnd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *int { return v.PortEnd }).(pulumi.IntPtrOutput)
}

// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o SecurityGroupIngressPermissionOutput) PortStart() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *int { return v.PortStart }).(pulumi.IntPtrOutput)
}

// 前缀列表的ID
func (o SecurityGroupIngressPermissionOutput) PrefixListId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.PrefixListId }).(pulumi.StringPtrOutput)
}

// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
func (o SecurityGroupIngressPermissionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// 协议类型。tcp、udp、icmp、icmpv6、all
func (o SecurityGroupIngressPermissionOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
func (o SecurityGroupIngressPermissionOutput) SourceGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupIngressPermission) *string { return v.SourceGroupId }).(pulumi.StringPtrOutput)
}

type SecurityGroupIngressPermissionArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupIngressPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupIngressPermission)(nil)).Elem()
}

func (o SecurityGroupIngressPermissionArrayOutput) ToSecurityGroupIngressPermissionArrayOutput() SecurityGroupIngressPermissionArrayOutput {
	return o
}

func (o SecurityGroupIngressPermissionArrayOutput) ToSecurityGroupIngressPermissionArrayOutputWithContext(ctx context.Context) SecurityGroupIngressPermissionArrayOutput {
	return o
}

func (o SecurityGroupIngressPermissionArrayOutput) Index(i pulumi.IntInput) SecurityGroupIngressPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupIngressPermission {
		return vs[0].([]SecurityGroupIngressPermission)[vs[1].(int)]
	}).(SecurityGroupIngressPermissionOutput)
}

type SecurityGroupTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// SecurityGroupTagInput is an input type that accepts SecurityGroupTagArgs and SecurityGroupTagOutput values.
// You can construct a concrete instance of `SecurityGroupTagInput` via:
//
//	SecurityGroupTagArgs{...}
type SecurityGroupTagInput interface {
	pulumi.Input

	ToSecurityGroupTagOutput() SecurityGroupTagOutput
	ToSecurityGroupTagOutputWithContext(context.Context) SecurityGroupTagOutput
}

type SecurityGroupTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SecurityGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupTag)(nil)).Elem()
}

func (i SecurityGroupTagArgs) ToSecurityGroupTagOutput() SecurityGroupTagOutput {
	return i.ToSecurityGroupTagOutputWithContext(context.Background())
}

func (i SecurityGroupTagArgs) ToSecurityGroupTagOutputWithContext(ctx context.Context) SecurityGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupTagOutput)
}

// SecurityGroupTagArrayInput is an input type that accepts SecurityGroupTagArray and SecurityGroupTagArrayOutput values.
// You can construct a concrete instance of `SecurityGroupTagArrayInput` via:
//
//	SecurityGroupTagArray{ SecurityGroupTagArgs{...} }
type SecurityGroupTagArrayInput interface {
	pulumi.Input

	ToSecurityGroupTagArrayOutput() SecurityGroupTagArrayOutput
	ToSecurityGroupTagArrayOutputWithContext(context.Context) SecurityGroupTagArrayOutput
}

type SecurityGroupTagArray []SecurityGroupTagInput

func (SecurityGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupTag)(nil)).Elem()
}

func (i SecurityGroupTagArray) ToSecurityGroupTagArrayOutput() SecurityGroupTagArrayOutput {
	return i.ToSecurityGroupTagArrayOutputWithContext(context.Background())
}

func (i SecurityGroupTagArray) ToSecurityGroupTagArrayOutputWithContext(ctx context.Context) SecurityGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityGroupTagArrayOutput)
}

type SecurityGroupTagOutput struct{ *pulumi.OutputState }

func (SecurityGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityGroupTag)(nil)).Elem()
}

func (o SecurityGroupTagOutput) ToSecurityGroupTagOutput() SecurityGroupTagOutput {
	return o
}

func (o SecurityGroupTagOutput) ToSecurityGroupTagOutputWithContext(ctx context.Context) SecurityGroupTagOutput {
	return o
}

// 用户标签的标签键。
func (o SecurityGroupTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o SecurityGroupTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SecurityGroupTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SecurityGroupTagArrayOutput struct{ *pulumi.OutputState }

func (SecurityGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecurityGroupTag)(nil)).Elem()
}

func (o SecurityGroupTagArrayOutput) ToSecurityGroupTagArrayOutput() SecurityGroupTagArrayOutput {
	return o
}

func (o SecurityGroupTagArrayOutput) ToSecurityGroupTagArrayOutputWithContext(ctx context.Context) SecurityGroupTagArrayOutput {
	return o
}

func (o SecurityGroupTagArrayOutput) Index(i pulumi.IntInput) SecurityGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecurityGroupTag {
		return vs[0].([]SecurityGroupTag)[vs[1].(int)]
	}).(SecurityGroupTagOutput)
}

type SubnetRouteTable struct {
	// 子网关联的路由表ID。
	RouteTableId *string `pulumi:"routeTableId"`
	// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
	RouteTableType *string `pulumi:"routeTableType"`
}

// SubnetRouteTableInput is an input type that accepts SubnetRouteTableArgs and SubnetRouteTableOutput values.
// You can construct a concrete instance of `SubnetRouteTableInput` via:
//
//	SubnetRouteTableArgs{...}
type SubnetRouteTableInput interface {
	pulumi.Input

	ToSubnetRouteTableOutput() SubnetRouteTableOutput
	ToSubnetRouteTableOutputWithContext(context.Context) SubnetRouteTableOutput
}

type SubnetRouteTableArgs struct {
	// 子网关联的路由表ID。
	RouteTableId pulumi.StringPtrInput `pulumi:"routeTableId"`
	// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
	RouteTableType pulumi.StringPtrInput `pulumi:"routeTableType"`
}

func (SubnetRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetRouteTable)(nil)).Elem()
}

func (i SubnetRouteTableArgs) ToSubnetRouteTableOutput() SubnetRouteTableOutput {
	return i.ToSubnetRouteTableOutputWithContext(context.Background())
}

func (i SubnetRouteTableArgs) ToSubnetRouteTableOutputWithContext(ctx context.Context) SubnetRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetRouteTableOutput)
}

func (i SubnetRouteTableArgs) ToSubnetRouteTablePtrOutput() SubnetRouteTablePtrOutput {
	return i.ToSubnetRouteTablePtrOutputWithContext(context.Background())
}

func (i SubnetRouteTableArgs) ToSubnetRouteTablePtrOutputWithContext(ctx context.Context) SubnetRouteTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetRouteTableOutput).ToSubnetRouteTablePtrOutputWithContext(ctx)
}

// SubnetRouteTablePtrInput is an input type that accepts SubnetRouteTableArgs, SubnetRouteTablePtr and SubnetRouteTablePtrOutput values.
// You can construct a concrete instance of `SubnetRouteTablePtrInput` via:
//
//	        SubnetRouteTableArgs{...}
//
//	or:
//
//	        nil
type SubnetRouteTablePtrInput interface {
	pulumi.Input

	ToSubnetRouteTablePtrOutput() SubnetRouteTablePtrOutput
	ToSubnetRouteTablePtrOutputWithContext(context.Context) SubnetRouteTablePtrOutput
}

type subnetRouteTablePtrType SubnetRouteTableArgs

func SubnetRouteTablePtr(v *SubnetRouteTableArgs) SubnetRouteTablePtrInput {
	return (*subnetRouteTablePtrType)(v)
}

func (*subnetRouteTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetRouteTable)(nil)).Elem()
}

func (i *subnetRouteTablePtrType) ToSubnetRouteTablePtrOutput() SubnetRouteTablePtrOutput {
	return i.ToSubnetRouteTablePtrOutputWithContext(context.Background())
}

func (i *subnetRouteTablePtrType) ToSubnetRouteTablePtrOutputWithContext(ctx context.Context) SubnetRouteTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetRouteTablePtrOutput)
}

type SubnetRouteTableOutput struct{ *pulumi.OutputState }

func (SubnetRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetRouteTable)(nil)).Elem()
}

func (o SubnetRouteTableOutput) ToSubnetRouteTableOutput() SubnetRouteTableOutput {
	return o
}

func (o SubnetRouteTableOutput) ToSubnetRouteTableOutputWithContext(ctx context.Context) SubnetRouteTableOutput {
	return o
}

func (o SubnetRouteTableOutput) ToSubnetRouteTablePtrOutput() SubnetRouteTablePtrOutput {
	return o.ToSubnetRouteTablePtrOutputWithContext(context.Background())
}

func (o SubnetRouteTableOutput) ToSubnetRouteTablePtrOutputWithContext(ctx context.Context) SubnetRouteTablePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SubnetRouteTable) *SubnetRouteTable {
		return &v
	}).(SubnetRouteTablePtrOutput)
}

// 子网关联的路由表ID。
func (o SubnetRouteTableOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetRouteTable) *string { return v.RouteTableId }).(pulumi.StringPtrOutput)
}

// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
func (o SubnetRouteTableOutput) RouteTableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetRouteTable) *string { return v.RouteTableType }).(pulumi.StringPtrOutput)
}

type SubnetRouteTablePtrOutput struct{ *pulumi.OutputState }

func (SubnetRouteTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SubnetRouteTable)(nil)).Elem()
}

func (o SubnetRouteTablePtrOutput) ToSubnetRouteTablePtrOutput() SubnetRouteTablePtrOutput {
	return o
}

func (o SubnetRouteTablePtrOutput) ToSubnetRouteTablePtrOutputWithContext(ctx context.Context) SubnetRouteTablePtrOutput {
	return o
}

func (o SubnetRouteTablePtrOutput) Elem() SubnetRouteTableOutput {
	return o.ApplyT(func(v *SubnetRouteTable) SubnetRouteTable {
		if v != nil {
			return *v
		}
		var ret SubnetRouteTable
		return ret
	}).(SubnetRouteTableOutput)
}

// 子网关联的路由表ID。
func (o SubnetRouteTablePtrOutput) RouteTableId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetRouteTable) *string {
		if v == nil {
			return nil
		}
		return v.RouteTableId
	}).(pulumi.StringPtrOutput)
}

// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
func (o SubnetRouteTablePtrOutput) RouteTableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SubnetRouteTable) *string {
		if v == nil {
			return nil
		}
		return v.RouteTableType
	}).(pulumi.StringPtrOutput)
}

type SubnetTag struct {
	// 用户标签的标签键。
	Key *string `pulumi:"key"`
	// 用户标签的标签值。
	Value *string `pulumi:"value"`
}

// SubnetTagInput is an input type that accepts SubnetTagArgs and SubnetTagOutput values.
// You can construct a concrete instance of `SubnetTagInput` via:
//
//	SubnetTagArgs{...}
type SubnetTagInput interface {
	pulumi.Input

	ToSubnetTagOutput() SubnetTagOutput
	ToSubnetTagOutputWithContext(context.Context) SubnetTagOutput
}

type SubnetTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SubnetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetTag)(nil)).Elem()
}

func (i SubnetTagArgs) ToSubnetTagOutput() SubnetTagOutput {
	return i.ToSubnetTagOutputWithContext(context.Background())
}

func (i SubnetTagArgs) ToSubnetTagOutputWithContext(ctx context.Context) SubnetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetTagOutput)
}

// SubnetTagArrayInput is an input type that accepts SubnetTagArray and SubnetTagArrayOutput values.
// You can construct a concrete instance of `SubnetTagArrayInput` via:
//
//	SubnetTagArray{ SubnetTagArgs{...} }
type SubnetTagArrayInput interface {
	pulumi.Input

	ToSubnetTagArrayOutput() SubnetTagArrayOutput
	ToSubnetTagArrayOutputWithContext(context.Context) SubnetTagArrayOutput
}

type SubnetTagArray []SubnetTagInput

func (SubnetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetTag)(nil)).Elem()
}

func (i SubnetTagArray) ToSubnetTagArrayOutput() SubnetTagArrayOutput {
	return i.ToSubnetTagArrayOutputWithContext(context.Background())
}

func (i SubnetTagArray) ToSubnetTagArrayOutputWithContext(ctx context.Context) SubnetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetTagArrayOutput)
}

type SubnetTagOutput struct{ *pulumi.OutputState }

func (SubnetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubnetTag)(nil)).Elem()
}

func (o SubnetTagOutput) ToSubnetTagOutput() SubnetTagOutput {
	return o
}

func (o SubnetTagOutput) ToSubnetTagOutputWithContext(ctx context.Context) SubnetTagOutput {
	return o
}

// 用户标签的标签键。
func (o SubnetTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 用户标签的标签值。
func (o SubnetTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SubnetTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SubnetTagArrayOutput struct{ *pulumi.OutputState }

func (SubnetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SubnetTag)(nil)).Elem()
}

func (o SubnetTagArrayOutput) ToSubnetTagArrayOutput() SubnetTagArrayOutput {
	return o
}

func (o SubnetTagArrayOutput) ToSubnetTagArrayOutputWithContext(ctx context.Context) SubnetTagArrayOutput {
	return o
}

func (o SubnetTagArrayOutput) Index(i pulumi.IntInput) SubnetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SubnetTag {
		return vs[0].([]SubnetTag)[vs[1].(int)]
	}).(SubnetTagOutput)
}

type VpcAssociateCen struct {
	// CEN的ID。
	CenId *string `pulumi:"cenId"`
	// CEN的用户ID。
	CenOwnerId *string `pulumi:"cenOwnerId"`
	// VPC在CEN中的状态。Attaching：加载中，Attached：已加载
	CenStatus *string `pulumi:"cenStatus"`
}

// VpcAssociateCenInput is an input type that accepts VpcAssociateCenArgs and VpcAssociateCenOutput values.
// You can construct a concrete instance of `VpcAssociateCenInput` via:
//
//	VpcAssociateCenArgs{...}
type VpcAssociateCenInput interface {
	pulumi.Input

	ToVpcAssociateCenOutput() VpcAssociateCenOutput
	ToVpcAssociateCenOutputWithContext(context.Context) VpcAssociateCenOutput
}

type VpcAssociateCenArgs struct {
	// CEN的ID。
	CenId pulumi.StringPtrInput `pulumi:"cenId"`
	// CEN的用户ID。
	CenOwnerId pulumi.StringPtrInput `pulumi:"cenOwnerId"`
	// VPC在CEN中的状态。Attaching：加载中，Attached：已加载
	CenStatus pulumi.StringPtrInput `pulumi:"cenStatus"`
}

func (VpcAssociateCenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAssociateCen)(nil)).Elem()
}

func (i VpcAssociateCenArgs) ToVpcAssociateCenOutput() VpcAssociateCenOutput {
	return i.ToVpcAssociateCenOutputWithContext(context.Background())
}

func (i VpcAssociateCenArgs) ToVpcAssociateCenOutputWithContext(ctx context.Context) VpcAssociateCenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAssociateCenOutput)
}

// VpcAssociateCenArrayInput is an input type that accepts VpcAssociateCenArray and VpcAssociateCenArrayOutput values.
// You can construct a concrete instance of `VpcAssociateCenArrayInput` via:
//
//	VpcAssociateCenArray{ VpcAssociateCenArgs{...} }
type VpcAssociateCenArrayInput interface {
	pulumi.Input

	ToVpcAssociateCenArrayOutput() VpcAssociateCenArrayOutput
	ToVpcAssociateCenArrayOutputWithContext(context.Context) VpcAssociateCenArrayOutput
}

type VpcAssociateCenArray []VpcAssociateCenInput

func (VpcAssociateCenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcAssociateCen)(nil)).Elem()
}

func (i VpcAssociateCenArray) ToVpcAssociateCenArrayOutput() VpcAssociateCenArrayOutput {
	return i.ToVpcAssociateCenArrayOutputWithContext(context.Background())
}

func (i VpcAssociateCenArray) ToVpcAssociateCenArrayOutputWithContext(ctx context.Context) VpcAssociateCenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcAssociateCenArrayOutput)
}

type VpcAssociateCenOutput struct{ *pulumi.OutputState }

func (VpcAssociateCenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcAssociateCen)(nil)).Elem()
}

func (o VpcAssociateCenOutput) ToVpcAssociateCenOutput() VpcAssociateCenOutput {
	return o
}

func (o VpcAssociateCenOutput) ToVpcAssociateCenOutputWithContext(ctx context.Context) VpcAssociateCenOutput {
	return o
}

// CEN的ID。
func (o VpcAssociateCenOutput) CenId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAssociateCen) *string { return v.CenId }).(pulumi.StringPtrOutput)
}

// CEN的用户ID。
func (o VpcAssociateCenOutput) CenOwnerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAssociateCen) *string { return v.CenOwnerId }).(pulumi.StringPtrOutput)
}

// VPC在CEN中的状态。Attaching：加载中，Attached：已加载
func (o VpcAssociateCenOutput) CenStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcAssociateCen) *string { return v.CenStatus }).(pulumi.StringPtrOutput)
}

type VpcAssociateCenArrayOutput struct{ *pulumi.OutputState }

func (VpcAssociateCenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcAssociateCen)(nil)).Elem()
}

func (o VpcAssociateCenArrayOutput) ToVpcAssociateCenArrayOutput() VpcAssociateCenArrayOutput {
	return o
}

func (o VpcAssociateCenArrayOutput) ToVpcAssociateCenArrayOutputWithContext(ctx context.Context) VpcAssociateCenArrayOutput {
	return o
}

func (o VpcAssociateCenArrayOutput) Index(i pulumi.IntInput) VpcAssociateCenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcAssociateCen {
		return vs[0].([]VpcAssociateCen)[vs[1].(int)]
	}).(VpcAssociateCenOutput)
}

type VpcTag struct {
	// 标签键。
	Key *string `pulumi:"key"`
	// 标签值。
	Value *string `pulumi:"value"`
}

// VpcTagInput is an input type that accepts VpcTagArgs and VpcTagOutput values.
// You can construct a concrete instance of `VpcTagInput` via:
//
//	VpcTagArgs{...}
type VpcTagInput interface {
	pulumi.Input

	ToVpcTagOutput() VpcTagOutput
	ToVpcTagOutputWithContext(context.Context) VpcTagOutput
}

type VpcTagArgs struct {
	// 标签键。
	Key pulumi.StringPtrInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (VpcTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcTag)(nil)).Elem()
}

func (i VpcTagArgs) ToVpcTagOutput() VpcTagOutput {
	return i.ToVpcTagOutputWithContext(context.Background())
}

func (i VpcTagArgs) ToVpcTagOutputWithContext(ctx context.Context) VpcTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcTagOutput)
}

// VpcTagArrayInput is an input type that accepts VpcTagArray and VpcTagArrayOutput values.
// You can construct a concrete instance of `VpcTagArrayInput` via:
//
//	VpcTagArray{ VpcTagArgs{...} }
type VpcTagArrayInput interface {
	pulumi.Input

	ToVpcTagArrayOutput() VpcTagArrayOutput
	ToVpcTagArrayOutputWithContext(context.Context) VpcTagArrayOutput
}

type VpcTagArray []VpcTagInput

func (VpcTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcTag)(nil)).Elem()
}

func (i VpcTagArray) ToVpcTagArrayOutput() VpcTagArrayOutput {
	return i.ToVpcTagArrayOutputWithContext(context.Background())
}

func (i VpcTagArray) ToVpcTagArrayOutputWithContext(ctx context.Context) VpcTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcTagArrayOutput)
}

type VpcTagOutput struct{ *pulumi.OutputState }

func (VpcTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcTag)(nil)).Elem()
}

func (o VpcTagOutput) ToVpcTagOutput() VpcTagOutput {
	return o
}

func (o VpcTagOutput) ToVpcTagOutputWithContext(ctx context.Context) VpcTagOutput {
	return o
}

// 标签键。
func (o VpcTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// 标签值。
func (o VpcTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type VpcTagArrayOutput struct{ *pulumi.OutputState }

func (VpcTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcTag)(nil)).Elem()
}

func (o VpcTagArrayOutput) ToVpcTagArrayOutput() VpcTagArrayOutput {
	return o
}

func (o VpcTagArrayOutput) ToVpcTagArrayOutputWithContext(ctx context.Context) VpcTagArrayOutput {
	return o
}

func (o VpcTagArrayOutput) Index(i pulumi.IntInput) VpcTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcTag {
		return vs[0].([]VpcTag)[vs[1].(int)]
	}).(VpcTagOutput)
}

type GetBandwidthPackageEipAddress struct {
	// 分配ID
	AllocationId string `pulumi:"allocationId"`
	// 弹性IP地址
	EipAddress string `pulumi:"eipAddress"`
}

// GetBandwidthPackageEipAddressInput is an input type that accepts GetBandwidthPackageEipAddressArgs and GetBandwidthPackageEipAddressOutput values.
// You can construct a concrete instance of `GetBandwidthPackageEipAddressInput` via:
//
//	GetBandwidthPackageEipAddressArgs{...}
type GetBandwidthPackageEipAddressInput interface {
	pulumi.Input

	ToGetBandwidthPackageEipAddressOutput() GetBandwidthPackageEipAddressOutput
	ToGetBandwidthPackageEipAddressOutputWithContext(context.Context) GetBandwidthPackageEipAddressOutput
}

type GetBandwidthPackageEipAddressArgs struct {
	// 分配ID
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// 弹性IP地址
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
}

func (GetBandwidthPackageEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackageEipAddress)(nil)).Elem()
}

func (i GetBandwidthPackageEipAddressArgs) ToGetBandwidthPackageEipAddressOutput() GetBandwidthPackageEipAddressOutput {
	return i.ToGetBandwidthPackageEipAddressOutputWithContext(context.Background())
}

func (i GetBandwidthPackageEipAddressArgs) ToGetBandwidthPackageEipAddressOutputWithContext(ctx context.Context) GetBandwidthPackageEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackageEipAddressOutput)
}

// GetBandwidthPackageEipAddressArrayInput is an input type that accepts GetBandwidthPackageEipAddressArray and GetBandwidthPackageEipAddressArrayOutput values.
// You can construct a concrete instance of `GetBandwidthPackageEipAddressArrayInput` via:
//
//	GetBandwidthPackageEipAddressArray{ GetBandwidthPackageEipAddressArgs{...} }
type GetBandwidthPackageEipAddressArrayInput interface {
	pulumi.Input

	ToGetBandwidthPackageEipAddressArrayOutput() GetBandwidthPackageEipAddressArrayOutput
	ToGetBandwidthPackageEipAddressArrayOutputWithContext(context.Context) GetBandwidthPackageEipAddressArrayOutput
}

type GetBandwidthPackageEipAddressArray []GetBandwidthPackageEipAddressInput

func (GetBandwidthPackageEipAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackageEipAddress)(nil)).Elem()
}

func (i GetBandwidthPackageEipAddressArray) ToGetBandwidthPackageEipAddressArrayOutput() GetBandwidthPackageEipAddressArrayOutput {
	return i.ToGetBandwidthPackageEipAddressArrayOutputWithContext(context.Background())
}

func (i GetBandwidthPackageEipAddressArray) ToGetBandwidthPackageEipAddressArrayOutputWithContext(ctx context.Context) GetBandwidthPackageEipAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackageEipAddressArrayOutput)
}

type GetBandwidthPackageEipAddressOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackageEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackageEipAddress)(nil)).Elem()
}

func (o GetBandwidthPackageEipAddressOutput) ToGetBandwidthPackageEipAddressOutput() GetBandwidthPackageEipAddressOutput {
	return o
}

func (o GetBandwidthPackageEipAddressOutput) ToGetBandwidthPackageEipAddressOutputWithContext(ctx context.Context) GetBandwidthPackageEipAddressOutput {
	return o
}

// 分配ID
func (o GetBandwidthPackageEipAddressOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackageEipAddress) string { return v.AllocationId }).(pulumi.StringOutput)
}

// 弹性IP地址
func (o GetBandwidthPackageEipAddressOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackageEipAddress) string { return v.EipAddress }).(pulumi.StringOutput)
}

type GetBandwidthPackageEipAddressArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackageEipAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackageEipAddress)(nil)).Elem()
}

func (o GetBandwidthPackageEipAddressArrayOutput) ToGetBandwidthPackageEipAddressArrayOutput() GetBandwidthPackageEipAddressArrayOutput {
	return o
}

func (o GetBandwidthPackageEipAddressArrayOutput) ToGetBandwidthPackageEipAddressArrayOutputWithContext(ctx context.Context) GetBandwidthPackageEipAddressArrayOutput {
	return o
}

func (o GetBandwidthPackageEipAddressArrayOutput) Index(i pulumi.IntInput) GetBandwidthPackageEipAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthPackageEipAddress {
		return vs[0].([]GetBandwidthPackageEipAddress)[vs[1].(int)]
	}).(GetBandwidthPackageEipAddressOutput)
}

type GetBandwidthPackageTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetBandwidthPackageTagInput is an input type that accepts GetBandwidthPackageTagArgs and GetBandwidthPackageTagOutput values.
// You can construct a concrete instance of `GetBandwidthPackageTagInput` via:
//
//	GetBandwidthPackageTagArgs{...}
type GetBandwidthPackageTagInput interface {
	pulumi.Input

	ToGetBandwidthPackageTagOutput() GetBandwidthPackageTagOutput
	ToGetBandwidthPackageTagOutputWithContext(context.Context) GetBandwidthPackageTagOutput
}

type GetBandwidthPackageTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetBandwidthPackageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackageTag)(nil)).Elem()
}

func (i GetBandwidthPackageTagArgs) ToGetBandwidthPackageTagOutput() GetBandwidthPackageTagOutput {
	return i.ToGetBandwidthPackageTagOutputWithContext(context.Background())
}

func (i GetBandwidthPackageTagArgs) ToGetBandwidthPackageTagOutputWithContext(ctx context.Context) GetBandwidthPackageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackageTagOutput)
}

// GetBandwidthPackageTagArrayInput is an input type that accepts GetBandwidthPackageTagArray and GetBandwidthPackageTagArrayOutput values.
// You can construct a concrete instance of `GetBandwidthPackageTagArrayInput` via:
//
//	GetBandwidthPackageTagArray{ GetBandwidthPackageTagArgs{...} }
type GetBandwidthPackageTagArrayInput interface {
	pulumi.Input

	ToGetBandwidthPackageTagArrayOutput() GetBandwidthPackageTagArrayOutput
	ToGetBandwidthPackageTagArrayOutputWithContext(context.Context) GetBandwidthPackageTagArrayOutput
}

type GetBandwidthPackageTagArray []GetBandwidthPackageTagInput

func (GetBandwidthPackageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackageTag)(nil)).Elem()
}

func (i GetBandwidthPackageTagArray) ToGetBandwidthPackageTagArrayOutput() GetBandwidthPackageTagArrayOutput {
	return i.ToGetBandwidthPackageTagArrayOutputWithContext(context.Background())
}

func (i GetBandwidthPackageTagArray) ToGetBandwidthPackageTagArrayOutputWithContext(ctx context.Context) GetBandwidthPackageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBandwidthPackageTagArrayOutput)
}

type GetBandwidthPackageTagOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBandwidthPackageTag)(nil)).Elem()
}

func (o GetBandwidthPackageTagOutput) ToGetBandwidthPackageTagOutput() GetBandwidthPackageTagOutput {
	return o
}

func (o GetBandwidthPackageTagOutput) ToGetBandwidthPackageTagOutputWithContext(ctx context.Context) GetBandwidthPackageTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetBandwidthPackageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackageTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetBandwidthPackageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetBandwidthPackageTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetBandwidthPackageTagArrayOutput struct{ *pulumi.OutputState }

func (GetBandwidthPackageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBandwidthPackageTag)(nil)).Elem()
}

func (o GetBandwidthPackageTagArrayOutput) ToGetBandwidthPackageTagArrayOutput() GetBandwidthPackageTagArrayOutput {
	return o
}

func (o GetBandwidthPackageTagArrayOutput) ToGetBandwidthPackageTagArrayOutputWithContext(ctx context.Context) GetBandwidthPackageTagArrayOutput {
	return o
}

func (o GetBandwidthPackageTagArrayOutput) Index(i pulumi.IntInput) GetBandwidthPackageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBandwidthPackageTag {
		return vs[0].([]GetBandwidthPackageTag)[vs[1].(int)]
	}).(GetBandwidthPackageTagOutput)
}

type GetEipTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetEipTagInput is an input type that accepts GetEipTagArgs and GetEipTagOutput values.
// You can construct a concrete instance of `GetEipTagInput` via:
//
//	GetEipTagArgs{...}
type GetEipTagInput interface {
	pulumi.Input

	ToGetEipTagOutput() GetEipTagOutput
	ToGetEipTagOutputWithContext(context.Context) GetEipTagOutput
}

type GetEipTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetEipTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipTag)(nil)).Elem()
}

func (i GetEipTagArgs) ToGetEipTagOutput() GetEipTagOutput {
	return i.ToGetEipTagOutputWithContext(context.Background())
}

func (i GetEipTagArgs) ToGetEipTagOutputWithContext(ctx context.Context) GetEipTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipTagOutput)
}

// GetEipTagArrayInput is an input type that accepts GetEipTagArray and GetEipTagArrayOutput values.
// You can construct a concrete instance of `GetEipTagArrayInput` via:
//
//	GetEipTagArray{ GetEipTagArgs{...} }
type GetEipTagArrayInput interface {
	pulumi.Input

	ToGetEipTagArrayOutput() GetEipTagArrayOutput
	ToGetEipTagArrayOutputWithContext(context.Context) GetEipTagArrayOutput
}

type GetEipTagArray []GetEipTagInput

func (GetEipTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipTag)(nil)).Elem()
}

func (i GetEipTagArray) ToGetEipTagArrayOutput() GetEipTagArrayOutput {
	return i.ToGetEipTagArrayOutputWithContext(context.Background())
}

func (i GetEipTagArray) ToGetEipTagArrayOutputWithContext(ctx context.Context) GetEipTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEipTagArrayOutput)
}

type GetEipTagOutput struct{ *pulumi.OutputState }

func (GetEipTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEipTag)(nil)).Elem()
}

func (o GetEipTagOutput) ToGetEipTagOutput() GetEipTagOutput {
	return o
}

func (o GetEipTagOutput) ToGetEipTagOutputWithContext(ctx context.Context) GetEipTagOutput {
	return o
}

// 标签键。
func (o GetEipTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetEipTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetEipTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetEipTagArrayOutput struct{ *pulumi.OutputState }

func (GetEipTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEipTag)(nil)).Elem()
}

func (o GetEipTagArrayOutput) ToGetEipTagArrayOutput() GetEipTagArrayOutput {
	return o
}

func (o GetEipTagArrayOutput) ToGetEipTagArrayOutputWithContext(ctx context.Context) GetEipTagArrayOutput {
	return o
}

func (o GetEipTagArrayOutput) Index(i pulumi.IntInput) GetEipTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEipTag {
		return vs[0].([]GetEipTag)[vs[1].(int)]
	}).(GetEipTagOutput)
}

type GetEniPrimaryIpAddress struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp GetEniPrimaryIpAddressAssociatedElasticIp `pulumi:"associatedElasticIp"`
	// 是否为主私网IPv4地址。
	Primary bool `pulumi:"primary"`
	// 网卡的私网IP地址。
	PrivateIpAddress string `pulumi:"privateIpAddress"`
}

// GetEniPrimaryIpAddressInput is an input type that accepts GetEniPrimaryIpAddressArgs and GetEniPrimaryIpAddressOutput values.
// You can construct a concrete instance of `GetEniPrimaryIpAddressInput` via:
//
//	GetEniPrimaryIpAddressArgs{...}
type GetEniPrimaryIpAddressInput interface {
	pulumi.Input

	ToGetEniPrimaryIpAddressOutput() GetEniPrimaryIpAddressOutput
	ToGetEniPrimaryIpAddressOutputWithContext(context.Context) GetEniPrimaryIpAddressOutput
}

type GetEniPrimaryIpAddressArgs struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp GetEniPrimaryIpAddressAssociatedElasticIpInput `pulumi:"associatedElasticIp"`
	// 是否为主私网IPv4地址。
	Primary pulumi.BoolInput `pulumi:"primary"`
	// 网卡的私网IP地址。
	PrivateIpAddress pulumi.StringInput `pulumi:"privateIpAddress"`
}

func (GetEniPrimaryIpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrimaryIpAddress)(nil)).Elem()
}

func (i GetEniPrimaryIpAddressArgs) ToGetEniPrimaryIpAddressOutput() GetEniPrimaryIpAddressOutput {
	return i.ToGetEniPrimaryIpAddressOutputWithContext(context.Background())
}

func (i GetEniPrimaryIpAddressArgs) ToGetEniPrimaryIpAddressOutputWithContext(ctx context.Context) GetEniPrimaryIpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniPrimaryIpAddressOutput)
}

type GetEniPrimaryIpAddressOutput struct{ *pulumi.OutputState }

func (GetEniPrimaryIpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrimaryIpAddress)(nil)).Elem()
}

func (o GetEniPrimaryIpAddressOutput) ToGetEniPrimaryIpAddressOutput() GetEniPrimaryIpAddressOutput {
	return o
}

func (o GetEniPrimaryIpAddressOutput) ToGetEniPrimaryIpAddressOutputWithContext(ctx context.Context) GetEniPrimaryIpAddressOutput {
	return o
}

// 网卡主私网IPv4关联的公网IP的信息。
func (o GetEniPrimaryIpAddressOutput) AssociatedElasticIp() GetEniPrimaryIpAddressAssociatedElasticIpOutput {
	return o.ApplyT(func(v GetEniPrimaryIpAddress) GetEniPrimaryIpAddressAssociatedElasticIp { return v.AssociatedElasticIp }).(GetEniPrimaryIpAddressAssociatedElasticIpOutput)
}

// 是否为主私网IPv4地址。
func (o GetEniPrimaryIpAddressOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEniPrimaryIpAddress) bool { return v.Primary }).(pulumi.BoolOutput)
}

// 网卡的私网IP地址。
func (o GetEniPrimaryIpAddressOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniPrimaryIpAddress) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

type GetEniPrimaryIpAddressAssociatedElasticIp struct {
	// 公网IP的ID。
	AllocationId string `pulumi:"allocationId"`
	// 公网IP的地址。
	EipAddress string `pulumi:"eipAddress"`
	// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
	ReleaseWithInstance bool `pulumi:"releaseWithInstance"`
}

// GetEniPrimaryIpAddressAssociatedElasticIpInput is an input type that accepts GetEniPrimaryIpAddressAssociatedElasticIpArgs and GetEniPrimaryIpAddressAssociatedElasticIpOutput values.
// You can construct a concrete instance of `GetEniPrimaryIpAddressAssociatedElasticIpInput` via:
//
//	GetEniPrimaryIpAddressAssociatedElasticIpArgs{...}
type GetEniPrimaryIpAddressAssociatedElasticIpInput interface {
	pulumi.Input

	ToGetEniPrimaryIpAddressAssociatedElasticIpOutput() GetEniPrimaryIpAddressAssociatedElasticIpOutput
	ToGetEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(context.Context) GetEniPrimaryIpAddressAssociatedElasticIpOutput
}

type GetEniPrimaryIpAddressAssociatedElasticIpArgs struct {
	// 公网IP的ID。
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// 公网IP的地址。
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
	ReleaseWithInstance pulumi.BoolInput `pulumi:"releaseWithInstance"`
}

func (GetEniPrimaryIpAddressAssociatedElasticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrimaryIpAddressAssociatedElasticIp)(nil)).Elem()
}

func (i GetEniPrimaryIpAddressAssociatedElasticIpArgs) ToGetEniPrimaryIpAddressAssociatedElasticIpOutput() GetEniPrimaryIpAddressAssociatedElasticIpOutput {
	return i.ToGetEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(context.Background())
}

func (i GetEniPrimaryIpAddressAssociatedElasticIpArgs) ToGetEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(ctx context.Context) GetEniPrimaryIpAddressAssociatedElasticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniPrimaryIpAddressAssociatedElasticIpOutput)
}

type GetEniPrimaryIpAddressAssociatedElasticIpOutput struct{ *pulumi.OutputState }

func (GetEniPrimaryIpAddressAssociatedElasticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrimaryIpAddressAssociatedElasticIp)(nil)).Elem()
}

func (o GetEniPrimaryIpAddressAssociatedElasticIpOutput) ToGetEniPrimaryIpAddressAssociatedElasticIpOutput() GetEniPrimaryIpAddressAssociatedElasticIpOutput {
	return o
}

func (o GetEniPrimaryIpAddressAssociatedElasticIpOutput) ToGetEniPrimaryIpAddressAssociatedElasticIpOutputWithContext(ctx context.Context) GetEniPrimaryIpAddressAssociatedElasticIpOutput {
	return o
}

// 公网IP的ID。
func (o GetEniPrimaryIpAddressAssociatedElasticIpOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniPrimaryIpAddressAssociatedElasticIp) string { return v.AllocationId }).(pulumi.StringOutput)
}

// 公网IP的地址。
func (o GetEniPrimaryIpAddressAssociatedElasticIpOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniPrimaryIpAddressAssociatedElasticIp) string { return v.EipAddress }).(pulumi.StringOutput)
}

// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
func (o GetEniPrimaryIpAddressAssociatedElasticIpOutput) ReleaseWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEniPrimaryIpAddressAssociatedElasticIp) bool { return v.ReleaseWithInstance }).(pulumi.BoolOutput)
}

type GetEniPrivateIpSet struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp GetEniPrivateIpSetAssociatedElasticIp `pulumi:"associatedElasticIp"`
	// 是否为主私网IPv4地址。
	Primary bool `pulumi:"primary"`
	// 网卡的私网IP地址。
	PrivateIpAddress string `pulumi:"privateIpAddress"`
}

// GetEniPrivateIpSetInput is an input type that accepts GetEniPrivateIpSetArgs and GetEniPrivateIpSetOutput values.
// You can construct a concrete instance of `GetEniPrivateIpSetInput` via:
//
//	GetEniPrivateIpSetArgs{...}
type GetEniPrivateIpSetInput interface {
	pulumi.Input

	ToGetEniPrivateIpSetOutput() GetEniPrivateIpSetOutput
	ToGetEniPrivateIpSetOutputWithContext(context.Context) GetEniPrivateIpSetOutput
}

type GetEniPrivateIpSetArgs struct {
	// 网卡主私网IPv4关联的公网IP的信息。
	AssociatedElasticIp GetEniPrivateIpSetAssociatedElasticIpInput `pulumi:"associatedElasticIp"`
	// 是否为主私网IPv4地址。
	Primary pulumi.BoolInput `pulumi:"primary"`
	// 网卡的私网IP地址。
	PrivateIpAddress pulumi.StringInput `pulumi:"privateIpAddress"`
}

func (GetEniPrivateIpSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrivateIpSet)(nil)).Elem()
}

func (i GetEniPrivateIpSetArgs) ToGetEniPrivateIpSetOutput() GetEniPrivateIpSetOutput {
	return i.ToGetEniPrivateIpSetOutputWithContext(context.Background())
}

func (i GetEniPrivateIpSetArgs) ToGetEniPrivateIpSetOutputWithContext(ctx context.Context) GetEniPrivateIpSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniPrivateIpSetOutput)
}

// GetEniPrivateIpSetArrayInput is an input type that accepts GetEniPrivateIpSetArray and GetEniPrivateIpSetArrayOutput values.
// You can construct a concrete instance of `GetEniPrivateIpSetArrayInput` via:
//
//	GetEniPrivateIpSetArray{ GetEniPrivateIpSetArgs{...} }
type GetEniPrivateIpSetArrayInput interface {
	pulumi.Input

	ToGetEniPrivateIpSetArrayOutput() GetEniPrivateIpSetArrayOutput
	ToGetEniPrivateIpSetArrayOutputWithContext(context.Context) GetEniPrivateIpSetArrayOutput
}

type GetEniPrivateIpSetArray []GetEniPrivateIpSetInput

func (GetEniPrivateIpSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEniPrivateIpSet)(nil)).Elem()
}

func (i GetEniPrivateIpSetArray) ToGetEniPrivateIpSetArrayOutput() GetEniPrivateIpSetArrayOutput {
	return i.ToGetEniPrivateIpSetArrayOutputWithContext(context.Background())
}

func (i GetEniPrivateIpSetArray) ToGetEniPrivateIpSetArrayOutputWithContext(ctx context.Context) GetEniPrivateIpSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniPrivateIpSetArrayOutput)
}

type GetEniPrivateIpSetOutput struct{ *pulumi.OutputState }

func (GetEniPrivateIpSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrivateIpSet)(nil)).Elem()
}

func (o GetEniPrivateIpSetOutput) ToGetEniPrivateIpSetOutput() GetEniPrivateIpSetOutput {
	return o
}

func (o GetEniPrivateIpSetOutput) ToGetEniPrivateIpSetOutputWithContext(ctx context.Context) GetEniPrivateIpSetOutput {
	return o
}

// 网卡主私网IPv4关联的公网IP的信息。
func (o GetEniPrivateIpSetOutput) AssociatedElasticIp() GetEniPrivateIpSetAssociatedElasticIpOutput {
	return o.ApplyT(func(v GetEniPrivateIpSet) GetEniPrivateIpSetAssociatedElasticIp { return v.AssociatedElasticIp }).(GetEniPrivateIpSetAssociatedElasticIpOutput)
}

// 是否为主私网IPv4地址。
func (o GetEniPrivateIpSetOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEniPrivateIpSet) bool { return v.Primary }).(pulumi.BoolOutput)
}

// 网卡的私网IP地址。
func (o GetEniPrivateIpSetOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniPrivateIpSet) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

type GetEniPrivateIpSetArrayOutput struct{ *pulumi.OutputState }

func (GetEniPrivateIpSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEniPrivateIpSet)(nil)).Elem()
}

func (o GetEniPrivateIpSetArrayOutput) ToGetEniPrivateIpSetArrayOutput() GetEniPrivateIpSetArrayOutput {
	return o
}

func (o GetEniPrivateIpSetArrayOutput) ToGetEniPrivateIpSetArrayOutputWithContext(ctx context.Context) GetEniPrivateIpSetArrayOutput {
	return o
}

func (o GetEniPrivateIpSetArrayOutput) Index(i pulumi.IntInput) GetEniPrivateIpSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEniPrivateIpSet {
		return vs[0].([]GetEniPrivateIpSet)[vs[1].(int)]
	}).(GetEniPrivateIpSetOutput)
}

type GetEniPrivateIpSetAssociatedElasticIp struct {
	// 公网IP的ID。
	AllocationId string `pulumi:"allocationId"`
	// 公网IP的地址。
	EipAddress string `pulumi:"eipAddress"`
	// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
	ReleaseWithInstance bool `pulumi:"releaseWithInstance"`
}

// GetEniPrivateIpSetAssociatedElasticIpInput is an input type that accepts GetEniPrivateIpSetAssociatedElasticIpArgs and GetEniPrivateIpSetAssociatedElasticIpOutput values.
// You can construct a concrete instance of `GetEniPrivateIpSetAssociatedElasticIpInput` via:
//
//	GetEniPrivateIpSetAssociatedElasticIpArgs{...}
type GetEniPrivateIpSetAssociatedElasticIpInput interface {
	pulumi.Input

	ToGetEniPrivateIpSetAssociatedElasticIpOutput() GetEniPrivateIpSetAssociatedElasticIpOutput
	ToGetEniPrivateIpSetAssociatedElasticIpOutputWithContext(context.Context) GetEniPrivateIpSetAssociatedElasticIpOutput
}

type GetEniPrivateIpSetAssociatedElasticIpArgs struct {
	// 公网IP的ID。
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// 公网IP的地址。
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
	ReleaseWithInstance pulumi.BoolInput `pulumi:"releaseWithInstance"`
}

func (GetEniPrivateIpSetAssociatedElasticIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrivateIpSetAssociatedElasticIp)(nil)).Elem()
}

func (i GetEniPrivateIpSetAssociatedElasticIpArgs) ToGetEniPrivateIpSetAssociatedElasticIpOutput() GetEniPrivateIpSetAssociatedElasticIpOutput {
	return i.ToGetEniPrivateIpSetAssociatedElasticIpOutputWithContext(context.Background())
}

func (i GetEniPrivateIpSetAssociatedElasticIpArgs) ToGetEniPrivateIpSetAssociatedElasticIpOutputWithContext(ctx context.Context) GetEniPrivateIpSetAssociatedElasticIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniPrivateIpSetAssociatedElasticIpOutput)
}

type GetEniPrivateIpSetAssociatedElasticIpOutput struct{ *pulumi.OutputState }

func (GetEniPrivateIpSetAssociatedElasticIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniPrivateIpSetAssociatedElasticIp)(nil)).Elem()
}

func (o GetEniPrivateIpSetAssociatedElasticIpOutput) ToGetEniPrivateIpSetAssociatedElasticIpOutput() GetEniPrivateIpSetAssociatedElasticIpOutput {
	return o
}

func (o GetEniPrivateIpSetAssociatedElasticIpOutput) ToGetEniPrivateIpSetAssociatedElasticIpOutputWithContext(ctx context.Context) GetEniPrivateIpSetAssociatedElasticIpOutput {
	return o
}

// 公网IP的ID。
func (o GetEniPrivateIpSetAssociatedElasticIpOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniPrivateIpSetAssociatedElasticIp) string { return v.AllocationId }).(pulumi.StringOutput)
}

// 公网IP的地址。
func (o GetEniPrivateIpSetAssociatedElasticIpOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniPrivateIpSetAssociatedElasticIp) string { return v.EipAddress }).(pulumi.StringOutput)
}

// 公网IP是否随云服务器实例删除。仅主网卡的主私网IP绑定按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放，true：是，false：否。
func (o GetEniPrivateIpSetAssociatedElasticIpOutput) ReleaseWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEniPrivateIpSetAssociatedElasticIp) bool { return v.ReleaseWithInstance }).(pulumi.BoolOutput)
}

type GetEniTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetEniTagInput is an input type that accepts GetEniTagArgs and GetEniTagOutput values.
// You can construct a concrete instance of `GetEniTagInput` via:
//
//	GetEniTagArgs{...}
type GetEniTagInput interface {
	pulumi.Input

	ToGetEniTagOutput() GetEniTagOutput
	ToGetEniTagOutputWithContext(context.Context) GetEniTagOutput
}

type GetEniTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetEniTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniTag)(nil)).Elem()
}

func (i GetEniTagArgs) ToGetEniTagOutput() GetEniTagOutput {
	return i.ToGetEniTagOutputWithContext(context.Background())
}

func (i GetEniTagArgs) ToGetEniTagOutputWithContext(ctx context.Context) GetEniTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniTagOutput)
}

// GetEniTagArrayInput is an input type that accepts GetEniTagArray and GetEniTagArrayOutput values.
// You can construct a concrete instance of `GetEniTagArrayInput` via:
//
//	GetEniTagArray{ GetEniTagArgs{...} }
type GetEniTagArrayInput interface {
	pulumi.Input

	ToGetEniTagArrayOutput() GetEniTagArrayOutput
	ToGetEniTagArrayOutputWithContext(context.Context) GetEniTagArrayOutput
}

type GetEniTagArray []GetEniTagInput

func (GetEniTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEniTag)(nil)).Elem()
}

func (i GetEniTagArray) ToGetEniTagArrayOutput() GetEniTagArrayOutput {
	return i.ToGetEniTagArrayOutputWithContext(context.Background())
}

func (i GetEniTagArray) ToGetEniTagArrayOutputWithContext(ctx context.Context) GetEniTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEniTagArrayOutput)
}

type GetEniTagOutput struct{ *pulumi.OutputState }

func (GetEniTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEniTag)(nil)).Elem()
}

func (o GetEniTagOutput) ToGetEniTagOutput() GetEniTagOutput {
	return o
}

func (o GetEniTagOutput) ToGetEniTagOutputWithContext(ctx context.Context) GetEniTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetEniTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetEniTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetEniTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetEniTagArrayOutput struct{ *pulumi.OutputState }

func (GetEniTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEniTag)(nil)).Elem()
}

func (o GetEniTagArrayOutput) ToGetEniTagArrayOutput() GetEniTagArrayOutput {
	return o
}

func (o GetEniTagArrayOutput) ToGetEniTagArrayOutputWithContext(ctx context.Context) GetEniTagArrayOutput {
	return o
}

func (o GetEniTagArrayOutput) Index(i pulumi.IntInput) GetEniTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEniTag {
		return vs[0].([]GetEniTag)[vs[1].(int)]
	}).(GetEniTagOutput)
}

type GetNetworkAclDefaultEgressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description string `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId string `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port string `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority int `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol string `pulumi:"protocol"`
}

// GetNetworkAclDefaultEgressAclEntryInput is an input type that accepts GetNetworkAclDefaultEgressAclEntryArgs and GetNetworkAclDefaultEgressAclEntryOutput values.
// You can construct a concrete instance of `GetNetworkAclDefaultEgressAclEntryInput` via:
//
//	GetNetworkAclDefaultEgressAclEntryArgs{...}
type GetNetworkAclDefaultEgressAclEntryInput interface {
	pulumi.Input

	ToGetNetworkAclDefaultEgressAclEntryOutput() GetNetworkAclDefaultEgressAclEntryOutput
	ToGetNetworkAclDefaultEgressAclEntryOutputWithContext(context.Context) GetNetworkAclDefaultEgressAclEntryOutput
}

type GetNetworkAclDefaultEgressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringInput `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId pulumi.StringInput `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringInput `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority pulumi.IntInput `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetNetworkAclDefaultEgressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclDefaultEgressAclEntryArgs) ToGetNetworkAclDefaultEgressAclEntryOutput() GetNetworkAclDefaultEgressAclEntryOutput {
	return i.ToGetNetworkAclDefaultEgressAclEntryOutputWithContext(context.Background())
}

func (i GetNetworkAclDefaultEgressAclEntryArgs) ToGetNetworkAclDefaultEgressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclDefaultEgressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclDefaultEgressAclEntryOutput)
}

// GetNetworkAclDefaultEgressAclEntryArrayInput is an input type that accepts GetNetworkAclDefaultEgressAclEntryArray and GetNetworkAclDefaultEgressAclEntryArrayOutput values.
// You can construct a concrete instance of `GetNetworkAclDefaultEgressAclEntryArrayInput` via:
//
//	GetNetworkAclDefaultEgressAclEntryArray{ GetNetworkAclDefaultEgressAclEntryArgs{...} }
type GetNetworkAclDefaultEgressAclEntryArrayInput interface {
	pulumi.Input

	ToGetNetworkAclDefaultEgressAclEntryArrayOutput() GetNetworkAclDefaultEgressAclEntryArrayOutput
	ToGetNetworkAclDefaultEgressAclEntryArrayOutputWithContext(context.Context) GetNetworkAclDefaultEgressAclEntryArrayOutput
}

type GetNetworkAclDefaultEgressAclEntryArray []GetNetworkAclDefaultEgressAclEntryInput

func (GetNetworkAclDefaultEgressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclDefaultEgressAclEntryArray) ToGetNetworkAclDefaultEgressAclEntryArrayOutput() GetNetworkAclDefaultEgressAclEntryArrayOutput {
	return i.ToGetNetworkAclDefaultEgressAclEntryArrayOutputWithContext(context.Background())
}

func (i GetNetworkAclDefaultEgressAclEntryArray) ToGetNetworkAclDefaultEgressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclDefaultEgressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclDefaultEgressAclEntryArrayOutput)
}

type GetNetworkAclDefaultEgressAclEntryOutput struct{ *pulumi.OutputState }

func (GetNetworkAclDefaultEgressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclDefaultEgressAclEntryOutput) ToGetNetworkAclDefaultEgressAclEntryOutput() GetNetworkAclDefaultEgressAclEntryOutput {
	return o
}

func (o GetNetworkAclDefaultEgressAclEntryOutput) ToGetNetworkAclDefaultEgressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclDefaultEgressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o GetNetworkAclDefaultEgressAclEntryOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.CidrIp }).(pulumi.StringOutput)
}

// 规则的描述信息。
func (o GetNetworkAclDefaultEgressAclEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.Description }).(pulumi.StringOutput)
}

// 规则的ID。
func (o GetNetworkAclDefaultEgressAclEntryOutput) NetworkAclEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.NetworkAclEntryId }).(pulumi.StringOutput)
}

// 规则的名称。
func (o GetNetworkAclDefaultEgressAclEntryOutput) NetworkAclEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.NetworkAclEntryName }).(pulumi.StringOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o GetNetworkAclDefaultEgressAclEntryOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.Policy }).(pulumi.StringOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o GetNetworkAclDefaultEgressAclEntryOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.Port }).(pulumi.StringOutput)
}

// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
func (o GetNetworkAclDefaultEgressAclEntryOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) int { return v.Priority }).(pulumi.IntOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o GetNetworkAclDefaultEgressAclEntryOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultEgressAclEntry) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetNetworkAclDefaultEgressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAclDefaultEgressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclDefaultEgressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclDefaultEgressAclEntryArrayOutput) ToGetNetworkAclDefaultEgressAclEntryArrayOutput() GetNetworkAclDefaultEgressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclDefaultEgressAclEntryArrayOutput) ToGetNetworkAclDefaultEgressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclDefaultEgressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclDefaultEgressAclEntryArrayOutput) Index(i pulumi.IntInput) GetNetworkAclDefaultEgressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAclDefaultEgressAclEntry {
		return vs[0].([]GetNetworkAclDefaultEgressAclEntry)[vs[1].(int)]
	}).(GetNetworkAclDefaultEgressAclEntryOutput)
}

type GetNetworkAclDefaultIngressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description string `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId string `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port string `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority int `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol string `pulumi:"protocol"`
}

// GetNetworkAclDefaultIngressAclEntryInput is an input type that accepts GetNetworkAclDefaultIngressAclEntryArgs and GetNetworkAclDefaultIngressAclEntryOutput values.
// You can construct a concrete instance of `GetNetworkAclDefaultIngressAclEntryInput` via:
//
//	GetNetworkAclDefaultIngressAclEntryArgs{...}
type GetNetworkAclDefaultIngressAclEntryInput interface {
	pulumi.Input

	ToGetNetworkAclDefaultIngressAclEntryOutput() GetNetworkAclDefaultIngressAclEntryOutput
	ToGetNetworkAclDefaultIngressAclEntryOutputWithContext(context.Context) GetNetworkAclDefaultIngressAclEntryOutput
}

type GetNetworkAclDefaultIngressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringInput `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId pulumi.StringInput `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringInput `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority pulumi.IntInput `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetNetworkAclDefaultIngressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclDefaultIngressAclEntryArgs) ToGetNetworkAclDefaultIngressAclEntryOutput() GetNetworkAclDefaultIngressAclEntryOutput {
	return i.ToGetNetworkAclDefaultIngressAclEntryOutputWithContext(context.Background())
}

func (i GetNetworkAclDefaultIngressAclEntryArgs) ToGetNetworkAclDefaultIngressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclDefaultIngressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclDefaultIngressAclEntryOutput)
}

// GetNetworkAclDefaultIngressAclEntryArrayInput is an input type that accepts GetNetworkAclDefaultIngressAclEntryArray and GetNetworkAclDefaultIngressAclEntryArrayOutput values.
// You can construct a concrete instance of `GetNetworkAclDefaultIngressAclEntryArrayInput` via:
//
//	GetNetworkAclDefaultIngressAclEntryArray{ GetNetworkAclDefaultIngressAclEntryArgs{...} }
type GetNetworkAclDefaultIngressAclEntryArrayInput interface {
	pulumi.Input

	ToGetNetworkAclDefaultIngressAclEntryArrayOutput() GetNetworkAclDefaultIngressAclEntryArrayOutput
	ToGetNetworkAclDefaultIngressAclEntryArrayOutputWithContext(context.Context) GetNetworkAclDefaultIngressAclEntryArrayOutput
}

type GetNetworkAclDefaultIngressAclEntryArray []GetNetworkAclDefaultIngressAclEntryInput

func (GetNetworkAclDefaultIngressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclDefaultIngressAclEntryArray) ToGetNetworkAclDefaultIngressAclEntryArrayOutput() GetNetworkAclDefaultIngressAclEntryArrayOutput {
	return i.ToGetNetworkAclDefaultIngressAclEntryArrayOutputWithContext(context.Background())
}

func (i GetNetworkAclDefaultIngressAclEntryArray) ToGetNetworkAclDefaultIngressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclDefaultIngressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclDefaultIngressAclEntryArrayOutput)
}

type GetNetworkAclDefaultIngressAclEntryOutput struct{ *pulumi.OutputState }

func (GetNetworkAclDefaultIngressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclDefaultIngressAclEntryOutput) ToGetNetworkAclDefaultIngressAclEntryOutput() GetNetworkAclDefaultIngressAclEntryOutput {
	return o
}

func (o GetNetworkAclDefaultIngressAclEntryOutput) ToGetNetworkAclDefaultIngressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclDefaultIngressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o GetNetworkAclDefaultIngressAclEntryOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.CidrIp }).(pulumi.StringOutput)
}

// 规则的描述信息。
func (o GetNetworkAclDefaultIngressAclEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.Description }).(pulumi.StringOutput)
}

// 规则的ID。
func (o GetNetworkAclDefaultIngressAclEntryOutput) NetworkAclEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.NetworkAclEntryId }).(pulumi.StringOutput)
}

// 规则的名称。
func (o GetNetworkAclDefaultIngressAclEntryOutput) NetworkAclEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.NetworkAclEntryName }).(pulumi.StringOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o GetNetworkAclDefaultIngressAclEntryOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.Policy }).(pulumi.StringOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o GetNetworkAclDefaultIngressAclEntryOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.Port }).(pulumi.StringOutput)
}

// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
func (o GetNetworkAclDefaultIngressAclEntryOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) int { return v.Priority }).(pulumi.IntOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o GetNetworkAclDefaultIngressAclEntryOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclDefaultIngressAclEntry) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetNetworkAclDefaultIngressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAclDefaultIngressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclDefaultIngressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclDefaultIngressAclEntryArrayOutput) ToGetNetworkAclDefaultIngressAclEntryArrayOutput() GetNetworkAclDefaultIngressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclDefaultIngressAclEntryArrayOutput) ToGetNetworkAclDefaultIngressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclDefaultIngressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclDefaultIngressAclEntryArrayOutput) Index(i pulumi.IntInput) GetNetworkAclDefaultIngressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAclDefaultIngressAclEntry {
		return vs[0].([]GetNetworkAclDefaultIngressAclEntry)[vs[1].(int)]
	}).(GetNetworkAclDefaultIngressAclEntryOutput)
}

type GetNetworkAclEgressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description string `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId string `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port string `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority int `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol string `pulumi:"protocol"`
}

// GetNetworkAclEgressAclEntryInput is an input type that accepts GetNetworkAclEgressAclEntryArgs and GetNetworkAclEgressAclEntryOutput values.
// You can construct a concrete instance of `GetNetworkAclEgressAclEntryInput` via:
//
//	GetNetworkAclEgressAclEntryArgs{...}
type GetNetworkAclEgressAclEntryInput interface {
	pulumi.Input

	ToGetNetworkAclEgressAclEntryOutput() GetNetworkAclEgressAclEntryOutput
	ToGetNetworkAclEgressAclEntryOutputWithContext(context.Context) GetNetworkAclEgressAclEntryOutput
}

type GetNetworkAclEgressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringInput `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId pulumi.StringInput `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringInput `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority pulumi.IntInput `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetNetworkAclEgressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclEgressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclEgressAclEntryArgs) ToGetNetworkAclEgressAclEntryOutput() GetNetworkAclEgressAclEntryOutput {
	return i.ToGetNetworkAclEgressAclEntryOutputWithContext(context.Background())
}

func (i GetNetworkAclEgressAclEntryArgs) ToGetNetworkAclEgressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclEgressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclEgressAclEntryOutput)
}

// GetNetworkAclEgressAclEntryArrayInput is an input type that accepts GetNetworkAclEgressAclEntryArray and GetNetworkAclEgressAclEntryArrayOutput values.
// You can construct a concrete instance of `GetNetworkAclEgressAclEntryArrayInput` via:
//
//	GetNetworkAclEgressAclEntryArray{ GetNetworkAclEgressAclEntryArgs{...} }
type GetNetworkAclEgressAclEntryArrayInput interface {
	pulumi.Input

	ToGetNetworkAclEgressAclEntryArrayOutput() GetNetworkAclEgressAclEntryArrayOutput
	ToGetNetworkAclEgressAclEntryArrayOutputWithContext(context.Context) GetNetworkAclEgressAclEntryArrayOutput
}

type GetNetworkAclEgressAclEntryArray []GetNetworkAclEgressAclEntryInput

func (GetNetworkAclEgressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclEgressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclEgressAclEntryArray) ToGetNetworkAclEgressAclEntryArrayOutput() GetNetworkAclEgressAclEntryArrayOutput {
	return i.ToGetNetworkAclEgressAclEntryArrayOutputWithContext(context.Background())
}

func (i GetNetworkAclEgressAclEntryArray) ToGetNetworkAclEgressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclEgressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclEgressAclEntryArrayOutput)
}

type GetNetworkAclEgressAclEntryOutput struct{ *pulumi.OutputState }

func (GetNetworkAclEgressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclEgressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclEgressAclEntryOutput) ToGetNetworkAclEgressAclEntryOutput() GetNetworkAclEgressAclEntryOutput {
	return o
}

func (o GetNetworkAclEgressAclEntryOutput) ToGetNetworkAclEgressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclEgressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o GetNetworkAclEgressAclEntryOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.CidrIp }).(pulumi.StringOutput)
}

// 规则的描述信息。
func (o GetNetworkAclEgressAclEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.Description }).(pulumi.StringOutput)
}

// 规则的ID。
func (o GetNetworkAclEgressAclEntryOutput) NetworkAclEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.NetworkAclEntryId }).(pulumi.StringOutput)
}

// 规则的名称。
func (o GetNetworkAclEgressAclEntryOutput) NetworkAclEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.NetworkAclEntryName }).(pulumi.StringOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o GetNetworkAclEgressAclEntryOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.Policy }).(pulumi.StringOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o GetNetworkAclEgressAclEntryOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.Port }).(pulumi.StringOutput)
}

// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
func (o GetNetworkAclEgressAclEntryOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) int { return v.Priority }).(pulumi.IntOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o GetNetworkAclEgressAclEntryOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclEgressAclEntry) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetNetworkAclEgressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAclEgressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclEgressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclEgressAclEntryArrayOutput) ToGetNetworkAclEgressAclEntryArrayOutput() GetNetworkAclEgressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclEgressAclEntryArrayOutput) ToGetNetworkAclEgressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclEgressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclEgressAclEntryArrayOutput) Index(i pulumi.IntInput) GetNetworkAclEgressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAclEgressAclEntry {
		return vs[0].([]GetNetworkAclEgressAclEntry)[vs[1].(int)]
	}).(GetNetworkAclEgressAclEntryOutput)
}

type GetNetworkAclIngressAclEntry struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp string `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description string `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId string `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName string `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy string `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port string `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority int `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol string `pulumi:"protocol"`
}

// GetNetworkAclIngressAclEntryInput is an input type that accepts GetNetworkAclIngressAclEntryArgs and GetNetworkAclIngressAclEntryOutput values.
// You can construct a concrete instance of `GetNetworkAclIngressAclEntryInput` via:
//
//	GetNetworkAclIngressAclEntryArgs{...}
type GetNetworkAclIngressAclEntryInput interface {
	pulumi.Input

	ToGetNetworkAclIngressAclEntryOutput() GetNetworkAclIngressAclEntryOutput
	ToGetNetworkAclIngressAclEntryOutputWithContext(context.Context) GetNetworkAclIngressAclEntryOutput
}

type GetNetworkAclIngressAclEntryArgs struct {
	// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
	CidrIp pulumi.StringInput `pulumi:"cidrIp"`
	// 规则的描述信息。
	Description pulumi.StringInput `pulumi:"description"`
	// 规则的ID。
	NetworkAclEntryId pulumi.StringInput `pulumi:"networkAclEntryId"`
	// 规则的名称。
	NetworkAclEntryName pulumi.StringInput `pulumi:"networkAclEntryName"`
	// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
	Policy pulumi.StringInput `pulumi:"policy"`
	// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
	Port pulumi.StringInput `pulumi:"port"`
	// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
	Priority pulumi.IntInput `pulumi:"priority"`
	// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetNetworkAclIngressAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclIngressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclIngressAclEntryArgs) ToGetNetworkAclIngressAclEntryOutput() GetNetworkAclIngressAclEntryOutput {
	return i.ToGetNetworkAclIngressAclEntryOutputWithContext(context.Background())
}

func (i GetNetworkAclIngressAclEntryArgs) ToGetNetworkAclIngressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclIngressAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclIngressAclEntryOutput)
}

// GetNetworkAclIngressAclEntryArrayInput is an input type that accepts GetNetworkAclIngressAclEntryArray and GetNetworkAclIngressAclEntryArrayOutput values.
// You can construct a concrete instance of `GetNetworkAclIngressAclEntryArrayInput` via:
//
//	GetNetworkAclIngressAclEntryArray{ GetNetworkAclIngressAclEntryArgs{...} }
type GetNetworkAclIngressAclEntryArrayInput interface {
	pulumi.Input

	ToGetNetworkAclIngressAclEntryArrayOutput() GetNetworkAclIngressAclEntryArrayOutput
	ToGetNetworkAclIngressAclEntryArrayOutputWithContext(context.Context) GetNetworkAclIngressAclEntryArrayOutput
}

type GetNetworkAclIngressAclEntryArray []GetNetworkAclIngressAclEntryInput

func (GetNetworkAclIngressAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclIngressAclEntry)(nil)).Elem()
}

func (i GetNetworkAclIngressAclEntryArray) ToGetNetworkAclIngressAclEntryArrayOutput() GetNetworkAclIngressAclEntryArrayOutput {
	return i.ToGetNetworkAclIngressAclEntryArrayOutputWithContext(context.Background())
}

func (i GetNetworkAclIngressAclEntryArray) ToGetNetworkAclIngressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclIngressAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclIngressAclEntryArrayOutput)
}

type GetNetworkAclIngressAclEntryOutput struct{ *pulumi.OutputState }

func (GetNetworkAclIngressAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclIngressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclIngressAclEntryOutput) ToGetNetworkAclIngressAclEntryOutput() GetNetworkAclIngressAclEntryOutput {
	return o
}

func (o GetNetworkAclIngressAclEntryOutput) ToGetNetworkAclIngressAclEntryOutputWithContext(ctx context.Context) GetNetworkAclIngressAclEntryOutput {
	return o
}

// 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
func (o GetNetworkAclIngressAclEntryOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.CidrIp }).(pulumi.StringOutput)
}

// 规则的描述信息。
func (o GetNetworkAclIngressAclEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.Description }).(pulumi.StringOutput)
}

// 规则的ID。
func (o GetNetworkAclIngressAclEntryOutput) NetworkAclEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.NetworkAclEntryId }).(pulumi.StringOutput)
}

// 规则的名称。
func (o GetNetworkAclIngressAclEntryOutput) NetworkAclEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.NetworkAclEntryName }).(pulumi.StringOutput)
}

// 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
func (o GetNetworkAclIngressAclEntryOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.Policy }).(pulumi.StringOutput)
}

// 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
func (o GetNetworkAclIngressAclEntryOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.Port }).(pulumi.StringOutput)
}

// 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
func (o GetNetworkAclIngressAclEntryOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) int { return v.Priority }).(pulumi.IntOutput)
}

// 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
func (o GetNetworkAclIngressAclEntryOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclIngressAclEntry) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetNetworkAclIngressAclEntryArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAclIngressAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclIngressAclEntry)(nil)).Elem()
}

func (o GetNetworkAclIngressAclEntryArrayOutput) ToGetNetworkAclIngressAclEntryArrayOutput() GetNetworkAclIngressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclIngressAclEntryArrayOutput) ToGetNetworkAclIngressAclEntryArrayOutputWithContext(ctx context.Context) GetNetworkAclIngressAclEntryArrayOutput {
	return o
}

func (o GetNetworkAclIngressAclEntryArrayOutput) Index(i pulumi.IntInput) GetNetworkAclIngressAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAclIngressAclEntry {
		return vs[0].([]GetNetworkAclIngressAclEntry)[vs[1].(int)]
	}).(GetNetworkAclIngressAclEntryOutput)
}

type GetNetworkAclResource struct {
	// 关联资源的ID。
	ResourceId string `pulumi:"resourceId"`
	// 网络ACL关联资源的状态。BINDED：已绑定。BINDING：绑定中。UNBINDING：解绑中。
	Status string `pulumi:"status"`
}

// GetNetworkAclResourceInput is an input type that accepts GetNetworkAclResourceArgs and GetNetworkAclResourceOutput values.
// You can construct a concrete instance of `GetNetworkAclResourceInput` via:
//
//	GetNetworkAclResourceArgs{...}
type GetNetworkAclResourceInput interface {
	pulumi.Input

	ToGetNetworkAclResourceOutput() GetNetworkAclResourceOutput
	ToGetNetworkAclResourceOutputWithContext(context.Context) GetNetworkAclResourceOutput
}

type GetNetworkAclResourceArgs struct {
	// 关联资源的ID。
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// 网络ACL关联资源的状态。BINDED：已绑定。BINDING：绑定中。UNBINDING：解绑中。
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetNetworkAclResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclResource)(nil)).Elem()
}

func (i GetNetworkAclResourceArgs) ToGetNetworkAclResourceOutput() GetNetworkAclResourceOutput {
	return i.ToGetNetworkAclResourceOutputWithContext(context.Background())
}

func (i GetNetworkAclResourceArgs) ToGetNetworkAclResourceOutputWithContext(ctx context.Context) GetNetworkAclResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclResourceOutput)
}

// GetNetworkAclResourceArrayInput is an input type that accepts GetNetworkAclResourceArray and GetNetworkAclResourceArrayOutput values.
// You can construct a concrete instance of `GetNetworkAclResourceArrayInput` via:
//
//	GetNetworkAclResourceArray{ GetNetworkAclResourceArgs{...} }
type GetNetworkAclResourceArrayInput interface {
	pulumi.Input

	ToGetNetworkAclResourceArrayOutput() GetNetworkAclResourceArrayOutput
	ToGetNetworkAclResourceArrayOutputWithContext(context.Context) GetNetworkAclResourceArrayOutput
}

type GetNetworkAclResourceArray []GetNetworkAclResourceInput

func (GetNetworkAclResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclResource)(nil)).Elem()
}

func (i GetNetworkAclResourceArray) ToGetNetworkAclResourceArrayOutput() GetNetworkAclResourceArrayOutput {
	return i.ToGetNetworkAclResourceArrayOutputWithContext(context.Background())
}

func (i GetNetworkAclResourceArray) ToGetNetworkAclResourceArrayOutputWithContext(ctx context.Context) GetNetworkAclResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclResourceArrayOutput)
}

type GetNetworkAclResourceOutput struct{ *pulumi.OutputState }

func (GetNetworkAclResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclResource)(nil)).Elem()
}

func (o GetNetworkAclResourceOutput) ToGetNetworkAclResourceOutput() GetNetworkAclResourceOutput {
	return o
}

func (o GetNetworkAclResourceOutput) ToGetNetworkAclResourceOutputWithContext(ctx context.Context) GetNetworkAclResourceOutput {
	return o
}

// 关联资源的ID。
func (o GetNetworkAclResourceOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclResource) string { return v.ResourceId }).(pulumi.StringOutput)
}

// 网络ACL关联资源的状态。BINDED：已绑定。BINDING：绑定中。UNBINDING：解绑中。
func (o GetNetworkAclResourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclResource) string { return v.Status }).(pulumi.StringOutput)
}

type GetNetworkAclResourceArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAclResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclResource)(nil)).Elem()
}

func (o GetNetworkAclResourceArrayOutput) ToGetNetworkAclResourceArrayOutput() GetNetworkAclResourceArrayOutput {
	return o
}

func (o GetNetworkAclResourceArrayOutput) ToGetNetworkAclResourceArrayOutputWithContext(ctx context.Context) GetNetworkAclResourceArrayOutput {
	return o
}

func (o GetNetworkAclResourceArrayOutput) Index(i pulumi.IntInput) GetNetworkAclResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAclResource {
		return vs[0].([]GetNetworkAclResource)[vs[1].(int)]
	}).(GetNetworkAclResourceOutput)
}

type GetNetworkAclTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetNetworkAclTagInput is an input type that accepts GetNetworkAclTagArgs and GetNetworkAclTagOutput values.
// You can construct a concrete instance of `GetNetworkAclTagInput` via:
//
//	GetNetworkAclTagArgs{...}
type GetNetworkAclTagInput interface {
	pulumi.Input

	ToGetNetworkAclTagOutput() GetNetworkAclTagOutput
	ToGetNetworkAclTagOutputWithContext(context.Context) GetNetworkAclTagOutput
}

type GetNetworkAclTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetNetworkAclTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclTag)(nil)).Elem()
}

func (i GetNetworkAclTagArgs) ToGetNetworkAclTagOutput() GetNetworkAclTagOutput {
	return i.ToGetNetworkAclTagOutputWithContext(context.Background())
}

func (i GetNetworkAclTagArgs) ToGetNetworkAclTagOutputWithContext(ctx context.Context) GetNetworkAclTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclTagOutput)
}

// GetNetworkAclTagArrayInput is an input type that accepts GetNetworkAclTagArray and GetNetworkAclTagArrayOutput values.
// You can construct a concrete instance of `GetNetworkAclTagArrayInput` via:
//
//	GetNetworkAclTagArray{ GetNetworkAclTagArgs{...} }
type GetNetworkAclTagArrayInput interface {
	pulumi.Input

	ToGetNetworkAclTagArrayOutput() GetNetworkAclTagArrayOutput
	ToGetNetworkAclTagArrayOutputWithContext(context.Context) GetNetworkAclTagArrayOutput
}

type GetNetworkAclTagArray []GetNetworkAclTagInput

func (GetNetworkAclTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclTag)(nil)).Elem()
}

func (i GetNetworkAclTagArray) ToGetNetworkAclTagArrayOutput() GetNetworkAclTagArrayOutput {
	return i.ToGetNetworkAclTagArrayOutputWithContext(context.Background())
}

func (i GetNetworkAclTagArray) ToGetNetworkAclTagArrayOutputWithContext(ctx context.Context) GetNetworkAclTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNetworkAclTagArrayOutput)
}

type GetNetworkAclTagOutput struct{ *pulumi.OutputState }

func (GetNetworkAclTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNetworkAclTag)(nil)).Elem()
}

func (o GetNetworkAclTagOutput) ToGetNetworkAclTagOutput() GetNetworkAclTagOutput {
	return o
}

func (o GetNetworkAclTagOutput) ToGetNetworkAclTagOutputWithContext(ctx context.Context) GetNetworkAclTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetNetworkAclTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetNetworkAclTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetNetworkAclTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetNetworkAclTagArrayOutput struct{ *pulumi.OutputState }

func (GetNetworkAclTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNetworkAclTag)(nil)).Elem()
}

func (o GetNetworkAclTagArrayOutput) ToGetNetworkAclTagArrayOutput() GetNetworkAclTagArrayOutput {
	return o
}

func (o GetNetworkAclTagArrayOutput) ToGetNetworkAclTagArrayOutputWithContext(ctx context.Context) GetNetworkAclTagArrayOutput {
	return o
}

func (o GetNetworkAclTagArrayOutput) Index(i pulumi.IntInput) GetNetworkAclTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNetworkAclTag {
		return vs[0].([]GetNetworkAclTag)[vs[1].(int)]
	}).(GetNetworkAclTagOutput)
}

type GetPrefixListAssociationsRouteTable struct {
	// 关联资源的ID。
	ResourceId string `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType string `pulumi:"resourceType"`
}

// GetPrefixListAssociationsRouteTableInput is an input type that accepts GetPrefixListAssociationsRouteTableArgs and GetPrefixListAssociationsRouteTableOutput values.
// You can construct a concrete instance of `GetPrefixListAssociationsRouteTableInput` via:
//
//	GetPrefixListAssociationsRouteTableArgs{...}
type GetPrefixListAssociationsRouteTableInput interface {
	pulumi.Input

	ToGetPrefixListAssociationsRouteTableOutput() GetPrefixListAssociationsRouteTableOutput
	ToGetPrefixListAssociationsRouteTableOutputWithContext(context.Context) GetPrefixListAssociationsRouteTableOutput
}

type GetPrefixListAssociationsRouteTableArgs struct {
	// 关联资源的ID。
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (GetPrefixListAssociationsRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListAssociationsRouteTable)(nil)).Elem()
}

func (i GetPrefixListAssociationsRouteTableArgs) ToGetPrefixListAssociationsRouteTableOutput() GetPrefixListAssociationsRouteTableOutput {
	return i.ToGetPrefixListAssociationsRouteTableOutputWithContext(context.Background())
}

func (i GetPrefixListAssociationsRouteTableArgs) ToGetPrefixListAssociationsRouteTableOutputWithContext(ctx context.Context) GetPrefixListAssociationsRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListAssociationsRouteTableOutput)
}

// GetPrefixListAssociationsRouteTableArrayInput is an input type that accepts GetPrefixListAssociationsRouteTableArray and GetPrefixListAssociationsRouteTableArrayOutput values.
// You can construct a concrete instance of `GetPrefixListAssociationsRouteTableArrayInput` via:
//
//	GetPrefixListAssociationsRouteTableArray{ GetPrefixListAssociationsRouteTableArgs{...} }
type GetPrefixListAssociationsRouteTableArrayInput interface {
	pulumi.Input

	ToGetPrefixListAssociationsRouteTableArrayOutput() GetPrefixListAssociationsRouteTableArrayOutput
	ToGetPrefixListAssociationsRouteTableArrayOutputWithContext(context.Context) GetPrefixListAssociationsRouteTableArrayOutput
}

type GetPrefixListAssociationsRouteTableArray []GetPrefixListAssociationsRouteTableInput

func (GetPrefixListAssociationsRouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListAssociationsRouteTable)(nil)).Elem()
}

func (i GetPrefixListAssociationsRouteTableArray) ToGetPrefixListAssociationsRouteTableArrayOutput() GetPrefixListAssociationsRouteTableArrayOutput {
	return i.ToGetPrefixListAssociationsRouteTableArrayOutputWithContext(context.Background())
}

func (i GetPrefixListAssociationsRouteTableArray) ToGetPrefixListAssociationsRouteTableArrayOutputWithContext(ctx context.Context) GetPrefixListAssociationsRouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListAssociationsRouteTableArrayOutput)
}

type GetPrefixListAssociationsRouteTableOutput struct{ *pulumi.OutputState }

func (GetPrefixListAssociationsRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListAssociationsRouteTable)(nil)).Elem()
}

func (o GetPrefixListAssociationsRouteTableOutput) ToGetPrefixListAssociationsRouteTableOutput() GetPrefixListAssociationsRouteTableOutput {
	return o
}

func (o GetPrefixListAssociationsRouteTableOutput) ToGetPrefixListAssociationsRouteTableOutputWithContext(ctx context.Context) GetPrefixListAssociationsRouteTableOutput {
	return o
}

// 关联资源的ID。
func (o GetPrefixListAssociationsRouteTableOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListAssociationsRouteTable) string { return v.ResourceId }).(pulumi.StringOutput)
}

// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
func (o GetPrefixListAssociationsRouteTableOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListAssociationsRouteTable) string { return v.ResourceType }).(pulumi.StringOutput)
}

type GetPrefixListAssociationsRouteTableArrayOutput struct{ *pulumi.OutputState }

func (GetPrefixListAssociationsRouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListAssociationsRouteTable)(nil)).Elem()
}

func (o GetPrefixListAssociationsRouteTableArrayOutput) ToGetPrefixListAssociationsRouteTableArrayOutput() GetPrefixListAssociationsRouteTableArrayOutput {
	return o
}

func (o GetPrefixListAssociationsRouteTableArrayOutput) ToGetPrefixListAssociationsRouteTableArrayOutputWithContext(ctx context.Context) GetPrefixListAssociationsRouteTableArrayOutput {
	return o
}

func (o GetPrefixListAssociationsRouteTableArrayOutput) Index(i pulumi.IntInput) GetPrefixListAssociationsRouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrefixListAssociationsRouteTable {
		return vs[0].([]GetPrefixListAssociationsRouteTable)[vs[1].(int)]
	}).(GetPrefixListAssociationsRouteTableOutput)
}

type GetPrefixListAssociationsSecurityGroup struct {
	// 关联资源的ID。
	ResourceId string `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType string `pulumi:"resourceType"`
}

// GetPrefixListAssociationsSecurityGroupInput is an input type that accepts GetPrefixListAssociationsSecurityGroupArgs and GetPrefixListAssociationsSecurityGroupOutput values.
// You can construct a concrete instance of `GetPrefixListAssociationsSecurityGroupInput` via:
//
//	GetPrefixListAssociationsSecurityGroupArgs{...}
type GetPrefixListAssociationsSecurityGroupInput interface {
	pulumi.Input

	ToGetPrefixListAssociationsSecurityGroupOutput() GetPrefixListAssociationsSecurityGroupOutput
	ToGetPrefixListAssociationsSecurityGroupOutputWithContext(context.Context) GetPrefixListAssociationsSecurityGroupOutput
}

type GetPrefixListAssociationsSecurityGroupArgs struct {
	// 关联资源的ID。
	ResourceId pulumi.StringInput `pulumi:"resourceId"`
	// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
	ResourceType pulumi.StringInput `pulumi:"resourceType"`
}

func (GetPrefixListAssociationsSecurityGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (i GetPrefixListAssociationsSecurityGroupArgs) ToGetPrefixListAssociationsSecurityGroupOutput() GetPrefixListAssociationsSecurityGroupOutput {
	return i.ToGetPrefixListAssociationsSecurityGroupOutputWithContext(context.Background())
}

func (i GetPrefixListAssociationsSecurityGroupArgs) ToGetPrefixListAssociationsSecurityGroupOutputWithContext(ctx context.Context) GetPrefixListAssociationsSecurityGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListAssociationsSecurityGroupOutput)
}

// GetPrefixListAssociationsSecurityGroupArrayInput is an input type that accepts GetPrefixListAssociationsSecurityGroupArray and GetPrefixListAssociationsSecurityGroupArrayOutput values.
// You can construct a concrete instance of `GetPrefixListAssociationsSecurityGroupArrayInput` via:
//
//	GetPrefixListAssociationsSecurityGroupArray{ GetPrefixListAssociationsSecurityGroupArgs{...} }
type GetPrefixListAssociationsSecurityGroupArrayInput interface {
	pulumi.Input

	ToGetPrefixListAssociationsSecurityGroupArrayOutput() GetPrefixListAssociationsSecurityGroupArrayOutput
	ToGetPrefixListAssociationsSecurityGroupArrayOutputWithContext(context.Context) GetPrefixListAssociationsSecurityGroupArrayOutput
}

type GetPrefixListAssociationsSecurityGroupArray []GetPrefixListAssociationsSecurityGroupInput

func (GetPrefixListAssociationsSecurityGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (i GetPrefixListAssociationsSecurityGroupArray) ToGetPrefixListAssociationsSecurityGroupArrayOutput() GetPrefixListAssociationsSecurityGroupArrayOutput {
	return i.ToGetPrefixListAssociationsSecurityGroupArrayOutputWithContext(context.Background())
}

func (i GetPrefixListAssociationsSecurityGroupArray) ToGetPrefixListAssociationsSecurityGroupArrayOutputWithContext(ctx context.Context) GetPrefixListAssociationsSecurityGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListAssociationsSecurityGroupArrayOutput)
}

type GetPrefixListAssociationsSecurityGroupOutput struct{ *pulumi.OutputState }

func (GetPrefixListAssociationsSecurityGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (o GetPrefixListAssociationsSecurityGroupOutput) ToGetPrefixListAssociationsSecurityGroupOutput() GetPrefixListAssociationsSecurityGroupOutput {
	return o
}

func (o GetPrefixListAssociationsSecurityGroupOutput) ToGetPrefixListAssociationsSecurityGroupOutputWithContext(ctx context.Context) GetPrefixListAssociationsSecurityGroupOutput {
	return o
}

// 关联资源的ID。
func (o GetPrefixListAssociationsSecurityGroupOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListAssociationsSecurityGroup) string { return v.ResourceId }).(pulumi.StringOutput)
}

// 关联资源的类型。VpcRouteTable：路由表；VpcSecurityGroup：安全组。
func (o GetPrefixListAssociationsSecurityGroupOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListAssociationsSecurityGroup) string { return v.ResourceType }).(pulumi.StringOutput)
}

type GetPrefixListAssociationsSecurityGroupArrayOutput struct{ *pulumi.OutputState }

func (GetPrefixListAssociationsSecurityGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListAssociationsSecurityGroup)(nil)).Elem()
}

func (o GetPrefixListAssociationsSecurityGroupArrayOutput) ToGetPrefixListAssociationsSecurityGroupArrayOutput() GetPrefixListAssociationsSecurityGroupArrayOutput {
	return o
}

func (o GetPrefixListAssociationsSecurityGroupArrayOutput) ToGetPrefixListAssociationsSecurityGroupArrayOutputWithContext(ctx context.Context) GetPrefixListAssociationsSecurityGroupArrayOutput {
	return o
}

func (o GetPrefixListAssociationsSecurityGroupArrayOutput) Index(i pulumi.IntInput) GetPrefixListAssociationsSecurityGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrefixListAssociationsSecurityGroup {
		return vs[0].([]GetPrefixListAssociationsSecurityGroup)[vs[1].(int)]
	}).(GetPrefixListAssociationsSecurityGroupOutput)
}

type GetPrefixListPrefixListEntry struct {
	// 前缀列表条目的CIDR。
	Cidr string `pulumi:"cidr"`
	// 前缀列表条目的描述。长度限制为0~255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description string `pulumi:"description"`
}

// GetPrefixListPrefixListEntryInput is an input type that accepts GetPrefixListPrefixListEntryArgs and GetPrefixListPrefixListEntryOutput values.
// You can construct a concrete instance of `GetPrefixListPrefixListEntryInput` via:
//
//	GetPrefixListPrefixListEntryArgs{...}
type GetPrefixListPrefixListEntryInput interface {
	pulumi.Input

	ToGetPrefixListPrefixListEntryOutput() GetPrefixListPrefixListEntryOutput
	ToGetPrefixListPrefixListEntryOutputWithContext(context.Context) GetPrefixListPrefixListEntryOutput
}

type GetPrefixListPrefixListEntryArgs struct {
	// 前缀列表条目的CIDR。
	Cidr pulumi.StringInput `pulumi:"cidr"`
	// 前缀列表条目的描述。长度限制为0~255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description pulumi.StringInput `pulumi:"description"`
}

func (GetPrefixListPrefixListEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListPrefixListEntry)(nil)).Elem()
}

func (i GetPrefixListPrefixListEntryArgs) ToGetPrefixListPrefixListEntryOutput() GetPrefixListPrefixListEntryOutput {
	return i.ToGetPrefixListPrefixListEntryOutputWithContext(context.Background())
}

func (i GetPrefixListPrefixListEntryArgs) ToGetPrefixListPrefixListEntryOutputWithContext(ctx context.Context) GetPrefixListPrefixListEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListPrefixListEntryOutput)
}

// GetPrefixListPrefixListEntryArrayInput is an input type that accepts GetPrefixListPrefixListEntryArray and GetPrefixListPrefixListEntryArrayOutput values.
// You can construct a concrete instance of `GetPrefixListPrefixListEntryArrayInput` via:
//
//	GetPrefixListPrefixListEntryArray{ GetPrefixListPrefixListEntryArgs{...} }
type GetPrefixListPrefixListEntryArrayInput interface {
	pulumi.Input

	ToGetPrefixListPrefixListEntryArrayOutput() GetPrefixListPrefixListEntryArrayOutput
	ToGetPrefixListPrefixListEntryArrayOutputWithContext(context.Context) GetPrefixListPrefixListEntryArrayOutput
}

type GetPrefixListPrefixListEntryArray []GetPrefixListPrefixListEntryInput

func (GetPrefixListPrefixListEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListPrefixListEntry)(nil)).Elem()
}

func (i GetPrefixListPrefixListEntryArray) ToGetPrefixListPrefixListEntryArrayOutput() GetPrefixListPrefixListEntryArrayOutput {
	return i.ToGetPrefixListPrefixListEntryArrayOutputWithContext(context.Background())
}

func (i GetPrefixListPrefixListEntryArray) ToGetPrefixListPrefixListEntryArrayOutputWithContext(ctx context.Context) GetPrefixListPrefixListEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListPrefixListEntryArrayOutput)
}

type GetPrefixListPrefixListEntryOutput struct{ *pulumi.OutputState }

func (GetPrefixListPrefixListEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListPrefixListEntry)(nil)).Elem()
}

func (o GetPrefixListPrefixListEntryOutput) ToGetPrefixListPrefixListEntryOutput() GetPrefixListPrefixListEntryOutput {
	return o
}

func (o GetPrefixListPrefixListEntryOutput) ToGetPrefixListPrefixListEntryOutputWithContext(ctx context.Context) GetPrefixListPrefixListEntryOutput {
	return o
}

// 前缀列表条目的CIDR。
func (o GetPrefixListPrefixListEntryOutput) Cidr() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListPrefixListEntry) string { return v.Cidr }).(pulumi.StringOutput)
}

// 前缀列表条目的描述。长度限制为0~255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
func (o GetPrefixListPrefixListEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListPrefixListEntry) string { return v.Description }).(pulumi.StringOutput)
}

type GetPrefixListPrefixListEntryArrayOutput struct{ *pulumi.OutputState }

func (GetPrefixListPrefixListEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListPrefixListEntry)(nil)).Elem()
}

func (o GetPrefixListPrefixListEntryArrayOutput) ToGetPrefixListPrefixListEntryArrayOutput() GetPrefixListPrefixListEntryArrayOutput {
	return o
}

func (o GetPrefixListPrefixListEntryArrayOutput) ToGetPrefixListPrefixListEntryArrayOutputWithContext(ctx context.Context) GetPrefixListPrefixListEntryArrayOutput {
	return o
}

func (o GetPrefixListPrefixListEntryArrayOutput) Index(i pulumi.IntInput) GetPrefixListPrefixListEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrefixListPrefixListEntry {
		return vs[0].([]GetPrefixListPrefixListEntry)[vs[1].(int)]
	}).(GetPrefixListPrefixListEntryOutput)
}

type GetPrefixListTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetPrefixListTagInput is an input type that accepts GetPrefixListTagArgs and GetPrefixListTagOutput values.
// You can construct a concrete instance of `GetPrefixListTagInput` via:
//
//	GetPrefixListTagArgs{...}
type GetPrefixListTagInput interface {
	pulumi.Input

	ToGetPrefixListTagOutput() GetPrefixListTagOutput
	ToGetPrefixListTagOutputWithContext(context.Context) GetPrefixListTagOutput
}

type GetPrefixListTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetPrefixListTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListTag)(nil)).Elem()
}

func (i GetPrefixListTagArgs) ToGetPrefixListTagOutput() GetPrefixListTagOutput {
	return i.ToGetPrefixListTagOutputWithContext(context.Background())
}

func (i GetPrefixListTagArgs) ToGetPrefixListTagOutputWithContext(ctx context.Context) GetPrefixListTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListTagOutput)
}

// GetPrefixListTagArrayInput is an input type that accepts GetPrefixListTagArray and GetPrefixListTagArrayOutput values.
// You can construct a concrete instance of `GetPrefixListTagArrayInput` via:
//
//	GetPrefixListTagArray{ GetPrefixListTagArgs{...} }
type GetPrefixListTagArrayInput interface {
	pulumi.Input

	ToGetPrefixListTagArrayOutput() GetPrefixListTagArrayOutput
	ToGetPrefixListTagArrayOutputWithContext(context.Context) GetPrefixListTagArrayOutput
}

type GetPrefixListTagArray []GetPrefixListTagInput

func (GetPrefixListTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListTag)(nil)).Elem()
}

func (i GetPrefixListTagArray) ToGetPrefixListTagArrayOutput() GetPrefixListTagArrayOutput {
	return i.ToGetPrefixListTagArrayOutputWithContext(context.Background())
}

func (i GetPrefixListTagArray) ToGetPrefixListTagArrayOutputWithContext(ctx context.Context) GetPrefixListTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListTagArrayOutput)
}

type GetPrefixListTagOutput struct{ *pulumi.OutputState }

func (GetPrefixListTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListTag)(nil)).Elem()
}

func (o GetPrefixListTagOutput) ToGetPrefixListTagOutput() GetPrefixListTagOutput {
	return o
}

func (o GetPrefixListTagOutput) ToGetPrefixListTagOutputWithContext(ctx context.Context) GetPrefixListTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetPrefixListTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetPrefixListTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetPrefixListTagArrayOutput struct{ *pulumi.OutputState }

func (GetPrefixListTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListTag)(nil)).Elem()
}

func (o GetPrefixListTagArrayOutput) ToGetPrefixListTagArrayOutput() GetPrefixListTagArrayOutput {
	return o
}

func (o GetPrefixListTagArrayOutput) ToGetPrefixListTagArrayOutputWithContext(ctx context.Context) GetPrefixListTagArrayOutput {
	return o
}

func (o GetPrefixListTagArrayOutput) Index(i pulumi.IntInput) GetPrefixListTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrefixListTag {
		return vs[0].([]GetPrefixListTag)[vs[1].(int)]
	}).(GetPrefixListTagOutput)
}

type GetRouteTableCustomRouteEntry struct {
	// 路由条目描述。
	Description string `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId string `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId string `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName string `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType string `pulumi:"nextHopType"`
	// 前缀列表的CIDR。
	PrefixListCidrBlocks []string `pulumi:"prefixListCidrBlocks"`
	// 路由条目ID。
	RouteEntryId string `pulumi:"routeEntryId"`
	// 路由条目名称。
	RouteEntryName string `pulumi:"routeEntryName"`
	// 路由表ID。
	RouteTableId string `pulumi:"routeTableId"`
	// 路由条目状态。1、Pending：待创建。2、Available：可用。
	Status string `pulumi:"status"`
	// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
	Type string `pulumi:"type"`
	// 路由条目所属私有网络的ID。
	VpcId string `pulumi:"vpcId"`
}

// GetRouteTableCustomRouteEntryInput is an input type that accepts GetRouteTableCustomRouteEntryArgs and GetRouteTableCustomRouteEntryOutput values.
// You can construct a concrete instance of `GetRouteTableCustomRouteEntryInput` via:
//
//	GetRouteTableCustomRouteEntryArgs{...}
type GetRouteTableCustomRouteEntryInput interface {
	pulumi.Input

	ToGetRouteTableCustomRouteEntryOutput() GetRouteTableCustomRouteEntryOutput
	ToGetRouteTableCustomRouteEntryOutputWithContext(context.Context) GetRouteTableCustomRouteEntryOutput
}

type GetRouteTableCustomRouteEntryArgs struct {
	// 路由条目描述。
	Description pulumi.StringInput `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId pulumi.StringInput `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName pulumi.StringInput `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// 前缀列表的CIDR。
	PrefixListCidrBlocks pulumi.StringArrayInput `pulumi:"prefixListCidrBlocks"`
	// 路由条目ID。
	RouteEntryId pulumi.StringInput `pulumi:"routeEntryId"`
	// 路由条目名称。
	RouteEntryName pulumi.StringInput `pulumi:"routeEntryName"`
	// 路由表ID。
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// 路由条目状态。1、Pending：待创建。2、Available：可用。
	Status pulumi.StringInput `pulumi:"status"`
	// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
	Type pulumi.StringInput `pulumi:"type"`
	// 路由条目所属私有网络的ID。
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetRouteTableCustomRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableCustomRouteEntry)(nil)).Elem()
}

func (i GetRouteTableCustomRouteEntryArgs) ToGetRouteTableCustomRouteEntryOutput() GetRouteTableCustomRouteEntryOutput {
	return i.ToGetRouteTableCustomRouteEntryOutputWithContext(context.Background())
}

func (i GetRouteTableCustomRouteEntryArgs) ToGetRouteTableCustomRouteEntryOutputWithContext(ctx context.Context) GetRouteTableCustomRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableCustomRouteEntryOutput)
}

// GetRouteTableCustomRouteEntryArrayInput is an input type that accepts GetRouteTableCustomRouteEntryArray and GetRouteTableCustomRouteEntryArrayOutput values.
// You can construct a concrete instance of `GetRouteTableCustomRouteEntryArrayInput` via:
//
//	GetRouteTableCustomRouteEntryArray{ GetRouteTableCustomRouteEntryArgs{...} }
type GetRouteTableCustomRouteEntryArrayInput interface {
	pulumi.Input

	ToGetRouteTableCustomRouteEntryArrayOutput() GetRouteTableCustomRouteEntryArrayOutput
	ToGetRouteTableCustomRouteEntryArrayOutputWithContext(context.Context) GetRouteTableCustomRouteEntryArrayOutput
}

type GetRouteTableCustomRouteEntryArray []GetRouteTableCustomRouteEntryInput

func (GetRouteTableCustomRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableCustomRouteEntry)(nil)).Elem()
}

func (i GetRouteTableCustomRouteEntryArray) ToGetRouteTableCustomRouteEntryArrayOutput() GetRouteTableCustomRouteEntryArrayOutput {
	return i.ToGetRouteTableCustomRouteEntryArrayOutputWithContext(context.Background())
}

func (i GetRouteTableCustomRouteEntryArray) ToGetRouteTableCustomRouteEntryArrayOutputWithContext(ctx context.Context) GetRouteTableCustomRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableCustomRouteEntryArrayOutput)
}

type GetRouteTableCustomRouteEntryOutput struct{ *pulumi.OutputState }

func (GetRouteTableCustomRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableCustomRouteEntry)(nil)).Elem()
}

func (o GetRouteTableCustomRouteEntryOutput) ToGetRouteTableCustomRouteEntryOutput() GetRouteTableCustomRouteEntryOutput {
	return o
}

func (o GetRouteTableCustomRouteEntryOutput) ToGetRouteTableCustomRouteEntryOutputWithContext(ctx context.Context) GetRouteTableCustomRouteEntryOutput {
	return o
}

// 路由条目描述。
func (o GetRouteTableCustomRouteEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.Description }).(pulumi.StringOutput)
}

// 路由条目的目标网段。
func (o GetRouteTableCustomRouteEntryOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// 前缀列表ID。
func (o GetRouteTableCustomRouteEntryOutput) DestinationPrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.DestinationPrefixListId }).(pulumi.StringOutput)
}

// 下一跳资源ID。
func (o GetRouteTableCustomRouteEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// 路由条目下一跳资源的名称。
func (o GetRouteTableCustomRouteEntryOutput) NextHopName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.NextHopName }).(pulumi.StringOutput)
}

// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
func (o GetRouteTableCustomRouteEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// 前缀列表的CIDR。
func (o GetRouteTableCustomRouteEntryOutput) PrefixListCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) []string { return v.PrefixListCidrBlocks }).(pulumi.StringArrayOutput)
}

// 路由条目ID。
func (o GetRouteTableCustomRouteEntryOutput) RouteEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.RouteEntryId }).(pulumi.StringOutput)
}

// 路由条目名称。
func (o GetRouteTableCustomRouteEntryOutput) RouteEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.RouteEntryName }).(pulumi.StringOutput)
}

// 路由表ID。
func (o GetRouteTableCustomRouteEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// 路由条目状态。1、Pending：待创建。2、Available：可用。
func (o GetRouteTableCustomRouteEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.Status }).(pulumi.StringOutput)
}

// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
func (o GetRouteTableCustomRouteEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.Type }).(pulumi.StringOutput)
}

// 路由条目所属私有网络的ID。
func (o GetRouteTableCustomRouteEntryOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableCustomRouteEntry) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetRouteTableCustomRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRouteTableCustomRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableCustomRouteEntry)(nil)).Elem()
}

func (o GetRouteTableCustomRouteEntryArrayOutput) ToGetRouteTableCustomRouteEntryArrayOutput() GetRouteTableCustomRouteEntryArrayOutput {
	return o
}

func (o GetRouteTableCustomRouteEntryArrayOutput) ToGetRouteTableCustomRouteEntryArrayOutputWithContext(ctx context.Context) GetRouteTableCustomRouteEntryArrayOutput {
	return o
}

func (o GetRouteTableCustomRouteEntryArrayOutput) Index(i pulumi.IntInput) GetRouteTableCustomRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteTableCustomRouteEntry {
		return vs[0].([]GetRouteTableCustomRouteEntry)[vs[1].(int)]
	}).(GetRouteTableCustomRouteEntryOutput)
}

type GetRouteTableSystemRouteEntry struct {
	// 路由条目描述。
	Description string `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId string `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId string `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName string `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType string `pulumi:"nextHopType"`
	// 前缀列表的CIDR。
	PrefixListCidrBlocks []string `pulumi:"prefixListCidrBlocks"`
	// 路由条目ID。
	RouteEntryId string `pulumi:"routeEntryId"`
	// 路由条目名称。
	RouteEntryName string `pulumi:"routeEntryName"`
	// 路由表ID。
	RouteTableId string `pulumi:"routeTableId"`
	// 路由条目状态。1、Pending：待创建。2、Available：可用。
	Status string `pulumi:"status"`
	// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
	Type string `pulumi:"type"`
	// 路由条目所属私有网络的ID。
	VpcId string `pulumi:"vpcId"`
}

// GetRouteTableSystemRouteEntryInput is an input type that accepts GetRouteTableSystemRouteEntryArgs and GetRouteTableSystemRouteEntryOutput values.
// You can construct a concrete instance of `GetRouteTableSystemRouteEntryInput` via:
//
//	GetRouteTableSystemRouteEntryArgs{...}
type GetRouteTableSystemRouteEntryInput interface {
	pulumi.Input

	ToGetRouteTableSystemRouteEntryOutput() GetRouteTableSystemRouteEntryOutput
	ToGetRouteTableSystemRouteEntryOutputWithContext(context.Context) GetRouteTableSystemRouteEntryOutput
}

type GetRouteTableSystemRouteEntryArgs struct {
	// 路由条目描述。
	Description pulumi.StringInput `pulumi:"description"`
	// 路由条目的目标网段。
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	// 前缀列表ID。
	DestinationPrefixListId pulumi.StringInput `pulumi:"destinationPrefixListId"`
	// 下一跳资源ID。
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// 路由条目下一跳资源的名称。
	NextHopName pulumi.StringInput `pulumi:"nextHopName"`
	// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
	NextHopType pulumi.StringInput `pulumi:"nextHopType"`
	// 前缀列表的CIDR。
	PrefixListCidrBlocks pulumi.StringArrayInput `pulumi:"prefixListCidrBlocks"`
	// 路由条目ID。
	RouteEntryId pulumi.StringInput `pulumi:"routeEntryId"`
	// 路由条目名称。
	RouteEntryName pulumi.StringInput `pulumi:"routeEntryName"`
	// 路由表ID。
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// 路由条目状态。1、Pending：待创建。2、Available：可用。
	Status pulumi.StringInput `pulumi:"status"`
	// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
	Type pulumi.StringInput `pulumi:"type"`
	// 路由条目所属私有网络的ID。
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetRouteTableSystemRouteEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableSystemRouteEntry)(nil)).Elem()
}

func (i GetRouteTableSystemRouteEntryArgs) ToGetRouteTableSystemRouteEntryOutput() GetRouteTableSystemRouteEntryOutput {
	return i.ToGetRouteTableSystemRouteEntryOutputWithContext(context.Background())
}

func (i GetRouteTableSystemRouteEntryArgs) ToGetRouteTableSystemRouteEntryOutputWithContext(ctx context.Context) GetRouteTableSystemRouteEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableSystemRouteEntryOutput)
}

// GetRouteTableSystemRouteEntryArrayInput is an input type that accepts GetRouteTableSystemRouteEntryArray and GetRouteTableSystemRouteEntryArrayOutput values.
// You can construct a concrete instance of `GetRouteTableSystemRouteEntryArrayInput` via:
//
//	GetRouteTableSystemRouteEntryArray{ GetRouteTableSystemRouteEntryArgs{...} }
type GetRouteTableSystemRouteEntryArrayInput interface {
	pulumi.Input

	ToGetRouteTableSystemRouteEntryArrayOutput() GetRouteTableSystemRouteEntryArrayOutput
	ToGetRouteTableSystemRouteEntryArrayOutputWithContext(context.Context) GetRouteTableSystemRouteEntryArrayOutput
}

type GetRouteTableSystemRouteEntryArray []GetRouteTableSystemRouteEntryInput

func (GetRouteTableSystemRouteEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableSystemRouteEntry)(nil)).Elem()
}

func (i GetRouteTableSystemRouteEntryArray) ToGetRouteTableSystemRouteEntryArrayOutput() GetRouteTableSystemRouteEntryArrayOutput {
	return i.ToGetRouteTableSystemRouteEntryArrayOutputWithContext(context.Background())
}

func (i GetRouteTableSystemRouteEntryArray) ToGetRouteTableSystemRouteEntryArrayOutputWithContext(ctx context.Context) GetRouteTableSystemRouteEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableSystemRouteEntryArrayOutput)
}

type GetRouteTableSystemRouteEntryOutput struct{ *pulumi.OutputState }

func (GetRouteTableSystemRouteEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableSystemRouteEntry)(nil)).Elem()
}

func (o GetRouteTableSystemRouteEntryOutput) ToGetRouteTableSystemRouteEntryOutput() GetRouteTableSystemRouteEntryOutput {
	return o
}

func (o GetRouteTableSystemRouteEntryOutput) ToGetRouteTableSystemRouteEntryOutputWithContext(ctx context.Context) GetRouteTableSystemRouteEntryOutput {
	return o
}

// 路由条目描述。
func (o GetRouteTableSystemRouteEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.Description }).(pulumi.StringOutput)
}

// 路由条目的目标网段。
func (o GetRouteTableSystemRouteEntryOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// 前缀列表ID。
func (o GetRouteTableSystemRouteEntryOutput) DestinationPrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.DestinationPrefixListId }).(pulumi.StringOutput)
}

// 下一跳资源ID。
func (o GetRouteTableSystemRouteEntryOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.NextHopId }).(pulumi.StringOutput)
}

// 路由条目下一跳资源的名称。
func (o GetRouteTableSystemRouteEntryOutput) NextHopName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.NextHopName }).(pulumi.StringOutput)
}

// 自定义路由条目的下一跳的类型。1、Instance：ECS实例。2、HaVip：高可用虚拟IP。3、NetworkInterface：辅助网卡。4、NatGW：NAT网关。5、VpnGW：VPN网关。6、TransitRouter：中转路由器。7、IPv6GW：IPv6网关。8、CloudConnector：云连接器。9、GWLBEndpoint：网关负载均衡终端节点。
func (o GetRouteTableSystemRouteEntryOutput) NextHopType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.NextHopType }).(pulumi.StringOutput)
}

// 前缀列表的CIDR。
func (o GetRouteTableSystemRouteEntryOutput) PrefixListCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) []string { return v.PrefixListCidrBlocks }).(pulumi.StringArrayOutput)
}

// 路由条目ID。
func (o GetRouteTableSystemRouteEntryOutput) RouteEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.RouteEntryId }).(pulumi.StringOutput)
}

// 路由条目名称。
func (o GetRouteTableSystemRouteEntryOutput) RouteEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.RouteEntryName }).(pulumi.StringOutput)
}

// 路由表ID。
func (o GetRouteTableSystemRouteEntryOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// 路由条目状态。1、Pending：待创建。2、Available：可用。
func (o GetRouteTableSystemRouteEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.Status }).(pulumi.StringOutput)
}

// 路由条目类型。1、Custom：自定义路由条目。2、System：系统默认路由条目。
func (o GetRouteTableSystemRouteEntryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.Type }).(pulumi.StringOutput)
}

// 路由条目所属私有网络的ID。
func (o GetRouteTableSystemRouteEntryOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableSystemRouteEntry) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetRouteTableSystemRouteEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRouteTableSystemRouteEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableSystemRouteEntry)(nil)).Elem()
}

func (o GetRouteTableSystemRouteEntryArrayOutput) ToGetRouteTableSystemRouteEntryArrayOutput() GetRouteTableSystemRouteEntryArrayOutput {
	return o
}

func (o GetRouteTableSystemRouteEntryArrayOutput) ToGetRouteTableSystemRouteEntryArrayOutputWithContext(ctx context.Context) GetRouteTableSystemRouteEntryArrayOutput {
	return o
}

func (o GetRouteTableSystemRouteEntryArrayOutput) Index(i pulumi.IntInput) GetRouteTableSystemRouteEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteTableSystemRouteEntry {
		return vs[0].([]GetRouteTableSystemRouteEntry)[vs[1].(int)]
	}).(GetRouteTableSystemRouteEntryOutput)
}

type GetRouteTableTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetRouteTableTagInput is an input type that accepts GetRouteTableTagArgs and GetRouteTableTagOutput values.
// You can construct a concrete instance of `GetRouteTableTagInput` via:
//
//	GetRouteTableTagArgs{...}
type GetRouteTableTagInput interface {
	pulumi.Input

	ToGetRouteTableTagOutput() GetRouteTableTagOutput
	ToGetRouteTableTagOutputWithContext(context.Context) GetRouteTableTagOutput
}

type GetRouteTableTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRouteTableTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableTag)(nil)).Elem()
}

func (i GetRouteTableTagArgs) ToGetRouteTableTagOutput() GetRouteTableTagOutput {
	return i.ToGetRouteTableTagOutputWithContext(context.Background())
}

func (i GetRouteTableTagArgs) ToGetRouteTableTagOutputWithContext(ctx context.Context) GetRouteTableTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableTagOutput)
}

// GetRouteTableTagArrayInput is an input type that accepts GetRouteTableTagArray and GetRouteTableTagArrayOutput values.
// You can construct a concrete instance of `GetRouteTableTagArrayInput` via:
//
//	GetRouteTableTagArray{ GetRouteTableTagArgs{...} }
type GetRouteTableTagArrayInput interface {
	pulumi.Input

	ToGetRouteTableTagArrayOutput() GetRouteTableTagArrayOutput
	ToGetRouteTableTagArrayOutputWithContext(context.Context) GetRouteTableTagArrayOutput
}

type GetRouteTableTagArray []GetRouteTableTagInput

func (GetRouteTableTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableTag)(nil)).Elem()
}

func (i GetRouteTableTagArray) ToGetRouteTableTagArrayOutput() GetRouteTableTagArrayOutput {
	return i.ToGetRouteTableTagArrayOutputWithContext(context.Background())
}

func (i GetRouteTableTagArray) ToGetRouteTableTagArrayOutputWithContext(ctx context.Context) GetRouteTableTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteTableTagArrayOutput)
}

type GetRouteTableTagOutput struct{ *pulumi.OutputState }

func (GetRouteTableTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteTableTag)(nil)).Elem()
}

func (o GetRouteTableTagOutput) ToGetRouteTableTagOutput() GetRouteTableTagOutput {
	return o
}

func (o GetRouteTableTagOutput) ToGetRouteTableTagOutputWithContext(ctx context.Context) GetRouteTableTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetRouteTableTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetRouteTableTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteTableTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetRouteTableTagArrayOutput struct{ *pulumi.OutputState }

func (GetRouteTableTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteTableTag)(nil)).Elem()
}

func (o GetRouteTableTagArrayOutput) ToGetRouteTableTagArrayOutput() GetRouteTableTagArrayOutput {
	return o
}

func (o GetRouteTableTagArrayOutput) ToGetRouteTableTagArrayOutputWithContext(ctx context.Context) GetRouteTableTagArrayOutput {
	return o
}

func (o GetRouteTableTagArrayOutput) Index(i pulumi.IntInput) GetRouteTableTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteTableTag {
		return vs[0].([]GetRouteTableTag)[vs[1].(int)]
	}).(GetRouteTableTagOutput)
}

type GetSecurityGroupEgressPermission struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp string `pulumi:"cidrIp"`
	// 安全组规则创建时间。
	CreationTime string `pulumi:"creationTime"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description string `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction string `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy string `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd int `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart int `pulumi:"portStart"`
	// 前缀列表的CIDR。
	PrefixListCidrs []string `pulumi:"prefixListCidrs"`
	// 前缀列表的ID
	PrefixListId string `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority int `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol string `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId string `pulumi:"sourceGroupId"`
	// 安全组规则更新时间。
	UpdateTime string `pulumi:"updateTime"`
}

// GetSecurityGroupEgressPermissionInput is an input type that accepts GetSecurityGroupEgressPermissionArgs and GetSecurityGroupEgressPermissionOutput values.
// You can construct a concrete instance of `GetSecurityGroupEgressPermissionInput` via:
//
//	GetSecurityGroupEgressPermissionArgs{...}
type GetSecurityGroupEgressPermissionInput interface {
	pulumi.Input

	ToGetSecurityGroupEgressPermissionOutput() GetSecurityGroupEgressPermissionOutput
	ToGetSecurityGroupEgressPermissionOutputWithContext(context.Context) GetSecurityGroupEgressPermissionOutput
}

type GetSecurityGroupEgressPermissionArgs struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp pulumi.StringInput `pulumi:"cidrIp"`
	// 安全组规则创建时间。
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description pulumi.StringInput `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction pulumi.StringInput `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy pulumi.StringInput `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd pulumi.IntInput `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart pulumi.IntInput `pulumi:"portStart"`
	// 前缀列表的CIDR。
	PrefixListCidrs pulumi.StringArrayInput `pulumi:"prefixListCidrs"`
	// 前缀列表的ID
	PrefixListId pulumi.StringInput `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority pulumi.IntInput `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId pulumi.StringInput `pulumi:"sourceGroupId"`
	// 安全组规则更新时间。
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetSecurityGroupEgressPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupEgressPermission)(nil)).Elem()
}

func (i GetSecurityGroupEgressPermissionArgs) ToGetSecurityGroupEgressPermissionOutput() GetSecurityGroupEgressPermissionOutput {
	return i.ToGetSecurityGroupEgressPermissionOutputWithContext(context.Background())
}

func (i GetSecurityGroupEgressPermissionArgs) ToGetSecurityGroupEgressPermissionOutputWithContext(ctx context.Context) GetSecurityGroupEgressPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupEgressPermissionOutput)
}

// GetSecurityGroupEgressPermissionArrayInput is an input type that accepts GetSecurityGroupEgressPermissionArray and GetSecurityGroupEgressPermissionArrayOutput values.
// You can construct a concrete instance of `GetSecurityGroupEgressPermissionArrayInput` via:
//
//	GetSecurityGroupEgressPermissionArray{ GetSecurityGroupEgressPermissionArgs{...} }
type GetSecurityGroupEgressPermissionArrayInput interface {
	pulumi.Input

	ToGetSecurityGroupEgressPermissionArrayOutput() GetSecurityGroupEgressPermissionArrayOutput
	ToGetSecurityGroupEgressPermissionArrayOutputWithContext(context.Context) GetSecurityGroupEgressPermissionArrayOutput
}

type GetSecurityGroupEgressPermissionArray []GetSecurityGroupEgressPermissionInput

func (GetSecurityGroupEgressPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupEgressPermission)(nil)).Elem()
}

func (i GetSecurityGroupEgressPermissionArray) ToGetSecurityGroupEgressPermissionArrayOutput() GetSecurityGroupEgressPermissionArrayOutput {
	return i.ToGetSecurityGroupEgressPermissionArrayOutputWithContext(context.Background())
}

func (i GetSecurityGroupEgressPermissionArray) ToGetSecurityGroupEgressPermissionArrayOutputWithContext(ctx context.Context) GetSecurityGroupEgressPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupEgressPermissionArrayOutput)
}

type GetSecurityGroupEgressPermissionOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupEgressPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupEgressPermission)(nil)).Elem()
}

func (o GetSecurityGroupEgressPermissionOutput) ToGetSecurityGroupEgressPermissionOutput() GetSecurityGroupEgressPermissionOutput {
	return o
}

func (o GetSecurityGroupEgressPermissionOutput) ToGetSecurityGroupEgressPermissionOutputWithContext(ctx context.Context) GetSecurityGroupEgressPermissionOutput {
	return o
}

// 源地址的IPv4 CIDR或IPv6 CIDR
func (o GetSecurityGroupEgressPermissionOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.CidrIp }).(pulumi.StringOutput)
}

// 安全组规则创建时间。
func (o GetSecurityGroupEgressPermissionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.CreationTime }).(pulumi.StringOutput)
}

// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
func (o GetSecurityGroupEgressPermissionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.Description }).(pulumi.StringOutput)
}

// 安全组规则方向。ingress：入方向。egress：出方向
func (o GetSecurityGroupEgressPermissionOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.Direction }).(pulumi.StringOutput)
}

// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
func (o GetSecurityGroupEgressPermissionOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.Policy }).(pulumi.StringOutput)
}

// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o GetSecurityGroupEgressPermissionOutput) PortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) int { return v.PortEnd }).(pulumi.IntOutput)
}

// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o GetSecurityGroupEgressPermissionOutput) PortStart() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) int { return v.PortStart }).(pulumi.IntOutput)
}

// 前缀列表的CIDR。
func (o GetSecurityGroupEgressPermissionOutput) PrefixListCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) []string { return v.PrefixListCidrs }).(pulumi.StringArrayOutput)
}

// 前缀列表的ID
func (o GetSecurityGroupEgressPermissionOutput) PrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.PrefixListId }).(pulumi.StringOutput)
}

// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
func (o GetSecurityGroupEgressPermissionOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) int { return v.Priority }).(pulumi.IntOutput)
}

// 协议类型。tcp、udp、icmp、icmpv6、all
func (o GetSecurityGroupEgressPermissionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.Protocol }).(pulumi.StringOutput)
}

// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
func (o GetSecurityGroupEgressPermissionOutput) SourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.SourceGroupId }).(pulumi.StringOutput)
}

// 安全组规则更新时间。
func (o GetSecurityGroupEgressPermissionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupEgressPermission) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetSecurityGroupEgressPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupEgressPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupEgressPermission)(nil)).Elem()
}

func (o GetSecurityGroupEgressPermissionArrayOutput) ToGetSecurityGroupEgressPermissionArrayOutput() GetSecurityGroupEgressPermissionArrayOutput {
	return o
}

func (o GetSecurityGroupEgressPermissionArrayOutput) ToGetSecurityGroupEgressPermissionArrayOutputWithContext(ctx context.Context) GetSecurityGroupEgressPermissionArrayOutput {
	return o
}

func (o GetSecurityGroupEgressPermissionArrayOutput) Index(i pulumi.IntInput) GetSecurityGroupEgressPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityGroupEgressPermission {
		return vs[0].([]GetSecurityGroupEgressPermission)[vs[1].(int)]
	}).(GetSecurityGroupEgressPermissionOutput)
}

type GetSecurityGroupIngressPermission struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp string `pulumi:"cidrIp"`
	// 安全组规则创建时间。
	CreationTime string `pulumi:"creationTime"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description string `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction string `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy string `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd int `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart int `pulumi:"portStart"`
	// 前缀列表的CIDR。
	PrefixListCidrs []string `pulumi:"prefixListCidrs"`
	// 前缀列表的ID
	PrefixListId string `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority int `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol string `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId string `pulumi:"sourceGroupId"`
	// 安全组规则更新时间。
	UpdateTime string `pulumi:"updateTime"`
}

// GetSecurityGroupIngressPermissionInput is an input type that accepts GetSecurityGroupIngressPermissionArgs and GetSecurityGroupIngressPermissionOutput values.
// You can construct a concrete instance of `GetSecurityGroupIngressPermissionInput` via:
//
//	GetSecurityGroupIngressPermissionArgs{...}
type GetSecurityGroupIngressPermissionInput interface {
	pulumi.Input

	ToGetSecurityGroupIngressPermissionOutput() GetSecurityGroupIngressPermissionOutput
	ToGetSecurityGroupIngressPermissionOutputWithContext(context.Context) GetSecurityGroupIngressPermissionOutput
}

type GetSecurityGroupIngressPermissionArgs struct {
	// 源地址的IPv4 CIDR或IPv6 CIDR
	CidrIp pulumi.StringInput `pulumi:"cidrIp"`
	// 安全组规则创建时间。
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
	Description pulumi.StringInput `pulumi:"description"`
	// 安全组规则方向。ingress：入方向。egress：出方向
	Direction pulumi.StringInput `pulumi:"direction"`
	// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
	Policy pulumi.StringInput `pulumi:"policy"`
	// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortEnd pulumi.IntInput `pulumi:"portEnd"`
	// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
	PortStart pulumi.IntInput `pulumi:"portStart"`
	// 前缀列表的CIDR。
	PrefixListCidrs pulumi.StringArrayInput `pulumi:"prefixListCidrs"`
	// 前缀列表的ID
	PrefixListId pulumi.StringInput `pulumi:"prefixListId"`
	// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
	Priority pulumi.IntInput `pulumi:"priority"`
	// 协议类型。tcp、udp、icmp、icmpv6、all
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
	SourceGroupId pulumi.StringInput `pulumi:"sourceGroupId"`
	// 安全组规则更新时间。
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetSecurityGroupIngressPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupIngressPermission)(nil)).Elem()
}

func (i GetSecurityGroupIngressPermissionArgs) ToGetSecurityGroupIngressPermissionOutput() GetSecurityGroupIngressPermissionOutput {
	return i.ToGetSecurityGroupIngressPermissionOutputWithContext(context.Background())
}

func (i GetSecurityGroupIngressPermissionArgs) ToGetSecurityGroupIngressPermissionOutputWithContext(ctx context.Context) GetSecurityGroupIngressPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupIngressPermissionOutput)
}

// GetSecurityGroupIngressPermissionArrayInput is an input type that accepts GetSecurityGroupIngressPermissionArray and GetSecurityGroupIngressPermissionArrayOutput values.
// You can construct a concrete instance of `GetSecurityGroupIngressPermissionArrayInput` via:
//
//	GetSecurityGroupIngressPermissionArray{ GetSecurityGroupIngressPermissionArgs{...} }
type GetSecurityGroupIngressPermissionArrayInput interface {
	pulumi.Input

	ToGetSecurityGroupIngressPermissionArrayOutput() GetSecurityGroupIngressPermissionArrayOutput
	ToGetSecurityGroupIngressPermissionArrayOutputWithContext(context.Context) GetSecurityGroupIngressPermissionArrayOutput
}

type GetSecurityGroupIngressPermissionArray []GetSecurityGroupIngressPermissionInput

func (GetSecurityGroupIngressPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupIngressPermission)(nil)).Elem()
}

func (i GetSecurityGroupIngressPermissionArray) ToGetSecurityGroupIngressPermissionArrayOutput() GetSecurityGroupIngressPermissionArrayOutput {
	return i.ToGetSecurityGroupIngressPermissionArrayOutputWithContext(context.Background())
}

func (i GetSecurityGroupIngressPermissionArray) ToGetSecurityGroupIngressPermissionArrayOutputWithContext(ctx context.Context) GetSecurityGroupIngressPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupIngressPermissionArrayOutput)
}

type GetSecurityGroupIngressPermissionOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupIngressPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupIngressPermission)(nil)).Elem()
}

func (o GetSecurityGroupIngressPermissionOutput) ToGetSecurityGroupIngressPermissionOutput() GetSecurityGroupIngressPermissionOutput {
	return o
}

func (o GetSecurityGroupIngressPermissionOutput) ToGetSecurityGroupIngressPermissionOutputWithContext(ctx context.Context) GetSecurityGroupIngressPermissionOutput {
	return o
}

// 源地址的IPv4 CIDR或IPv6 CIDR
func (o GetSecurityGroupIngressPermissionOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.CidrIp }).(pulumi.StringOutput)
}

// 安全组规则创建时间。
func (o GetSecurityGroupIngressPermissionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.CreationTime }).(pulumi.StringOutput)
}

// 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
func (o GetSecurityGroupIngressPermissionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.Description }).(pulumi.StringOutput)
}

// 安全组规则方向。ingress：入方向。egress：出方向
func (o GetSecurityGroupIngressPermissionOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.Direction }).(pulumi.StringOutput)
}

// 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
func (o GetSecurityGroupIngressPermissionOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.Policy }).(pulumi.StringOutput)
}

// 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o GetSecurityGroupIngressPermissionOutput) PortEnd() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) int { return v.PortEnd }).(pulumi.IntOutput)
}

// 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
func (o GetSecurityGroupIngressPermissionOutput) PortStart() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) int { return v.PortStart }).(pulumi.IntOutput)
}

// 前缀列表的CIDR。
func (o GetSecurityGroupIngressPermissionOutput) PrefixListCidrs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) []string { return v.PrefixListCidrs }).(pulumi.StringArrayOutput)
}

// 前缀列表的ID
func (o GetSecurityGroupIngressPermissionOutput) PrefixListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.PrefixListId }).(pulumi.StringOutput)
}

// 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
func (o GetSecurityGroupIngressPermissionOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) int { return v.Priority }).(pulumi.IntOutput)
}

// 协议类型。tcp、udp、icmp、icmpv6、all
func (o GetSecurityGroupIngressPermissionOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.Protocol }).(pulumi.StringOutput)
}

// 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
func (o GetSecurityGroupIngressPermissionOutput) SourceGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.SourceGroupId }).(pulumi.StringOutput)
}

// 安全组规则更新时间。
func (o GetSecurityGroupIngressPermissionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupIngressPermission) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetSecurityGroupIngressPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupIngressPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupIngressPermission)(nil)).Elem()
}

func (o GetSecurityGroupIngressPermissionArrayOutput) ToGetSecurityGroupIngressPermissionArrayOutput() GetSecurityGroupIngressPermissionArrayOutput {
	return o
}

func (o GetSecurityGroupIngressPermissionArrayOutput) ToGetSecurityGroupIngressPermissionArrayOutputWithContext(ctx context.Context) GetSecurityGroupIngressPermissionArrayOutput {
	return o
}

func (o GetSecurityGroupIngressPermissionArrayOutput) Index(i pulumi.IntInput) GetSecurityGroupIngressPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityGroupIngressPermission {
		return vs[0].([]GetSecurityGroupIngressPermission)[vs[1].(int)]
	}).(GetSecurityGroupIngressPermissionOutput)
}

type GetSecurityGroupTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetSecurityGroupTagInput is an input type that accepts GetSecurityGroupTagArgs and GetSecurityGroupTagOutput values.
// You can construct a concrete instance of `GetSecurityGroupTagInput` via:
//
//	GetSecurityGroupTagArgs{...}
type GetSecurityGroupTagInput interface {
	pulumi.Input

	ToGetSecurityGroupTagOutput() GetSecurityGroupTagOutput
	ToGetSecurityGroupTagOutputWithContext(context.Context) GetSecurityGroupTagOutput
}

type GetSecurityGroupTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSecurityGroupTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupTag)(nil)).Elem()
}

func (i GetSecurityGroupTagArgs) ToGetSecurityGroupTagOutput() GetSecurityGroupTagOutput {
	return i.ToGetSecurityGroupTagOutputWithContext(context.Background())
}

func (i GetSecurityGroupTagArgs) ToGetSecurityGroupTagOutputWithContext(ctx context.Context) GetSecurityGroupTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupTagOutput)
}

// GetSecurityGroupTagArrayInput is an input type that accepts GetSecurityGroupTagArray and GetSecurityGroupTagArrayOutput values.
// You can construct a concrete instance of `GetSecurityGroupTagArrayInput` via:
//
//	GetSecurityGroupTagArray{ GetSecurityGroupTagArgs{...} }
type GetSecurityGroupTagArrayInput interface {
	pulumi.Input

	ToGetSecurityGroupTagArrayOutput() GetSecurityGroupTagArrayOutput
	ToGetSecurityGroupTagArrayOutputWithContext(context.Context) GetSecurityGroupTagArrayOutput
}

type GetSecurityGroupTagArray []GetSecurityGroupTagInput

func (GetSecurityGroupTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupTag)(nil)).Elem()
}

func (i GetSecurityGroupTagArray) ToGetSecurityGroupTagArrayOutput() GetSecurityGroupTagArrayOutput {
	return i.ToGetSecurityGroupTagArrayOutputWithContext(context.Background())
}

func (i GetSecurityGroupTagArray) ToGetSecurityGroupTagArrayOutputWithContext(ctx context.Context) GetSecurityGroupTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecurityGroupTagArrayOutput)
}

type GetSecurityGroupTagOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecurityGroupTag)(nil)).Elem()
}

func (o GetSecurityGroupTagOutput) ToGetSecurityGroupTagOutput() GetSecurityGroupTagOutput {
	return o
}

func (o GetSecurityGroupTagOutput) ToGetSecurityGroupTagOutputWithContext(ctx context.Context) GetSecurityGroupTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetSecurityGroupTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetSecurityGroupTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecurityGroupTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetSecurityGroupTagArrayOutput struct{ *pulumi.OutputState }

func (GetSecurityGroupTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecurityGroupTag)(nil)).Elem()
}

func (o GetSecurityGroupTagArrayOutput) ToGetSecurityGroupTagArrayOutput() GetSecurityGroupTagArrayOutput {
	return o
}

func (o GetSecurityGroupTagArrayOutput) ToGetSecurityGroupTagArrayOutputWithContext(ctx context.Context) GetSecurityGroupTagArrayOutput {
	return o
}

func (o GetSecurityGroupTagArrayOutput) Index(i pulumi.IntInput) GetSecurityGroupTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecurityGroupTag {
		return vs[0].([]GetSecurityGroupTag)[vs[1].(int)]
	}).(GetSecurityGroupTagOutput)
}

type GetSubnetRouteTable struct {
	// 子网关联的路由表ID。
	RouteTableId string `pulumi:"routeTableId"`
	// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
	RouteTableType string `pulumi:"routeTableType"`
}

// GetSubnetRouteTableInput is an input type that accepts GetSubnetRouteTableArgs and GetSubnetRouteTableOutput values.
// You can construct a concrete instance of `GetSubnetRouteTableInput` via:
//
//	GetSubnetRouteTableArgs{...}
type GetSubnetRouteTableInput interface {
	pulumi.Input

	ToGetSubnetRouteTableOutput() GetSubnetRouteTableOutput
	ToGetSubnetRouteTableOutputWithContext(context.Context) GetSubnetRouteTableOutput
}

type GetSubnetRouteTableArgs struct {
	// 子网关联的路由表ID。
	RouteTableId pulumi.StringInput `pulumi:"routeTableId"`
	// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
	RouteTableType pulumi.StringInput `pulumi:"routeTableType"`
}

func (GetSubnetRouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetRouteTable)(nil)).Elem()
}

func (i GetSubnetRouteTableArgs) ToGetSubnetRouteTableOutput() GetSubnetRouteTableOutput {
	return i.ToGetSubnetRouteTableOutputWithContext(context.Background())
}

func (i GetSubnetRouteTableArgs) ToGetSubnetRouteTableOutputWithContext(ctx context.Context) GetSubnetRouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetRouteTableOutput)
}

type GetSubnetRouteTableOutput struct{ *pulumi.OutputState }

func (GetSubnetRouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetRouteTable)(nil)).Elem()
}

func (o GetSubnetRouteTableOutput) ToGetSubnetRouteTableOutput() GetSubnetRouteTableOutput {
	return o
}

func (o GetSubnetRouteTableOutput) ToGetSubnetRouteTableOutputWithContext(ctx context.Context) GetSubnetRouteTableOutput {
	return o
}

// 子网关联的路由表ID。
func (o GetSubnetRouteTableOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetRouteTable) string { return v.RouteTableId }).(pulumi.StringOutput)
}

// 子网关联的路由表的类型。1、System：表示系统路由表。2、Custom：表示自定义路由表。
func (o GetSubnetRouteTableOutput) RouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetRouteTable) string { return v.RouteTableType }).(pulumi.StringOutput)
}

type GetSubnetTag struct {
	// 用户标签的标签键。
	Key string `pulumi:"key"`
	// 用户标签的标签值。
	Value string `pulumi:"value"`
}

// GetSubnetTagInput is an input type that accepts GetSubnetTagArgs and GetSubnetTagOutput values.
// You can construct a concrete instance of `GetSubnetTagInput` via:
//
//	GetSubnetTagArgs{...}
type GetSubnetTagInput interface {
	pulumi.Input

	ToGetSubnetTagOutput() GetSubnetTagOutput
	ToGetSubnetTagOutputWithContext(context.Context) GetSubnetTagOutput
}

type GetSubnetTagArgs struct {
	// 用户标签的标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 用户标签的标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSubnetTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetTag)(nil)).Elem()
}

func (i GetSubnetTagArgs) ToGetSubnetTagOutput() GetSubnetTagOutput {
	return i.ToGetSubnetTagOutputWithContext(context.Background())
}

func (i GetSubnetTagArgs) ToGetSubnetTagOutputWithContext(ctx context.Context) GetSubnetTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetTagOutput)
}

// GetSubnetTagArrayInput is an input type that accepts GetSubnetTagArray and GetSubnetTagArrayOutput values.
// You can construct a concrete instance of `GetSubnetTagArrayInput` via:
//
//	GetSubnetTagArray{ GetSubnetTagArgs{...} }
type GetSubnetTagArrayInput interface {
	pulumi.Input

	ToGetSubnetTagArrayOutput() GetSubnetTagArrayOutput
	ToGetSubnetTagArrayOutputWithContext(context.Context) GetSubnetTagArrayOutput
}

type GetSubnetTagArray []GetSubnetTagInput

func (GetSubnetTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetTag)(nil)).Elem()
}

func (i GetSubnetTagArray) ToGetSubnetTagArrayOutput() GetSubnetTagArrayOutput {
	return i.ToGetSubnetTagArrayOutputWithContext(context.Background())
}

func (i GetSubnetTagArray) ToGetSubnetTagArrayOutputWithContext(ctx context.Context) GetSubnetTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSubnetTagArrayOutput)
}

type GetSubnetTagOutput struct{ *pulumi.OutputState }

func (GetSubnetTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSubnetTag)(nil)).Elem()
}

func (o GetSubnetTagOutput) ToGetSubnetTagOutput() GetSubnetTagOutput {
	return o
}

func (o GetSubnetTagOutput) ToGetSubnetTagOutputWithContext(ctx context.Context) GetSubnetTagOutput {
	return o
}

// 用户标签的标签键。
func (o GetSubnetTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetTag) string { return v.Key }).(pulumi.StringOutput)
}

// 用户标签的标签值。
func (o GetSubnetTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSubnetTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetSubnetTagArrayOutput struct{ *pulumi.OutputState }

func (GetSubnetTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSubnetTag)(nil)).Elem()
}

func (o GetSubnetTagArrayOutput) ToGetSubnetTagArrayOutput() GetSubnetTagArrayOutput {
	return o
}

func (o GetSubnetTagArrayOutput) ToGetSubnetTagArrayOutputWithContext(ctx context.Context) GetSubnetTagArrayOutput {
	return o
}

func (o GetSubnetTagArrayOutput) Index(i pulumi.IntInput) GetSubnetTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSubnetTag {
		return vs[0].([]GetSubnetTag)[vs[1].(int)]
	}).(GetSubnetTagOutput)
}

type GetVpcAssociateCen struct {
	// CEN的ID。
	CenId string `pulumi:"cenId"`
	// CEN的用户ID。
	CenOwnerId string `pulumi:"cenOwnerId"`
	// VPC在CEN中的状态。Attaching：加载中，Attached：已加载
	CenStatus string `pulumi:"cenStatus"`
}

// GetVpcAssociateCenInput is an input type that accepts GetVpcAssociateCenArgs and GetVpcAssociateCenOutput values.
// You can construct a concrete instance of `GetVpcAssociateCenInput` via:
//
//	GetVpcAssociateCenArgs{...}
type GetVpcAssociateCenInput interface {
	pulumi.Input

	ToGetVpcAssociateCenOutput() GetVpcAssociateCenOutput
	ToGetVpcAssociateCenOutputWithContext(context.Context) GetVpcAssociateCenOutput
}

type GetVpcAssociateCenArgs struct {
	// CEN的ID。
	CenId pulumi.StringInput `pulumi:"cenId"`
	// CEN的用户ID。
	CenOwnerId pulumi.StringInput `pulumi:"cenOwnerId"`
	// VPC在CEN中的状态。Attaching：加载中，Attached：已加载
	CenStatus pulumi.StringInput `pulumi:"cenStatus"`
}

func (GetVpcAssociateCenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcAssociateCen)(nil)).Elem()
}

func (i GetVpcAssociateCenArgs) ToGetVpcAssociateCenOutput() GetVpcAssociateCenOutput {
	return i.ToGetVpcAssociateCenOutputWithContext(context.Background())
}

func (i GetVpcAssociateCenArgs) ToGetVpcAssociateCenOutputWithContext(ctx context.Context) GetVpcAssociateCenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcAssociateCenOutput)
}

// GetVpcAssociateCenArrayInput is an input type that accepts GetVpcAssociateCenArray and GetVpcAssociateCenArrayOutput values.
// You can construct a concrete instance of `GetVpcAssociateCenArrayInput` via:
//
//	GetVpcAssociateCenArray{ GetVpcAssociateCenArgs{...} }
type GetVpcAssociateCenArrayInput interface {
	pulumi.Input

	ToGetVpcAssociateCenArrayOutput() GetVpcAssociateCenArrayOutput
	ToGetVpcAssociateCenArrayOutputWithContext(context.Context) GetVpcAssociateCenArrayOutput
}

type GetVpcAssociateCenArray []GetVpcAssociateCenInput

func (GetVpcAssociateCenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcAssociateCen)(nil)).Elem()
}

func (i GetVpcAssociateCenArray) ToGetVpcAssociateCenArrayOutput() GetVpcAssociateCenArrayOutput {
	return i.ToGetVpcAssociateCenArrayOutputWithContext(context.Background())
}

func (i GetVpcAssociateCenArray) ToGetVpcAssociateCenArrayOutputWithContext(ctx context.Context) GetVpcAssociateCenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcAssociateCenArrayOutput)
}

type GetVpcAssociateCenOutput struct{ *pulumi.OutputState }

func (GetVpcAssociateCenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcAssociateCen)(nil)).Elem()
}

func (o GetVpcAssociateCenOutput) ToGetVpcAssociateCenOutput() GetVpcAssociateCenOutput {
	return o
}

func (o GetVpcAssociateCenOutput) ToGetVpcAssociateCenOutputWithContext(ctx context.Context) GetVpcAssociateCenOutput {
	return o
}

// CEN的ID。
func (o GetVpcAssociateCenOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcAssociateCen) string { return v.CenId }).(pulumi.StringOutput)
}

// CEN的用户ID。
func (o GetVpcAssociateCenOutput) CenOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcAssociateCen) string { return v.CenOwnerId }).(pulumi.StringOutput)
}

// VPC在CEN中的状态。Attaching：加载中，Attached：已加载
func (o GetVpcAssociateCenOutput) CenStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcAssociateCen) string { return v.CenStatus }).(pulumi.StringOutput)
}

type GetVpcAssociateCenArrayOutput struct{ *pulumi.OutputState }

func (GetVpcAssociateCenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcAssociateCen)(nil)).Elem()
}

func (o GetVpcAssociateCenArrayOutput) ToGetVpcAssociateCenArrayOutput() GetVpcAssociateCenArrayOutput {
	return o
}

func (o GetVpcAssociateCenArrayOutput) ToGetVpcAssociateCenArrayOutputWithContext(ctx context.Context) GetVpcAssociateCenArrayOutput {
	return o
}

func (o GetVpcAssociateCenArrayOutput) Index(i pulumi.IntInput) GetVpcAssociateCenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcAssociateCen {
		return vs[0].([]GetVpcAssociateCen)[vs[1].(int)]
	}).(GetVpcAssociateCenOutput)
}

type GetVpcTag struct {
	// 标签键。
	Key string `pulumi:"key"`
	// 标签值。
	Value string `pulumi:"value"`
}

// GetVpcTagInput is an input type that accepts GetVpcTagArgs and GetVpcTagOutput values.
// You can construct a concrete instance of `GetVpcTagInput` via:
//
//	GetVpcTagArgs{...}
type GetVpcTagInput interface {
	pulumi.Input

	ToGetVpcTagOutput() GetVpcTagOutput
	ToGetVpcTagOutputWithContext(context.Context) GetVpcTagOutput
}

type GetVpcTagArgs struct {
	// 标签键。
	Key pulumi.StringInput `pulumi:"key"`
	// 标签值。
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVpcTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcTag)(nil)).Elem()
}

func (i GetVpcTagArgs) ToGetVpcTagOutput() GetVpcTagOutput {
	return i.ToGetVpcTagOutputWithContext(context.Background())
}

func (i GetVpcTagArgs) ToGetVpcTagOutputWithContext(ctx context.Context) GetVpcTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcTagOutput)
}

// GetVpcTagArrayInput is an input type that accepts GetVpcTagArray and GetVpcTagArrayOutput values.
// You can construct a concrete instance of `GetVpcTagArrayInput` via:
//
//	GetVpcTagArray{ GetVpcTagArgs{...} }
type GetVpcTagArrayInput interface {
	pulumi.Input

	ToGetVpcTagArrayOutput() GetVpcTagArrayOutput
	ToGetVpcTagArrayOutputWithContext(context.Context) GetVpcTagArrayOutput
}

type GetVpcTagArray []GetVpcTagInput

func (GetVpcTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcTag)(nil)).Elem()
}

func (i GetVpcTagArray) ToGetVpcTagArrayOutput() GetVpcTagArrayOutput {
	return i.ToGetVpcTagArrayOutputWithContext(context.Background())
}

func (i GetVpcTagArray) ToGetVpcTagArrayOutputWithContext(ctx context.Context) GetVpcTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcTagArrayOutput)
}

type GetVpcTagOutput struct{ *pulumi.OutputState }

func (GetVpcTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcTag)(nil)).Elem()
}

func (o GetVpcTagOutput) ToGetVpcTagOutput() GetVpcTagOutput {
	return o
}

func (o GetVpcTagOutput) ToGetVpcTagOutputWithContext(ctx context.Context) GetVpcTagOutput {
	return o
}

// 标签键。
func (o GetVpcTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcTag) string { return v.Key }).(pulumi.StringOutput)
}

// 标签值。
func (o GetVpcTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetVpcTagArrayOutput struct{ *pulumi.OutputState }

func (GetVpcTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcTag)(nil)).Elem()
}

func (o GetVpcTagArrayOutput) ToGetVpcTagArrayOutput() GetVpcTagArrayOutput {
	return o
}

func (o GetVpcTagArrayOutput) ToGetVpcTagArrayOutputWithContext(ctx context.Context) GetVpcTagArrayOutput {
	return o
}

func (o GetVpcTagArrayOutput) Index(i pulumi.IntInput) GetVpcTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcTag {
		return vs[0].([]GetVpcTag)[vs[1].(int)]
	}).(GetVpcTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageEipAddressInput)(nil)).Elem(), BandwidthPackageEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageEipAddressArrayInput)(nil)).Elem(), BandwidthPackageEipAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageTagInput)(nil)).Elem(), BandwidthPackageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BandwidthPackageTagArrayInput)(nil)).Elem(), BandwidthPackageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipTagInput)(nil)).Elem(), EipTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EipTagArrayInput)(nil)).Elem(), EipTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrimaryIpAddressInput)(nil)).Elem(), EniPrimaryIpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrimaryIpAddressPtrInput)(nil)).Elem(), EniPrimaryIpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrimaryIpAddressAssociatedElasticIpInput)(nil)).Elem(), EniPrimaryIpAddressAssociatedElasticIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrimaryIpAddressAssociatedElasticIpPtrInput)(nil)).Elem(), EniPrimaryIpAddressAssociatedElasticIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrivateIpSetInput)(nil)).Elem(), EniPrivateIpSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrivateIpSetArrayInput)(nil)).Elem(), EniPrivateIpSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrivateIpSetAssociatedElasticIpInput)(nil)).Elem(), EniPrivateIpSetAssociatedElasticIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniPrivateIpSetAssociatedElasticIpPtrInput)(nil)).Elem(), EniPrivateIpSetAssociatedElasticIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniTagInput)(nil)).Elem(), EniTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniTagArrayInput)(nil)).Elem(), EniTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclDefaultEgressAclEntryInput)(nil)).Elem(), NetworkAclDefaultEgressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclDefaultEgressAclEntryArrayInput)(nil)).Elem(), NetworkAclDefaultEgressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclDefaultIngressAclEntryInput)(nil)).Elem(), NetworkAclDefaultIngressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclDefaultIngressAclEntryArrayInput)(nil)).Elem(), NetworkAclDefaultIngressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclEgressAclEntryInput)(nil)).Elem(), NetworkAclEgressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclEgressAclEntryArrayInput)(nil)).Elem(), NetworkAclEgressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclIngressAclEntryInput)(nil)).Elem(), NetworkAclIngressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclIngressAclEntryArrayInput)(nil)).Elem(), NetworkAclIngressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclResourceInput)(nil)).Elem(), NetworkAclResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclResourceArrayInput)(nil)).Elem(), NetworkAclResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclTagInput)(nil)).Elem(), NetworkAclTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclTagArrayInput)(nil)).Elem(), NetworkAclTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListAssociationsRouteTableInput)(nil)).Elem(), PrefixListAssociationsRouteTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListAssociationsRouteTableArrayInput)(nil)).Elem(), PrefixListAssociationsRouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListAssociationsSecurityGroupInput)(nil)).Elem(), PrefixListAssociationsSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListAssociationsSecurityGroupArrayInput)(nil)).Elem(), PrefixListAssociationsSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListPrefixListEntryInput)(nil)).Elem(), PrefixListPrefixListEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListPrefixListEntryArrayInput)(nil)).Elem(), PrefixListPrefixListEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListTagInput)(nil)).Elem(), PrefixListTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListTagArrayInput)(nil)).Elem(), PrefixListTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableCustomRouteEntryInput)(nil)).Elem(), RouteTableCustomRouteEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableCustomRouteEntryArrayInput)(nil)).Elem(), RouteTableCustomRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableSystemRouteEntryInput)(nil)).Elem(), RouteTableSystemRouteEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableSystemRouteEntryArrayInput)(nil)).Elem(), RouteTableSystemRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableTagInput)(nil)).Elem(), RouteTableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableTagArrayInput)(nil)).Elem(), RouteTableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupEgressPermissionInput)(nil)).Elem(), SecurityGroupEgressPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupEgressPermissionArrayInput)(nil)).Elem(), SecurityGroupEgressPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressPermissionInput)(nil)).Elem(), SecurityGroupIngressPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupIngressPermissionArrayInput)(nil)).Elem(), SecurityGroupIngressPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupTagInput)(nil)).Elem(), SecurityGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecurityGroupTagArrayInput)(nil)).Elem(), SecurityGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetRouteTableInput)(nil)).Elem(), SubnetRouteTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetRouteTablePtrInput)(nil)).Elem(), SubnetRouteTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetTagInput)(nil)).Elem(), SubnetTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetTagArrayInput)(nil)).Elem(), SubnetTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAssociateCenInput)(nil)).Elem(), VpcAssociateCenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcAssociateCenArrayInput)(nil)).Elem(), VpcAssociateCenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcTagInput)(nil)).Elem(), VpcTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcTagArrayInput)(nil)).Elem(), VpcTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPackageEipAddressInput)(nil)).Elem(), GetBandwidthPackageEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPackageEipAddressArrayInput)(nil)).Elem(), GetBandwidthPackageEipAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPackageTagInput)(nil)).Elem(), GetBandwidthPackageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBandwidthPackageTagArrayInput)(nil)).Elem(), GetBandwidthPackageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipTagInput)(nil)).Elem(), GetEipTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEipTagArrayInput)(nil)).Elem(), GetEipTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniPrimaryIpAddressInput)(nil)).Elem(), GetEniPrimaryIpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniPrimaryIpAddressAssociatedElasticIpInput)(nil)).Elem(), GetEniPrimaryIpAddressAssociatedElasticIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniPrivateIpSetInput)(nil)).Elem(), GetEniPrivateIpSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniPrivateIpSetArrayInput)(nil)).Elem(), GetEniPrivateIpSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniPrivateIpSetAssociatedElasticIpInput)(nil)).Elem(), GetEniPrivateIpSetAssociatedElasticIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniTagInput)(nil)).Elem(), GetEniTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEniTagArrayInput)(nil)).Elem(), GetEniTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclDefaultEgressAclEntryInput)(nil)).Elem(), GetNetworkAclDefaultEgressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclDefaultEgressAclEntryArrayInput)(nil)).Elem(), GetNetworkAclDefaultEgressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclDefaultIngressAclEntryInput)(nil)).Elem(), GetNetworkAclDefaultIngressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclDefaultIngressAclEntryArrayInput)(nil)).Elem(), GetNetworkAclDefaultIngressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclEgressAclEntryInput)(nil)).Elem(), GetNetworkAclEgressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclEgressAclEntryArrayInput)(nil)).Elem(), GetNetworkAclEgressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclIngressAclEntryInput)(nil)).Elem(), GetNetworkAclIngressAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclIngressAclEntryArrayInput)(nil)).Elem(), GetNetworkAclIngressAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclResourceInput)(nil)).Elem(), GetNetworkAclResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclResourceArrayInput)(nil)).Elem(), GetNetworkAclResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclTagInput)(nil)).Elem(), GetNetworkAclTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNetworkAclTagArrayInput)(nil)).Elem(), GetNetworkAclTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListAssociationsRouteTableInput)(nil)).Elem(), GetPrefixListAssociationsRouteTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListAssociationsRouteTableArrayInput)(nil)).Elem(), GetPrefixListAssociationsRouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListAssociationsSecurityGroupInput)(nil)).Elem(), GetPrefixListAssociationsSecurityGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListAssociationsSecurityGroupArrayInput)(nil)).Elem(), GetPrefixListAssociationsSecurityGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListPrefixListEntryInput)(nil)).Elem(), GetPrefixListPrefixListEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListPrefixListEntryArrayInput)(nil)).Elem(), GetPrefixListPrefixListEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListTagInput)(nil)).Elem(), GetPrefixListTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListTagArrayInput)(nil)).Elem(), GetPrefixListTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableCustomRouteEntryInput)(nil)).Elem(), GetRouteTableCustomRouteEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableCustomRouteEntryArrayInput)(nil)).Elem(), GetRouteTableCustomRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableSystemRouteEntryInput)(nil)).Elem(), GetRouteTableSystemRouteEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableSystemRouteEntryArrayInput)(nil)).Elem(), GetRouteTableSystemRouteEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableTagInput)(nil)).Elem(), GetRouteTableTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteTableTagArrayInput)(nil)).Elem(), GetRouteTableTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupEgressPermissionInput)(nil)).Elem(), GetSecurityGroupEgressPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupEgressPermissionArrayInput)(nil)).Elem(), GetSecurityGroupEgressPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupIngressPermissionInput)(nil)).Elem(), GetSecurityGroupIngressPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupIngressPermissionArrayInput)(nil)).Elem(), GetSecurityGroupIngressPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupTagInput)(nil)).Elem(), GetSecurityGroupTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecurityGroupTagArrayInput)(nil)).Elem(), GetSecurityGroupTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubnetRouteTableInput)(nil)).Elem(), GetSubnetRouteTableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubnetTagInput)(nil)).Elem(), GetSubnetTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSubnetTagArrayInput)(nil)).Elem(), GetSubnetTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcAssociateCenInput)(nil)).Elem(), GetVpcAssociateCenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcAssociateCenArrayInput)(nil)).Elem(), GetVpcAssociateCenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcTagInput)(nil)).Elem(), GetVpcTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcTagArrayInput)(nil)).Elem(), GetVpcTagArray{})
	pulumi.RegisterOutputType(BandwidthPackageEipAddressOutput{})
	pulumi.RegisterOutputType(BandwidthPackageEipAddressArrayOutput{})
	pulumi.RegisterOutputType(BandwidthPackageTagOutput{})
	pulumi.RegisterOutputType(BandwidthPackageTagArrayOutput{})
	pulumi.RegisterOutputType(EipTagOutput{})
	pulumi.RegisterOutputType(EipTagArrayOutput{})
	pulumi.RegisterOutputType(EniPrimaryIpAddressOutput{})
	pulumi.RegisterOutputType(EniPrimaryIpAddressPtrOutput{})
	pulumi.RegisterOutputType(EniPrimaryIpAddressAssociatedElasticIpOutput{})
	pulumi.RegisterOutputType(EniPrimaryIpAddressAssociatedElasticIpPtrOutput{})
	pulumi.RegisterOutputType(EniPrivateIpSetOutput{})
	pulumi.RegisterOutputType(EniPrivateIpSetArrayOutput{})
	pulumi.RegisterOutputType(EniPrivateIpSetAssociatedElasticIpOutput{})
	pulumi.RegisterOutputType(EniPrivateIpSetAssociatedElasticIpPtrOutput{})
	pulumi.RegisterOutputType(EniTagOutput{})
	pulumi.RegisterOutputType(EniTagArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclDefaultEgressAclEntryOutput{})
	pulumi.RegisterOutputType(NetworkAclDefaultEgressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclDefaultIngressAclEntryOutput{})
	pulumi.RegisterOutputType(NetworkAclDefaultIngressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclEgressAclEntryOutput{})
	pulumi.RegisterOutputType(NetworkAclEgressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclIngressAclEntryOutput{})
	pulumi.RegisterOutputType(NetworkAclIngressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclResourceOutput{})
	pulumi.RegisterOutputType(NetworkAclResourceArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclTagOutput{})
	pulumi.RegisterOutputType(NetworkAclTagArrayOutput{})
	pulumi.RegisterOutputType(PrefixListAssociationsRouteTableOutput{})
	pulumi.RegisterOutputType(PrefixListAssociationsRouteTableArrayOutput{})
	pulumi.RegisterOutputType(PrefixListAssociationsSecurityGroupOutput{})
	pulumi.RegisterOutputType(PrefixListAssociationsSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(PrefixListPrefixListEntryOutput{})
	pulumi.RegisterOutputType(PrefixListPrefixListEntryArrayOutput{})
	pulumi.RegisterOutputType(PrefixListTagOutput{})
	pulumi.RegisterOutputType(PrefixListTagArrayOutput{})
	pulumi.RegisterOutputType(RouteTableCustomRouteEntryOutput{})
	pulumi.RegisterOutputType(RouteTableCustomRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(RouteTableSystemRouteEntryOutput{})
	pulumi.RegisterOutputType(RouteTableSystemRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(RouteTableTagOutput{})
	pulumi.RegisterOutputType(RouteTableTagArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupEgressPermissionOutput{})
	pulumi.RegisterOutputType(SecurityGroupEgressPermissionArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressPermissionOutput{})
	pulumi.RegisterOutputType(SecurityGroupIngressPermissionArrayOutput{})
	pulumi.RegisterOutputType(SecurityGroupTagOutput{})
	pulumi.RegisterOutputType(SecurityGroupTagArrayOutput{})
	pulumi.RegisterOutputType(SubnetRouteTableOutput{})
	pulumi.RegisterOutputType(SubnetRouteTablePtrOutput{})
	pulumi.RegisterOutputType(SubnetTagOutput{})
	pulumi.RegisterOutputType(SubnetTagArrayOutput{})
	pulumi.RegisterOutputType(VpcAssociateCenOutput{})
	pulumi.RegisterOutputType(VpcAssociateCenArrayOutput{})
	pulumi.RegisterOutputType(VpcTagOutput{})
	pulumi.RegisterOutputType(VpcTagArrayOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackageEipAddressOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackageEipAddressArrayOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackageTagOutput{})
	pulumi.RegisterOutputType(GetBandwidthPackageTagArrayOutput{})
	pulumi.RegisterOutputType(GetEipTagOutput{})
	pulumi.RegisterOutputType(GetEipTagArrayOutput{})
	pulumi.RegisterOutputType(GetEniPrimaryIpAddressOutput{})
	pulumi.RegisterOutputType(GetEniPrimaryIpAddressAssociatedElasticIpOutput{})
	pulumi.RegisterOutputType(GetEniPrivateIpSetOutput{})
	pulumi.RegisterOutputType(GetEniPrivateIpSetArrayOutput{})
	pulumi.RegisterOutputType(GetEniPrivateIpSetAssociatedElasticIpOutput{})
	pulumi.RegisterOutputType(GetEniTagOutput{})
	pulumi.RegisterOutputType(GetEniTagArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAclDefaultEgressAclEntryOutput{})
	pulumi.RegisterOutputType(GetNetworkAclDefaultEgressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAclDefaultIngressAclEntryOutput{})
	pulumi.RegisterOutputType(GetNetworkAclDefaultIngressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAclEgressAclEntryOutput{})
	pulumi.RegisterOutputType(GetNetworkAclEgressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAclIngressAclEntryOutput{})
	pulumi.RegisterOutputType(GetNetworkAclIngressAclEntryArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAclResourceOutput{})
	pulumi.RegisterOutputType(GetNetworkAclResourceArrayOutput{})
	pulumi.RegisterOutputType(GetNetworkAclTagOutput{})
	pulumi.RegisterOutputType(GetNetworkAclTagArrayOutput{})
	pulumi.RegisterOutputType(GetPrefixListAssociationsRouteTableOutput{})
	pulumi.RegisterOutputType(GetPrefixListAssociationsRouteTableArrayOutput{})
	pulumi.RegisterOutputType(GetPrefixListAssociationsSecurityGroupOutput{})
	pulumi.RegisterOutputType(GetPrefixListAssociationsSecurityGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPrefixListPrefixListEntryOutput{})
	pulumi.RegisterOutputType(GetPrefixListPrefixListEntryArrayOutput{})
	pulumi.RegisterOutputType(GetPrefixListTagOutput{})
	pulumi.RegisterOutputType(GetPrefixListTagArrayOutput{})
	pulumi.RegisterOutputType(GetRouteTableCustomRouteEntryOutput{})
	pulumi.RegisterOutputType(GetRouteTableCustomRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteTableSystemRouteEntryOutput{})
	pulumi.RegisterOutputType(GetRouteTableSystemRouteEntryArrayOutput{})
	pulumi.RegisterOutputType(GetRouteTableTagOutput{})
	pulumi.RegisterOutputType(GetRouteTableTagArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupEgressPermissionOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupEgressPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupIngressPermissionOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupIngressPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupTagOutput{})
	pulumi.RegisterOutputType(GetSecurityGroupTagArrayOutput{})
	pulumi.RegisterOutputType(GetSubnetRouteTableOutput{})
	pulumi.RegisterOutputType(GetSubnetTagOutput{})
	pulumi.RegisterOutputType(GetSubnetTagArrayOutput{})
	pulumi.RegisterOutputType(GetVpcAssociateCenOutput{})
	pulumi.RegisterOutputType(GetVpcAssociateCenArrayOutput{})
	pulumi.RegisterOutputType(GetVpcTagOutput{})
	pulumi.RegisterOutputType(GetVpcTagArrayOutput{})
}
