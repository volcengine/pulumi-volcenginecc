// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::VPC::VPC
func LookupVpc(ctx *pulumi.Context, args *LookupVpcArgs, opts ...pulumi.InvokeOption) (*LookupVpcResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVpcResult
	err := ctx.Invoke("volcenginecc:vpc/getVpc:getVpc", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpc.
type LookupVpcArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getVpc.
type LookupVpcResult struct {
	// VPC所属账号的ID。
	AccountId string `pulumi:"accountId"`
	// VPC关联的CEN信息。
	AssociateCens []GetVpcAssociateCen `pulumi:"associateCens"`
	// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
	CidrBlock string `pulumi:"cidrBlock"`
	// 创建VPC的时间。
	CreationTime string `pulumi:"creationTime"`
	// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
	Description string `pulumi:"description"`
	// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
	DnsServers []string `pulumi:"dnsServers"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// VPC 绑定的 IPv4 网关的 ID。
	Ipv4GatewayId string `pulumi:"ipv4GatewayId"`
	// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
	Ipv6CidrBlock string `pulumi:"ipv6CidrBlock"`
	// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
	IsDefault bool `pulumi:"isDefault"`
	// VPC中创建的NAT网关的ID。
	NatGatewayIds []string `pulumi:"natGatewayIds"`
	// VPC中的网络ACL的数量。
	NetworkAclNum string `pulumi:"networkAclNum"`
	// VPC所属项目的名称。不填默认加入default项目。
	ProjectName string `pulumi:"projectName"`
	// VPC关联的路由表ID。
	RouteTableIds []string `pulumi:"routeTableIds"`
	// VPC的辅助网段。
	SecondaryCidrBlocks []string `pulumi:"secondaryCidrBlocks"`
	// VPC中安全组的列表。
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
	Status string `pulumi:"status"`
	// VPC中子网的列表。
	SubnetIds []string `pulumi:"subnetIds"`
	// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
	SupportIpv4Gateway bool `pulumi:"supportIpv4Gateway"`
	// 私有网络绑定的标签。
	Tags []GetVpcTag `pulumi:"tags"`
	// 更新VPC的时间。
	UpdateTime string `pulumi:"updateTime"`
	// VPC的用户网段。
	UserCidrBlocks []string `pulumi:"userCidrBlocks"`
	// VPC的ID。
	VpcId string `pulumi:"vpcId"`
	// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
	VpcName string `pulumi:"vpcName"`
}

func LookupVpcOutput(ctx *pulumi.Context, args LookupVpcOutputArgs, opts ...pulumi.InvokeOption) LookupVpcResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupVpcResultOutput, error) {
			args := v.(LookupVpcArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:vpc/getVpc:getVpc", args, LookupVpcResultOutput{}, options).(LookupVpcResultOutput), nil
		}).(LookupVpcResultOutput)
}

// A collection of arguments for invoking getVpc.
type LookupVpcOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupVpcOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcArgs)(nil)).Elem()
}

// A collection of values returned by getVpc.
type LookupVpcResultOutput struct{ *pulumi.OutputState }

func (LookupVpcResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVpcResult)(nil)).Elem()
}

func (o LookupVpcResultOutput) ToLookupVpcResultOutput() LookupVpcResultOutput {
	return o
}

func (o LookupVpcResultOutput) ToLookupVpcResultOutputWithContext(ctx context.Context) LookupVpcResultOutput {
	return o
}

// VPC所属账号的ID。
func (o LookupVpcResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// VPC关联的CEN信息。
func (o LookupVpcResultOutput) AssociateCens() GetVpcAssociateCenArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []GetVpcAssociateCen { return v.AssociateCens }).(GetVpcAssociateCenArrayOutput)
}

// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
func (o LookupVpcResultOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.CidrBlock }).(pulumi.StringOutput)
}

// 创建VPC的时间。
func (o LookupVpcResultOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.CreationTime }).(pulumi.StringOutput)
}

// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
func (o LookupVpcResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Description }).(pulumi.StringOutput)
}

// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
func (o LookupVpcResultOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Uniquely identifies the resource.
func (o LookupVpcResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Id }).(pulumi.StringOutput)
}

// VPC 绑定的 IPv4 网关的 ID。
func (o LookupVpcResultOutput) Ipv4GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Ipv4GatewayId }).(pulumi.StringOutput)
}

// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
func (o LookupVpcResultOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
func (o LookupVpcResultOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVpcResult) bool { return v.IsDefault }).(pulumi.BoolOutput)
}

// VPC中创建的NAT网关的ID。
func (o LookupVpcResultOutput) NatGatewayIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.NatGatewayIds }).(pulumi.StringArrayOutput)
}

// VPC中的网络ACL的数量。
func (o LookupVpcResultOutput) NetworkAclNum() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.NetworkAclNum }).(pulumi.StringOutput)
}

// VPC所属项目的名称。不填默认加入default项目。
func (o LookupVpcResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// VPC关联的路由表ID。
func (o LookupVpcResultOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

// VPC的辅助网段。
func (o LookupVpcResultOutput) SecondaryCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.SecondaryCidrBlocks }).(pulumi.StringArrayOutput)
}

// VPC中安全组的列表。
func (o LookupVpcResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
func (o LookupVpcResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.Status }).(pulumi.StringOutput)
}

// VPC中子网的列表。
func (o LookupVpcResultOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
func (o LookupVpcResultOutput) SupportIpv4Gateway() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVpcResult) bool { return v.SupportIpv4Gateway }).(pulumi.BoolOutput)
}

// 私有网络绑定的标签。
func (o LookupVpcResultOutput) Tags() GetVpcTagArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []GetVpcTag { return v.Tags }).(GetVpcTagArrayOutput)
}

// 更新VPC的时间。
func (o LookupVpcResultOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// VPC的用户网段。
func (o LookupVpcResultOutput) UserCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupVpcResult) []string { return v.UserCidrBlocks }).(pulumi.StringArrayOutput)
}

// VPC的ID。
func (o LookupVpcResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.VpcId }).(pulumi.StringOutput)
}

// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
func (o LookupVpcResultOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVpcResult) string { return v.VpcName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVpcResultOutput{})
}
