// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 子网是在指定可用区内分配的一段VPC网段内的网段，它为云上资源（如云服务器、负载均衡等）提供私网IP地址。
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewSubnet(ctx, "SubnetDemo", &vpc.SubnetArgs{
//				VpcId:       pulumi.String("vpc-xxxx"),
//				ZoneId:      pulumi.String("cn-beijing"),
//				SubnetName:  pulumi.String("subnetDemo"),
//				Description: pulumi.String("subnetDemo description"),
//				CidrBlock:   pulumi.String("192.168.xx.0/24"),
//				Tags: vpc.SubnetTagArray{
//					&vpc.SubnetTagArgs{
//						Key:   pulumi.String("env"),
//						Value: pulumi.String("test"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/subnet:Subnet example "subnet_id"
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// 子网所属账户的ID。
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// 子网中可用的IP地址数量。
	AvailableIpAddressCount pulumi.IntOutput `pulumi:"availableIpAddressCount"`
	// 子网的IPv4网段。
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// 子网的创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
	Description pulumi.StringOutput `pulumi:"description"`
	// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
	EnableIpv6 pulumi.BoolOutput `pulumi:"enableIpv6"`
	// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
	Ipv6CidrBlock pulumi.StringOutput `pulumi:"ipv6CidrBlock"`
	// 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// 子网关联的网络ACL的ID。
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`
	// 子网所在VPC实例所属项目的名称。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 路由表信息。
	RouteTable SubnetRouteTableOutput `pulumi:"routeTable"`
	// 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
	Status pulumi.StringOutput `pulumi:"status"`
	// 待修改信息的子网的ID。
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
	SubnetName pulumi.StringOutput  `pulumi:"subnetName"`
	Tags       SubnetTagArrayOutput `pulumi:"tags"`
	// 子网下可用IP总数。
	TotalIpv4Count pulumi.IntOutput `pulumi:"totalIpv4Count"`
	// 子网的更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 子网所属VPC的ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("volcenginecc:vpc/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("volcenginecc:vpc/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// 子网所属账户的ID。
	AccountId *string `pulumi:"accountId"`
	// 子网中可用的IP地址数量。
	AvailableIpAddressCount *int `pulumi:"availableIpAddressCount"`
	// 子网的IPv4网段。
	CidrBlock *string `pulumi:"cidrBlock"`
	// 子网的创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
	Description *string `pulumi:"description"`
	// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
	IsDefault *bool `pulumi:"isDefault"`
	// 子网关联的网络ACL的ID。
	NetworkAclId *string `pulumi:"networkAclId"`
	// 子网所在VPC实例所属项目的名称。
	ProjectName *string `pulumi:"projectName"`
	// 路由表信息。
	RouteTable *SubnetRouteTable `pulumi:"routeTable"`
	// 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
	Status *string `pulumi:"status"`
	// 待修改信息的子网的ID。
	SubnetId *string `pulumi:"subnetId"`
	// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
	SubnetName *string     `pulumi:"subnetName"`
	Tags       []SubnetTag `pulumi:"tags"`
	// 子网下可用IP总数。
	TotalIpv4Count *int `pulumi:"totalIpv4Count"`
	// 子网的更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 子网所属VPC的ID。
	VpcId *string `pulumi:"vpcId"`
	// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
	ZoneId *string `pulumi:"zoneId"`
}

type SubnetState struct {
	// 子网所属账户的ID。
	AccountId pulumi.StringPtrInput
	// 子网中可用的IP地址数量。
	AvailableIpAddressCount pulumi.IntPtrInput
	// 子网的IPv4网段。
	CidrBlock pulumi.StringPtrInput
	// 子网的创建时间。
	CreatedTime pulumi.StringPtrInput
	// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
	Description pulumi.StringPtrInput
	// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
	EnableIpv6 pulumi.BoolPtrInput
	// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
	Ipv6CidrBlock pulumi.StringPtrInput
	// 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
	IsDefault pulumi.BoolPtrInput
	// 子网关联的网络ACL的ID。
	NetworkAclId pulumi.StringPtrInput
	// 子网所在VPC实例所属项目的名称。
	ProjectName pulumi.StringPtrInput
	// 路由表信息。
	RouteTable SubnetRouteTablePtrInput
	// 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
	Status pulumi.StringPtrInput
	// 待修改信息的子网的ID。
	SubnetId pulumi.StringPtrInput
	// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
	SubnetName pulumi.StringPtrInput
	Tags       SubnetTagArrayInput
	// 子网下可用IP总数。
	TotalIpv4Count pulumi.IntPtrInput
	// 子网的更新时间。
	UpdatedTime pulumi.StringPtrInput
	// 子网所属VPC的ID。
	VpcId pulumi.StringPtrInput
	// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
	ZoneId pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// 子网的IPv4网段。
	CidrBlock string `pulumi:"cidrBlock"`
	// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
	Description *string `pulumi:"description"`
	// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
	SubnetName *string     `pulumi:"subnetName"`
	Tags       []SubnetTag `pulumi:"tags"`
	// 子网所属VPC的ID。
	VpcId string `pulumi:"vpcId"`
	// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// 子网的IPv4网段。
	CidrBlock pulumi.StringInput
	// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
	Description pulumi.StringPtrInput
	// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
	EnableIpv6 pulumi.BoolPtrInput
	// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
	Ipv6CidrBlock pulumi.StringPtrInput
	// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
	SubnetName pulumi.StringPtrInput
	Tags       SubnetTagArrayInput
	// 子网所属VPC的ID。
	VpcId pulumi.StringInput
	// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
	ZoneId pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// 子网所属账户的ID。
func (o SubnetOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// 子网中可用的IP地址数量。
func (o SubnetOutput) AvailableIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.AvailableIpAddressCount }).(pulumi.IntOutput)
}

// 子网的IPv4网段。
func (o SubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// 子网的创建时间。
func (o SubnetOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
func (o SubnetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
func (o SubnetOutput) EnableIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.EnableIpv6 }).(pulumi.BoolOutput)
}

// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
func (o SubnetOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
func (o SubnetOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// 子网关联的网络ACL的ID。
func (o SubnetOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

// 子网所在VPC实例所属项目的名称。
func (o SubnetOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 路由表信息。
func (o SubnetOutput) RouteTable() SubnetRouteTableOutput {
	return o.ApplyT(func(v *Subnet) SubnetRouteTableOutput { return v.RouteTable }).(SubnetRouteTableOutput)
}

// 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
func (o SubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 待修改信息的子网的ID。
func (o SubnetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
func (o SubnetOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetName }).(pulumi.StringOutput)
}

func (o SubnetOutput) Tags() SubnetTagArrayOutput {
	return o.ApplyT(func(v *Subnet) SubnetTagArrayOutput { return v.Tags }).(SubnetTagArrayOutput)
}

// 子网下可用IP总数。
func (o SubnetOutput) TotalIpv4Count() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.TotalIpv4Count }).(pulumi.IntOutput)
}

// 子网的更新时间。
func (o SubnetOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 子网所属VPC的ID。
func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
func (o SubnetOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
