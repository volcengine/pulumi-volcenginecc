// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::VPC::ENI
func LookupEni(ctx *pulumi.Context, args *LookupEniArgs, opts ...pulumi.InvokeOption) (*LookupEniResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEniResult
	err := ctx.Invoke("volcenginecc:vpc/getEni:getEni", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEni.
type LookupEniArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getEni.
type LookupEniResult struct {
	// 网卡所有者ID。
	AccountId string `pulumi:"accountId"`
	// 网卡创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 是否开启随云服务器实例删除，true为开启，false为不开启。
	DeleteOnTermination bool `pulumi:"deleteOnTermination"`
	// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
	Description string `pulumi:"description"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
	InstanceId string `pulumi:"instanceId"`
	// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
	Ipv6AddressCount int `pulumi:"ipv6AddressCount"`
	// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
	Ipv6Sets []string `pulumi:"ipv6Sets"`
	// 网卡的MAC地址。
	MacAddress string `pulumi:"macAddress"`
	// 网卡ID。
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
	NetworkInterfaceName string `pulumi:"networkInterfaceName"`
	// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
	PortSecurityEnabled bool `pulumi:"portSecurityEnabled"`
	// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
	PrimaryIpAddress GetEniPrimaryIpAddress `pulumi:"primaryIpAddress"`
	// 网卡的私网IPv4地址列表。
	PrivateIpSets []GetEniPrivateIpSet `pulumi:"privateIpSets"`
	// 网卡所属项目的名称。
	ProjectName string `pulumi:"projectName"`
	// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
	SecondaryPrivateIpAddressCount int `pulumi:"secondaryPrivateIpAddressCount"`
	// 辅助网卡加入一个或多个安全组的ID。
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// 是否为火山引擎官方服务网卡，true为是，false为否。
	ServiceManaged bool `pulumi:"serviceManaged"`
	// 网卡的绑定状态。
	Status string `pulumi:"status"`
	// 辅助网卡所在子网的ID。
	SubnetId string      `pulumi:"subnetId"`
	Tags     []GetEniTag `pulumi:"tags"`
	// 网卡类型。primary：主网卡，secondary：辅助网卡
	Type string `pulumi:"type"`
	// 更新网卡的时间。
	UpdatedTime string `pulumi:"updatedTime"`
	// 网卡所属的VPC的ID。
	VpcId string `pulumi:"vpcId"`
	// 网卡所属VPC的名称。
	VpcName string `pulumi:"vpcName"`
	// 网卡所属可用区的ID。
	ZoneId string `pulumi:"zoneId"`
}

func LookupEniOutput(ctx *pulumi.Context, args LookupEniOutputArgs, opts ...pulumi.InvokeOption) LookupEniResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEniResultOutput, error) {
			args := v.(LookupEniArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:vpc/getEni:getEni", args, LookupEniResultOutput{}, options).(LookupEniResultOutput), nil
		}).(LookupEniResultOutput)
}

// A collection of arguments for invoking getEni.
type LookupEniOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEniOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEniArgs)(nil)).Elem()
}

// A collection of values returned by getEni.
type LookupEniResultOutput struct{ *pulumi.OutputState }

func (LookupEniResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEniResult)(nil)).Elem()
}

func (o LookupEniResultOutput) ToLookupEniResultOutput() LookupEniResultOutput {
	return o
}

func (o LookupEniResultOutput) ToLookupEniResultOutputWithContext(ctx context.Context) LookupEniResultOutput {
	return o
}

// 网卡所有者ID。
func (o LookupEniResultOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.AccountId }).(pulumi.StringOutput)
}

// 网卡创建时间。
func (o LookupEniResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 是否开启随云服务器实例删除，true为开启，false为不开启。
func (o LookupEniResultOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEniResult) bool { return v.DeleteOnTermination }).(pulumi.BoolOutput)
}

// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
func (o LookupEniResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.Description }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupEniResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.Id }).(pulumi.StringOutput)
}

// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
func (o LookupEniResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
func (o LookupEniResultOutput) Ipv6AddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEniResult) int { return v.Ipv6AddressCount }).(pulumi.IntOutput)
}

// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
func (o LookupEniResultOutput) Ipv6Sets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEniResult) []string { return v.Ipv6Sets }).(pulumi.StringArrayOutput)
}

// 网卡的MAC地址。
func (o LookupEniResultOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.MacAddress }).(pulumi.StringOutput)
}

// 网卡ID。
func (o LookupEniResultOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
func (o LookupEniResultOutput) NetworkInterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.NetworkInterfaceName }).(pulumi.StringOutput)
}

// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
func (o LookupEniResultOutput) PortSecurityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEniResult) bool { return v.PortSecurityEnabled }).(pulumi.BoolOutput)
}

// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
func (o LookupEniResultOutput) PrimaryIpAddress() GetEniPrimaryIpAddressOutput {
	return o.ApplyT(func(v LookupEniResult) GetEniPrimaryIpAddress { return v.PrimaryIpAddress }).(GetEniPrimaryIpAddressOutput)
}

// 网卡的私网IPv4地址列表。
func (o LookupEniResultOutput) PrivateIpSets() GetEniPrivateIpSetArrayOutput {
	return o.ApplyT(func(v LookupEniResult) []GetEniPrivateIpSet { return v.PrivateIpSets }).(GetEniPrivateIpSetArrayOutput)
}

// 网卡所属项目的名称。
func (o LookupEniResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
func (o LookupEniResultOutput) SecondaryPrivateIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEniResult) int { return v.SecondaryPrivateIpAddressCount }).(pulumi.IntOutput)
}

// 辅助网卡加入一个或多个安全组的ID。
func (o LookupEniResultOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEniResult) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// 是否为火山引擎官方服务网卡，true为是，false为否。
func (o LookupEniResultOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEniResult) bool { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 网卡的绑定状态。
func (o LookupEniResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.Status }).(pulumi.StringOutput)
}

// 辅助网卡所在子网的ID。
func (o LookupEniResultOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.SubnetId }).(pulumi.StringOutput)
}

func (o LookupEniResultOutput) Tags() GetEniTagArrayOutput {
	return o.ApplyT(func(v LookupEniResult) []GetEniTag { return v.Tags }).(GetEniTagArrayOutput)
}

// 网卡类型。primary：主网卡，secondary：辅助网卡
func (o LookupEniResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.Type }).(pulumi.StringOutput)
}

// 更新网卡的时间。
func (o LookupEniResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 网卡所属的VPC的ID。
func (o LookupEniResultOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.VpcId }).(pulumi.StringOutput)
}

// 网卡所属VPC的名称。
func (o LookupEniResultOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.VpcName }).(pulumi.StringOutput)
}

// 网卡所属可用区的ID。
func (o LookupEniResultOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEniResult) string { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEniResultOutput{})
}
