// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 网络ACL用于控制子网的出入流量，其基于白名单原理设计，出入子网的流量必须被网络ACL规则允许才能放通。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/networkAcl:NetworkAcl example "network_acl_id"
// ```
type NetworkAcl struct {
	pulumi.CustomResourceState

	// 网络ACL的创建时间。
	CreatedTime              pulumi.StringOutput                         `pulumi:"createdTime"`
	DefaultEgressAclEntries  NetworkAclDefaultEgressAclEntryArrayOutput  `pulumi:"defaultEgressAclEntries"`
	DefaultIngressAclEntries NetworkAclDefaultIngressAclEntryArrayOutput `pulumi:"defaultIngressAclEntries"`
	// 网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description       pulumi.StringOutput                  `pulumi:"description"`
	EgressAclEntries  NetworkAclEgressAclEntryArrayOutput  `pulumi:"egressAclEntries"`
	IngressAclEntries NetworkAclIngressAclEntryArrayOutput `pulumi:"ingressAclEntries"`
	// 网络ACL的ID。
	NetworkAclId pulumi.StringOutput `pulumi:"networkAclId"`
	// 网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
	NetworkAclName pulumi.StringOutput `pulumi:"networkAclName"`
	// 网络ACL所属项目的名称。不填默认加入default项目。
	ProjectName pulumi.StringOutput           `pulumi:"projectName"`
	Resources   NetworkAclResourceArrayOutput `pulumi:"resources"`
	// 网络ACL的状态。Available：可用，Creating：创建中
	Status pulumi.StringOutput      `pulumi:"status"`
	Tags   NetworkAclTagArrayOutput `pulumi:"tags"`
	// 网络ACL的更新时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 网络ACL所属VPC的ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewNetworkAcl registers a new resource with the given unique name, arguments, and options.
func NewNetworkAcl(ctx *pulumi.Context,
	name string, args *NetworkAclArgs, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NetworkAcl
	err := ctx.RegisterResource("volcenginecc:vpc/networkAcl:NetworkAcl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkAcl gets an existing NetworkAcl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkAclState, opts ...pulumi.ResourceOption) (*NetworkAcl, error) {
	var resource NetworkAcl
	err := ctx.ReadResource("volcenginecc:vpc/networkAcl:NetworkAcl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkAcl resources.
type networkAclState struct {
	// 网络ACL的创建时间。
	CreatedTime              *string                            `pulumi:"createdTime"`
	DefaultEgressAclEntries  []NetworkAclDefaultEgressAclEntry  `pulumi:"defaultEgressAclEntries"`
	DefaultIngressAclEntries []NetworkAclDefaultIngressAclEntry `pulumi:"defaultIngressAclEntries"`
	// 网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description       *string                     `pulumi:"description"`
	EgressAclEntries  []NetworkAclEgressAclEntry  `pulumi:"egressAclEntries"`
	IngressAclEntries []NetworkAclIngressAclEntry `pulumi:"ingressAclEntries"`
	// 网络ACL的ID。
	NetworkAclId *string `pulumi:"networkAclId"`
	// 网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
	NetworkAclName *string `pulumi:"networkAclName"`
	// 网络ACL所属项目的名称。不填默认加入default项目。
	ProjectName *string              `pulumi:"projectName"`
	Resources   []NetworkAclResource `pulumi:"resources"`
	// 网络ACL的状态。Available：可用，Creating：创建中
	Status *string         `pulumi:"status"`
	Tags   []NetworkAclTag `pulumi:"tags"`
	// 网络ACL的更新时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 网络ACL所属VPC的ID。
	VpcId *string `pulumi:"vpcId"`
}

type NetworkAclState struct {
	// 网络ACL的创建时间。
	CreatedTime              pulumi.StringPtrInput
	DefaultEgressAclEntries  NetworkAclDefaultEgressAclEntryArrayInput
	DefaultIngressAclEntries NetworkAclDefaultIngressAclEntryArrayInput
	// 网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description       pulumi.StringPtrInput
	EgressAclEntries  NetworkAclEgressAclEntryArrayInput
	IngressAclEntries NetworkAclIngressAclEntryArrayInput
	// 网络ACL的ID。
	NetworkAclId pulumi.StringPtrInput
	// 网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
	NetworkAclName pulumi.StringPtrInput
	// 网络ACL所属项目的名称。不填默认加入default项目。
	ProjectName pulumi.StringPtrInput
	Resources   NetworkAclResourceArrayInput
	// 网络ACL的状态。Available：可用，Creating：创建中
	Status pulumi.StringPtrInput
	Tags   NetworkAclTagArrayInput
	// 网络ACL的更新时间。
	UpdatedTime pulumi.StringPtrInput
	// 网络ACL所属VPC的ID。
	VpcId pulumi.StringPtrInput
}

func (NetworkAclState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclState)(nil)).Elem()
}

type networkAclArgs struct {
	// 网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description       *string                     `pulumi:"description"`
	EgressAclEntries  []NetworkAclEgressAclEntry  `pulumi:"egressAclEntries"`
	IngressAclEntries []NetworkAclIngressAclEntry `pulumi:"ingressAclEntries"`
	// 网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
	NetworkAclName *string `pulumi:"networkAclName"`
	// 网络ACL所属项目的名称。不填默认加入default项目。
	ProjectName *string              `pulumi:"projectName"`
	Resources   []NetworkAclResource `pulumi:"resources"`
	Tags        []NetworkAclTag      `pulumi:"tags"`
	// 网络ACL所属VPC的ID。
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a NetworkAcl resource.
type NetworkAclArgs struct {
	// 网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
	Description       pulumi.StringPtrInput
	EgressAclEntries  NetworkAclEgressAclEntryArrayInput
	IngressAclEntries NetworkAclIngressAclEntryArrayInput
	// 网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
	NetworkAclName pulumi.StringPtrInput
	// 网络ACL所属项目的名称。不填默认加入default项目。
	ProjectName pulumi.StringPtrInput
	Resources   NetworkAclResourceArrayInput
	Tags        NetworkAclTagArrayInput
	// 网络ACL所属VPC的ID。
	VpcId pulumi.StringInput
}

func (NetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkAclArgs)(nil)).Elem()
}

type NetworkAclInput interface {
	pulumi.Input

	ToNetworkAclOutput() NetworkAclOutput
	ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput
}

func (*NetworkAcl) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAcl)(nil)).Elem()
}

func (i *NetworkAcl) ToNetworkAclOutput() NetworkAclOutput {
	return i.ToNetworkAclOutputWithContext(context.Background())
}

func (i *NetworkAcl) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclOutput)
}

// NetworkAclArrayInput is an input type that accepts NetworkAclArray and NetworkAclArrayOutput values.
// You can construct a concrete instance of `NetworkAclArrayInput` via:
//
//	NetworkAclArray{ NetworkAclArgs{...} }
type NetworkAclArrayInput interface {
	pulumi.Input

	ToNetworkAclArrayOutput() NetworkAclArrayOutput
	ToNetworkAclArrayOutputWithContext(context.Context) NetworkAclArrayOutput
}

type NetworkAclArray []NetworkAclInput

func (NetworkAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAcl)(nil)).Elem()
}

func (i NetworkAclArray) ToNetworkAclArrayOutput() NetworkAclArrayOutput {
	return i.ToNetworkAclArrayOutputWithContext(context.Background())
}

func (i NetworkAclArray) ToNetworkAclArrayOutputWithContext(ctx context.Context) NetworkAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclArrayOutput)
}

// NetworkAclMapInput is an input type that accepts NetworkAclMap and NetworkAclMapOutput values.
// You can construct a concrete instance of `NetworkAclMapInput` via:
//
//	NetworkAclMap{ "key": NetworkAclArgs{...} }
type NetworkAclMapInput interface {
	pulumi.Input

	ToNetworkAclMapOutput() NetworkAclMapOutput
	ToNetworkAclMapOutputWithContext(context.Context) NetworkAclMapOutput
}

type NetworkAclMap map[string]NetworkAclInput

func (NetworkAclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAcl)(nil)).Elem()
}

func (i NetworkAclMap) ToNetworkAclMapOutput() NetworkAclMapOutput {
	return i.ToNetworkAclMapOutputWithContext(context.Background())
}

func (i NetworkAclMap) ToNetworkAclMapOutputWithContext(ctx context.Context) NetworkAclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkAclMapOutput)
}

type NetworkAclOutput struct{ *pulumi.OutputState }

func (NetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkAcl)(nil)).Elem()
}

func (o NetworkAclOutput) ToNetworkAclOutput() NetworkAclOutput {
	return o
}

func (o NetworkAclOutput) ToNetworkAclOutputWithContext(ctx context.Context) NetworkAclOutput {
	return o
}

// 网络ACL的创建时间。
func (o NetworkAclOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

func (o NetworkAclOutput) DefaultEgressAclEntries() NetworkAclDefaultEgressAclEntryArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclDefaultEgressAclEntryArrayOutput { return v.DefaultEgressAclEntries }).(NetworkAclDefaultEgressAclEntryArrayOutput)
}

func (o NetworkAclOutput) DefaultIngressAclEntries() NetworkAclDefaultIngressAclEntryArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclDefaultIngressAclEntryArrayOutput { return v.DefaultIngressAclEntries }).(NetworkAclDefaultIngressAclEntryArrayOutput)
}

// 网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
func (o NetworkAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o NetworkAclOutput) EgressAclEntries() NetworkAclEgressAclEntryArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclEgressAclEntryArrayOutput { return v.EgressAclEntries }).(NetworkAclEgressAclEntryArrayOutput)
}

func (o NetworkAclOutput) IngressAclEntries() NetworkAclIngressAclEntryArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclIngressAclEntryArrayOutput { return v.IngressAclEntries }).(NetworkAclIngressAclEntryArrayOutput)
}

// 网络ACL的ID。
func (o NetworkAclOutput) NetworkAclId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.NetworkAclId }).(pulumi.StringOutput)
}

// 网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
func (o NetworkAclOutput) NetworkAclName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.NetworkAclName }).(pulumi.StringOutput)
}

// 网络ACL所属项目的名称。不填默认加入default项目。
func (o NetworkAclOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

func (o NetworkAclOutput) Resources() NetworkAclResourceArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclResourceArrayOutput { return v.Resources }).(NetworkAclResourceArrayOutput)
}

// 网络ACL的状态。Available：可用，Creating：创建中
func (o NetworkAclOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

func (o NetworkAclOutput) Tags() NetworkAclTagArrayOutput {
	return o.ApplyT(func(v *NetworkAcl) NetworkAclTagArrayOutput { return v.Tags }).(NetworkAclTagArrayOutput)
}

// 网络ACL的更新时间。
func (o NetworkAclOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 网络ACL所属VPC的ID。
func (o NetworkAclOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkAcl) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type NetworkAclArrayOutput struct{ *pulumi.OutputState }

func (NetworkAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclArrayOutput) ToNetworkAclArrayOutput() NetworkAclArrayOutput {
	return o
}

func (o NetworkAclArrayOutput) ToNetworkAclArrayOutputWithContext(ctx context.Context) NetworkAclArrayOutput {
	return o
}

func (o NetworkAclArrayOutput) Index(i pulumi.IntInput) NetworkAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkAcl {
		return vs[0].([]*NetworkAcl)[vs[1].(int)]
	}).(NetworkAclOutput)
}

type NetworkAclMapOutput struct{ *pulumi.OutputState }

func (NetworkAclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkAcl)(nil)).Elem()
}

func (o NetworkAclMapOutput) ToNetworkAclMapOutput() NetworkAclMapOutput {
	return o
}

func (o NetworkAclMapOutput) ToNetworkAclMapOutputWithContext(ctx context.Context) NetworkAclMapOutput {
	return o
}

func (o NetworkAclMapOutput) MapIndex(k pulumi.StringInput) NetworkAclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkAcl {
		return vs[0].(map[string]*NetworkAcl)[vs[1].(string)]
	}).(NetworkAclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclInput)(nil)).Elem(), &NetworkAcl{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclArrayInput)(nil)).Elem(), NetworkAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkAclMapInput)(nil)).Elem(), NetworkAclMap{})
	pulumi.RegisterOutputType(NetworkAclOutput{})
	pulumi.RegisterOutputType(NetworkAclArrayOutput{})
	pulumi.RegisterOutputType(NetworkAclMapOutput{})
}
