// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// Data Source schema for Volcengine::VPC::EIP
func LookupEip(ctx *pulumi.Context, args *LookupEipArgs, opts ...pulumi.InvokeOption) (*LookupEipResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupEipResult
	err := ctx.Invoke("volcenginecc:vpc/getEip:getEip", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEip.
type LookupEipArgs struct {
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
}

// A collection of values returned by getEip.
type LookupEipResult struct {
	// 公网IP的ID。
	AllocationId string `pulumi:"allocationId"`
	// 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
	Bandwidth int `pulumi:"bandwidth"`
	// 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
	BandwidthPackageId string `pulumi:"bandwidthPackageId"`
	// 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
	BillingType int `pulumi:"billingType"`
	// 公网IP是否被锁定。Normal: 正常。FinancialLocked: 被锁定。
	BusinessStatus string `pulumi:"businessStatus"`
	// 公网IP的创建时间。
	CreatedTime string `pulumi:"createdTime"`
	// 预期资源强制回收时间。包年包月公网IP，此参数有返回值。按量计费公网IP，仅欠费冻结时，此参数有返回值。
	DeletedTime string `pulumi:"deletedTime"`
	// 公网IP的描述信息。
	Description string `pulumi:"description"`
	// 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
	DirectMode bool `pulumi:"directMode"`
	// 公网IP地址。
	EipAddress string `pulumi:"eipAddress"`
	// 公网IP的到期时间。包年包月，返回值为到期时间。按量计费，返回值为空。
	ExpiredTime string `pulumi:"expiredTime"`
	// Uniquely identifies the resource.
	Id string `pulumi:"id"`
	// 当前绑定的实例ID。
	InstanceId string `pulumi:"instanceId"`
	// 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
	InstanceType string `pulumi:"instanceType"`
	// 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
	IpAddress string `pulumi:"ipAddress"`
	// IP地址池的ID。
	IpAddressPoolId string `pulumi:"ipAddressPoolId"`
	// 是否被封禁。true：是。false：否。
	IsBlocked bool `pulumi:"isBlocked"`
	// 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
	Isp string `pulumi:"isp"`
	// 公网IP被锁定的原因。financial: 因欠费被锁定。unlock: 欠费关停后充值恢复过程中。空值 : 没有被锁定。
	LockReason string `pulumi:"lockReason"`
	// 公网IP的名称。
	Name string `pulumi:"name"`
	// 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值。
	OverdueTime string `pulumi:"overdueTime"`
	// 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
	Period int `pulumi:"period"`
	// 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
	PeriodUnit int `pulumi:"periodUnit"`
	// 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
	PrivateIpAddress string `pulumi:"privateIpAddress"`
	// 公网IP所属项目的名称。
	ProjectName string `pulumi:"projectName"`
	// 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
	ReleaseWithInstance bool `pulumi:"releaseWithInstance"`
	// 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
	RenewPeriodTimes int `pulumi:"renewPeriodTimes"`
	// 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
	RenewType int `pulumi:"renewType"`
	// DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
	SecurityProtectionInstanceId int `pulumi:"securityProtectionInstanceId"`
	// 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
	SecurityProtectionTypes []string `pulumi:"securityProtectionTypes"`
	// 是否由服务管理
	ServiceManaged bool `pulumi:"serviceManaged"`
	// 公网IP的状态。Attaching：绑定中。Detaching：解绑中。Attached：已绑定。Available：可用。Deleting：删除中。
	Status string `pulumi:"status"`
	// 公网IP的标签信息
	Tags []GetEipTag `pulumi:"tags"`
	// 更新公网IP的时间。
	UpdatedTime string `pulumi:"updatedTime"`
}

func LookupEipOutput(ctx *pulumi.Context, args LookupEipOutputArgs, opts ...pulumi.InvokeOption) LookupEipResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupEipResultOutput, error) {
			args := v.(LookupEipArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("volcenginecc:vpc/getEip:getEip", args, LookupEipResultOutput{}, options).(LookupEipResultOutput), nil
		}).(LookupEipResultOutput)
}

// A collection of arguments for invoking getEip.
type LookupEipOutputArgs struct {
	// Uniquely identifies the resource.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupEipOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEipArgs)(nil)).Elem()
}

// A collection of values returned by getEip.
type LookupEipResultOutput struct{ *pulumi.OutputState }

func (LookupEipResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupEipResult)(nil)).Elem()
}

func (o LookupEipResultOutput) ToLookupEipResultOutput() LookupEipResultOutput {
	return o
}

func (o LookupEipResultOutput) ToLookupEipResultOutputWithContext(ctx context.Context) LookupEipResultOutput {
	return o
}

// 公网IP的ID。
func (o LookupEipResultOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.AllocationId }).(pulumi.StringOutput)
}

// 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
func (o LookupEipResultOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
func (o LookupEipResultOutput) BandwidthPackageId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.BandwidthPackageId }).(pulumi.StringOutput)
}

// 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
func (o LookupEipResultOutput) BillingType() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.BillingType }).(pulumi.IntOutput)
}

// 公网IP是否被锁定。Normal: 正常。FinancialLocked: 被锁定。
func (o LookupEipResultOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// 公网IP的创建时间。
func (o LookupEipResultOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.CreatedTime }).(pulumi.StringOutput)
}

// 预期资源强制回收时间。包年包月公网IP，此参数有返回值。按量计费公网IP，仅欠费冻结时，此参数有返回值。
func (o LookupEipResultOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// 公网IP的描述信息。
func (o LookupEipResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.Description }).(pulumi.StringOutput)
}

// 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
func (o LookupEipResultOutput) DirectMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEipResult) bool { return v.DirectMode }).(pulumi.BoolOutput)
}

// 公网IP地址。
func (o LookupEipResultOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.EipAddress }).(pulumi.StringOutput)
}

// 公网IP的到期时间。包年包月，返回值为到期时间。按量计费，返回值为空。
func (o LookupEipResultOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// Uniquely identifies the resource.
func (o LookupEipResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.Id }).(pulumi.StringOutput)
}

// 当前绑定的实例ID。
func (o LookupEipResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
func (o LookupEipResultOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.InstanceType }).(pulumi.StringOutput)
}

// 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
func (o LookupEipResultOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.IpAddress }).(pulumi.StringOutput)
}

// IP地址池的ID。
func (o LookupEipResultOutput) IpAddressPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.IpAddressPoolId }).(pulumi.StringOutput)
}

// 是否被封禁。true：是。false：否。
func (o LookupEipResultOutput) IsBlocked() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEipResult) bool { return v.IsBlocked }).(pulumi.BoolOutput)
}

// 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
func (o LookupEipResultOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.Isp }).(pulumi.StringOutput)
}

// 公网IP被锁定的原因。financial: 因欠费被锁定。unlock: 欠费关停后充值恢复过程中。空值 : 没有被锁定。
func (o LookupEipResultOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.LockReason }).(pulumi.StringOutput)
}

// 公网IP的名称。
func (o LookupEipResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.Name }).(pulumi.StringOutput)
}

// 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值。
func (o LookupEipResultOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
func (o LookupEipResultOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.Period }).(pulumi.IntOutput)
}

// 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
func (o LookupEipResultOutput) PeriodUnit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.PeriodUnit }).(pulumi.IntOutput)
}

// 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
func (o LookupEipResultOutput) PrivateIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.PrivateIpAddress }).(pulumi.StringOutput)
}

// 公网IP所属项目的名称。
func (o LookupEipResultOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.ProjectName }).(pulumi.StringOutput)
}

// 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
func (o LookupEipResultOutput) ReleaseWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEipResult) bool { return v.ReleaseWithInstance }).(pulumi.BoolOutput)
}

// 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
func (o LookupEipResultOutput) RenewPeriodTimes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.RenewPeriodTimes }).(pulumi.IntOutput)
}

// 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
func (o LookupEipResultOutput) RenewType() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.RenewType }).(pulumi.IntOutput)
}

// DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
func (o LookupEipResultOutput) SecurityProtectionInstanceId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupEipResult) int { return v.SecurityProtectionInstanceId }).(pulumi.IntOutput)
}

// 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
func (o LookupEipResultOutput) SecurityProtectionTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupEipResult) []string { return v.SecurityProtectionTypes }).(pulumi.StringArrayOutput)
}

// 是否由服务管理
func (o LookupEipResultOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupEipResult) bool { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 公网IP的状态。Attaching：绑定中。Detaching：解绑中。Attached：已绑定。Available：可用。Deleting：删除中。
func (o LookupEipResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.Status }).(pulumi.StringOutput)
}

// 公网IP的标签信息
func (o LookupEipResultOutput) Tags() GetEipTagArrayOutput {
	return o.ApplyT(func(v LookupEipResult) []GetEipTag { return v.Tags }).(GetEipTagArrayOutput)
}

// 更新公网IP的时间。
func (o LookupEipResultOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupEipResult) string { return v.UpdatedTime }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupEipResultOutput{})
}
