// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcenginecc/sdk/go/volcenginecc/internal"
)

// 网卡即虚拟网卡。在私有网络里，网卡是挂载在云服务器、负载均衡等云资源上的一种网络接口。每张网卡均有一个主私网IP地址。若有需要，可手动为其分配多个辅助私网IP地址。
//
// ## Import
//
// ```sh
// $ pulumi import volcenginecc:vpc/eni:Eni example "network_interface_id"
// ```
type Eni struct {
	pulumi.CustomResourceState

	// 网卡所有者ID。
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// 网卡创建时间。
	CreatedTime pulumi.StringOutput `pulumi:"createdTime"`
	// 是否开启随云服务器实例删除，true为开启，false为不开启。
	DeleteOnTermination pulumi.BoolOutput `pulumi:"deleteOnTermination"`
	// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
	Description pulumi.StringOutput `pulumi:"description"`
	// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
	Ipv6AddressCount pulumi.IntOutput `pulumi:"ipv6AddressCount"`
	// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
	Ipv6Sets pulumi.StringArrayOutput `pulumi:"ipv6Sets"`
	// 网卡的MAC地址。
	MacAddress pulumi.StringOutput `pulumi:"macAddress"`
	// 网卡ID。
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
	NetworkInterfaceName pulumi.StringOutput `pulumi:"networkInterfaceName"`
	// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
	PortSecurityEnabled pulumi.BoolOutput `pulumi:"portSecurityEnabled"`
	// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
	PrimaryIpAddress EniPrimaryIpAddressOutput  `pulumi:"primaryIpAddress"`
	PrivateIpSets    EniPrivateIpSetArrayOutput `pulumi:"privateIpSets"`
	// 网卡所属项目的名称。
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
	SecondaryPrivateIpAddressCount pulumi.IntOutput `pulumi:"secondaryPrivateIpAddressCount"`
	// 辅助网卡加入一个或多个安全组的ID。
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// 是否为火山引擎官方服务网卡，true为是，false为否。
	ServiceManaged pulumi.BoolOutput `pulumi:"serviceManaged"`
	// 网卡的绑定状态。
	Status pulumi.StringOutput `pulumi:"status"`
	// 辅助网卡所在子网的ID。
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	Tags     EniTagArrayOutput   `pulumi:"tags"`
	// 网卡类型。primary：主网卡，secondary：辅助网卡
	Type pulumi.StringOutput `pulumi:"type"`
	// 更新网卡的时间。
	UpdatedTime pulumi.StringOutput `pulumi:"updatedTime"`
	// 网卡所属的VPC的ID。
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// 网卡所属VPC的名称。
	VpcName pulumi.StringOutput `pulumi:"vpcName"`
	// 网卡所属可用区的ID。
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewEni registers a new resource with the given unique name, arguments, and options.
func NewEni(ctx *pulumi.Context,
	name string, args *EniArgs, opts ...pulumi.ResourceOption) (*Eni, error) {
	if args == nil {
		args = &EniArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Eni
	err := ctx.RegisterResource("volcenginecc:vpc/eni:Eni", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEni gets an existing Eni resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEni(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EniState, opts ...pulumi.ResourceOption) (*Eni, error) {
	var resource Eni
	err := ctx.ReadResource("volcenginecc:vpc/eni:Eni", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Eni resources.
type eniState struct {
	// 网卡所有者ID。
	AccountId *string `pulumi:"accountId"`
	// 网卡创建时间。
	CreatedTime *string `pulumi:"createdTime"`
	// 是否开启随云服务器实例删除，true为开启，false为不开启。
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
	Description *string `pulumi:"description"`
	// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
	InstanceId *string `pulumi:"instanceId"`
	// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
	Ipv6Sets []string `pulumi:"ipv6Sets"`
	// 网卡的MAC地址。
	MacAddress *string `pulumi:"macAddress"`
	// 网卡ID。
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
	// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
	PortSecurityEnabled *bool `pulumi:"portSecurityEnabled"`
	// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
	PrimaryIpAddress *EniPrimaryIpAddress `pulumi:"primaryIpAddress"`
	PrivateIpSets    []EniPrivateIpSet    `pulumi:"privateIpSets"`
	// 网卡所属项目的名称。
	ProjectName *string `pulumi:"projectName"`
	// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
	SecondaryPrivateIpAddressCount *int `pulumi:"secondaryPrivateIpAddressCount"`
	// 辅助网卡加入一个或多个安全组的ID。
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// 是否为火山引擎官方服务网卡，true为是，false为否。
	ServiceManaged *bool `pulumi:"serviceManaged"`
	// 网卡的绑定状态。
	Status *string `pulumi:"status"`
	// 辅助网卡所在子网的ID。
	SubnetId *string  `pulumi:"subnetId"`
	Tags     []EniTag `pulumi:"tags"`
	// 网卡类型。primary：主网卡，secondary：辅助网卡
	Type *string `pulumi:"type"`
	// 更新网卡的时间。
	UpdatedTime *string `pulumi:"updatedTime"`
	// 网卡所属的VPC的ID。
	VpcId *string `pulumi:"vpcId"`
	// 网卡所属VPC的名称。
	VpcName *string `pulumi:"vpcName"`
	// 网卡所属可用区的ID。
	ZoneId *string `pulumi:"zoneId"`
}

type EniState struct {
	// 网卡所有者ID。
	AccountId pulumi.StringPtrInput
	// 网卡创建时间。
	CreatedTime pulumi.StringPtrInput
	// 是否开启随云服务器实例删除，true为开启，false为不开启。
	DeleteOnTermination pulumi.BoolPtrInput
	// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
	Description pulumi.StringPtrInput
	// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
	InstanceId pulumi.StringPtrInput
	// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
	Ipv6AddressCount pulumi.IntPtrInput
	// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
	Ipv6Sets pulumi.StringArrayInput
	// 网卡的MAC地址。
	MacAddress pulumi.StringPtrInput
	// 网卡ID。
	NetworkInterfaceId pulumi.StringPtrInput
	// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
	NetworkInterfaceName pulumi.StringPtrInput
	// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
	PortSecurityEnabled pulumi.BoolPtrInput
	// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
	PrimaryIpAddress EniPrimaryIpAddressPtrInput
	PrivateIpSets    EniPrivateIpSetArrayInput
	// 网卡所属项目的名称。
	ProjectName pulumi.StringPtrInput
	// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
	SecondaryPrivateIpAddressCount pulumi.IntPtrInput
	// 辅助网卡加入一个或多个安全组的ID。
	SecurityGroupIds pulumi.StringArrayInput
	// 是否为火山引擎官方服务网卡，true为是，false为否。
	ServiceManaged pulumi.BoolPtrInput
	// 网卡的绑定状态。
	Status pulumi.StringPtrInput
	// 辅助网卡所在子网的ID。
	SubnetId pulumi.StringPtrInput
	Tags     EniTagArrayInput
	// 网卡类型。primary：主网卡，secondary：辅助网卡
	Type pulumi.StringPtrInput
	// 更新网卡的时间。
	UpdatedTime pulumi.StringPtrInput
	// 网卡所属的VPC的ID。
	VpcId pulumi.StringPtrInput
	// 网卡所属VPC的名称。
	VpcName pulumi.StringPtrInput
	// 网卡所属可用区的ID。
	ZoneId pulumi.StringPtrInput
}

func (EniState) ElementType() reflect.Type {
	return reflect.TypeOf((*eniState)(nil)).Elem()
}

type eniArgs struct {
	// 是否开启随云服务器实例删除，true为开启，false为不开启。
	DeleteOnTermination *bool `pulumi:"deleteOnTermination"`
	// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
	Description *string `pulumi:"description"`
	// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
	InstanceId *string `pulumi:"instanceId"`
	// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
	Ipv6AddressCount *int `pulumi:"ipv6AddressCount"`
	// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
	Ipv6Sets []string `pulumi:"ipv6Sets"`
	// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
	NetworkInterfaceName *string `pulumi:"networkInterfaceName"`
	// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
	PortSecurityEnabled *bool `pulumi:"portSecurityEnabled"`
	// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
	PrimaryIpAddress *EniPrimaryIpAddress `pulumi:"primaryIpAddress"`
	PrivateIpSets    []EniPrivateIpSet    `pulumi:"privateIpSets"`
	// 网卡所属项目的名称。
	ProjectName *string `pulumi:"projectName"`
	// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
	SecondaryPrivateIpAddressCount *int `pulumi:"secondaryPrivateIpAddressCount"`
	// 辅助网卡加入一个或多个安全组的ID。
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// 辅助网卡所在子网的ID。
	SubnetId *string  `pulumi:"subnetId"`
	Tags     []EniTag `pulumi:"tags"`
	// 网卡所属可用区的ID。
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Eni resource.
type EniArgs struct {
	// 是否开启随云服务器实例删除，true为开启，false为不开启。
	DeleteOnTermination pulumi.BoolPtrInput
	// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
	Description pulumi.StringPtrInput
	// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
	InstanceId pulumi.StringPtrInput
	// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
	Ipv6AddressCount pulumi.IntPtrInput
	// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
	Ipv6Sets pulumi.StringArrayInput
	// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
	NetworkInterfaceName pulumi.StringPtrInput
	// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
	PortSecurityEnabled pulumi.BoolPtrInput
	// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
	PrimaryIpAddress EniPrimaryIpAddressPtrInput
	PrivateIpSets    EniPrivateIpSetArrayInput
	// 网卡所属项目的名称。
	ProjectName pulumi.StringPtrInput
	// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
	SecondaryPrivateIpAddressCount pulumi.IntPtrInput
	// 辅助网卡加入一个或多个安全组的ID。
	SecurityGroupIds pulumi.StringArrayInput
	// 辅助网卡所在子网的ID。
	SubnetId pulumi.StringPtrInput
	Tags     EniTagArrayInput
	// 网卡所属可用区的ID。
	ZoneId pulumi.StringPtrInput
}

func (EniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eniArgs)(nil)).Elem()
}

type EniInput interface {
	pulumi.Input

	ToEniOutput() EniOutput
	ToEniOutputWithContext(ctx context.Context) EniOutput
}

func (*Eni) ElementType() reflect.Type {
	return reflect.TypeOf((**Eni)(nil)).Elem()
}

func (i *Eni) ToEniOutput() EniOutput {
	return i.ToEniOutputWithContext(context.Background())
}

func (i *Eni) ToEniOutputWithContext(ctx context.Context) EniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniOutput)
}

// EniArrayInput is an input type that accepts EniArray and EniArrayOutput values.
// You can construct a concrete instance of `EniArrayInput` via:
//
//	EniArray{ EniArgs{...} }
type EniArrayInput interface {
	pulumi.Input

	ToEniArrayOutput() EniArrayOutput
	ToEniArrayOutputWithContext(context.Context) EniArrayOutput
}

type EniArray []EniInput

func (EniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eni)(nil)).Elem()
}

func (i EniArray) ToEniArrayOutput() EniArrayOutput {
	return i.ToEniArrayOutputWithContext(context.Background())
}

func (i EniArray) ToEniArrayOutputWithContext(ctx context.Context) EniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniArrayOutput)
}

// EniMapInput is an input type that accepts EniMap and EniMapOutput values.
// You can construct a concrete instance of `EniMapInput` via:
//
//	EniMap{ "key": EniArgs{...} }
type EniMapInput interface {
	pulumi.Input

	ToEniMapOutput() EniMapOutput
	ToEniMapOutputWithContext(context.Context) EniMapOutput
}

type EniMap map[string]EniInput

func (EniMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eni)(nil)).Elem()
}

func (i EniMap) ToEniMapOutput() EniMapOutput {
	return i.ToEniMapOutputWithContext(context.Background())
}

func (i EniMap) ToEniMapOutputWithContext(ctx context.Context) EniMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EniMapOutput)
}

type EniOutput struct{ *pulumi.OutputState }

func (EniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Eni)(nil)).Elem()
}

func (o EniOutput) ToEniOutput() EniOutput {
	return o
}

func (o EniOutput) ToEniOutputWithContext(ctx context.Context) EniOutput {
	return o
}

// 网卡所有者ID。
func (o EniOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// 网卡创建时间。
func (o EniOutput) CreatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.CreatedTime }).(pulumi.StringOutput)
}

// 是否开启随云服务器实例删除，true为开启，false为不开启。
func (o EniOutput) DeleteOnTermination() pulumi.BoolOutput {
	return o.ApplyT(func(v *Eni) pulumi.BoolOutput { return v.DeleteOnTermination }).(pulumi.BoolOutput)
}

// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
func (o EniOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
func (o EniOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
func (o EniOutput) Ipv6AddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Eni) pulumi.IntOutput { return v.Ipv6AddressCount }).(pulumi.IntOutput)
}

// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
func (o EniOutput) Ipv6Sets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringArrayOutput { return v.Ipv6Sets }).(pulumi.StringArrayOutput)
}

// 网卡的MAC地址。
func (o EniOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.MacAddress }).(pulumi.StringOutput)
}

// 网卡ID。
func (o EniOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
func (o EniOutput) NetworkInterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.NetworkInterfaceName }).(pulumi.StringOutput)
}

// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
func (o EniOutput) PortSecurityEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Eni) pulumi.BoolOutput { return v.PortSecurityEnabled }).(pulumi.BoolOutput)
}

// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
func (o EniOutput) PrimaryIpAddress() EniPrimaryIpAddressOutput {
	return o.ApplyT(func(v *Eni) EniPrimaryIpAddressOutput { return v.PrimaryIpAddress }).(EniPrimaryIpAddressOutput)
}

func (o EniOutput) PrivateIpSets() EniPrivateIpSetArrayOutput {
	return o.ApplyT(func(v *Eni) EniPrivateIpSetArrayOutput { return v.PrivateIpSets }).(EniPrivateIpSetArrayOutput)
}

// 网卡所属项目的名称。
func (o EniOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
func (o EniOutput) SecondaryPrivateIpAddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Eni) pulumi.IntOutput { return v.SecondaryPrivateIpAddressCount }).(pulumi.IntOutput)
}

// 辅助网卡加入一个或多个安全组的ID。
func (o EniOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// 是否为火山引擎官方服务网卡，true为是，false为否。
func (o EniOutput) ServiceManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *Eni) pulumi.BoolOutput { return v.ServiceManaged }).(pulumi.BoolOutput)
}

// 网卡的绑定状态。
func (o EniOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// 辅助网卡所在子网的ID。
func (o EniOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

func (o EniOutput) Tags() EniTagArrayOutput {
	return o.ApplyT(func(v *Eni) EniTagArrayOutput { return v.Tags }).(EniTagArrayOutput)
}

// 网卡类型。primary：主网卡，secondary：辅助网卡
func (o EniOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// 更新网卡的时间。
func (o EniOutput) UpdatedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.UpdatedTime }).(pulumi.StringOutput)
}

// 网卡所属的VPC的ID。
func (o EniOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// 网卡所属VPC的名称。
func (o EniOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.VpcName }).(pulumi.StringOutput)
}

// 网卡所属可用区的ID。
func (o EniOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Eni) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type EniArrayOutput struct{ *pulumi.OutputState }

func (EniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Eni)(nil)).Elem()
}

func (o EniArrayOutput) ToEniArrayOutput() EniArrayOutput {
	return o
}

func (o EniArrayOutput) ToEniArrayOutputWithContext(ctx context.Context) EniArrayOutput {
	return o
}

func (o EniArrayOutput) Index(i pulumi.IntInput) EniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Eni {
		return vs[0].([]*Eni)[vs[1].(int)]
	}).(EniOutput)
}

type EniMapOutput struct{ *pulumi.OutputState }

func (EniMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Eni)(nil)).Elem()
}

func (o EniMapOutput) ToEniMapOutput() EniMapOutput {
	return o
}

func (o EniMapOutput) ToEniMapOutputWithContext(ctx context.Context) EniMapOutput {
	return o
}

func (o EniMapOutput) MapIndex(k pulumi.StringInput) EniOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Eni {
		return vs[0].(map[string]*Eni)[vs[1].(string)]
	}).(EniOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EniInput)(nil)).Elem(), &Eni{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniArrayInput)(nil)).Elem(), EniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EniMapInput)(nil)).Elem(), EniMap{})
	pulumi.RegisterOutputType(EniOutput{})
	pulumi.RegisterOutputType(EniArrayOutput{})
	pulumi.RegisterOutputType(EniMapOutput{})
}
