// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.alb.inputs.AclAclEntryArgs;
import com.volcengine.volcenginecc.alb.inputs.AclListenerArgs;
import com.volcengine.volcenginecc.alb.inputs.AclTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AclState extends com.pulumi.resources.ResourceArgs {

    public static final AclState Empty = new AclState();

    @Import(name="aclEntries")
    private @Nullable Output<List<AclAclEntryArgs>> aclEntries;

    public Optional<Output<List<AclAclEntryArgs>>> aclEntries() {
        return Optional.ofNullable(this.aclEntries);
    }

    /**
     * 访问控制策略组包含的IP条目数量。
     * 
     */
    @Import(name="aclEntryCount")
    private @Nullable Output<Integer> aclEntryCount;

    /**
     * @return 访问控制策略组包含的IP条目数量。
     * 
     */
    public Optional<Output<Integer>> aclEntryCount() {
        return Optional.ofNullable(this.aclEntryCount);
    }

    /**
     * 访问控制策略组的ID。
     * 
     */
    @Import(name="aclId")
    private @Nullable Output<String> aclId;

    /**
     * @return 访问控制策略组的ID。
     * 
     */
    public Optional<Output<String>> aclId() {
        return Optional.ofNullable(this.aclId);
    }

    /**
     * 访问控制策略组的名字。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ～ 128个字符。不填默认为访问控制策略组ID。
     * 
     */
    @Import(name="aclName")
    private @Nullable Output<String> aclName;

    /**
     * @return 访问控制策略组的名字。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ～ 128个字符。不填默认为访问控制策略组ID。
     * 
     */
    public Optional<Output<String>> aclName() {
        return Optional.ofNullable(this.aclName);
    }

    /**
     * 访问控制策略组的创建时间。
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return 访问控制策略组的创建时间。
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * 访问控制策略组的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 访问控制策略组的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="listeners")
    private @Nullable Output<List<AclListenerArgs>> listeners;

    public Optional<Output<List<AclListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * 访问控制策略组所属项目名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 访问控制策略组所属项目名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<AclTagArgs>> tags;

    public Optional<Output<List<AclTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 访问控制策略组的最近操作时间。
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return 访问控制策略组的最近操作时间。
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private AclState() {}

    private AclState(AclState $) {
        this.aclEntries = $.aclEntries;
        this.aclEntryCount = $.aclEntryCount;
        this.aclId = $.aclId;
        this.aclName = $.aclName;
        this.createTime = $.createTime;
        this.description = $.description;
        this.listeners = $.listeners;
        this.projectName = $.projectName;
        this.status = $.status;
        this.tags = $.tags;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AclState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AclState $;

        public Builder() {
            $ = new AclState();
        }

        public Builder(AclState defaults) {
            $ = new AclState(Objects.requireNonNull(defaults));
        }

        public Builder aclEntries(@Nullable Output<List<AclAclEntryArgs>> aclEntries) {
            $.aclEntries = aclEntries;
            return this;
        }

        public Builder aclEntries(List<AclAclEntryArgs> aclEntries) {
            return aclEntries(Output.of(aclEntries));
        }

        public Builder aclEntries(AclAclEntryArgs... aclEntries) {
            return aclEntries(List.of(aclEntries));
        }

        /**
         * @param aclEntryCount 访问控制策略组包含的IP条目数量。
         * 
         * @return builder
         * 
         */
        public Builder aclEntryCount(@Nullable Output<Integer> aclEntryCount) {
            $.aclEntryCount = aclEntryCount;
            return this;
        }

        /**
         * @param aclEntryCount 访问控制策略组包含的IP条目数量。
         * 
         * @return builder
         * 
         */
        public Builder aclEntryCount(Integer aclEntryCount) {
            return aclEntryCount(Output.of(aclEntryCount));
        }

        /**
         * @param aclId 访问控制策略组的ID。
         * 
         * @return builder
         * 
         */
        public Builder aclId(@Nullable Output<String> aclId) {
            $.aclId = aclId;
            return this;
        }

        /**
         * @param aclId 访问控制策略组的ID。
         * 
         * @return builder
         * 
         */
        public Builder aclId(String aclId) {
            return aclId(Output.of(aclId));
        }

        /**
         * @param aclName 访问控制策略组的名字。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ～ 128个字符。不填默认为访问控制策略组ID。
         * 
         * @return builder
         * 
         */
        public Builder aclName(@Nullable Output<String> aclName) {
            $.aclName = aclName;
            return this;
        }

        /**
         * @param aclName 访问控制策略组的名字。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ～ 128个字符。不填默认为访问控制策略组ID。
         * 
         * @return builder
         * 
         */
        public Builder aclName(String aclName) {
            return aclName(Output.of(aclName));
        }

        /**
         * @param createTime 访问控制策略组的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime 访问控制策略组的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description 访问控制策略组的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 访问控制策略组的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder listeners(@Nullable Output<List<AclListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        public Builder listeners(List<AclListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        public Builder listeners(AclListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param projectName 访问控制策略组所属项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 访问控制策略组所属项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param status 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<AclTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<AclTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(AclTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updateTime 访问控制策略组的最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime 访问控制策略组的最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public AclState build() {
            return $;
        }
    }

}
