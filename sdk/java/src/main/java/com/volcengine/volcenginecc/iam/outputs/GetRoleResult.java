// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.iam.outputs.GetRolePolicy;
import com.volcengine.volcenginecc.iam.outputs.GetRoleTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRoleResult {
    /**
     * @return 角色创建时间。
     * 
     */
    private String createDate;
    /**
     * @return 角色描述，长度不超过128。
     * 
     */
    private String description;
    /**
     * @return 角色显示名，长度不超过64。
     * 
     */
    private String displayName;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 是否是服务关联角色, 0否，1是。
     * 
     */
    private Integer isServiceLinkedRole;
    /**
     * @return 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
     * 
     */
    private Integer maxSessionDuration;
    private List<GetRolePolicy> policies;
    /**
     * @return 角色ID。
     * 
     */
    private Integer roleId;
    /**
     * @return 角色名，长度1~64，支持英文、数字和.-_符号。
     * 
     */
    private String roleName;
    private List<GetRoleTag> tags;
    /**
     * @return 角色TRN。
     * 
     */
    private String trn;
    /**
     * @return 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
     * 
     */
    private String trustPolicyDocument;
    /**
     * @return 角色更新时间。
     * 
     */
    private String updateDate;

    private GetRoleResult() {}
    /**
     * @return 角色创建时间。
     * 
     */
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return 角色描述，长度不超过128。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 角色显示名，长度不超过64。
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 是否是服务关联角色, 0否，1是。
     * 
     */
    public Integer isServiceLinkedRole() {
        return this.isServiceLinkedRole;
    }
    /**
     * @return 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
     * 
     */
    public Integer maxSessionDuration() {
        return this.maxSessionDuration;
    }
    public List<GetRolePolicy> policies() {
        return this.policies;
    }
    /**
     * @return 角色ID。
     * 
     */
    public Integer roleId() {
        return this.roleId;
    }
    /**
     * @return 角色名，长度1~64，支持英文、数字和.-_符号。
     * 
     */
    public String roleName() {
        return this.roleName;
    }
    public List<GetRoleTag> tags() {
        return this.tags;
    }
    /**
     * @return 角色TRN。
     * 
     */
    public String trn() {
        return this.trn;
    }
    /**
     * @return 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
     * 
     */
    public String trustPolicyDocument() {
        return this.trustPolicyDocument;
    }
    /**
     * @return 角色更新时间。
     * 
     */
    public String updateDate() {
        return this.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRoleResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createDate;
        private String description;
        private String displayName;
        private String id;
        private Integer isServiceLinkedRole;
        private Integer maxSessionDuration;
        private List<GetRolePolicy> policies;
        private Integer roleId;
        private String roleName;
        private List<GetRoleTag> tags;
        private String trn;
        private String trustPolicyDocument;
        private String updateDate;
        public Builder() {}
        public Builder(GetRoleResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDate = defaults.createDate;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.id = defaults.id;
    	      this.isServiceLinkedRole = defaults.isServiceLinkedRole;
    	      this.maxSessionDuration = defaults.maxSessionDuration;
    	      this.policies = defaults.policies;
    	      this.roleId = defaults.roleId;
    	      this.roleName = defaults.roleName;
    	      this.tags = defaults.tags;
    	      this.trn = defaults.trn;
    	      this.trustPolicyDocument = defaults.trustPolicyDocument;
    	      this.updateDate = defaults.updateDate;
        }

        @CustomType.Setter
        public Builder createDate(String createDate) {
            if (createDate == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "createDate");
            }
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isServiceLinkedRole(Integer isServiceLinkedRole) {
            if (isServiceLinkedRole == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "isServiceLinkedRole");
            }
            this.isServiceLinkedRole = isServiceLinkedRole;
            return this;
        }
        @CustomType.Setter
        public Builder maxSessionDuration(Integer maxSessionDuration) {
            if (maxSessionDuration == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "maxSessionDuration");
            }
            this.maxSessionDuration = maxSessionDuration;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetRolePolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetRolePolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder roleId(Integer roleId) {
            if (roleId == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "roleId");
            }
            this.roleId = roleId;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetRoleTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetRoleTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder trn(String trn) {
            if (trn == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "trn");
            }
            this.trn = trn;
            return this;
        }
        @CustomType.Setter
        public Builder trustPolicyDocument(String trustPolicyDocument) {
            if (trustPolicyDocument == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "trustPolicyDocument");
            }
            this.trustPolicyDocument = trustPolicyDocument;
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(String updateDate) {
            if (updateDate == null) {
              throw new MissingRequiredPropertyException("GetRoleResult", "updateDate");
            }
            this.updateDate = updateDate;
            return this;
        }
        public GetRoleResult build() {
            final var _resultValue = new GetRoleResult();
            _resultValue.createDate = createDate;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.id = id;
            _resultValue.isServiceLinkedRole = isServiceLinkedRole;
            _resultValue.maxSessionDuration = maxSessionDuration;
            _resultValue.policies = policies;
            _resultValue.roleId = roleId;
            _resultValue.roleName = roleName;
            _resultValue.tags = tags;
            _resultValue.trn = trn;
            _resultValue.trustPolicyDocument = trustPolicyDocument;
            _resultValue.updateDate = updateDate;
            return _resultValue;
        }
    }
}
