// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetBandwidthPackageEipAddress;
import com.volcengine.volcenginecc.vpc.outputs.GetBandwidthPackageTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBandwidthPackageResult {
    /**
     * @return 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
     * 
     */
    private Integer bandwidth;
    /**
     * @return 带宽包ID
     * 
     */
    private String bandwidthPackageId;
    /**
     * @return 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
     * 
     */
    private String bandwidthPackageName;
    /**
     * @return 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
     * 
     */
    private Integer billingType;
    /**
     * @return 计费状态
     * 
     */
    private String businessStatus;
    /**
     * @return 创建时间
     * 
     */
    private String createdTime;
    /**
     * @return 删除时间
     * 
     */
    private String deletedTime;
    /**
     * @return 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    private String description;
    /**
     * @return 加入共享带宽包的公网IP信息列表。必须同时满足如下条件：1、二者线路类型相同。2、二者安全防护类型相同。3、二者地域相同。4、公网IP或IPv6公网带宽为按量计费。
     * 
     */
    private List<GetBandwidthPackageEipAddress> eipAddresses;
    /**
     * @return 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
     * 
     */
    private Boolean enableDualStack;
    /**
     * @return 过期时间
     * 
     */
    private String expiredTime;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
     * 
     */
    private String isp;
    /**
     * @return 欠费时间
     * 
     */
    private String overdueTime;
    /**
     * @return 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
     * 
     */
    private Integer period;
    /**
     * @return 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
     * 
     */
    private Integer periodUnit;
    /**
     * @return 项目名称，不填默认加入default项目。
     * 
     */
    private String projectName;
    /**
     * @return 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
     * 
     */
    private String protocol;
    /**
     * @return 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
     * 
     */
    private Integer ratio;
    /**
     * @return 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
     * 
     */
    private List<String> securityProtectionTypes;
    /**
     * @return 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
     * 
     */
    private String status;
    /**
     * @return 标签列表。
     * 
     */
    private List<GetBandwidthPackageTag> tags;
    /**
     * @return 更新时间
     * 
     */
    private String updatedTime;

    private GetBandwidthPackageResult() {}
    /**
     * @return 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return 带宽包ID
     * 
     */
    public String bandwidthPackageId() {
        return this.bandwidthPackageId;
    }
    /**
     * @return 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
     * 
     */
    public String bandwidthPackageName() {
        return this.bandwidthPackageName;
    }
    /**
     * @return 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
     * 
     */
    public Integer billingType() {
        return this.billingType;
    }
    /**
     * @return 计费状态
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return 创建时间
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 删除时间
     * 
     */
    public String deletedTime() {
        return this.deletedTime;
    }
    /**
     * @return 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 加入共享带宽包的公网IP信息列表。必须同时满足如下条件：1、二者线路类型相同。2、二者安全防护类型相同。3、二者地域相同。4、公网IP或IPv6公网带宽为按量计费。
     * 
     */
    public List<GetBandwidthPackageEipAddress> eipAddresses() {
        return this.eipAddresses;
    }
    /**
     * @return 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
     * 
     */
    public Boolean enableDualStack() {
        return this.enableDualStack;
    }
    /**
     * @return 过期时间
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
     * 
     */
    public String isp() {
        return this.isp;
    }
    /**
     * @return 欠费时间
     * 
     */
    public String overdueTime() {
        return this.overdueTime;
    }
    /**
     * @return 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
     * 
     */
    public Integer period() {
        return this.period;
    }
    /**
     * @return 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
     * 
     */
    public Integer periodUnit() {
        return this.periodUnit;
    }
    /**
     * @return 项目名称，不填默认加入default项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
     * 
     */
    public Integer ratio() {
        return this.ratio;
    }
    /**
     * @return 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
     * 
     */
    public List<String> securityProtectionTypes() {
        return this.securityProtectionTypes;
    }
    /**
     * @return 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 标签列表。
     * 
     */
    public List<GetBandwidthPackageTag> tags() {
        return this.tags;
    }
    /**
     * @return 更新时间
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBandwidthPackageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer bandwidth;
        private String bandwidthPackageId;
        private String bandwidthPackageName;
        private Integer billingType;
        private String businessStatus;
        private String createdTime;
        private String deletedTime;
        private String description;
        private List<GetBandwidthPackageEipAddress> eipAddresses;
        private Boolean enableDualStack;
        private String expiredTime;
        private String id;
        private String isp;
        private String overdueTime;
        private Integer period;
        private Integer periodUnit;
        private String projectName;
        private String protocol;
        private Integer ratio;
        private List<String> securityProtectionTypes;
        private String status;
        private List<GetBandwidthPackageTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetBandwidthPackageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bandwidth = defaults.bandwidth;
    	      this.bandwidthPackageId = defaults.bandwidthPackageId;
    	      this.bandwidthPackageName = defaults.bandwidthPackageName;
    	      this.billingType = defaults.billingType;
    	      this.businessStatus = defaults.businessStatus;
    	      this.createdTime = defaults.createdTime;
    	      this.deletedTime = defaults.deletedTime;
    	      this.description = defaults.description;
    	      this.eipAddresses = defaults.eipAddresses;
    	      this.enableDualStack = defaults.enableDualStack;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.isp = defaults.isp;
    	      this.overdueTime = defaults.overdueTime;
    	      this.period = defaults.period;
    	      this.periodUnit = defaults.periodUnit;
    	      this.projectName = defaults.projectName;
    	      this.protocol = defaults.protocol;
    	      this.ratio = defaults.ratio;
    	      this.securityProtectionTypes = defaults.securityProtectionTypes;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            if (bandwidthPackageId == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "bandwidthPackageId");
            }
            this.bandwidthPackageId = bandwidthPackageId;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageName(String bandwidthPackageName) {
            if (bandwidthPackageName == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "bandwidthPackageName");
            }
            this.bandwidthPackageName = bandwidthPackageName;
            return this;
        }
        @CustomType.Setter
        public Builder billingType(Integer billingType) {
            if (billingType == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "billingType");
            }
            this.billingType = billingType;
            return this;
        }
        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            if (businessStatus == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "businessStatus");
            }
            this.businessStatus = businessStatus;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletedTime(String deletedTime) {
            if (deletedTime == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "deletedTime");
            }
            this.deletedTime = deletedTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder eipAddresses(List<GetBandwidthPackageEipAddress> eipAddresses) {
            if (eipAddresses == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "eipAddresses");
            }
            this.eipAddresses = eipAddresses;
            return this;
        }
        public Builder eipAddresses(GetBandwidthPackageEipAddress... eipAddresses) {
            return eipAddresses(List.of(eipAddresses));
        }
        @CustomType.Setter
        public Builder enableDualStack(Boolean enableDualStack) {
            if (enableDualStack == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "enableDualStack");
            }
            this.enableDualStack = enableDualStack;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isp(String isp) {
            if (isp == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "isp");
            }
            this.isp = isp;
            return this;
        }
        @CustomType.Setter
        public Builder overdueTime(String overdueTime) {
            if (overdueTime == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "overdueTime");
            }
            this.overdueTime = overdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder period(Integer period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder periodUnit(Integer periodUnit) {
            if (periodUnit == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "periodUnit");
            }
            this.periodUnit = periodUnit;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder ratio(Integer ratio) {
            if (ratio == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "ratio");
            }
            this.ratio = ratio;
            return this;
        }
        @CustomType.Setter
        public Builder securityProtectionTypes(List<String> securityProtectionTypes) {
            if (securityProtectionTypes == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "securityProtectionTypes");
            }
            this.securityProtectionTypes = securityProtectionTypes;
            return this;
        }
        public Builder securityProtectionTypes(String... securityProtectionTypes) {
            return securityProtectionTypes(List.of(securityProtectionTypes));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetBandwidthPackageTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetBandwidthPackageTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetBandwidthPackageResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetBandwidthPackageResult build() {
            final var _resultValue = new GetBandwidthPackageResult();
            _resultValue.bandwidth = bandwidth;
            _resultValue.bandwidthPackageId = bandwidthPackageId;
            _resultValue.bandwidthPackageName = bandwidthPackageName;
            _resultValue.billingType = billingType;
            _resultValue.businessStatus = businessStatus;
            _resultValue.createdTime = createdTime;
            _resultValue.deletedTime = deletedTime;
            _resultValue.description = description;
            _resultValue.eipAddresses = eipAddresses;
            _resultValue.enableDualStack = enableDualStack;
            _resultValue.expiredTime = expiredTime;
            _resultValue.id = id;
            _resultValue.isp = isp;
            _resultValue.overdueTime = overdueTime;
            _resultValue.period = period;
            _resultValue.periodUnit = periodUnit;
            _resultValue.projectName = projectName;
            _resultValue.protocol = protocol;
            _resultValue.ratio = ratio;
            _resultValue.securityProtectionTypes = securityProtectionTypes;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
