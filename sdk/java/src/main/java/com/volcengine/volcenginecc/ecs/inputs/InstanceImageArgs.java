// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceImageArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceImageArgs Empty = new InstanceImageArgs();

    /**
     * 实例的镜像ID。
     * 
     */
    @Import(name="imageId", required=true)
    private Output<String> imageId;

    /**
     * @return 实例的镜像ID。
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }

    /**
     * 实例的镜像发布版本。
     * 
     */
    @Import(name="imageReleaseVersion")
    private @Nullable Output<String> imageReleaseVersion;

    /**
     * @return 实例的镜像发布版本。
     * 
     */
    public Optional<Output<String>> imageReleaseVersion() {
        return Optional.ofNullable(this.imageReleaseVersion);
    }

    /**
     * 实例是否保留镜像凭证。
     * 
     */
    @Import(name="keepImageCredential")
    private @Nullable Output<Boolean> keepImageCredential;

    /**
     * @return 实例是否保留镜像凭证。
     * 
     */
    public Optional<Output<Boolean>> keepImageCredential() {
        return Optional.ofNullable(this.keepImageCredential);
    }

    /**
     * 实例的安全增强策略。Active：开启安全加固，仅对公共镜像生效。InActive：关闭安全加固，对所有镜像生效。
     * 
     */
    @Import(name="securityEnhancementStrategy")
    private @Nullable Output<String> securityEnhancementStrategy;

    /**
     * @return 实例的安全增强策略。Active：开启安全加固，仅对公共镜像生效。InActive：关闭安全加固，对所有镜像生效。
     * 
     */
    public Optional<Output<String>> securityEnhancementStrategy() {
        return Optional.ofNullable(this.securityEnhancementStrategy);
    }

    private InstanceImageArgs() {}

    private InstanceImageArgs(InstanceImageArgs $) {
        this.imageId = $.imageId;
        this.imageReleaseVersion = $.imageReleaseVersion;
        this.keepImageCredential = $.keepImageCredential;
        this.securityEnhancementStrategy = $.securityEnhancementStrategy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceImageArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceImageArgs $;

        public Builder() {
            $ = new InstanceImageArgs();
        }

        public Builder(InstanceImageArgs defaults) {
            $ = new InstanceImageArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param imageId 实例的镜像ID。
         * 
         * @return builder
         * 
         */
        public Builder imageId(Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId 实例的镜像ID。
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageReleaseVersion 实例的镜像发布版本。
         * 
         * @return builder
         * 
         */
        public Builder imageReleaseVersion(@Nullable Output<String> imageReleaseVersion) {
            $.imageReleaseVersion = imageReleaseVersion;
            return this;
        }

        /**
         * @param imageReleaseVersion 实例的镜像发布版本。
         * 
         * @return builder
         * 
         */
        public Builder imageReleaseVersion(String imageReleaseVersion) {
            return imageReleaseVersion(Output.of(imageReleaseVersion));
        }

        /**
         * @param keepImageCredential 实例是否保留镜像凭证。
         * 
         * @return builder
         * 
         */
        public Builder keepImageCredential(@Nullable Output<Boolean> keepImageCredential) {
            $.keepImageCredential = keepImageCredential;
            return this;
        }

        /**
         * @param keepImageCredential 实例是否保留镜像凭证。
         * 
         * @return builder
         * 
         */
        public Builder keepImageCredential(Boolean keepImageCredential) {
            return keepImageCredential(Output.of(keepImageCredential));
        }

        /**
         * @param securityEnhancementStrategy 实例的安全增强策略。Active：开启安全加固，仅对公共镜像生效。InActive：关闭安全加固，对所有镜像生效。
         * 
         * @return builder
         * 
         */
        public Builder securityEnhancementStrategy(@Nullable Output<String> securityEnhancementStrategy) {
            $.securityEnhancementStrategy = securityEnhancementStrategy;
            return this;
        }

        /**
         * @param securityEnhancementStrategy 实例的安全增强策略。Active：开启安全加固，仅对公共镜像生效。InActive：关闭安全加固，对所有镜像生效。
         * 
         * @return builder
         * 
         */
        public Builder securityEnhancementStrategy(String securityEnhancementStrategy) {
            return securityEnhancementStrategy(Output.of(securityEnhancementStrategy));
        }

        public InstanceImageArgs build() {
            if ($.imageId == null) {
                throw new MissingRequiredPropertyException("InstanceImageArgs", "imageId");
            }
            return $;
        }
    }

}
