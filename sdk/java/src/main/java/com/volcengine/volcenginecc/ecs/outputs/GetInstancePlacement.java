// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstancePlacement {
    /**
     * @return 针对节省停机模式的ECS实例，停止后会释放部分资源，本参数用于查看ECS实例重新启动时是否仍固定部署在原宿主机上。取值：Host：启用节省停机模式的实例重新启动时，仍会部署在原宿主机上。Default（默认）：启用节省停机模式的实例重新启动时，会优先迁移到支持自动部署的宿主机；若支持自动部署的宿主机资源不足，则在原宿主机上进行启动。
     * 
     */
    private String affinity;
    /**
     * @return 实例的专用主机集群ID。
     * 
     */
    private String dedicatedHostClusterId;
    /**
     * @return 实例的专用主机ID。
     * 
     */
    private String dedicatedHostId;
    /**
     * @return 是否在专有宿主机上创建实例，取值：Default（默认）：创建普通云服务器实例。Host：创建专有宿主机实例。若您不指定DedicatedHostId，则由系统自动选择专有宿主机放置实例
     * 
     */
    private String tenancy;

    private GetInstancePlacement() {}
    /**
     * @return 针对节省停机模式的ECS实例，停止后会释放部分资源，本参数用于查看ECS实例重新启动时是否仍固定部署在原宿主机上。取值：Host：启用节省停机模式的实例重新启动时，仍会部署在原宿主机上。Default（默认）：启用节省停机模式的实例重新启动时，会优先迁移到支持自动部署的宿主机；若支持自动部署的宿主机资源不足，则在原宿主机上进行启动。
     * 
     */
    public String affinity() {
        return this.affinity;
    }
    /**
     * @return 实例的专用主机集群ID。
     * 
     */
    public String dedicatedHostClusterId() {
        return this.dedicatedHostClusterId;
    }
    /**
     * @return 实例的专用主机ID。
     * 
     */
    public String dedicatedHostId() {
        return this.dedicatedHostId;
    }
    /**
     * @return 是否在专有宿主机上创建实例，取值：Default（默认）：创建普通云服务器实例。Host：创建专有宿主机实例。若您不指定DedicatedHostId，则由系统自动选择专有宿主机放置实例
     * 
     */
    public String tenancy() {
        return this.tenancy;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancePlacement defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String affinity;
        private String dedicatedHostClusterId;
        private String dedicatedHostId;
        private String tenancy;
        public Builder() {}
        public Builder(GetInstancePlacement defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.affinity = defaults.affinity;
    	      this.dedicatedHostClusterId = defaults.dedicatedHostClusterId;
    	      this.dedicatedHostId = defaults.dedicatedHostId;
    	      this.tenancy = defaults.tenancy;
        }

        @CustomType.Setter
        public Builder affinity(String affinity) {
            if (affinity == null) {
              throw new MissingRequiredPropertyException("GetInstancePlacement", "affinity");
            }
            this.affinity = affinity;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostClusterId(String dedicatedHostClusterId) {
            if (dedicatedHostClusterId == null) {
              throw new MissingRequiredPropertyException("GetInstancePlacement", "dedicatedHostClusterId");
            }
            this.dedicatedHostClusterId = dedicatedHostClusterId;
            return this;
        }
        @CustomType.Setter
        public Builder dedicatedHostId(String dedicatedHostId) {
            if (dedicatedHostId == null) {
              throw new MissingRequiredPropertyException("GetInstancePlacement", "dedicatedHostId");
            }
            this.dedicatedHostId = dedicatedHostId;
            return this;
        }
        @CustomType.Setter
        public Builder tenancy(String tenancy) {
            if (tenancy == null) {
              throw new MissingRequiredPropertyException("GetInstancePlacement", "tenancy");
            }
            this.tenancy = tenancy;
            return this;
        }
        public GetInstancePlacement build() {
            final var _resultValue = new GetInstancePlacement();
            _resultValue.affinity = affinity;
            _resultValue.dedicatedHostClusterId = dedicatedHostClusterId;
            _resultValue.dedicatedHostId = dedicatedHostId;
            _resultValue.tenancy = tenancy;
            return _resultValue;
        }
    }
}
