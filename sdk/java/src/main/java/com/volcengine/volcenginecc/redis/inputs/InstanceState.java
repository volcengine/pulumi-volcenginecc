// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.redis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.redis.inputs.InstanceCapacityArgs;
import com.volcengine.volcenginecc.redis.inputs.InstanceConfigureNodeArgs;
import com.volcengine.volcenginecc.redis.inputs.InstanceInstanceShardArgs;
import com.volcengine.volcenginecc.redis.inputs.InstanceTagArgs;
import com.volcengine.volcenginecc.redis.inputs.InstanceVisitAddrArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceState extends com.pulumi.resources.ResourceArgs {

    public static final InstanceState Empty = new InstanceState();

    /**
     * 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
     * 
     */
    @Import(name="allowListIds")
    private @Nullable Output<List<String>> allowListIds;

    /**
     * @return 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
     * 
     */
    public Optional<Output<List<String>>> allowListIds() {
        return Optional.ofNullable(this.allowListIds);
    }

    /**
     * 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
     * 
     */
    @Import(name="autoRenew")
    private @Nullable Output<Boolean> autoRenew;

    /**
     * @return 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
     * 
     */
    public Optional<Output<Boolean>> autoRenew() {
        return Optional.ofNullable(this.autoRenew);
    }

    /**
     * 为变更前创建的全量备份设置备份名称。
     * 
     */
    @Import(name="backupPointName")
    private @Nullable Output<String> backupPointName;

    /**
     * @return 为变更前创建的全量备份设置备份名称。
     * 
     */
    public Optional<Output<String>> backupPointName() {
        return Optional.ofNullable(this.backupPointName);
    }

    /**
     * 实例的容量信息。
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<InstanceCapacityArgs> capacity;

    /**
     * @return 实例的容量信息。
     * 
     */
    public Optional<Output<InstanceCapacityArgs>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
     * 
     */
    @Import(name="chargeType")
    private @Nullable Output<String> chargeType;

    /**
     * @return 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
     * 
     */
    public Optional<Output<String>> chargeType() {
        return Optional.ofNullable(this.chargeType);
    }

    @Import(name="configureNodes")
    private @Nullable Output<List<InstanceConfigureNodeArgs>> configureNodes;

    public Optional<Output<List<InstanceConfigureNodeArgs>>> configureNodes() {
        return Optional.ofNullable(this.configureNodes);
    }

    /**
     * 是否在变更前创建备份。
     * 
     */
    @Import(name="createBackup")
    private @Nullable Output<Boolean> createBackup;

    /**
     * @return 是否在变更前创建备份。
     * 
     */
    public Optional<Output<Boolean>> createBackup() {
        return Optional.ofNullable(this.createBackup);
    }

    /**
     * 实例的创建时间。
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return 实例的创建时间。
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
     * 
     */
    @Import(name="dataLayout")
    private @Nullable Output<String> dataLayout;

    /**
     * @return 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
     * 
     */
    public Optional<Output<String>> dataLayout() {
        return Optional.ofNullable(this.dataLayout);
    }

    /**
     * 开启或关闭实例删除保护功能。
     * 
     */
    @Import(name="deletionProtection")
    private @Nullable Output<String> deletionProtection;

    /**
     * @return 开启或关闭实例删除保护功能。
     * 
     */
    public Optional<Output<String>> deletionProtection() {
        return Optional.ofNullable(this.deletionProtection);
    }

    /**
     * 数据库版本号。
     * 
     */
    @Import(name="engineVersion")
    private @Nullable Output<String> engineVersion;

    /**
     * @return 数据库版本号。
     * 
     */
    public Optional<Output<String>> engineVersion() {
        return Optional.ofNullable(this.engineVersion);
    }

    /**
     * 实例到期时间。
     * 
     */
    @Import(name="expiredTime")
    private @Nullable Output<String> expiredTime;

    /**
     * @return 实例到期时间。
     * 
     */
    public Optional<Output<String>> expiredTime() {
        return Optional.ofNullable(this.expiredTime);
    }

    /**
     * Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
     * 
     */
    @Import(name="instanceClass")
    private @Nullable Output<String> instanceClass;

    /**
     * @return Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
     * 
     */
    public Optional<Output<String>> instanceClass() {
        return Optional.ofNullable(this.instanceClass);
    }

    /**
     * 实例 ID。
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return 实例 ID。
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    @Import(name="instanceShards")
    private @Nullable Output<List<InstanceInstanceShardArgs>> instanceShards;

    public Optional<Output<List<InstanceInstanceShardArgs>>> instanceShards() {
        return Optional.ofNullable(this.instanceShards);
    }

    /**
     * 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
     * 
     */
    @Import(name="maintenanceTime")
    private @Nullable Output<String> maintenanceTime;

    /**
     * @return 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
     * 
     */
    public Optional<Output<String>> maintenanceTime() {
        return Optional.ofNullable(this.maintenanceTime);
    }

    /**
     * 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * 设置实例的可用区部署方案。
     * 
     */
    @Import(name="multiAz")
    private @Nullable Output<String> multiAz;

    /**
     * @return 设置实例的可用区部署方案。
     * 
     */
    public Optional<Output<String>> multiAz() {
        return Optional.ofNullable(this.multiAz);
    }

    /**
     * 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
     * 
     */
    @Import(name="noAuthMode")
    private @Nullable Output<String> noAuthMode;

    /**
     * @return 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
     * 
     */
    public Optional<Output<String>> noAuthMode() {
        return Optional.ofNullable(this.noAuthMode);
    }

    /**
     * Proxy 和 Server 节点 ID 列表。
     * 
     */
    @Import(name="nodeIds")
    private @Nullable Output<List<String>> nodeIds;

    /**
     * @return Proxy 和 Server 节点 ID 列表。
     * 
     */
    public Optional<Output<List<String>>> nodeIds() {
        return Optional.ofNullable(this.nodeIds);
    }

    /**
     * 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
     * 
     */
    @Import(name="nodeNumber")
    private @Nullable Output<Integer> nodeNumber;

    /**
     * @return 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
     * 
     */
    public Optional<Output<Integer>> nodeNumber() {
        return Optional.ofNullable(this.nodeNumber);
    }

    /**
     * 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
     * 
     */
    @Import(name="parameterGroupId")
    private @Nullable Output<String> parameterGroupId;

    /**
     * @return 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
     * 
     */
    public Optional<Output<String>> parameterGroupId() {
        return Optional.ofNullable(this.parameterGroupId);
    }

    /**
     * 设置默认数据库 default 账号的密码。
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return 设置默认数据库 default 账号的密码。
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 实例私网连接地址的域名。
     * 
     */
    @Import(name="privateAddress")
    private @Nullable Output<String> privateAddress;

    /**
     * @return 实例私网连接地址的域名。
     * 
     */
    public Optional<Output<String>> privateAddress() {
        return Optional.ofNullable(this.privateAddress);
    }

    /**
     * 实例所属的项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 实例所属的项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
     * 
     */
    @Import(name="purchaseMonths")
    private @Nullable Output<Integer> purchaseMonths;

    /**
     * @return 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
     * 
     */
    public Optional<Output<Integer>> purchaseMonths() {
        return Optional.ofNullable(this.purchaseMonths);
    }

    /**
     * 设置是否保留额外带宽
     * 
     */
    @Import(name="reserveAdditionalBandwidth")
    private @Nullable Output<Boolean> reserveAdditionalBandwidth;

    /**
     * @return 设置是否保留额外带宽
     * 
     */
    public Optional<Output<Boolean>> reserveAdditionalBandwidth() {
        return Optional.ofNullable(this.reserveAdditionalBandwidth);
    }

    /**
     * 实例的服务类型
     * 
     */
    @Import(name="serviceType")
    private @Nullable Output<String> serviceType;

    /**
     * @return 实例的服务类型
     * 
     */
    public Optional<Output<String>> serviceType() {
        return Optional.ofNullable(this.serviceType);
    }

    /**
     * 实例中每个分片的内存容量。单位：MiB。
     * 
     */
    @Import(name="shardCapacity")
    private @Nullable Output<Integer> shardCapacity;

    /**
     * @return 实例中每个分片的内存容量。单位：MiB。
     * 
     */
    public Optional<Output<Integer>> shardCapacity() {
        return Optional.ofNullable(this.shardCapacity);
    }

    /**
     * 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
     * 
     */
    @Import(name="shardNumber")
    private @Nullable Output<Integer> shardNumber;

    /**
     * @return 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
     * 
     */
    public Optional<Output<Integer>> shardNumber() {
        return Optional.ofNullable(this.shardNumber);
    }

    /**
     * 是否启用分片集群。取值范围如下：0：不启用。1：启用。
     * 
     */
    @Import(name="shardedCluster")
    private @Nullable Output<Integer> shardedCluster;

    /**
     * @return 是否启用分片集群。取值范围如下：0：不启用。1：启用。
     * 
     */
    public Optional<Output<Integer>> shardedCluster() {
        return Optional.ofNullable(this.shardedCluster);
    }

    /**
     * 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    @Import(name="tags")
    private @Nullable Output<List<InstanceTagArgs>> tags;

    public Optional<Output<List<InstanceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
     * 
     */
    @Import(name="viPv6")
    private @Nullable Output<String> viPv6;

    /**
     * @return 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
     * 
     */
    public Optional<Output<String>> viPv6() {
        return Optional.ofNullable(this.viPv6);
    }

    /**
     * 实例私网连接地址所对应的 IPv4 地址。
     * 
     */
    @Import(name="vip")
    private @Nullable Output<String> vip;

    /**
     * @return 实例私网连接地址所对应的 IPv4 地址。
     * 
     */
    public Optional<Output<String>> vip() {
        return Optional.ofNullable(this.vip);
    }

    @Import(name="visitAddrs")
    private @Nullable Output<List<InstanceVisitAddrArgs>> visitAddrs;

    public Optional<Output<List<InstanceVisitAddrArgs>>> visitAddrs() {
        return Optional.ofNullable(this.visitAddrs);
    }

    /**
     * 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
     * 
     */
    @Import(name="vpcAuthMode")
    private @Nullable Output<String> vpcAuthMode;

    /**
     * @return 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
     * 
     */
    public Optional<Output<String>> vpcAuthMode() {
        return Optional.ofNullable(this.vpcAuthMode);
    }

    /**
     * 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * 实例所在的可用区列表。
     * 
     */
    @Import(name="zoneIds")
    private @Nullable Output<List<String>> zoneIds;

    /**
     * @return 实例所在的可用区列表。
     * 
     */
    public Optional<Output<List<String>>> zoneIds() {
        return Optional.ofNullable(this.zoneIds);
    }

    private InstanceState() {}

    private InstanceState(InstanceState $) {
        this.allowListIds = $.allowListIds;
        this.autoRenew = $.autoRenew;
        this.backupPointName = $.backupPointName;
        this.capacity = $.capacity;
        this.chargeType = $.chargeType;
        this.configureNodes = $.configureNodes;
        this.createBackup = $.createBackup;
        this.createTime = $.createTime;
        this.dataLayout = $.dataLayout;
        this.deletionProtection = $.deletionProtection;
        this.engineVersion = $.engineVersion;
        this.expiredTime = $.expiredTime;
        this.instanceClass = $.instanceClass;
        this.instanceId = $.instanceId;
        this.instanceName = $.instanceName;
        this.instanceShards = $.instanceShards;
        this.maintenanceTime = $.maintenanceTime;
        this.maxConnections = $.maxConnections;
        this.multiAz = $.multiAz;
        this.noAuthMode = $.noAuthMode;
        this.nodeIds = $.nodeIds;
        this.nodeNumber = $.nodeNumber;
        this.parameterGroupId = $.parameterGroupId;
        this.password = $.password;
        this.port = $.port;
        this.privateAddress = $.privateAddress;
        this.projectName = $.projectName;
        this.purchaseMonths = $.purchaseMonths;
        this.reserveAdditionalBandwidth = $.reserveAdditionalBandwidth;
        this.serviceType = $.serviceType;
        this.shardCapacity = $.shardCapacity;
        this.shardNumber = $.shardNumber;
        this.shardedCluster = $.shardedCluster;
        this.status = $.status;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.viPv6 = $.viPv6;
        this.vip = $.vip;
        this.visitAddrs = $.visitAddrs;
        this.vpcAuthMode = $.vpcAuthMode;
        this.vpcId = $.vpcId;
        this.zoneIds = $.zoneIds;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceState $;

        public Builder() {
            $ = new InstanceState();
        }

        public Builder(InstanceState defaults) {
            $ = new InstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param allowListIds 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
         * 
         * @return builder
         * 
         */
        public Builder allowListIds(@Nullable Output<List<String>> allowListIds) {
            $.allowListIds = allowListIds;
            return this;
        }

        /**
         * @param allowListIds 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
         * 
         * @return builder
         * 
         */
        public Builder allowListIds(List<String> allowListIds) {
            return allowListIds(Output.of(allowListIds));
        }

        /**
         * @param allowListIds 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
         * 
         * @return builder
         * 
         */
        public Builder allowListIds(String... allowListIds) {
            return allowListIds(List.of(allowListIds));
        }

        /**
         * @param autoRenew 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(@Nullable Output<Boolean> autoRenew) {
            $.autoRenew = autoRenew;
            return this;
        }

        /**
         * @param autoRenew 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
         * 
         * @return builder
         * 
         */
        public Builder autoRenew(Boolean autoRenew) {
            return autoRenew(Output.of(autoRenew));
        }

        /**
         * @param backupPointName 为变更前创建的全量备份设置备份名称。
         * 
         * @return builder
         * 
         */
        public Builder backupPointName(@Nullable Output<String> backupPointName) {
            $.backupPointName = backupPointName;
            return this;
        }

        /**
         * @param backupPointName 为变更前创建的全量备份设置备份名称。
         * 
         * @return builder
         * 
         */
        public Builder backupPointName(String backupPointName) {
            return backupPointName(Output.of(backupPointName));
        }

        /**
         * @param capacity 实例的容量信息。
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<InstanceCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity 实例的容量信息。
         * 
         * @return builder
         * 
         */
        public Builder capacity(InstanceCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param chargeType 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
         * 
         * @return builder
         * 
         */
        public Builder chargeType(@Nullable Output<String> chargeType) {
            $.chargeType = chargeType;
            return this;
        }

        /**
         * @param chargeType 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
         * 
         * @return builder
         * 
         */
        public Builder chargeType(String chargeType) {
            return chargeType(Output.of(chargeType));
        }

        public Builder configureNodes(@Nullable Output<List<InstanceConfigureNodeArgs>> configureNodes) {
            $.configureNodes = configureNodes;
            return this;
        }

        public Builder configureNodes(List<InstanceConfigureNodeArgs> configureNodes) {
            return configureNodes(Output.of(configureNodes));
        }

        public Builder configureNodes(InstanceConfigureNodeArgs... configureNodes) {
            return configureNodes(List.of(configureNodes));
        }

        /**
         * @param createBackup 是否在变更前创建备份。
         * 
         * @return builder
         * 
         */
        public Builder createBackup(@Nullable Output<Boolean> createBackup) {
            $.createBackup = createBackup;
            return this;
        }

        /**
         * @param createBackup 是否在变更前创建备份。
         * 
         * @return builder
         * 
         */
        public Builder createBackup(Boolean createBackup) {
            return createBackup(Output.of(createBackup));
        }

        /**
         * @param createTime 实例的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime 实例的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param dataLayout 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
         * 
         * @return builder
         * 
         */
        public Builder dataLayout(@Nullable Output<String> dataLayout) {
            $.dataLayout = dataLayout;
            return this;
        }

        /**
         * @param dataLayout 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
         * 
         * @return builder
         * 
         */
        public Builder dataLayout(String dataLayout) {
            return dataLayout(Output.of(dataLayout));
        }

        /**
         * @param deletionProtection 开启或关闭实例删除保护功能。
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(@Nullable Output<String> deletionProtection) {
            $.deletionProtection = deletionProtection;
            return this;
        }

        /**
         * @param deletionProtection 开启或关闭实例删除保护功能。
         * 
         * @return builder
         * 
         */
        public Builder deletionProtection(String deletionProtection) {
            return deletionProtection(Output.of(deletionProtection));
        }

        /**
         * @param engineVersion 数据库版本号。
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(@Nullable Output<String> engineVersion) {
            $.engineVersion = engineVersion;
            return this;
        }

        /**
         * @param engineVersion 数据库版本号。
         * 
         * @return builder
         * 
         */
        public Builder engineVersion(String engineVersion) {
            return engineVersion(Output.of(engineVersion));
        }

        /**
         * @param expiredTime 实例到期时间。
         * 
         * @return builder
         * 
         */
        public Builder expiredTime(@Nullable Output<String> expiredTime) {
            $.expiredTime = expiredTime;
            return this;
        }

        /**
         * @param expiredTime 实例到期时间。
         * 
         * @return builder
         * 
         */
        public Builder expiredTime(String expiredTime) {
            return expiredTime(Output.of(expiredTime));
        }

        /**
         * @param instanceClass Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(@Nullable Output<String> instanceClass) {
            $.instanceClass = instanceClass;
            return this;
        }

        /**
         * @param instanceClass Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
         * 
         * @return builder
         * 
         */
        public Builder instanceClass(String instanceClass) {
            return instanceClass(Output.of(instanceClass));
        }

        /**
         * @param instanceId 实例 ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId 实例 ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceName 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        public Builder instanceShards(@Nullable Output<List<InstanceInstanceShardArgs>> instanceShards) {
            $.instanceShards = instanceShards;
            return this;
        }

        public Builder instanceShards(List<InstanceInstanceShardArgs> instanceShards) {
            return instanceShards(Output.of(instanceShards));
        }

        public Builder instanceShards(InstanceInstanceShardArgs... instanceShards) {
            return instanceShards(List.of(instanceShards));
        }

        /**
         * @param maintenanceTime 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(@Nullable Output<String> maintenanceTime) {
            $.maintenanceTime = maintenanceTime;
            return this;
        }

        /**
         * @param maintenanceTime 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
         * 
         * @return builder
         * 
         */
        public Builder maintenanceTime(String maintenanceTime) {
            return maintenanceTime(Output.of(maintenanceTime));
        }

        /**
         * @param maxConnections 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param multiAz 设置实例的可用区部署方案。
         * 
         * @return builder
         * 
         */
        public Builder multiAz(@Nullable Output<String> multiAz) {
            $.multiAz = multiAz;
            return this;
        }

        /**
         * @param multiAz 设置实例的可用区部署方案。
         * 
         * @return builder
         * 
         */
        public Builder multiAz(String multiAz) {
            return multiAz(Output.of(multiAz));
        }

        /**
         * @param noAuthMode 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
         * 
         * @return builder
         * 
         */
        public Builder noAuthMode(@Nullable Output<String> noAuthMode) {
            $.noAuthMode = noAuthMode;
            return this;
        }

        /**
         * @param noAuthMode 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
         * 
         * @return builder
         * 
         */
        public Builder noAuthMode(String noAuthMode) {
            return noAuthMode(Output.of(noAuthMode));
        }

        /**
         * @param nodeIds Proxy 和 Server 节点 ID 列表。
         * 
         * @return builder
         * 
         */
        public Builder nodeIds(@Nullable Output<List<String>> nodeIds) {
            $.nodeIds = nodeIds;
            return this;
        }

        /**
         * @param nodeIds Proxy 和 Server 节点 ID 列表。
         * 
         * @return builder
         * 
         */
        public Builder nodeIds(List<String> nodeIds) {
            return nodeIds(Output.of(nodeIds));
        }

        /**
         * @param nodeIds Proxy 和 Server 节点 ID 列表。
         * 
         * @return builder
         * 
         */
        public Builder nodeIds(String... nodeIds) {
            return nodeIds(List.of(nodeIds));
        }

        /**
         * @param nodeNumber 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
         * 
         * @return builder
         * 
         */
        public Builder nodeNumber(@Nullable Output<Integer> nodeNumber) {
            $.nodeNumber = nodeNumber;
            return this;
        }

        /**
         * @param nodeNumber 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
         * 
         * @return builder
         * 
         */
        public Builder nodeNumber(Integer nodeNumber) {
            return nodeNumber(Output.of(nodeNumber));
        }

        /**
         * @param parameterGroupId 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
         * 
         * @return builder
         * 
         */
        public Builder parameterGroupId(@Nullable Output<String> parameterGroupId) {
            $.parameterGroupId = parameterGroupId;
            return this;
        }

        /**
         * @param parameterGroupId 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
         * 
         * @return builder
         * 
         */
        public Builder parameterGroupId(String parameterGroupId) {
            return parameterGroupId(Output.of(parameterGroupId));
        }

        /**
         * @param password 设置默认数据库 default 账号的密码。
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password 设置默认数据库 default 账号的密码。
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param port 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param privateAddress 实例私网连接地址的域名。
         * 
         * @return builder
         * 
         */
        public Builder privateAddress(@Nullable Output<String> privateAddress) {
            $.privateAddress = privateAddress;
            return this;
        }

        /**
         * @param privateAddress 实例私网连接地址的域名。
         * 
         * @return builder
         * 
         */
        public Builder privateAddress(String privateAddress) {
            return privateAddress(Output.of(privateAddress));
        }

        /**
         * @param projectName 实例所属的项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 实例所属的项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param purchaseMonths 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
         * 
         * @return builder
         * 
         */
        public Builder purchaseMonths(@Nullable Output<Integer> purchaseMonths) {
            $.purchaseMonths = purchaseMonths;
            return this;
        }

        /**
         * @param purchaseMonths 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
         * 
         * @return builder
         * 
         */
        public Builder purchaseMonths(Integer purchaseMonths) {
            return purchaseMonths(Output.of(purchaseMonths));
        }

        /**
         * @param reserveAdditionalBandwidth 设置是否保留额外带宽
         * 
         * @return builder
         * 
         */
        public Builder reserveAdditionalBandwidth(@Nullable Output<Boolean> reserveAdditionalBandwidth) {
            $.reserveAdditionalBandwidth = reserveAdditionalBandwidth;
            return this;
        }

        /**
         * @param reserveAdditionalBandwidth 设置是否保留额外带宽
         * 
         * @return builder
         * 
         */
        public Builder reserveAdditionalBandwidth(Boolean reserveAdditionalBandwidth) {
            return reserveAdditionalBandwidth(Output.of(reserveAdditionalBandwidth));
        }

        /**
         * @param serviceType 实例的服务类型
         * 
         * @return builder
         * 
         */
        public Builder serviceType(@Nullable Output<String> serviceType) {
            $.serviceType = serviceType;
            return this;
        }

        /**
         * @param serviceType 实例的服务类型
         * 
         * @return builder
         * 
         */
        public Builder serviceType(String serviceType) {
            return serviceType(Output.of(serviceType));
        }

        /**
         * @param shardCapacity 实例中每个分片的内存容量。单位：MiB。
         * 
         * @return builder
         * 
         */
        public Builder shardCapacity(@Nullable Output<Integer> shardCapacity) {
            $.shardCapacity = shardCapacity;
            return this;
        }

        /**
         * @param shardCapacity 实例中每个分片的内存容量。单位：MiB。
         * 
         * @return builder
         * 
         */
        public Builder shardCapacity(Integer shardCapacity) {
            return shardCapacity(Output.of(shardCapacity));
        }

        /**
         * @param shardNumber 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
         * 
         * @return builder
         * 
         */
        public Builder shardNumber(@Nullable Output<Integer> shardNumber) {
            $.shardNumber = shardNumber;
            return this;
        }

        /**
         * @param shardNumber 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
         * 
         * @return builder
         * 
         */
        public Builder shardNumber(Integer shardNumber) {
            return shardNumber(Output.of(shardNumber));
        }

        /**
         * @param shardedCluster 是否启用分片集群。取值范围如下：0：不启用。1：启用。
         * 
         * @return builder
         * 
         */
        public Builder shardedCluster(@Nullable Output<Integer> shardedCluster) {
            $.shardedCluster = shardedCluster;
            return this;
        }

        /**
         * @param shardedCluster 是否启用分片集群。取值范围如下：0：不启用。1：启用。
         * 
         * @return builder
         * 
         */
        public Builder shardedCluster(Integer shardedCluster) {
            return shardedCluster(Output.of(shardedCluster));
        }

        /**
         * @param status 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subnetId 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder tags(@Nullable Output<List<InstanceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<InstanceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(InstanceTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param viPv6 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
         * 
         * @return builder
         * 
         */
        public Builder viPv6(@Nullable Output<String> viPv6) {
            $.viPv6 = viPv6;
            return this;
        }

        /**
         * @param viPv6 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
         * 
         * @return builder
         * 
         */
        public Builder viPv6(String viPv6) {
            return viPv6(Output.of(viPv6));
        }

        /**
         * @param vip 实例私网连接地址所对应的 IPv4 地址。
         * 
         * @return builder
         * 
         */
        public Builder vip(@Nullable Output<String> vip) {
            $.vip = vip;
            return this;
        }

        /**
         * @param vip 实例私网连接地址所对应的 IPv4 地址。
         * 
         * @return builder
         * 
         */
        public Builder vip(String vip) {
            return vip(Output.of(vip));
        }

        public Builder visitAddrs(@Nullable Output<List<InstanceVisitAddrArgs>> visitAddrs) {
            $.visitAddrs = visitAddrs;
            return this;
        }

        public Builder visitAddrs(List<InstanceVisitAddrArgs> visitAddrs) {
            return visitAddrs(Output.of(visitAddrs));
        }

        public Builder visitAddrs(InstanceVisitAddrArgs... visitAddrs) {
            return visitAddrs(List.of(visitAddrs));
        }

        /**
         * @param vpcAuthMode 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
         * 
         * @return builder
         * 
         */
        public Builder vpcAuthMode(@Nullable Output<String> vpcAuthMode) {
            $.vpcAuthMode = vpcAuthMode;
            return this;
        }

        /**
         * @param vpcAuthMode 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
         * 
         * @return builder
         * 
         */
        public Builder vpcAuthMode(String vpcAuthMode) {
            return vpcAuthMode(Output.of(vpcAuthMode));
        }

        /**
         * @param vpcId 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param zoneIds 实例所在的可用区列表。
         * 
         * @return builder
         * 
         */
        public Builder zoneIds(@Nullable Output<List<String>> zoneIds) {
            $.zoneIds = zoneIds;
            return this;
        }

        /**
         * @param zoneIds 实例所在的可用区列表。
         * 
         * @return builder
         * 
         */
        public Builder zoneIds(List<String> zoneIds) {
            return zoneIds(Output.of(zoneIds));
        }

        /**
         * @param zoneIds 实例所在的可用区列表。
         * 
         * @return builder
         * 
         */
        public Builder zoneIds(String... zoneIds) {
            return zoneIds(List.of(zoneIds));
        }

        public InstanceState build() {
            return $;
        }
    }

}
