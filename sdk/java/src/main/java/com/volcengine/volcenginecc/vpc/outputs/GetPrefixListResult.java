// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetPrefixListAssociationsRouteTable;
import com.volcengine.volcenginecc.vpc.outputs.GetPrefixListAssociationsSecurityGroup;
import com.volcengine.volcenginecc.vpc.outputs.GetPrefixListPrefixListEntry;
import com.volcengine.volcenginecc.vpc.outputs.GetPrefixListTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPrefixListResult {
    /**
     * @return 前缀列表关联的资源数量。
     * 
     */
    private Integer associationCount;
    /**
     * @return 前缀列表关联的路由表信息。
     * 
     */
    private List<GetPrefixListAssociationsRouteTable> associationsRouteTables;
    /**
     * @return 前缀列表关联的安全组信息。
     * 
     */
    private List<GetPrefixListAssociationsSecurityGroup> associationsSecurityGroups;
    /**
     * @return 前缀列表的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    private String description;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
     * 
     */
    private String ipVersion;
    /**
     * @return 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
     * 
     */
    private Integer maxEntries;
    /**
     * @return 前缀列表条目的CIDR。
     * 
     */
    private List<GetPrefixListPrefixListEntry> prefixListEntries;
    /**
     * @return 前缀列表的ID。
     * 
     */
    private String prefixListId;
    /**
     * @return 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
     * 
     */
    private String prefixListName;
    /**
     * @return 前缀列表所属项目的名称，不填默认加入default项目。
     * 
     */
    private String projectName;
    /**
     * @return 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
     * 
     */
    private String status;
    /**
     * @return 标签列表。
     * 
     */
    private List<GetPrefixListTag> tags;
    /**
     * @return 前缀列表的最近一次修改时间。
     * 
     */
    private String updatedTime;

    private GetPrefixListResult() {}
    /**
     * @return 前缀列表关联的资源数量。
     * 
     */
    public Integer associationCount() {
        return this.associationCount;
    }
    /**
     * @return 前缀列表关联的路由表信息。
     * 
     */
    public List<GetPrefixListAssociationsRouteTable> associationsRouteTables() {
        return this.associationsRouteTables;
    }
    /**
     * @return 前缀列表关联的安全组信息。
     * 
     */
    public List<GetPrefixListAssociationsSecurityGroup> associationsSecurityGroups() {
        return this.associationsSecurityGroups;
    }
    /**
     * @return 前缀列表的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
     * 
     */
    public String ipVersion() {
        return this.ipVersion;
    }
    /**
     * @return 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
     * 
     */
    public Integer maxEntries() {
        return this.maxEntries;
    }
    /**
     * @return 前缀列表条目的CIDR。
     * 
     */
    public List<GetPrefixListPrefixListEntry> prefixListEntries() {
        return this.prefixListEntries;
    }
    /**
     * @return 前缀列表的ID。
     * 
     */
    public String prefixListId() {
        return this.prefixListId;
    }
    /**
     * @return 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
     * 
     */
    public String prefixListName() {
        return this.prefixListName;
    }
    /**
     * @return 前缀列表所属项目的名称，不填默认加入default项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 标签列表。
     * 
     */
    public List<GetPrefixListTag> tags() {
        return this.tags;
    }
    /**
     * @return 前缀列表的最近一次修改时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPrefixListResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer associationCount;
        private List<GetPrefixListAssociationsRouteTable> associationsRouteTables;
        private List<GetPrefixListAssociationsSecurityGroup> associationsSecurityGroups;
        private String createdTime;
        private String description;
        private String id;
        private String ipVersion;
        private Integer maxEntries;
        private List<GetPrefixListPrefixListEntry> prefixListEntries;
        private String prefixListId;
        private String prefixListName;
        private String projectName;
        private String status;
        private List<GetPrefixListTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetPrefixListResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.associationCount = defaults.associationCount;
    	      this.associationsRouteTables = defaults.associationsRouteTables;
    	      this.associationsSecurityGroups = defaults.associationsSecurityGroups;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.ipVersion = defaults.ipVersion;
    	      this.maxEntries = defaults.maxEntries;
    	      this.prefixListEntries = defaults.prefixListEntries;
    	      this.prefixListId = defaults.prefixListId;
    	      this.prefixListName = defaults.prefixListName;
    	      this.projectName = defaults.projectName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder associationCount(Integer associationCount) {
            if (associationCount == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "associationCount");
            }
            this.associationCount = associationCount;
            return this;
        }
        @CustomType.Setter
        public Builder associationsRouteTables(List<GetPrefixListAssociationsRouteTable> associationsRouteTables) {
            if (associationsRouteTables == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "associationsRouteTables");
            }
            this.associationsRouteTables = associationsRouteTables;
            return this;
        }
        public Builder associationsRouteTables(GetPrefixListAssociationsRouteTable... associationsRouteTables) {
            return associationsRouteTables(List.of(associationsRouteTables));
        }
        @CustomType.Setter
        public Builder associationsSecurityGroups(List<GetPrefixListAssociationsSecurityGroup> associationsSecurityGroups) {
            if (associationsSecurityGroups == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "associationsSecurityGroups");
            }
            this.associationsSecurityGroups = associationsSecurityGroups;
            return this;
        }
        public Builder associationsSecurityGroups(GetPrefixListAssociationsSecurityGroup... associationsSecurityGroups) {
            return associationsSecurityGroups(List.of(associationsSecurityGroups));
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipVersion(String ipVersion) {
            if (ipVersion == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "ipVersion");
            }
            this.ipVersion = ipVersion;
            return this;
        }
        @CustomType.Setter
        public Builder maxEntries(Integer maxEntries) {
            if (maxEntries == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "maxEntries");
            }
            this.maxEntries = maxEntries;
            return this;
        }
        @CustomType.Setter
        public Builder prefixListEntries(List<GetPrefixListPrefixListEntry> prefixListEntries) {
            if (prefixListEntries == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "prefixListEntries");
            }
            this.prefixListEntries = prefixListEntries;
            return this;
        }
        public Builder prefixListEntries(GetPrefixListPrefixListEntry... prefixListEntries) {
            return prefixListEntries(List.of(prefixListEntries));
        }
        @CustomType.Setter
        public Builder prefixListId(String prefixListId) {
            if (prefixListId == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "prefixListId");
            }
            this.prefixListId = prefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder prefixListName(String prefixListName) {
            if (prefixListName == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "prefixListName");
            }
            this.prefixListName = prefixListName;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetPrefixListTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetPrefixListTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetPrefixListResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetPrefixListResult build() {
            final var _resultValue = new GetPrefixListResult();
            _resultValue.associationCount = associationCount;
            _resultValue.associationsRouteTables = associationsRouteTables;
            _resultValue.associationsSecurityGroups = associationsSecurityGroups;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.ipVersion = ipVersion;
            _resultValue.maxEntries = maxEntries;
            _resultValue.prefixListEntries = prefixListEntries;
            _resultValue.prefixListId = prefixListId;
            _resultValue.prefixListName = prefixListName;
            _resultValue.projectName = projectName;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
