// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.transitrouter.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.transitrouter.outputs.GetTransitRouterAttachmentTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransitRouterAttachment {
    /**
     * @return 网络实例连接所属的账号ID。
     * 
     */
    private String accountId;
    /**
     * @return 是否自动同步TR路由到网络实例路由表中。true：是。false：否。
     * 
     */
    private Boolean autoPublishRouteEnabled;
    /**
     * @return 网络实例连接的业务状态。取值如下：Normal：正常。FinancialLocked：已冻结。
     * 
     */
    private String businessStatus;
    /**
     * @return 网络实例连接的创建时间。
     * 
     */
    private String creationTime;
    /**
     * @return 网络实例连接的删除时间。
     * 
     */
    private String deletedTime;
    /**
     * @return 网络实例连接的描述信息。
     * 
     */
    private String description;
    /**
     * @return 是否开启IPv6功能。true：是。false：否。
     * 
     */
    private Boolean ipv6Enabled;
    /**
     * @return 网络实例连接的欠费关停时间。
     * 
     */
    private String overdueTime;
    /**
     * @return 网络实例的ID。
     * 
     */
    private String resourceId;
    /**
     * @return 网络实例连接关联的网络实例类型。VPC：私有网络。VPN：VPN连接。DirectConnectGateway：专线网关。TransitRouter：中转路由器。
     * 
     */
    private String resourceType;
    /**
     * @return 网络实例连接的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用。
     * 
     */
    private String status;
    /**
     * @return 网络实例连接的标签信息
     * 
     */
    private List<GetTransitRouterAttachmentTag> tags;
    /**
     * @return 网络实例连接的ID。
     * 
     */
    private String transitRouterAttachmentId;
    /**
     * @return 网络实例连接的名称。
     * 
     */
    private String transitRouterAttachmentName;
    /**
     * @return 跨地域连接关联的转发策略的ID。
     * 
     */
    private String transitRouterForwardPolicyTableId;
    /**
     * @return 中转路由器实例的ID。
     * 
     */
    private String transitRouterId;
    /**
     * @return 网络实例连接关联转发的路由表ID。
     * 
     */
    private String transitRouterRouteTableId;
    /**
     * @return 跨地域连接关联的流标记策略的ID。
     * 
     */
    private String transitRouterTrafficQosMarkingPolicyId;
    /**
     * @return 跨地域连接关联的流队列策略的ID。
     * 
     */
    private String transitRouterTrafficQosQueuePolicyId;
    /**
     * @return 网络实例连接的最近操作时间。
     * 
     */
    private String updateTime;

    private GetTransitRouterAttachment() {}
    /**
     * @return 网络实例连接所属的账号ID。
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return 是否自动同步TR路由到网络实例路由表中。true：是。false：否。
     * 
     */
    public Boolean autoPublishRouteEnabled() {
        return this.autoPublishRouteEnabled;
    }
    /**
     * @return 网络实例连接的业务状态。取值如下：Normal：正常。FinancialLocked：已冻结。
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return 网络实例连接的创建时间。
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return 网络实例连接的删除时间。
     * 
     */
    public String deletedTime() {
        return this.deletedTime;
    }
    /**
     * @return 网络实例连接的描述信息。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 是否开启IPv6功能。true：是。false：否。
     * 
     */
    public Boolean ipv6Enabled() {
        return this.ipv6Enabled;
    }
    /**
     * @return 网络实例连接的欠费关停时间。
     * 
     */
    public String overdueTime() {
        return this.overdueTime;
    }
    /**
     * @return 网络实例的ID。
     * 
     */
    public String resourceId() {
        return this.resourceId;
    }
    /**
     * @return 网络实例连接关联的网络实例类型。VPC：私有网络。VPN：VPN连接。DirectConnectGateway：专线网关。TransitRouter：中转路由器。
     * 
     */
    public String resourceType() {
        return this.resourceType;
    }
    /**
     * @return 网络实例连接的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 网络实例连接的标签信息
     * 
     */
    public List<GetTransitRouterAttachmentTag> tags() {
        return this.tags;
    }
    /**
     * @return 网络实例连接的ID。
     * 
     */
    public String transitRouterAttachmentId() {
        return this.transitRouterAttachmentId;
    }
    /**
     * @return 网络实例连接的名称。
     * 
     */
    public String transitRouterAttachmentName() {
        return this.transitRouterAttachmentName;
    }
    /**
     * @return 跨地域连接关联的转发策略的ID。
     * 
     */
    public String transitRouterForwardPolicyTableId() {
        return this.transitRouterForwardPolicyTableId;
    }
    /**
     * @return 中转路由器实例的ID。
     * 
     */
    public String transitRouterId() {
        return this.transitRouterId;
    }
    /**
     * @return 网络实例连接关联转发的路由表ID。
     * 
     */
    public String transitRouterRouteTableId() {
        return this.transitRouterRouteTableId;
    }
    /**
     * @return 跨地域连接关联的流标记策略的ID。
     * 
     */
    public String transitRouterTrafficQosMarkingPolicyId() {
        return this.transitRouterTrafficQosMarkingPolicyId;
    }
    /**
     * @return 跨地域连接关联的流队列策略的ID。
     * 
     */
    public String transitRouterTrafficQosQueuePolicyId() {
        return this.transitRouterTrafficQosQueuePolicyId;
    }
    /**
     * @return 网络实例连接的最近操作时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransitRouterAttachment defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean autoPublishRouteEnabled;
        private String businessStatus;
        private String creationTime;
        private String deletedTime;
        private String description;
        private Boolean ipv6Enabled;
        private String overdueTime;
        private String resourceId;
        private String resourceType;
        private String status;
        private List<GetTransitRouterAttachmentTag> tags;
        private String transitRouterAttachmentId;
        private String transitRouterAttachmentName;
        private String transitRouterForwardPolicyTableId;
        private String transitRouterId;
        private String transitRouterRouteTableId;
        private String transitRouterTrafficQosMarkingPolicyId;
        private String transitRouterTrafficQosQueuePolicyId;
        private String updateTime;
        public Builder() {}
        public Builder(GetTransitRouterAttachment defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.autoPublishRouteEnabled = defaults.autoPublishRouteEnabled;
    	      this.businessStatus = defaults.businessStatus;
    	      this.creationTime = defaults.creationTime;
    	      this.deletedTime = defaults.deletedTime;
    	      this.description = defaults.description;
    	      this.ipv6Enabled = defaults.ipv6Enabled;
    	      this.overdueTime = defaults.overdueTime;
    	      this.resourceId = defaults.resourceId;
    	      this.resourceType = defaults.resourceType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.transitRouterAttachmentId = defaults.transitRouterAttachmentId;
    	      this.transitRouterAttachmentName = defaults.transitRouterAttachmentName;
    	      this.transitRouterForwardPolicyTableId = defaults.transitRouterForwardPolicyTableId;
    	      this.transitRouterId = defaults.transitRouterId;
    	      this.transitRouterRouteTableId = defaults.transitRouterRouteTableId;
    	      this.transitRouterTrafficQosMarkingPolicyId = defaults.transitRouterTrafficQosMarkingPolicyId;
    	      this.transitRouterTrafficQosQueuePolicyId = defaults.transitRouterTrafficQosQueuePolicyId;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder autoPublishRouteEnabled(Boolean autoPublishRouteEnabled) {
            if (autoPublishRouteEnabled == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "autoPublishRouteEnabled");
            }
            this.autoPublishRouteEnabled = autoPublishRouteEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            if (businessStatus == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "businessStatus");
            }
            this.businessStatus = businessStatus;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletedTime(String deletedTime) {
            if (deletedTime == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "deletedTime");
            }
            this.deletedTime = deletedTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Enabled(Boolean ipv6Enabled) {
            if (ipv6Enabled == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "ipv6Enabled");
            }
            this.ipv6Enabled = ipv6Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder overdueTime(String overdueTime) {
            if (overdueTime == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "overdueTime");
            }
            this.overdueTime = overdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder resourceId(String resourceId) {
            if (resourceId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "resourceId");
            }
            this.resourceId = resourceId;
            return this;
        }
        @CustomType.Setter
        public Builder resourceType(String resourceType) {
            if (resourceType == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "resourceType");
            }
            this.resourceType = resourceType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetTransitRouterAttachmentTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetTransitRouterAttachmentTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder transitRouterAttachmentId(String transitRouterAttachmentId) {
            if (transitRouterAttachmentId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterAttachmentId");
            }
            this.transitRouterAttachmentId = transitRouterAttachmentId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterAttachmentName(String transitRouterAttachmentName) {
            if (transitRouterAttachmentName == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterAttachmentName");
            }
            this.transitRouterAttachmentName = transitRouterAttachmentName;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterForwardPolicyTableId(String transitRouterForwardPolicyTableId) {
            if (transitRouterForwardPolicyTableId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterForwardPolicyTableId");
            }
            this.transitRouterForwardPolicyTableId = transitRouterForwardPolicyTableId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterId(String transitRouterId) {
            if (transitRouterId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterId");
            }
            this.transitRouterId = transitRouterId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteTableId(String transitRouterRouteTableId) {
            if (transitRouterRouteTableId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterRouteTableId");
            }
            this.transitRouterRouteTableId = transitRouterRouteTableId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterTrafficQosMarkingPolicyId(String transitRouterTrafficQosMarkingPolicyId) {
            if (transitRouterTrafficQosMarkingPolicyId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterTrafficQosMarkingPolicyId");
            }
            this.transitRouterTrafficQosMarkingPolicyId = transitRouterTrafficQosMarkingPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterTrafficQosQueuePolicyId(String transitRouterTrafficQosQueuePolicyId) {
            if (transitRouterTrafficQosQueuePolicyId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "transitRouterTrafficQosQueuePolicyId");
            }
            this.transitRouterTrafficQosQueuePolicyId = transitRouterTrafficQosQueuePolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterAttachment", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetTransitRouterAttachment build() {
            final var _resultValue = new GetTransitRouterAttachment();
            _resultValue.accountId = accountId;
            _resultValue.autoPublishRouteEnabled = autoPublishRouteEnabled;
            _resultValue.businessStatus = businessStatus;
            _resultValue.creationTime = creationTime;
            _resultValue.deletedTime = deletedTime;
            _resultValue.description = description;
            _resultValue.ipv6Enabled = ipv6Enabled;
            _resultValue.overdueTime = overdueTime;
            _resultValue.resourceId = resourceId;
            _resultValue.resourceType = resourceType;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.transitRouterAttachmentId = transitRouterAttachmentId;
            _resultValue.transitRouterAttachmentName = transitRouterAttachmentName;
            _resultValue.transitRouterForwardPolicyTableId = transitRouterForwardPolicyTableId;
            _resultValue.transitRouterId = transitRouterId;
            _resultValue.transitRouterRouteTableId = transitRouterRouteTableId;
            _resultValue.transitRouterTrafficQosMarkingPolicyId = transitRouterTrafficQosMarkingPolicyId;
            _resultValue.transitRouterTrafficQosQueuePolicyId = transitRouterTrafficQosQueuePolicyId;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
