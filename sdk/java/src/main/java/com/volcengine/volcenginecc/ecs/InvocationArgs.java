// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ecs.inputs.InvocationTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InvocationArgs extends com.pulumi.resources.ResourceArgs {

    public static final InvocationArgs Empty = new InvocationArgs();

    /**
     * 命令ID。
     * 
     */
    @Import(name="commandId", required=true)
    private Output<String> commandId;

    /**
     * @return 命令ID。
     * 
     */
    public Output<String> commandId() {
        return this.commandId;
    }

    /**
     * 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * 实例ID列表，最多支持200个ID。
     * 
     */
    @Import(name="instanceIds", required=true)
    private Output<List<String>> instanceIds;

    /**
     * @return 实例ID列表，最多支持200个ID。
     * 
     */
    public Output<List<String>> instanceIds() {
        return this.instanceIds;
    }

    /**
     * 作业描述，默认为空字符串，不超过256个字符。
     * 
     */
    @Import(name="invocationDescription")
    private @Nullable Output<String> invocationDescription;

    /**
     * @return 作业描述，默认为空字符串，不超过256个字符。
     * 
     */
    public Optional<Output<String>> invocationDescription() {
        return Optional.ofNullable(this.invocationDescription);
    }

    /**
     * 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
     * 
     */
    @Import(name="invocationName", required=true)
    private Output<String> invocationName;

    /**
     * @return 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
     * 
     */
    public Output<String> invocationName() {
        return this.invocationName;
    }

    /**
     * 执行时间。
     * 
     */
    @Import(name="launchTime")
    private @Nullable Output<String> launchTime;

    /**
     * @return 执行时间。
     * 
     */
    public Optional<Output<String>> launchTime() {
        return Optional.ofNullable(this.launchTime);
    }

    /**
     * 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    /**
     * @return 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
     * 
     */
    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 周期结束时间，仅适用于周期任务（Rate）。
     * 
     */
    @Import(name="recurrenceEndTime")
    private @Nullable Output<String> recurrenceEndTime;

    /**
     * @return 周期结束时间，仅适用于周期任务（Rate）。
     * 
     */
    public Optional<Output<String>> recurrenceEndTime() {
        return Optional.ofNullable(this.recurrenceEndTime);
    }

    /**
     * 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
     * 
     */
    @Import(name="repeatMode")
    private @Nullable Output<String> repeatMode;

    /**
     * @return 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
     * 
     */
    public Optional<Output<String>> repeatMode() {
        return Optional.ofNullable(this.repeatMode);
    }

    @Import(name="tags")
    private @Nullable Output<List<InvocationTagArgs>> tags;

    public Optional<Output<List<InvocationTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * 在ECS实例中执行命令的用户名称。
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return 在ECS实例中执行命令的用户名称。
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * 自定义windows用户的密码。
     * 
     */
    @Import(name="windowsPassword")
    private @Nullable Output<String> windowsPassword;

    /**
     * @return 自定义windows用户的密码。
     * 
     */
    public Optional<Output<String>> windowsPassword() {
        return Optional.ofNullable(this.windowsPassword);
    }

    /**
     * 创建的命令在ECS实例中运行的目录。
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private InvocationArgs() {}

    private InvocationArgs(InvocationArgs $) {
        this.commandId = $.commandId;
        this.frequency = $.frequency;
        this.instanceIds = $.instanceIds;
        this.invocationDescription = $.invocationDescription;
        this.invocationName = $.invocationName;
        this.launchTime = $.launchTime;
        this.parameters = $.parameters;
        this.projectName = $.projectName;
        this.recurrenceEndTime = $.recurrenceEndTime;
        this.repeatMode = $.repeatMode;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.username = $.username;
        this.windowsPassword = $.windowsPassword;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InvocationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InvocationArgs $;

        public Builder() {
            $ = new InvocationArgs();
        }

        public Builder(InvocationArgs defaults) {
            $ = new InvocationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commandId 命令ID。
         * 
         * @return builder
         * 
         */
        public Builder commandId(Output<String> commandId) {
            $.commandId = commandId;
            return this;
        }

        /**
         * @param commandId 命令ID。
         * 
         * @return builder
         * 
         */
        public Builder commandId(String commandId) {
            return commandId(Output.of(commandId));
        }

        /**
         * @param frequency 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param instanceIds 实例ID列表，最多支持200个ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(Output<List<String>> instanceIds) {
            $.instanceIds = instanceIds;
            return this;
        }

        /**
         * @param instanceIds 实例ID列表，最多支持200个ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(List<String> instanceIds) {
            return instanceIds(Output.of(instanceIds));
        }

        /**
         * @param instanceIds 实例ID列表，最多支持200个ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }

        /**
         * @param invocationDescription 作业描述，默认为空字符串，不超过256个字符。
         * 
         * @return builder
         * 
         */
        public Builder invocationDescription(@Nullable Output<String> invocationDescription) {
            $.invocationDescription = invocationDescription;
            return this;
        }

        /**
         * @param invocationDescription 作业描述，默认为空字符串，不超过256个字符。
         * 
         * @return builder
         * 
         */
        public Builder invocationDescription(String invocationDescription) {
            return invocationDescription(Output.of(invocationDescription));
        }

        /**
         * @param invocationName 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
         * 
         * @return builder
         * 
         */
        public Builder invocationName(Output<String> invocationName) {
            $.invocationName = invocationName;
            return this;
        }

        /**
         * @param invocationName 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
         * 
         * @return builder
         * 
         */
        public Builder invocationName(String invocationName) {
            return invocationName(Output.of(invocationName));
        }

        /**
         * @param launchTime 执行时间。
         * 
         * @return builder
         * 
         */
        public Builder launchTime(@Nullable Output<String> launchTime) {
            $.launchTime = launchTime;
            return this;
        }

        /**
         * @param launchTime 执行时间。
         * 
         * @return builder
         * 
         */
        public Builder launchTime(String launchTime) {
            return launchTime(Output.of(launchTime));
        }

        /**
         * @param parameters 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param projectName 资源所属项目，一个资源只能归属于一个项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 资源所属项目，一个资源只能归属于一个项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param recurrenceEndTime 周期结束时间，仅适用于周期任务（Rate）。
         * 
         * @return builder
         * 
         */
        public Builder recurrenceEndTime(@Nullable Output<String> recurrenceEndTime) {
            $.recurrenceEndTime = recurrenceEndTime;
            return this;
        }

        /**
         * @param recurrenceEndTime 周期结束时间，仅适用于周期任务（Rate）。
         * 
         * @return builder
         * 
         */
        public Builder recurrenceEndTime(String recurrenceEndTime) {
            return recurrenceEndTime(Output.of(recurrenceEndTime));
        }

        /**
         * @param repeatMode 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
         * 
         * @return builder
         * 
         */
        public Builder repeatMode(@Nullable Output<String> repeatMode) {
            $.repeatMode = repeatMode;
            return this;
        }

        /**
         * @param repeatMode 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
         * 
         * @return builder
         * 
         */
        public Builder repeatMode(String repeatMode) {
            return repeatMode(Output.of(repeatMode));
        }

        public Builder tags(@Nullable Output<List<InvocationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<InvocationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(InvocationTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeout 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param username 在ECS实例中执行命令的用户名称。
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username 在ECS实例中执行命令的用户名称。
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param windowsPassword 自定义windows用户的密码。
         * 
         * @return builder
         * 
         */
        public Builder windowsPassword(@Nullable Output<String> windowsPassword) {
            $.windowsPassword = windowsPassword;
            return this;
        }

        /**
         * @param windowsPassword 自定义windows用户的密码。
         * 
         * @return builder
         * 
         */
        public Builder windowsPassword(String windowsPassword) {
            return windowsPassword(Output.of(windowsPassword));
        }

        /**
         * @param workingDir 创建的命令在ECS实例中运行的目录。
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir 创建的命令在ECS实例中运行的目录。
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public InvocationArgs build() {
            if ($.commandId == null) {
                throw new MissingRequiredPropertyException("InvocationArgs", "commandId");
            }
            if ($.instanceIds == null) {
                throw new MissingRequiredPropertyException("InvocationArgs", "instanceIds");
            }
            if ($.invocationName == null) {
                throw new MissingRequiredPropertyException("InvocationArgs", "invocationName");
            }
            return $;
        }
    }

}
