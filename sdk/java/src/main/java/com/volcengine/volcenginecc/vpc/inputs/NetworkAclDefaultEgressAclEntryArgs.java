// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkAclDefaultEgressAclEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final NetworkAclDefaultEgressAclEntryArgs Empty = new NetworkAclDefaultEgressAclEntryArgs();

    /**
     * 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
     * 
     */
    @Import(name="cidrIp")
    private @Nullable Output<String> cidrIp;

    /**
     * @return 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
     * 
     */
    public Optional<Output<String>> cidrIp() {
        return Optional.ofNullable(this.cidrIp);
    }

    /**
     * 规则的描述信息。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 规则的描述信息。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 规则的ID。
     * 
     */
    @Import(name="networkAclEntryId")
    private @Nullable Output<String> networkAclEntryId;

    /**
     * @return 规则的ID。
     * 
     */
    public Optional<Output<String>> networkAclEntryId() {
        return Optional.ofNullable(this.networkAclEntryId);
    }

    /**
     * 规则的名称。
     * 
     */
    @Import(name="networkAclEntryName")
    private @Nullable Output<String> networkAclEntryName;

    /**
     * @return 规则的名称。
     * 
     */
    public Optional<Output<String>> networkAclEntryName() {
        return Optional.ofNullable(this.networkAclEntryName);
    }

    /**
     * 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private NetworkAclDefaultEgressAclEntryArgs() {}

    private NetworkAclDefaultEgressAclEntryArgs(NetworkAclDefaultEgressAclEntryArgs $) {
        this.cidrIp = $.cidrIp;
        this.description = $.description;
        this.networkAclEntryId = $.networkAclEntryId;
        this.networkAclEntryName = $.networkAclEntryName;
        this.policy = $.policy;
        this.port = $.port;
        this.priority = $.priority;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkAclDefaultEgressAclEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkAclDefaultEgressAclEntryArgs $;

        public Builder() {
            $ = new NetworkAclDefaultEgressAclEntryArgs();
        }

        public Builder(NetworkAclDefaultEgressAclEntryArgs defaults) {
            $ = new NetworkAclDefaultEgressAclEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrIp 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
         * 
         * @return builder
         * 
         */
        public Builder cidrIp(@Nullable Output<String> cidrIp) {
            $.cidrIp = cidrIp;
            return this;
        }

        /**
         * @param cidrIp 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
         * 
         * @return builder
         * 
         */
        public Builder cidrIp(String cidrIp) {
            return cidrIp(Output.of(cidrIp));
        }

        /**
         * @param description 规则的描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 规则的描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param networkAclEntryId 规则的ID。
         * 
         * @return builder
         * 
         */
        public Builder networkAclEntryId(@Nullable Output<String> networkAclEntryId) {
            $.networkAclEntryId = networkAclEntryId;
            return this;
        }

        /**
         * @param networkAclEntryId 规则的ID。
         * 
         * @return builder
         * 
         */
        public Builder networkAclEntryId(String networkAclEntryId) {
            return networkAclEntryId(Output.of(networkAclEntryId));
        }

        /**
         * @param networkAclEntryName 规则的名称。
         * 
         * @return builder
         * 
         */
        public Builder networkAclEntryName(@Nullable Output<String> networkAclEntryName) {
            $.networkAclEntryName = networkAclEntryName;
            return this;
        }

        /**
         * @param networkAclEntryName 规则的名称。
         * 
         * @return builder
         * 
         */
        public Builder networkAclEntryName(String networkAclEntryName) {
            return networkAclEntryName(Output.of(networkAclEntryName));
        }

        /**
         * @param policy 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param port 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param priority 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param protocol 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public NetworkAclDefaultEgressAclEntryArgs build() {
            return $;
        }
    }

}
