// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.alb.inputs.LoadBalancerZoneMappingLoadBalancerAddressEipPopLocationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerZoneMappingLoadBalancerAddressEipArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerZoneMappingLoadBalancerAddressEipArgs Empty = new LoadBalancerZoneMappingLoadBalancerAddressEipArgs();

    /**
     * EIP的绑定模式，例如Default或Normal。
     * 
     */
    @Import(name="associationMode")
    private @Nullable Output<String> associationMode;

    /**
     * @return EIP的绑定模式，例如Default或Normal。
     * 
     */
    public Optional<Output<String>> associationMode() {
        return Optional.ofNullable(this.associationMode);
    }

    /**
     * EIP的带宽峰值，单位为Mbps。
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return EIP的带宽峰值，单位为Mbps。
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * 弹性公网IP（EIP）的地址。
     * 
     */
    @Import(name="eipAddress")
    private @Nullable Output<String> eipAddress;

    /**
     * @return 弹性公网IP（EIP）的地址。
     * 
     */
    public Optional<Output<String>> eipAddress() {
        return Optional.ofNullable(this.eipAddress);
    }

    /**
     * EIP的计费方式，2为按带宽计费，3为按流量计费。
     * 
     */
    @Import(name="eipBillingType")
    private @Nullable Output<Integer> eipBillingType;

    /**
     * @return EIP的计费方式，2为按带宽计费，3为按流量计费。
     * 
     */
    public Optional<Output<Integer>> eipBillingType() {
        return Optional.ofNullable(this.eipBillingType);
    }

    /**
     * EIP的类型，例如静态BGP。
     * 
     */
    @Import(name="eipType")
    private @Nullable Output<String> eipType;

    /**
     * @return EIP的类型，例如静态BGP。
     * 
     */
    public Optional<Output<String>> eipType() {
        return Optional.ofNullable(this.eipType);
    }

    /**
     * 公网IP的线路类型，BGP表示多线。
     * 
     */
    @Import(name="isp")
    private @Nullable Output<String> isp;

    /**
     * @return 公网IP的线路类型，BGP表示多线。
     * 
     */
    public Optional<Output<String>> isp() {
        return Optional.ofNullable(this.isp);
    }

    @Import(name="popLocations")
    private @Nullable Output<List<LoadBalancerZoneMappingLoadBalancerAddressEipPopLocationArgs>> popLocations;

    public Optional<Output<List<LoadBalancerZoneMappingLoadBalancerAddressEipPopLocationArgs>>> popLocations() {
        return Optional.ofNullable(this.popLocations);
    }

    private LoadBalancerZoneMappingLoadBalancerAddressEipArgs() {}

    private LoadBalancerZoneMappingLoadBalancerAddressEipArgs(LoadBalancerZoneMappingLoadBalancerAddressEipArgs $) {
        this.associationMode = $.associationMode;
        this.bandwidth = $.bandwidth;
        this.eipAddress = $.eipAddress;
        this.eipBillingType = $.eipBillingType;
        this.eipType = $.eipType;
        this.isp = $.isp;
        this.popLocations = $.popLocations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerZoneMappingLoadBalancerAddressEipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerZoneMappingLoadBalancerAddressEipArgs $;

        public Builder() {
            $ = new LoadBalancerZoneMappingLoadBalancerAddressEipArgs();
        }

        public Builder(LoadBalancerZoneMappingLoadBalancerAddressEipArgs defaults) {
            $ = new LoadBalancerZoneMappingLoadBalancerAddressEipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associationMode EIP的绑定模式，例如Default或Normal。
         * 
         * @return builder
         * 
         */
        public Builder associationMode(@Nullable Output<String> associationMode) {
            $.associationMode = associationMode;
            return this;
        }

        /**
         * @param associationMode EIP的绑定模式，例如Default或Normal。
         * 
         * @return builder
         * 
         */
        public Builder associationMode(String associationMode) {
            return associationMode(Output.of(associationMode));
        }

        /**
         * @param bandwidth EIP的带宽峰值，单位为Mbps。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth EIP的带宽峰值，单位为Mbps。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param eipAddress 弹性公网IP（EIP）的地址。
         * 
         * @return builder
         * 
         */
        public Builder eipAddress(@Nullable Output<String> eipAddress) {
            $.eipAddress = eipAddress;
            return this;
        }

        /**
         * @param eipAddress 弹性公网IP（EIP）的地址。
         * 
         * @return builder
         * 
         */
        public Builder eipAddress(String eipAddress) {
            return eipAddress(Output.of(eipAddress));
        }

        /**
         * @param eipBillingType EIP的计费方式，2为按带宽计费，3为按流量计费。
         * 
         * @return builder
         * 
         */
        public Builder eipBillingType(@Nullable Output<Integer> eipBillingType) {
            $.eipBillingType = eipBillingType;
            return this;
        }

        /**
         * @param eipBillingType EIP的计费方式，2为按带宽计费，3为按流量计费。
         * 
         * @return builder
         * 
         */
        public Builder eipBillingType(Integer eipBillingType) {
            return eipBillingType(Output.of(eipBillingType));
        }

        /**
         * @param eipType EIP的类型，例如静态BGP。
         * 
         * @return builder
         * 
         */
        public Builder eipType(@Nullable Output<String> eipType) {
            $.eipType = eipType;
            return this;
        }

        /**
         * @param eipType EIP的类型，例如静态BGP。
         * 
         * @return builder
         * 
         */
        public Builder eipType(String eipType) {
            return eipType(Output.of(eipType));
        }

        /**
         * @param isp 公网IP的线路类型，BGP表示多线。
         * 
         * @return builder
         * 
         */
        public Builder isp(@Nullable Output<String> isp) {
            $.isp = isp;
            return this;
        }

        /**
         * @param isp 公网IP的线路类型，BGP表示多线。
         * 
         * @return builder
         * 
         */
        public Builder isp(String isp) {
            return isp(Output.of(isp));
        }

        public Builder popLocations(@Nullable Output<List<LoadBalancerZoneMappingLoadBalancerAddressEipPopLocationArgs>> popLocations) {
            $.popLocations = popLocations;
            return this;
        }

        public Builder popLocations(List<LoadBalancerZoneMappingLoadBalancerAddressEipPopLocationArgs> popLocations) {
            return popLocations(Output.of(popLocations));
        }

        public Builder popLocations(LoadBalancerZoneMappingLoadBalancerAddressEipPopLocationArgs... popLocations) {
            return popLocations(List.of(popLocations));
        }

        public LoadBalancerZoneMappingLoadBalancerAddressEipArgs build() {
            return $;
        }
    }

}
