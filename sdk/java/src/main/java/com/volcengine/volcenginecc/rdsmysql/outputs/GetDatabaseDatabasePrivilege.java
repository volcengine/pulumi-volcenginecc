// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.rdsmysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseDatabasePrivilege {
    /**
     * @return 数据库账号名称。
     * 
     */
    private String accountName;
    /**
     * @return 授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。
     * 
     */
    private String accountPrivilege;
    /**
     * @return 数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。
     * 
     */
    private String accountPrivilegeDetail;
    /**
     * @return 指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，
     * 
     */
    private String host;

    private GetDatabaseDatabasePrivilege() {}
    /**
     * @return 数据库账号名称。
     * 
     */
    public String accountName() {
        return this.accountName;
    }
    /**
     * @return 授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。
     * 
     */
    public String accountPrivilege() {
        return this.accountPrivilege;
    }
    /**
     * @return 数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。
     * 
     */
    public String accountPrivilegeDetail() {
        return this.accountPrivilegeDetail;
    }
    /**
     * @return 指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，
     * 
     */
    public String host() {
        return this.host;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseDatabasePrivilege defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountName;
        private String accountPrivilege;
        private String accountPrivilegeDetail;
        private String host;
        public Builder() {}
        public Builder(GetDatabaseDatabasePrivilege defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountName = defaults.accountName;
    	      this.accountPrivilege = defaults.accountPrivilege;
    	      this.accountPrivilegeDetail = defaults.accountPrivilegeDetail;
    	      this.host = defaults.host;
        }

        @CustomType.Setter
        public Builder accountName(String accountName) {
            if (accountName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabasePrivilege", "accountName");
            }
            this.accountName = accountName;
            return this;
        }
        @CustomType.Setter
        public Builder accountPrivilege(String accountPrivilege) {
            if (accountPrivilege == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabasePrivilege", "accountPrivilege");
            }
            this.accountPrivilege = accountPrivilege;
            return this;
        }
        @CustomType.Setter
        public Builder accountPrivilegeDetail(String accountPrivilegeDetail) {
            if (accountPrivilegeDetail == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabasePrivilege", "accountPrivilegeDetail");
            }
            this.accountPrivilegeDetail = accountPrivilegeDetail;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetDatabaseDatabasePrivilege", "host");
            }
            this.host = host;
            return this;
        }
        public GetDatabaseDatabasePrivilege build() {
            final var _resultValue = new GetDatabaseDatabasePrivilege();
            _resultValue.accountName = accountName;
            _resultValue.accountPrivilege = accountPrivilege;
            _resultValue.accountPrivilegeDetail = accountPrivilegeDetail;
            _resultValue.host = host;
            return _resultValue;
        }
    }
}
