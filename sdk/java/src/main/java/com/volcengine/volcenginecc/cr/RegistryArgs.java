// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.cr;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.cr.inputs.RegistryTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryArgs extends com.pulumi.resources.ResourceArgs {

    public static final RegistryArgs Empty = new RegistryArgs();

    /**
     * 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * 填写实例需要关联的项目。一个实例仅支持关联一个项目
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return 填写实例需要关联的项目。一个实例仅支持关联一个项目
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    @Import(name="tags")
    private @Nullable Output<List<RegistryTagArgs>> tags;

    public Optional<Output<List<RegistryTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RegistryArgs() {}

    private RegistryArgs(RegistryArgs $) {
        this.name = $.name;
        this.project = $.project;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryArgs $;

        public Builder() {
            $ = new RegistryArgs();
        }

        public Builder(RegistryArgs defaults) {
            $ = new RegistryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project 填写实例需要关联的项目。一个实例仅支持关联一个项目
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project 填写实例需要关联的项目。一个实例仅支持关联一个项目
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        public Builder tags(@Nullable Output<List<RegistryTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<RegistryTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(RegistryTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RegistryArgs build() {
            if ($.name == null) {
                throw new MissingRequiredPropertyException("RegistryArgs", "name");
            }
            return $;
        }
    }

}
