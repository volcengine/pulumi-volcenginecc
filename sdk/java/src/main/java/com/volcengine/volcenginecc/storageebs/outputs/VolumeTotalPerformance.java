// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.storageebs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class VolumeTotalPerformance {
    /**
     * @return 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
     * 
     */
    private @Nullable Double iops;
    /**
     * @return 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
     * 
     */
    private @Nullable Double throughput;

    private VolumeTotalPerformance() {}
    /**
     * @return 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
     * 
     */
    public Optional<Double> iops() {
        return Optional.ofNullable(this.iops);
    }
    /**
     * @return 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
     * 
     */
    public Optional<Double> throughput() {
        return Optional.ofNullable(this.throughput);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(VolumeTotalPerformance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Double iops;
        private @Nullable Double throughput;
        public Builder() {}
        public Builder(VolumeTotalPerformance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.iops = defaults.iops;
    	      this.throughput = defaults.throughput;
        }

        @CustomType.Setter
        public Builder iops(@Nullable Double iops) {

            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder throughput(@Nullable Double throughput) {

            this.throughput = throughput;
            return this;
        }
        public VolumeTotalPerformance build() {
            final var _resultValue = new VolumeTotalPerformance();
            _resultValue.iops = iops;
            _resultValue.throughput = throughput;
            return _resultValue;
        }
    }
}
