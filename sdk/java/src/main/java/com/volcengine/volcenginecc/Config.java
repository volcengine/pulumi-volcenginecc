// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc;

import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.config.inputs.AssumeRole;
import com.volcengine.volcenginecc.config.inputs.Endpoints;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("volcenginecc");
/**
 * The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
 * environment variable
 * 
 */
    public Optional<String> accessKey() {
        return Codegen.stringProp("accessKey").config(config).env("VOLCENGINE_ACCESS_KEY").get();
    }
/**
 * An `assume_role` block (documented below). Only one `assume_role` block may be in the configuration.
 * 
 */
    public Optional<AssumeRole> assumeRole() {
        return Codegen.objectProp("assumeRole", AssumeRole.class).config(config).get();
    }
/**
 * CUSTOMER HEADERS for Volcengine Provider. The customer_headers field uses commas (,) to separate multiple headers, and
 * colons (:) to separate each header key from its corresponding value.
 * 
 */
    public Optional<String> customerHeaders() {
        return Codegen.stringProp("customerHeaders").config(config).env("VOLCENGINE_CUSTOMER_HEADERS").get();
    }
/**
 * Disable SSL for Volcengine Provider
 * 
 */
    public Optional<Boolean> disableSsl() {
        return Codegen.booleanProp("disableSsl").config(config).env("VOLCENGINE_DISABLE_SSL").get();
    }
/**
 * An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
 * 
 */
    public Optional<Endpoints> endpoints() {
        return Codegen.objectProp("endpoints", Endpoints.class).config(config).get();
    }
/**
 * PROXY URL for Volcengine Provider
 * 
 */
    public Optional<String> proxyUrl() {
        return Codegen.stringProp("proxyUrl").config(config).env("VOLCENGINE_PROXY_URL").get();
    }
/**
 * The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
 * environment variable
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).env("VOLCENGINE_REGION").get();
    }
/**
 * he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
 * environment variable
 * 
 */
    public Optional<String> secretKey() {
        return Codegen.stringProp("secretKey").config(config).env("VOLCENGINE_SECRET_KEY").get();
    }
}
