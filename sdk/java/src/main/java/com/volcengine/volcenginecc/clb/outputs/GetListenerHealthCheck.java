// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetListenerHealthCheck {
    /**
     * @return 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
     * 
     */
    private String domain;
    /**
     * @return 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
     * 
     */
    private String enabled;
    /**
     * @return 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
     * 
     */
    private String httpCode;
    /**
     * @return 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
     * 
     */
    private Integer interval;
    /**
     * @return 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
     * 
     */
    private String method;
    /**
     * @return 健康检查的端口，取值范围为1-65535。
     * 
     */
    private Integer port;
    /**
     * @return 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
     * 
     */
    private Integer timeout;
    /**
     * @return 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    private String udpExpect;
    /**
     * @return 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    private String udpRequest;
    /**
     * @return 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    private Integer unhealthyThreshold;
    /**
     * @return 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&amp;、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
     * 
     */
    private String uri;

    private GetListenerHealthCheck() {}
    /**
     * @return 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
     * 
     */
    public String enabled() {
        return this.enabled;
    }
    /**
     * @return 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
     * 
     */
    public String httpCode() {
        return this.httpCode;
    }
    /**
     * @return 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return 健康检查的端口，取值范围为1-65535。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    public String udpExpect() {
        return this.udpExpect;
    }
    /**
     * @return 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    public String udpRequest() {
        return this.udpRequest;
    }
    /**
     * @return 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }
    /**
     * @return 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&amp;、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domain;
        private String enabled;
        private Integer healthyThreshold;
        private String httpCode;
        private Integer interval;
        private String method;
        private Integer port;
        private Integer timeout;
        private String udpExpect;
        private String udpRequest;
        private Integer unhealthyThreshold;
        private String uri;
        public Builder() {}
        public Builder(GetListenerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.enabled = defaults.enabled;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCode = defaults.httpCode;
    	      this.interval = defaults.interval;
    	      this.method = defaults.method;
    	      this.port = defaults.port;
    	      this.timeout = defaults.timeout;
    	      this.udpExpect = defaults.udpExpect;
    	      this.udpRequest = defaults.udpRequest;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(String enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            if (healthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "healthyThreshold");
            }
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder httpCode(String httpCode) {
            if (httpCode == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "httpCode");
            }
            this.httpCode = httpCode;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder udpExpect(String udpExpect) {
            if (udpExpect == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "udpExpect");
            }
            this.udpExpect = udpExpect;
            return this;
        }
        @CustomType.Setter
        public Builder udpRequest(String udpRequest) {
            if (udpRequest == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "udpRequest");
            }
            this.udpRequest = udpRequest;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetListenerHealthCheck", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetListenerHealthCheck build() {
            final var _resultValue = new GetListenerHealthCheck();
            _resultValue.domain = domain;
            _resultValue.enabled = enabled;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.httpCode = httpCode;
            _resultValue.interval = interval;
            _resultValue.method = method;
            _resultValue.port = port;
            _resultValue.timeout = timeout;
            _resultValue.udpExpect = udpExpect;
            _resultValue.udpRequest = udpRequest;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
