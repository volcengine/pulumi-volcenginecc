// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetNlbListenerHealth;
import com.volcengine.volcenginecc.clb.outputs.GetNlbListenerTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNlbListenerResult {
    /**
     * @return TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     * 
     */
    private String certificateId;
    /**
     * @return 监听器的连接超时时间（秒）。
     * 
     */
    private Integer connectionTimeout;
    /**
     * @return 监听器的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 监听器描述信息。
     * 
     */
    private String description;
    /**
     * @return 是否启用监听器。true：开启；false：关闭。
     * 
     */
    private Boolean enabled;
    /**
     * @return 全端口监听的结束端口，仅当Port为0时有效。
     * 
     */
    private Integer endPort;
    /**
     * @return 后端实例健康检查响应信息。
     * 
     */
    private List<GetNlbListenerHealth> healths;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 监听器唯一标识。
     * 
     */
    private String listenerId;
    /**
     * @return 监听器名称。
     * 
     */
    private String listenerName;
    /**
     * @return 负载均衡实例ID。
     * 
     */
    private String loadBalancerId;
    /**
     * @return 监听器接收请求的端口，0表示启用全端口监听。
     * 
     */
    private Integer port;
    /**
     * @return 监听协议类型。
     * 
     */
    private String protocol;
    /**
     * @return TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     * 
     */
    private String securityPolicyId;
    /**
     * @return 监听器关联的服务器组ID。
     * 
     */
    private String serverGroupId;
    /**
     * @return 全端口监听的起始端口，仅当Port为0时有效。
     * 
     */
    private Integer startPort;
    /**
     * @return 监听器的状态。
     * 
     */
    private String status;
    /**
     * @return 资源标签。
     * 
     */
    private List<GetNlbListenerTag> tags;
    /**
     * @return 监听器最近操作时间。
     * 
     */
    private String updatedTime;

    private GetNlbListenerResult() {}
    /**
     * @return TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return 监听器的连接超时时间（秒）。
     * 
     */
    public Integer connectionTimeout() {
        return this.connectionTimeout;
    }
    /**
     * @return 监听器的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 监听器描述信息。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 是否启用监听器。true：开启；false：关闭。
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return 全端口监听的结束端口，仅当Port为0时有效。
     * 
     */
    public Integer endPort() {
        return this.endPort;
    }
    /**
     * @return 后端实例健康检查响应信息。
     * 
     */
    public List<GetNlbListenerHealth> healths() {
        return this.healths;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 监听器唯一标识。
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return 监听器名称。
     * 
     */
    public String listenerName() {
        return this.listenerName;
    }
    /**
     * @return 负载均衡实例ID。
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return 监听器接收请求的端口，0表示启用全端口监听。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 监听协议类型。
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     * 
     */
    public String securityPolicyId() {
        return this.securityPolicyId;
    }
    /**
     * @return 监听器关联的服务器组ID。
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return 全端口监听的起始端口，仅当Port为0时有效。
     * 
     */
    public Integer startPort() {
        return this.startPort;
    }
    /**
     * @return 监听器的状态。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 资源标签。
     * 
     */
    public List<GetNlbListenerTag> tags() {
        return this.tags;
    }
    /**
     * @return 监听器最近操作时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNlbListenerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateId;
        private Integer connectionTimeout;
        private String createdTime;
        private String description;
        private Boolean enabled;
        private Integer endPort;
        private List<GetNlbListenerHealth> healths;
        private String id;
        private String listenerId;
        private String listenerName;
        private String loadBalancerId;
        private Integer port;
        private String protocol;
        private String securityPolicyId;
        private String serverGroupId;
        private Integer startPort;
        private String status;
        private List<GetNlbListenerTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetNlbListenerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.connectionTimeout = defaults.connectionTimeout;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.endPort = defaults.endPort;
    	      this.healths = defaults.healths;
    	      this.id = defaults.id;
    	      this.listenerId = defaults.listenerId;
    	      this.listenerName = defaults.listenerName;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.securityPolicyId = defaults.securityPolicyId;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.startPort = defaults.startPort;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionTimeout(Integer connectionTimeout) {
            if (connectionTimeout == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "connectionTimeout");
            }
            this.connectionTimeout = connectionTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder endPort(Integer endPort) {
            if (endPort == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "endPort");
            }
            this.endPort = endPort;
            return this;
        }
        @CustomType.Setter
        public Builder healths(List<GetNlbListenerHealth> healths) {
            if (healths == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "healths");
            }
            this.healths = healths;
            return this;
        }
        public Builder healths(GetNlbListenerHealth... healths) {
            return healths(List.of(healths));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder listenerName(String listenerName) {
            if (listenerName == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "listenerName");
            }
            this.listenerName = listenerName;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicyId(String securityPolicyId) {
            if (securityPolicyId == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "securityPolicyId");
            }
            this.securityPolicyId = securityPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder startPort(Integer startPort) {
            if (startPort == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "startPort");
            }
            this.startPort = startPort;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetNlbListenerTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetNlbListenerTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetNlbListenerResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetNlbListenerResult build() {
            final var _resultValue = new GetNlbListenerResult();
            _resultValue.certificateId = certificateId;
            _resultValue.connectionTimeout = connectionTimeout;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.endPort = endPort;
            _resultValue.healths = healths;
            _resultValue.id = id;
            _resultValue.listenerId = listenerId;
            _resultValue.listenerName = listenerName;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.securityPolicyId = securityPolicyId;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.startPort = startPort;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
