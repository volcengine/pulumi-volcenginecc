// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.ecs.KeypairArgs;
import com.volcengine.volcenginecc.ecs.inputs.KeypairState;
import com.volcengine.volcenginecc.ecs.outputs.KeypairTag;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ECS 密钥对（Keypair）默认采用 RSA 2048 位加密算法生成一对关联密钥，包含公钥（public key）和私钥（private key）。其中，公钥用于对数据进行加密处理，可将明文转换为不可直接读取的密文；私钥则作为解密的唯一凭证，能将密文还原为原始明文，实现安全的身份验证与数据传输。
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.volcengine.volcenginecc.ecs.Keypair;
 * import com.volcengine.volcenginecc.ecs.KeypairArgs;
 * import com.pulumi.volcenginecc.ecs.inputs.KeypairTagArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var eCSKeypairDemo = new Keypair("eCSKeypairDemo", KeypairArgs.builder()
 *             .keyPairName("ECSKeypairDemo")
 *             .projectName("default")
 *             .description("ECSKeypairDemo Description")
 *             .tags(KeypairTagArgs.builder()
 *                 .key("env")
 *                 .value("test")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:ecs/keypair:Keypair example &#34;key_pair_name&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:ecs/keypair:Keypair")
public class Keypair extends com.pulumi.resources.CustomResource {
    /**
     * 密钥对创建时间。
     * 
     */
    @Export(name="createdTime", refs={String.class}, tree="[0]")
    private Output<String> createdTime;

    /**
     * @return 密钥对创建时间。
     * 
     */
    public Output<String> createdTime() {
        return this.createdTime;
    }
    /**
     * 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * 密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。
     * 
     */
    @Export(name="fingerPrint", refs={String.class}, tree="[0]")
    private Output<String> fingerPrint;

    /**
     * @return 密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。
     * 
     */
    public Output<String> fingerPrint() {
        return this.fingerPrint;
    }
    /**
     * 操作的实例ID。
     * 
     */
    @Export(name="instanceIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> instanceIds;

    /**
     * @return 操作的实例ID。
     * 
     */
    public Output<List<String>> instanceIds() {
        return this.instanceIds;
    }
    /**
     * 密钥对唯一ID。
     * 
     */
    @Export(name="keyPairId", refs={String.class}, tree="[0]")
    private Output<String> keyPairId;

    /**
     * @return 密钥对唯一ID。
     * 
     */
    public Output<String> keyPairId() {
        return this.keyPairId;
    }
    /**
     * 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     * 
     */
    @Export(name="keyPairName", refs={String.class}, tree="[0]")
    private Output<String> keyPairName;

    /**
     * @return 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     * 
     */
    public Output<String> keyPairName() {
        return this.keyPairName;
    }
    /**
     * 密钥对私钥信息。
     * 
     */
    @Export(name="privateKey", refs={String.class}, tree="[0]")
    private Output<String> privateKey;

    /**
     * @return 密钥对私钥信息。
     * 
     */
    public Output<String> privateKey() {
        return this.privateKey;
    }
    /**
     * 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     * 
     */
    @Export(name="projectName", refs={String.class}, tree="[0]")
    private Output<String> projectName;

    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }
    /**
     * 密钥对的公钥信息。
     * 
     */
    @Export(name="publicKey", refs={String.class}, tree="[0]")
    private Output<String> publicKey;

    /**
     * @return 密钥对的公钥信息。
     * 
     */
    public Output<String> publicKey() {
        return this.publicKey;
    }
    @Export(name="tags", refs={List.class,KeypairTag.class}, tree="[0,1]")
    private Output<List<KeypairTag>> tags;

    public Output<List<KeypairTag>> tags() {
        return this.tags;
    }
    /**
     * 密钥对更新时间。
     * 
     */
    @Export(name="updatedTime", refs={String.class}, tree="[0]")
    private Output<String> updatedTime;

    /**
     * @return 密钥对更新时间。
     * 
     */
    public Output<String> updatedTime() {
        return this.updatedTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Keypair(java.lang.String name) {
        this(name, KeypairArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Keypair(java.lang.String name, KeypairArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Keypair(java.lang.String name, KeypairArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:ecs/keypair:Keypair", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Keypair(java.lang.String name, Output<java.lang.String> id, @Nullable KeypairState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:ecs/keypair:Keypair", name, state, makeResourceOptions(options, id), false);
    }

    private static KeypairArgs makeArgs(KeypairArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? KeypairArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Keypair get(java.lang.String name, Output<java.lang.String> id, @Nullable KeypairState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Keypair(name, id, state, options);
    }
}
