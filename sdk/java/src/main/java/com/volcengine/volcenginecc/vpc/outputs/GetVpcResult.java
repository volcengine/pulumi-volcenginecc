// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetVpcAssociateCen;
import com.volcengine.volcenginecc.vpc.outputs.GetVpcTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVpcResult {
    /**
     * @return VPC所属账号的ID。
     * 
     */
    private String accountId;
    /**
     * @return VPC关联的CEN信息。
     * 
     */
    private List<GetVpcAssociateCen> associateCens;
    /**
     * @return VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
     * 
     */
    private String cidrBlock;
    /**
     * @return 创建VPC的时间。
     * 
     */
    private String creationTime;
    /**
     * @return VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
     * 
     */
    private String description;
    /**
     * @return VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&amp;分隔。不填则配置为默认DNS服务器地址。
     * 
     */
    private List<String> dnsServers;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return VPC 绑定的 IPv4 网关的 ID。
     * 
     */
    private String ipv4GatewayId;
    /**
     * @return VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
     * 
     */
    private String ipv6CidrBlock;
    /**
     * @return 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
     * 
     */
    private Boolean isDefault;
    /**
     * @return VPC中创建的NAT网关的ID。
     * 
     */
    private List<String> natGatewayIds;
    /**
     * @return VPC中的网络ACL的数量。
     * 
     */
    private String networkAclNum;
    /**
     * @return VPC所属项目的名称。不填默认加入default项目。
     * 
     */
    private String projectName;
    /**
     * @return VPC关联的路由表ID。
     * 
     */
    private List<String> routeTableIds;
    /**
     * @return VPC的辅助网段。
     * 
     */
    private List<String> secondaryCidrBlocks;
    /**
     * @return VPC中安全组的列表。
     * 
     */
    private List<String> securityGroupIds;
    /**
     * @return VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
     * 
     */
    private String status;
    /**
     * @return VPC中子网的列表。
     * 
     */
    private List<String> subnetIds;
    /**
     * @return VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
     * 
     */
    private Boolean supportIpv4Gateway;
    /**
     * @return 私有网络绑定的标签。
     * 
     */
    private List<GetVpcTag> tags;
    /**
     * @return 更新VPC的时间。
     * 
     */
    private String updateTime;
    /**
     * @return VPC的用户网段。
     * 
     */
    private List<String> userCidrBlocks;
    /**
     * @return VPC的ID。
     * 
     */
    private String vpcId;
    /**
     * @return VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
     * 
     */
    private String vpcName;

    private GetVpcResult() {}
    /**
     * @return VPC所属账号的ID。
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return VPC关联的CEN信息。
     * 
     */
    public List<GetVpcAssociateCen> associateCens() {
        return this.associateCens;
    }
    /**
     * @return VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return 创建VPC的时间。
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&amp;分隔。不填则配置为默认DNS服务器地址。
     * 
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return VPC 绑定的 IPv4 网关的 ID。
     * 
     */
    public String ipv4GatewayId() {
        return this.ipv4GatewayId;
    }
    /**
     * @return VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
     * 
     */
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    /**
     * @return 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return VPC中创建的NAT网关的ID。
     * 
     */
    public List<String> natGatewayIds() {
        return this.natGatewayIds;
    }
    /**
     * @return VPC中的网络ACL的数量。
     * 
     */
    public String networkAclNum() {
        return this.networkAclNum;
    }
    /**
     * @return VPC所属项目的名称。不填默认加入default项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return VPC关联的路由表ID。
     * 
     */
    public List<String> routeTableIds() {
        return this.routeTableIds;
    }
    /**
     * @return VPC的辅助网段。
     * 
     */
    public List<String> secondaryCidrBlocks() {
        return this.secondaryCidrBlocks;
    }
    /**
     * @return VPC中安全组的列表。
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }
    /**
     * @return VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return VPC中子网的列表。
     * 
     */
    public List<String> subnetIds() {
        return this.subnetIds;
    }
    /**
     * @return VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
     * 
     */
    public Boolean supportIpv4Gateway() {
        return this.supportIpv4Gateway;
    }
    /**
     * @return 私有网络绑定的标签。
     * 
     */
    public List<GetVpcTag> tags() {
        return this.tags;
    }
    /**
     * @return 更新VPC的时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return VPC的用户网段。
     * 
     */
    public List<String> userCidrBlocks() {
        return this.userCidrBlocks;
    }
    /**
     * @return VPC的ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
     * 
     */
    public String vpcName() {
        return this.vpcName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVpcResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<GetVpcAssociateCen> associateCens;
        private String cidrBlock;
        private String creationTime;
        private String description;
        private List<String> dnsServers;
        private String id;
        private String ipv4GatewayId;
        private String ipv6CidrBlock;
        private Boolean isDefault;
        private List<String> natGatewayIds;
        private String networkAclNum;
        private String projectName;
        private List<String> routeTableIds;
        private List<String> secondaryCidrBlocks;
        private List<String> securityGroupIds;
        private String status;
        private List<String> subnetIds;
        private Boolean supportIpv4Gateway;
        private List<GetVpcTag> tags;
        private String updateTime;
        private List<String> userCidrBlocks;
        private String vpcId;
        private String vpcName;
        public Builder() {}
        public Builder(GetVpcResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.associateCens = defaults.associateCens;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.dnsServers = defaults.dnsServers;
    	      this.id = defaults.id;
    	      this.ipv4GatewayId = defaults.ipv4GatewayId;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.isDefault = defaults.isDefault;
    	      this.natGatewayIds = defaults.natGatewayIds;
    	      this.networkAclNum = defaults.networkAclNum;
    	      this.projectName = defaults.projectName;
    	      this.routeTableIds = defaults.routeTableIds;
    	      this.secondaryCidrBlocks = defaults.secondaryCidrBlocks;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.status = defaults.status;
    	      this.subnetIds = defaults.subnetIds;
    	      this.supportIpv4Gateway = defaults.supportIpv4Gateway;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
    	      this.userCidrBlocks = defaults.userCidrBlocks;
    	      this.vpcId = defaults.vpcId;
    	      this.vpcName = defaults.vpcName;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder associateCens(List<GetVpcAssociateCen> associateCens) {
            if (associateCens == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "associateCens");
            }
            this.associateCens = associateCens;
            return this;
        }
        public Builder associateCens(GetVpcAssociateCen... associateCens) {
            return associateCens(List.of(associateCens));
        }
        @CustomType.Setter
        public Builder cidrBlock(String cidrBlock) {
            if (cidrBlock == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "cidrBlock");
            }
            this.cidrBlock = cidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsServers(List<String> dnsServers) {
            if (dnsServers == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "dnsServers");
            }
            this.dnsServers = dnsServers;
            return this;
        }
        public Builder dnsServers(String... dnsServers) {
            return dnsServers(List.of(dnsServers));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4GatewayId(String ipv4GatewayId) {
            if (ipv4GatewayId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "ipv4GatewayId");
            }
            this.ipv4GatewayId = ipv4GatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            if (ipv6CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "ipv6CidrBlock");
            }
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder natGatewayIds(List<String> natGatewayIds) {
            if (natGatewayIds == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "natGatewayIds");
            }
            this.natGatewayIds = natGatewayIds;
            return this;
        }
        public Builder natGatewayIds(String... natGatewayIds) {
            return natGatewayIds(List.of(natGatewayIds));
        }
        @CustomType.Setter
        public Builder networkAclNum(String networkAclNum) {
            if (networkAclNum == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "networkAclNum");
            }
            this.networkAclNum = networkAclNum;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder routeTableIds(List<String> routeTableIds) {
            if (routeTableIds == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "routeTableIds");
            }
            this.routeTableIds = routeTableIds;
            return this;
        }
        public Builder routeTableIds(String... routeTableIds) {
            return routeTableIds(List.of(routeTableIds));
        }
        @CustomType.Setter
        public Builder secondaryCidrBlocks(List<String> secondaryCidrBlocks) {
            if (secondaryCidrBlocks == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "secondaryCidrBlocks");
            }
            this.secondaryCidrBlocks = secondaryCidrBlocks;
            return this;
        }
        public Builder secondaryCidrBlocks(String... secondaryCidrBlocks) {
            return secondaryCidrBlocks(List.of(secondaryCidrBlocks));
        }
        @CustomType.Setter
        public Builder securityGroupIds(List<String> securityGroupIds) {
            if (securityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "securityGroupIds");
            }
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetIds(List<String> subnetIds) {
            if (subnetIds == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "subnetIds");
            }
            this.subnetIds = subnetIds;
            return this;
        }
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }
        @CustomType.Setter
        public Builder supportIpv4Gateway(Boolean supportIpv4Gateway) {
            if (supportIpv4Gateway == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "supportIpv4Gateway");
            }
            this.supportIpv4Gateway = supportIpv4Gateway;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetVpcTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetVpcTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder userCidrBlocks(List<String> userCidrBlocks) {
            if (userCidrBlocks == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "userCidrBlocks");
            }
            this.userCidrBlocks = userCidrBlocks;
            return this;
        }
        public Builder userCidrBlocks(String... userCidrBlocks) {
            return userCidrBlocks(List.of(userCidrBlocks));
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcName(String vpcName) {
            if (vpcName == null) {
              throw new MissingRequiredPropertyException("GetVpcResult", "vpcName");
            }
            this.vpcName = vpcName;
            return this;
        }
        public GetVpcResult build() {
            final var _resultValue = new GetVpcResult();
            _resultValue.accountId = accountId;
            _resultValue.associateCens = associateCens;
            _resultValue.cidrBlock = cidrBlock;
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.dnsServers = dnsServers;
            _resultValue.id = id;
            _resultValue.ipv4GatewayId = ipv4GatewayId;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.isDefault = isDefault;
            _resultValue.natGatewayIds = natGatewayIds;
            _resultValue.networkAclNum = networkAclNum;
            _resultValue.projectName = projectName;
            _resultValue.routeTableIds = routeTableIds;
            _resultValue.secondaryCidrBlocks = secondaryCidrBlocks;
            _resultValue.securityGroupIds = securityGroupIds;
            _resultValue.status = status;
            _resultValue.subnetIds = subnetIds;
            _resultValue.supportIpv4Gateway = supportIpv4Gateway;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            _resultValue.userCidrBlocks = userCidrBlocks;
            _resultValue.vpcId = vpcId;
            _resultValue.vpcName = vpcName;
            return _resultValue;
        }
    }
}
