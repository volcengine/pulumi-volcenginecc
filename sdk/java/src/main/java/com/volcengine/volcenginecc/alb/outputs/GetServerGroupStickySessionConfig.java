// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerGroupStickySessionConfig {
    /**
     * @return 服务配置的会话保持 Cookie 名称。仅在开启会话保持功能并选择重写 Cookie 时有效。 具体规则如下：Cookie 名称长度为1~200个字符。名称只能包含 ASCII 英文字母和数字字符，不能包含半角逗号（,）、半角分号（;）或空格，也不能以美元符号（$）开头。当 tickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 server时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，该参数无效。
     * 
     */
    private String cookie;
    /**
     * @return 会话保持 Cookie 超时时间。仅在开启会话保持功能并选择植入 Cookie 时有效。 单位：秒。具体规则如下：超时时间的取值范围：1～86400。 默认值为：1000。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionType 为 server 时，此参数无效。
     * 
     */
    private Integer cookieTimeout;
    /**
     * @return 是否开启会话保持功能。on：开启；off（默认值）：关闭。
     * 
     */
    private String stickySessionEnabled;
    /**
     * @return 对 Cookie 的处理方式。当 StickySessionConfig.StickySessionEnabled 值为 on 时，此字段参数必填。取值如下：insert：植入 Cookie；ALB 会记录客户端请求第一次转发到的后端服务器。ALB 在返回请求中植入 Cookie ，后续客户端请求携带此 Cookie，ALB 会将请求转发到之前记录的后端服务器上。server：重写 Cookie；开启重写 Cookie 的会话保持后，在客户端请求第一次转发到后端服务器后，ALB 在返回请求中发现您自定义的 Cookie 时，会对原来的 Cookie 进行重写。后续客户端请求携带改写后的 Cookie，ALB 会将请求转发到之前记录的后端服务器上。
     * 
     */
    private String stickySessionType;

    private GetServerGroupStickySessionConfig() {}
    /**
     * @return 服务配置的会话保持 Cookie 名称。仅在开启会话保持功能并选择重写 Cookie 时有效。 具体规则如下：Cookie 名称长度为1~200个字符。名称只能包含 ASCII 英文字母和数字字符，不能包含半角逗号（,）、半角分号（;）或空格，也不能以美元符号（$）开头。当 tickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 server时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，该参数无效。
     * 
     */
    public String cookie() {
        return this.cookie;
    }
    /**
     * @return 会话保持 Cookie 超时时间。仅在开启会话保持功能并选择植入 Cookie 时有效。 单位：秒。具体规则如下：超时时间的取值范围：1～86400。 默认值为：1000。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionConfig.StickySessionType 为 insert 时，此参数必填。当 StickySessionConfig.StickySessionEnabled 值为 on，且 StickySessionType 为 server 时，此参数无效。
     * 
     */
    public Integer cookieTimeout() {
        return this.cookieTimeout;
    }
    /**
     * @return 是否开启会话保持功能。on：开启；off（默认值）：关闭。
     * 
     */
    public String stickySessionEnabled() {
        return this.stickySessionEnabled;
    }
    /**
     * @return 对 Cookie 的处理方式。当 StickySessionConfig.StickySessionEnabled 值为 on 时，此字段参数必填。取值如下：insert：植入 Cookie；ALB 会记录客户端请求第一次转发到的后端服务器。ALB 在返回请求中植入 Cookie ，后续客户端请求携带此 Cookie，ALB 会将请求转发到之前记录的后端服务器上。server：重写 Cookie；开启重写 Cookie 的会话保持后，在客户端请求第一次转发到后端服务器后，ALB 在返回请求中发现您自定义的 Cookie 时，会对原来的 Cookie 进行重写。后续客户端请求携带改写后的 Cookie，ALB 会将请求转发到之前记录的后端服务器上。
     * 
     */
    public String stickySessionType() {
        return this.stickySessionType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupStickySessionConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cookie;
        private Integer cookieTimeout;
        private String stickySessionEnabled;
        private String stickySessionType;
        public Builder() {}
        public Builder(GetServerGroupStickySessionConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cookie = defaults.cookie;
    	      this.cookieTimeout = defaults.cookieTimeout;
    	      this.stickySessionEnabled = defaults.stickySessionEnabled;
    	      this.stickySessionType = defaults.stickySessionType;
        }

        @CustomType.Setter
        public Builder cookie(String cookie) {
            if (cookie == null) {
              throw new MissingRequiredPropertyException("GetServerGroupStickySessionConfig", "cookie");
            }
            this.cookie = cookie;
            return this;
        }
        @CustomType.Setter
        public Builder cookieTimeout(Integer cookieTimeout) {
            if (cookieTimeout == null) {
              throw new MissingRequiredPropertyException("GetServerGroupStickySessionConfig", "cookieTimeout");
            }
            this.cookieTimeout = cookieTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionEnabled(String stickySessionEnabled) {
            if (stickySessionEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerGroupStickySessionConfig", "stickySessionEnabled");
            }
            this.stickySessionEnabled = stickySessionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionType(String stickySessionType) {
            if (stickySessionType == null) {
              throw new MissingRequiredPropertyException("GetServerGroupStickySessionConfig", "stickySessionType");
            }
            this.stickySessionType = stickySessionType;
            return this;
        }
        public GetServerGroupStickySessionConfig build() {
            final var _resultValue = new GetServerGroupStickySessionConfig();
            _resultValue.cookie = cookie;
            _resultValue.cookieTimeout = cookieTimeout;
            _resultValue.stickySessionEnabled = stickySessionEnabled;
            _resultValue.stickySessionType = stickySessionType;
            return _resultValue;
        }
    }
}
