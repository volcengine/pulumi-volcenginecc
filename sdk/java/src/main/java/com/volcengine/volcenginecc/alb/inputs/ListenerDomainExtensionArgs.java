// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerDomainExtensionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ListenerDomainExtensionArgs Empty = new ListenerDomainExtensionArgs();

    /**
     * 域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。
     * 
     */
    @Import(name="certCenterCertificateId")
    private @Nullable Output<String> certCenterCertificateId;

    /**
     * @return 域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。
     * 
     */
    public Optional<Output<String>> certCenterCertificateId() {
        return Optional.ofNullable(this.certCenterCertificateId);
    }

    /**
     * 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
     * 
     */
    @Import(name="certificateSource")
    private @Nullable Output<String> certificateSource;

    /**
     * @return 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
     * 
     */
    public Optional<Output<String>> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }

    /**
     * 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    @Import(name="pcaLeafCertificateId")
    private @Nullable Output<String> pcaLeafCertificateId;

    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    public Optional<Output<String>> pcaLeafCertificateId() {
        return Optional.ofNullable(this.pcaLeafCertificateId);
    }

    /**
     * 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
     * 
     */
    @Import(name="san")
    private @Nullable Output<String> san;

    /**
     * @return 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
     * 
     */
    public Optional<Output<String>> san() {
        return Optional.ofNullable(this.san);
    }

    private ListenerDomainExtensionArgs() {}

    private ListenerDomainExtensionArgs(ListenerDomainExtensionArgs $) {
        this.certCenterCertificateId = $.certCenterCertificateId;
        this.certificateId = $.certificateId;
        this.certificateSource = $.certificateSource;
        this.domain = $.domain;
        this.pcaLeafCertificateId = $.pcaLeafCertificateId;
        this.san = $.san;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerDomainExtensionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerDomainExtensionArgs $;

        public Builder() {
            $ = new ListenerDomainExtensionArgs();
        }

        public Builder(ListenerDomainExtensionArgs defaults) {
            $ = new ListenerDomainExtensionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param certCenterCertificateId 域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。
         * 
         * @return builder
         * 
         */
        public Builder certCenterCertificateId(@Nullable Output<String> certCenterCertificateId) {
            $.certCenterCertificateId = certCenterCertificateId;
            return this;
        }

        /**
         * @param certCenterCertificateId 域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。
         * 
         * @return builder
         * 
         */
        public Builder certCenterCertificateId(String certCenterCertificateId) {
            return certCenterCertificateId(Output.of(certCenterCertificateId));
        }

        /**
         * @param certificateId 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateSource 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(@Nullable Output<String> certificateSource) {
            $.certificateSource = certificateSource;
            return this;
        }

        /**
         * @param certificateSource 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(String certificateSource) {
            return certificateSource(Output.of(certificateSource));
        }

        /**
         * @param domain 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param pcaLeafCertificateId HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
         * 
         * @return builder
         * 
         */
        public Builder pcaLeafCertificateId(@Nullable Output<String> pcaLeafCertificateId) {
            $.pcaLeafCertificateId = pcaLeafCertificateId;
            return this;
        }

        /**
         * @param pcaLeafCertificateId HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
         * 
         * @return builder
         * 
         */
        public Builder pcaLeafCertificateId(String pcaLeafCertificateId) {
            return pcaLeafCertificateId(Output.of(pcaLeafCertificateId));
        }

        /**
         * @param san 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
         * 
         * @return builder
         * 
         */
        public Builder san(@Nullable Output<String> san) {
            $.san = san;
            return this;
        }

        /**
         * @param san 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
         * 
         * @return builder
         * 
         */
        public Builder san(String san) {
            return san(Output.of(san));
        }

        public ListenerDomainExtensionArgs build() {
            return $;
        }
    }

}
