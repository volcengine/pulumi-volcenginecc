// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.ecs.ImageArgs;
import com.volcengine.volcenginecc.ecs.inputs.ImageState;
import com.volcengine.volcenginecc.ecs.outputs.ImageDetectionResults;
import com.volcengine.volcenginecc.ecs.outputs.ImageSnapshot;
import com.volcengine.volcenginecc.ecs.outputs.ImageTag;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * 镜像是包含了云服务器实例所需的基本操作系统、应用数据的特殊文件。创建实例时，必须选择镜像。
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:ecs/image:Image example &#34;image_id&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:ecs/image:Image")
public class Image extends com.pulumi.resources.CustomResource {
    /**
     * 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
     * 
     */
    @Export(name="architecture", refs={String.class}, tree="[0]")
    private Output<String> architecture;

    /**
     * @return 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
     * 
     */
    public Output<String> architecture() {
        return this.architecture;
    }
    /**
     * 镜像的启动模式。可以选择BIOS、UEFI类型。
     * 
     */
    @Export(name="bootMode", refs={String.class}, tree="[0]")
    private Output<String> bootMode;

    /**
     * @return 镜像的启动模式。可以选择BIOS、UEFI类型。
     * 
     */
    public Output<String> bootMode() {
        return this.bootMode;
    }
    /**
     * 镜像创建时间
     * 
     */
    @Export(name="createdAt", refs={String.class}, tree="[0]")
    private Output<String> createdAt;

    /**
     * @return 镜像创建时间
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * 镜像的检测结果。
     * 
     */
    @Export(name="detectionResults", refs={ImageDetectionResults.class}, tree="[0]")
    private Output<ImageDetectionResults> detectionResults;

    /**
     * @return 镜像的检测结果。
     * 
     */
    public Output<ImageDetectionResults> detectionResults() {
        return this.detectionResults;
    }
    /**
     * 镜像ID。
     * 
     */
    @Export(name="imageId", refs={String.class}, tree="[0]")
    private Output<String> imageId;

    /**
     * @return 镜像ID。
     * 
     */
    public Output<String> imageId() {
        return this.imageId;
    }
    /**
     * 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
     * 
     */
    @Export(name="imageName", refs={String.class}, tree="[0]")
    private Output<String> imageName;

    /**
     * @return 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
     * 
     */
    public Output<String> imageName() {
        return this.imageName;
    }
    /**
     * 镜像所属的账号ID。
     * 
     */
    @Export(name="imageOwnerId", refs={String.class}, tree="[0]")
    private Output<String> imageOwnerId;

    /**
     * @return 镜像所属的账号ID。
     * 
     */
    public Output<String> imageOwnerId() {
        return this.imageOwnerId;
    }
    /**
     * 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
     * 
     */
    @Export(name="instanceId", refs={String.class}, tree="[0]")
    private Output<String> instanceId;

    /**
     * @return 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }
    /**
     * 镜像中是否安装了云助手Agent。
     * 
     */
    @Export(name="isInstallRunCommandAgent", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isInstallRunCommandAgent;

    /**
     * @return 镜像中是否安装了云助手Agent。
     * 
     */
    public Output<Boolean> isInstallRunCommandAgent() {
        return this.isInstallRunCommandAgent;
    }
    /**
     * 公共镜像是否长期维护。
     * 
     */
    @Export(name="isLts", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isLts;

    /**
     * @return 公共镜像是否长期维护。
     * 
     */
    public Output<Boolean> isLts() {
        return this.isLts;
    }
    /**
     * 镜像是否支持Cloud-init。
     * 
     */
    @Export(name="isSupportCloudInit", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> isSupportCloudInit;

    /**
     * @return 镜像是否支持Cloud-init。
     * 
     */
    public Output<Boolean> isSupportCloudInit() {
        return this.isSupportCloudInit;
    }
    /**
     * 镜像的内核版本。
     * 
     */
    @Export(name="kernel", refs={String.class}, tree="[0]")
    private Output<String> kernel;

    /**
     * @return 镜像的内核版本。
     * 
     */
    public Output<String> kernel() {
        return this.kernel;
    }
    /**
     * 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
     * 
     */
    @Export(name="licenseType", refs={String.class}, tree="[0]")
    private Output<String> licenseType;

    /**
     * @return 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
     * 
     */
    public Output<String> licenseType() {
        return this.licenseType;
    }
    /**
     * 镜像操作系统的名称。
     * 
     */
    @Export(name="osName", refs={String.class}, tree="[0]")
    private Output<String> osName;

    /**
     * @return 镜像操作系统的名称。
     * 
     */
    public Output<String> osName() {
        return this.osName;
    }
    /**
     * 操作系统类型。
     * 
     */
    @Export(name="osType", refs={String.class}, tree="[0]")
    private Output<String> osType;

    /**
     * @return 操作系统类型。
     * 
     */
    public Output<String> osType() {
        return this.osType;
    }
    /**
     * 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
     * 
     */
    @Export(name="platform", refs={String.class}, tree="[0]")
    private Output<String> platform;

    /**
     * @return 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
     * 
     */
    public Output<String> platform() {
        return this.platform;
    }
    /**
     * 镜像的发行版本。
     * 
     */
    @Export(name="platformVersion", refs={String.class}, tree="[0]")
    private Output<String> platformVersion;

    /**
     * @return 镜像的发行版本。
     * 
     */
    public Output<String> platformVersion() {
        return this.platformVersion;
    }
    /**
     * 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
     * 
     */
    @Export(name="projectName", refs={String.class}, tree="[0]")
    private Output<String> projectName;

    /**
     * @return 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }
    /**
     * 镜像共享的账户
     * 
     */
    @Export(name="sharePermissions", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> sharePermissions;

    /**
     * @return 镜像共享的账户
     * 
     */
    public Output<List<String>> sharePermissions() {
        return this.sharePermissions;
    }
    /**
     * 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
     * 
     */
    @Export(name="shareStatus", refs={String.class}, tree="[0]")
    private Output<String> shareStatus;

    /**
     * @return 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
     * 
     */
    public Output<String> shareStatus() {
        return this.shareStatus;
    }
    /**
     * 镜像大小，单位为GiB。
     * 
     */
    @Export(name="size", refs={Integer.class}, tree="[0]")
    private Output<Integer> size;

    /**
     * @return 镜像大小，单位为GiB。
     * 
     */
    public Output<Integer> size() {
        return this.size;
    }
    /**
     * 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
     * 
     */
    @Export(name="snapshotGroupId", refs={String.class}, tree="[0]")
    private Output<String> snapshotGroupId;

    /**
     * @return 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
     * 
     */
    public Output<String> snapshotGroupId() {
        return this.snapshotGroupId;
    }
    /**
     * 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
     * 
     */
    @Export(name="snapshotId", refs={String.class}, tree="[0]")
    private Output<String> snapshotId;

    /**
     * @return 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
     * 
     */
    public Output<String> snapshotId() {
        return this.snapshotId;
    }
    @Export(name="snapshots", refs={List.class,ImageSnapshot.class}, tree="[0,1]")
    private Output<List<ImageSnapshot>> snapshots;

    public Output<List<ImageSnapshot>> snapshots() {
        return this.snapshots;
    }
    /**
     * 镜像的状态。
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return 镜像的状态。
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    @Export(name="tags", refs={List.class,ImageTag.class}, tree="[0,1]")
    private Output<List<ImageTag>> tags;

    public Output<List<ImageTag>> tags() {
        return this.tags;
    }
    /**
     * 镜像更新时间
     * 
     */
    @Export(name="updatedAt", refs={String.class}, tree="[0]")
    private Output<String> updatedAt;

    /**
     * @return 镜像更新时间
     * 
     */
    public Output<String> updatedAt() {
        return this.updatedAt;
    }
    /**
     * 镜像大小，单位为Byte。
     * 
     */
    @Export(name="virtualSize", refs={Double.class}, tree="[0]")
    private Output<Double> virtualSize;

    /**
     * @return 镜像大小，单位为Byte。
     * 
     */
    public Output<Double> virtualSize() {
        return this.virtualSize;
    }
    /**
     * 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
     * 
     */
    @Export(name="visibility", refs={String.class}, tree="[0]")
    private Output<String> visibility;

    /**
     * @return 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
     * 
     */
    public Output<String> visibility() {
        return this.visibility;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Image(java.lang.String name) {
        this(name, ImageArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Image(java.lang.String name, ImageArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Image(java.lang.String name, ImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:ecs/image:Image", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Image(java.lang.String name, Output<java.lang.String> id, @Nullable ImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:ecs/image:Image", name, state, makeResourceOptions(options, id), false);
    }

    private static ImageArgs makeArgs(ImageArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ImageArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Image get(java.lang.String name, Output<java.lang.String> id, @Nullable ImageState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Image(name, id, state, options);
    }
}
