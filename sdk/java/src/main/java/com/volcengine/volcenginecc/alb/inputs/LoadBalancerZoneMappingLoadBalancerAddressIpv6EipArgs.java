// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs extends com.pulumi.resources.ResourceArgs {

    public static final LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs Empty = new LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs();

    /**
     * IPv6 EIP的带宽峰值，单位为Mbps。
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return IPv6 EIP的带宽峰值，单位为Mbps。
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * IPv6 EIP的计费方式，2为按带宽计费，3为按流量计费。
     * 
     */
    @Import(name="billingType")
    private @Nullable Output<Integer> billingType;

    /**
     * @return IPv6 EIP的计费方式，2为按带宽计费，3为按流量计费。
     * 
     */
    public Optional<Output<Integer>> billingType() {
        return Optional.ofNullable(this.billingType);
    }

    /**
     * IPv6公网IP的线路类型，BGP表示多线。
     * 
     */
    @Import(name="isp")
    private @Nullable Output<String> isp;

    /**
     * @return IPv6公网IP的线路类型，BGP表示多线。
     * 
     */
    public Optional<Output<String>> isp() {
        return Optional.ofNullable(this.isp);
    }

    private LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs() {}

    private LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs(LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs $) {
        this.bandwidth = $.bandwidth;
        this.billingType = $.billingType;
        this.isp = $.isp;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs $;

        public Builder() {
            $ = new LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs();
        }

        public Builder(LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs defaults) {
            $ = new LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth IPv6 EIP的带宽峰值，单位为Mbps。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth IPv6 EIP的带宽峰值，单位为Mbps。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param billingType IPv6 EIP的计费方式，2为按带宽计费，3为按流量计费。
         * 
         * @return builder
         * 
         */
        public Builder billingType(@Nullable Output<Integer> billingType) {
            $.billingType = billingType;
            return this;
        }

        /**
         * @param billingType IPv6 EIP的计费方式，2为按带宽计费，3为按流量计费。
         * 
         * @return builder
         * 
         */
        public Builder billingType(Integer billingType) {
            return billingType(Output.of(billingType));
        }

        /**
         * @param isp IPv6公网IP的线路类型，BGP表示多线。
         * 
         * @return builder
         * 
         */
        public Builder isp(@Nullable Output<String> isp) {
            $.isp = isp;
            return this;
        }

        /**
         * @param isp IPv6公网IP的线路类型，BGP表示多线。
         * 
         * @return builder
         * 
         */
        public Builder isp(String isp) {
            return isp(Output.of(isp));
        }

        public LoadBalancerZoneMappingLoadBalancerAddressIpv6EipArgs build() {
            return $;
        }
    }

}
