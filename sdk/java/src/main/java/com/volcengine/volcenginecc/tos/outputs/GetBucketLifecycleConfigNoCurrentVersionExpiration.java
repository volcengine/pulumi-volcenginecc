// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetBucketLifecycleConfigNoCurrentVersionExpiration {
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
     * 
     */
    private String nonCurrentDate;
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
     * 
     */
    private Integer nonCurrentDays;

    private GetBucketLifecycleConfigNoCurrentVersionExpiration() {}
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
     * 
     */
    public String nonCurrentDate() {
        return this.nonCurrentDate;
    }
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
     * 
     */
    public Integer nonCurrentDays() {
        return this.nonCurrentDays;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketLifecycleConfigNoCurrentVersionExpiration defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String nonCurrentDate;
        private Integer nonCurrentDays;
        public Builder() {}
        public Builder(GetBucketLifecycleConfigNoCurrentVersionExpiration defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nonCurrentDate = defaults.nonCurrentDate;
    	      this.nonCurrentDays = defaults.nonCurrentDays;
        }

        @CustomType.Setter
        public Builder nonCurrentDate(String nonCurrentDate) {
            if (nonCurrentDate == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfigNoCurrentVersionExpiration", "nonCurrentDate");
            }
            this.nonCurrentDate = nonCurrentDate;
            return this;
        }
        @CustomType.Setter
        public Builder nonCurrentDays(Integer nonCurrentDays) {
            if (nonCurrentDays == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfigNoCurrentVersionExpiration", "nonCurrentDays");
            }
            this.nonCurrentDays = nonCurrentDays;
            return this;
        }
        public GetBucketLifecycleConfigNoCurrentVersionExpiration build() {
            final var _resultValue = new GetBucketLifecycleConfigNoCurrentVersionExpiration();
            _resultValue.nonCurrentDate = nonCurrentDate;
            _resultValue.nonCurrentDays = nonCurrentDays;
            return _resultValue;
        }
    }
}
