// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.inputs.RouteTableCustomRouteEntryArgs;
import com.volcengine.volcenginecc.vpc.inputs.RouteTableTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RouteTableArgs extends com.pulumi.resources.ResourceArgs {

    public static final RouteTableArgs Empty = new RouteTableArgs();

    /**
     * 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
     * 
     */
    @Import(name="associateType")
    private @Nullable Output<String> associateType;

    /**
     * @return 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
     * 
     */
    public Optional<Output<String>> associateType() {
        return Optional.ofNullable(this.associateType);
    }

    @Import(name="customRouteEntries")
    private @Nullable Output<List<RouteTableCustomRouteEntryArgs>> customRouteEntries;

    public Optional<Output<List<RouteTableCustomRouteEntryArgs>>> customRouteEntries() {
        return Optional.ofNullable(this.customRouteEntries);
    }

    /**
     * 路由表描述信息。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 路由表描述信息。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 关联路由表的IPv4网关ID。
     * 
     */
    @Import(name="ipv4GatewayId")
    private @Nullable Output<String> ipv4GatewayId;

    /**
     * @return 关联路由表的IPv4网关ID。
     * 
     */
    public Optional<Output<String>> ipv4GatewayId() {
        return Optional.ofNullable(this.ipv4GatewayId);
    }

    /**
     * 关联路由表的IPv6网关ID。
     * 
     */
    @Import(name="ipv6GatewayId")
    private @Nullable Output<String> ipv6GatewayId;

    /**
     * @return 关联路由表的IPv6网关ID。
     * 
     */
    public Optional<Output<String>> ipv6GatewayId() {
        return Optional.ofNullable(this.ipv6GatewayId);
    }

    /**
     * 路由表所属项目的名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 路由表所属项目的名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 路由表名称。
     * 
     */
    @Import(name="routeTableName")
    private @Nullable Output<String> routeTableName;

    /**
     * @return 路由表名称。
     * 
     */
    public Optional<Output<String>> routeTableName() {
        return Optional.ofNullable(this.routeTableName);
    }

    /**
     * 关联的子网的ID列表。
     * 
     */
    @Import(name="subnetIds")
    private @Nullable Output<List<String>> subnetIds;

    /**
     * @return 关联的子网的ID列表。
     * 
     */
    public Optional<Output<List<String>>> subnetIds() {
        return Optional.ofNullable(this.subnetIds);
    }

    @Import(name="tags")
    private @Nullable Output<List<RouteTableTagArgs>> tags;

    public Optional<Output<List<RouteTableTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 路由表所属VPC的ID。
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return 路由表所属VPC的ID。
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    /**
     * VPC的名称。
     * 
     */
    @Import(name="vpcName")
    private @Nullable Output<String> vpcName;

    /**
     * @return VPC的名称。
     * 
     */
    public Optional<Output<String>> vpcName() {
        return Optional.ofNullable(this.vpcName);
    }

    private RouteTableArgs() {}

    private RouteTableArgs(RouteTableArgs $) {
        this.associateType = $.associateType;
        this.customRouteEntries = $.customRouteEntries;
        this.description = $.description;
        this.ipv4GatewayId = $.ipv4GatewayId;
        this.ipv6GatewayId = $.ipv6GatewayId;
        this.projectName = $.projectName;
        this.routeTableName = $.routeTableName;
        this.subnetIds = $.subnetIds;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.vpcName = $.vpcName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RouteTableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RouteTableArgs $;

        public Builder() {
            $ = new RouteTableArgs();
        }

        public Builder(RouteTableArgs defaults) {
            $ = new RouteTableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param associateType 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
         * 
         * @return builder
         * 
         */
        public Builder associateType(@Nullable Output<String> associateType) {
            $.associateType = associateType;
            return this;
        }

        /**
         * @param associateType 创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
         * 
         * @return builder
         * 
         */
        public Builder associateType(String associateType) {
            return associateType(Output.of(associateType));
        }

        public Builder customRouteEntries(@Nullable Output<List<RouteTableCustomRouteEntryArgs>> customRouteEntries) {
            $.customRouteEntries = customRouteEntries;
            return this;
        }

        public Builder customRouteEntries(List<RouteTableCustomRouteEntryArgs> customRouteEntries) {
            return customRouteEntries(Output.of(customRouteEntries));
        }

        public Builder customRouteEntries(RouteTableCustomRouteEntryArgs... customRouteEntries) {
            return customRouteEntries(List.of(customRouteEntries));
        }

        /**
         * @param description 路由表描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 路由表描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipv4GatewayId 关联路由表的IPv4网关ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv4GatewayId(@Nullable Output<String> ipv4GatewayId) {
            $.ipv4GatewayId = ipv4GatewayId;
            return this;
        }

        /**
         * @param ipv4GatewayId 关联路由表的IPv4网关ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv4GatewayId(String ipv4GatewayId) {
            return ipv4GatewayId(Output.of(ipv4GatewayId));
        }

        /**
         * @param ipv6GatewayId 关联路由表的IPv6网关ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv6GatewayId(@Nullable Output<String> ipv6GatewayId) {
            $.ipv6GatewayId = ipv6GatewayId;
            return this;
        }

        /**
         * @param ipv6GatewayId 关联路由表的IPv6网关ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv6GatewayId(String ipv6GatewayId) {
            return ipv6GatewayId(Output.of(ipv6GatewayId));
        }

        /**
         * @param projectName 路由表所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 路由表所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param routeTableName 路由表名称。
         * 
         * @return builder
         * 
         */
        public Builder routeTableName(@Nullable Output<String> routeTableName) {
            $.routeTableName = routeTableName;
            return this;
        }

        /**
         * @param routeTableName 路由表名称。
         * 
         * @return builder
         * 
         */
        public Builder routeTableName(String routeTableName) {
            return routeTableName(Output.of(routeTableName));
        }

        /**
         * @param subnetIds 关联的子网的ID列表。
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(@Nullable Output<List<String>> subnetIds) {
            $.subnetIds = subnetIds;
            return this;
        }

        /**
         * @param subnetIds 关联的子网的ID列表。
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(List<String> subnetIds) {
            return subnetIds(Output.of(subnetIds));
        }

        /**
         * @param subnetIds 关联的子网的ID列表。
         * 
         * @return builder
         * 
         */
        public Builder subnetIds(String... subnetIds) {
            return subnetIds(List.of(subnetIds));
        }

        public Builder tags(@Nullable Output<List<RouteTableTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<RouteTableTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(RouteTableTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vpcId 路由表所属VPC的ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId 路由表所属VPC的ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param vpcName VPC的名称。
         * 
         * @return builder
         * 
         */
        public Builder vpcName(@Nullable Output<String> vpcName) {
            $.vpcName = vpcName;
            return this;
        }

        /**
         * @param vpcName VPC的名称。
         * 
         * @return builder
         * 
         */
        public Builder vpcName(String vpcName) {
            return vpcName(Output.of(vpcName));
        }

        public RouteTableArgs build() {
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("RouteTableArgs", "vpcId");
            }
            return $;
        }
    }

}
