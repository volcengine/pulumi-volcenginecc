// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetEipTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEipResult {
    /**
     * @return 公网IP的ID。
     * 
     */
    private String allocationId;
    /**
     * @return 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
     * 
     */
    private Integer bandwidth;
    /**
     * @return 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
     * 
     */
    private String bandwidthPackageId;
    /**
     * @return 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
     * 
     */
    private Integer billingType;
    /**
     * @return 公网IP是否被锁定。Normal: 正常。FinancialLocked: 被锁定。
     * 
     */
    private String businessStatus;
    /**
     * @return 公网IP的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 预期资源强制回收时间。包年包月公网IP，此参数有返回值。按量计费公网IP，仅欠费冻结时，此参数有返回值。
     * 
     */
    private String deletedTime;
    /**
     * @return 公网IP的描述信息。
     * 
     */
    private String description;
    /**
     * @return 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
     * 
     */
    private Boolean directMode;
    /**
     * @return 公网IP地址。
     * 
     */
    private String eipAddress;
    /**
     * @return 公网IP的到期时间。包年包月，返回值为到期时间。按量计费，返回值为空。
     * 
     */
    private String expiredTime;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 当前绑定的实例ID。
     * 
     */
    private String instanceId;
    /**
     * @return 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
     * 
     */
    private String instanceType;
    /**
     * @return 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
     * 
     */
    private String ipAddress;
    /**
     * @return IP地址池的ID。
     * 
     */
    private String ipAddressPoolId;
    /**
     * @return 是否被封禁。true：是。false：否。
     * 
     */
    private Boolean isBlocked;
    /**
     * @return 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
     * 
     */
    private String isp;
    /**
     * @return 公网IP被锁定的原因。financial: 因欠费被锁定。unlock: 欠费关停后充值恢复过程中。空值 : 没有被锁定。
     * 
     */
    private String lockReason;
    /**
     * @return 公网IP的名称。
     * 
     */
    private String name;
    /**
     * @return 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值。
     * 
     */
    private String overdueTime;
    /**
     * @return 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
     * 
     */
    private Integer period;
    /**
     * @return 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
     * 
     */
    private Integer periodUnit;
    /**
     * @return 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
     * 
     */
    private String privateIpAddress;
    /**
     * @return 公网IP所属项目的名称。
     * 
     */
    private String projectName;
    /**
     * @return 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
     * 
     */
    private Boolean releaseWithInstance;
    /**
     * @return 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
     * 
     */
    private Integer renewPeriodTimes;
    /**
     * @return 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
     * 
     */
    private Integer renewType;
    /**
     * @return DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
     * 
     */
    private Integer securityProtectionInstanceId;
    /**
     * @return 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
     * 
     */
    private List<String> securityProtectionTypes;
    /**
     * @return 是否由服务管理
     * 
     */
    private Boolean serviceManaged;
    /**
     * @return 公网IP的状态。Attaching：绑定中。Detaching：解绑中。Attached：已绑定。Available：可用。Deleting：删除中。
     * 
     */
    private String status;
    /**
     * @return 公网IP的标签信息
     * 
     */
    private List<GetEipTag> tags;
    /**
     * @return 更新公网IP的时间。
     * 
     */
    private String updatedTime;

    private GetEipResult() {}
    /**
     * @return 公网IP的ID。
     * 
     */
    public String allocationId() {
        return this.allocationId;
    }
    /**
     * @return 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
     * 
     */
    public String bandwidthPackageId() {
        return this.bandwidthPackageId;
    }
    /**
     * @return 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
     * 
     */
    public Integer billingType() {
        return this.billingType;
    }
    /**
     * @return 公网IP是否被锁定。Normal: 正常。FinancialLocked: 被锁定。
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return 公网IP的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 预期资源强制回收时间。包年包月公网IP，此参数有返回值。按量计费公网IP，仅欠费冻结时，此参数有返回值。
     * 
     */
    public String deletedTime() {
        return this.deletedTime;
    }
    /**
     * @return 公网IP的描述信息。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
     * 
     */
    public Boolean directMode() {
        return this.directMode;
    }
    /**
     * @return 公网IP地址。
     * 
     */
    public String eipAddress() {
        return this.eipAddress;
    }
    /**
     * @return 公网IP的到期时间。包年包月，返回值为到期时间。按量计费，返回值为空。
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 当前绑定的实例ID。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
     * 
     */
    public String instanceType() {
        return this.instanceType;
    }
    /**
     * @return 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return IP地址池的ID。
     * 
     */
    public String ipAddressPoolId() {
        return this.ipAddressPoolId;
    }
    /**
     * @return 是否被封禁。true：是。false：否。
     * 
     */
    public Boolean isBlocked() {
        return this.isBlocked;
    }
    /**
     * @return 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
     * 
     */
    public String isp() {
        return this.isp;
    }
    /**
     * @return 公网IP被锁定的原因。financial: 因欠费被锁定。unlock: 欠费关停后充值恢复过程中。空值 : 没有被锁定。
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return 公网IP的名称。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值。
     * 
     */
    public String overdueTime() {
        return this.overdueTime;
    }
    /**
     * @return 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
     * 
     */
    public Integer period() {
        return this.period;
    }
    /**
     * @return 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
     * 
     */
    public Integer periodUnit() {
        return this.periodUnit;
    }
    /**
     * @return 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
     * 
     */
    public String privateIpAddress() {
        return this.privateIpAddress;
    }
    /**
     * @return 公网IP所属项目的名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
     * 
     */
    public Boolean releaseWithInstance() {
        return this.releaseWithInstance;
    }
    /**
     * @return 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
     * 
     */
    public Integer renewPeriodTimes() {
        return this.renewPeriodTimes;
    }
    /**
     * @return 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
     * 
     */
    public Integer renewType() {
        return this.renewType;
    }
    /**
     * @return DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
     * 
     */
    public Integer securityProtectionInstanceId() {
        return this.securityProtectionInstanceId;
    }
    /**
     * @return 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
     * 
     */
    public List<String> securityProtectionTypes() {
        return this.securityProtectionTypes;
    }
    /**
     * @return 是否由服务管理
     * 
     */
    public Boolean serviceManaged() {
        return this.serviceManaged;
    }
    /**
     * @return 公网IP的状态。Attaching：绑定中。Detaching：解绑中。Attached：已绑定。Available：可用。Deleting：删除中。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 公网IP的标签信息
     * 
     */
    public List<GetEipTag> tags() {
        return this.tags;
    }
    /**
     * @return 更新公网IP的时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEipResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allocationId;
        private Integer bandwidth;
        private String bandwidthPackageId;
        private Integer billingType;
        private String businessStatus;
        private String createdTime;
        private String deletedTime;
        private String description;
        private Boolean directMode;
        private String eipAddress;
        private String expiredTime;
        private String id;
        private String instanceId;
        private String instanceType;
        private String ipAddress;
        private String ipAddressPoolId;
        private Boolean isBlocked;
        private String isp;
        private String lockReason;
        private String name;
        private String overdueTime;
        private Integer period;
        private Integer periodUnit;
        private String privateIpAddress;
        private String projectName;
        private Boolean releaseWithInstance;
        private Integer renewPeriodTimes;
        private Integer renewType;
        private Integer securityProtectionInstanceId;
        private List<String> securityProtectionTypes;
        private Boolean serviceManaged;
        private String status;
        private List<GetEipTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetEipResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationId = defaults.allocationId;
    	      this.bandwidth = defaults.bandwidth;
    	      this.bandwidthPackageId = defaults.bandwidthPackageId;
    	      this.billingType = defaults.billingType;
    	      this.businessStatus = defaults.businessStatus;
    	      this.createdTime = defaults.createdTime;
    	      this.deletedTime = defaults.deletedTime;
    	      this.description = defaults.description;
    	      this.directMode = defaults.directMode;
    	      this.eipAddress = defaults.eipAddress;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceType = defaults.instanceType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.ipAddressPoolId = defaults.ipAddressPoolId;
    	      this.isBlocked = defaults.isBlocked;
    	      this.isp = defaults.isp;
    	      this.lockReason = defaults.lockReason;
    	      this.name = defaults.name;
    	      this.overdueTime = defaults.overdueTime;
    	      this.period = defaults.period;
    	      this.periodUnit = defaults.periodUnit;
    	      this.privateIpAddress = defaults.privateIpAddress;
    	      this.projectName = defaults.projectName;
    	      this.releaseWithInstance = defaults.releaseWithInstance;
    	      this.renewPeriodTimes = defaults.renewPeriodTimes;
    	      this.renewType = defaults.renewType;
    	      this.securityProtectionInstanceId = defaults.securityProtectionInstanceId;
    	      this.securityProtectionTypes = defaults.securityProtectionTypes;
    	      this.serviceManaged = defaults.serviceManaged;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder allocationId(String allocationId) {
            if (allocationId == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "allocationId");
            }
            this.allocationId = allocationId;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            if (bandwidthPackageId == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "bandwidthPackageId");
            }
            this.bandwidthPackageId = bandwidthPackageId;
            return this;
        }
        @CustomType.Setter
        public Builder billingType(Integer billingType) {
            if (billingType == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "billingType");
            }
            this.billingType = billingType;
            return this;
        }
        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            if (businessStatus == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "businessStatus");
            }
            this.businessStatus = businessStatus;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletedTime(String deletedTime) {
            if (deletedTime == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "deletedTime");
            }
            this.deletedTime = deletedTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder directMode(Boolean directMode) {
            if (directMode == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "directMode");
            }
            this.directMode = directMode;
            return this;
        }
        @CustomType.Setter
        public Builder eipAddress(String eipAddress) {
            if (eipAddress == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "eipAddress");
            }
            this.eipAddress = eipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceType(String instanceType) {
            if (instanceType == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "instanceType");
            }
            this.instanceType = instanceType;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressPoolId(String ipAddressPoolId) {
            if (ipAddressPoolId == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "ipAddressPoolId");
            }
            this.ipAddressPoolId = ipAddressPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder isBlocked(Boolean isBlocked) {
            if (isBlocked == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "isBlocked");
            }
            this.isBlocked = isBlocked;
            return this;
        }
        @CustomType.Setter
        public Builder isp(String isp) {
            if (isp == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "isp");
            }
            this.isp = isp;
            return this;
        }
        @CustomType.Setter
        public Builder lockReason(String lockReason) {
            if (lockReason == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "lockReason");
            }
            this.lockReason = lockReason;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder overdueTime(String overdueTime) {
            if (overdueTime == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "overdueTime");
            }
            this.overdueTime = overdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder period(Integer period) {
            if (period == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "period");
            }
            this.period = period;
            return this;
        }
        @CustomType.Setter
        public Builder periodUnit(Integer periodUnit) {
            if (periodUnit == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "periodUnit");
            }
            this.periodUnit = periodUnit;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddress(String privateIpAddress) {
            if (privateIpAddress == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "privateIpAddress");
            }
            this.privateIpAddress = privateIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder releaseWithInstance(Boolean releaseWithInstance) {
            if (releaseWithInstance == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "releaseWithInstance");
            }
            this.releaseWithInstance = releaseWithInstance;
            return this;
        }
        @CustomType.Setter
        public Builder renewPeriodTimes(Integer renewPeriodTimes) {
            if (renewPeriodTimes == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "renewPeriodTimes");
            }
            this.renewPeriodTimes = renewPeriodTimes;
            return this;
        }
        @CustomType.Setter
        public Builder renewType(Integer renewType) {
            if (renewType == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "renewType");
            }
            this.renewType = renewType;
            return this;
        }
        @CustomType.Setter
        public Builder securityProtectionInstanceId(Integer securityProtectionInstanceId) {
            if (securityProtectionInstanceId == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "securityProtectionInstanceId");
            }
            this.securityProtectionInstanceId = securityProtectionInstanceId;
            return this;
        }
        @CustomType.Setter
        public Builder securityProtectionTypes(List<String> securityProtectionTypes) {
            if (securityProtectionTypes == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "securityProtectionTypes");
            }
            this.securityProtectionTypes = securityProtectionTypes;
            return this;
        }
        public Builder securityProtectionTypes(String... securityProtectionTypes) {
            return securityProtectionTypes(List.of(securityProtectionTypes));
        }
        @CustomType.Setter
        public Builder serviceManaged(Boolean serviceManaged) {
            if (serviceManaged == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "serviceManaged");
            }
            this.serviceManaged = serviceManaged;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetEipTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetEipTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetEipResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetEipResult build() {
            final var _resultValue = new GetEipResult();
            _resultValue.allocationId = allocationId;
            _resultValue.bandwidth = bandwidth;
            _resultValue.bandwidthPackageId = bandwidthPackageId;
            _resultValue.billingType = billingType;
            _resultValue.businessStatus = businessStatus;
            _resultValue.createdTime = createdTime;
            _resultValue.deletedTime = deletedTime;
            _resultValue.description = description;
            _resultValue.directMode = directMode;
            _resultValue.eipAddress = eipAddress;
            _resultValue.expiredTime = expiredTime;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceType = instanceType;
            _resultValue.ipAddress = ipAddress;
            _resultValue.ipAddressPoolId = ipAddressPoolId;
            _resultValue.isBlocked = isBlocked;
            _resultValue.isp = isp;
            _resultValue.lockReason = lockReason;
            _resultValue.name = name;
            _resultValue.overdueTime = overdueTime;
            _resultValue.period = period;
            _resultValue.periodUnit = periodUnit;
            _resultValue.privateIpAddress = privateIpAddress;
            _resultValue.projectName = projectName;
            _resultValue.releaseWithInstance = releaseWithInstance;
            _resultValue.renewPeriodTimes = renewPeriodTimes;
            _resultValue.renewType = renewType;
            _resultValue.securityProtectionInstanceId = securityProtectionInstanceId;
            _resultValue.securityProtectionTypes = securityProtectionTypes;
            _resultValue.serviceManaged = serviceManaged;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
