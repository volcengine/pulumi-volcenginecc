// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.apig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.apig.inputs.UpstreamSourceIngressSettingsArgs;
import com.volcengine.volcenginecc.apig.inputs.UpstreamSourceSourceSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UpstreamSourceState extends com.pulumi.resources.ResourceArgs {

    public static final UpstreamSourceState Empty = new UpstreamSourceState();

    /**
     * 备注，长度限制为0~253个字符。
     * 
     */
    @Import(name="comments")
    private @Nullable Output<String> comments;

    /**
     * @return 备注，长度限制为0~253个字符。
     * 
     */
    public Optional<Output<String>> comments() {
        return Optional.ofNullable(this.comments);
    }

    /**
     * 创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 网关实例ID。
     * 
     */
    @Import(name="gatewayId")
    private @Nullable Output<String> gatewayId;

    /**
     * @return 网关实例ID。
     * 
     */
    public Optional<Output<String>> gatewayId() {
        return Optional.ofNullable(this.gatewayId);
    }

    /**
     * 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     * 
     */
    @Import(name="ingressSettings")
    private @Nullable Output<UpstreamSourceIngressSettingsArgs> ingressSettings;

    /**
     * @return 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     * 
     */
    public Optional<Output<UpstreamSourceIngressSettingsArgs>> ingressSettings() {
        return Optional.ofNullable(this.ingressSettings);
    }

    /**
     * Upstream来源配置。
     * 
     */
    @Import(name="sourceSpec")
    private @Nullable Output<UpstreamSourceSourceSpecArgs> sourceSpec;

    /**
     * @return Upstream来源配置。
     * 
     */
    public Optional<Output<UpstreamSourceSourceSpecArgs>> sourceSpec() {
        return Optional.ofNullable(this.sourceSpec);
    }

    /**
     * Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     * 
     */
    @Import(name="sourceType")
    private @Nullable Output<String> sourceType;

    /**
     * @return Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     * 
     */
    public Optional<Output<String>> sourceType() {
        return Optional.ofNullable(this.sourceType);
    }

    /**
     * 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
     * 
     */
    @Import(name="statusMessage")
    private @Nullable Output<String> statusMessage;

    /**
     * @return 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
     * 
     */
    public Optional<Output<String>> statusMessage() {
        return Optional.ofNullable(this.statusMessage);
    }

    /**
     * 更新时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 更新时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    /**
     * Upstream来源ID。
     * 
     */
    @Import(name="upstreamSourceId")
    private @Nullable Output<String> upstreamSourceId;

    /**
     * @return Upstream来源ID。
     * 
     */
    public Optional<Output<String>> upstreamSourceId() {
        return Optional.ofNullable(this.upstreamSourceId);
    }

    /**
     * 指定命名空间。
     * 
     */
    @Import(name="watchNamespaces")
    private @Nullable Output<List<String>> watchNamespaces;

    /**
     * @return 指定命名空间。
     * 
     */
    public Optional<Output<List<String>>> watchNamespaces() {
        return Optional.ofNullable(this.watchNamespaces);
    }

    private UpstreamSourceState() {}

    private UpstreamSourceState(UpstreamSourceState $) {
        this.comments = $.comments;
        this.createdTime = $.createdTime;
        this.gatewayId = $.gatewayId;
        this.ingressSettings = $.ingressSettings;
        this.sourceSpec = $.sourceSpec;
        this.sourceType = $.sourceType;
        this.status = $.status;
        this.statusMessage = $.statusMessage;
        this.updatedTime = $.updatedTime;
        this.upstreamSourceId = $.upstreamSourceId;
        this.watchNamespaces = $.watchNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpstreamSourceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpstreamSourceState $;

        public Builder() {
            $ = new UpstreamSourceState();
        }

        public Builder(UpstreamSourceState defaults) {
            $ = new UpstreamSourceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param comments 备注，长度限制为0~253个字符。
         * 
         * @return builder
         * 
         */
        public Builder comments(@Nullable Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments 备注，长度限制为0~253个字符。
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param createdTime 创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param gatewayId 网关实例ID。
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(@Nullable Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId 网关实例ID。
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param ingressSettings 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
         * 
         * @return builder
         * 
         */
        public Builder ingressSettings(@Nullable Output<UpstreamSourceIngressSettingsArgs> ingressSettings) {
            $.ingressSettings = ingressSettings;
            return this;
        }

        /**
         * @param ingressSettings 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
         * 
         * @return builder
         * 
         */
        public Builder ingressSettings(UpstreamSourceIngressSettingsArgs ingressSettings) {
            return ingressSettings(Output.of(ingressSettings));
        }

        /**
         * @param sourceSpec Upstream来源配置。
         * 
         * @return builder
         * 
         */
        public Builder sourceSpec(@Nullable Output<UpstreamSourceSourceSpecArgs> sourceSpec) {
            $.sourceSpec = sourceSpec;
            return this;
        }

        /**
         * @param sourceSpec Upstream来源配置。
         * 
         * @return builder
         * 
         */
        public Builder sourceSpec(UpstreamSourceSourceSpecArgs sourceSpec) {
            return sourceSpec(Output.of(sourceSpec));
        }

        /**
         * @param sourceType Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
         * 
         * @return builder
         * 
         */
        public Builder sourceType(@Nullable Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param status 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusMessage 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(@Nullable Output<String> statusMessage) {
            $.statusMessage = statusMessage;
            return this;
        }

        /**
         * @param statusMessage 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
         * 
         * @return builder
         * 
         */
        public Builder statusMessage(String statusMessage) {
            return statusMessage(Output.of(statusMessage));
        }

        /**
         * @param updatedTime 更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        /**
         * @param upstreamSourceId Upstream来源ID。
         * 
         * @return builder
         * 
         */
        public Builder upstreamSourceId(@Nullable Output<String> upstreamSourceId) {
            $.upstreamSourceId = upstreamSourceId;
            return this;
        }

        /**
         * @param upstreamSourceId Upstream来源ID。
         * 
         * @return builder
         * 
         */
        public Builder upstreamSourceId(String upstreamSourceId) {
            return upstreamSourceId(Output.of(upstreamSourceId));
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(@Nullable Output<List<String>> watchNamespaces) {
            $.watchNamespaces = watchNamespaces;
            return this;
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(List<String> watchNamespaces) {
            return watchNamespaces(Output.of(watchNamespaces));
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(String... watchNamespaces) {
            return watchNamespaces(List.of(watchNamespaces));
        }

        public UpstreamSourceState build() {
            return $;
        }
    }

}
