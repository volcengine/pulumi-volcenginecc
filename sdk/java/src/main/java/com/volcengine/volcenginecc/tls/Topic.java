// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tls;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.tls.TopicArgs;
import com.volcengine.volcenginecc.tls.inputs.TopicState;
import com.volcengine.volcenginecc.tls.outputs.TopicTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:tls/topic:Topic example &#34;topic_id&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:tls/topic:Topic")
public class Topic extends com.pulumi.resources.CustomResource {
    /**
     * 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    @Export(name="archiveTtl", refs={Integer.class}, tree="[0]")
    private Output<Integer> archiveTtl;

    /**
     * @return 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Output<Integer> archiveTtl() {
        return this.archiveTtl;
    }
    /**
     * 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     * 
     */
    @Export(name="autoSplit", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoSplit;

    /**
     * @return 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     * 
     */
    public Output<Boolean> autoSplit() {
        return this.autoSplit;
    }
    /**
     * 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    @Export(name="coldTtl", refs={Integer.class}, tree="[0]")
    private Output<Integer> coldTtl;

    /**
     * @return 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Output<Integer> coldTtl() {
        return this.coldTtl;
    }
    /**
     * 日志主题创建时间。
     * 
     */
    @Export(name="createdTime", refs={String.class}, tree="[0]")
    private Output<String> createdTime;

    /**
     * @return 日志主题创建时间。
     * 
     */
    public Output<String> createdTime() {
        return this.createdTime;
    }
    /**
     * 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     * 
     */
    @Export(name="enableHotTtl", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableHotTtl;

    /**
     * @return 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     * 
     */
    public Output<Boolean> enableHotTtl() {
        return this.enableHotTtl;
    }
    /**
     * 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     * 
     */
    @Export(name="enableTracking", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enableTracking;

    /**
     * @return 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     * 
     */
    public Output<Boolean> enableTracking() {
        return this.enableTracking;
    }
    /**
     * 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    @Export(name="hotTtl", refs={Integer.class}, tree="[0]")
    private Output<Integer> hotTtl;

    /**
     * @return 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Output<Integer> hotTtl() {
        return this.hotTtl;
    }
    /**
     * 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     * 
     */
    @Export(name="logPublicIp", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> logPublicIp;

    /**
     * @return 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     * 
     */
    public Output<Boolean> logPublicIp() {
        return this.logPublicIp;
    }
    /**
     * 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     * 
     */
    @Export(name="maxSplitShard", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxSplitShard;

    /**
     * @return 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     * 
     */
    public Output<Integer> maxSplitShard() {
        return this.maxSplitShard;
    }
    /**
     * 日志主题所属的日志项目 ID。
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return 日志主题所属的日志项目 ID。
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     * 
     */
    @Export(name="shardCount", refs={Integer.class}, tree="[0]")
    private Output<Integer> shardCount;

    /**
     * @return 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     * 
     */
    public Output<Integer> shardCount() {
        return this.shardCount;
    }
    @Export(name="tags", refs={List.class,TopicTag.class}, tree="[0,1]")
    private Output<List<TopicTag>> tags;

    public Output<List<TopicTag>> tags() {
        return this.tags;
    }
    /**
     * 时间格式
     * 
     */
    @Export(name="timeFormat", refs={String.class}, tree="[0]")
    private Output<String> timeFormat;

    /**
     * @return 时间格式
     * 
     */
    public Output<String> timeFormat() {
        return this.timeFormat;
    }
    /**
     * 时间字段名
     * 
     */
    @Export(name="timeKey", refs={String.class}, tree="[0]")
    private Output<String> timeKey;

    /**
     * @return 时间字段名
     * 
     */
    public Output<String> timeKey() {
        return this.timeKey;
    }
    /**
     * 日志主题 ID。
     * 
     */
    @Export(name="topicId", refs={String.class}, tree="[0]")
    private Output<String> topicId;

    /**
     * @return 日志主题 ID。
     * 
     */
    public Output<String> topicId() {
        return this.topicId;
    }
    /**
     * 日志主题名称。
     * 
     */
    @Export(name="topicName", refs={String.class}, tree="[0]")
    private Output<String> topicName;

    /**
     * @return 日志主题名称。
     * 
     */
    public Output<String> topicName() {
        return this.topicName;
    }
    /**
     * 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     * 
     */
    @Export(name="ttl", refs={Integer.class}, tree="[0]")
    private Output<Integer> ttl;

    /**
     * @return 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     * 
     */
    public Output<Integer> ttl() {
        return this.ttl;
    }
    /**
     * 日志主题修改时间。
     * 
     */
    @Export(name="updatedTime", refs={String.class}, tree="[0]")
    private Output<String> updatedTime;

    /**
     * @return 日志主题修改时间。
     * 
     */
    public Output<String> updatedTime() {
        return this.updatedTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Topic(java.lang.String name) {
        this(name, TopicArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Topic(java.lang.String name, TopicArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Topic(java.lang.String name, TopicArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:tls/topic:Topic", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Topic(java.lang.String name, Output<java.lang.String> id, @Nullable TopicState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:tls/topic:Topic", name, state, makeResourceOptions(options, id), false);
    }

    private static TopicArgs makeArgs(TopicArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? TopicArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Topic get(java.lang.String name, Output<java.lang.String> id, @Nullable TopicState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Topic(name, id, state, options);
    }
}
