// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketLifecycleConfigTransition {
    /**
     * @return 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
     * 
     */
    private @Nullable String date;
    /**
     * @return 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
     * 
     */
    private @Nullable Integer days;
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
     * 
     */
    private @Nullable String storageClass;

    private BucketLifecycleConfigTransition() {}
    /**
     * @return 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
     * 
     */
    public Optional<String> date() {
        return Optional.ofNullable(this.date);
    }
    /**
     * @return 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
     * 
     */
    public Optional<Integer> days() {
        return Optional.ofNullable(this.days);
    }
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
     * 
     */
    public Optional<String> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleConfigTransition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String date;
        private @Nullable Integer days;
        private @Nullable String storageClass;
        public Builder() {}
        public Builder(BucketLifecycleConfigTransition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.date = defaults.date;
    	      this.days = defaults.days;
    	      this.storageClass = defaults.storageClass;
        }

        @CustomType.Setter
        public Builder date(@Nullable String date) {

            this.date = date;
            return this;
        }
        @CustomType.Setter
        public Builder days(@Nullable Integer days) {

            this.days = days;
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(@Nullable String storageClass) {

            this.storageClass = storageClass;
            return this;
        }
        public BucketLifecycleConfigTransition build() {
            final var _resultValue = new BucketLifecycleConfigTransition();
            _resultValue.date = date;
            _resultValue.days = days;
            _resultValue.storageClass = storageClass;
            return _resultValue;
        }
    }
}
