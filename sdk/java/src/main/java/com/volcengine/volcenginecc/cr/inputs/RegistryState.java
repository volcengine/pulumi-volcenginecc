// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.cr.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.cr.inputs.RegistryProxyCacheArgs;
import com.volcengine.volcenginecc.cr.inputs.RegistryStatusArgs;
import com.volcengine.volcenginecc.cr.inputs.RegistryTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RegistryState extends com.pulumi.resources.ResourceArgs {

    public static final RegistryState Empty = new RegistryState();

    /**
     * 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
     * 
     */
    @Import(name="chargeType")
    private @Nullable Output<String> chargeType;

    /**
     * @return 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
     * 
     */
    public Optional<Output<String>> chargeType() {
        return Optional.ofNullable(this.chargeType);
    }

    /**
     * 创建镜像仓库实例的时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 创建镜像仓库实例的时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 仅计费类型为HybridCharge有值，实例到期时间
     * 
     */
    @Import(name="expireTime")
    private @Nullable Output<String> expireTime;

    /**
     * @return 仅计费类型为HybridCharge有值，实例到期时间
     * 
     */
    public Optional<Output<String>> expireTime() {
        return Optional.ofNullable(this.expireTime);
    }

    /**
     * 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * 填写实例需要关联的项目。一个实例仅支持关联一个项目
     * 
     */
    @Import(name="project")
    private @Nullable Output<String> project;

    /**
     * @return 填写实例需要关联的项目。一个实例仅支持关联一个项目
     * 
     */
    public Optional<Output<String>> project() {
        return Optional.ofNullable(this.project);
    }

    /**
     * ProxyCache配置，设置为ProxyCache时必填
     * 
     */
    @Import(name="proxyCache")
    private @Nullable Output<RegistryProxyCacheArgs> proxyCache;

    /**
     * @return ProxyCache配置，设置为ProxyCache时必填
     * 
     */
    public Optional<Output<RegistryProxyCacheArgs>> proxyCache() {
        return Optional.ofNullable(this.proxyCache);
    }

    /**
     * 是否设置为ProxyCache实例
     * 
     */
    @Import(name="proxyCacheEnabled")
    private @Nullable Output<Boolean> proxyCacheEnabled;

    /**
     * @return 是否设置为ProxyCache实例
     * 
     */
    public Optional<Output<Boolean>> proxyCacheEnabled() {
        return Optional.ofNullable(this.proxyCacheEnabled);
    }

    /**
     * 仅计费类型为HybridCharge有值，实例自动续费类型
     * 
     */
    @Import(name="renewType")
    private @Nullable Output<String> renewType;

    /**
     * @return 仅计费类型为HybridCharge有值，实例自动续费类型
     * 
     */
    public Optional<Output<String>> renewType() {
        return Optional.ofNullable(this.renewType);
    }

    /**
     * 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
     * 
     */
    @Import(name="status")
    private @Nullable Output<RegistryStatusArgs> status;

    /**
     * @return 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
     * 
     */
    public Optional<Output<RegistryStatusArgs>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<RegistryTagArgs>> tags;

    public Optional<Output<List<RegistryTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private RegistryState() {}

    private RegistryState(RegistryState $) {
        this.chargeType = $.chargeType;
        this.createdTime = $.createdTime;
        this.expireTime = $.expireTime;
        this.name = $.name;
        this.project = $.project;
        this.proxyCache = $.proxyCache;
        this.proxyCacheEnabled = $.proxyCacheEnabled;
        this.renewType = $.renewType;
        this.status = $.status;
        this.tags = $.tags;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RegistryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RegistryState $;

        public Builder() {
            $ = new RegistryState();
        }

        public Builder(RegistryState defaults) {
            $ = new RegistryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param chargeType 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
         * 
         * @return builder
         * 
         */
        public Builder chargeType(@Nullable Output<String> chargeType) {
            $.chargeType = chargeType;
            return this;
        }

        /**
         * @param chargeType 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
         * 
         * @return builder
         * 
         */
        public Builder chargeType(String chargeType) {
            return chargeType(Output.of(chargeType));
        }

        /**
         * @param createdTime 创建镜像仓库实例的时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 创建镜像仓库实例的时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param expireTime 仅计费类型为HybridCharge有值，实例到期时间
         * 
         * @return builder
         * 
         */
        public Builder expireTime(@Nullable Output<String> expireTime) {
            $.expireTime = expireTime;
            return this;
        }

        /**
         * @param expireTime 仅计费类型为HybridCharge有值，实例到期时间
         * 
         * @return builder
         * 
         */
        public Builder expireTime(String expireTime) {
            return expireTime(Output.of(expireTime));
        }

        /**
         * @param name 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param project 填写实例需要关联的项目。一个实例仅支持关联一个项目
         * 
         * @return builder
         * 
         */
        public Builder project(@Nullable Output<String> project) {
            $.project = project;
            return this;
        }

        /**
         * @param project 填写实例需要关联的项目。一个实例仅支持关联一个项目
         * 
         * @return builder
         * 
         */
        public Builder project(String project) {
            return project(Output.of(project));
        }

        /**
         * @param proxyCache ProxyCache配置，设置为ProxyCache时必填
         * 
         * @return builder
         * 
         */
        public Builder proxyCache(@Nullable Output<RegistryProxyCacheArgs> proxyCache) {
            $.proxyCache = proxyCache;
            return this;
        }

        /**
         * @param proxyCache ProxyCache配置，设置为ProxyCache时必填
         * 
         * @return builder
         * 
         */
        public Builder proxyCache(RegistryProxyCacheArgs proxyCache) {
            return proxyCache(Output.of(proxyCache));
        }

        /**
         * @param proxyCacheEnabled 是否设置为ProxyCache实例
         * 
         * @return builder
         * 
         */
        public Builder proxyCacheEnabled(@Nullable Output<Boolean> proxyCacheEnabled) {
            $.proxyCacheEnabled = proxyCacheEnabled;
            return this;
        }

        /**
         * @param proxyCacheEnabled 是否设置为ProxyCache实例
         * 
         * @return builder
         * 
         */
        public Builder proxyCacheEnabled(Boolean proxyCacheEnabled) {
            return proxyCacheEnabled(Output.of(proxyCacheEnabled));
        }

        /**
         * @param renewType 仅计费类型为HybridCharge有值，实例自动续费类型
         * 
         * @return builder
         * 
         */
        public Builder renewType(@Nullable Output<String> renewType) {
            $.renewType = renewType;
            return this;
        }

        /**
         * @param renewType 仅计费类型为HybridCharge有值，实例自动续费类型
         * 
         * @return builder
         * 
         */
        public Builder renewType(String renewType) {
            return renewType(Output.of(renewType));
        }

        /**
         * @param status 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<RegistryStatusArgs> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
         * 
         * @return builder
         * 
         */
        public Builder status(RegistryStatusArgs status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<RegistryTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<RegistryTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(RegistryTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public RegistryState build() {
            return $;
        }
    }

}
