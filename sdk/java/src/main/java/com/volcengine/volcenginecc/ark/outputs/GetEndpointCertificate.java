// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ark.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEndpointCertificate {
    /**
     * @return X509私有证书过期的时间。使用秒级时间戳表示。
     * 
     */
    private Integer notAfter;
    /**
     * @return X509私有证书开始生效的时间。使用秒级时间戳表示。
     * 
     */
    private Integer notBefore;
    /**
     * @return 证书方。
     * 
     */
    private String pcaHost;
    /**
     * @return PEM 格式的叶子证书。
     * 
     */
    private String pcaInstanceCertificate;
    /**
     * @return 证书名称。
     * 
     */
    private String pcaName;
    /**
     * @return PEM 格式的根证书。
     * 
     */
    private String pcaRootCaCertificate;
    /**
     * @return PEM 格式的中间根证书和根证书。
     * 
     */
    private String pcaSubCaCertificate;

    private GetEndpointCertificate() {}
    /**
     * @return X509私有证书过期的时间。使用秒级时间戳表示。
     * 
     */
    public Integer notAfter() {
        return this.notAfter;
    }
    /**
     * @return X509私有证书开始生效的时间。使用秒级时间戳表示。
     * 
     */
    public Integer notBefore() {
        return this.notBefore;
    }
    /**
     * @return 证书方。
     * 
     */
    public String pcaHost() {
        return this.pcaHost;
    }
    /**
     * @return PEM 格式的叶子证书。
     * 
     */
    public String pcaInstanceCertificate() {
        return this.pcaInstanceCertificate;
    }
    /**
     * @return 证书名称。
     * 
     */
    public String pcaName() {
        return this.pcaName;
    }
    /**
     * @return PEM 格式的根证书。
     * 
     */
    public String pcaRootCaCertificate() {
        return this.pcaRootCaCertificate;
    }
    /**
     * @return PEM 格式的中间根证书和根证书。
     * 
     */
    public String pcaSubCaCertificate() {
        return this.pcaSubCaCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointCertificate defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer notAfter;
        private Integer notBefore;
        private String pcaHost;
        private String pcaInstanceCertificate;
        private String pcaName;
        private String pcaRootCaCertificate;
        private String pcaSubCaCertificate;
        public Builder() {}
        public Builder(GetEndpointCertificate defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.notAfter = defaults.notAfter;
    	      this.notBefore = defaults.notBefore;
    	      this.pcaHost = defaults.pcaHost;
    	      this.pcaInstanceCertificate = defaults.pcaInstanceCertificate;
    	      this.pcaName = defaults.pcaName;
    	      this.pcaRootCaCertificate = defaults.pcaRootCaCertificate;
    	      this.pcaSubCaCertificate = defaults.pcaSubCaCertificate;
        }

        @CustomType.Setter
        public Builder notAfter(Integer notAfter) {
            if (notAfter == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "notAfter");
            }
            this.notAfter = notAfter;
            return this;
        }
        @CustomType.Setter
        public Builder notBefore(Integer notBefore) {
            if (notBefore == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "notBefore");
            }
            this.notBefore = notBefore;
            return this;
        }
        @CustomType.Setter
        public Builder pcaHost(String pcaHost) {
            if (pcaHost == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "pcaHost");
            }
            this.pcaHost = pcaHost;
            return this;
        }
        @CustomType.Setter
        public Builder pcaInstanceCertificate(String pcaInstanceCertificate) {
            if (pcaInstanceCertificate == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "pcaInstanceCertificate");
            }
            this.pcaInstanceCertificate = pcaInstanceCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder pcaName(String pcaName) {
            if (pcaName == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "pcaName");
            }
            this.pcaName = pcaName;
            return this;
        }
        @CustomType.Setter
        public Builder pcaRootCaCertificate(String pcaRootCaCertificate) {
            if (pcaRootCaCertificate == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "pcaRootCaCertificate");
            }
            this.pcaRootCaCertificate = pcaRootCaCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder pcaSubCaCertificate(String pcaSubCaCertificate) {
            if (pcaSubCaCertificate == null) {
              throw new MissingRequiredPropertyException("GetEndpointCertificate", "pcaSubCaCertificate");
            }
            this.pcaSubCaCertificate = pcaSubCaCertificate;
            return this;
        }
        public GetEndpointCertificate build() {
            final var _resultValue = new GetEndpointCertificate();
            _resultValue.notAfter = notAfter;
            _resultValue.notBefore = notBefore;
            _resultValue.pcaHost = pcaHost;
            _resultValue.pcaInstanceCertificate = pcaInstanceCertificate;
            _resultValue.pcaName = pcaName;
            _resultValue.pcaRootCaCertificate = pcaRootCaCertificate;
            _resultValue.pcaSubCaCertificate = pcaSubCaCertificate;
            return _resultValue;
        }
    }
}
