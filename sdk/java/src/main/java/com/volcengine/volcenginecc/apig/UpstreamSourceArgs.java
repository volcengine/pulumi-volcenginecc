// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.apig;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.apig.inputs.UpstreamSourceIngressSettingsArgs;
import com.volcengine.volcenginecc.apig.inputs.UpstreamSourceSourceSpecArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UpstreamSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpstreamSourceArgs Empty = new UpstreamSourceArgs();

    /**
     * 备注，长度限制为0~253个字符。
     * 
     */
    @Import(name="comments")
    private @Nullable Output<String> comments;

    /**
     * @return 备注，长度限制为0~253个字符。
     * 
     */
    public Optional<Output<String>> comments() {
        return Optional.ofNullable(this.comments);
    }

    /**
     * 网关实例ID。
     * 
     */
    @Import(name="gatewayId", required=true)
    private Output<String> gatewayId;

    /**
     * @return 网关实例ID。
     * 
     */
    public Output<String> gatewayId() {
        return this.gatewayId;
    }

    /**
     * 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     * 
     */
    @Import(name="ingressSettings")
    private @Nullable Output<UpstreamSourceIngressSettingsArgs> ingressSettings;

    /**
     * @return 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     * 
     */
    public Optional<Output<UpstreamSourceIngressSettingsArgs>> ingressSettings() {
        return Optional.ofNullable(this.ingressSettings);
    }

    /**
     * Upstream来源配置。
     * 
     */
    @Import(name="sourceSpec", required=true)
    private Output<UpstreamSourceSourceSpecArgs> sourceSpec;

    /**
     * @return Upstream来源配置。
     * 
     */
    public Output<UpstreamSourceSourceSpecArgs> sourceSpec() {
        return this.sourceSpec;
    }

    /**
     * Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     * 
     */
    @Import(name="sourceType", required=true)
    private Output<String> sourceType;

    /**
     * @return Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     * 
     */
    public Output<String> sourceType() {
        return this.sourceType;
    }

    /**
     * 指定命名空间。
     * 
     */
    @Import(name="watchNamespaces")
    private @Nullable Output<List<String>> watchNamespaces;

    /**
     * @return 指定命名空间。
     * 
     */
    public Optional<Output<List<String>>> watchNamespaces() {
        return Optional.ofNullable(this.watchNamespaces);
    }

    private UpstreamSourceArgs() {}

    private UpstreamSourceArgs(UpstreamSourceArgs $) {
        this.comments = $.comments;
        this.gatewayId = $.gatewayId;
        this.ingressSettings = $.ingressSettings;
        this.sourceSpec = $.sourceSpec;
        this.sourceType = $.sourceType;
        this.watchNamespaces = $.watchNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpstreamSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpstreamSourceArgs $;

        public Builder() {
            $ = new UpstreamSourceArgs();
        }

        public Builder(UpstreamSourceArgs defaults) {
            $ = new UpstreamSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param comments 备注，长度限制为0~253个字符。
         * 
         * @return builder
         * 
         */
        public Builder comments(@Nullable Output<String> comments) {
            $.comments = comments;
            return this;
        }

        /**
         * @param comments 备注，长度限制为0~253个字符。
         * 
         * @return builder
         * 
         */
        public Builder comments(String comments) {
            return comments(Output.of(comments));
        }

        /**
         * @param gatewayId 网关实例ID。
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(Output<String> gatewayId) {
            $.gatewayId = gatewayId;
            return this;
        }

        /**
         * @param gatewayId 网关实例ID。
         * 
         * @return builder
         * 
         */
        public Builder gatewayId(String gatewayId) {
            return gatewayId(Output.of(gatewayId));
        }

        /**
         * @param ingressSettings 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
         * 
         * @return builder
         * 
         */
        public Builder ingressSettings(@Nullable Output<UpstreamSourceIngressSettingsArgs> ingressSettings) {
            $.ingressSettings = ingressSettings;
            return this;
        }

        /**
         * @param ingressSettings 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
         * 
         * @return builder
         * 
         */
        public Builder ingressSettings(UpstreamSourceIngressSettingsArgs ingressSettings) {
            return ingressSettings(Output.of(ingressSettings));
        }

        /**
         * @param sourceSpec Upstream来源配置。
         * 
         * @return builder
         * 
         */
        public Builder sourceSpec(Output<UpstreamSourceSourceSpecArgs> sourceSpec) {
            $.sourceSpec = sourceSpec;
            return this;
        }

        /**
         * @param sourceSpec Upstream来源配置。
         * 
         * @return builder
         * 
         */
        public Builder sourceSpec(UpstreamSourceSourceSpecArgs sourceSpec) {
            return sourceSpec(Output.of(sourceSpec));
        }

        /**
         * @param sourceType Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
         * 
         * @return builder
         * 
         */
        public Builder sourceType(Output<String> sourceType) {
            $.sourceType = sourceType;
            return this;
        }

        /**
         * @param sourceType Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
         * 
         * @return builder
         * 
         */
        public Builder sourceType(String sourceType) {
            return sourceType(Output.of(sourceType));
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(@Nullable Output<List<String>> watchNamespaces) {
            $.watchNamespaces = watchNamespaces;
            return this;
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(List<String> watchNamespaces) {
            return watchNamespaces(Output.of(watchNamespaces));
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(String... watchNamespaces) {
            return watchNamespaces(List.of(watchNamespaces));
        }

        public UpstreamSourceArgs build() {
            if ($.gatewayId == null) {
                throw new MissingRequiredPropertyException("UpstreamSourceArgs", "gatewayId");
            }
            if ($.sourceSpec == null) {
                throw new MissingRequiredPropertyException("UpstreamSourceArgs", "sourceSpec");
            }
            if ($.sourceType == null) {
                throw new MissingRequiredPropertyException("UpstreamSourceArgs", "sourceType");
            }
            return $;
        }
    }

}
