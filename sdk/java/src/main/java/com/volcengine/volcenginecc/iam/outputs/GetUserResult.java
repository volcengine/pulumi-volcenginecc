// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.iam.outputs.GetUserLoginProfile;
import com.volcengine.volcenginecc.iam.outputs.GetUserPolicy;
import com.volcengine.volcenginecc.iam.outputs.GetUserSecurityConfig;
import com.volcengine.volcenginecc.iam.outputs.GetUserTag;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUserResult {
    /**
     * @return 子用户归属的主账号。
     * 
     */
    private Double accountId;
    /**
     * @return 子用户对应的创建时间。
     * 
     */
    private String createDate;
    /**
     * @return 子用户对应的描述信息，长度不超过255。
     * 
     */
    private String description;
    /**
     * @return 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_{@literal @}符号。
     * 
     */
    private String displayName;
    /**
     * @return 子用户对应的电子邮件地址。
     * 
     */
    private String email;
    /**
     * @return 子用户归属的用户组。
     * 
     */
    private List<String> groups;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 子用户的登录配置。
     * 
     */
    private GetUserLoginProfile loginProfile;
    /**
     * @return 子用户对应的手机号。
     * 
     */
    private String mobilePhone;
    /**
     * @return 子用户对应的权限策略。
     * 
     */
    private List<GetUserPolicy> policies;
    /**
     * @return 子用户的操作保护配置。
     * 
     */
    private GetUserSecurityConfig securityConfig;
    /**
     * @return 子用户对应的资源标签。
     * 
     */
    private List<GetUserTag> tags;
    /**
     * @return 子用户对应的Trn表达式。
     * 
     */
    private String trn;
    /**
     * @return 子用户对应的更新时间。
     * 
     */
    private String updateDate;
    /**
     * @return 子用户的ID。
     * 
     */
    private Integer userId;
    /**
     * @return 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-{@literal @}符号。
     * 
     */
    private String userName;

    private GetUserResult() {}
    /**
     * @return 子用户归属的主账号。
     * 
     */
    public Double accountId() {
        return this.accountId;
    }
    /**
     * @return 子用户对应的创建时间。
     * 
     */
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return 子用户对应的描述信息，长度不超过255。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_{@literal @}符号。
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return 子用户对应的电子邮件地址。
     * 
     */
    public String email() {
        return this.email;
    }
    /**
     * @return 子用户归属的用户组。
     * 
     */
    public List<String> groups() {
        return this.groups;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 子用户的登录配置。
     * 
     */
    public GetUserLoginProfile loginProfile() {
        return this.loginProfile;
    }
    /**
     * @return 子用户对应的手机号。
     * 
     */
    public String mobilePhone() {
        return this.mobilePhone;
    }
    /**
     * @return 子用户对应的权限策略。
     * 
     */
    public List<GetUserPolicy> policies() {
        return this.policies;
    }
    /**
     * @return 子用户的操作保护配置。
     * 
     */
    public GetUserSecurityConfig securityConfig() {
        return this.securityConfig;
    }
    /**
     * @return 子用户对应的资源标签。
     * 
     */
    public List<GetUserTag> tags() {
        return this.tags;
    }
    /**
     * @return 子用户对应的Trn表达式。
     * 
     */
    public String trn() {
        return this.trn;
    }
    /**
     * @return 子用户对应的更新时间。
     * 
     */
    public String updateDate() {
        return this.updateDate;
    }
    /**
     * @return 子用户的ID。
     * 
     */
    public Integer userId() {
        return this.userId;
    }
    /**
     * @return 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-{@literal @}符号。
     * 
     */
    public String userName() {
        return this.userName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Double accountId;
        private String createDate;
        private String description;
        private String displayName;
        private String email;
        private List<String> groups;
        private String id;
        private GetUserLoginProfile loginProfile;
        private String mobilePhone;
        private List<GetUserPolicy> policies;
        private GetUserSecurityConfig securityConfig;
        private List<GetUserTag> tags;
        private String trn;
        private String updateDate;
        private Integer userId;
        private String userName;
        public Builder() {}
        public Builder(GetUserResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.createDate = defaults.createDate;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.email = defaults.email;
    	      this.groups = defaults.groups;
    	      this.id = defaults.id;
    	      this.loginProfile = defaults.loginProfile;
    	      this.mobilePhone = defaults.mobilePhone;
    	      this.policies = defaults.policies;
    	      this.securityConfig = defaults.securityConfig;
    	      this.tags = defaults.tags;
    	      this.trn = defaults.trn;
    	      this.updateDate = defaults.updateDate;
    	      this.userId = defaults.userId;
    	      this.userName = defaults.userName;
        }

        @CustomType.Setter
        public Builder accountId(Double accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder createDate(String createDate) {
            if (createDate == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "createDate");
            }
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder email(String email) {
            if (email == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "email");
            }
            this.email = email;
            return this;
        }
        @CustomType.Setter
        public Builder groups(List<String> groups) {
            if (groups == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "groups");
            }
            this.groups = groups;
            return this;
        }
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder loginProfile(GetUserLoginProfile loginProfile) {
            if (loginProfile == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "loginProfile");
            }
            this.loginProfile = loginProfile;
            return this;
        }
        @CustomType.Setter
        public Builder mobilePhone(String mobilePhone) {
            if (mobilePhone == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "mobilePhone");
            }
            this.mobilePhone = mobilePhone;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<GetUserPolicy> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(GetUserPolicy... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder securityConfig(GetUserSecurityConfig securityConfig) {
            if (securityConfig == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "securityConfig");
            }
            this.securityConfig = securityConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetUserTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetUserTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder trn(String trn) {
            if (trn == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "trn");
            }
            this.trn = trn;
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(String updateDate) {
            if (updateDate == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "updateDate");
            }
            this.updateDate = updateDate;
            return this;
        }
        @CustomType.Setter
        public Builder userId(Integer userId) {
            if (userId == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userId");
            }
            this.userId = userId;
            return this;
        }
        @CustomType.Setter
        public Builder userName(String userName) {
            if (userName == null) {
              throw new MissingRequiredPropertyException("GetUserResult", "userName");
            }
            this.userName = userName;
            return this;
        }
        public GetUserResult build() {
            final var _resultValue = new GetUserResult();
            _resultValue.accountId = accountId;
            _resultValue.createDate = createDate;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.email = email;
            _resultValue.groups = groups;
            _resultValue.id = id;
            _resultValue.loginProfile = loginProfile;
            _resultValue.mobilePhone = mobilePhone;
            _resultValue.policies = policies;
            _resultValue.securityConfig = securityConfig;
            _resultValue.tags = tags;
            _resultValue.trn = trn;
            _resultValue.updateDate = updateDate;
            _resultValue.userId = userId;
            _resultValue.userName = userName;
            return _resultValue;
        }
    }
}
