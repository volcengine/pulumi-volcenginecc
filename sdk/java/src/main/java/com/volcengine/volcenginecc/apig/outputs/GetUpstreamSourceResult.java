// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.apig.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.apig.outputs.GetUpstreamSourceIngressSettings;
import com.volcengine.volcenginecc.apig.outputs.GetUpstreamSourceSourceSpec;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetUpstreamSourceResult {
    /**
     * @return 备注，长度限制为0~253个字符。
     * 
     */
    private String comments;
    /**
     * @return 创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 网关实例ID。
     * 
     */
    private String gatewayId;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     * 
     */
    private GetUpstreamSourceIngressSettings ingressSettings;
    /**
     * @return Upstream来源配置。
     * 
     */
    private GetUpstreamSourceSourceSpec sourceSpec;
    /**
     * @return Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     * 
     */
    private String sourceType;
    /**
     * @return 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
     * 
     */
    private String status;
    /**
     * @return 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
     * 
     */
    private String statusMessage;
    /**
     * @return 更新时间。
     * 
     */
    private String updatedTime;
    /**
     * @return Upstream来源ID。
     * 
     */
    private String upstreamSourceId;
    /**
     * @return 指定命名空间。
     * 
     */
    private List<String> watchNamespaces;

    private GetUpstreamSourceResult() {}
    /**
     * @return 备注，长度限制为0~253个字符。
     * 
     */
    public String comments() {
        return this.comments;
    }
    /**
     * @return 创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 网关实例ID。
     * 
     */
    public String gatewayId() {
        return this.gatewayId;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     * 
     */
    public GetUpstreamSourceIngressSettings ingressSettings() {
        return this.ingressSettings;
    }
    /**
     * @return Upstream来源配置。
     * 
     */
    public GetUpstreamSourceSourceSpec sourceSpec() {
        return this.sourceSpec;
    }
    /**
     * @return Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     * 
     */
    public String sourceType() {
        return this.sourceType;
    }
    /**
     * @return 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
     * 
     */
    public String statusMessage() {
        return this.statusMessage;
    }
    /**
     * @return 更新时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return Upstream来源ID。
     * 
     */
    public String upstreamSourceId() {
        return this.upstreamSourceId;
    }
    /**
     * @return 指定命名空间。
     * 
     */
    public List<String> watchNamespaces() {
        return this.watchNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUpstreamSourceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String comments;
        private String createdTime;
        private String gatewayId;
        private String id;
        private GetUpstreamSourceIngressSettings ingressSettings;
        private GetUpstreamSourceSourceSpec sourceSpec;
        private String sourceType;
        private String status;
        private String statusMessage;
        private String updatedTime;
        private String upstreamSourceId;
        private List<String> watchNamespaces;
        public Builder() {}
        public Builder(GetUpstreamSourceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.comments = defaults.comments;
    	      this.createdTime = defaults.createdTime;
    	      this.gatewayId = defaults.gatewayId;
    	      this.id = defaults.id;
    	      this.ingressSettings = defaults.ingressSettings;
    	      this.sourceSpec = defaults.sourceSpec;
    	      this.sourceType = defaults.sourceType;
    	      this.status = defaults.status;
    	      this.statusMessage = defaults.statusMessage;
    	      this.updatedTime = defaults.updatedTime;
    	      this.upstreamSourceId = defaults.upstreamSourceId;
    	      this.watchNamespaces = defaults.watchNamespaces;
        }

        @CustomType.Setter
        public Builder comments(String comments) {
            if (comments == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "comments");
            }
            this.comments = comments;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder gatewayId(String gatewayId) {
            if (gatewayId == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "gatewayId");
            }
            this.gatewayId = gatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ingressSettings(GetUpstreamSourceIngressSettings ingressSettings) {
            if (ingressSettings == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "ingressSettings");
            }
            this.ingressSettings = ingressSettings;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSpec(GetUpstreamSourceSourceSpec sourceSpec) {
            if (sourceSpec == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "sourceSpec");
            }
            this.sourceSpec = sourceSpec;
            return this;
        }
        @CustomType.Setter
        public Builder sourceType(String sourceType) {
            if (sourceType == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "sourceType");
            }
            this.sourceType = sourceType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusMessage(String statusMessage) {
            if (statusMessage == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "statusMessage");
            }
            this.statusMessage = statusMessage;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder upstreamSourceId(String upstreamSourceId) {
            if (upstreamSourceId == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "upstreamSourceId");
            }
            this.upstreamSourceId = upstreamSourceId;
            return this;
        }
        @CustomType.Setter
        public Builder watchNamespaces(List<String> watchNamespaces) {
            if (watchNamespaces == null) {
              throw new MissingRequiredPropertyException("GetUpstreamSourceResult", "watchNamespaces");
            }
            this.watchNamespaces = watchNamespaces;
            return this;
        }
        public Builder watchNamespaces(String... watchNamespaces) {
            return watchNamespaces(List.of(watchNamespaces));
        }
        public GetUpstreamSourceResult build() {
            final var _resultValue = new GetUpstreamSourceResult();
            _resultValue.comments = comments;
            _resultValue.createdTime = createdTime;
            _resultValue.gatewayId = gatewayId;
            _resultValue.id = id;
            _resultValue.ingressSettings = ingressSettings;
            _resultValue.sourceSpec = sourceSpec;
            _resultValue.sourceType = sourceType;
            _resultValue.status = status;
            _resultValue.statusMessage = statusMessage;
            _resultValue.updatedTime = updatedTime;
            _resultValue.upstreamSourceId = upstreamSourceId;
            _resultValue.watchNamespaces = watchNamespaces;
            return _resultValue;
        }
    }
}
