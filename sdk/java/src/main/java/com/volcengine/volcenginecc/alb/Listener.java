// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.alb.ListenerArgs;
import com.volcengine.volcenginecc.alb.inputs.ListenerState;
import com.volcengine.volcenginecc.alb.outputs.ListenerDomainExtension;
import com.volcengine.volcenginecc.alb.outputs.ListenerServerGroup;
import com.volcengine.volcenginecc.alb.outputs.ListenerTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * 每个 ALB 实例至少要有一个监听器才能正常工作。监听器接收客户端请求，并根据您配置的转发规则和负载均衡算法将请求分发到后端服务器上。您可以在一个 ALB 实例下创建多个监听器，并为监听器配置不同的监听协议，以处理使用不同协议的客户端请求。
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:alb/listener:Listener example &#34;listener_id&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:alb/listener:Listener")
public class Listener extends com.pulumi.resources.CustomResource {
    /**
     * 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     * 
     */
    @Export(name="accessLogRecordCustomizedHeadersEnabled", refs={String.class}, tree="[0]")
    private Output<String> accessLogRecordCustomizedHeadersEnabled;

    /**
     * @return 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     * 
     */
    public Output<String> accessLogRecordCustomizedHeadersEnabled() {
        return this.accessLogRecordCustomizedHeadersEnabled;
    }
    /**
     * 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     * 
     */
    @Export(name="aclIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> aclIds;

    /**
     * @return 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     * 
     */
    public Output<List<String>> aclIds() {
        return this.aclIds;
    }
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     * 
     */
    @Export(name="aclStatus", refs={String.class}, tree="[0]")
    private Output<String> aclStatus;

    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     * 
     */
    public Output<String> aclStatus() {
        return this.aclStatus;
    }
    /**
     * 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     * 
     */
    @Export(name="aclType", refs={String.class}, tree="[0]")
    private Output<String> aclType;

    /**
     * @return 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     * 
     */
    public Output<String> aclType() {
        return this.aclType;
    }
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     * 
     */
    @Export(name="caCertificateId", refs={String.class}, tree="[0]")
    private Output<String> caCertificateId;

    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     * 
     */
    public Output<String> caCertificateId() {
        return this.caCertificateId;
    }
    /**
     * HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     * 
     */
    @Export(name="caCertificateSource", refs={String.class}, tree="[0]")
    private Output<String> caCertificateSource;

    /**
     * @return HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     * 
     */
    public Output<String> caCertificateSource() {
        return this.caCertificateSource;
    }
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
     * 
     */
    @Export(name="certCenterCertificateId", refs={String.class}, tree="[0]")
    private Output<String> certCenterCertificateId;

    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
     * 
     */
    public Output<String> certCenterCertificateId() {
        return this.certCenterCertificateId;
    }
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     * 
     */
    @Export(name="certificateId", refs={String.class}, tree="[0]")
    private Output<String> certificateId;

    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     * 
     */
    @Export(name="certificateSource", refs={String.class}, tree="[0]")
    private Output<String> certificateSource;

    /**
     * @return HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     * 
     */
    public Output<String> certificateSource() {
        return this.certificateSource;
    }
    /**
     * 监听器的创建时间。
     * 
     */
    @Export(name="createdTime", refs={String.class}, tree="[0]")
    private Output<String> createdTime;

    /**
     * @return 监听器的创建时间。
     * 
     */
    public Output<String> createdTime() {
        return this.createdTime;
    }
    /**
     * 个性化配置ID，未绑定时值为空字符串。
     * 
     */
    @Export(name="customizedCfgId", refs={String.class}, tree="[0]")
    private Output<String> customizedCfgId;

    /**
     * @return 个性化配置ID，未绑定时值为空字符串。
     * 
     */
    public Output<String> customizedCfgId() {
        return this.customizedCfgId;
    }
    /**
     * 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    @Export(name="domainExtensions", refs={List.class,ListenerDomainExtension.class}, tree="[0,1]")
    private Output<List<ListenerDomainExtension>> domainExtensions;

    public Output<List<ListenerDomainExtension>> domainExtensions() {
        return this.domainExtensions;
    }
    /**
     * HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     * 
     */
    @Export(name="enableHttp2", refs={String.class}, tree="[0]")
    private Output<String> enableHttp2;

    /**
     * @return HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     * 
     */
    public Output<String> enableHttp2() {
        return this.enableHttp2;
    }
    /**
     * QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     * 
     */
    @Export(name="enableQuic", refs={String.class}, tree="[0]")
    private Output<String> enableQuic;

    /**
     * @return QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     * 
     */
    public Output<String> enableQuic() {
        return this.enableQuic;
    }
    /**
     * 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     * 
     */
    @Export(name="enabled", refs={String.class}, tree="[0]")
    private Output<String> enabled;

    /**
     * @return 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     * 
     */
    public Output<String> enabled() {
        return this.enabled;
    }
    /**
     * 监听器 ID。
     * 
     */
    @Export(name="listenerId", refs={String.class}, tree="[0]")
    private Output<String> listenerId;

    /**
     * @return 监听器 ID。
     * 
     */
    public Output<String> listenerId() {
        return this.listenerId;
    }
    /**
     * 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     * 
     */
    @Export(name="listenerName", refs={String.class}, tree="[0]")
    private Output<String> listenerName;

    /**
     * @return 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     * 
     */
    public Output<String> listenerName() {
        return this.listenerName;
    }
    /**
     * 监听器所属的负载均衡实例 ID。
     * 
     */
    @Export(name="loadBalancerId", refs={String.class}, tree="[0]")
    private Output<String> loadBalancerId;

    /**
     * @return 监听器所属的负载均衡实例 ID。
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    @Export(name="pcaLeafCertificateId", refs={String.class}, tree="[0]")
    private Output<String> pcaLeafCertificateId;

    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    public Output<String> pcaLeafCertificateId() {
        return this.pcaLeafCertificateId;
    }
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
     * 
     */
    @Export(name="pcaRootCaCertificateId", refs={String.class}, tree="[0]")
    private Output<String> pcaRootCaCertificateId;

    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
     * 
     */
    public Output<String> pcaRootCaCertificateId() {
        return this.pcaRootCaCertificateId;
    }
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
     * 
     */
    @Export(name="pcaSubCaCertificateId", refs={String.class}, tree="[0]")
    private Output<String> pcaSubCaCertificateId;

    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
     * 
     */
    public Output<String> pcaSubCaCertificateId() {
        return this.pcaSubCaCertificateId;
    }
    /**
     * 监听器的监听端口，取值：1 - 65535 。
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return 监听器的监听端口，取值：1 - 65535 。
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * 监听器所属项目名称。
     * 
     */
    @Export(name="projectName", refs={String.class}, tree="[0]")
    private Output<String> projectName;

    /**
     * @return 监听器所属项目名称。
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }
    /**
     * 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * 监听器的默认服务器组。
     * 
     */
    @Export(name="serverGroupId", refs={String.class}, tree="[0]")
    private Output<String> serverGroupId;

    /**
     * @return 监听器的默认服务器组。
     * 
     */
    public Output<String> serverGroupId() {
        return this.serverGroupId;
    }
    @Export(name="serverGroups", refs={List.class,ListenerServerGroup.class}, tree="[0,1]")
    private Output<List<ListenerServerGroup>> serverGroups;

    public Output<List<ListenerServerGroup>> serverGroups() {
        return this.serverGroups;
    }
    /**
     * 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    @Export(name="tags", refs={List.class,ListenerTag.class}, tree="[0,1]")
    private Output<List<ListenerTag>> tags;

    public Output<List<ListenerTag>> tags() {
        return this.tags;
    }
    /**
     * 监听器最近一次的操作时间。
     * 
     */
    @Export(name="updatedTime", refs={String.class}, tree="[0]")
    private Output<String> updatedTime;

    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    public Output<String> updatedTime() {
        return this.updatedTime;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Listener(java.lang.String name) {
        this(name, ListenerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Listener(java.lang.String name, ListenerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Listener(java.lang.String name, ListenerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:alb/listener:Listener", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Listener(java.lang.String name, Output<java.lang.String> id, @Nullable ListenerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:alb/listener:Listener", name, state, makeResourceOptions(options, id), false);
    }

    private static ListenerArgs makeArgs(ListenerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ListenerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Listener get(java.lang.String name, Output<java.lang.String> id, @Nullable ListenerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Listener(name, id, state, options);
    }
}
