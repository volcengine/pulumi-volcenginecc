// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.alb.inputs.ListenerDomainExtensionArgs;
import com.volcengine.volcenginecc.alb.inputs.ListenerServerGroupArgs;
import com.volcengine.volcenginecc.alb.inputs.ListenerTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerState Empty = new ListenerState();

    /**
     * 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     * 
     */
    @Import(name="accessLogRecordCustomizedHeadersEnabled")
    private @Nullable Output<String> accessLogRecordCustomizedHeadersEnabled;

    /**
     * @return 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     * 
     */
    public Optional<Output<String>> accessLogRecordCustomizedHeadersEnabled() {
        return Optional.ofNullable(this.accessLogRecordCustomizedHeadersEnabled);
    }

    /**
     * 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     * 
     */
    @Import(name="aclIds")
    private @Nullable Output<List<String>> aclIds;

    /**
     * @return 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     * 
     */
    public Optional<Output<List<String>>> aclIds() {
        return Optional.ofNullable(this.aclIds);
    }

    /**
     * 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     * 
     */
    @Import(name="aclStatus")
    private @Nullable Output<String> aclStatus;

    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     * 
     */
    public Optional<Output<String>> aclStatus() {
        return Optional.ofNullable(this.aclStatus);
    }

    /**
     * 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     * 
     */
    @Import(name="aclType")
    private @Nullable Output<String> aclType;

    /**
     * @return 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     * 
     */
    public Optional<Output<String>> aclType() {
        return Optional.ofNullable(this.aclType);
    }

    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     * 
     */
    @Import(name="caCertificateId")
    private @Nullable Output<String> caCertificateId;

    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     * 
     */
    public Optional<Output<String>> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }

    /**
     * HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     * 
     */
    @Import(name="caCertificateSource")
    private @Nullable Output<String> caCertificateSource;

    /**
     * @return HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     * 
     */
    public Optional<Output<String>> caCertificateSource() {
        return Optional.ofNullable(this.caCertificateSource);
    }

    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
     * 
     */
    @Import(name="certCenterCertificateId")
    private @Nullable Output<String> certCenterCertificateId;

    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
     * 
     */
    public Optional<Output<String>> certCenterCertificateId() {
        return Optional.ofNullable(this.certCenterCertificateId);
    }

    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     * 
     */
    @Import(name="certificateSource")
    private @Nullable Output<String> certificateSource;

    /**
     * @return HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     * 
     */
    public Optional<Output<String>> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }

    /**
     * 监听器的创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 监听器的创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 个性化配置ID，未绑定时值为空字符串。
     * 
     */
    @Import(name="customizedCfgId")
    private @Nullable Output<String> customizedCfgId;

    /**
     * @return 个性化配置ID，未绑定时值为空字符串。
     * 
     */
    public Optional<Output<String>> customizedCfgId() {
        return Optional.ofNullable(this.customizedCfgId);
    }

    /**
     * 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="domainExtensions")
    private @Nullable Output<List<ListenerDomainExtensionArgs>> domainExtensions;

    public Optional<Output<List<ListenerDomainExtensionArgs>>> domainExtensions() {
        return Optional.ofNullable(this.domainExtensions);
    }

    /**
     * HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     * 
     */
    @Import(name="enableHttp2")
    private @Nullable Output<String> enableHttp2;

    /**
     * @return HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     * 
     */
    public Optional<Output<String>> enableHttp2() {
        return Optional.ofNullable(this.enableHttp2);
    }

    /**
     * QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     * 
     */
    @Import(name="enableQuic")
    private @Nullable Output<String> enableQuic;

    /**
     * @return QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     * 
     */
    public Optional<Output<String>> enableQuic() {
        return Optional.ofNullable(this.enableQuic);
    }

    /**
     * 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<String> enabled;

    /**
     * @return 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     * 
     */
    public Optional<Output<String>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * 监听器 ID。
     * 
     */
    @Import(name="listenerId")
    private @Nullable Output<String> listenerId;

    /**
     * @return 监听器 ID。
     * 
     */
    public Optional<Output<String>> listenerId() {
        return Optional.ofNullable(this.listenerId);
    }

    /**
     * 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     * 
     */
    @Import(name="listenerName")
    private @Nullable Output<String> listenerName;

    /**
     * @return 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     * 
     */
    public Optional<Output<String>> listenerName() {
        return Optional.ofNullable(this.listenerName);
    }

    /**
     * 监听器所属的负载均衡实例 ID。
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return 监听器所属的负载均衡实例 ID。
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    @Import(name="pcaLeafCertificateId")
    private @Nullable Output<String> pcaLeafCertificateId;

    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    public Optional<Output<String>> pcaLeafCertificateId() {
        return Optional.ofNullable(this.pcaLeafCertificateId);
    }

    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
     * 
     */
    @Import(name="pcaRootCaCertificateId")
    private @Nullable Output<String> pcaRootCaCertificateId;

    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
     * 
     */
    public Optional<Output<String>> pcaRootCaCertificateId() {
        return Optional.ofNullable(this.pcaRootCaCertificateId);
    }

    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
     * 
     */
    @Import(name="pcaSubCaCertificateId")
    private @Nullable Output<String> pcaSubCaCertificateId;

    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
     * 
     */
    public Optional<Output<String>> pcaSubCaCertificateId() {
        return Optional.ofNullable(this.pcaSubCaCertificateId);
    }

    /**
     * 监听器的监听端口，取值：1 - 65535 。
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return 监听器的监听端口，取值：1 - 65535 。
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 监听器所属项目名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 监听器所属项目名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * 监听器的默认服务器组。
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return 监听器的默认服务器组。
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    @Import(name="serverGroups")
    private @Nullable Output<List<ListenerServerGroupArgs>> serverGroups;

    public Optional<Output<List<ListenerServerGroupArgs>>> serverGroups() {
        return Optional.ofNullable(this.serverGroups);
    }

    /**
     * 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<ListenerTagArgs>> tags;

    public Optional<Output<List<ListenerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 监听器最近一次的操作时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private ListenerState() {}

    private ListenerState(ListenerState $) {
        this.accessLogRecordCustomizedHeadersEnabled = $.accessLogRecordCustomizedHeadersEnabled;
        this.aclIds = $.aclIds;
        this.aclStatus = $.aclStatus;
        this.aclType = $.aclType;
        this.caCertificateId = $.caCertificateId;
        this.caCertificateSource = $.caCertificateSource;
        this.certCenterCertificateId = $.certCenterCertificateId;
        this.certificateId = $.certificateId;
        this.certificateSource = $.certificateSource;
        this.createdTime = $.createdTime;
        this.customizedCfgId = $.customizedCfgId;
        this.description = $.description;
        this.domainExtensions = $.domainExtensions;
        this.enableHttp2 = $.enableHttp2;
        this.enableQuic = $.enableQuic;
        this.enabled = $.enabled;
        this.listenerId = $.listenerId;
        this.listenerName = $.listenerName;
        this.loadBalancerId = $.loadBalancerId;
        this.pcaLeafCertificateId = $.pcaLeafCertificateId;
        this.pcaRootCaCertificateId = $.pcaRootCaCertificateId;
        this.pcaSubCaCertificateId = $.pcaSubCaCertificateId;
        this.port = $.port;
        this.projectName = $.projectName;
        this.protocol = $.protocol;
        this.serverGroupId = $.serverGroupId;
        this.serverGroups = $.serverGroups;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerState $;

        public Builder() {
            $ = new ListenerState();
        }

        public Builder(ListenerState defaults) {
            $ = new ListenerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessLogRecordCustomizedHeadersEnabled 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
         * 
         * @return builder
         * 
         */
        public Builder accessLogRecordCustomizedHeadersEnabled(@Nullable Output<String> accessLogRecordCustomizedHeadersEnabled) {
            $.accessLogRecordCustomizedHeadersEnabled = accessLogRecordCustomizedHeadersEnabled;
            return this;
        }

        /**
         * @param accessLogRecordCustomizedHeadersEnabled 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
         * 
         * @return builder
         * 
         */
        public Builder accessLogRecordCustomizedHeadersEnabled(String accessLogRecordCustomizedHeadersEnabled) {
            return accessLogRecordCustomizedHeadersEnabled(Output.of(accessLogRecordCustomizedHeadersEnabled));
        }

        /**
         * @param aclIds 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
         * 
         * @return builder
         * 
         */
        public Builder aclIds(@Nullable Output<List<String>> aclIds) {
            $.aclIds = aclIds;
            return this;
        }

        /**
         * @param aclIds 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
         * 
         * @return builder
         * 
         */
        public Builder aclIds(List<String> aclIds) {
            return aclIds(Output.of(aclIds));
        }

        /**
         * @param aclIds 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
         * 
         * @return builder
         * 
         */
        public Builder aclIds(String... aclIds) {
            return aclIds(List.of(aclIds));
        }

        /**
         * @param aclStatus 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
         * 
         * @return builder
         * 
         */
        public Builder aclStatus(@Nullable Output<String> aclStatus) {
            $.aclStatus = aclStatus;
            return this;
        }

        /**
         * @param aclStatus 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
         * 
         * @return builder
         * 
         */
        public Builder aclStatus(String aclStatus) {
            return aclStatus(Output.of(aclStatus));
        }

        /**
         * @param aclType 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
         * 
         * @return builder
         * 
         */
        public Builder aclType(@Nullable Output<String> aclType) {
            $.aclType = aclType;
            return this;
        }

        /**
         * @param aclType 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
         * 
         * @return builder
         * 
         */
        public Builder aclType(String aclType) {
            return aclType(Output.of(aclType));
        }

        /**
         * @param caCertificateId HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(@Nullable Output<String> caCertificateId) {
            $.caCertificateId = caCertificateId;
            return this;
        }

        /**
         * @param caCertificateId HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(String caCertificateId) {
            return caCertificateId(Output.of(caCertificateId));
        }

        /**
         * @param caCertificateSource HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
         * 
         * @return builder
         * 
         */
        public Builder caCertificateSource(@Nullable Output<String> caCertificateSource) {
            $.caCertificateSource = caCertificateSource;
            return this;
        }

        /**
         * @param caCertificateSource HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
         * 
         * @return builder
         * 
         */
        public Builder caCertificateSource(String caCertificateSource) {
            return caCertificateSource(Output.of(caCertificateSource));
        }

        /**
         * @param certCenterCertificateId HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
         * 
         * @return builder
         * 
         */
        public Builder certCenterCertificateId(@Nullable Output<String> certCenterCertificateId) {
            $.certCenterCertificateId = certCenterCertificateId;
            return this;
        }

        /**
         * @param certCenterCertificateId HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
         * 
         * @return builder
         * 
         */
        public Builder certCenterCertificateId(String certCenterCertificateId) {
            return certCenterCertificateId(Output.of(certCenterCertificateId));
        }

        /**
         * @param certificateId HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateSource HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(@Nullable Output<String> certificateSource) {
            $.certificateSource = certificateSource;
            return this;
        }

        /**
         * @param certificateSource HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(String certificateSource) {
            return certificateSource(Output.of(certificateSource));
        }

        /**
         * @param createdTime 监听器的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 监听器的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param customizedCfgId 个性化配置ID，未绑定时值为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder customizedCfgId(@Nullable Output<String> customizedCfgId) {
            $.customizedCfgId = customizedCfgId;
            return this;
        }

        /**
         * @param customizedCfgId 个性化配置ID，未绑定时值为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder customizedCfgId(String customizedCfgId) {
            return customizedCfgId(Output.of(customizedCfgId));
        }

        /**
         * @param description 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder domainExtensions(@Nullable Output<List<ListenerDomainExtensionArgs>> domainExtensions) {
            $.domainExtensions = domainExtensions;
            return this;
        }

        public Builder domainExtensions(List<ListenerDomainExtensionArgs> domainExtensions) {
            return domainExtensions(Output.of(domainExtensions));
        }

        public Builder domainExtensions(ListenerDomainExtensionArgs... domainExtensions) {
            return domainExtensions(List.of(domainExtensions));
        }

        /**
         * @param enableHttp2 HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
         * 
         * @return builder
         * 
         */
        public Builder enableHttp2(@Nullable Output<String> enableHttp2) {
            $.enableHttp2 = enableHttp2;
            return this;
        }

        /**
         * @param enableHttp2 HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
         * 
         * @return builder
         * 
         */
        public Builder enableHttp2(String enableHttp2) {
            return enableHttp2(Output.of(enableHttp2));
        }

        /**
         * @param enableQuic QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
         * 
         * @return builder
         * 
         */
        public Builder enableQuic(@Nullable Output<String> enableQuic) {
            $.enableQuic = enableQuic;
            return this;
        }

        /**
         * @param enableQuic QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
         * 
         * @return builder
         * 
         */
        public Builder enableQuic(String enableQuic) {
            return enableQuic(Output.of(enableQuic));
        }

        /**
         * @param enabled 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<String> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
         * 
         * @return builder
         * 
         */
        public Builder enabled(String enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param listenerId 监听器 ID。
         * 
         * @return builder
         * 
         */
        public Builder listenerId(@Nullable Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId 监听器 ID。
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        /**
         * @param listenerName 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
         * 
         * @return builder
         * 
         */
        public Builder listenerName(@Nullable Output<String> listenerName) {
            $.listenerName = listenerName;
            return this;
        }

        /**
         * @param listenerName 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
         * 
         * @return builder
         * 
         */
        public Builder listenerName(String listenerName) {
            return listenerName(Output.of(listenerName));
        }

        /**
         * @param loadBalancerId 监听器所属的负载均衡实例 ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId 监听器所属的负载均衡实例 ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param pcaLeafCertificateId HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
         * 
         * @return builder
         * 
         */
        public Builder pcaLeafCertificateId(@Nullable Output<String> pcaLeafCertificateId) {
            $.pcaLeafCertificateId = pcaLeafCertificateId;
            return this;
        }

        /**
         * @param pcaLeafCertificateId HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
         * 
         * @return builder
         * 
         */
        public Builder pcaLeafCertificateId(String pcaLeafCertificateId) {
            return pcaLeafCertificateId(Output.of(pcaLeafCertificateId));
        }

        /**
         * @param pcaRootCaCertificateId HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
         * 
         * @return builder
         * 
         */
        public Builder pcaRootCaCertificateId(@Nullable Output<String> pcaRootCaCertificateId) {
            $.pcaRootCaCertificateId = pcaRootCaCertificateId;
            return this;
        }

        /**
         * @param pcaRootCaCertificateId HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
         * 
         * @return builder
         * 
         */
        public Builder pcaRootCaCertificateId(String pcaRootCaCertificateId) {
            return pcaRootCaCertificateId(Output.of(pcaRootCaCertificateId));
        }

        /**
         * @param pcaSubCaCertificateId HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
         * 
         * @return builder
         * 
         */
        public Builder pcaSubCaCertificateId(@Nullable Output<String> pcaSubCaCertificateId) {
            $.pcaSubCaCertificateId = pcaSubCaCertificateId;
            return this;
        }

        /**
         * @param pcaSubCaCertificateId HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
         * 
         * @return builder
         * 
         */
        public Builder pcaSubCaCertificateId(String pcaSubCaCertificateId) {
            return pcaSubCaCertificateId(Output.of(pcaSubCaCertificateId));
        }

        /**
         * @param port 监听器的监听端口，取值：1 - 65535 。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 监听器的监听端口，取值：1 - 65535 。
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param projectName 监听器所属项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 监听器所属项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param protocol 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param serverGroupId 监听器的默认服务器组。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId 监听器的默认服务器组。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        public Builder serverGroups(@Nullable Output<List<ListenerServerGroupArgs>> serverGroups) {
            $.serverGroups = serverGroups;
            return this;
        }

        public Builder serverGroups(List<ListenerServerGroupArgs> serverGroups) {
            return serverGroups(Output.of(serverGroups));
        }

        public Builder serverGroups(ListenerServerGroupArgs... serverGroups) {
            return serverGroups(List.of(serverGroups));
        }

        /**
         * @param status 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<ListenerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ListenerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ListenerTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedTime 监听器最近一次的操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 监听器最近一次的操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public ListenerState build() {
            return $;
        }
    }

}
