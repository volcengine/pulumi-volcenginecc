// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.iam.inputs.PolicyPolicyRoleArgs;
import com.volcengine.volcenginecc.iam.inputs.PolicyPolicyUserArgs;
import com.volcengine.volcenginecc.iam.inputs.PolicyPolicyUserGroupArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyState extends com.pulumi.resources.ResourceArgs {

    public static final PolicyState Empty = new PolicyState();

    /**
     * 策略绑定的身份数量。
     * 
     */
    @Import(name="attachmentCount")
    private @Nullable Output<Integer> attachmentCount;

    /**
     * @return 策略绑定的身份数量。
     * 
     */
    public Optional<Output<Integer>> attachmentCount() {
        return Optional.ofNullable(this.attachmentCount);
    }

    /**
     * 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     * 
     */
    @Import(name="category")
    private @Nullable Output<String> category;

    /**
     * @return 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     * 
     */
    public Optional<Output<String>> category() {
        return Optional.ofNullable(this.category);
    }

    /**
     * 策略创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 策略创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 策略描述，长度不超过128。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 策略描述，长度不超过128。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 是否是服务关联角色的策略，0代表否，1代表是。
     * 
     */
    @Import(name="isServiceRolePolicy")
    private @Nullable Output<Integer> isServiceRolePolicy;

    /**
     * @return 是否是服务关联角色的策略，0代表否，1代表是。
     * 
     */
    public Optional<Output<Integer>> isServiceRolePolicy() {
        return Optional.ofNullable(this.isServiceRolePolicy);
    }

    /**
     * 策略语法内容，例如：{&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;iam:&#34;,&#34;tag:&#34;],&#34;Resource&#34;:[&#34;*&#34;]}]}
     * 
     */
    @Import(name="policyDocument")
    private @Nullable Output<String> policyDocument;

    /**
     * @return 策略语法内容，例如：{&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;iam:&#34;,&#34;tag:&#34;],&#34;Resource&#34;:[&#34;*&#34;]}]}
     * 
     */
    public Optional<Output<String>> policyDocument() {
        return Optional.ofNullable(this.policyDocument);
    }

    /**
     * 策略名，长度1~64，支持英文、数字和+=,.{@literal @}-_符号。
     * 
     */
    @Import(name="policyName")
    private @Nullable Output<String> policyName;

    /**
     * @return 策略名，长度1~64，支持英文、数字和+=,.{@literal @}-_符号。
     * 
     */
    public Optional<Output<String>> policyName() {
        return Optional.ofNullable(this.policyName);
    }

    @Import(name="policyRoles")
    private @Nullable Output<List<PolicyPolicyRoleArgs>> policyRoles;

    public Optional<Output<List<PolicyPolicyRoleArgs>>> policyRoles() {
        return Optional.ofNullable(this.policyRoles);
    }

    /**
     * 策略的TRN。
     * 
     */
    @Import(name="policyTrn")
    private @Nullable Output<String> policyTrn;

    /**
     * @return 策略的TRN。
     * 
     */
    public Optional<Output<String>> policyTrn() {
        return Optional.ofNullable(this.policyTrn);
    }

    /**
     * 策略类型。System代表系统预设策略，Custom代表自定义策略。
     * 
     */
    @Import(name="policyType")
    private @Nullable Output<String> policyType;

    /**
     * @return 策略类型。System代表系统预设策略，Custom代表自定义策略。
     * 
     */
    public Optional<Output<String>> policyType() {
        return Optional.ofNullable(this.policyType);
    }

    @Import(name="policyUserGroups")
    private @Nullable Output<List<PolicyPolicyUserGroupArgs>> policyUserGroups;

    public Optional<Output<List<PolicyPolicyUserGroupArgs>>> policyUserGroups() {
        return Optional.ofNullable(this.policyUserGroups);
    }

    @Import(name="policyUsers")
    private @Nullable Output<List<PolicyPolicyUserArgs>> policyUsers;

    public Optional<Output<List<PolicyPolicyUserArgs>>> policyUsers() {
        return Optional.ofNullable(this.policyUsers);
    }

    /**
     * 策略更新时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 策略更新时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private PolicyState() {}

    private PolicyState(PolicyState $) {
        this.attachmentCount = $.attachmentCount;
        this.category = $.category;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.isServiceRolePolicy = $.isServiceRolePolicy;
        this.policyDocument = $.policyDocument;
        this.policyName = $.policyName;
        this.policyRoles = $.policyRoles;
        this.policyTrn = $.policyTrn;
        this.policyType = $.policyType;
        this.policyUserGroups = $.policyUserGroups;
        this.policyUsers = $.policyUsers;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyState $;

        public Builder() {
            $ = new PolicyState();
        }

        public Builder(PolicyState defaults) {
            $ = new PolicyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param attachmentCount 策略绑定的身份数量。
         * 
         * @return builder
         * 
         */
        public Builder attachmentCount(@Nullable Output<Integer> attachmentCount) {
            $.attachmentCount = attachmentCount;
            return this;
        }

        /**
         * @param attachmentCount 策略绑定的身份数量。
         * 
         * @return builder
         * 
         */
        public Builder attachmentCount(Integer attachmentCount) {
            return attachmentCount(Output.of(attachmentCount));
        }

        /**
         * @param category 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
         * 
         * @return builder
         * 
         */
        public Builder category(@Nullable Output<String> category) {
            $.category = category;
            return this;
        }

        /**
         * @param category 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
         * 
         * @return builder
         * 
         */
        public Builder category(String category) {
            return category(Output.of(category));
        }

        /**
         * @param createdTime 策略创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 策略创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 策略描述，长度不超过128。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 策略描述，长度不超过128。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param isServiceRolePolicy 是否是服务关联角色的策略，0代表否，1代表是。
         * 
         * @return builder
         * 
         */
        public Builder isServiceRolePolicy(@Nullable Output<Integer> isServiceRolePolicy) {
            $.isServiceRolePolicy = isServiceRolePolicy;
            return this;
        }

        /**
         * @param isServiceRolePolicy 是否是服务关联角色的策略，0代表否，1代表是。
         * 
         * @return builder
         * 
         */
        public Builder isServiceRolePolicy(Integer isServiceRolePolicy) {
            return isServiceRolePolicy(Output.of(isServiceRolePolicy));
        }

        /**
         * @param policyDocument 策略语法内容，例如：{&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;iam:&#34;,&#34;tag:&#34;],&#34;Resource&#34;:[&#34;*&#34;]}]}
         * 
         * @return builder
         * 
         */
        public Builder policyDocument(@Nullable Output<String> policyDocument) {
            $.policyDocument = policyDocument;
            return this;
        }

        /**
         * @param policyDocument 策略语法内容，例如：{&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;iam:&#34;,&#34;tag:&#34;],&#34;Resource&#34;:[&#34;*&#34;]}]}
         * 
         * @return builder
         * 
         */
        public Builder policyDocument(String policyDocument) {
            return policyDocument(Output.of(policyDocument));
        }

        /**
         * @param policyName 策略名，长度1~64，支持英文、数字和+=,.{@literal @}-_符号。
         * 
         * @return builder
         * 
         */
        public Builder policyName(@Nullable Output<String> policyName) {
            $.policyName = policyName;
            return this;
        }

        /**
         * @param policyName 策略名，长度1~64，支持英文、数字和+=,.{@literal @}-_符号。
         * 
         * @return builder
         * 
         */
        public Builder policyName(String policyName) {
            return policyName(Output.of(policyName));
        }

        public Builder policyRoles(@Nullable Output<List<PolicyPolicyRoleArgs>> policyRoles) {
            $.policyRoles = policyRoles;
            return this;
        }

        public Builder policyRoles(List<PolicyPolicyRoleArgs> policyRoles) {
            return policyRoles(Output.of(policyRoles));
        }

        public Builder policyRoles(PolicyPolicyRoleArgs... policyRoles) {
            return policyRoles(List.of(policyRoles));
        }

        /**
         * @param policyTrn 策略的TRN。
         * 
         * @return builder
         * 
         */
        public Builder policyTrn(@Nullable Output<String> policyTrn) {
            $.policyTrn = policyTrn;
            return this;
        }

        /**
         * @param policyTrn 策略的TRN。
         * 
         * @return builder
         * 
         */
        public Builder policyTrn(String policyTrn) {
            return policyTrn(Output.of(policyTrn));
        }

        /**
         * @param policyType 策略类型。System代表系统预设策略，Custom代表自定义策略。
         * 
         * @return builder
         * 
         */
        public Builder policyType(@Nullable Output<String> policyType) {
            $.policyType = policyType;
            return this;
        }

        /**
         * @param policyType 策略类型。System代表系统预设策略，Custom代表自定义策略。
         * 
         * @return builder
         * 
         */
        public Builder policyType(String policyType) {
            return policyType(Output.of(policyType));
        }

        public Builder policyUserGroups(@Nullable Output<List<PolicyPolicyUserGroupArgs>> policyUserGroups) {
            $.policyUserGroups = policyUserGroups;
            return this;
        }

        public Builder policyUserGroups(List<PolicyPolicyUserGroupArgs> policyUserGroups) {
            return policyUserGroups(Output.of(policyUserGroups));
        }

        public Builder policyUserGroups(PolicyPolicyUserGroupArgs... policyUserGroups) {
            return policyUserGroups(List.of(policyUserGroups));
        }

        public Builder policyUsers(@Nullable Output<List<PolicyPolicyUserArgs>> policyUsers) {
            $.policyUsers = policyUsers;
            return this;
        }

        public Builder policyUsers(List<PolicyPolicyUserArgs> policyUsers) {
            return policyUsers(Output.of(policyUsers));
        }

        public Builder policyUsers(PolicyPolicyUserArgs... policyUsers) {
            return policyUsers(List.of(policyUsers));
        }

        /**
         * @param updatedTime 策略更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 策略更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public PolicyState build() {
            return $;
        }
    }

}
