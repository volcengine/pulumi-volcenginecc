// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.vpc.inputs.PrefixListAssociationsRouteTableArgs;
import com.volcengine.volcenginecc.vpc.inputs.PrefixListAssociationsSecurityGroupArgs;
import com.volcengine.volcenginecc.vpc.inputs.PrefixListPrefixListEntryArgs;
import com.volcengine.volcenginecc.vpc.inputs.PrefixListTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PrefixListState extends com.pulumi.resources.ResourceArgs {

    public static final PrefixListState Empty = new PrefixListState();

    /**
     * 前缀列表关联的资源数量。
     * 
     */
    @Import(name="associationCount")
    private @Nullable Output<Integer> associationCount;

    /**
     * @return 前缀列表关联的资源数量。
     * 
     */
    public Optional<Output<Integer>> associationCount() {
        return Optional.ofNullable(this.associationCount);
    }

    @Import(name="associationsRouteTables")
    private @Nullable Output<List<PrefixListAssociationsRouteTableArgs>> associationsRouteTables;

    public Optional<Output<List<PrefixListAssociationsRouteTableArgs>>> associationsRouteTables() {
        return Optional.ofNullable(this.associationsRouteTables);
    }

    @Import(name="associationsSecurityGroups")
    private @Nullable Output<List<PrefixListAssociationsSecurityGroupArgs>> associationsSecurityGroups;

    public Optional<Output<List<PrefixListAssociationsSecurityGroupArgs>>> associationsSecurityGroups() {
        return Optional.ofNullable(this.associationsSecurityGroups);
    }

    /**
     * 前缀列表的创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 前缀列表的创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
     * 
     */
    @Import(name="ipVersion")
    private @Nullable Output<String> ipVersion;

    /**
     * @return IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
     * 
     */
    public Optional<Output<String>> ipVersion() {
        return Optional.ofNullable(this.ipVersion);
    }

    /**
     * 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
     * 
     */
    @Import(name="maxEntries")
    private @Nullable Output<Integer> maxEntries;

    /**
     * @return 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
     * 
     */
    public Optional<Output<Integer>> maxEntries() {
        return Optional.ofNullable(this.maxEntries);
    }

    @Import(name="prefixListEntries")
    private @Nullable Output<List<PrefixListPrefixListEntryArgs>> prefixListEntries;

    public Optional<Output<List<PrefixListPrefixListEntryArgs>>> prefixListEntries() {
        return Optional.ofNullable(this.prefixListEntries);
    }

    /**
     * 前缀列表的ID。
     * 
     */
    @Import(name="prefixListId")
    private @Nullable Output<String> prefixListId;

    /**
     * @return 前缀列表的ID。
     * 
     */
    public Optional<Output<String>> prefixListId() {
        return Optional.ofNullable(this.prefixListId);
    }

    /**
     * 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
     * 
     */
    @Import(name="prefixListName")
    private @Nullable Output<String> prefixListName;

    /**
     * @return 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
     * 
     */
    public Optional<Output<String>> prefixListName() {
        return Optional.ofNullable(this.prefixListName);
    }

    /**
     * 前缀列表所属项目的名称，不填默认加入default项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 前缀列表所属项目的名称，不填默认加入default项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<PrefixListTagArgs>> tags;

    public Optional<Output<List<PrefixListTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 前缀列表的最近一次修改时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 前缀列表的最近一次修改时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private PrefixListState() {}

    private PrefixListState(PrefixListState $) {
        this.associationCount = $.associationCount;
        this.associationsRouteTables = $.associationsRouteTables;
        this.associationsSecurityGroups = $.associationsSecurityGroups;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.ipVersion = $.ipVersion;
        this.maxEntries = $.maxEntries;
        this.prefixListEntries = $.prefixListEntries;
        this.prefixListId = $.prefixListId;
        this.prefixListName = $.prefixListName;
        this.projectName = $.projectName;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PrefixListState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PrefixListState $;

        public Builder() {
            $ = new PrefixListState();
        }

        public Builder(PrefixListState defaults) {
            $ = new PrefixListState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associationCount 前缀列表关联的资源数量。
         * 
         * @return builder
         * 
         */
        public Builder associationCount(@Nullable Output<Integer> associationCount) {
            $.associationCount = associationCount;
            return this;
        }

        /**
         * @param associationCount 前缀列表关联的资源数量。
         * 
         * @return builder
         * 
         */
        public Builder associationCount(Integer associationCount) {
            return associationCount(Output.of(associationCount));
        }

        public Builder associationsRouteTables(@Nullable Output<List<PrefixListAssociationsRouteTableArgs>> associationsRouteTables) {
            $.associationsRouteTables = associationsRouteTables;
            return this;
        }

        public Builder associationsRouteTables(List<PrefixListAssociationsRouteTableArgs> associationsRouteTables) {
            return associationsRouteTables(Output.of(associationsRouteTables));
        }

        public Builder associationsRouteTables(PrefixListAssociationsRouteTableArgs... associationsRouteTables) {
            return associationsRouteTables(List.of(associationsRouteTables));
        }

        public Builder associationsSecurityGroups(@Nullable Output<List<PrefixListAssociationsSecurityGroupArgs>> associationsSecurityGroups) {
            $.associationsSecurityGroups = associationsSecurityGroups;
            return this;
        }

        public Builder associationsSecurityGroups(List<PrefixListAssociationsSecurityGroupArgs> associationsSecurityGroups) {
            return associationsSecurityGroups(Output.of(associationsSecurityGroups));
        }

        public Builder associationsSecurityGroups(PrefixListAssociationsSecurityGroupArgs... associationsSecurityGroups) {
            return associationsSecurityGroups(List.of(associationsSecurityGroups));
        }

        /**
         * @param createdTime 前缀列表的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 前缀列表的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipVersion IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(@Nullable Output<String> ipVersion) {
            $.ipVersion = ipVersion;
            return this;
        }

        /**
         * @param ipVersion IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
         * 
         * @return builder
         * 
         */
        public Builder ipVersion(String ipVersion) {
            return ipVersion(Output.of(ipVersion));
        }

        /**
         * @param maxEntries 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(@Nullable Output<Integer> maxEntries) {
            $.maxEntries = maxEntries;
            return this;
        }

        /**
         * @param maxEntries 最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
         * 
         * @return builder
         * 
         */
        public Builder maxEntries(Integer maxEntries) {
            return maxEntries(Output.of(maxEntries));
        }

        public Builder prefixListEntries(@Nullable Output<List<PrefixListPrefixListEntryArgs>> prefixListEntries) {
            $.prefixListEntries = prefixListEntries;
            return this;
        }

        public Builder prefixListEntries(List<PrefixListPrefixListEntryArgs> prefixListEntries) {
            return prefixListEntries(Output.of(prefixListEntries));
        }

        public Builder prefixListEntries(PrefixListPrefixListEntryArgs... prefixListEntries) {
            return prefixListEntries(List.of(prefixListEntries));
        }

        /**
         * @param prefixListId 前缀列表的ID。
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            $.prefixListId = prefixListId;
            return this;
        }

        /**
         * @param prefixListId 前缀列表的ID。
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(String prefixListId) {
            return prefixListId(Output.of(prefixListId));
        }

        /**
         * @param prefixListName 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
         * 
         * @return builder
         * 
         */
        public Builder prefixListName(@Nullable Output<String> prefixListName) {
            $.prefixListName = prefixListName;
            return this;
        }

        /**
         * @param prefixListName 前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
         * 
         * @return builder
         * 
         */
        public Builder prefixListName(String prefixListName) {
            return prefixListName(Output.of(prefixListName));
        }

        /**
         * @param projectName 前缀列表所属项目的名称，不填默认加入default项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 前缀列表所属项目的名称，不填默认加入default项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param status 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<PrefixListTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<PrefixListTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(PrefixListTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedTime 前缀列表的最近一次修改时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 前缀列表的最近一次修改时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public PrefixListState build() {
            return $;
        }
    }

}
