// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceVisitAddr {
    /**
     * @return 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
     * 
     */
    private String addrType;
    /**
     * @return IP 地址或者域名。
     * 
     */
    private String address;
    /**
     * @return 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
     * 
     */
    private String eipId;
    /**
     * @return 端口号。
     * 
     */
    private String port;
    /**
     * @return 连接地址所对应的 IPv6 地址。
     * 
     */
    private String viPv6;
    /**
     * @return 连接地址所对应的 IPv4 地址。
     * 
     */
    private String vip;

    private GetInstanceVisitAddr() {}
    /**
     * @return 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
     * 
     */
    public String addrType() {
        return this.addrType;
    }
    /**
     * @return IP 地址或者域名。
     * 
     */
    public String address() {
        return this.address;
    }
    /**
     * @return 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
     * 
     */
    public String eipId() {
        return this.eipId;
    }
    /**
     * @return 端口号。
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return 连接地址所对应的 IPv6 地址。
     * 
     */
    public String viPv6() {
        return this.viPv6;
    }
    /**
     * @return 连接地址所对应的 IPv4 地址。
     * 
     */
    public String vip() {
        return this.vip;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceVisitAddr defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addrType;
        private String address;
        private String eipId;
        private String port;
        private String viPv6;
        private String vip;
        public Builder() {}
        public Builder(GetInstanceVisitAddr defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addrType = defaults.addrType;
    	      this.address = defaults.address;
    	      this.eipId = defaults.eipId;
    	      this.port = defaults.port;
    	      this.viPv6 = defaults.viPv6;
    	      this.vip = defaults.vip;
        }

        @CustomType.Setter
        public Builder addrType(String addrType) {
            if (addrType == null) {
              throw new MissingRequiredPropertyException("GetInstanceVisitAddr", "addrType");
            }
            this.addrType = addrType;
            return this;
        }
        @CustomType.Setter
        public Builder address(String address) {
            if (address == null) {
              throw new MissingRequiredPropertyException("GetInstanceVisitAddr", "address");
            }
            this.address = address;
            return this;
        }
        @CustomType.Setter
        public Builder eipId(String eipId) {
            if (eipId == null) {
              throw new MissingRequiredPropertyException("GetInstanceVisitAddr", "eipId");
            }
            this.eipId = eipId;
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetInstanceVisitAddr", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder viPv6(String viPv6) {
            if (viPv6 == null) {
              throw new MissingRequiredPropertyException("GetInstanceVisitAddr", "viPv6");
            }
            this.viPv6 = viPv6;
            return this;
        }
        @CustomType.Setter
        public Builder vip(String vip) {
            if (vip == null) {
              throw new MissingRequiredPropertyException("GetInstanceVisitAddr", "vip");
            }
            this.vip = vip;
            return this;
        }
        public GetInstanceVisitAddr build() {
            final var _resultValue = new GetInstanceVisitAddr();
            _resultValue.addrType = addrType;
            _resultValue.address = address;
            _resultValue.eipId = eipId;
            _resultValue.port = port;
            _resultValue.viPv6 = viPv6;
            _resultValue.vip = vip;
            return _resultValue;
        }
    }
}
