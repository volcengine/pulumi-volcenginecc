// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.directconnect.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.directconnect.outputs.GetDirectConnectGatewayAssociateCen;
import com.volcengine.volcenginecc.directconnect.outputs.GetDirectConnectGatewayTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDirectConnectGatewayResult {
    /**
     * @return 专线网关所属账号的ID。
     * 
     */
    private String accountId;
    /**
     * @return 关联的CEN信息。
     * 
     */
    private List<GetDirectConnectGatewayAssociateCen> associateCens;
    /**
     * @return 专线网关是否被锁定。Normal：正常。FinancialLocked：被锁定。
     * 
     */
    private String businessStatus;
    /**
     * @return 创建专线网关的时间。
     * 
     */
    private String createdTime;
    /**
     * @return 预期资源强制回收时间。仅当资源因为欠费冻结，此参数才会有返回值，否则均返回空值。
     * 
     */
    private String deletedTime;
    /**
     * @return 专线网关的描述信息。以中文、字母、数字开头，只能包含中文、字母、数字、点号（.）、空格（ ）、下划线（_）、中划线（-）、等号（=）、英文逗号（,）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return 专线网关的ID。
     * 
     */
    private String directConnectGatewayId;
    /**
     * @return 专线网关的名称。以中文、字母、数字开头，只能包含中文、字母、数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为专线网关的ID。
     * 
     */
    private String directConnectGatewayName;
    /**
     * @return 是否支持IPv6。true：支持。false：不支持。
     * 
     */
    private Boolean enableIpv6;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 专线网关被锁定的原因。unlock：解锁。financial：因欠费被锁定。security：因安全被锁定。
     * 
     */
    private String lockReason;
    /**
     * @return 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值，否则均返回空值。
     * 
     */
    private String overdueTime;
    /**
     * @return 专线网关所属的项目。
     * 
     */
    private String projectName;
    /**
     * @return 专线网关的状态。Creating：创建中。Deleting：删除中。Pending：配置中。Available：可用。
     * 
     */
    private String status;
    /**
     * @return 专线网关已添加的全部标签信息。
     * 
     */
    private List<GetDirectConnectGatewayTag> tags;
    /**
     * @return 更新专线网关的时间。
     * 
     */
    private String updatedTime;

    private GetDirectConnectGatewayResult() {}
    /**
     * @return 专线网关所属账号的ID。
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return 关联的CEN信息。
     * 
     */
    public List<GetDirectConnectGatewayAssociateCen> associateCens() {
        return this.associateCens;
    }
    /**
     * @return 专线网关是否被锁定。Normal：正常。FinancialLocked：被锁定。
     * 
     */
    public String businessStatus() {
        return this.businessStatus;
    }
    /**
     * @return 创建专线网关的时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 预期资源强制回收时间。仅当资源因为欠费冻结，此参数才会有返回值，否则均返回空值。
     * 
     */
    public String deletedTime() {
        return this.deletedTime;
    }
    /**
     * @return 专线网关的描述信息。以中文、字母、数字开头，只能包含中文、字母、数字、点号（.）、空格（ ）、下划线（_）、中划线（-）、等号（=）、英文逗号（,）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 专线网关的ID。
     * 
     */
    public String directConnectGatewayId() {
        return this.directConnectGatewayId;
    }
    /**
     * @return 专线网关的名称。以中文、字母、数字开头，只能包含中文、字母、数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为专线网关的ID。
     * 
     */
    public String directConnectGatewayName() {
        return this.directConnectGatewayName;
    }
    /**
     * @return 是否支持IPv6。true：支持。false：不支持。
     * 
     */
    public Boolean enableIpv6() {
        return this.enableIpv6;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 专线网关被锁定的原因。unlock：解锁。financial：因欠费被锁定。security：因安全被锁定。
     * 
     */
    public String lockReason() {
        return this.lockReason;
    }
    /**
     * @return 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值，否则均返回空值。
     * 
     */
    public String overdueTime() {
        return this.overdueTime;
    }
    /**
     * @return 专线网关所属的项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 专线网关的状态。Creating：创建中。Deleting：删除中。Pending：配置中。Available：可用。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 专线网关已添加的全部标签信息。
     * 
     */
    public List<GetDirectConnectGatewayTag> tags() {
        return this.tags;
    }
    /**
     * @return 更新专线网关的时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDirectConnectGatewayResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private List<GetDirectConnectGatewayAssociateCen> associateCens;
        private String businessStatus;
        private String createdTime;
        private String deletedTime;
        private String description;
        private String directConnectGatewayId;
        private String directConnectGatewayName;
        private Boolean enableIpv6;
        private String id;
        private String lockReason;
        private String overdueTime;
        private String projectName;
        private String status;
        private List<GetDirectConnectGatewayTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetDirectConnectGatewayResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.associateCens = defaults.associateCens;
    	      this.businessStatus = defaults.businessStatus;
    	      this.createdTime = defaults.createdTime;
    	      this.deletedTime = defaults.deletedTime;
    	      this.description = defaults.description;
    	      this.directConnectGatewayId = defaults.directConnectGatewayId;
    	      this.directConnectGatewayName = defaults.directConnectGatewayName;
    	      this.enableIpv6 = defaults.enableIpv6;
    	      this.id = defaults.id;
    	      this.lockReason = defaults.lockReason;
    	      this.overdueTime = defaults.overdueTime;
    	      this.projectName = defaults.projectName;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder associateCens(List<GetDirectConnectGatewayAssociateCen> associateCens) {
            if (associateCens == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "associateCens");
            }
            this.associateCens = associateCens;
            return this;
        }
        public Builder associateCens(GetDirectConnectGatewayAssociateCen... associateCens) {
            return associateCens(List.of(associateCens));
        }
        @CustomType.Setter
        public Builder businessStatus(String businessStatus) {
            if (businessStatus == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "businessStatus");
            }
            this.businessStatus = businessStatus;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder deletedTime(String deletedTime) {
            if (deletedTime == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "deletedTime");
            }
            this.deletedTime = deletedTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder directConnectGatewayId(String directConnectGatewayId) {
            if (directConnectGatewayId == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "directConnectGatewayId");
            }
            this.directConnectGatewayId = directConnectGatewayId;
            return this;
        }
        @CustomType.Setter
        public Builder directConnectGatewayName(String directConnectGatewayName) {
            if (directConnectGatewayName == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "directConnectGatewayName");
            }
            this.directConnectGatewayName = directConnectGatewayName;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpv6(Boolean enableIpv6) {
            if (enableIpv6 == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "enableIpv6");
            }
            this.enableIpv6 = enableIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder lockReason(String lockReason) {
            if (lockReason == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "lockReason");
            }
            this.lockReason = lockReason;
            return this;
        }
        @CustomType.Setter
        public Builder overdueTime(String overdueTime) {
            if (overdueTime == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "overdueTime");
            }
            this.overdueTime = overdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetDirectConnectGatewayTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetDirectConnectGatewayTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetDirectConnectGatewayResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetDirectConnectGatewayResult build() {
            final var _resultValue = new GetDirectConnectGatewayResult();
            _resultValue.accountId = accountId;
            _resultValue.associateCens = associateCens;
            _resultValue.businessStatus = businessStatus;
            _resultValue.createdTime = createdTime;
            _resultValue.deletedTime = deletedTime;
            _resultValue.description = description;
            _resultValue.directConnectGatewayId = directConnectGatewayId;
            _resultValue.directConnectGatewayName = directConnectGatewayName;
            _resultValue.enableIpv6 = enableIpv6;
            _resultValue.id = id;
            _resultValue.lockReason = lockReason;
            _resultValue.overdueTime = overdueTime;
            _resultValue.projectName = projectName;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
