// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerDomainExtension {
    /**
     * @return 域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。
     * 
     */
    private @Nullable String certCenterCertificateId;
    /**
     * @return 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
     * 
     */
    private @Nullable String certificateId;
    /**
     * @return 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
     * 
     */
    private @Nullable String certificateSource;
    /**
     * @return 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
     * 
     */
    private @Nullable String domain;
    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    private @Nullable String pcaLeafCertificateId;
    /**
     * @return 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
     * 
     */
    private @Nullable String san;

    private ListenerDomainExtension() {}
    /**
     * @return 域名使用的服务器证书 ID 。当证书来源为 cert_center 时生效。
     * 
     */
    public Optional<String> certCenterCertificateId() {
        return Optional.ofNullable(this.certCenterCertificateId);
    }
    /**
     * @return 域名使用的服务器证书 ID。当证书来源为 alb 时生效。
     * 
     */
    public Optional<String> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }
    /**
     * @return 域名使用的服务器证书的来源，取值：alb：表示通过 ALB 上传的证书。cert_center：表示通过火山引擎证书中心购买或上传的 SSL 证书。
     * 
     */
    public Optional<String> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }
    /**
     * @return 域名。通常不能为空，若实例支持自动选择扩展证书，即SniAutoMatch为on，则Domain需传入空字符串。需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含小写字、字、‘.’、‘-‘、‘*’。长度限制为1 ～ 128个字符。泛域名：使用“*”代替1个或多个字符。“*”必须在域名开头或结尾。同一条域名中“*”不能出现两次。“*”前后不能有除了.以外的字符。精确域名：符合域名规范的精确域名。同一HTTPS监听器下的域名不能重复。匹配域名时，对域名的大小写不敏感。
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    public Optional<String> pcaLeafCertificateId() {
        return Optional.ofNullable(this.pcaLeafCertificateId);
    }
    /**
     * @return 若实例支持自动选择扩展证书，即SniAutoMatch为on时，则Domain是空字符串。San为证书的扩展域名，用英文,分隔多个域名。
     * 
     */
    public Optional<String> san() {
        return Optional.ofNullable(this.san);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerDomainExtension defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String certCenterCertificateId;
        private @Nullable String certificateId;
        private @Nullable String certificateSource;
        private @Nullable String domain;
        private @Nullable String pcaLeafCertificateId;
        private @Nullable String san;
        public Builder() {}
        public Builder(ListenerDomainExtension defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certCenterCertificateId = defaults.certCenterCertificateId;
    	      this.certificateId = defaults.certificateId;
    	      this.certificateSource = defaults.certificateSource;
    	      this.domain = defaults.domain;
    	      this.pcaLeafCertificateId = defaults.pcaLeafCertificateId;
    	      this.san = defaults.san;
        }

        @CustomType.Setter
        public Builder certCenterCertificateId(@Nullable String certCenterCertificateId) {

            this.certCenterCertificateId = certCenterCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(@Nullable String certificateId) {

            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSource(@Nullable String certificateSource) {

            this.certificateSource = certificateSource;
            return this;
        }
        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder pcaLeafCertificateId(@Nullable String pcaLeafCertificateId) {

            this.pcaLeafCertificateId = pcaLeafCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder san(@Nullable String san) {

            this.san = san;
            return this;
        }
        public ListenerDomainExtension build() {
            final var _resultValue = new ListenerDomainExtension();
            _resultValue.certCenterCertificateId = certCenterCertificateId;
            _resultValue.certificateId = certificateId;
            _resultValue.certificateSource = certificateSource;
            _resultValue.domain = domain;
            _resultValue.pcaLeafCertificateId = pcaLeafCertificateId;
            _resultValue.san = san;
            return _resultValue;
        }
    }
}
