// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderAssumeRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderAssumeRoleArgs Empty = new ProviderAssumeRoleArgs();

    /**
     * he TRN of the role to assume.
     * 
     */
    @Import(name="assumeRoleTrn", required=true)
    private Output<String> assumeRoleTrn;

    /**
     * @return he TRN of the role to assume.
     * 
     */
    public Output<String> assumeRoleTrn() {
        return this.assumeRoleTrn;
    }

    /**
     * The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
     * 
     */
    @Import(name="durationSeconds")
    private @Nullable Output<Integer> durationSeconds;

    /**
     * @return The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
     * 
     */
    public Optional<Output<Integer>> durationSeconds() {
        return Optional.ofNullable(this.durationSeconds);
    }

    /**
     * A more restrictive policy when making the AssumeRole call
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return A more restrictive policy when making the AssumeRole call
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    private ProviderAssumeRoleArgs() {}

    private ProviderAssumeRoleArgs(ProviderAssumeRoleArgs $) {
        this.assumeRoleTrn = $.assumeRoleTrn;
        this.durationSeconds = $.durationSeconds;
        this.policy = $.policy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderAssumeRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderAssumeRoleArgs $;

        public Builder() {
            $ = new ProviderAssumeRoleArgs();
        }

        public Builder(ProviderAssumeRoleArgs defaults) {
            $ = new ProviderAssumeRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param assumeRoleTrn he TRN of the role to assume.
         * 
         * @return builder
         * 
         */
        public Builder assumeRoleTrn(Output<String> assumeRoleTrn) {
            $.assumeRoleTrn = assumeRoleTrn;
            return this;
        }

        /**
         * @param assumeRoleTrn he TRN of the role to assume.
         * 
         * @return builder
         * 
         */
        public Builder assumeRoleTrn(String assumeRoleTrn) {
            return assumeRoleTrn(Output.of(assumeRoleTrn));
        }

        /**
         * @param durationSeconds The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder durationSeconds(@Nullable Output<Integer> durationSeconds) {
            $.durationSeconds = durationSeconds;
            return this;
        }

        /**
         * @param durationSeconds The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
         * 
         * @return builder
         * 
         */
        public Builder durationSeconds(Integer durationSeconds) {
            return durationSeconds(Output.of(durationSeconds));
        }

        /**
         * @param policy A more restrictive policy when making the AssumeRole call
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy A more restrictive policy when making the AssumeRole call
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        public ProviderAssumeRoleArgs build() {
            if ($.assumeRoleTrn == null) {
                throw new MissingRequiredPropertyException("ProviderAssumeRoleArgs", "assumeRoleTrn");
            }
            return $;
        }
    }

}
