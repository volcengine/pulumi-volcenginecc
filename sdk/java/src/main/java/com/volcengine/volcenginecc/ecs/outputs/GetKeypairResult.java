// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ecs.outputs.GetKeypairTag;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetKeypairResult {
    /**
     * @return 密钥对创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     * 
     */
    private String description;
    /**
     * @return 密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。
     * 
     */
    private String fingerPrint;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 操作的实例ID。
     * 
     */
    private List<String> instanceIds;
    /**
     * @return 密钥对唯一ID。
     * 
     */
    private String keyPairId;
    /**
     * @return 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     * 
     */
    private String keyPairName;
    /**
     * @return 密钥对私钥信息。
     * 
     */
    private String privateKey;
    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     * 
     */
    private String projectName;
    /**
     * @return 密钥对的公钥信息。
     * 
     */
    private String publicKey;
    /**
     * @return 密钥对的标签。
     * 
     */
    private List<GetKeypairTag> tags;
    /**
     * @return 密钥对更新时间。
     * 
     */
    private String updatedTime;

    private GetKeypairResult() {}
    /**
     * @return 密钥对创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。
     * 
     */
    public String fingerPrint() {
        return this.fingerPrint;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 操作的实例ID。
     * 
     */
    public List<String> instanceIds() {
        return this.instanceIds;
    }
    /**
     * @return 密钥对唯一ID。
     * 
     */
    public String keyPairId() {
        return this.keyPairId;
    }
    /**
     * @return 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     * 
     */
    public String keyPairName() {
        return this.keyPairName;
    }
    /**
     * @return 密钥对私钥信息。
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 密钥对的公钥信息。
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return 密钥对的标签。
     * 
     */
    public List<GetKeypairTag> tags() {
        return this.tags;
    }
    /**
     * @return 密钥对更新时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetKeypairResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdTime;
        private String description;
        private String fingerPrint;
        private String id;
        private List<String> instanceIds;
        private String keyPairId;
        private String keyPairName;
        private String privateKey;
        private String projectName;
        private String publicKey;
        private List<GetKeypairTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetKeypairResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.fingerPrint = defaults.fingerPrint;
    	      this.id = defaults.id;
    	      this.instanceIds = defaults.instanceIds;
    	      this.keyPairId = defaults.keyPairId;
    	      this.keyPairName = defaults.keyPairName;
    	      this.privateKey = defaults.privateKey;
    	      this.projectName = defaults.projectName;
    	      this.publicKey = defaults.publicKey;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fingerPrint(String fingerPrint) {
            if (fingerPrint == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "fingerPrint");
            }
            this.fingerPrint = fingerPrint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceIds(List<String> instanceIds) {
            if (instanceIds == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "instanceIds");
            }
            this.instanceIds = instanceIds;
            return this;
        }
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }
        @CustomType.Setter
        public Builder keyPairId(String keyPairId) {
            if (keyPairId == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "keyPairId");
            }
            this.keyPairId = keyPairId;
            return this;
        }
        @CustomType.Setter
        public Builder keyPairName(String keyPairName) {
            if (keyPairName == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "keyPairName");
            }
            this.keyPairName = keyPairName;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetKeypairTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetKeypairTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetKeypairResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetKeypairResult build() {
            final var _resultValue = new GetKeypairResult();
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.fingerPrint = fingerPrint;
            _resultValue.id = id;
            _resultValue.instanceIds = instanceIds;
            _resultValue.keyPairId = keyPairId;
            _resultValue.keyPairName = keyPairName;
            _resultValue.privateKey = privateKey;
            _resultValue.projectName = projectName;
            _resultValue.publicKey = publicKey;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
