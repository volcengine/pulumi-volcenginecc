// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.inputs.NlbTagArgs;
import com.volcengine.volcenginecc.clb.inputs.NlbZoneMappingArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NlbArgs extends com.pulumi.resources.ResourceArgs {

    public static final NlbArgs Empty = new NlbArgs();

    /**
     * NLB实例所属的账号ID。
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return NLB实例所属的账号ID。
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
     * 
     */
    @Import(name="crossZoneEnabled")
    private @Nullable Output<Boolean> crossZoneEnabled;

    /**
     * @return NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
     * 
     */
    public Optional<Output<Boolean>> crossZoneEnabled() {
        return Optional.ofNullable(this.crossZoneEnabled);
    }

    /**
     * NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
     * 
     */
    @Import(name="ipAddressVersion")
    private @Nullable Output<String> ipAddressVersion;

    /**
     * @return NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
     * 
     */
    public Optional<Output<String>> ipAddressVersion() {
        return Optional.ofNullable(this.ipAddressVersion);
    }

    /**
     * IPv4类型的共享带宽包ID。
     * 
     */
    @Import(name="ipv4BandwidthPackageId")
    private @Nullable Output<String> ipv4BandwidthPackageId;

    /**
     * @return IPv4类型的共享带宽包ID。
     * 
     */
    public Optional<Output<String>> ipv4BandwidthPackageId() {
        return Optional.ofNullable(this.ipv4BandwidthPackageId);
    }

    /**
     * NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    @Import(name="ipv4NetworkType", required=true)
    private Output<String> ipv4NetworkType;

    /**
     * @return NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    public Output<String> ipv4NetworkType() {
        return this.ipv4NetworkType;
    }

    /**
     * IPv6类型的共享带宽包ID。
     * 
     */
    @Import(name="ipv6BandwidthPackageId")
    private @Nullable Output<String> ipv6BandwidthPackageId;

    /**
     * @return IPv6类型的共享带宽包ID。
     * 
     */
    public Optional<Output<String>> ipv6BandwidthPackageId() {
        return Optional.ofNullable(this.ipv6BandwidthPackageId);
    }

    /**
     * NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    @Import(name="ipv6NetworkType")
    private @Nullable Output<String> ipv6NetworkType;

    /**
     * @return NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    public Optional<Output<String>> ipv6NetworkType() {
        return Optional.ofNullable(this.ipv6NetworkType);
    }

    /**
     * NLB实例的名称。
     * 
     */
    @Import(name="loadBalancerName")
    private @Nullable Output<String> loadBalancerName;

    /**
     * @return NLB实例的名称。
     * 
     */
    public Optional<Output<String>> loadBalancerName() {
        return Optional.ofNullable(this.loadBalancerName);
    }

    /**
     * NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
     * 
     */
    @Import(name="modificationProtectionStatus")
    private @Nullable Output<String> modificationProtectionStatus;

    /**
     * @return NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
     * 
     */
    public Optional<Output<String>> modificationProtectionStatus() {
        return Optional.ofNullable(this.modificationProtectionStatus);
    }

    /**
     * NLB实例所属项目的名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return NLB实例所属项目的名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * NLB实例关联的安全组ID列表。
     * 
     */
    @Import(name="securityGroupIds", required=true)
    private Output<List<String>> securityGroupIds;

    /**
     * @return NLB实例关联的安全组ID列表。
     * 
     */
    public Output<List<String>> securityGroupIds() {
        return this.securityGroupIds;
    }

    @Import(name="tags")
    private @Nullable Output<List<NlbTagArgs>> tags;

    public Optional<Output<List<NlbTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * NLB实例所属的VPC ID。
     * 
     */
    @Import(name="vpcId", required=true)
    private Output<String> vpcId;

    /**
     * @return NLB实例所属的VPC ID。
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }

    @Import(name="zoneMappings", required=true)
    private Output<List<NlbZoneMappingArgs>> zoneMappings;

    public Output<List<NlbZoneMappingArgs>> zoneMappings() {
        return this.zoneMappings;
    }

    private NlbArgs() {}

    private NlbArgs(NlbArgs $) {
        this.accountId = $.accountId;
        this.crossZoneEnabled = $.crossZoneEnabled;
        this.description = $.description;
        this.ipAddressVersion = $.ipAddressVersion;
        this.ipv4BandwidthPackageId = $.ipv4BandwidthPackageId;
        this.ipv4NetworkType = $.ipv4NetworkType;
        this.ipv6BandwidthPackageId = $.ipv6BandwidthPackageId;
        this.ipv6NetworkType = $.ipv6NetworkType;
        this.loadBalancerName = $.loadBalancerName;
        this.modificationProtectionStatus = $.modificationProtectionStatus;
        this.projectName = $.projectName;
        this.securityGroupIds = $.securityGroupIds;
        this.tags = $.tags;
        this.vpcId = $.vpcId;
        this.zoneMappings = $.zoneMappings;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NlbArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NlbArgs $;

        public Builder() {
            $ = new NlbArgs();
        }

        public Builder(NlbArgs defaults) {
            $ = new NlbArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId NLB实例所属的账号ID。
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId NLB实例所属的账号ID。
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param crossZoneEnabled NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
         * 
         * @return builder
         * 
         */
        public Builder crossZoneEnabled(@Nullable Output<Boolean> crossZoneEnabled) {
            $.crossZoneEnabled = crossZoneEnabled;
            return this;
        }

        /**
         * @param crossZoneEnabled NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
         * 
         * @return builder
         * 
         */
        public Builder crossZoneEnabled(Boolean crossZoneEnabled) {
            return crossZoneEnabled(Output.of(crossZoneEnabled));
        }

        /**
         * @param description NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param ipAddressVersion NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVersion(@Nullable Output<String> ipAddressVersion) {
            $.ipAddressVersion = ipAddressVersion;
            return this;
        }

        /**
         * @param ipAddressVersion NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVersion(String ipAddressVersion) {
            return ipAddressVersion(Output.of(ipAddressVersion));
        }

        /**
         * @param ipv4BandwidthPackageId IPv4类型的共享带宽包ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv4BandwidthPackageId(@Nullable Output<String> ipv4BandwidthPackageId) {
            $.ipv4BandwidthPackageId = ipv4BandwidthPackageId;
            return this;
        }

        /**
         * @param ipv4BandwidthPackageId IPv4类型的共享带宽包ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv4BandwidthPackageId(String ipv4BandwidthPackageId) {
            return ipv4BandwidthPackageId(Output.of(ipv4BandwidthPackageId));
        }

        /**
         * @param ipv4NetworkType NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
         * 
         * @return builder
         * 
         */
        public Builder ipv4NetworkType(Output<String> ipv4NetworkType) {
            $.ipv4NetworkType = ipv4NetworkType;
            return this;
        }

        /**
         * @param ipv4NetworkType NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
         * 
         * @return builder
         * 
         */
        public Builder ipv4NetworkType(String ipv4NetworkType) {
            return ipv4NetworkType(Output.of(ipv4NetworkType));
        }

        /**
         * @param ipv6BandwidthPackageId IPv6类型的共享带宽包ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv6BandwidthPackageId(@Nullable Output<String> ipv6BandwidthPackageId) {
            $.ipv6BandwidthPackageId = ipv6BandwidthPackageId;
            return this;
        }

        /**
         * @param ipv6BandwidthPackageId IPv6类型的共享带宽包ID。
         * 
         * @return builder
         * 
         */
        public Builder ipv6BandwidthPackageId(String ipv6BandwidthPackageId) {
            return ipv6BandwidthPackageId(Output.of(ipv6BandwidthPackageId));
        }

        /**
         * @param ipv6NetworkType NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
         * 
         * @return builder
         * 
         */
        public Builder ipv6NetworkType(@Nullable Output<String> ipv6NetworkType) {
            $.ipv6NetworkType = ipv6NetworkType;
            return this;
        }

        /**
         * @param ipv6NetworkType NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
         * 
         * @return builder
         * 
         */
        public Builder ipv6NetworkType(String ipv6NetworkType) {
            return ipv6NetworkType(Output.of(ipv6NetworkType));
        }

        /**
         * @param loadBalancerName NLB实例的名称。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(@Nullable Output<String> loadBalancerName) {
            $.loadBalancerName = loadBalancerName;
            return this;
        }

        /**
         * @param loadBalancerName NLB实例的名称。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerName(String loadBalancerName) {
            return loadBalancerName(Output.of(loadBalancerName));
        }

        /**
         * @param modificationProtectionStatus NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
         * 
         * @return builder
         * 
         */
        public Builder modificationProtectionStatus(@Nullable Output<String> modificationProtectionStatus) {
            $.modificationProtectionStatus = modificationProtectionStatus;
            return this;
        }

        /**
         * @param modificationProtectionStatus NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
         * 
         * @return builder
         * 
         */
        public Builder modificationProtectionStatus(String modificationProtectionStatus) {
            return modificationProtectionStatus(Output.of(modificationProtectionStatus));
        }

        /**
         * @param projectName NLB实例所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName NLB实例所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param securityGroupIds NLB实例关联的安全组ID列表。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds NLB实例关联的安全组ID列表。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds NLB实例关联的安全组ID列表。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        public Builder tags(@Nullable Output<List<NlbTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<NlbTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(NlbTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param vpcId NLB实例所属的VPC ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId NLB实例所属的VPC ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public Builder zoneMappings(Output<List<NlbZoneMappingArgs>> zoneMappings) {
            $.zoneMappings = zoneMappings;
            return this;
        }

        public Builder zoneMappings(List<NlbZoneMappingArgs> zoneMappings) {
            return zoneMappings(Output.of(zoneMappings));
        }

        public Builder zoneMappings(NlbZoneMappingArgs... zoneMappings) {
            return zoneMappings(List.of(zoneMappings));
        }

        public NlbArgs build() {
            if ($.ipv4NetworkType == null) {
                throw new MissingRequiredPropertyException("NlbArgs", "ipv4NetworkType");
            }
            if ($.securityGroupIds == null) {
                throw new MissingRequiredPropertyException("NlbArgs", "securityGroupIds");
            }
            if ($.vpcId == null) {
                throw new MissingRequiredPropertyException("NlbArgs", "vpcId");
            }
            if ($.zoneMappings == null) {
                throw new MissingRequiredPropertyException("NlbArgs", "zoneMappings");
            }
            return $;
        }
    }

}
