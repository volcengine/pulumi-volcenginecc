// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vmp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkspaceInstanceType {
    /**
     * @return 最大活跃时序数。
     * 
     */
    private @Nullable Integer activeSeries;
    /**
     * @return 可用区（az）数。
     * 
     */
    private @Nullable Integer availabilityZoneReplicas;
    /**
     * @return 降采样策略。
     * 
     */
    private @Nullable List<String> downsamplingPeriods;
    /**
     * @return 最大每秒写入样本数。
     * 
     */
    private @Nullable Integer ingestSamplesPerSecond;
    /**
     * @return 最大查询并发数。
     * 
     */
    private @Nullable Integer queryConcurrency;
    /**
     * @return 最大查询 QPS。
     * 
     */
    private @Nullable Integer queryPerSecond;
    /**
     * @return 每个可用区（az）的数据副本数。
     * 
     */
    private @Nullable Integer replicasPerZone;
    /**
     * @return 最长数据保留时间。
     * 
     */
    private @Nullable String retentionPeriod;
    /**
     * @return 最大每秒扫描样本数。
     * 
     */
    private @Nullable Integer scanSamplesPerSecond;
    /**
     * @return 最大每秒扫描时序数。
     * 
     */
    private @Nullable Integer scanSeriesPerSecond;

    private WorkspaceInstanceType() {}
    /**
     * @return 最大活跃时序数。
     * 
     */
    public Optional<Integer> activeSeries() {
        return Optional.ofNullable(this.activeSeries);
    }
    /**
     * @return 可用区（az）数。
     * 
     */
    public Optional<Integer> availabilityZoneReplicas() {
        return Optional.ofNullable(this.availabilityZoneReplicas);
    }
    /**
     * @return 降采样策略。
     * 
     */
    public List<String> downsamplingPeriods() {
        return this.downsamplingPeriods == null ? List.of() : this.downsamplingPeriods;
    }
    /**
     * @return 最大每秒写入样本数。
     * 
     */
    public Optional<Integer> ingestSamplesPerSecond() {
        return Optional.ofNullable(this.ingestSamplesPerSecond);
    }
    /**
     * @return 最大查询并发数。
     * 
     */
    public Optional<Integer> queryConcurrency() {
        return Optional.ofNullable(this.queryConcurrency);
    }
    /**
     * @return 最大查询 QPS。
     * 
     */
    public Optional<Integer> queryPerSecond() {
        return Optional.ofNullable(this.queryPerSecond);
    }
    /**
     * @return 每个可用区（az）的数据副本数。
     * 
     */
    public Optional<Integer> replicasPerZone() {
        return Optional.ofNullable(this.replicasPerZone);
    }
    /**
     * @return 最长数据保留时间。
     * 
     */
    public Optional<String> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }
    /**
     * @return 最大每秒扫描样本数。
     * 
     */
    public Optional<Integer> scanSamplesPerSecond() {
        return Optional.ofNullable(this.scanSamplesPerSecond);
    }
    /**
     * @return 最大每秒扫描时序数。
     * 
     */
    public Optional<Integer> scanSeriesPerSecond() {
        return Optional.ofNullable(this.scanSeriesPerSecond);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceInstanceType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer activeSeries;
        private @Nullable Integer availabilityZoneReplicas;
        private @Nullable List<String> downsamplingPeriods;
        private @Nullable Integer ingestSamplesPerSecond;
        private @Nullable Integer queryConcurrency;
        private @Nullable Integer queryPerSecond;
        private @Nullable Integer replicasPerZone;
        private @Nullable String retentionPeriod;
        private @Nullable Integer scanSamplesPerSecond;
        private @Nullable Integer scanSeriesPerSecond;
        public Builder() {}
        public Builder(WorkspaceInstanceType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeSeries = defaults.activeSeries;
    	      this.availabilityZoneReplicas = defaults.availabilityZoneReplicas;
    	      this.downsamplingPeriods = defaults.downsamplingPeriods;
    	      this.ingestSamplesPerSecond = defaults.ingestSamplesPerSecond;
    	      this.queryConcurrency = defaults.queryConcurrency;
    	      this.queryPerSecond = defaults.queryPerSecond;
    	      this.replicasPerZone = defaults.replicasPerZone;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.scanSamplesPerSecond = defaults.scanSamplesPerSecond;
    	      this.scanSeriesPerSecond = defaults.scanSeriesPerSecond;
        }

        @CustomType.Setter
        public Builder activeSeries(@Nullable Integer activeSeries) {

            this.activeSeries = activeSeries;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZoneReplicas(@Nullable Integer availabilityZoneReplicas) {

            this.availabilityZoneReplicas = availabilityZoneReplicas;
            return this;
        }
        @CustomType.Setter
        public Builder downsamplingPeriods(@Nullable List<String> downsamplingPeriods) {

            this.downsamplingPeriods = downsamplingPeriods;
            return this;
        }
        public Builder downsamplingPeriods(String... downsamplingPeriods) {
            return downsamplingPeriods(List.of(downsamplingPeriods));
        }
        @CustomType.Setter
        public Builder ingestSamplesPerSecond(@Nullable Integer ingestSamplesPerSecond) {

            this.ingestSamplesPerSecond = ingestSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder queryConcurrency(@Nullable Integer queryConcurrency) {

            this.queryConcurrency = queryConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder queryPerSecond(@Nullable Integer queryPerSecond) {

            this.queryPerSecond = queryPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder replicasPerZone(@Nullable Integer replicasPerZone) {

            this.replicasPerZone = replicasPerZone;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriod(@Nullable String retentionPeriod) {

            this.retentionPeriod = retentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder scanSamplesPerSecond(@Nullable Integer scanSamplesPerSecond) {

            this.scanSamplesPerSecond = scanSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder scanSeriesPerSecond(@Nullable Integer scanSeriesPerSecond) {

            this.scanSeriesPerSecond = scanSeriesPerSecond;
            return this;
        }
        public WorkspaceInstanceType build() {
            final var _resultValue = new WorkspaceInstanceType();
            _resultValue.activeSeries = activeSeries;
            _resultValue.availabilityZoneReplicas = availabilityZoneReplicas;
            _resultValue.downsamplingPeriods = downsamplingPeriods;
            _resultValue.ingestSamplesPerSecond = ingestSamplesPerSecond;
            _resultValue.queryConcurrency = queryConcurrency;
            _resultValue.queryPerSecond = queryPerSecond;
            _resultValue.replicasPerZone = replicasPerZone;
            _resultValue.retentionPeriod = retentionPeriod;
            _resultValue.scanSamplesPerSecond = scanSamplesPerSecond;
            _resultValue.scanSeriesPerSecond = scanSeriesPerSecond;
            return _resultValue;
        }
    }
}
