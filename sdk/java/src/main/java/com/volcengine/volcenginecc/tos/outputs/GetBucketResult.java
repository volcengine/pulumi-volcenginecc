// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.tos.outputs.GetBucketAcl;
import com.volcengine.volcenginecc.tos.outputs.GetBucketAclGrant;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfig;
import com.volcengine.volcenginecc.tos.outputs.GetBucketTag;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBucketResult {
    /**
     * @return 桶的访问控制权限。
     * 
     */
    private GetBucketAcl acl;
    private GetBucketAclGrant aclGrant;
    /**
     * @return 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     * 
     */
    private String azRedundancy;
    /**
     * @return 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     * 
     */
    private String bucketType;
    /**
     * @return 桶的创建时间。
     * 
     */
    private String creationDate;
    /**
     * @return 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     * 
     */
    private String enableVersionStatus;
    /**
     * @return 存储桶的 TOS 协议公网访问域名。
     * 
     */
    private String extranetEndpoint;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 存储桶的 TOS 协议私网访问域名
     * 
     */
    private String intranetEndpoint;
    /**
     * @return 存储桶的声明周期。
     * 
     */
    private List<GetBucketLifecycleConfig> lifecycleConfigs;
    /**
     * @return 桶所在区域。
     * 
     */
    private String location;
    /**
     * @return 桶名。
     * 
     */
    private String name;
    /**
     * @return 存储桶所属项目。
     * 
     */
    private String projectName;
    /**
     * @return 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     * 
     */
    private String storageClass;
    /**
     * @return 存储桶的标签信息。
     * 
     */
    private List<GetBucketTag> tags;

    private GetBucketResult() {}
    /**
     * @return 桶的访问控制权限。
     * 
     */
    public GetBucketAcl acl() {
        return this.acl;
    }
    public GetBucketAclGrant aclGrant() {
        return this.aclGrant;
    }
    /**
     * @return 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     * 
     */
    public String azRedundancy() {
        return this.azRedundancy;
    }
    /**
     * @return 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     * 
     */
    public String bucketType() {
        return this.bucketType;
    }
    /**
     * @return 桶的创建时间。
     * 
     */
    public String creationDate() {
        return this.creationDate;
    }
    /**
     * @return 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     * 
     */
    public String enableVersionStatus() {
        return this.enableVersionStatus;
    }
    /**
     * @return 存储桶的 TOS 协议公网访问域名。
     * 
     */
    public String extranetEndpoint() {
        return this.extranetEndpoint;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 存储桶的 TOS 协议私网访问域名
     * 
     */
    public String intranetEndpoint() {
        return this.intranetEndpoint;
    }
    /**
     * @return 存储桶的声明周期。
     * 
     */
    public List<GetBucketLifecycleConfig> lifecycleConfigs() {
        return this.lifecycleConfigs;
    }
    /**
     * @return 桶所在区域。
     * 
     */
    public String location() {
        return this.location;
    }
    /**
     * @return 桶名。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 存储桶所属项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     * 
     */
    public String storageClass() {
        return this.storageClass;
    }
    /**
     * @return 存储桶的标签信息。
     * 
     */
    public List<GetBucketTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetBucketAcl acl;
        private GetBucketAclGrant aclGrant;
        private String azRedundancy;
        private String bucketType;
        private String creationDate;
        private String enableVersionStatus;
        private String extranetEndpoint;
        private String id;
        private String intranetEndpoint;
        private List<GetBucketLifecycleConfig> lifecycleConfigs;
        private String location;
        private String name;
        private String projectName;
        private String storageClass;
        private List<GetBucketTag> tags;
        public Builder() {}
        public Builder(GetBucketResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acl = defaults.acl;
    	      this.aclGrant = defaults.aclGrant;
    	      this.azRedundancy = defaults.azRedundancy;
    	      this.bucketType = defaults.bucketType;
    	      this.creationDate = defaults.creationDate;
    	      this.enableVersionStatus = defaults.enableVersionStatus;
    	      this.extranetEndpoint = defaults.extranetEndpoint;
    	      this.id = defaults.id;
    	      this.intranetEndpoint = defaults.intranetEndpoint;
    	      this.lifecycleConfigs = defaults.lifecycleConfigs;
    	      this.location = defaults.location;
    	      this.name = defaults.name;
    	      this.projectName = defaults.projectName;
    	      this.storageClass = defaults.storageClass;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder acl(GetBucketAcl acl) {
            if (acl == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "acl");
            }
            this.acl = acl;
            return this;
        }
        @CustomType.Setter
        public Builder aclGrant(GetBucketAclGrant aclGrant) {
            if (aclGrant == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "aclGrant");
            }
            this.aclGrant = aclGrant;
            return this;
        }
        @CustomType.Setter
        public Builder azRedundancy(String azRedundancy) {
            if (azRedundancy == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "azRedundancy");
            }
            this.azRedundancy = azRedundancy;
            return this;
        }
        @CustomType.Setter
        public Builder bucketType(String bucketType) {
            if (bucketType == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "bucketType");
            }
            this.bucketType = bucketType;
            return this;
        }
        @CustomType.Setter
        public Builder creationDate(String creationDate) {
            if (creationDate == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "creationDate");
            }
            this.creationDate = creationDate;
            return this;
        }
        @CustomType.Setter
        public Builder enableVersionStatus(String enableVersionStatus) {
            if (enableVersionStatus == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "enableVersionStatus");
            }
            this.enableVersionStatus = enableVersionStatus;
            return this;
        }
        @CustomType.Setter
        public Builder extranetEndpoint(String extranetEndpoint) {
            if (extranetEndpoint == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "extranetEndpoint");
            }
            this.extranetEndpoint = extranetEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder intranetEndpoint(String intranetEndpoint) {
            if (intranetEndpoint == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "intranetEndpoint");
            }
            this.intranetEndpoint = intranetEndpoint;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleConfigs(List<GetBucketLifecycleConfig> lifecycleConfigs) {
            if (lifecycleConfigs == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "lifecycleConfigs");
            }
            this.lifecycleConfigs = lifecycleConfigs;
            return this;
        }
        public Builder lifecycleConfigs(GetBucketLifecycleConfig... lifecycleConfigs) {
            return lifecycleConfigs(List.of(lifecycleConfigs));
        }
        @CustomType.Setter
        public Builder location(String location) {
            if (location == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "location");
            }
            this.location = location;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(String storageClass) {
            if (storageClass == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "storageClass");
            }
            this.storageClass = storageClass;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetBucketTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetBucketResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetBucketTag... tags) {
            return tags(List.of(tags));
        }
        public GetBucketResult build() {
            final var _resultValue = new GetBucketResult();
            _resultValue.acl = acl;
            _resultValue.aclGrant = aclGrant;
            _resultValue.azRedundancy = azRedundancy;
            _resultValue.bucketType = bucketType;
            _resultValue.creationDate = creationDate;
            _resultValue.enableVersionStatus = enableVersionStatus;
            _resultValue.extranetEndpoint = extranetEndpoint;
            _resultValue.id = id;
            _resultValue.intranetEndpoint = intranetEndpoint;
            _resultValue.lifecycleConfigs = lifecycleConfigs;
            _resultValue.location = location;
            _resultValue.name = name;
            _resultValue.projectName = projectName;
            _resultValue.storageClass = storageClass;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
