// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.transitrouter.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTransitRouterRouteEntryResult {
    /**
     * @return 路由条目的AS路径。
     * 
     */
    private List<String> asPaths;
    /**
     * @return 路由条目的创建时间。
     * 
     */
    private String creationTime;
    /**
     * @return TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return 路由条目的目标网段。
     * 
     */
    private String destinationCidrBlock;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
     * 
     */
    private String status;
    /**
     * @return TR路由条目的ID。
     * 
     */
    private String transitRouterRouteEntryId;
    /**
     * @return 路由条目的名称。
     * 
     */
    private String transitRouterRouteEntryName;
    /**
     * @return 路由条目的下一跳ID。
     * 
     */
    private String transitRouterRouteEntryNextHopId;
    /**
     * @return 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
     * 
     */
    private String transitRouterRouteEntryNextHopType;
    /**
     * @return 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
     * 
     */
    private String transitRouterRouteEntryType;
    /**
     * @return 中转路由器实例关联的路由表的ID。
     * 
     */
    private String transitRouterRouteTableId;
    /**
     * @return 路由条目的更新时间。
     * 
     */
    private String updateTime;

    private GetTransitRouterRouteEntryResult() {}
    /**
     * @return 路由条目的AS路径。
     * 
     */
    public List<String> asPaths() {
        return this.asPaths;
    }
    /**
     * @return 路由条目的创建时间。
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 路由条目的目标网段。
     * 
     */
    public String destinationCidrBlock() {
        return this.destinationCidrBlock;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return TR路由条目的ID。
     * 
     */
    public String transitRouterRouteEntryId() {
        return this.transitRouterRouteEntryId;
    }
    /**
     * @return 路由条目的名称。
     * 
     */
    public String transitRouterRouteEntryName() {
        return this.transitRouterRouteEntryName;
    }
    /**
     * @return 路由条目的下一跳ID。
     * 
     */
    public String transitRouterRouteEntryNextHopId() {
        return this.transitRouterRouteEntryNextHopId;
    }
    /**
     * @return 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
     * 
     */
    public String transitRouterRouteEntryNextHopType() {
        return this.transitRouterRouteEntryNextHopType;
    }
    /**
     * @return 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
     * 
     */
    public String transitRouterRouteEntryType() {
        return this.transitRouterRouteEntryType;
    }
    /**
     * @return 中转路由器实例关联的路由表的ID。
     * 
     */
    public String transitRouterRouteTableId() {
        return this.transitRouterRouteTableId;
    }
    /**
     * @return 路由条目的更新时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTransitRouterRouteEntryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> asPaths;
        private String creationTime;
        private String description;
        private String destinationCidrBlock;
        private String id;
        private String status;
        private String transitRouterRouteEntryId;
        private String transitRouterRouteEntryName;
        private String transitRouterRouteEntryNextHopId;
        private String transitRouterRouteEntryNextHopType;
        private String transitRouterRouteEntryType;
        private String transitRouterRouteTableId;
        private String updateTime;
        public Builder() {}
        public Builder(GetTransitRouterRouteEntryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asPaths = defaults.asPaths;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.destinationCidrBlock = defaults.destinationCidrBlock;
    	      this.id = defaults.id;
    	      this.status = defaults.status;
    	      this.transitRouterRouteEntryId = defaults.transitRouterRouteEntryId;
    	      this.transitRouterRouteEntryName = defaults.transitRouterRouteEntryName;
    	      this.transitRouterRouteEntryNextHopId = defaults.transitRouterRouteEntryNextHopId;
    	      this.transitRouterRouteEntryNextHopType = defaults.transitRouterRouteEntryNextHopType;
    	      this.transitRouterRouteEntryType = defaults.transitRouterRouteEntryType;
    	      this.transitRouterRouteTableId = defaults.transitRouterRouteTableId;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder asPaths(List<String> asPaths) {
            if (asPaths == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "asPaths");
            }
            this.asPaths = asPaths;
            return this;
        }
        public Builder asPaths(String... asPaths) {
            return asPaths(List.of(asPaths));
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder destinationCidrBlock(String destinationCidrBlock) {
            if (destinationCidrBlock == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "destinationCidrBlock");
            }
            this.destinationCidrBlock = destinationCidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteEntryId(String transitRouterRouteEntryId) {
            if (transitRouterRouteEntryId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "transitRouterRouteEntryId");
            }
            this.transitRouterRouteEntryId = transitRouterRouteEntryId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteEntryName(String transitRouterRouteEntryName) {
            if (transitRouterRouteEntryName == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "transitRouterRouteEntryName");
            }
            this.transitRouterRouteEntryName = transitRouterRouteEntryName;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteEntryNextHopId(String transitRouterRouteEntryNextHopId) {
            if (transitRouterRouteEntryNextHopId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "transitRouterRouteEntryNextHopId");
            }
            this.transitRouterRouteEntryNextHopId = transitRouterRouteEntryNextHopId;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteEntryNextHopType(String transitRouterRouteEntryNextHopType) {
            if (transitRouterRouteEntryNextHopType == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "transitRouterRouteEntryNextHopType");
            }
            this.transitRouterRouteEntryNextHopType = transitRouterRouteEntryNextHopType;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteEntryType(String transitRouterRouteEntryType) {
            if (transitRouterRouteEntryType == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "transitRouterRouteEntryType");
            }
            this.transitRouterRouteEntryType = transitRouterRouteEntryType;
            return this;
        }
        @CustomType.Setter
        public Builder transitRouterRouteTableId(String transitRouterRouteTableId) {
            if (transitRouterRouteTableId == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "transitRouterRouteTableId");
            }
            this.transitRouterRouteTableId = transitRouterRouteTableId;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetTransitRouterRouteEntryResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetTransitRouterRouteEntryResult build() {
            final var _resultValue = new GetTransitRouterRouteEntryResult();
            _resultValue.asPaths = asPaths;
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.destinationCidrBlock = destinationCidrBlock;
            _resultValue.id = id;
            _resultValue.status = status;
            _resultValue.transitRouterRouteEntryId = transitRouterRouteEntryId;
            _resultValue.transitRouterRouteEntryName = transitRouterRouteEntryName;
            _resultValue.transitRouterRouteEntryNextHopId = transitRouterRouteEntryNextHopId;
            _resultValue.transitRouterRouteEntryNextHopType = transitRouterRouteEntryNextHopType;
            _resultValue.transitRouterRouteEntryType = transitRouterRouteEntryType;
            _resultValue.transitRouterRouteTableId = transitRouterRouteTableId;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
