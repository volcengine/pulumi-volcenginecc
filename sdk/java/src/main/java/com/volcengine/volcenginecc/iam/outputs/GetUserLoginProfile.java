// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetUserLoginProfile {
    /**
     * @return 登录配置创建时间。
     * 
     */
    private String createDate;
    /**
     * @return 上次登录时间。
     * 
     */
    private String lastLoginDate;
    /**
     * @return 上次登录IP。
     * 
     */
    private String lastLoginIp;
    /**
     * @return 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
     * 
     */
    private Double lastResetPasswordTime;
    /**
     * @return 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
     * 
     */
    private Boolean loginAllowed;
    /**
     * @return 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
     * 
     */
    private Boolean loginLocked;
    /**
     * @return 登录密码。
     * 
     */
    private String password;
    /**
     * @return 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
     * 
     */
    private Double passwordExpireAt;
    /**
     * @return 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
     * 
     */
    private Boolean passwordResetRequired;
    /**
     * @return 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
     * 
     */
    private Double safeAuthExemptDuration;
    /**
     * @return 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
     * 
     */
    private Double safeAuthExemptRequired;
    /**
     * @return 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
     * 
     */
    private Double safeAuthExemptUnit;
    /**
     * @return 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
     * 
     */
    private Boolean safeAuthFlag;
    /**
     * @return 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
     * 
     */
    private String safeAuthType;
    /**
     * @return 登录配置更新时间。
     * 
     */
    private String updateDate;

    private GetUserLoginProfile() {}
    /**
     * @return 登录配置创建时间。
     * 
     */
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return 上次登录时间。
     * 
     */
    public String lastLoginDate() {
        return this.lastLoginDate;
    }
    /**
     * @return 上次登录IP。
     * 
     */
    public String lastLoginIp() {
        return this.lastLoginIp;
    }
    /**
     * @return 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
     * 
     */
    public Double lastResetPasswordTime() {
        return this.lastResetPasswordTime;
    }
    /**
     * @return 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
     * 
     */
    public Boolean loginAllowed() {
        return this.loginAllowed;
    }
    /**
     * @return 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
     * 
     */
    public Boolean loginLocked() {
        return this.loginLocked;
    }
    /**
     * @return 登录密码。
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
     * 
     */
    public Double passwordExpireAt() {
        return this.passwordExpireAt;
    }
    /**
     * @return 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
     * 
     */
    public Boolean passwordResetRequired() {
        return this.passwordResetRequired;
    }
    /**
     * @return 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
     * 
     */
    public Double safeAuthExemptDuration() {
        return this.safeAuthExemptDuration;
    }
    /**
     * @return 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
     * 
     */
    public Double safeAuthExemptRequired() {
        return this.safeAuthExemptRequired;
    }
    /**
     * @return 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
     * 
     */
    public Double safeAuthExemptUnit() {
        return this.safeAuthExemptUnit;
    }
    /**
     * @return 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
     * 
     */
    public Boolean safeAuthFlag() {
        return this.safeAuthFlag;
    }
    /**
     * @return 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
     * 
     */
    public String safeAuthType() {
        return this.safeAuthType;
    }
    /**
     * @return 登录配置更新时间。
     * 
     */
    public String updateDate() {
        return this.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetUserLoginProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createDate;
        private String lastLoginDate;
        private String lastLoginIp;
        private Double lastResetPasswordTime;
        private Boolean loginAllowed;
        private Boolean loginLocked;
        private String password;
        private Double passwordExpireAt;
        private Boolean passwordResetRequired;
        private Double safeAuthExemptDuration;
        private Double safeAuthExemptRequired;
        private Double safeAuthExemptUnit;
        private Boolean safeAuthFlag;
        private String safeAuthType;
        private String updateDate;
        public Builder() {}
        public Builder(GetUserLoginProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDate = defaults.createDate;
    	      this.lastLoginDate = defaults.lastLoginDate;
    	      this.lastLoginIp = defaults.lastLoginIp;
    	      this.lastResetPasswordTime = defaults.lastResetPasswordTime;
    	      this.loginAllowed = defaults.loginAllowed;
    	      this.loginLocked = defaults.loginLocked;
    	      this.password = defaults.password;
    	      this.passwordExpireAt = defaults.passwordExpireAt;
    	      this.passwordResetRequired = defaults.passwordResetRequired;
    	      this.safeAuthExemptDuration = defaults.safeAuthExemptDuration;
    	      this.safeAuthExemptRequired = defaults.safeAuthExemptRequired;
    	      this.safeAuthExemptUnit = defaults.safeAuthExemptUnit;
    	      this.safeAuthFlag = defaults.safeAuthFlag;
    	      this.safeAuthType = defaults.safeAuthType;
    	      this.updateDate = defaults.updateDate;
        }

        @CustomType.Setter
        public Builder createDate(String createDate) {
            if (createDate == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "createDate");
            }
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastLoginDate(String lastLoginDate) {
            if (lastLoginDate == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "lastLoginDate");
            }
            this.lastLoginDate = lastLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastLoginIp(String lastLoginIp) {
            if (lastLoginIp == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "lastLoginIp");
            }
            this.lastLoginIp = lastLoginIp;
            return this;
        }
        @CustomType.Setter
        public Builder lastResetPasswordTime(Double lastResetPasswordTime) {
            if (lastResetPasswordTime == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "lastResetPasswordTime");
            }
            this.lastResetPasswordTime = lastResetPasswordTime;
            return this;
        }
        @CustomType.Setter
        public Builder loginAllowed(Boolean loginAllowed) {
            if (loginAllowed == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "loginAllowed");
            }
            this.loginAllowed = loginAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder loginLocked(Boolean loginLocked) {
            if (loginLocked == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "loginLocked");
            }
            this.loginLocked = loginLocked;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpireAt(Double passwordExpireAt) {
            if (passwordExpireAt == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "passwordExpireAt");
            }
            this.passwordExpireAt = passwordExpireAt;
            return this;
        }
        @CustomType.Setter
        public Builder passwordResetRequired(Boolean passwordResetRequired) {
            if (passwordResetRequired == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "passwordResetRequired");
            }
            this.passwordResetRequired = passwordResetRequired;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthExemptDuration(Double safeAuthExemptDuration) {
            if (safeAuthExemptDuration == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "safeAuthExemptDuration");
            }
            this.safeAuthExemptDuration = safeAuthExemptDuration;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthExemptRequired(Double safeAuthExemptRequired) {
            if (safeAuthExemptRequired == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "safeAuthExemptRequired");
            }
            this.safeAuthExemptRequired = safeAuthExemptRequired;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthExemptUnit(Double safeAuthExemptUnit) {
            if (safeAuthExemptUnit == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "safeAuthExemptUnit");
            }
            this.safeAuthExemptUnit = safeAuthExemptUnit;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthFlag(Boolean safeAuthFlag) {
            if (safeAuthFlag == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "safeAuthFlag");
            }
            this.safeAuthFlag = safeAuthFlag;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthType(String safeAuthType) {
            if (safeAuthType == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "safeAuthType");
            }
            this.safeAuthType = safeAuthType;
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(String updateDate) {
            if (updateDate == null) {
              throw new MissingRequiredPropertyException("GetUserLoginProfile", "updateDate");
            }
            this.updateDate = updateDate;
            return this;
        }
        public GetUserLoginProfile build() {
            final var _resultValue = new GetUserLoginProfile();
            _resultValue.createDate = createDate;
            _resultValue.lastLoginDate = lastLoginDate;
            _resultValue.lastLoginIp = lastLoginIp;
            _resultValue.lastResetPasswordTime = lastResetPasswordTime;
            _resultValue.loginAllowed = loginAllowed;
            _resultValue.loginLocked = loginLocked;
            _resultValue.password = password;
            _resultValue.passwordExpireAt = passwordExpireAt;
            _resultValue.passwordResetRequired = passwordResetRequired;
            _resultValue.safeAuthExemptDuration = safeAuthExemptDuration;
            _resultValue.safeAuthExemptRequired = safeAuthExemptRequired;
            _resultValue.safeAuthExemptUnit = safeAuthExemptUnit;
            _resultValue.safeAuthFlag = safeAuthFlag;
            _resultValue.safeAuthType = safeAuthType;
            _resultValue.updateDate = updateDate;
            return _resultValue;
        }
    }
}
