// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ecs.outputs.GetCommandParameterDefinition;
import com.volcengine.volcenginecc.ecs.outputs.GetCommandTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCommandResult {
    /**
     * @return 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
     * 
     */
    private String commandContent;
    /**
     * @return 自定义命令ID。
     * 
     */
    private String commandId;
    /**
     * @return 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
     * 
     */
    private String contentEncoding;
    /**
     * @return 创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
     * 
     */
    private String description;
    /**
     * @return 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
     * 
     */
    private Boolean enableParameter;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 命令被调用次数。
     * 
     */
    private Integer invocationTimes;
    /**
     * @return 命令名称。字符长度1~32。不限制特殊字符。
     * 
     */
    private String name;
    /**
     * @return 自定义参数定义信息。
     * 
     */
    private List<GetCommandParameterDefinition> parameterDefinitions;
    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    private String projectName;
    /**
     * @return 命令的提供方。
     * 
     */
    private String providerName;
    /**
     * @return 标签键值对。
     * 
     */
    private List<GetCommandTag> tags;
    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
     * 
     */
    private Integer timeout;
    /**
     * @return 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
     * 
     */
    private String type;
    /**
     * @return 更新时间。
     * 
     */
    private String updatedTime;
    /**
     * @return 执行命令时的用户名。
     * 
     */
    private String username;
    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    private String workingDir;

    private GetCommandResult() {}
    /**
     * @return 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
     * 
     */
    public String commandContent() {
        return this.commandContent;
    }
    /**
     * @return 自定义命令ID。
     * 
     */
    public String commandId() {
        return this.commandId;
    }
    /**
     * @return 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
     * 
     */
    public String contentEncoding() {
        return this.contentEncoding;
    }
    /**
     * @return 创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
     * 
     */
    public Boolean enableParameter() {
        return this.enableParameter;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 命令被调用次数。
     * 
     */
    public Integer invocationTimes() {
        return this.invocationTimes;
    }
    /**
     * @return 命令名称。字符长度1~32。不限制特殊字符。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 自定义参数定义信息。
     * 
     */
    public List<GetCommandParameterDefinition> parameterDefinitions() {
        return this.parameterDefinitions;
    }
    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 命令的提供方。
     * 
     */
    public String providerName() {
        return this.providerName;
    }
    /**
     * @return 标签键值对。
     * 
     */
    public List<GetCommandTag> tags() {
        return this.tags;
    }
    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return 更新时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return 执行命令时的用户名。
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    public String workingDir() {
        return this.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCommandResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commandContent;
        private String commandId;
        private String contentEncoding;
        private String createdTime;
        private String description;
        private Boolean enableParameter;
        private String id;
        private Integer invocationTimes;
        private String name;
        private List<GetCommandParameterDefinition> parameterDefinitions;
        private String projectName;
        private String providerName;
        private List<GetCommandTag> tags;
        private Integer timeout;
        private String type;
        private String updatedTime;
        private String username;
        private String workingDir;
        public Builder() {}
        public Builder(GetCommandResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandContent = defaults.commandContent;
    	      this.commandId = defaults.commandId;
    	      this.contentEncoding = defaults.contentEncoding;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.enableParameter = defaults.enableParameter;
    	      this.id = defaults.id;
    	      this.invocationTimes = defaults.invocationTimes;
    	      this.name = defaults.name;
    	      this.parameterDefinitions = defaults.parameterDefinitions;
    	      this.projectName = defaults.projectName;
    	      this.providerName = defaults.providerName;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.updatedTime = defaults.updatedTime;
    	      this.username = defaults.username;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder commandContent(String commandContent) {
            if (commandContent == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "commandContent");
            }
            this.commandContent = commandContent;
            return this;
        }
        @CustomType.Setter
        public Builder commandId(String commandId) {
            if (commandId == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "commandId");
            }
            this.commandId = commandId;
            return this;
        }
        @CustomType.Setter
        public Builder contentEncoding(String contentEncoding) {
            if (contentEncoding == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "contentEncoding");
            }
            this.contentEncoding = contentEncoding;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableParameter(Boolean enableParameter) {
            if (enableParameter == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "enableParameter");
            }
            this.enableParameter = enableParameter;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder invocationTimes(Integer invocationTimes) {
            if (invocationTimes == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "invocationTimes");
            }
            this.invocationTimes = invocationTimes;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder parameterDefinitions(List<GetCommandParameterDefinition> parameterDefinitions) {
            if (parameterDefinitions == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "parameterDefinitions");
            }
            this.parameterDefinitions = parameterDefinitions;
            return this;
        }
        public Builder parameterDefinitions(GetCommandParameterDefinition... parameterDefinitions) {
            return parameterDefinitions(List.of(parameterDefinitions));
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder providerName(String providerName) {
            if (providerName == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "providerName");
            }
            this.providerName = providerName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetCommandTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetCommandTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder workingDir(String workingDir) {
            if (workingDir == null) {
              throw new MissingRequiredPropertyException("GetCommandResult", "workingDir");
            }
            this.workingDir = workingDir;
            return this;
        }
        public GetCommandResult build() {
            final var _resultValue = new GetCommandResult();
            _resultValue.commandContent = commandContent;
            _resultValue.commandId = commandId;
            _resultValue.contentEncoding = contentEncoding;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.enableParameter = enableParameter;
            _resultValue.id = id;
            _resultValue.invocationTimes = invocationTimes;
            _resultValue.name = name;
            _resultValue.parameterDefinitions = parameterDefinitions;
            _resultValue.projectName = projectName;
            _resultValue.providerName = providerName;
            _resultValue.tags = tags;
            _resultValue.timeout = timeout;
            _resultValue.type = type;
            _resultValue.updatedTime = updatedTime;
            _resultValue.username = username;
            _resultValue.workingDir = workingDir;
            return _resultValue;
        }
    }
}
