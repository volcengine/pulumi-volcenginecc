// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.inputs.ProviderAssumeRoleArgs;
import com.volcengine.volcenginecc.inputs.ProviderEndpointsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
     * environment variable
     * 
     */
    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    /**
     * @return The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
     * environment variable
     * 
     */
    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    /**
     * An `assume_role` block (documented below). Only one `assume_role` block may be in the configuration.
     * 
     */
    @Import(name="assumeRole", json=true)
    private @Nullable Output<ProviderAssumeRoleArgs> assumeRole;

    /**
     * @return An `assume_role` block (documented below). Only one `assume_role` block may be in the configuration.
     * 
     */
    public Optional<Output<ProviderAssumeRoleArgs>> assumeRole() {
        return Optional.ofNullable(this.assumeRole);
    }

    /**
     * CUSTOMER HEADERS for Volcengine Provider. The customer_headers field uses commas (,) to separate multiple headers, and
     * colons (:) to separate each header key from its corresponding value.
     * 
     */
    @Import(name="customerHeaders")
    private @Nullable Output<String> customerHeaders;

    /**
     * @return CUSTOMER HEADERS for Volcengine Provider. The customer_headers field uses commas (,) to separate multiple headers, and
     * colons (:) to separate each header key from its corresponding value.
     * 
     */
    public Optional<Output<String>> customerHeaders() {
        return Optional.ofNullable(this.customerHeaders);
    }

    /**
     * Disable SSL for Volcengine Provider
     * 
     */
    @Import(name="disableSsl", json=true)
    private @Nullable Output<Boolean> disableSsl;

    /**
     * @return Disable SSL for Volcengine Provider
     * 
     */
    public Optional<Output<Boolean>> disableSsl() {
        return Optional.ofNullable(this.disableSsl);
    }

    /**
     * An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
     * 
     */
    @Import(name="endpoints", json=true)
    private @Nullable Output<ProviderEndpointsArgs> endpoints;

    /**
     * @return An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
     * 
     */
    public Optional<Output<ProviderEndpointsArgs>> endpoints() {
        return Optional.ofNullable(this.endpoints);
    }

    /**
     * PROXY URL for Volcengine Provider
     * 
     */
    @Import(name="proxyUrl")
    private @Nullable Output<String> proxyUrl;

    /**
     * @return PROXY URL for Volcengine Provider
     * 
     */
    public Optional<Output<String>> proxyUrl() {
        return Optional.ofNullable(this.proxyUrl);
    }

    /**
     * The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
     * environment variable
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
     * environment variable
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
     * environment variable
     * 
     */
    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    /**
     * @return he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
     * environment variable
     * 
     */
    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.accessKey = $.accessKey;
        this.assumeRole = $.assumeRole;
        this.customerHeaders = $.customerHeaders;
        this.disableSsl = $.disableSsl;
        this.endpoints = $.endpoints;
        this.proxyUrl = $.proxyUrl;
        this.region = $.region;
        this.secretKey = $.secretKey;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessKey The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
         * environment variable
         * 
         * @return builder
         * 
         */
        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        /**
         * @param accessKey The Access Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_ACCESS_KEY`
         * environment variable
         * 
         * @return builder
         * 
         */
        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        /**
         * @param assumeRole An `assume_role` block (documented below). Only one `assume_role` block may be in the configuration.
         * 
         * @return builder
         * 
         */
        public Builder assumeRole(@Nullable Output<ProviderAssumeRoleArgs> assumeRole) {
            $.assumeRole = assumeRole;
            return this;
        }

        /**
         * @param assumeRole An `assume_role` block (documented below). Only one `assume_role` block may be in the configuration.
         * 
         * @return builder
         * 
         */
        public Builder assumeRole(ProviderAssumeRoleArgs assumeRole) {
            return assumeRole(Output.of(assumeRole));
        }

        /**
         * @param customerHeaders CUSTOMER HEADERS for Volcengine Provider. The customer_headers field uses commas (,) to separate multiple headers, and
         * colons (:) to separate each header key from its corresponding value.
         * 
         * @return builder
         * 
         */
        public Builder customerHeaders(@Nullable Output<String> customerHeaders) {
            $.customerHeaders = customerHeaders;
            return this;
        }

        /**
         * @param customerHeaders CUSTOMER HEADERS for Volcengine Provider. The customer_headers field uses commas (,) to separate multiple headers, and
         * colons (:) to separate each header key from its corresponding value.
         * 
         * @return builder
         * 
         */
        public Builder customerHeaders(String customerHeaders) {
            return customerHeaders(Output.of(customerHeaders));
        }

        /**
         * @param disableSsl Disable SSL for Volcengine Provider
         * 
         * @return builder
         * 
         */
        public Builder disableSsl(@Nullable Output<Boolean> disableSsl) {
            $.disableSsl = disableSsl;
            return this;
        }

        /**
         * @param disableSsl Disable SSL for Volcengine Provider
         * 
         * @return builder
         * 
         */
        public Builder disableSsl(Boolean disableSsl) {
            return disableSsl(Output.of(disableSsl));
        }

        /**
         * @param endpoints An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(@Nullable Output<ProviderEndpointsArgs> endpoints) {
            $.endpoints = endpoints;
            return this;
        }

        /**
         * @param endpoints An `endpoints` block (documented below). Only one `endpoints` block may be in the configuration.
         * 
         * @return builder
         * 
         */
        public Builder endpoints(ProviderEndpointsArgs endpoints) {
            return endpoints(Output.of(endpoints));
        }

        /**
         * @param proxyUrl PROXY URL for Volcengine Provider
         * 
         * @return builder
         * 
         */
        public Builder proxyUrl(@Nullable Output<String> proxyUrl) {
            $.proxyUrl = proxyUrl;
            return this;
        }

        /**
         * @param proxyUrl PROXY URL for Volcengine Provider
         * 
         * @return builder
         * 
         */
        public Builder proxyUrl(String proxyUrl) {
            return proxyUrl(Output.of(proxyUrl));
        }

        /**
         * @param region The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
         * environment variable
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The Region for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_REGION`
         * environment variable
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param secretKey he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
         * environment variable
         * 
         * @return builder
         * 
         */
        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        /**
         * @param secretKey he Secret Key for Volcengine Provider. It must be provided, but it can also be sourced from the `VOLCENGINE_SECRET_KEY`
         * environment variable
         * 
         * @return builder
         * 
         */
        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public ProviderArgs build() {
            $.accessKey = Codegen.stringProp("accessKey").output().arg($.accessKey).env("VOLCENGINE_ACCESS_KEY").getNullable();
            $.customerHeaders = Codegen.stringProp("customerHeaders").output().arg($.customerHeaders).env("VOLCENGINE_CUSTOMER_HEADERS").getNullable();
            $.disableSsl = Codegen.booleanProp("disableSsl").output().arg($.disableSsl).env("VOLCENGINE_DISABLE_SSL").getNullable();
            $.proxyUrl = Codegen.stringProp("proxyUrl").output().arg($.proxyUrl).env("VOLCENGINE_PROXY_URL").getNullable();
            $.region = Codegen.stringProp("region").output().arg($.region).env("VOLCENGINE_REGION").getNullable();
            $.secretKey = Codegen.stringProp("secretKey").output().arg($.secretKey).env("VOLCENGINE_SECRET_KEY").getNullable();
            return $;
        }
    }

}
