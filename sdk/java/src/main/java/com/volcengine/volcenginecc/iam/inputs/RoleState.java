// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.iam.inputs.RolePolicyArgs;
import com.volcengine.volcenginecc.iam.inputs.RoleTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RoleState extends com.pulumi.resources.ResourceArgs {

    public static final RoleState Empty = new RoleState();

    /**
     * 角色创建时间。
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return 角色创建时间。
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * 角色描述，长度不超过128。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 角色描述，长度不超过128。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 角色显示名，长度不超过64。
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return 角色显示名，长度不超过64。
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * 是否是服务关联角色, 0否，1是。
     * 
     */
    @Import(name="isServiceLinkedRole")
    private @Nullable Output<Integer> isServiceLinkedRole;

    /**
     * @return 是否是服务关联角色, 0否，1是。
     * 
     */
    public Optional<Output<Integer>> isServiceLinkedRole() {
        return Optional.ofNullable(this.isServiceLinkedRole);
    }

    /**
     * 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
     * 
     */
    @Import(name="maxSessionDuration")
    private @Nullable Output<Integer> maxSessionDuration;

    /**
     * @return 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
     * 
     */
    public Optional<Output<Integer>> maxSessionDuration() {
        return Optional.ofNullable(this.maxSessionDuration);
    }

    @Import(name="policies")
    private @Nullable Output<List<RolePolicyArgs>> policies;

    public Optional<Output<List<RolePolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * 角色ID。
     * 
     */
    @Import(name="roleId")
    private @Nullable Output<Integer> roleId;

    /**
     * @return 角色ID。
     * 
     */
    public Optional<Output<Integer>> roleId() {
        return Optional.ofNullable(this.roleId);
    }

    /**
     * 角色名，长度1~64，支持英文、数字和.-_符号。
     * 
     */
    @Import(name="roleName")
    private @Nullable Output<String> roleName;

    /**
     * @return 角色名，长度1~64，支持英文、数字和.-_符号。
     * 
     */
    public Optional<Output<String>> roleName() {
        return Optional.ofNullable(this.roleName);
    }

    @Import(name="tags")
    private @Nullable Output<List<RoleTagArgs>> tags;

    public Optional<Output<List<RoleTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 角色TRN。
     * 
     */
    @Import(name="trn")
    private @Nullable Output<String> trn;

    /**
     * @return 角色TRN。
     * 
     */
    public Optional<Output<String>> trn() {
        return Optional.ofNullable(this.trn);
    }

    /**
     * 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
     * 
     */
    @Import(name="trustPolicyDocument")
    private @Nullable Output<String> trustPolicyDocument;

    /**
     * @return 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
     * 
     */
    public Optional<Output<String>> trustPolicyDocument() {
        return Optional.ofNullable(this.trustPolicyDocument);
    }

    /**
     * 角色更新时间。
     * 
     */
    @Import(name="updateDate")
    private @Nullable Output<String> updateDate;

    /**
     * @return 角色更新时间。
     * 
     */
    public Optional<Output<String>> updateDate() {
        return Optional.ofNullable(this.updateDate);
    }

    private RoleState() {}

    private RoleState(RoleState $) {
        this.createDate = $.createDate;
        this.description = $.description;
        this.displayName = $.displayName;
        this.isServiceLinkedRole = $.isServiceLinkedRole;
        this.maxSessionDuration = $.maxSessionDuration;
        this.policies = $.policies;
        this.roleId = $.roleId;
        this.roleName = $.roleName;
        this.tags = $.tags;
        this.trn = $.trn;
        this.trustPolicyDocument = $.trustPolicyDocument;
        this.updateDate = $.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RoleState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RoleState $;

        public Builder() {
            $ = new RoleState();
        }

        public Builder(RoleState defaults) {
            $ = new RoleState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDate 角色创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate 角色创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param description 角色描述，长度不超过128。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 角色描述，长度不超过128。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName 角色显示名，长度不超过64。
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName 角色显示名，长度不超过64。
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param isServiceLinkedRole 是否是服务关联角色, 0否，1是。
         * 
         * @return builder
         * 
         */
        public Builder isServiceLinkedRole(@Nullable Output<Integer> isServiceLinkedRole) {
            $.isServiceLinkedRole = isServiceLinkedRole;
            return this;
        }

        /**
         * @param isServiceLinkedRole 是否是服务关联角色, 0否，1是。
         * 
         * @return builder
         * 
         */
        public Builder isServiceLinkedRole(Integer isServiceLinkedRole) {
            return isServiceLinkedRole(Output.of(isServiceLinkedRole));
        }

        /**
         * @param maxSessionDuration 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(@Nullable Output<Integer> maxSessionDuration) {
            $.maxSessionDuration = maxSessionDuration;
            return this;
        }

        /**
         * @param maxSessionDuration 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
         * 
         * @return builder
         * 
         */
        public Builder maxSessionDuration(Integer maxSessionDuration) {
            return maxSessionDuration(Output.of(maxSessionDuration));
        }

        public Builder policies(@Nullable Output<List<RolePolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        public Builder policies(List<RolePolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        public Builder policies(RolePolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param roleId 角色ID。
         * 
         * @return builder
         * 
         */
        public Builder roleId(@Nullable Output<Integer> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId 角色ID。
         * 
         * @return builder
         * 
         */
        public Builder roleId(Integer roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param roleName 角色名，长度1~64，支持英文、数字和.-_符号。
         * 
         * @return builder
         * 
         */
        public Builder roleName(@Nullable Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName 角色名，长度1~64，支持英文、数字和.-_符号。
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        public Builder tags(@Nullable Output<List<RoleTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<RoleTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(RoleTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param trn 角色TRN。
         * 
         * @return builder
         * 
         */
        public Builder trn(@Nullable Output<String> trn) {
            $.trn = trn;
            return this;
        }

        /**
         * @param trn 角色TRN。
         * 
         * @return builder
         * 
         */
        public Builder trn(String trn) {
            return trn(Output.of(trn));
        }

        /**
         * @param trustPolicyDocument 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
         * 
         * @return builder
         * 
         */
        public Builder trustPolicyDocument(@Nullable Output<String> trustPolicyDocument) {
            $.trustPolicyDocument = trustPolicyDocument;
            return this;
        }

        /**
         * @param trustPolicyDocument 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
         * 
         * @return builder
         * 
         */
        public Builder trustPolicyDocument(String trustPolicyDocument) {
            return trustPolicyDocument(Output.of(trustPolicyDocument));
        }

        /**
         * @param updateDate 角色更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateDate(@Nullable Output<String> updateDate) {
            $.updateDate = updateDate;
            return this;
        }

        /**
         * @param updateDate 角色更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateDate(String updateDate) {
            return updateDate(Output.of(updateDate));
        }

        public RoleState build() {
            return $;
        }
    }

}
