// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceEipAddressArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceEipAddressArgs Empty = new InstanceEipAddressArgs();

    /**
     * 实例的分配ID。
     * 
     */
    @Import(name="allocationId")
    private @Nullable Output<String> allocationId;

    /**
     * @return 实例的分配ID。
     * 
     */
    public Optional<Output<String>> allocationId() {
        return Optional.ofNullable(this.allocationId);
    }

    /**
     * 公网IP的带宽上限，默认值为1，单位：Mbps。
     * - `ChargeType`传入`PayByBandwidth`：取值范围1～500。
     * - `ChargeType`传入`PayByTraffic`：取值范围1～200。
     * 
     */
    @Import(name="bandwidthMbps")
    private @Nullable Output<Integer> bandwidthMbps;

    /**
     * @return 公网IP的带宽上限，默认值为1，单位：Mbps。
     * - `ChargeType`传入`PayByBandwidth`：取值范围1～500。
     * - `ChargeType`传入`PayByTraffic`：取值范围1～200。
     * 
     */
    public Optional<Output<Integer>> bandwidthMbps() {
        return Optional.ofNullable(this.bandwidthMbps);
    }

    /**
     * 共享带宽包的ID，表示将公网IP加入到共享带宽包。
     * - 您可以调用[DescribeBandwidthPackages](https://www.volcengine.com/docs/6623/100685)接口，查询共享带宽包的ID。
     * - 公网IP加入到共享带宽包必须同时满足如下条件：
     *   - 二者的安全防护类型相同。
     *   - 二者的地域相同。
     *   - 公网IP的计费方式必须是按量计费。
     *   - 共享带宽包为IPv4类型。
     * 
     */
    @Import(name="bandwidthPackageId")
    private @Nullable Output<String> bandwidthPackageId;

    /**
     * @return 共享带宽包的ID，表示将公网IP加入到共享带宽包。
     * - 您可以调用[DescribeBandwidthPackages](https://www.volcengine.com/docs/6623/100685)接口，查询共享带宽包的ID。
     * - 公网IP加入到共享带宽包必须同时满足如下条件：
     *   - 二者的安全防护类型相同。
     *   - 二者的地域相同。
     *   - 公网IP的计费方式必须是按量计费。
     *   - 共享带宽包为IPv4类型。
     * 
     */
    public Optional<Output<String>> bandwidthPackageId() {
        return Optional.ofNullable(this.bandwidthPackageId);
    }

    /**
     * 公网IP的计费方式，取值：
     * - PayByBandwidth（默认）：按量计费-按带宽上限计费。
     * - PayByTraffic：按量计费-按实际流量计费。
     * - PrePaid：包年包月。
     *   :::tip
     *   实例的计费类型`InstanceChargeType`取值为`PostPaid`时，该参数取值不能为`PrePaid`。
     *   :::
     * 
     */
    @Import(name="chargeType")
    private @Nullable Output<String> chargeType;

    /**
     * @return 公网IP的计费方式，取值：
     * - PayByBandwidth（默认）：按量计费-按带宽上限计费。
     * - PayByTraffic：按量计费-按实际流量计费。
     * - PrePaid：包年包月。
     *   :::tip
     *   实例的计费类型`InstanceChargeType`取值为`PostPaid`时，该参数取值不能为`PrePaid`。
     *   :::
     * 
     */
    public Optional<Output<String>> chargeType() {
        return Optional.ofNullable(this.chargeType);
    }

    /**
     * 实例的IP地址。
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return 实例的IP地址。
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * 公网IP的线路类型，默认为BGP。取值：
     * - BGP：BGP（多线）。
     * - 若您的账号已申请并开通了静态单线权限，则可传入如下取值：
     *   - ChinaMobile：中国移动静态单线。
     *   - ChinaTelecom：中国电信静态单线。
     *   - ChinaUnicom：中国联通静态单线。
     * - 若您的账号已申请并开通了BGP单线权限，则可传入SingleLine_BGP。
     * - 若您的账号已申请并开通了静态BGP权限，则可传入Static_BGP。
     * 
     */
    @Import(name="isp")
    private @Nullable Output<String> isp;

    /**
     * @return 公网IP的线路类型，默认为BGP。取值：
     * - BGP：BGP（多线）。
     * - 若您的账号已申请并开通了静态单线权限，则可传入如下取值：
     *   - ChinaMobile：中国移动静态单线。
     *   - ChinaTelecom：中国电信静态单线。
     *   - ChinaUnicom：中国联通静态单线。
     * - 若您的账号已申请并开通了BGP单线权限，则可传入SingleLine_BGP。
     * - 若您的账号已申请并开通了静态BGP权限，则可传入Static_BGP。
     * 
     */
    public Optional<Output<String>> isp() {
        return Optional.ofNullable(this.isp);
    }

    /**
     * 实例是否随实例释放。
     * 
     */
    @Import(name="releaseWithInstance")
    private @Nullable Output<Boolean> releaseWithInstance;

    /**
     * @return 实例是否随实例释放。
     * 
     */
    public Optional<Output<Boolean>> releaseWithInstance() {
        return Optional.ofNullable(this.releaseWithInstance);
    }

    private InstanceEipAddressArgs() {}

    private InstanceEipAddressArgs(InstanceEipAddressArgs $) {
        this.allocationId = $.allocationId;
        this.bandwidthMbps = $.bandwidthMbps;
        this.bandwidthPackageId = $.bandwidthPackageId;
        this.chargeType = $.chargeType;
        this.ipAddress = $.ipAddress;
        this.isp = $.isp;
        this.releaseWithInstance = $.releaseWithInstance;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceEipAddressArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceEipAddressArgs $;

        public Builder() {
            $ = new InstanceEipAddressArgs();
        }

        public Builder(InstanceEipAddressArgs defaults) {
            $ = new InstanceEipAddressArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param allocationId 实例的分配ID。
         * 
         * @return builder
         * 
         */
        public Builder allocationId(@Nullable Output<String> allocationId) {
            $.allocationId = allocationId;
            return this;
        }

        /**
         * @param allocationId 实例的分配ID。
         * 
         * @return builder
         * 
         */
        public Builder allocationId(String allocationId) {
            return allocationId(Output.of(allocationId));
        }

        /**
         * @param bandwidthMbps 公网IP的带宽上限，默认值为1，单位：Mbps。
         * - `ChargeType`传入`PayByBandwidth`：取值范围1～500。
         * - `ChargeType`传入`PayByTraffic`：取值范围1～200。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMbps(@Nullable Output<Integer> bandwidthMbps) {
            $.bandwidthMbps = bandwidthMbps;
            return this;
        }

        /**
         * @param bandwidthMbps 公网IP的带宽上限，默认值为1，单位：Mbps。
         * - `ChargeType`传入`PayByBandwidth`：取值范围1～500。
         * - `ChargeType`传入`PayByTraffic`：取值范围1～200。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthMbps(Integer bandwidthMbps) {
            return bandwidthMbps(Output.of(bandwidthMbps));
        }

        /**
         * @param bandwidthPackageId 共享带宽包的ID，表示将公网IP加入到共享带宽包。
         * - 您可以调用[DescribeBandwidthPackages](https://www.volcengine.com/docs/6623/100685)接口，查询共享带宽包的ID。
         * - 公网IP加入到共享带宽包必须同时满足如下条件：
         *   - 二者的安全防护类型相同。
         *   - 二者的地域相同。
         *   - 公网IP的计费方式必须是按量计费。
         *   - 共享带宽包为IPv4类型。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(@Nullable Output<String> bandwidthPackageId) {
            $.bandwidthPackageId = bandwidthPackageId;
            return this;
        }

        /**
         * @param bandwidthPackageId 共享带宽包的ID，表示将公网IP加入到共享带宽包。
         * - 您可以调用[DescribeBandwidthPackages](https://www.volcengine.com/docs/6623/100685)接口，查询共享带宽包的ID。
         * - 公网IP加入到共享带宽包必须同时满足如下条件：
         *   - 二者的安全防护类型相同。
         *   - 二者的地域相同。
         *   - 公网IP的计费方式必须是按量计费。
         *   - 共享带宽包为IPv4类型。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            return bandwidthPackageId(Output.of(bandwidthPackageId));
        }

        /**
         * @param chargeType 公网IP的计费方式，取值：
         * - PayByBandwidth（默认）：按量计费-按带宽上限计费。
         * - PayByTraffic：按量计费-按实际流量计费。
         * - PrePaid：包年包月。
         *   :::tip
         *   实例的计费类型`InstanceChargeType`取值为`PostPaid`时，该参数取值不能为`PrePaid`。
         *   :::
         * 
         * @return builder
         * 
         */
        public Builder chargeType(@Nullable Output<String> chargeType) {
            $.chargeType = chargeType;
            return this;
        }

        /**
         * @param chargeType 公网IP的计费方式，取值：
         * - PayByBandwidth（默认）：按量计费-按带宽上限计费。
         * - PayByTraffic：按量计费-按实际流量计费。
         * - PrePaid：包年包月。
         *   :::tip
         *   实例的计费类型`InstanceChargeType`取值为`PostPaid`时，该参数取值不能为`PrePaid`。
         *   :::
         * 
         * @return builder
         * 
         */
        public Builder chargeType(String chargeType) {
            return chargeType(Output.of(chargeType));
        }

        /**
         * @param ipAddress 实例的IP地址。
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress 实例的IP地址。
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param isp 公网IP的线路类型，默认为BGP。取值：
         * - BGP：BGP（多线）。
         * - 若您的账号已申请并开通了静态单线权限，则可传入如下取值：
         *   - ChinaMobile：中国移动静态单线。
         *   - ChinaTelecom：中国电信静态单线。
         *   - ChinaUnicom：中国联通静态单线。
         * - 若您的账号已申请并开通了BGP单线权限，则可传入SingleLine_BGP。
         * - 若您的账号已申请并开通了静态BGP权限，则可传入Static_BGP。
         * 
         * @return builder
         * 
         */
        public Builder isp(@Nullable Output<String> isp) {
            $.isp = isp;
            return this;
        }

        /**
         * @param isp 公网IP的线路类型，默认为BGP。取值：
         * - BGP：BGP（多线）。
         * - 若您的账号已申请并开通了静态单线权限，则可传入如下取值：
         *   - ChinaMobile：中国移动静态单线。
         *   - ChinaTelecom：中国电信静态单线。
         *   - ChinaUnicom：中国联通静态单线。
         * - 若您的账号已申请并开通了BGP单线权限，则可传入SingleLine_BGP。
         * - 若您的账号已申请并开通了静态BGP权限，则可传入Static_BGP。
         * 
         * @return builder
         * 
         */
        public Builder isp(String isp) {
            return isp(Output.of(isp));
        }

        /**
         * @param releaseWithInstance 实例是否随实例释放。
         * 
         * @return builder
         * 
         */
        public Builder releaseWithInstance(@Nullable Output<Boolean> releaseWithInstance) {
            $.releaseWithInstance = releaseWithInstance;
            return this;
        }

        /**
         * @param releaseWithInstance 实例是否随实例释放。
         * 
         * @return builder
         * 
         */
        public Builder releaseWithInstance(Boolean releaseWithInstance) {
            return releaseWithInstance(Output.of(releaseWithInstance));
        }

        public InstanceEipAddressArgs build() {
            return $;
        }
    }

}
