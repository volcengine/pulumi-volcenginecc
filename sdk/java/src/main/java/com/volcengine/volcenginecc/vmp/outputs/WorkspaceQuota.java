// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vmp.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class WorkspaceQuota {
    /**
     * @return 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
     * 
     */
    private @Nullable Integer activeSeries;
    /**
     * @return 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
     * 
     */
    private @Nullable Integer ingestSamplesPerSecond;
    /**
     * @return 最大查询 QPS。整数形式，默认取值范围为 1～500。
     * 
     */
    private @Nullable Integer queryPerSecond;
    /**
     * @return 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
     * 
     */
    private @Nullable Integer scanSamplesPerSecond;
    /**
     * @return 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
     * 
     */
    private @Nullable Integer scanSeriesPerSecond;

    private WorkspaceQuota() {}
    /**
     * @return 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
     * 
     */
    public Optional<Integer> activeSeries() {
        return Optional.ofNullable(this.activeSeries);
    }
    /**
     * @return 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
     * 
     */
    public Optional<Integer> ingestSamplesPerSecond() {
        return Optional.ofNullable(this.ingestSamplesPerSecond);
    }
    /**
     * @return 最大查询 QPS。整数形式，默认取值范围为 1～500。
     * 
     */
    public Optional<Integer> queryPerSecond() {
        return Optional.ofNullable(this.queryPerSecond);
    }
    /**
     * @return 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
     * 
     */
    public Optional<Integer> scanSamplesPerSecond() {
        return Optional.ofNullable(this.scanSamplesPerSecond);
    }
    /**
     * @return 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
     * 
     */
    public Optional<Integer> scanSeriesPerSecond() {
        return Optional.ofNullable(this.scanSeriesPerSecond);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(WorkspaceQuota defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer activeSeries;
        private @Nullable Integer ingestSamplesPerSecond;
        private @Nullable Integer queryPerSecond;
        private @Nullable Integer scanSamplesPerSecond;
        private @Nullable Integer scanSeriesPerSecond;
        public Builder() {}
        public Builder(WorkspaceQuota defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeSeries = defaults.activeSeries;
    	      this.ingestSamplesPerSecond = defaults.ingestSamplesPerSecond;
    	      this.queryPerSecond = defaults.queryPerSecond;
    	      this.scanSamplesPerSecond = defaults.scanSamplesPerSecond;
    	      this.scanSeriesPerSecond = defaults.scanSeriesPerSecond;
        }

        @CustomType.Setter
        public Builder activeSeries(@Nullable Integer activeSeries) {

            this.activeSeries = activeSeries;
            return this;
        }
        @CustomType.Setter
        public Builder ingestSamplesPerSecond(@Nullable Integer ingestSamplesPerSecond) {

            this.ingestSamplesPerSecond = ingestSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder queryPerSecond(@Nullable Integer queryPerSecond) {

            this.queryPerSecond = queryPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder scanSamplesPerSecond(@Nullable Integer scanSamplesPerSecond) {

            this.scanSamplesPerSecond = scanSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder scanSeriesPerSecond(@Nullable Integer scanSeriesPerSecond) {

            this.scanSeriesPerSecond = scanSeriesPerSecond;
            return this;
        }
        public WorkspaceQuota build() {
            final var _resultValue = new WorkspaceQuota();
            _resultValue.activeSeries = activeSeries;
            _resultValue.ingestSamplesPerSecond = ingestSamplesPerSecond;
            _resultValue.queryPerSecond = queryPerSecond;
            _resultValue.scanSamplesPerSecond = scanSamplesPerSecond;
            _resultValue.scanSeriesPerSecond = scanSeriesPerSecond;
            return _resultValue;
        }
    }
}
