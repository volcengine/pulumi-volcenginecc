// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.redis.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.redis.outputs.GetInstanceCapacity;
import com.volcengine.volcenginecc.redis.outputs.GetInstanceConfigureNode;
import com.volcengine.volcenginecc.redis.outputs.GetInstanceInstanceShard;
import com.volcengine.volcenginecc.redis.outputs.GetInstanceTag;
import com.volcengine.volcenginecc.redis.outputs.GetInstanceVisitAddr;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
     * 
     */
    private List<String> allowListIds;
    /**
     * @return 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
     * 
     */
    private Boolean autoRenew;
    /**
     * @return 为变更前创建的全量备份设置备份名称。
     * 
     */
    private String backupPointName;
    /**
     * @return 实例的容量信息。
     * 
     */
    private GetInstanceCapacity capacity;
    /**
     * @return 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
     * 
     */
    private String chargeType;
    /**
     * @return 设置节点所属的可用区列表。
     * 
     */
    private List<GetInstanceConfigureNode> configureNodes;
    /**
     * @return 是否在变更前创建备份。
     * 
     */
    private Boolean createBackup;
    /**
     * @return 实例的创建时间。
     * 
     */
    private String createTime;
    /**
     * @return 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
     * 
     */
    private String dataLayout;
    /**
     * @return 开启或关闭实例删除保护功能。
     * 
     */
    private String deletionProtection;
    /**
     * @return 数据库版本号。
     * 
     */
    private String engineVersion;
    /**
     * @return 实例到期时间。
     * 
     */
    private String expiredTime;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
     * 
     */
    private String instanceClass;
    /**
     * @return 实例 ID。
     * 
     */
    private String instanceId;
    /**
     * @return 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
     * 
     */
    private String instanceName;
    /**
     * @return 实例中所有 Shard 分片的详情列表。
     * 
     */
    private List<GetInstanceInstanceShard> instanceShards;
    /**
     * @return 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
     * 
     */
    private String maintenanceTime;
    /**
     * @return 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
     * 
     */
    private Integer maxConnections;
    /**
     * @return 设置实例的可用区部署方案。
     * 
     */
    private String multiAz;
    /**
     * @return 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
     * 
     */
    private String noAuthMode;
    /**
     * @return Proxy 和 Server 节点 ID 列表。
     * 
     */
    private List<String> nodeIds;
    /**
     * @return 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
     * 
     */
    private Integer nodeNumber;
    /**
     * @return 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
     * 
     */
    private String parameterGroupId;
    /**
     * @return 设置默认数据库 default 账号的密码。
     * 
     */
    private String password;
    /**
     * @return 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
     * 
     */
    private Integer port;
    /**
     * @return 实例私网连接地址的域名。
     * 
     */
    private String privateAddress;
    /**
     * @return 实例所属的项目。
     * 
     */
    private String projectName;
    /**
     * @return 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
     * 
     */
    private Integer purchaseMonths;
    /**
     * @return 设置是否保留额外带宽
     * 
     */
    private Boolean reserveAdditionalBandwidth;
    /**
     * @return 实例的服务类型
     * 
     */
    private String serviceType;
    /**
     * @return 实例中每个分片的内存容量。单位：MiB。
     * 
     */
    private Integer shardCapacity;
    /**
     * @return 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
     * 
     */
    private Integer shardNumber;
    /**
     * @return 是否启用分片集群。取值范围如下：0：不启用。1：启用。
     * 
     */
    private Integer shardedCluster;
    /**
     * @return 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
     * 
     */
    private String status;
    /**
     * @return 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
     * 
     */
    private String subnetId;
    /**
     * @return 设置实例的标签列表。
     * 
     */
    private List<GetInstanceTag> tags;
    /**
     * @return 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
     * 
     */
    private String viPv6;
    /**
     * @return 实例私网连接地址所对应的 IPv4 地址。
     * 
     */
    private String vip;
    /**
     * @return 连接地址信息。
     * 
     */
    private List<GetInstanceVisitAddr> visitAddrs;
    /**
     * @return 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
     * 
     */
    private String vpcAuthMode;
    /**
     * @return 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
     * 
     */
    private String vpcId;
    /**
     * @return 实例所在的可用区列表。
     * 
     */
    private List<String> zoneIds;

    private GetInstanceResult() {}
    /**
     * @return 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
     * 
     */
    public List<String> allowListIds() {
        return this.allowListIds;
    }
    /**
     * @return 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
     * 
     */
    public Boolean autoRenew() {
        return this.autoRenew;
    }
    /**
     * @return 为变更前创建的全量备份设置备份名称。
     * 
     */
    public String backupPointName() {
        return this.backupPointName;
    }
    /**
     * @return 实例的容量信息。
     * 
     */
    public GetInstanceCapacity capacity() {
        return this.capacity;
    }
    /**
     * @return 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return 设置节点所属的可用区列表。
     * 
     */
    public List<GetInstanceConfigureNode> configureNodes() {
        return this.configureNodes;
    }
    /**
     * @return 是否在变更前创建备份。
     * 
     */
    public Boolean createBackup() {
        return this.createBackup;
    }
    /**
     * @return 实例的创建时间。
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
     * 
     */
    public String dataLayout() {
        return this.dataLayout;
    }
    /**
     * @return 开启或关闭实例删除保护功能。
     * 
     */
    public String deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * @return 数据库版本号。
     * 
     */
    public String engineVersion() {
        return this.engineVersion;
    }
    /**
     * @return 实例到期时间。
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
     * 
     */
    public String instanceClass() {
        return this.instanceClass;
    }
    /**
     * @return 实例 ID。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
     * 
     */
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return 实例中所有 Shard 分片的详情列表。
     * 
     */
    public List<GetInstanceInstanceShard> instanceShards() {
        return this.instanceShards;
    }
    /**
     * @return 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
     * 
     */
    public String maintenanceTime() {
        return this.maintenanceTime;
    }
    /**
     * @return 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return 设置实例的可用区部署方案。
     * 
     */
    public String multiAz() {
        return this.multiAz;
    }
    /**
     * @return 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
     * 
     */
    public String noAuthMode() {
        return this.noAuthMode;
    }
    /**
     * @return Proxy 和 Server 节点 ID 列表。
     * 
     */
    public List<String> nodeIds() {
        return this.nodeIds;
    }
    /**
     * @return 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
     * 
     */
    public Integer nodeNumber() {
        return this.nodeNumber;
    }
    /**
     * @return 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
     * 
     */
    public String parameterGroupId() {
        return this.parameterGroupId;
    }
    /**
     * @return 设置默认数据库 default 账号的密码。
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 实例私网连接地址的域名。
     * 
     */
    public String privateAddress() {
        return this.privateAddress;
    }
    /**
     * @return 实例所属的项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
     * 
     */
    public Integer purchaseMonths() {
        return this.purchaseMonths;
    }
    /**
     * @return 设置是否保留额外带宽
     * 
     */
    public Boolean reserveAdditionalBandwidth() {
        return this.reserveAdditionalBandwidth;
    }
    /**
     * @return 实例的服务类型
     * 
     */
    public String serviceType() {
        return this.serviceType;
    }
    /**
     * @return 实例中每个分片的内存容量。单位：MiB。
     * 
     */
    public Integer shardCapacity() {
        return this.shardCapacity;
    }
    /**
     * @return 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
     * 
     */
    public Integer shardNumber() {
        return this.shardNumber;
    }
    /**
     * @return 是否启用分片集群。取值范围如下：0：不启用。1：启用。
     * 
     */
    public Integer shardedCluster() {
        return this.shardedCluster;
    }
    /**
     * @return 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return 设置实例的标签列表。
     * 
     */
    public List<GetInstanceTag> tags() {
        return this.tags;
    }
    /**
     * @return 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
     * 
     */
    public String viPv6() {
        return this.viPv6;
    }
    /**
     * @return 实例私网连接地址所对应的 IPv4 地址。
     * 
     */
    public String vip() {
        return this.vip;
    }
    /**
     * @return 连接地址信息。
     * 
     */
    public List<GetInstanceVisitAddr> visitAddrs() {
        return this.visitAddrs;
    }
    /**
     * @return 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
     * 
     */
    public String vpcAuthMode() {
        return this.vpcAuthMode;
    }
    /**
     * @return 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return 实例所在的可用区列表。
     * 
     */
    public List<String> zoneIds() {
        return this.zoneIds;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> allowListIds;
        private Boolean autoRenew;
        private String backupPointName;
        private GetInstanceCapacity capacity;
        private String chargeType;
        private List<GetInstanceConfigureNode> configureNodes;
        private Boolean createBackup;
        private String createTime;
        private String dataLayout;
        private String deletionProtection;
        private String engineVersion;
        private String expiredTime;
        private String id;
        private String instanceClass;
        private String instanceId;
        private String instanceName;
        private List<GetInstanceInstanceShard> instanceShards;
        private String maintenanceTime;
        private Integer maxConnections;
        private String multiAz;
        private String noAuthMode;
        private List<String> nodeIds;
        private Integer nodeNumber;
        private String parameterGroupId;
        private String password;
        private Integer port;
        private String privateAddress;
        private String projectName;
        private Integer purchaseMonths;
        private Boolean reserveAdditionalBandwidth;
        private String serviceType;
        private Integer shardCapacity;
        private Integer shardNumber;
        private Integer shardedCluster;
        private String status;
        private String subnetId;
        private List<GetInstanceTag> tags;
        private String viPv6;
        private String vip;
        private List<GetInstanceVisitAddr> visitAddrs;
        private String vpcAuthMode;
        private String vpcId;
        private List<String> zoneIds;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowListIds = defaults.allowListIds;
    	      this.autoRenew = defaults.autoRenew;
    	      this.backupPointName = defaults.backupPointName;
    	      this.capacity = defaults.capacity;
    	      this.chargeType = defaults.chargeType;
    	      this.configureNodes = defaults.configureNodes;
    	      this.createBackup = defaults.createBackup;
    	      this.createTime = defaults.createTime;
    	      this.dataLayout = defaults.dataLayout;
    	      this.deletionProtection = defaults.deletionProtection;
    	      this.engineVersion = defaults.engineVersion;
    	      this.expiredTime = defaults.expiredTime;
    	      this.id = defaults.id;
    	      this.instanceClass = defaults.instanceClass;
    	      this.instanceId = defaults.instanceId;
    	      this.instanceName = defaults.instanceName;
    	      this.instanceShards = defaults.instanceShards;
    	      this.maintenanceTime = defaults.maintenanceTime;
    	      this.maxConnections = defaults.maxConnections;
    	      this.multiAz = defaults.multiAz;
    	      this.noAuthMode = defaults.noAuthMode;
    	      this.nodeIds = defaults.nodeIds;
    	      this.nodeNumber = defaults.nodeNumber;
    	      this.parameterGroupId = defaults.parameterGroupId;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateAddress = defaults.privateAddress;
    	      this.projectName = defaults.projectName;
    	      this.purchaseMonths = defaults.purchaseMonths;
    	      this.reserveAdditionalBandwidth = defaults.reserveAdditionalBandwidth;
    	      this.serviceType = defaults.serviceType;
    	      this.shardCapacity = defaults.shardCapacity;
    	      this.shardNumber = defaults.shardNumber;
    	      this.shardedCluster = defaults.shardedCluster;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.viPv6 = defaults.viPv6;
    	      this.vip = defaults.vip;
    	      this.visitAddrs = defaults.visitAddrs;
    	      this.vpcAuthMode = defaults.vpcAuthMode;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneIds = defaults.zoneIds;
        }

        @CustomType.Setter
        public Builder allowListIds(List<String> allowListIds) {
            if (allowListIds == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "allowListIds");
            }
            this.allowListIds = allowListIds;
            return this;
        }
        public Builder allowListIds(String... allowListIds) {
            return allowListIds(List.of(allowListIds));
        }
        @CustomType.Setter
        public Builder autoRenew(Boolean autoRenew) {
            if (autoRenew == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "autoRenew");
            }
            this.autoRenew = autoRenew;
            return this;
        }
        @CustomType.Setter
        public Builder backupPointName(String backupPointName) {
            if (backupPointName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "backupPointName");
            }
            this.backupPointName = backupPointName;
            return this;
        }
        @CustomType.Setter
        public Builder capacity(GetInstanceCapacity capacity) {
            if (capacity == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "capacity");
            }
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder configureNodes(List<GetInstanceConfigureNode> configureNodes) {
            if (configureNodes == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "configureNodes");
            }
            this.configureNodes = configureNodes;
            return this;
        }
        public Builder configureNodes(GetInstanceConfigureNode... configureNodes) {
            return configureNodes(List.of(configureNodes));
        }
        @CustomType.Setter
        public Builder createBackup(Boolean createBackup) {
            if (createBackup == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createBackup");
            }
            this.createBackup = createBackup;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder dataLayout(String dataLayout) {
            if (dataLayout == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "dataLayout");
            }
            this.dataLayout = dataLayout;
            return this;
        }
        @CustomType.Setter
        public Builder deletionProtection(String deletionProtection) {
            if (deletionProtection == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "deletionProtection");
            }
            this.deletionProtection = deletionProtection;
            return this;
        }
        @CustomType.Setter
        public Builder engineVersion(String engineVersion) {
            if (engineVersion == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "engineVersion");
            }
            this.engineVersion = engineVersion;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceClass(String instanceClass) {
            if (instanceClass == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceClass");
            }
            this.instanceClass = instanceClass;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder instanceShards(List<GetInstanceInstanceShard> instanceShards) {
            if (instanceShards == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "instanceShards");
            }
            this.instanceShards = instanceShards;
            return this;
        }
        public Builder instanceShards(GetInstanceInstanceShard... instanceShards) {
            return instanceShards(List.of(instanceShards));
        }
        @CustomType.Setter
        public Builder maintenanceTime(String maintenanceTime) {
            if (maintenanceTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maintenanceTime");
            }
            this.maintenanceTime = maintenanceTime;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder multiAz(String multiAz) {
            if (multiAz == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "multiAz");
            }
            this.multiAz = multiAz;
            return this;
        }
        @CustomType.Setter
        public Builder noAuthMode(String noAuthMode) {
            if (noAuthMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "noAuthMode");
            }
            this.noAuthMode = noAuthMode;
            return this;
        }
        @CustomType.Setter
        public Builder nodeIds(List<String> nodeIds) {
            if (nodeIds == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "nodeIds");
            }
            this.nodeIds = nodeIds;
            return this;
        }
        public Builder nodeIds(String... nodeIds) {
            return nodeIds(List.of(nodeIds));
        }
        @CustomType.Setter
        public Builder nodeNumber(Integer nodeNumber) {
            if (nodeNumber == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "nodeNumber");
            }
            this.nodeNumber = nodeNumber;
            return this;
        }
        @CustomType.Setter
        public Builder parameterGroupId(String parameterGroupId) {
            if (parameterGroupId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "parameterGroupId");
            }
            this.parameterGroupId = parameterGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            if (password == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "password");
            }
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder privateAddress(String privateAddress) {
            if (privateAddress == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "privateAddress");
            }
            this.privateAddress = privateAddress;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder purchaseMonths(Integer purchaseMonths) {
            if (purchaseMonths == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "purchaseMonths");
            }
            this.purchaseMonths = purchaseMonths;
            return this;
        }
        @CustomType.Setter
        public Builder reserveAdditionalBandwidth(Boolean reserveAdditionalBandwidth) {
            if (reserveAdditionalBandwidth == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "reserveAdditionalBandwidth");
            }
            this.reserveAdditionalBandwidth = reserveAdditionalBandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder serviceType(String serviceType) {
            if (serviceType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "serviceType");
            }
            this.serviceType = serviceType;
            return this;
        }
        @CustomType.Setter
        public Builder shardCapacity(Integer shardCapacity) {
            if (shardCapacity == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "shardCapacity");
            }
            this.shardCapacity = shardCapacity;
            return this;
        }
        @CustomType.Setter
        public Builder shardNumber(Integer shardNumber) {
            if (shardNumber == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "shardNumber");
            }
            this.shardNumber = shardNumber;
            return this;
        }
        @CustomType.Setter
        public Builder shardedCluster(Integer shardedCluster) {
            if (shardedCluster == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "shardedCluster");
            }
            this.shardedCluster = shardedCluster;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetInstanceTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetInstanceTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder viPv6(String viPv6) {
            if (viPv6 == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "viPv6");
            }
            this.viPv6 = viPv6;
            return this;
        }
        @CustomType.Setter
        public Builder vip(String vip) {
            if (vip == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "vip");
            }
            this.vip = vip;
            return this;
        }
        @CustomType.Setter
        public Builder visitAddrs(List<GetInstanceVisitAddr> visitAddrs) {
            if (visitAddrs == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "visitAddrs");
            }
            this.visitAddrs = visitAddrs;
            return this;
        }
        public Builder visitAddrs(GetInstanceVisitAddr... visitAddrs) {
            return visitAddrs(List.of(visitAddrs));
        }
        @CustomType.Setter
        public Builder vpcAuthMode(String vpcAuthMode) {
            if (vpcAuthMode == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "vpcAuthMode");
            }
            this.vpcAuthMode = vpcAuthMode;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneIds(List<String> zoneIds) {
            if (zoneIds == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "zoneIds");
            }
            this.zoneIds = zoneIds;
            return this;
        }
        public Builder zoneIds(String... zoneIds) {
            return zoneIds(List.of(zoneIds));
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.allowListIds = allowListIds;
            _resultValue.autoRenew = autoRenew;
            _resultValue.backupPointName = backupPointName;
            _resultValue.capacity = capacity;
            _resultValue.chargeType = chargeType;
            _resultValue.configureNodes = configureNodes;
            _resultValue.createBackup = createBackup;
            _resultValue.createTime = createTime;
            _resultValue.dataLayout = dataLayout;
            _resultValue.deletionProtection = deletionProtection;
            _resultValue.engineVersion = engineVersion;
            _resultValue.expiredTime = expiredTime;
            _resultValue.id = id;
            _resultValue.instanceClass = instanceClass;
            _resultValue.instanceId = instanceId;
            _resultValue.instanceName = instanceName;
            _resultValue.instanceShards = instanceShards;
            _resultValue.maintenanceTime = maintenanceTime;
            _resultValue.maxConnections = maxConnections;
            _resultValue.multiAz = multiAz;
            _resultValue.noAuthMode = noAuthMode;
            _resultValue.nodeIds = nodeIds;
            _resultValue.nodeNumber = nodeNumber;
            _resultValue.parameterGroupId = parameterGroupId;
            _resultValue.password = password;
            _resultValue.port = port;
            _resultValue.privateAddress = privateAddress;
            _resultValue.projectName = projectName;
            _resultValue.purchaseMonths = purchaseMonths;
            _resultValue.reserveAdditionalBandwidth = reserveAdditionalBandwidth;
            _resultValue.serviceType = serviceType;
            _resultValue.shardCapacity = shardCapacity;
            _resultValue.shardNumber = shardNumber;
            _resultValue.shardedCluster = shardedCluster;
            _resultValue.status = status;
            _resultValue.subnetId = subnetId;
            _resultValue.tags = tags;
            _resultValue.viPv6 = viPv6;
            _resultValue.vip = vip;
            _resultValue.visitAddrs = visitAddrs;
            _resultValue.vpcAuthMode = vpcAuthMode;
            _resultValue.vpcId = vpcId;
            _resultValue.zoneIds = zoneIds;
            return _resultValue;
        }
    }
}
