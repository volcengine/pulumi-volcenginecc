// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.clb.inputs.ListenerHealthCheckArgs;
import com.volcengine.volcenginecc.clb.inputs.ListenerTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ListenerState extends com.pulumi.resources.ResourceArgs {

    public static final ListenerState Empty = new ListenerState();

    /**
     * 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     * 
     */
    @Import(name="aclIds")
    private @Nullable Output<List<String>> aclIds;

    /**
     * @return 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     * 
     */
    public Optional<Output<List<String>>> aclIds() {
        return Optional.ofNullable(this.aclIds);
    }

    /**
     * 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     * 
     */
    @Import(name="aclStatus")
    private @Nullable Output<String> aclStatus;

    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     * 
     */
    public Optional<Output<String>> aclStatus() {
        return Optional.ofNullable(this.aclStatus);
    }

    /**
     * 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     * 
     */
    @Import(name="aclType")
    private @Nullable Output<String> aclType;

    /**
     * @return 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     * 
     */
    public Optional<Output<String>> aclType() {
        return Optional.ofNullable(this.aclType);
    }

    /**
     * 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * 双向认证的CA证书。
     * 
     */
    @Import(name="caCertificateId")
    private @Nullable Output<String> caCertificateId;

    /**
     * @return 双向认证的CA证书。
     * 
     */
    public Optional<Output<String>> caCertificateId() {
        return Optional.ofNullable(this.caCertificateId);
    }

    /**
     * 是否开启双向认证。on：开启。off（默认值）：不开启。
     * 
     */
    @Import(name="caEnabled")
    private @Nullable Output<String> caEnabled;

    /**
     * @return 是否开启双向认证。on：开启。off（默认值）：不开启。
     * 
     */
    public Optional<Output<String>> caEnabled() {
        return Optional.ofNullable(this.caEnabled);
    }

    /**
     * 证书中心的证书的ID。
     * 
     */
    @Import(name="certCenterCertificateId")
    private @Nullable Output<String> certCenterCertificateId;

    /**
     * @return 证书中心的证书的ID。
     * 
     */
    public Optional<Output<String>> certCenterCertificateId() {
        return Optional.ofNullable(this.certCenterCertificateId);
    }

    /**
     * CLB侧证书管理模块的证书的ID。
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return CLB侧证书管理模块的证书的ID。
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     * 
     */
    @Import(name="certificateSource")
    private @Nullable Output<String> certificateSource;

    /**
     * @return 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     * 
     */
    public Optional<Output<String>> certificateSource() {
        return Optional.ofNullable(this.certificateSource);
    }

    /**
     * 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     * 
     */
    @Import(name="clientBodyTimeout")
    private @Nullable Output<Integer> clientBodyTimeout;

    /**
     * @return 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     * 
     */
    public Optional<Output<Integer>> clientBodyTimeout() {
        return Optional.ofNullable(this.clientBodyTimeout);
    }

    /**
     * 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Import(name="clientHeaderTimeout")
    private @Nullable Output<Integer> clientHeaderTimeout;

    /**
     * @return 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Optional<Output<Integer>> clientHeaderTimeout() {
        return Optional.ofNullable(this.clientHeaderTimeout);
    }

    /**
     * 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     * 
     */
    @Import(name="connectionDrainEnabled")
    private @Nullable Output<String> connectionDrainEnabled;

    /**
     * @return 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     * 
     */
    public Optional<Output<String>> connectionDrainEnabled() {
        return Optional.ofNullable(this.connectionDrainEnabled);
    }

    /**
     * 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     * 
     */
    @Import(name="connectionDrainTimeout")
    private @Nullable Output<Integer> connectionDrainTimeout;

    /**
     * @return 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     * 
     */
    public Optional<Output<Integer>> connectionDrainTimeout() {
        return Optional.ofNullable(this.connectionDrainTimeout);
    }

    /**
     * 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     * 
     */
    @Import(name="cookie")
    private @Nullable Output<String> cookie;

    /**
     * @return 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     * 
     */
    public Optional<Output<String>> cookie() {
        return Optional.ofNullable(this.cookie);
    }

    /**
     * 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     * 
     */
    @Import(name="cps")
    private @Nullable Output<Integer> cps;

    /**
     * @return 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     * 
     */
    public Optional<Output<Integer>> cps() {
        return Optional.ofNullable(this.cps);
    }

    /**
     * 监听器的创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 监听器的创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 是否启用监听器。on（默认值）：开启。off：不开启。
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<String> enabled;

    /**
     * @return 是否启用监听器。on（默认值）：开启。off：不开启。
     * 
     */
    public Optional<Output<String>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     * 
     */
    @Import(name="endPort")
    private @Nullable Output<Integer> endPort;

    /**
     * @return 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     * 
     */
    public Optional<Output<Integer>> endPort() {
        return Optional.ofNullable(this.endPort);
    }

    /**
     * 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     * 
     */
    @Import(name="establishedTimeout")
    private @Nullable Output<Integer> establishedTimeout;

    /**
     * @return 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     * 
     */
    public Optional<Output<Integer>> establishedTimeout() {
        return Optional.ofNullable(this.establishedTimeout);
    }

    /**
     * 健康检查相关信息。
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<ListenerHealthCheckArgs> healthCheck;

    /**
     * @return 健康检查相关信息。
     * 
     */
    public Optional<Output<ListenerHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     * 
     */
    @Import(name="http2Enabled")
    private @Nullable Output<String> http2Enabled;

    /**
     * @return 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     * 
     */
    public Optional<Output<String>> http2Enabled() {
        return Optional.ofNullable(this.http2Enabled);
    }

    /**
     * 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Import(name="keepaliveTimeout")
    private @Nullable Output<Integer> keepaliveTimeout;

    /**
     * @return 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Optional<Output<Integer>> keepaliveTimeout() {
        return Optional.ofNullable(this.keepaliveTimeout);
    }

    /**
     * 监听器的ID。
     * 
     */
    @Import(name="listenerId")
    private @Nullable Output<String> listenerId;

    /**
     * @return 监听器的ID。
     * 
     */
    public Optional<Output<String>> listenerId() {
        return Optional.ofNullable(this.listenerId);
    }

    /**
     * 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     * 
     */
    @Import(name="listenerName")
    private @Nullable Output<String> listenerName;

    /**
     * @return 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     * 
     */
    public Optional<Output<String>> listenerName() {
        return Optional.ofNullable(this.listenerName);
    }

    /**
     * CLB实例的ID。
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return CLB实例的ID。
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<Integer> maxConnections;

    /**
     * @return 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     * 
     */
    public Optional<Output<Integer>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     * 
     */
    @Import(name="persistenceTimeout")
    private @Nullable Output<Integer> persistenceTimeout;

    /**
     * @return 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     * 
     */
    public Optional<Output<Integer>> persistenceTimeout() {
        return Optional.ofNullable(this.persistenceTimeout);
    }

    /**
     * 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     * 
     */
    @Import(name="persistenceType")
    private @Nullable Output<String> persistenceType;

    /**
     * @return 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     * 
     */
    public Optional<Output<String>> persistenceType() {
        return Optional.ofNullable(this.persistenceType);
    }

    /**
     * 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 监听器的协议。
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 监听器的协议。
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Import(name="proxyConnectTimeout")
    private @Nullable Output<Integer> proxyConnectTimeout;

    /**
     * @return CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Optional<Output<Integer>> proxyConnectTimeout() {
        return Optional.ofNullable(this.proxyConnectTimeout);
    }

    /**
     * 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     * 
     */
    @Import(name="proxyProtocolType")
    private @Nullable Output<String> proxyProtocolType;

    /**
     * @return 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     * 
     */
    public Optional<Output<String>> proxyProtocolType() {
        return Optional.ofNullable(this.proxyProtocolType);
    }

    /**
     * CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Import(name="proxyReadTimeout")
    private @Nullable Output<Integer> proxyReadTimeout;

    /**
     * @return CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Optional<Output<Integer>> proxyReadTimeout() {
        return Optional.ofNullable(this.proxyReadTimeout);
    }

    /**
     * CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Import(name="proxySendTimeout")
    private @Nullable Output<Integer> proxySendTimeout;

    /**
     * @return CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Optional<Output<Integer>> proxySendTimeout() {
        return Optional.ofNullable(this.proxySendTimeout);
    }

    /**
     * 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    /**
     * @return 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    /**
     * HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    /**
     * CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Import(name="sendTimeout")
    private @Nullable Output<Integer> sendTimeout;

    /**
     * @return CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Optional<Output<Integer>> sendTimeout() {
        return Optional.ofNullable(this.sendTimeout);
    }

    /**
     * 监听器关联的后端服务器组 ID。
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return 监听器关联的后端服务器组 ID。
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     * 
     */
    @Import(name="startPort")
    private @Nullable Output<Integer> startPort;

    /**
     * @return 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     * 
     */
    public Optional<Output<Integer>> startPort() {
        return Optional.ofNullable(this.startPort);
    }

    /**
     * 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<ListenerTagArgs>> tags;

    public Optional<Output<List<ListenerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 监听器最近一次的操作时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    /**
     * 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     * 
     */
    @Import(name="wafProtectionEnabled")
    private @Nullable Output<String> wafProtectionEnabled;

    /**
     * @return 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     * 
     */
    public Optional<Output<String>> wafProtectionEnabled() {
        return Optional.ofNullable(this.wafProtectionEnabled);
    }

    private ListenerState() {}

    private ListenerState(ListenerState $) {
        this.aclIds = $.aclIds;
        this.aclStatus = $.aclStatus;
        this.aclType = $.aclType;
        this.bandwidth = $.bandwidth;
        this.caCertificateId = $.caCertificateId;
        this.caEnabled = $.caEnabled;
        this.certCenterCertificateId = $.certCenterCertificateId;
        this.certificateId = $.certificateId;
        this.certificateSource = $.certificateSource;
        this.clientBodyTimeout = $.clientBodyTimeout;
        this.clientHeaderTimeout = $.clientHeaderTimeout;
        this.connectionDrainEnabled = $.connectionDrainEnabled;
        this.connectionDrainTimeout = $.connectionDrainTimeout;
        this.cookie = $.cookie;
        this.cps = $.cps;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.enabled = $.enabled;
        this.endPort = $.endPort;
        this.establishedTimeout = $.establishedTimeout;
        this.healthCheck = $.healthCheck;
        this.http2Enabled = $.http2Enabled;
        this.keepaliveTimeout = $.keepaliveTimeout;
        this.listenerId = $.listenerId;
        this.listenerName = $.listenerName;
        this.loadBalancerId = $.loadBalancerId;
        this.maxConnections = $.maxConnections;
        this.persistenceTimeout = $.persistenceTimeout;
        this.persistenceType = $.persistenceType;
        this.port = $.port;
        this.protocol = $.protocol;
        this.proxyConnectTimeout = $.proxyConnectTimeout;
        this.proxyProtocolType = $.proxyProtocolType;
        this.proxyReadTimeout = $.proxyReadTimeout;
        this.proxySendTimeout = $.proxySendTimeout;
        this.scheduler = $.scheduler;
        this.securityPolicyId = $.securityPolicyId;
        this.sendTimeout = $.sendTimeout;
        this.serverGroupId = $.serverGroupId;
        this.startPort = $.startPort;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedTime = $.updatedTime;
        this.wafProtectionEnabled = $.wafProtectionEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ListenerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ListenerState $;

        public Builder() {
            $ = new ListenerState();
        }

        public Builder(ListenerState defaults) {
            $ = new ListenerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param aclIds 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
         * 
         * @return builder
         * 
         */
        public Builder aclIds(@Nullable Output<List<String>> aclIds) {
            $.aclIds = aclIds;
            return this;
        }

        /**
         * @param aclIds 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
         * 
         * @return builder
         * 
         */
        public Builder aclIds(List<String> aclIds) {
            return aclIds(Output.of(aclIds));
        }

        /**
         * @param aclIds 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
         * 
         * @return builder
         * 
         */
        public Builder aclIds(String... aclIds) {
            return aclIds(List.of(aclIds));
        }

        /**
         * @param aclStatus 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
         * 
         * @return builder
         * 
         */
        public Builder aclStatus(@Nullable Output<String> aclStatus) {
            $.aclStatus = aclStatus;
            return this;
        }

        /**
         * @param aclStatus 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
         * 
         * @return builder
         * 
         */
        public Builder aclStatus(String aclStatus) {
            return aclStatus(Output.of(aclStatus));
        }

        /**
         * @param aclType 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder aclType(@Nullable Output<String> aclType) {
            $.aclType = aclType;
            return this;
        }

        /**
         * @param aclType 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder aclType(String aclType) {
            return aclType(Output.of(aclType));
        }

        /**
         * @param bandwidth 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param caCertificateId 双向认证的CA证书。
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(@Nullable Output<String> caCertificateId) {
            $.caCertificateId = caCertificateId;
            return this;
        }

        /**
         * @param caCertificateId 双向认证的CA证书。
         * 
         * @return builder
         * 
         */
        public Builder caCertificateId(String caCertificateId) {
            return caCertificateId(Output.of(caCertificateId));
        }

        /**
         * @param caEnabled 是否开启双向认证。on：开启。off（默认值）：不开启。
         * 
         * @return builder
         * 
         */
        public Builder caEnabled(@Nullable Output<String> caEnabled) {
            $.caEnabled = caEnabled;
            return this;
        }

        /**
         * @param caEnabled 是否开启双向认证。on：开启。off（默认值）：不开启。
         * 
         * @return builder
         * 
         */
        public Builder caEnabled(String caEnabled) {
            return caEnabled(Output.of(caEnabled));
        }

        /**
         * @param certCenterCertificateId 证书中心的证书的ID。
         * 
         * @return builder
         * 
         */
        public Builder certCenterCertificateId(@Nullable Output<String> certCenterCertificateId) {
            $.certCenterCertificateId = certCenterCertificateId;
            return this;
        }

        /**
         * @param certCenterCertificateId 证书中心的证书的ID。
         * 
         * @return builder
         * 
         */
        public Builder certCenterCertificateId(String certCenterCertificateId) {
            return certCenterCertificateId(Output.of(certCenterCertificateId));
        }

        /**
         * @param certificateId CLB侧证书管理模块的证书的ID。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId CLB侧证书管理模块的证书的ID。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateSource 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(@Nullable Output<String> certificateSource) {
            $.certificateSource = certificateSource;
            return this;
        }

        /**
         * @param certificateSource 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateSource(String certificateSource) {
            return certificateSource(Output.of(certificateSource));
        }

        /**
         * @param clientBodyTimeout 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
         * 
         * @return builder
         * 
         */
        public Builder clientBodyTimeout(@Nullable Output<Integer> clientBodyTimeout) {
            $.clientBodyTimeout = clientBodyTimeout;
            return this;
        }

        /**
         * @param clientBodyTimeout 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
         * 
         * @return builder
         * 
         */
        public Builder clientBodyTimeout(Integer clientBodyTimeout) {
            return clientBodyTimeout(Output.of(clientBodyTimeout));
        }

        /**
         * @param clientHeaderTimeout 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder clientHeaderTimeout(@Nullable Output<Integer> clientHeaderTimeout) {
            $.clientHeaderTimeout = clientHeaderTimeout;
            return this;
        }

        /**
         * @param clientHeaderTimeout 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder clientHeaderTimeout(Integer clientHeaderTimeout) {
            return clientHeaderTimeout(Output.of(clientHeaderTimeout));
        }

        /**
         * @param connectionDrainEnabled 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainEnabled(@Nullable Output<String> connectionDrainEnabled) {
            $.connectionDrainEnabled = connectionDrainEnabled;
            return this;
        }

        /**
         * @param connectionDrainEnabled 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainEnabled(String connectionDrainEnabled) {
            return connectionDrainEnabled(Output.of(connectionDrainEnabled));
        }

        /**
         * @param connectionDrainTimeout 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainTimeout(@Nullable Output<Integer> connectionDrainTimeout) {
            $.connectionDrainTimeout = connectionDrainTimeout;
            return this;
        }

        /**
         * @param connectionDrainTimeout 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainTimeout(Integer connectionDrainTimeout) {
            return connectionDrainTimeout(Output.of(connectionDrainTimeout));
        }

        /**
         * @param cookie 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
         * 
         * @return builder
         * 
         */
        public Builder cookie(@Nullable Output<String> cookie) {
            $.cookie = cookie;
            return this;
        }

        /**
         * @param cookie 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
         * 
         * @return builder
         * 
         */
        public Builder cookie(String cookie) {
            return cookie(Output.of(cookie));
        }

        /**
         * @param cps 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
         * 
         * @return builder
         * 
         */
        public Builder cps(@Nullable Output<Integer> cps) {
            $.cps = cps;
            return this;
        }

        /**
         * @param cps 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
         * 
         * @return builder
         * 
         */
        public Builder cps(Integer cps) {
            return cps(Output.of(cps));
        }

        /**
         * @param createdTime 监听器的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 监听器的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled 是否启用监听器。on（默认值）：开启。off：不开启。
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<String> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled 是否启用监听器。on（默认值）：开启。off：不开启。
         * 
         * @return builder
         * 
         */
        public Builder enabled(String enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param endPort 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
         * 
         * @return builder
         * 
         */
        public Builder endPort(@Nullable Output<Integer> endPort) {
            $.endPort = endPort;
            return this;
        }

        /**
         * @param endPort 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
         * 
         * @return builder
         * 
         */
        public Builder endPort(Integer endPort) {
            return endPort(Output.of(endPort));
        }

        /**
         * @param establishedTimeout 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
         * 
         * @return builder
         * 
         */
        public Builder establishedTimeout(@Nullable Output<Integer> establishedTimeout) {
            $.establishedTimeout = establishedTimeout;
            return this;
        }

        /**
         * @param establishedTimeout 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
         * 
         * @return builder
         * 
         */
        public Builder establishedTimeout(Integer establishedTimeout) {
            return establishedTimeout(Output.of(establishedTimeout));
        }

        /**
         * @param healthCheck 健康检查相关信息。
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<ListenerHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck 健康检查相关信息。
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(ListenerHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param http2Enabled 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(@Nullable Output<String> http2Enabled) {
            $.http2Enabled = http2Enabled;
            return this;
        }

        /**
         * @param http2Enabled 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
         * 
         * @return builder
         * 
         */
        public Builder http2Enabled(String http2Enabled) {
            return http2Enabled(Output.of(http2Enabled));
        }

        /**
         * @param keepaliveTimeout 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder keepaliveTimeout(@Nullable Output<Integer> keepaliveTimeout) {
            $.keepaliveTimeout = keepaliveTimeout;
            return this;
        }

        /**
         * @param keepaliveTimeout 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder keepaliveTimeout(Integer keepaliveTimeout) {
            return keepaliveTimeout(Output.of(keepaliveTimeout));
        }

        /**
         * @param listenerId 监听器的ID。
         * 
         * @return builder
         * 
         */
        public Builder listenerId(@Nullable Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId 监听器的ID。
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        /**
         * @param listenerName 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
         * 
         * @return builder
         * 
         */
        public Builder listenerName(@Nullable Output<String> listenerName) {
            $.listenerName = listenerName;
            return this;
        }

        /**
         * @param listenerName 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
         * 
         * @return builder
         * 
         */
        public Builder listenerName(String listenerName) {
            return listenerName(Output.of(listenerName));
        }

        /**
         * @param loadBalancerId CLB实例的ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId CLB实例的ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param maxConnections 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<Integer> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(Integer maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param persistenceTimeout 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
         * 
         * @return builder
         * 
         */
        public Builder persistenceTimeout(@Nullable Output<Integer> persistenceTimeout) {
            $.persistenceTimeout = persistenceTimeout;
            return this;
        }

        /**
         * @param persistenceTimeout 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
         * 
         * @return builder
         * 
         */
        public Builder persistenceTimeout(Integer persistenceTimeout) {
            return persistenceTimeout(Output.of(persistenceTimeout));
        }

        /**
         * @param persistenceType 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
         * 
         * @return builder
         * 
         */
        public Builder persistenceType(@Nullable Output<String> persistenceType) {
            $.persistenceType = persistenceType;
            return this;
        }

        /**
         * @param persistenceType 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
         * 
         * @return builder
         * 
         */
        public Builder persistenceType(String persistenceType) {
            return persistenceType(Output.of(persistenceType));
        }

        /**
         * @param port 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol 监听器的协议。
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 监听器的协议。
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyConnectTimeout CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder proxyConnectTimeout(@Nullable Output<Integer> proxyConnectTimeout) {
            $.proxyConnectTimeout = proxyConnectTimeout;
            return this;
        }

        /**
         * @param proxyConnectTimeout CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder proxyConnectTimeout(Integer proxyConnectTimeout) {
            return proxyConnectTimeout(Output.of(proxyConnectTimeout));
        }

        /**
         * @param proxyProtocolType 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolType(@Nullable Output<String> proxyProtocolType) {
            $.proxyProtocolType = proxyProtocolType;
            return this;
        }

        /**
         * @param proxyProtocolType 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolType(String proxyProtocolType) {
            return proxyProtocolType(Output.of(proxyProtocolType));
        }

        /**
         * @param proxyReadTimeout CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder proxyReadTimeout(@Nullable Output<Integer> proxyReadTimeout) {
            $.proxyReadTimeout = proxyReadTimeout;
            return this;
        }

        /**
         * @param proxyReadTimeout CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder proxyReadTimeout(Integer proxyReadTimeout) {
            return proxyReadTimeout(Output.of(proxyReadTimeout));
        }

        /**
         * @param proxySendTimeout CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder proxySendTimeout(@Nullable Output<Integer> proxySendTimeout) {
            $.proxySendTimeout = proxySendTimeout;
            return this;
        }

        /**
         * @param proxySendTimeout CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder proxySendTimeout(Integer proxySendTimeout) {
            return proxySendTimeout(Output.of(proxySendTimeout));
        }

        /**
         * @param scheduler 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
         * 
         * @return builder
         * 
         */
        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        /**
         * @param scheduler 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
         * 
         * @return builder
         * 
         */
        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        /**
         * @param securityPolicyId HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        /**
         * @param sendTimeout CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder sendTimeout(@Nullable Output<Integer> sendTimeout) {
            $.sendTimeout = sendTimeout;
            return this;
        }

        /**
         * @param sendTimeout CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
         * 
         * @return builder
         * 
         */
        public Builder sendTimeout(Integer sendTimeout) {
            return sendTimeout(Output.of(sendTimeout));
        }

        /**
         * @param serverGroupId 监听器关联的后端服务器组 ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId 监听器关联的后端服务器组 ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param startPort 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
         * 
         * @return builder
         * 
         */
        public Builder startPort(@Nullable Output<Integer> startPort) {
            $.startPort = startPort;
            return this;
        }

        /**
         * @param startPort 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
         * 
         * @return builder
         * 
         */
        public Builder startPort(Integer startPort) {
            return startPort(Output.of(startPort));
        }

        /**
         * @param status 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<ListenerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ListenerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ListenerTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedTime 监听器最近一次的操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 监听器最近一次的操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        /**
         * @param wafProtectionEnabled 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
         * 
         * @return builder
         * 
         */
        public Builder wafProtectionEnabled(@Nullable Output<String> wafProtectionEnabled) {
            $.wafProtectionEnabled = wafProtectionEnabled;
            return this;
        }

        /**
         * @param wafProtectionEnabled 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
         * 
         * @return builder
         * 
         */
        public Builder wafProtectionEnabled(String wafProtectionEnabled) {
            return wafProtectionEnabled(Output.of(wafProtectionEnabled));
        }

        public ListenerState build() {
            return $;
        }
    }

}
