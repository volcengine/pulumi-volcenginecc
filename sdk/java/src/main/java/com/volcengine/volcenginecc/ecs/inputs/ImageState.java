// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.ecs.inputs.ImageDetectionResultsArgs;
import com.volcengine.volcenginecc.ecs.inputs.ImageSnapshotArgs;
import com.volcengine.volcenginecc.ecs.inputs.ImageTagArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageState extends com.pulumi.resources.ResourceArgs {

    public static final ImageState Empty = new ImageState();

    /**
     * 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
     * 
     */
    @Import(name="architecture")
    private @Nullable Output<String> architecture;

    /**
     * @return 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
     * 
     */
    public Optional<Output<String>> architecture() {
        return Optional.ofNullable(this.architecture);
    }

    /**
     * 镜像的启动模式。可以选择BIOS、UEFI类型。
     * 
     */
    @Import(name="bootMode")
    private @Nullable Output<String> bootMode;

    /**
     * @return 镜像的启动模式。可以选择BIOS、UEFI类型。
     * 
     */
    public Optional<Output<String>> bootMode() {
        return Optional.ofNullable(this.bootMode);
    }

    /**
     * 镜像创建时间
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return 镜像创建时间
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 镜像的检测结果。
     * 
     */
    @Import(name="detectionResults")
    private @Nullable Output<ImageDetectionResultsArgs> detectionResults;

    /**
     * @return 镜像的检测结果。
     * 
     */
    public Optional<Output<ImageDetectionResultsArgs>> detectionResults() {
        return Optional.ofNullable(this.detectionResults);
    }

    /**
     * 镜像ID。
     * 
     */
    @Import(name="imageId")
    private @Nullable Output<String> imageId;

    /**
     * @return 镜像ID。
     * 
     */
    public Optional<Output<String>> imageId() {
        return Optional.ofNullable(this.imageId);
    }

    /**
     * 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
     * 
     */
    @Import(name="imageName")
    private @Nullable Output<String> imageName;

    /**
     * @return 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
     * 
     */
    public Optional<Output<String>> imageName() {
        return Optional.ofNullable(this.imageName);
    }

    /**
     * 镜像所属的账号ID。
     * 
     */
    @Import(name="imageOwnerId")
    private @Nullable Output<String> imageOwnerId;

    /**
     * @return 镜像所属的账号ID。
     * 
     */
    public Optional<Output<String>> imageOwnerId() {
        return Optional.ofNullable(this.imageOwnerId);
    }

    /**
     * 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * 镜像中是否安装了云助手Agent。
     * 
     */
    @Import(name="isInstallRunCommandAgent")
    private @Nullable Output<Boolean> isInstallRunCommandAgent;

    /**
     * @return 镜像中是否安装了云助手Agent。
     * 
     */
    public Optional<Output<Boolean>> isInstallRunCommandAgent() {
        return Optional.ofNullable(this.isInstallRunCommandAgent);
    }

    /**
     * 公共镜像是否长期维护。
     * 
     */
    @Import(name="isLts")
    private @Nullable Output<Boolean> isLts;

    /**
     * @return 公共镜像是否长期维护。
     * 
     */
    public Optional<Output<Boolean>> isLts() {
        return Optional.ofNullable(this.isLts);
    }

    /**
     * 镜像是否支持Cloud-init。
     * 
     */
    @Import(name="isSupportCloudInit")
    private @Nullable Output<Boolean> isSupportCloudInit;

    /**
     * @return 镜像是否支持Cloud-init。
     * 
     */
    public Optional<Output<Boolean>> isSupportCloudInit() {
        return Optional.ofNullable(this.isSupportCloudInit);
    }

    /**
     * 镜像的内核版本。
     * 
     */
    @Import(name="kernel")
    private @Nullable Output<String> kernel;

    /**
     * @return 镜像的内核版本。
     * 
     */
    public Optional<Output<String>> kernel() {
        return Optional.ofNullable(this.kernel);
    }

    /**
     * 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
     * 
     */
    @Import(name="licenseType")
    private @Nullable Output<String> licenseType;

    /**
     * @return 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
     * 
     */
    public Optional<Output<String>> licenseType() {
        return Optional.ofNullable(this.licenseType);
    }

    /**
     * 镜像操作系统的名称。
     * 
     */
    @Import(name="osName")
    private @Nullable Output<String> osName;

    /**
     * @return 镜像操作系统的名称。
     * 
     */
    public Optional<Output<String>> osName() {
        return Optional.ofNullable(this.osName);
    }

    /**
     * 操作系统类型。
     * 
     */
    @Import(name="osType")
    private @Nullable Output<String> osType;

    /**
     * @return 操作系统类型。
     * 
     */
    public Optional<Output<String>> osType() {
        return Optional.ofNullable(this.osType);
    }

    /**
     * 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
     * 
     */
    @Import(name="platform")
    private @Nullable Output<String> platform;

    /**
     * @return 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
     * 
     */
    public Optional<Output<String>> platform() {
        return Optional.ofNullable(this.platform);
    }

    /**
     * 镜像的发行版本。
     * 
     */
    @Import(name="platformVersion")
    private @Nullable Output<String> platformVersion;

    /**
     * @return 镜像的发行版本。
     * 
     */
    public Optional<Output<String>> platformVersion() {
        return Optional.ofNullable(this.platformVersion);
    }

    /**
     * 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 镜像共享的账户
     * 
     */
    @Import(name="sharePermissions")
    private @Nullable Output<List<String>> sharePermissions;

    /**
     * @return 镜像共享的账户
     * 
     */
    public Optional<Output<List<String>>> sharePermissions() {
        return Optional.ofNullable(this.sharePermissions);
    }

    /**
     * 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
     * 
     */
    @Import(name="shareStatus")
    private @Nullable Output<String> shareStatus;

    /**
     * @return 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
     * 
     */
    public Optional<Output<String>> shareStatus() {
        return Optional.ofNullable(this.shareStatus);
    }

    /**
     * 镜像大小，单位为GiB。
     * 
     */
    @Import(name="size")
    private @Nullable Output<Integer> size;

    /**
     * @return 镜像大小，单位为GiB。
     * 
     */
    public Optional<Output<Integer>> size() {
        return Optional.ofNullable(this.size);
    }

    /**
     * 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
     * 
     */
    @Import(name="snapshotGroupId")
    private @Nullable Output<String> snapshotGroupId;

    /**
     * @return 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
     * 
     */
    public Optional<Output<String>> snapshotGroupId() {
        return Optional.ofNullable(this.snapshotGroupId);
    }

    /**
     * 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    @Import(name="snapshots")
    private @Nullable Output<List<ImageSnapshotArgs>> snapshots;

    public Optional<Output<List<ImageSnapshotArgs>>> snapshots() {
        return Optional.ofNullable(this.snapshots);
    }

    /**
     * 镜像的状态。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 镜像的状态。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<ImageTagArgs>> tags;

    public Optional<Output<List<ImageTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 镜像更新时间
     * 
     */
    @Import(name="updatedAt")
    private @Nullable Output<String> updatedAt;

    /**
     * @return 镜像更新时间
     * 
     */
    public Optional<Output<String>> updatedAt() {
        return Optional.ofNullable(this.updatedAt);
    }

    /**
     * 镜像大小，单位为Byte。
     * 
     */
    @Import(name="virtualSize")
    private @Nullable Output<Double> virtualSize;

    /**
     * @return 镜像大小，单位为Byte。
     * 
     */
    public Optional<Output<Double>> virtualSize() {
        return Optional.ofNullable(this.virtualSize);
    }

    /**
     * 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
     * 
     */
    @Import(name="visibility")
    private @Nullable Output<String> visibility;

    /**
     * @return 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
     * 
     */
    public Optional<Output<String>> visibility() {
        return Optional.ofNullable(this.visibility);
    }

    private ImageState() {}

    private ImageState(ImageState $) {
        this.architecture = $.architecture;
        this.bootMode = $.bootMode;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.detectionResults = $.detectionResults;
        this.imageId = $.imageId;
        this.imageName = $.imageName;
        this.imageOwnerId = $.imageOwnerId;
        this.instanceId = $.instanceId;
        this.isInstallRunCommandAgent = $.isInstallRunCommandAgent;
        this.isLts = $.isLts;
        this.isSupportCloudInit = $.isSupportCloudInit;
        this.kernel = $.kernel;
        this.licenseType = $.licenseType;
        this.osName = $.osName;
        this.osType = $.osType;
        this.platform = $.platform;
        this.platformVersion = $.platformVersion;
        this.projectName = $.projectName;
        this.sharePermissions = $.sharePermissions;
        this.shareStatus = $.shareStatus;
        this.size = $.size;
        this.snapshotGroupId = $.snapshotGroupId;
        this.snapshotId = $.snapshotId;
        this.snapshots = $.snapshots;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedAt = $.updatedAt;
        this.virtualSize = $.virtualSize;
        this.visibility = $.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageState $;

        public Builder() {
            $ = new ImageState();
        }

        public Builder(ImageState defaults) {
            $ = new ImageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param architecture 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
         * 
         * @return builder
         * 
         */
        public Builder architecture(@Nullable Output<String> architecture) {
            $.architecture = architecture;
            return this;
        }

        /**
         * @param architecture 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
         * 
         * @return builder
         * 
         */
        public Builder architecture(String architecture) {
            return architecture(Output.of(architecture));
        }

        /**
         * @param bootMode 镜像的启动模式。可以选择BIOS、UEFI类型。
         * 
         * @return builder
         * 
         */
        public Builder bootMode(@Nullable Output<String> bootMode) {
            $.bootMode = bootMode;
            return this;
        }

        /**
         * @param bootMode 镜像的启动模式。可以选择BIOS、UEFI类型。
         * 
         * @return builder
         * 
         */
        public Builder bootMode(String bootMode) {
            return bootMode(Output.of(bootMode));
        }

        /**
         * @param createdAt 镜像创建时间
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt 镜像创建时间
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param detectionResults 镜像的检测结果。
         * 
         * @return builder
         * 
         */
        public Builder detectionResults(@Nullable Output<ImageDetectionResultsArgs> detectionResults) {
            $.detectionResults = detectionResults;
            return this;
        }

        /**
         * @param detectionResults 镜像的检测结果。
         * 
         * @return builder
         * 
         */
        public Builder detectionResults(ImageDetectionResultsArgs detectionResults) {
            return detectionResults(Output.of(detectionResults));
        }

        /**
         * @param imageId 镜像ID。
         * 
         * @return builder
         * 
         */
        public Builder imageId(@Nullable Output<String> imageId) {
            $.imageId = imageId;
            return this;
        }

        /**
         * @param imageId 镜像ID。
         * 
         * @return builder
         * 
         */
        public Builder imageId(String imageId) {
            return imageId(Output.of(imageId));
        }

        /**
         * @param imageName 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
         * 
         * @return builder
         * 
         */
        public Builder imageName(@Nullable Output<String> imageName) {
            $.imageName = imageName;
            return this;
        }

        /**
         * @param imageName 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
         * 
         * @return builder
         * 
         */
        public Builder imageName(String imageName) {
            return imageName(Output.of(imageName));
        }

        /**
         * @param imageOwnerId 镜像所属的账号ID。
         * 
         * @return builder
         * 
         */
        public Builder imageOwnerId(@Nullable Output<String> imageOwnerId) {
            $.imageOwnerId = imageOwnerId;
            return this;
        }

        /**
         * @param imageOwnerId 镜像所属的账号ID。
         * 
         * @return builder
         * 
         */
        public Builder imageOwnerId(String imageOwnerId) {
            return imageOwnerId(Output.of(imageOwnerId));
        }

        /**
         * @param instanceId 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param isInstallRunCommandAgent 镜像中是否安装了云助手Agent。
         * 
         * @return builder
         * 
         */
        public Builder isInstallRunCommandAgent(@Nullable Output<Boolean> isInstallRunCommandAgent) {
            $.isInstallRunCommandAgent = isInstallRunCommandAgent;
            return this;
        }

        /**
         * @param isInstallRunCommandAgent 镜像中是否安装了云助手Agent。
         * 
         * @return builder
         * 
         */
        public Builder isInstallRunCommandAgent(Boolean isInstallRunCommandAgent) {
            return isInstallRunCommandAgent(Output.of(isInstallRunCommandAgent));
        }

        /**
         * @param isLts 公共镜像是否长期维护。
         * 
         * @return builder
         * 
         */
        public Builder isLts(@Nullable Output<Boolean> isLts) {
            $.isLts = isLts;
            return this;
        }

        /**
         * @param isLts 公共镜像是否长期维护。
         * 
         * @return builder
         * 
         */
        public Builder isLts(Boolean isLts) {
            return isLts(Output.of(isLts));
        }

        /**
         * @param isSupportCloudInit 镜像是否支持Cloud-init。
         * 
         * @return builder
         * 
         */
        public Builder isSupportCloudInit(@Nullable Output<Boolean> isSupportCloudInit) {
            $.isSupportCloudInit = isSupportCloudInit;
            return this;
        }

        /**
         * @param isSupportCloudInit 镜像是否支持Cloud-init。
         * 
         * @return builder
         * 
         */
        public Builder isSupportCloudInit(Boolean isSupportCloudInit) {
            return isSupportCloudInit(Output.of(isSupportCloudInit));
        }

        /**
         * @param kernel 镜像的内核版本。
         * 
         * @return builder
         * 
         */
        public Builder kernel(@Nullable Output<String> kernel) {
            $.kernel = kernel;
            return this;
        }

        /**
         * @param kernel 镜像的内核版本。
         * 
         * @return builder
         * 
         */
        public Builder kernel(String kernel) {
            return kernel(Output.of(kernel));
        }

        /**
         * @param licenseType 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
         * 
         * @return builder
         * 
         */
        public Builder licenseType(@Nullable Output<String> licenseType) {
            $.licenseType = licenseType;
            return this;
        }

        /**
         * @param licenseType 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
         * 
         * @return builder
         * 
         */
        public Builder licenseType(String licenseType) {
            return licenseType(Output.of(licenseType));
        }

        /**
         * @param osName 镜像操作系统的名称。
         * 
         * @return builder
         * 
         */
        public Builder osName(@Nullable Output<String> osName) {
            $.osName = osName;
            return this;
        }

        /**
         * @param osName 镜像操作系统的名称。
         * 
         * @return builder
         * 
         */
        public Builder osName(String osName) {
            return osName(Output.of(osName));
        }

        /**
         * @param osType 操作系统类型。
         * 
         * @return builder
         * 
         */
        public Builder osType(@Nullable Output<String> osType) {
            $.osType = osType;
            return this;
        }

        /**
         * @param osType 操作系统类型。
         * 
         * @return builder
         * 
         */
        public Builder osType(String osType) {
            return osType(Output.of(osType));
        }

        /**
         * @param platform 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
         * 
         * @return builder
         * 
         */
        public Builder platform(@Nullable Output<String> platform) {
            $.platform = platform;
            return this;
        }

        /**
         * @param platform 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
         * 
         * @return builder
         * 
         */
        public Builder platform(String platform) {
            return platform(Output.of(platform));
        }

        /**
         * @param platformVersion 镜像的发行版本。
         * 
         * @return builder
         * 
         */
        public Builder platformVersion(@Nullable Output<String> platformVersion) {
            $.platformVersion = platformVersion;
            return this;
        }

        /**
         * @param platformVersion 镜像的发行版本。
         * 
         * @return builder
         * 
         */
        public Builder platformVersion(String platformVersion) {
            return platformVersion(Output.of(platformVersion));
        }

        /**
         * @param projectName 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param sharePermissions 镜像共享的账户
         * 
         * @return builder
         * 
         */
        public Builder sharePermissions(@Nullable Output<List<String>> sharePermissions) {
            $.sharePermissions = sharePermissions;
            return this;
        }

        /**
         * @param sharePermissions 镜像共享的账户
         * 
         * @return builder
         * 
         */
        public Builder sharePermissions(List<String> sharePermissions) {
            return sharePermissions(Output.of(sharePermissions));
        }

        /**
         * @param sharePermissions 镜像共享的账户
         * 
         * @return builder
         * 
         */
        public Builder sharePermissions(String... sharePermissions) {
            return sharePermissions(List.of(sharePermissions));
        }

        /**
         * @param shareStatus 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
         * 
         * @return builder
         * 
         */
        public Builder shareStatus(@Nullable Output<String> shareStatus) {
            $.shareStatus = shareStatus;
            return this;
        }

        /**
         * @param shareStatus 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
         * 
         * @return builder
         * 
         */
        public Builder shareStatus(String shareStatus) {
            return shareStatus(Output.of(shareStatus));
        }

        /**
         * @param size 镜像大小，单位为GiB。
         * 
         * @return builder
         * 
         */
        public Builder size(@Nullable Output<Integer> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size 镜像大小，单位为GiB。
         * 
         * @return builder
         * 
         */
        public Builder size(Integer size) {
            return size(Output.of(size));
        }

        /**
         * @param snapshotGroupId 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
         * 
         * @return builder
         * 
         */
        public Builder snapshotGroupId(@Nullable Output<String> snapshotGroupId) {
            $.snapshotGroupId = snapshotGroupId;
            return this;
        }

        /**
         * @param snapshotGroupId 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
         * 
         * @return builder
         * 
         */
        public Builder snapshotGroupId(String snapshotGroupId) {
            return snapshotGroupId(Output.of(snapshotGroupId));
        }

        /**
         * @param snapshotId 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        public Builder snapshots(@Nullable Output<List<ImageSnapshotArgs>> snapshots) {
            $.snapshots = snapshots;
            return this;
        }

        public Builder snapshots(List<ImageSnapshotArgs> snapshots) {
            return snapshots(Output.of(snapshots));
        }

        public Builder snapshots(ImageSnapshotArgs... snapshots) {
            return snapshots(List.of(snapshots));
        }

        /**
         * @param status 镜像的状态。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 镜像的状态。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<ImageTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ImageTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ImageTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedAt 镜像更新时间
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(@Nullable Output<String> updatedAt) {
            $.updatedAt = updatedAt;
            return this;
        }

        /**
         * @param updatedAt 镜像更新时间
         * 
         * @return builder
         * 
         */
        public Builder updatedAt(String updatedAt) {
            return updatedAt(Output.of(updatedAt));
        }

        /**
         * @param virtualSize 镜像大小，单位为Byte。
         * 
         * @return builder
         * 
         */
        public Builder virtualSize(@Nullable Output<Double> virtualSize) {
            $.virtualSize = virtualSize;
            return this;
        }

        /**
         * @param virtualSize 镜像大小，单位为Byte。
         * 
         * @return builder
         * 
         */
        public Builder virtualSize(Double virtualSize) {
            return virtualSize(Output.of(virtualSize));
        }

        /**
         * @param visibility 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
         * 
         * @return builder
         * 
         */
        public Builder visibility(@Nullable Output<String> visibility) {
            $.visibility = visibility;
            return this;
        }

        /**
         * @param visibility 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
         * 
         * @return builder
         * 
         */
        public Builder visibility(String visibility) {
            return visibility(Output.of(visibility));
        }

        public ImageState build() {
            return $;
        }
    }

}
