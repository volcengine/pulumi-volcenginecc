// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ark.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EndpointCertificateArgs extends com.pulumi.resources.ResourceArgs {

    public static final EndpointCertificateArgs Empty = new EndpointCertificateArgs();

    /**
     * X509私有证书过期的时间。使用秒级时间戳表示。
     * 
     */
    @Import(name="notAfter")
    private @Nullable Output<Integer> notAfter;

    /**
     * @return X509私有证书过期的时间。使用秒级时间戳表示。
     * 
     */
    public Optional<Output<Integer>> notAfter() {
        return Optional.ofNullable(this.notAfter);
    }

    /**
     * X509私有证书开始生效的时间。使用秒级时间戳表示。
     * 
     */
    @Import(name="notBefore")
    private @Nullable Output<Integer> notBefore;

    /**
     * @return X509私有证书开始生效的时间。使用秒级时间戳表示。
     * 
     */
    public Optional<Output<Integer>> notBefore() {
        return Optional.ofNullable(this.notBefore);
    }

    /**
     * 证书方。
     * 
     */
    @Import(name="pcaHost")
    private @Nullable Output<String> pcaHost;

    /**
     * @return 证书方。
     * 
     */
    public Optional<Output<String>> pcaHost() {
        return Optional.ofNullable(this.pcaHost);
    }

    /**
     * PEM 格式的叶子证书。
     * 
     */
    @Import(name="pcaInstanceCertificate")
    private @Nullable Output<String> pcaInstanceCertificate;

    /**
     * @return PEM 格式的叶子证书。
     * 
     */
    public Optional<Output<String>> pcaInstanceCertificate() {
        return Optional.ofNullable(this.pcaInstanceCertificate);
    }

    /**
     * 证书名称。
     * 
     */
    @Import(name="pcaName")
    private @Nullable Output<String> pcaName;

    /**
     * @return 证书名称。
     * 
     */
    public Optional<Output<String>> pcaName() {
        return Optional.ofNullable(this.pcaName);
    }

    /**
     * PEM 格式的根证书。
     * 
     */
    @Import(name="pcaRootCaCertificate")
    private @Nullable Output<String> pcaRootCaCertificate;

    /**
     * @return PEM 格式的根证书。
     * 
     */
    public Optional<Output<String>> pcaRootCaCertificate() {
        return Optional.ofNullable(this.pcaRootCaCertificate);
    }

    /**
     * PEM 格式的中间根证书和根证书。
     * 
     */
    @Import(name="pcaSubCaCertificate")
    private @Nullable Output<String> pcaSubCaCertificate;

    /**
     * @return PEM 格式的中间根证书和根证书。
     * 
     */
    public Optional<Output<String>> pcaSubCaCertificate() {
        return Optional.ofNullable(this.pcaSubCaCertificate);
    }

    private EndpointCertificateArgs() {}

    private EndpointCertificateArgs(EndpointCertificateArgs $) {
        this.notAfter = $.notAfter;
        this.notBefore = $.notBefore;
        this.pcaHost = $.pcaHost;
        this.pcaInstanceCertificate = $.pcaInstanceCertificate;
        this.pcaName = $.pcaName;
        this.pcaRootCaCertificate = $.pcaRootCaCertificate;
        this.pcaSubCaCertificate = $.pcaSubCaCertificate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EndpointCertificateArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EndpointCertificateArgs $;

        public Builder() {
            $ = new EndpointCertificateArgs();
        }

        public Builder(EndpointCertificateArgs defaults) {
            $ = new EndpointCertificateArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param notAfter X509私有证书过期的时间。使用秒级时间戳表示。
         * 
         * @return builder
         * 
         */
        public Builder notAfter(@Nullable Output<Integer> notAfter) {
            $.notAfter = notAfter;
            return this;
        }

        /**
         * @param notAfter X509私有证书过期的时间。使用秒级时间戳表示。
         * 
         * @return builder
         * 
         */
        public Builder notAfter(Integer notAfter) {
            return notAfter(Output.of(notAfter));
        }

        /**
         * @param notBefore X509私有证书开始生效的时间。使用秒级时间戳表示。
         * 
         * @return builder
         * 
         */
        public Builder notBefore(@Nullable Output<Integer> notBefore) {
            $.notBefore = notBefore;
            return this;
        }

        /**
         * @param notBefore X509私有证书开始生效的时间。使用秒级时间戳表示。
         * 
         * @return builder
         * 
         */
        public Builder notBefore(Integer notBefore) {
            return notBefore(Output.of(notBefore));
        }

        /**
         * @param pcaHost 证书方。
         * 
         * @return builder
         * 
         */
        public Builder pcaHost(@Nullable Output<String> pcaHost) {
            $.pcaHost = pcaHost;
            return this;
        }

        /**
         * @param pcaHost 证书方。
         * 
         * @return builder
         * 
         */
        public Builder pcaHost(String pcaHost) {
            return pcaHost(Output.of(pcaHost));
        }

        /**
         * @param pcaInstanceCertificate PEM 格式的叶子证书。
         * 
         * @return builder
         * 
         */
        public Builder pcaInstanceCertificate(@Nullable Output<String> pcaInstanceCertificate) {
            $.pcaInstanceCertificate = pcaInstanceCertificate;
            return this;
        }

        /**
         * @param pcaInstanceCertificate PEM 格式的叶子证书。
         * 
         * @return builder
         * 
         */
        public Builder pcaInstanceCertificate(String pcaInstanceCertificate) {
            return pcaInstanceCertificate(Output.of(pcaInstanceCertificate));
        }

        /**
         * @param pcaName 证书名称。
         * 
         * @return builder
         * 
         */
        public Builder pcaName(@Nullable Output<String> pcaName) {
            $.pcaName = pcaName;
            return this;
        }

        /**
         * @param pcaName 证书名称。
         * 
         * @return builder
         * 
         */
        public Builder pcaName(String pcaName) {
            return pcaName(Output.of(pcaName));
        }

        /**
         * @param pcaRootCaCertificate PEM 格式的根证书。
         * 
         * @return builder
         * 
         */
        public Builder pcaRootCaCertificate(@Nullable Output<String> pcaRootCaCertificate) {
            $.pcaRootCaCertificate = pcaRootCaCertificate;
            return this;
        }

        /**
         * @param pcaRootCaCertificate PEM 格式的根证书。
         * 
         * @return builder
         * 
         */
        public Builder pcaRootCaCertificate(String pcaRootCaCertificate) {
            return pcaRootCaCertificate(Output.of(pcaRootCaCertificate));
        }

        /**
         * @param pcaSubCaCertificate PEM 格式的中间根证书和根证书。
         * 
         * @return builder
         * 
         */
        public Builder pcaSubCaCertificate(@Nullable Output<String> pcaSubCaCertificate) {
            $.pcaSubCaCertificate = pcaSubCaCertificate;
            return this;
        }

        /**
         * @param pcaSubCaCertificate PEM 格式的中间根证书和根证书。
         * 
         * @return builder
         * 
         */
        public Builder pcaSubCaCertificate(String pcaSubCaCertificate) {
            return pcaSubCaCertificate(Output.of(pcaSubCaCertificate));
        }

        public EndpointCertificateArgs build() {
            return $;
        }
    }

}
