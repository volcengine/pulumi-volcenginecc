// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class ListenerHealthCheck {
    /**
     * @return 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
     * 
     */
    private @Nullable String domain;
    /**
     * @return 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
     * 
     */
    private @Nullable String enabled;
    /**
     * @return 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
     * 
     */
    private @Nullable String httpCode;
    /**
     * @return 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
     * 
     */
    private @Nullable String method;
    /**
     * @return 健康检查的端口，取值范围为1-65535。
     * 
     */
    private @Nullable Integer port;
    /**
     * @return 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    private @Nullable String udpExpect;
    /**
     * @return 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    private @Nullable String udpRequest;
    /**
     * @return 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    private @Nullable Integer unhealthyThreshold;
    /**
     * @return 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&amp;、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
     * 
     */
    private @Nullable String uri;

    private ListenerHealthCheck() {}
    /**
     * @return 健康检查的域名，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。需至少包含一个点号（.），且不允许以点号（.）开头或结尾。单个字符串由母、数字、中划线（-）、点号（.）字符组成，中划线（-）不得出现在字符串的头部或尾部。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为空，表示CLB使用各后端服务器的私网IP地址进行健康检查。
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return 监听器是否开启健康检查功能。on（默认值）：开启。off：不开启。
     * 
     */
    public Optional<String> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return 健康阈值，即连续健康检查成功的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return 健康检查正常的HTTP状态码。当参数Protocol取HTTP或HTTPS，且HealthCheck.Enabled取on时，参数生效。取值如下：http*2xx （默认值）、http*3xx、http*4xx、http*5xx。多个状态码间用半角逗号“,”分隔。
     * 
     */
    public Optional<String> httpCode() {
        return Optional.ofNullable(this.httpCode);
    }
    /**
     * @return 执行健康检查的时间间隔，取值范围为1 ～ 300 ，默认值为2，单位为秒。
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return 监听器健康检查的方法。GET：服务器需支持GET方法。HEAD：服务器仅返回HEAD头部信息，可以降低后端开销，但要求服务器支持HEAD方法。
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return 健康检查的端口，取值范围为1-65535。
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return 健康检查的响应超时时间，表示如果后端服务器在指定的时间内没有正确响应，则判定为健康检查“异常”。取值范围为1 ～ 60，默认值为2，单位为秒。
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return 健康检查的预期响应字符串。只允许包含字母和数字，最大长度限制为64个字符。当参数Protocol配置UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    public Optional<String> udpExpect() {
        return Optional.ofNullable(this.udpExpect);
    }
    /**
     * @return 执行健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字。当参数Protocol配置为UDP，且参数HealthCheck.Enabled配置为on时，该参数生效。参数HealthCheck.UdpRequest和HealthCheck.UdpExpect的取值只能同时为空或同时不为空。
     * 
     */
    public Optional<String> udpRequest() {
        return Optional.ofNullable(this.udpRequest);
    }
    /**
     * @return 不健康阈值，即连续健康检查失败的次数。取值范围为2 ～ 10，默认值为3，单位为次。
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }
    /**
     * @return 健康检查的路径，需配置为后端服务器上真实对外提供服务的地址。当参数Protocol取HTTP或HTTPS，HealthCheck.Enabled取on时，本参数生效。必须以字符‘/’开头。仅包含字母、数字、中划线（-）、下划线（_）、斜线/）、点号（.）、百分号（%）、英文问号（?）、#、&amp;、等号（＝）字符。长度限制为1 ～ 128个字符。不传入该参数或该参数不传入数值时，默认为“/”。
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(ListenerHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String domain;
        private @Nullable String enabled;
        private @Nullable Integer healthyThreshold;
        private @Nullable String httpCode;
        private @Nullable Integer interval;
        private @Nullable String method;
        private @Nullable Integer port;
        private @Nullable Integer timeout;
        private @Nullable String udpExpect;
        private @Nullable String udpRequest;
        private @Nullable Integer unhealthyThreshold;
        private @Nullable String uri;
        public Builder() {}
        public Builder(ListenerHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.enabled = defaults.enabled;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCode = defaults.httpCode;
    	      this.interval = defaults.interval;
    	      this.method = defaults.method;
    	      this.port = defaults.port;
    	      this.timeout = defaults.timeout;
    	      this.udpExpect = defaults.udpExpect;
    	      this.udpRequest = defaults.udpRequest;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable String enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {

            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder httpCode(@Nullable String httpCode) {

            this.httpCode = httpCode;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder udpExpect(@Nullable String udpExpect) {

            this.udpExpect = udpExpect;
            return this;
        }
        @CustomType.Setter
        public Builder udpRequest(@Nullable String udpRequest) {

            this.udpRequest = udpRequest;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {

            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        public ListenerHealthCheck build() {
            final var _resultValue = new ListenerHealthCheck();
            _resultValue.domain = domain;
            _resultValue.enabled = enabled;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.httpCode = httpCode;
            _resultValue.interval = interval;
            _resultValue.method = method;
            _resultValue.port = port;
            _resultValue.timeout = timeout;
            _resultValue.udpExpect = udpExpect;
            _resultValue.udpRequest = udpRequest;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
