// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNlbServerGroupHealthCheck {
    /**
     * @return 健康检查的域名
     * 
     */
    private String domain;
    /**
     * @return 是否开启健康检查
     * 
     */
    private Boolean enabled;
    /**
     * @return 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
     * 
     */
    private Integer healthyThreshold;
    /**
     * @return 健康检查正常的HTTP状态码
     * 
     */
    private String httpCode;
    /**
     * @return 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
     * 
     */
    private Integer interval;
    /**
     * @return 健康检查的请求方法
     * 
     */
    private String method;
    /**
     * @return 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
     * 
     */
    private Integer port;
    /**
     * @return 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
     * 
     */
    private Integer timeout;
    /**
     * @return 健康检查的协议类型
     * 
     */
    private String type;
    /**
     * @return UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
     * 
     */
    private String udpExpect;
    /**
     * @return UDP健康检查的预期响应字符串
     * 
     */
    private String udpRequest;
    /**
     * @return 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
     * 
     */
    private Integer unhealthyThreshold;
    /**
     * @return 健康检查的路径
     * 
     */
    private String uri;

    private GetNlbServerGroupHealthCheck() {}
    /**
     * @return 健康检查的域名
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return 是否开启健康检查
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
     * 
     */
    public Integer healthyThreshold() {
        return this.healthyThreshold;
    }
    /**
     * @return 健康检查正常的HTTP状态码
     * 
     */
    public String httpCode() {
        return this.httpCode;
    }
    /**
     * @return 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
     * 
     */
    public Integer interval() {
        return this.interval;
    }
    /**
     * @return 健康检查的请求方法
     * 
     */
    public String method() {
        return this.method;
    }
    /**
     * @return 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return 健康检查的协议类型
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
     * 
     */
    public String udpExpect() {
        return this.udpExpect;
    }
    /**
     * @return UDP健康检查的预期响应字符串
     * 
     */
    public String udpRequest() {
        return this.udpRequest;
    }
    /**
     * @return 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
     * 
     */
    public Integer unhealthyThreshold() {
        return this.unhealthyThreshold;
    }
    /**
     * @return 健康检查的路径
     * 
     */
    public String uri() {
        return this.uri;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNlbServerGroupHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String domain;
        private Boolean enabled;
        private Integer healthyThreshold;
        private String httpCode;
        private Integer interval;
        private String method;
        private Integer port;
        private Integer timeout;
        private String type;
        private String udpExpect;
        private String udpRequest;
        private Integer unhealthyThreshold;
        private String uri;
        public Builder() {}
        public Builder(GetNlbServerGroupHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.enabled = defaults.enabled;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCode = defaults.httpCode;
    	      this.interval = defaults.interval;
    	      this.method = defaults.method;
    	      this.port = defaults.port;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.udpExpect = defaults.udpExpect;
    	      this.udpRequest = defaults.udpRequest;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(Integer healthyThreshold) {
            if (healthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "healthyThreshold");
            }
            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder httpCode(String httpCode) {
            if (httpCode == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "httpCode");
            }
            this.httpCode = httpCode;
            return this;
        }
        @CustomType.Setter
        public Builder interval(Integer interval) {
            if (interval == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "interval");
            }
            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder method(String method) {
            if (method == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "method");
            }
            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder udpExpect(String udpExpect) {
            if (udpExpect == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "udpExpect");
            }
            this.udpExpect = udpExpect;
            return this;
        }
        @CustomType.Setter
        public Builder udpRequest(String udpRequest) {
            if (udpRequest == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "udpRequest");
            }
            this.udpRequest = udpRequest;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            if (unhealthyThreshold == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "unhealthyThreshold");
            }
            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder uri(String uri) {
            if (uri == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupHealthCheck", "uri");
            }
            this.uri = uri;
            return this;
        }
        public GetNlbServerGroupHealthCheck build() {
            final var _resultValue = new GetNlbServerGroupHealthCheck();
            _resultValue.domain = domain;
            _resultValue.enabled = enabled;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.httpCode = httpCode;
            _resultValue.interval = interval;
            _resultValue.method = method;
            _resultValue.port = port;
            _resultValue.timeout = timeout;
            _resultValue.type = type;
            _resultValue.udpExpect = udpExpect;
            _resultValue.udpRequest = udpRequest;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
