// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigTransitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigTransitionArgs Empty = new BucketLifecycleConfigTransitionArgs();

    /**
     * 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
     * 
     */
    @Import(name="date")
    private @Nullable Output<String> date;

    /**
     * @return 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
     * 
     */
    public Optional<Output<String>> date() {
        return Optional.ofNullable(this.date);
    }

    /**
     * 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
     * 
     */
    @Import(name="days")
    private @Nullable Output<Integer> days;

    /**
     * @return 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
     * 
     */
    public Optional<Output<Integer>> days() {
        return Optional.ofNullable(this.days);
    }

    /**
     * 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
     * 
     */
    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    private BucketLifecycleConfigTransitionArgs() {}

    private BucketLifecycleConfigTransitionArgs(BucketLifecycleConfigTransitionArgs $) {
        this.date = $.date;
        this.days = $.days;
        this.storageClass = $.storageClass;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigTransitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigTransitionArgs $;

        public Builder() {
            $ = new BucketLifecycleConfigTransitionArgs();
        }

        public Builder(BucketLifecycleConfigTransitionArgs defaults) {
            $ = new BucketLifecycleConfigTransitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param date 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
         * 
         * @return builder
         * 
         */
        public Builder date(@Nullable Output<String> date) {
            $.date = date;
            return this;
        }

        /**
         * @param date 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
         * 
         * @return builder
         * 
         */
        public Builder date(String date) {
            return date(Output.of(date));
        }

        /**
         * @param days 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
         * 
         * @return builder
         * 
         */
        public Builder days(@Nullable Output<Integer> days) {
            $.days = days;
            return this;
        }

        /**
         * @param days 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
         * 
         * @return builder
         * 
         */
        public Builder days(Integer days) {
            return days(Output.of(days));
        }

        /**
         * @param storageClass 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
         * 
         * @return builder
         * 
         */
        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public BucketLifecycleConfigTransitionArgs build() {
            return $;
        }
    }

}
