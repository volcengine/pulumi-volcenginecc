// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ecs.outputs.GetImageDetectionResults;
import com.volcengine.volcenginecc.ecs.outputs.GetImageSnapshot;
import com.volcengine.volcenginecc.ecs.outputs.GetImageTag;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetImageResult {
    /**
     * @return 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
     * 
     */
    private String architecture;
    /**
     * @return 镜像的启动模式。可以选择BIOS、UEFI类型。
     * 
     */
    private String bootMode;
    /**
     * @return 镜像创建时间
     * 
     */
    private String createdAt;
    /**
     * @return 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
     * 
     */
    private String description;
    /**
     * @return 镜像的检测结果。
     * 
     */
    private GetImageDetectionResults detectionResults;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 镜像ID。
     * 
     */
    private String imageId;
    /**
     * @return 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
     * 
     */
    private String imageName;
    /**
     * @return 镜像所属的账号ID。
     * 
     */
    private String imageOwnerId;
    /**
     * @return 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
     * 
     */
    private String instanceId;
    /**
     * @return 镜像中是否安装了云助手Agent。
     * 
     */
    private Boolean isInstallRunCommandAgent;
    /**
     * @return 公共镜像是否长期维护。
     * 
     */
    private Boolean isLts;
    /**
     * @return 镜像是否支持Cloud-init。
     * 
     */
    private Boolean isSupportCloudInit;
    /**
     * @return 镜像的内核版本。
     * 
     */
    private String kernel;
    /**
     * @return 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
     * 
     */
    private String licenseType;
    /**
     * @return 镜像操作系统的名称。
     * 
     */
    private String osName;
    /**
     * @return 操作系统类型。
     * 
     */
    private String osType;
    /**
     * @return 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
     * 
     */
    private String platform;
    /**
     * @return 镜像的发行版本。
     * 
     */
    private String platformVersion;
    /**
     * @return 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
     * 
     */
    private String projectName;
    /**
     * @return 镜像共享的账户
     * 
     */
    private List<String> sharePermissions;
    /**
     * @return 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
     * 
     */
    private String shareStatus;
    /**
     * @return 镜像大小，单位为GiB。
     * 
     */
    private Integer size;
    /**
     * @return 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
     * 
     */
    private String snapshotGroupId;
    /**
     * @return 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
     * 
     */
    private String snapshotId;
    /**
     * @return 镜像关联快照的信息。
     * 
     */
    private List<GetImageSnapshot> snapshots;
    /**
     * @return 镜像的状态。
     * 
     */
    private String status;
    /**
     * @return 镜像绑定的标签列表。
     * 
     */
    private List<GetImageTag> tags;
    /**
     * @return 镜像更新时间
     * 
     */
    private String updatedAt;
    /**
     * @return 镜像大小，单位为Byte。
     * 
     */
    private Double virtualSize;
    /**
     * @return 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
     * 
     */
    private String visibility;

    private GetImageResult() {}
    /**
     * @return 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
     * 
     */
    public String architecture() {
        return this.architecture;
    }
    /**
     * @return 镜像的启动模式。可以选择BIOS、UEFI类型。
     * 
     */
    public String bootMode() {
        return this.bootMode;
    }
    /**
     * @return 镜像创建时间
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 镜像的检测结果。
     * 
     */
    public GetImageDetectionResults detectionResults() {
        return this.detectionResults;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 镜像ID。
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
     * 
     */
    public String imageName() {
        return this.imageName;
    }
    /**
     * @return 镜像所属的账号ID。
     * 
     */
    public String imageOwnerId() {
        return this.imageOwnerId;
    }
    /**
     * @return 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 镜像中是否安装了云助手Agent。
     * 
     */
    public Boolean isInstallRunCommandAgent() {
        return this.isInstallRunCommandAgent;
    }
    /**
     * @return 公共镜像是否长期维护。
     * 
     */
    public Boolean isLts() {
        return this.isLts;
    }
    /**
     * @return 镜像是否支持Cloud-init。
     * 
     */
    public Boolean isSupportCloudInit() {
        return this.isSupportCloudInit;
    }
    /**
     * @return 镜像的内核版本。
     * 
     */
    public String kernel() {
        return this.kernel;
    }
    /**
     * @return 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
     * 
     */
    public String licenseType() {
        return this.licenseType;
    }
    /**
     * @return 镜像操作系统的名称。
     * 
     */
    public String osName() {
        return this.osName;
    }
    /**
     * @return 操作系统类型。
     * 
     */
    public String osType() {
        return this.osType;
    }
    /**
     * @return 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
     * 
     */
    public String platform() {
        return this.platform;
    }
    /**
     * @return 镜像的发行版本。
     * 
     */
    public String platformVersion() {
        return this.platformVersion;
    }
    /**
     * @return 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 镜像共享的账户
     * 
     */
    public List<String> sharePermissions() {
        return this.sharePermissions;
    }
    /**
     * @return 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
     * 
     */
    public String shareStatus() {
        return this.shareStatus;
    }
    /**
     * @return 镜像大小，单位为GiB。
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
     * 
     */
    public String snapshotGroupId() {
        return this.snapshotGroupId;
    }
    /**
     * @return 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return 镜像关联快照的信息。
     * 
     */
    public List<GetImageSnapshot> snapshots() {
        return this.snapshots;
    }
    /**
     * @return 镜像的状态。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 镜像绑定的标签列表。
     * 
     */
    public List<GetImageTag> tags() {
        return this.tags;
    }
    /**
     * @return 镜像更新时间
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return 镜像大小，单位为Byte。
     * 
     */
    public Double virtualSize() {
        return this.virtualSize;
    }
    /**
     * @return 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
     * 
     */
    public String visibility() {
        return this.visibility;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetImageResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String architecture;
        private String bootMode;
        private String createdAt;
        private String description;
        private GetImageDetectionResults detectionResults;
        private String id;
        private String imageId;
        private String imageName;
        private String imageOwnerId;
        private String instanceId;
        private Boolean isInstallRunCommandAgent;
        private Boolean isLts;
        private Boolean isSupportCloudInit;
        private String kernel;
        private String licenseType;
        private String osName;
        private String osType;
        private String platform;
        private String platformVersion;
        private String projectName;
        private List<String> sharePermissions;
        private String shareStatus;
        private Integer size;
        private String snapshotGroupId;
        private String snapshotId;
        private List<GetImageSnapshot> snapshots;
        private String status;
        private List<GetImageTag> tags;
        private String updatedAt;
        private Double virtualSize;
        private String visibility;
        public Builder() {}
        public Builder(GetImageResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.architecture = defaults.architecture;
    	      this.bootMode = defaults.bootMode;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.detectionResults = defaults.detectionResults;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.imageName = defaults.imageName;
    	      this.imageOwnerId = defaults.imageOwnerId;
    	      this.instanceId = defaults.instanceId;
    	      this.isInstallRunCommandAgent = defaults.isInstallRunCommandAgent;
    	      this.isLts = defaults.isLts;
    	      this.isSupportCloudInit = defaults.isSupportCloudInit;
    	      this.kernel = defaults.kernel;
    	      this.licenseType = defaults.licenseType;
    	      this.osName = defaults.osName;
    	      this.osType = defaults.osType;
    	      this.platform = defaults.platform;
    	      this.platformVersion = defaults.platformVersion;
    	      this.projectName = defaults.projectName;
    	      this.sharePermissions = defaults.sharePermissions;
    	      this.shareStatus = defaults.shareStatus;
    	      this.size = defaults.size;
    	      this.snapshotGroupId = defaults.snapshotGroupId;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshots = defaults.snapshots;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedAt = defaults.updatedAt;
    	      this.virtualSize = defaults.virtualSize;
    	      this.visibility = defaults.visibility;
        }

        @CustomType.Setter
        public Builder architecture(String architecture) {
            if (architecture == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "architecture");
            }
            this.architecture = architecture;
            return this;
        }
        @CustomType.Setter
        public Builder bootMode(String bootMode) {
            if (bootMode == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "bootMode");
            }
            this.bootMode = bootMode;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder detectionResults(GetImageDetectionResults detectionResults) {
            if (detectionResults == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "detectionResults");
            }
            this.detectionResults = detectionResults;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder imageName(String imageName) {
            if (imageName == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageName");
            }
            this.imageName = imageName;
            return this;
        }
        @CustomType.Setter
        public Builder imageOwnerId(String imageOwnerId) {
            if (imageOwnerId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "imageOwnerId");
            }
            this.imageOwnerId = imageOwnerId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder isInstallRunCommandAgent(Boolean isInstallRunCommandAgent) {
            if (isInstallRunCommandAgent == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "isInstallRunCommandAgent");
            }
            this.isInstallRunCommandAgent = isInstallRunCommandAgent;
            return this;
        }
        @CustomType.Setter
        public Builder isLts(Boolean isLts) {
            if (isLts == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "isLts");
            }
            this.isLts = isLts;
            return this;
        }
        @CustomType.Setter
        public Builder isSupportCloudInit(Boolean isSupportCloudInit) {
            if (isSupportCloudInit == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "isSupportCloudInit");
            }
            this.isSupportCloudInit = isSupportCloudInit;
            return this;
        }
        @CustomType.Setter
        public Builder kernel(String kernel) {
            if (kernel == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "kernel");
            }
            this.kernel = kernel;
            return this;
        }
        @CustomType.Setter
        public Builder licenseType(String licenseType) {
            if (licenseType == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "licenseType");
            }
            this.licenseType = licenseType;
            return this;
        }
        @CustomType.Setter
        public Builder osName(String osName) {
            if (osName == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "osName");
            }
            this.osName = osName;
            return this;
        }
        @CustomType.Setter
        public Builder osType(String osType) {
            if (osType == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "osType");
            }
            this.osType = osType;
            return this;
        }
        @CustomType.Setter
        public Builder platform(String platform) {
            if (platform == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "platform");
            }
            this.platform = platform;
            return this;
        }
        @CustomType.Setter
        public Builder platformVersion(String platformVersion) {
            if (platformVersion == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "platformVersion");
            }
            this.platformVersion = platformVersion;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder sharePermissions(List<String> sharePermissions) {
            if (sharePermissions == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "sharePermissions");
            }
            this.sharePermissions = sharePermissions;
            return this;
        }
        public Builder sharePermissions(String... sharePermissions) {
            return sharePermissions(List.of(sharePermissions));
        }
        @CustomType.Setter
        public Builder shareStatus(String shareStatus) {
            if (shareStatus == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "shareStatus");
            }
            this.shareStatus = shareStatus;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotGroupId(String snapshotGroupId) {
            if (snapshotGroupId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "snapshotGroupId");
            }
            this.snapshotGroupId = snapshotGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder snapshots(List<GetImageSnapshot> snapshots) {
            if (snapshots == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "snapshots");
            }
            this.snapshots = snapshots;
            return this;
        }
        public Builder snapshots(GetImageSnapshot... snapshots) {
            return snapshots(List.of(snapshots));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetImageTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetImageTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder virtualSize(Double virtualSize) {
            if (virtualSize == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "virtualSize");
            }
            this.virtualSize = virtualSize;
            return this;
        }
        @CustomType.Setter
        public Builder visibility(String visibility) {
            if (visibility == null) {
              throw new MissingRequiredPropertyException("GetImageResult", "visibility");
            }
            this.visibility = visibility;
            return this;
        }
        public GetImageResult build() {
            final var _resultValue = new GetImageResult();
            _resultValue.architecture = architecture;
            _resultValue.bootMode = bootMode;
            _resultValue.createdAt = createdAt;
            _resultValue.description = description;
            _resultValue.detectionResults = detectionResults;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.imageName = imageName;
            _resultValue.imageOwnerId = imageOwnerId;
            _resultValue.instanceId = instanceId;
            _resultValue.isInstallRunCommandAgent = isInstallRunCommandAgent;
            _resultValue.isLts = isLts;
            _resultValue.isSupportCloudInit = isSupportCloudInit;
            _resultValue.kernel = kernel;
            _resultValue.licenseType = licenseType;
            _resultValue.osName = osName;
            _resultValue.osType = osType;
            _resultValue.platform = platform;
            _resultValue.platformVersion = platformVersion;
            _resultValue.projectName = projectName;
            _resultValue.sharePermissions = sharePermissions;
            _resultValue.shareStatus = shareStatus;
            _resultValue.size = size;
            _resultValue.snapshotGroupId = snapshotGroupId;
            _resultValue.snapshotId = snapshotId;
            _resultValue.snapshots = snapshots;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedAt = updatedAt;
            _resultValue.virtualSize = virtualSize;
            _resultValue.visibility = visibility;
            return _resultValue;
        }
    }
}
