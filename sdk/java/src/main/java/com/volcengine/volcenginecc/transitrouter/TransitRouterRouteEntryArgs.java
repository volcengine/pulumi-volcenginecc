// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.transitrouter;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouterRouteEntryArgs extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouterRouteEntryArgs Empty = new TransitRouterRouteEntryArgs();

    /**
     * TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 路由条目的目标网段。
     * 
     */
    @Import(name="destinationCidrBlock", required=true)
    private Output<String> destinationCidrBlock;

    /**
     * @return 路由条目的目标网段。
     * 
     */
    public Output<String> destinationCidrBlock() {
        return this.destinationCidrBlock;
    }

    /**
     * 路由条目的名称。
     * 
     */
    @Import(name="transitRouterRouteEntryName")
    private @Nullable Output<String> transitRouterRouteEntryName;

    /**
     * @return 路由条目的名称。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryName() {
        return Optional.ofNullable(this.transitRouterRouteEntryName);
    }

    /**
     * 路由条目的下一跳ID。
     * 
     */
    @Import(name="transitRouterRouteEntryNextHopId")
    private @Nullable Output<String> transitRouterRouteEntryNextHopId;

    /**
     * @return 路由条目的下一跳ID。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryNextHopId() {
        return Optional.ofNullable(this.transitRouterRouteEntryNextHopId);
    }

    /**
     * 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
     * 
     */
    @Import(name="transitRouterRouteEntryNextHopType", required=true)
    private Output<String> transitRouterRouteEntryNextHopType;

    /**
     * @return 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
     * 
     */
    public Output<String> transitRouterRouteEntryNextHopType() {
        return this.transitRouterRouteEntryNextHopType;
    }

    /**
     * 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
     * 
     */
    @Import(name="transitRouterRouteEntryType")
    private @Nullable Output<String> transitRouterRouteEntryType;

    /**
     * @return 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryType() {
        return Optional.ofNullable(this.transitRouterRouteEntryType);
    }

    /**
     * 中转路由器实例关联的路由表的ID。
     * 
     */
    @Import(name="transitRouterRouteTableId", required=true)
    private Output<String> transitRouterRouteTableId;

    /**
     * @return 中转路由器实例关联的路由表的ID。
     * 
     */
    public Output<String> transitRouterRouteTableId() {
        return this.transitRouterRouteTableId;
    }

    private TransitRouterRouteEntryArgs() {}

    private TransitRouterRouteEntryArgs(TransitRouterRouteEntryArgs $) {
        this.description = $.description;
        this.destinationCidrBlock = $.destinationCidrBlock;
        this.transitRouterRouteEntryName = $.transitRouterRouteEntryName;
        this.transitRouterRouteEntryNextHopId = $.transitRouterRouteEntryNextHopId;
        this.transitRouterRouteEntryNextHopType = $.transitRouterRouteEntryNextHopType;
        this.transitRouterRouteEntryType = $.transitRouterRouteEntryType;
        this.transitRouterRouteTableId = $.transitRouterRouteTableId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouterRouteEntryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouterRouteEntryArgs $;

        public Builder() {
            $ = new TransitRouterRouteEntryArgs();
        }

        public Builder(TransitRouterRouteEntryArgs defaults) {
            $ = new TransitRouterRouteEntryArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationCidrBlock 路由条目的目标网段。
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(Output<String> destinationCidrBlock) {
            $.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        /**
         * @param destinationCidrBlock 路由条目的目标网段。
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(String destinationCidrBlock) {
            return destinationCidrBlock(Output.of(destinationCidrBlock));
        }

        /**
         * @param transitRouterRouteEntryName 路由条目的名称。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryName(@Nullable Output<String> transitRouterRouteEntryName) {
            $.transitRouterRouteEntryName = transitRouterRouteEntryName;
            return this;
        }

        /**
         * @param transitRouterRouteEntryName 路由条目的名称。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryName(String transitRouterRouteEntryName) {
            return transitRouterRouteEntryName(Output.of(transitRouterRouteEntryName));
        }

        /**
         * @param transitRouterRouteEntryNextHopId 路由条目的下一跳ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopId(@Nullable Output<String> transitRouterRouteEntryNextHopId) {
            $.transitRouterRouteEntryNextHopId = transitRouterRouteEntryNextHopId;
            return this;
        }

        /**
         * @param transitRouterRouteEntryNextHopId 路由条目的下一跳ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopId(String transitRouterRouteEntryNextHopId) {
            return transitRouterRouteEntryNextHopId(Output.of(transitRouterRouteEntryNextHopId));
        }

        /**
         * @param transitRouterRouteEntryNextHopType 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopType(Output<String> transitRouterRouteEntryNextHopType) {
            $.transitRouterRouteEntryNextHopType = transitRouterRouteEntryNextHopType;
            return this;
        }

        /**
         * @param transitRouterRouteEntryNextHopType 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopType(String transitRouterRouteEntryNextHopType) {
            return transitRouterRouteEntryNextHopType(Output.of(transitRouterRouteEntryNextHopType));
        }

        /**
         * @param transitRouterRouteEntryType 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryType(@Nullable Output<String> transitRouterRouteEntryType) {
            $.transitRouterRouteEntryType = transitRouterRouteEntryType;
            return this;
        }

        /**
         * @param transitRouterRouteEntryType 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryType(String transitRouterRouteEntryType) {
            return transitRouterRouteEntryType(Output.of(transitRouterRouteEntryType));
        }

        /**
         * @param transitRouterRouteTableId 中转路由器实例关联的路由表的ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(Output<String> transitRouterRouteTableId) {
            $.transitRouterRouteTableId = transitRouterRouteTableId;
            return this;
        }

        /**
         * @param transitRouterRouteTableId 中转路由器实例关联的路由表的ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(String transitRouterRouteTableId) {
            return transitRouterRouteTableId(Output.of(transitRouterRouteTableId));
        }

        public TransitRouterRouteEntryArgs build() {
            if ($.destinationCidrBlock == null) {
                throw new MissingRequiredPropertyException("TransitRouterRouteEntryArgs", "destinationCidrBlock");
            }
            if ($.transitRouterRouteEntryNextHopType == null) {
                throw new MissingRequiredPropertyException("TransitRouterRouteEntryArgs", "transitRouterRouteEntryNextHopType");
            }
            if ($.transitRouterRouteTableId == null) {
                throw new MissingRequiredPropertyException("TransitRouterRouteEntryArgs", "transitRouterRouteTableId");
            }
            return $;
        }
    }

}
