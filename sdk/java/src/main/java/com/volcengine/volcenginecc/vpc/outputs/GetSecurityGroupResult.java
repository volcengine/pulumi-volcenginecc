// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetSecurityGroupEgressPermission;
import com.volcengine.volcenginecc.vpc.outputs.GetSecurityGroupIngressPermission;
import com.volcengine.volcenginecc.vpc.outputs.GetSecurityGroupTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityGroupResult {
    /**
     * @return 安全组创建时间。
     * 
     */
    private String creationTime;
    /**
     * @return 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
     * 
     */
    private String description;
    /**
     * @return 安全组出向规则描述信息。未改动的信息按照原信息返回，未填或者变动的内容视为修改，请按需填写。
     * 
     */
    private List<GetSecurityGroupEgressPermission> egressPermissions;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 安全组入向规则描述信息。未改动的信息按照原信息返回，未填或者变动的内容视为修改，请按需填写。
     * 
     */
    private List<GetSecurityGroupIngressPermission> ingressPermissions;
    /**
     * @return 安全组所属项目名称。不填默认项目为default。
     * 
     */
    private String projectName;
    /**
     * @return 安全组ID。
     * 
     */
    private String securityGroupId;
    /**
     * @return 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
     * 
     */
    private String securityGroupName;
    /**
     * @return 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
     * 
     */
    private Boolean serviceManaged;
    /**
     * @return 安全组状态。Available为可用，Creating为创建中。
     * 
     */
    private String status;
    private List<GetSecurityGroupTag> tags;
    /**
     * @return 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
     * 
     */
    private String type;
    /**
     * @return 安全组所属的VPC ID。
     * 
     */
    private String vpcId;

    private GetSecurityGroupResult() {}
    /**
     * @return 安全组创建时间。
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 安全组出向规则描述信息。未改动的信息按照原信息返回，未填或者变动的内容视为修改，请按需填写。
     * 
     */
    public List<GetSecurityGroupEgressPermission> egressPermissions() {
        return this.egressPermissions;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 安全组入向规则描述信息。未改动的信息按照原信息返回，未填或者变动的内容视为修改，请按需填写。
     * 
     */
    public List<GetSecurityGroupIngressPermission> ingressPermissions() {
        return this.ingressPermissions;
    }
    /**
     * @return 安全组所属项目名称。不填默认项目为default。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 安全组ID。
     * 
     */
    public String securityGroupId() {
        return this.securityGroupId;
    }
    /**
     * @return 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
     * 
     */
    public String securityGroupName() {
        return this.securityGroupName;
    }
    /**
     * @return 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
     * 
     */
    public Boolean serviceManaged() {
        return this.serviceManaged;
    }
    /**
     * @return 安全组状态。Available为可用，Creating为创建中。
     * 
     */
    public String status() {
        return this.status;
    }
    public List<GetSecurityGroupTag> tags() {
        return this.tags;
    }
    /**
     * @return 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return 安全组所属的VPC ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String creationTime;
        private String description;
        private List<GetSecurityGroupEgressPermission> egressPermissions;
        private String id;
        private List<GetSecurityGroupIngressPermission> ingressPermissions;
        private String projectName;
        private String securityGroupId;
        private String securityGroupName;
        private Boolean serviceManaged;
        private String status;
        private List<GetSecurityGroupTag> tags;
        private String type;
        private String vpcId;
        public Builder() {}
        public Builder(GetSecurityGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.egressPermissions = defaults.egressPermissions;
    	      this.id = defaults.id;
    	      this.ingressPermissions = defaults.ingressPermissions;
    	      this.projectName = defaults.projectName;
    	      this.securityGroupId = defaults.securityGroupId;
    	      this.securityGroupName = defaults.securityGroupName;
    	      this.serviceManaged = defaults.serviceManaged;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder egressPermissions(List<GetSecurityGroupEgressPermission> egressPermissions) {
            if (egressPermissions == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "egressPermissions");
            }
            this.egressPermissions = egressPermissions;
            return this;
        }
        public Builder egressPermissions(GetSecurityGroupEgressPermission... egressPermissions) {
            return egressPermissions(List.of(egressPermissions));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ingressPermissions(List<GetSecurityGroupIngressPermission> ingressPermissions) {
            if (ingressPermissions == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "ingressPermissions");
            }
            this.ingressPermissions = ingressPermissions;
            return this;
        }
        public Builder ingressPermissions(GetSecurityGroupIngressPermission... ingressPermissions) {
            return ingressPermissions(List.of(ingressPermissions));
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupId(String securityGroupId) {
            if (securityGroupId == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "securityGroupId");
            }
            this.securityGroupId = securityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupName(String securityGroupName) {
            if (securityGroupName == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "securityGroupName");
            }
            this.securityGroupName = securityGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceManaged(Boolean serviceManaged) {
            if (serviceManaged == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "serviceManaged");
            }
            this.serviceManaged = serviceManaged;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetSecurityGroupTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetSecurityGroupTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetSecurityGroupResult build() {
            final var _resultValue = new GetSecurityGroupResult();
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.egressPermissions = egressPermissions;
            _resultValue.id = id;
            _resultValue.ingressPermissions = ingressPermissions;
            _resultValue.projectName = projectName;
            _resultValue.securityGroupId = securityGroupId;
            _resultValue.securityGroupName = securityGroupName;
            _resultValue.serviceManaged = serviceManaged;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
