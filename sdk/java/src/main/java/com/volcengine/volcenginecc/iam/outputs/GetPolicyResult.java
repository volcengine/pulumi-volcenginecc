// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.iam.outputs.GetPolicyPolicyRole;
import com.volcengine.volcenginecc.iam.outputs.GetPolicyPolicyUser;
import com.volcengine.volcenginecc.iam.outputs.GetPolicyPolicyUserGroup;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetPolicyResult {
    /**
     * @return 策略绑定的身份数量。
     * 
     */
    private Integer attachmentCount;
    /**
     * @return 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     * 
     */
    private String category;
    /**
     * @return 策略创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 策略描述，长度不超过128。
     * 
     */
    private String description;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 是否是服务关联角色的策略，0代表否，1代表是。
     * 
     */
    private Integer isServiceRolePolicy;
    /**
     * @return 策略语法内容，例如：{&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;iam:&#34;,&#34;tag:&#34;],&#34;Resource&#34;:[&#34;*&#34;]}]}
     * 
     */
    private String policyDocument;
    /**
     * @return 策略名，长度1~64，支持英文、数字和+=,.{@literal @}-_符号。
     * 
     */
    private String policyName;
    /**
     * @return 策略绑定的角色列表。
     * 
     */
    private List<GetPolicyPolicyRole> policyRoles;
    /**
     * @return 策略的TRN。
     * 
     */
    private String policyTrn;
    /**
     * @return 策略类型。System代表系统预设策略，Custom代表自定义策略。
     * 
     */
    private String policyType;
    /**
     * @return 策略绑定的用户组列表。
     * 
     */
    private List<GetPolicyPolicyUserGroup> policyUserGroups;
    /**
     * @return 策略绑定的用户列表。
     * 
     */
    private List<GetPolicyPolicyUser> policyUsers;
    /**
     * @return 策略更新时间。
     * 
     */
    private String updatedTime;

    private GetPolicyResult() {}
    /**
     * @return 策略绑定的身份数量。
     * 
     */
    public Integer attachmentCount() {
        return this.attachmentCount;
    }
    /**
     * @return 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     * 
     */
    public String category() {
        return this.category;
    }
    /**
     * @return 策略创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 策略描述，长度不超过128。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 是否是服务关联角色的策略，0代表否，1代表是。
     * 
     */
    public Integer isServiceRolePolicy() {
        return this.isServiceRolePolicy;
    }
    /**
     * @return 策略语法内容，例如：{&#34;Statement&#34;:[{&#34;Effect&#34;:&#34;Allow&#34;,&#34;Action&#34;:[&#34;iam:&#34;,&#34;tag:&#34;],&#34;Resource&#34;:[&#34;*&#34;]}]}
     * 
     */
    public String policyDocument() {
        return this.policyDocument;
    }
    /**
     * @return 策略名，长度1~64，支持英文、数字和+=,.{@literal @}-_符号。
     * 
     */
    public String policyName() {
        return this.policyName;
    }
    /**
     * @return 策略绑定的角色列表。
     * 
     */
    public List<GetPolicyPolicyRole> policyRoles() {
        return this.policyRoles;
    }
    /**
     * @return 策略的TRN。
     * 
     */
    public String policyTrn() {
        return this.policyTrn;
    }
    /**
     * @return 策略类型。System代表系统预设策略，Custom代表自定义策略。
     * 
     */
    public String policyType() {
        return this.policyType;
    }
    /**
     * @return 策略绑定的用户组列表。
     * 
     */
    public List<GetPolicyPolicyUserGroup> policyUserGroups() {
        return this.policyUserGroups;
    }
    /**
     * @return 策略绑定的用户列表。
     * 
     */
    public List<GetPolicyPolicyUser> policyUsers() {
        return this.policyUsers;
    }
    /**
     * @return 策略更新时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetPolicyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer attachmentCount;
        private String category;
        private String createdTime;
        private String description;
        private String id;
        private Integer isServiceRolePolicy;
        private String policyDocument;
        private String policyName;
        private List<GetPolicyPolicyRole> policyRoles;
        private String policyTrn;
        private String policyType;
        private List<GetPolicyPolicyUserGroup> policyUserGroups;
        private List<GetPolicyPolicyUser> policyUsers;
        private String updatedTime;
        public Builder() {}
        public Builder(GetPolicyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.attachmentCount = defaults.attachmentCount;
    	      this.category = defaults.category;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.isServiceRolePolicy = defaults.isServiceRolePolicy;
    	      this.policyDocument = defaults.policyDocument;
    	      this.policyName = defaults.policyName;
    	      this.policyRoles = defaults.policyRoles;
    	      this.policyTrn = defaults.policyTrn;
    	      this.policyType = defaults.policyType;
    	      this.policyUserGroups = defaults.policyUserGroups;
    	      this.policyUsers = defaults.policyUsers;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder attachmentCount(Integer attachmentCount) {
            if (attachmentCount == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "attachmentCount");
            }
            this.attachmentCount = attachmentCount;
            return this;
        }
        @CustomType.Setter
        public Builder category(String category) {
            if (category == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "category");
            }
            this.category = category;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isServiceRolePolicy(Integer isServiceRolePolicy) {
            if (isServiceRolePolicy == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "isServiceRolePolicy");
            }
            this.isServiceRolePolicy = isServiceRolePolicy;
            return this;
        }
        @CustomType.Setter
        public Builder policyDocument(String policyDocument) {
            if (policyDocument == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyDocument");
            }
            this.policyDocument = policyDocument;
            return this;
        }
        @CustomType.Setter
        public Builder policyName(String policyName) {
            if (policyName == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyName");
            }
            this.policyName = policyName;
            return this;
        }
        @CustomType.Setter
        public Builder policyRoles(List<GetPolicyPolicyRole> policyRoles) {
            if (policyRoles == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyRoles");
            }
            this.policyRoles = policyRoles;
            return this;
        }
        public Builder policyRoles(GetPolicyPolicyRole... policyRoles) {
            return policyRoles(List.of(policyRoles));
        }
        @CustomType.Setter
        public Builder policyTrn(String policyTrn) {
            if (policyTrn == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyTrn");
            }
            this.policyTrn = policyTrn;
            return this;
        }
        @CustomType.Setter
        public Builder policyType(String policyType) {
            if (policyType == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyType");
            }
            this.policyType = policyType;
            return this;
        }
        @CustomType.Setter
        public Builder policyUserGroups(List<GetPolicyPolicyUserGroup> policyUserGroups) {
            if (policyUserGroups == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyUserGroups");
            }
            this.policyUserGroups = policyUserGroups;
            return this;
        }
        public Builder policyUserGroups(GetPolicyPolicyUserGroup... policyUserGroups) {
            return policyUserGroups(List.of(policyUserGroups));
        }
        @CustomType.Setter
        public Builder policyUsers(List<GetPolicyPolicyUser> policyUsers) {
            if (policyUsers == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "policyUsers");
            }
            this.policyUsers = policyUsers;
            return this;
        }
        public Builder policyUsers(GetPolicyPolicyUser... policyUsers) {
            return policyUsers(List.of(policyUsers));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetPolicyResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetPolicyResult build() {
            final var _resultValue = new GetPolicyResult();
            _resultValue.attachmentCount = attachmentCount;
            _resultValue.category = category;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.isServiceRolePolicy = isServiceRolePolicy;
            _resultValue.policyDocument = policyDocument;
            _resultValue.policyName = policyName;
            _resultValue.policyRoles = policyRoles;
            _resultValue.policyTrn = policyTrn;
            _resultValue.policyType = policyType;
            _resultValue.policyUserGroups = policyUserGroups;
            _resultValue.policyUsers = policyUsers;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
