// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vmp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceQuotaArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceQuotaArgs Empty = new WorkspaceQuotaArgs();

    /**
     * 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
     * 
     */
    @Import(name="activeSeries")
    private @Nullable Output<Integer> activeSeries;

    /**
     * @return 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
     * 
     */
    public Optional<Output<Integer>> activeSeries() {
        return Optional.ofNullable(this.activeSeries);
    }

    /**
     * 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
     * 
     */
    @Import(name="ingestSamplesPerSecond")
    private @Nullable Output<Integer> ingestSamplesPerSecond;

    /**
     * @return 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
     * 
     */
    public Optional<Output<Integer>> ingestSamplesPerSecond() {
        return Optional.ofNullable(this.ingestSamplesPerSecond);
    }

    /**
     * 最大查询 QPS。整数形式，默认取值范围为 1～500。
     * 
     */
    @Import(name="queryPerSecond")
    private @Nullable Output<Integer> queryPerSecond;

    /**
     * @return 最大查询 QPS。整数形式，默认取值范围为 1～500。
     * 
     */
    public Optional<Output<Integer>> queryPerSecond() {
        return Optional.ofNullable(this.queryPerSecond);
    }

    /**
     * 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
     * 
     */
    @Import(name="scanSamplesPerSecond")
    private @Nullable Output<Integer> scanSamplesPerSecond;

    /**
     * @return 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
     * 
     */
    public Optional<Output<Integer>> scanSamplesPerSecond() {
        return Optional.ofNullable(this.scanSamplesPerSecond);
    }

    /**
     * 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
     * 
     */
    @Import(name="scanSeriesPerSecond")
    private @Nullable Output<Integer> scanSeriesPerSecond;

    /**
     * @return 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
     * 
     */
    public Optional<Output<Integer>> scanSeriesPerSecond() {
        return Optional.ofNullable(this.scanSeriesPerSecond);
    }

    private WorkspaceQuotaArgs() {}

    private WorkspaceQuotaArgs(WorkspaceQuotaArgs $) {
        this.activeSeries = $.activeSeries;
        this.ingestSamplesPerSecond = $.ingestSamplesPerSecond;
        this.queryPerSecond = $.queryPerSecond;
        this.scanSamplesPerSecond = $.scanSamplesPerSecond;
        this.scanSeriesPerSecond = $.scanSeriesPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceQuotaArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceQuotaArgs $;

        public Builder() {
            $ = new WorkspaceQuotaArgs();
        }

        public Builder(WorkspaceQuotaArgs defaults) {
            $ = new WorkspaceQuotaArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeSeries 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
         * 
         * @return builder
         * 
         */
        public Builder activeSeries(@Nullable Output<Integer> activeSeries) {
            $.activeSeries = activeSeries;
            return this;
        }

        /**
         * @param activeSeries 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
         * 
         * @return builder
         * 
         */
        public Builder activeSeries(Integer activeSeries) {
            return activeSeries(Output.of(activeSeries));
        }

        /**
         * @param ingestSamplesPerSecond 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
         * 
         * @return builder
         * 
         */
        public Builder ingestSamplesPerSecond(@Nullable Output<Integer> ingestSamplesPerSecond) {
            $.ingestSamplesPerSecond = ingestSamplesPerSecond;
            return this;
        }

        /**
         * @param ingestSamplesPerSecond 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
         * 
         * @return builder
         * 
         */
        public Builder ingestSamplesPerSecond(Integer ingestSamplesPerSecond) {
            return ingestSamplesPerSecond(Output.of(ingestSamplesPerSecond));
        }

        /**
         * @param queryPerSecond 最大查询 QPS。整数形式，默认取值范围为 1～500。
         * 
         * @return builder
         * 
         */
        public Builder queryPerSecond(@Nullable Output<Integer> queryPerSecond) {
            $.queryPerSecond = queryPerSecond;
            return this;
        }

        /**
         * @param queryPerSecond 最大查询 QPS。整数形式，默认取值范围为 1～500。
         * 
         * @return builder
         * 
         */
        public Builder queryPerSecond(Integer queryPerSecond) {
            return queryPerSecond(Output.of(queryPerSecond));
        }

        /**
         * @param scanSamplesPerSecond 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
         * 
         * @return builder
         * 
         */
        public Builder scanSamplesPerSecond(@Nullable Output<Integer> scanSamplesPerSecond) {
            $.scanSamplesPerSecond = scanSamplesPerSecond;
            return this;
        }

        /**
         * @param scanSamplesPerSecond 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
         * 
         * @return builder
         * 
         */
        public Builder scanSamplesPerSecond(Integer scanSamplesPerSecond) {
            return scanSamplesPerSecond(Output.of(scanSamplesPerSecond));
        }

        /**
         * @param scanSeriesPerSecond 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
         * 
         * @return builder
         * 
         */
        public Builder scanSeriesPerSecond(@Nullable Output<Integer> scanSeriesPerSecond) {
            $.scanSeriesPerSecond = scanSeriesPerSecond;
            return this;
        }

        /**
         * @param scanSeriesPerSecond 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
         * 
         * @return builder
         * 
         */
        public Builder scanSeriesPerSecond(Integer scanSeriesPerSecond) {
            return scanSeriesPerSecond(Output.of(scanSeriesPerSecond));
        }

        public WorkspaceQuotaArgs build() {
            return $;
        }
    }

}
