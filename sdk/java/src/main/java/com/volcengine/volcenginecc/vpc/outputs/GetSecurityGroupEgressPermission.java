// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSecurityGroupEgressPermission {
    /**
     * @return 源地址的IPv4 CIDR或IPv6 CIDR
     * 
     */
    private String cidrIp;
    /**
     * @return 安全组规则创建时间。
     * 
     */
    private String creationTime;
    /**
     * @return 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
     * 
     */
    private String description;
    /**
     * @return 安全组规则方向。ingress：入方向。egress：出方向
     * 
     */
    private String direction;
    /**
     * @return 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
     * 
     */
    private String policy;
    /**
     * @return 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    private Integer portEnd;
    /**
     * @return 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    private Integer portStart;
    /**
     * @return 前缀列表的CIDR。
     * 
     */
    private List<String> prefixListCidrs;
    /**
     * @return 前缀列表的ID
     * 
     */
    private String prefixListId;
    /**
     * @return 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
     * 
     */
    private Integer priority;
    /**
     * @return 协议类型。tcp、udp、icmp、icmpv6、all
     * 
     */
    private String protocol;
    /**
     * @return 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
     * 
     */
    private String sourceGroupId;
    /**
     * @return 安全组规则更新时间。
     * 
     */
    private String updateTime;

    private GetSecurityGroupEgressPermission() {}
    /**
     * @return 源地址的IPv4 CIDR或IPv6 CIDR
     * 
     */
    public String cidrIp() {
        return this.cidrIp;
    }
    /**
     * @return 安全组规则创建时间。
     * 
     */
    public String creationTime() {
        return this.creationTime;
    }
    /**
     * @return 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 安全组规则方向。ingress：入方向。egress：出方向
     * 
     */
    public String direction() {
        return this.direction;
    }
    /**
     * @return 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    public Integer portEnd() {
        return this.portEnd;
    }
    /**
     * @return 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    public Integer portStart() {
        return this.portStart;
    }
    /**
     * @return 前缀列表的CIDR。
     * 
     */
    public List<String> prefixListCidrs() {
        return this.prefixListCidrs;
    }
    /**
     * @return 前缀列表的ID
     * 
     */
    public String prefixListId() {
        return this.prefixListId;
    }
    /**
     * @return 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return 协议类型。tcp、udp、icmp、icmpv6、all
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
     * 
     */
    public String sourceGroupId() {
        return this.sourceGroupId;
    }
    /**
     * @return 安全组规则更新时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSecurityGroupEgressPermission defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cidrIp;
        private String creationTime;
        private String description;
        private String direction;
        private String policy;
        private Integer portEnd;
        private Integer portStart;
        private List<String> prefixListCidrs;
        private String prefixListId;
        private Integer priority;
        private String protocol;
        private String sourceGroupId;
        private String updateTime;
        public Builder() {}
        public Builder(GetSecurityGroupEgressPermission defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrIp = defaults.cidrIp;
    	      this.creationTime = defaults.creationTime;
    	      this.description = defaults.description;
    	      this.direction = defaults.direction;
    	      this.policy = defaults.policy;
    	      this.portEnd = defaults.portEnd;
    	      this.portStart = defaults.portStart;
    	      this.prefixListCidrs = defaults.prefixListCidrs;
    	      this.prefixListId = defaults.prefixListId;
    	      this.priority = defaults.priority;
    	      this.protocol = defaults.protocol;
    	      this.sourceGroupId = defaults.sourceGroupId;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder cidrIp(String cidrIp) {
            if (cidrIp == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "cidrIp");
            }
            this.cidrIp = cidrIp;
            return this;
        }
        @CustomType.Setter
        public Builder creationTime(String creationTime) {
            if (creationTime == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "creationTime");
            }
            this.creationTime = creationTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder direction(String direction) {
            if (direction == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "direction");
            }
            this.direction = direction;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder portEnd(Integer portEnd) {
            if (portEnd == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "portEnd");
            }
            this.portEnd = portEnd;
            return this;
        }
        @CustomType.Setter
        public Builder portStart(Integer portStart) {
            if (portStart == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "portStart");
            }
            this.portStart = portStart;
            return this;
        }
        @CustomType.Setter
        public Builder prefixListCidrs(List<String> prefixListCidrs) {
            if (prefixListCidrs == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "prefixListCidrs");
            }
            this.prefixListCidrs = prefixListCidrs;
            return this;
        }
        public Builder prefixListCidrs(String... prefixListCidrs) {
            return prefixListCidrs(List.of(prefixListCidrs));
        }
        @CustomType.Setter
        public Builder prefixListId(String prefixListId) {
            if (prefixListId == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "prefixListId");
            }
            this.prefixListId = prefixListId;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder sourceGroupId(String sourceGroupId) {
            if (sourceGroupId == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "sourceGroupId");
            }
            this.sourceGroupId = sourceGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetSecurityGroupEgressPermission", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetSecurityGroupEgressPermission build() {
            final var _resultValue = new GetSecurityGroupEgressPermission();
            _resultValue.cidrIp = cidrIp;
            _resultValue.creationTime = creationTime;
            _resultValue.description = description;
            _resultValue.direction = direction;
            _resultValue.policy = policy;
            _resultValue.portEnd = portEnd;
            _resultValue.portStart = portStart;
            _resultValue.prefixListCidrs = prefixListCidrs;
            _resultValue.prefixListId = prefixListId;
            _resultValue.priority = priority;
            _resultValue.protocol = protocol;
            _resultValue.sourceGroupId = sourceGroupId;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
