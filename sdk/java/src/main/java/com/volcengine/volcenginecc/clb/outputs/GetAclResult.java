// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetAclAclEntry;
import com.volcengine.volcenginecc.clb.outputs.GetAclListener;
import com.volcengine.volcenginecc.clb.outputs.GetAclTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAclResult {
    /**
     * @return 访问控制策略组中IP条目的详细信息。
     * 
     */
    private List<GetAclAclEntry> aclEntries;
    /**
     * @return 访问控制策略组包含的IP条目数量。
     * 
     */
    private Integer aclEntryCount;
    /**
     * @return 访问控制策略组的ID。
     * 
     */
    private String aclId;
    /**
     * @return 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
     * 
     */
    private String aclName;
    /**
     * @return 访问控制策略组的创建时间。
     * 
     */
    private String createTime;
    /**
     * @return 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 访问控制策略组关联的监听器的详细信息。
     * 
     */
    private List<GetAclListener> listeners;
    /**
     * @return 访问控制策略组所属项目的名称。不填默认为default。
     * 
     */
    private String projectName;
    /**
     * @return 是否为托管资源。true：是。false：否。
     * 
     */
    private Boolean serviceManaged;
    /**
     * @return 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
     * 
     */
    private String status;
    /**
     * @return 访问控制策略组标签的详细信息。
     * 
     */
    private List<GetAclTag> tags;
    /**
     * @return 访问控制策略组的最近操作时间。
     * 
     */
    private String updateTime;

    private GetAclResult() {}
    /**
     * @return 访问控制策略组中IP条目的详细信息。
     * 
     */
    public List<GetAclAclEntry> aclEntries() {
        return this.aclEntries;
    }
    /**
     * @return 访问控制策略组包含的IP条目数量。
     * 
     */
    public Integer aclEntryCount() {
        return this.aclEntryCount;
    }
    /**
     * @return 访问控制策略组的ID。
     * 
     */
    public String aclId() {
        return this.aclId;
    }
    /**
     * @return 访问控制策略组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1～128个字符。不填默认为访问控制策略组ID。
     * 
     */
    public String aclName() {
        return this.aclName;
    }
    /**
     * @return 访问控制策略组的创建时间。
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return 访问控制策略组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0～255字符。不填则默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 访问控制策略组关联的监听器的详细信息。
     * 
     */
    public List<GetAclListener> listeners() {
        return this.listeners;
    }
    /**
     * @return 访问控制策略组所属项目的名称。不填默认为default。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 是否为托管资源。true：是。false：否。
     * 
     */
    public Boolean serviceManaged() {
        return this.serviceManaged;
    }
    /**
     * @return 访问控制策略组的状态。Creating：创建中。Active：正常可用。Configuring：配置中。Deleting：删除中。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 访问控制策略组标签的详细信息。
     * 
     */
    public List<GetAclTag> tags() {
        return this.tags;
    }
    /**
     * @return 访问控制策略组的最近操作时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAclResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<GetAclAclEntry> aclEntries;
        private Integer aclEntryCount;
        private String aclId;
        private String aclName;
        private String createTime;
        private String description;
        private String id;
        private List<GetAclListener> listeners;
        private String projectName;
        private Boolean serviceManaged;
        private String status;
        private List<GetAclTag> tags;
        private String updateTime;
        public Builder() {}
        public Builder(GetAclResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclEntries = defaults.aclEntries;
    	      this.aclEntryCount = defaults.aclEntryCount;
    	      this.aclId = defaults.aclId;
    	      this.aclName = defaults.aclName;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.listeners = defaults.listeners;
    	      this.projectName = defaults.projectName;
    	      this.serviceManaged = defaults.serviceManaged;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder aclEntries(List<GetAclAclEntry> aclEntries) {
            if (aclEntries == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "aclEntries");
            }
            this.aclEntries = aclEntries;
            return this;
        }
        public Builder aclEntries(GetAclAclEntry... aclEntries) {
            return aclEntries(List.of(aclEntries));
        }
        @CustomType.Setter
        public Builder aclEntryCount(Integer aclEntryCount) {
            if (aclEntryCount == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "aclEntryCount");
            }
            this.aclEntryCount = aclEntryCount;
            return this;
        }
        @CustomType.Setter
        public Builder aclId(String aclId) {
            if (aclId == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "aclId");
            }
            this.aclId = aclId;
            return this;
        }
        @CustomType.Setter
        public Builder aclName(String aclName) {
            if (aclName == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "aclName");
            }
            this.aclName = aclName;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listeners(List<GetAclListener> listeners) {
            if (listeners == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "listeners");
            }
            this.listeners = listeners;
            return this;
        }
        public Builder listeners(GetAclListener... listeners) {
            return listeners(List.of(listeners));
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder serviceManaged(Boolean serviceManaged) {
            if (serviceManaged == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "serviceManaged");
            }
            this.serviceManaged = serviceManaged;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetAclTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetAclTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetAclResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetAclResult build() {
            final var _resultValue = new GetAclResult();
            _resultValue.aclEntries = aclEntries;
            _resultValue.aclEntryCount = aclEntryCount;
            _resultValue.aclId = aclId;
            _resultValue.aclName = aclName;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.listeners = listeners;
            _resultValue.projectName = projectName;
            _resultValue.serviceManaged = serviceManaged;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
