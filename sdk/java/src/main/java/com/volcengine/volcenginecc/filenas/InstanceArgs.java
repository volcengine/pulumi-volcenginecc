// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.filenas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.filenas.inputs.InstanceCachePerformanceArgs;
import com.volcengine.volcenginecc.filenas.inputs.InstanceCapacityArgs;
import com.volcengine.volcenginecc.filenas.inputs.InstanceTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceArgs Empty = new InstanceArgs();

    /**
     * 缓存型性能信息。
     * 
     */
    @Import(name="cachePerformance")
    private @Nullable Output<InstanceCachePerformanceArgs> cachePerformance;

    /**
     * @return 缓存型性能信息。
     * 
     */
    public Optional<Output<InstanceCachePerformanceArgs>> cachePerformance() {
        return Optional.ofNullable(this.cachePerformance);
    }

    /**
     * 文件系统容量。
     * 
     */
    @Import(name="capacity")
    private @Nullable Output<InstanceCapacityArgs> capacity;

    /**
     * @return 文件系统容量。
     * 
     */
    public Optional<Output<InstanceCapacityArgs>> capacity() {
        return Optional.ofNullable(this.capacity);
    }

    /**
     * 计费类型，取值 PayAsYouGo，表示按量计费。
     * 
     */
    @Import(name="chargeType", required=true)
    private Output<String> chargeType;

    /**
     * @return 计费类型，取值 PayAsYouGo，表示按量计费。
     * 
     */
    public Output<String> chargeType() {
        return this.chargeType;
    }

    /**
     * 描述信息。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 描述信息。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 文件系统 ID。
     * 
     */
    @Import(name="fileSystemId")
    private @Nullable Output<String> fileSystemId;

    /**
     * @return 文件系统 ID。
     * 
     */
    public Optional<Output<String>> fileSystemId() {
        return Optional.ofNullable(this.fileSystemId);
    }

    /**
     * 文件系统名称。
     * 
     */
    @Import(name="fileSystemName", required=true)
    private Output<String> fileSystemName;

    /**
     * @return 文件系统名称。
     * 
     */
    public Output<String> fileSystemName() {
        return this.fileSystemName;
    }

    /**
     * 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     * 
     */
    @Import(name="fileSystemType", required=true)
    private Output<String> fileSystemType;

    /**
     * @return 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     * 
     */
    public Output<String> fileSystemType() {
        return this.fileSystemType;
    }

    /**
     * 所属项目，默认值为 default 项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 所属项目，默认值为 default 项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     * 
     */
    @Import(name="protocolType", required=true)
    private Output<String> protocolType;

    /**
     * @return 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     * 
     */
    public Output<String> protocolType() {
        return this.protocolType;
    }

    /**
     * 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * 存储类型，取值Standard，表示标准型。
     * 
     */
    @Import(name="storageType")
    private @Nullable Output<String> storageType;

    /**
     * @return 存储类型，取值Standard，表示标准型。
     * 
     */
    public Optional<Output<String>> storageType() {
        return Optional.ofNullable(this.storageType);
    }

    @Import(name="tags")
    private @Nullable Output<List<InstanceTagArgs>> tags;

    public Optional<Output<List<InstanceTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 可用区 ID。
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return 可用区 ID。
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    /**
     * 可用区名称。
     * 
     */
    @Import(name="zoneName")
    private @Nullable Output<String> zoneName;

    /**
     * @return 可用区名称。
     * 
     */
    public Optional<Output<String>> zoneName() {
        return Optional.ofNullable(this.zoneName);
    }

    private InstanceArgs() {}

    private InstanceArgs(InstanceArgs $) {
        this.cachePerformance = $.cachePerformance;
        this.capacity = $.capacity;
        this.chargeType = $.chargeType;
        this.description = $.description;
        this.fileSystemId = $.fileSystemId;
        this.fileSystemName = $.fileSystemName;
        this.fileSystemType = $.fileSystemType;
        this.projectName = $.projectName;
        this.protocolType = $.protocolType;
        this.snapshotId = $.snapshotId;
        this.storageType = $.storageType;
        this.tags = $.tags;
        this.zoneId = $.zoneId;
        this.zoneName = $.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceArgs $;

        public Builder() {
            $ = new InstanceArgs();
        }

        public Builder(InstanceArgs defaults) {
            $ = new InstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cachePerformance 缓存型性能信息。
         * 
         * @return builder
         * 
         */
        public Builder cachePerformance(@Nullable Output<InstanceCachePerformanceArgs> cachePerformance) {
            $.cachePerformance = cachePerformance;
            return this;
        }

        /**
         * @param cachePerformance 缓存型性能信息。
         * 
         * @return builder
         * 
         */
        public Builder cachePerformance(InstanceCachePerformanceArgs cachePerformance) {
            return cachePerformance(Output.of(cachePerformance));
        }

        /**
         * @param capacity 文件系统容量。
         * 
         * @return builder
         * 
         */
        public Builder capacity(@Nullable Output<InstanceCapacityArgs> capacity) {
            $.capacity = capacity;
            return this;
        }

        /**
         * @param capacity 文件系统容量。
         * 
         * @return builder
         * 
         */
        public Builder capacity(InstanceCapacityArgs capacity) {
            return capacity(Output.of(capacity));
        }

        /**
         * @param chargeType 计费类型，取值 PayAsYouGo，表示按量计费。
         * 
         * @return builder
         * 
         */
        public Builder chargeType(Output<String> chargeType) {
            $.chargeType = chargeType;
            return this;
        }

        /**
         * @param chargeType 计费类型，取值 PayAsYouGo，表示按量计费。
         * 
         * @return builder
         * 
         */
        public Builder chargeType(String chargeType) {
            return chargeType(Output.of(chargeType));
        }

        /**
         * @param description 描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param fileSystemId 文件系统 ID。
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(@Nullable Output<String> fileSystemId) {
            $.fileSystemId = fileSystemId;
            return this;
        }

        /**
         * @param fileSystemId 文件系统 ID。
         * 
         * @return builder
         * 
         */
        public Builder fileSystemId(String fileSystemId) {
            return fileSystemId(Output.of(fileSystemId));
        }

        /**
         * @param fileSystemName 文件系统名称。
         * 
         * @return builder
         * 
         */
        public Builder fileSystemName(Output<String> fileSystemName) {
            $.fileSystemName = fileSystemName;
            return this;
        }

        /**
         * @param fileSystemName 文件系统名称。
         * 
         * @return builder
         * 
         */
        public Builder fileSystemName(String fileSystemName) {
            return fileSystemName(Output.of(fileSystemName));
        }

        /**
         * @param fileSystemType 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
         * 
         * @return builder
         * 
         */
        public Builder fileSystemType(Output<String> fileSystemType) {
            $.fileSystemType = fileSystemType;
            return this;
        }

        /**
         * @param fileSystemType 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
         * 
         * @return builder
         * 
         */
        public Builder fileSystemType(String fileSystemType) {
            return fileSystemType(Output.of(fileSystemType));
        }

        /**
         * @param projectName 所属项目，默认值为 default 项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 所属项目，默认值为 default 项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param protocolType 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
         * 
         * @return builder
         * 
         */
        public Builder protocolType(Output<String> protocolType) {
            $.protocolType = protocolType;
            return this;
        }

        /**
         * @param protocolType 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
         * 
         * @return builder
         * 
         */
        public Builder protocolType(String protocolType) {
            return protocolType(Output.of(protocolType));
        }

        /**
         * @param snapshotId 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param storageType 存储类型，取值Standard，表示标准型。
         * 
         * @return builder
         * 
         */
        public Builder storageType(@Nullable Output<String> storageType) {
            $.storageType = storageType;
            return this;
        }

        /**
         * @param storageType 存储类型，取值Standard，表示标准型。
         * 
         * @return builder
         * 
         */
        public Builder storageType(String storageType) {
            return storageType(Output.of(storageType));
        }

        public Builder tags(@Nullable Output<List<InstanceTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<InstanceTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(InstanceTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zoneId 可用区 ID。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId 可用区 ID。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        /**
         * @param zoneName 可用区名称。
         * 
         * @return builder
         * 
         */
        public Builder zoneName(@Nullable Output<String> zoneName) {
            $.zoneName = zoneName;
            return this;
        }

        /**
         * @param zoneName 可用区名称。
         * 
         * @return builder
         * 
         */
        public Builder zoneName(String zoneName) {
            return zoneName(Output.of(zoneName));
        }

        public InstanceArgs build() {
            if ($.chargeType == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "chargeType");
            }
            if ($.fileSystemName == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "fileSystemName");
            }
            if ($.fileSystemType == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "fileSystemType");
            }
            if ($.protocolType == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "protocolType");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("InstanceArgs", "zoneId");
            }
            return $;
        }
    }

}
