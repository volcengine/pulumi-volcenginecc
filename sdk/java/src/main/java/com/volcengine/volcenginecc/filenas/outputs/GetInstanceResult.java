// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.filenas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.filenas.outputs.GetInstanceCachePerformance;
import com.volcengine.volcenginecc.filenas.outputs.GetInstanceCapacity;
import com.volcengine.volcenginecc.filenas.outputs.GetInstanceTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstanceResult {
    /**
     * @return 缓存型性能信息。
     * 
     */
    private GetInstanceCachePerformance cachePerformance;
    /**
     * @return 文件系统容量。
     * 
     */
    private GetInstanceCapacity capacity;
    /**
     * @return 计费类型，取值 PayAsYouGo，表示按量计费。
     * 
     */
    private String chargeType;
    /**
     * @return 创建时间
     * 
     */
    private String createTime;
    /**
     * @return 描述信息。
     * 
     */
    private String description;
    /**
     * @return 文件系统 ID。
     * 
     */
    private String fileSystemId;
    /**
     * @return 文件系统名称。
     * 
     */
    private String fileSystemName;
    /**
     * @return 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     * 
     */
    private String fileSystemType;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 所属项目，默认值为 default 项目。
     * 
     */
    private String projectName;
    /**
     * @return 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     * 
     */
    private String protocolType;
    /**
     * @return 快照数量
     * 
     */
    private Integer snapshotCount;
    /**
     * @return 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     * 
     */
    private String snapshotId;
    /**
     * @return 文件系统状态
     * 
     */
    private String status;
    /**
     * @return 存储类型，取值Standard，表示标准型。
     * 
     */
    private String storageType;
    /**
     * @return 文件系统的标签信息
     * 
     */
    private List<GetInstanceTag> tags;
    /**
     * @return 更新时间
     * 
     */
    private String updateTime;
    /**
     * @return 可用区 ID。
     * 
     */
    private String zoneId;
    /**
     * @return 可用区名称。
     * 
     */
    private String zoneName;

    private GetInstanceResult() {}
    /**
     * @return 缓存型性能信息。
     * 
     */
    public GetInstanceCachePerformance cachePerformance() {
        return this.cachePerformance;
    }
    /**
     * @return 文件系统容量。
     * 
     */
    public GetInstanceCapacity capacity() {
        return this.capacity;
    }
    /**
     * @return 计费类型，取值 PayAsYouGo，表示按量计费。
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return 创建时间
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return 描述信息。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 文件系统 ID。
     * 
     */
    public String fileSystemId() {
        return this.fileSystemId;
    }
    /**
     * @return 文件系统名称。
     * 
     */
    public String fileSystemName() {
        return this.fileSystemName;
    }
    /**
     * @return 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     * 
     */
    public String fileSystemType() {
        return this.fileSystemType;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 所属项目，默认值为 default 项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     * 
     */
    public String protocolType() {
        return this.protocolType;
    }
    /**
     * @return 快照数量
     * 
     */
    public Integer snapshotCount() {
        return this.snapshotCount;
    }
    /**
     * @return 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return 文件系统状态
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 存储类型，取值Standard，表示标准型。
     * 
     */
    public String storageType() {
        return this.storageType;
    }
    /**
     * @return 文件系统的标签信息
     * 
     */
    public List<GetInstanceTag> tags() {
        return this.tags;
    }
    /**
     * @return 更新时间
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return 可用区 ID。
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }
    /**
     * @return 可用区名称。
     * 
     */
    public String zoneName() {
        return this.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetInstanceCachePerformance cachePerformance;
        private GetInstanceCapacity capacity;
        private String chargeType;
        private String createTime;
        private String description;
        private String fileSystemId;
        private String fileSystemName;
        private String fileSystemType;
        private String id;
        private String projectName;
        private String protocolType;
        private Integer snapshotCount;
        private String snapshotId;
        private String status;
        private String storageType;
        private List<GetInstanceTag> tags;
        private String updateTime;
        private String zoneId;
        private String zoneName;
        public Builder() {}
        public Builder(GetInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cachePerformance = defaults.cachePerformance;
    	      this.capacity = defaults.capacity;
    	      this.chargeType = defaults.chargeType;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.fileSystemId = defaults.fileSystemId;
    	      this.fileSystemName = defaults.fileSystemName;
    	      this.fileSystemType = defaults.fileSystemType;
    	      this.id = defaults.id;
    	      this.projectName = defaults.projectName;
    	      this.protocolType = defaults.protocolType;
    	      this.snapshotCount = defaults.snapshotCount;
    	      this.snapshotId = defaults.snapshotId;
    	      this.status = defaults.status;
    	      this.storageType = defaults.storageType;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
    	      this.zoneId = defaults.zoneId;
    	      this.zoneName = defaults.zoneName;
        }

        @CustomType.Setter
        public Builder cachePerformance(GetInstanceCachePerformance cachePerformance) {
            if (cachePerformance == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "cachePerformance");
            }
            this.cachePerformance = cachePerformance;
            return this;
        }
        @CustomType.Setter
        public Builder capacity(GetInstanceCapacity capacity) {
            if (capacity == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "capacity");
            }
            this.capacity = capacity;
            return this;
        }
        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemId(String fileSystemId) {
            if (fileSystemId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "fileSystemId");
            }
            this.fileSystemId = fileSystemId;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemName(String fileSystemName) {
            if (fileSystemName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "fileSystemName");
            }
            this.fileSystemName = fileSystemName;
            return this;
        }
        @CustomType.Setter
        public Builder fileSystemType(String fileSystemType) {
            if (fileSystemType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "fileSystemType");
            }
            this.fileSystemType = fileSystemType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder protocolType(String protocolType) {
            if (protocolType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "protocolType");
            }
            this.protocolType = protocolType;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotCount(Integer snapshotCount) {
            if (snapshotCount == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "snapshotCount");
            }
            this.snapshotCount = snapshotCount;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageType(String storageType) {
            if (storageType == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "storageType");
            }
            this.storageType = storageType;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetInstanceTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetInstanceTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneName(String zoneName) {
            if (zoneName == null) {
              throw new MissingRequiredPropertyException("GetInstanceResult", "zoneName");
            }
            this.zoneName = zoneName;
            return this;
        }
        public GetInstanceResult build() {
            final var _resultValue = new GetInstanceResult();
            _resultValue.cachePerformance = cachePerformance;
            _resultValue.capacity = capacity;
            _resultValue.chargeType = chargeType;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.fileSystemId = fileSystemId;
            _resultValue.fileSystemName = fileSystemName;
            _resultValue.fileSystemType = fileSystemType;
            _resultValue.id = id;
            _resultValue.projectName = projectName;
            _resultValue.protocolType = protocolType;
            _resultValue.snapshotCount = snapshotCount;
            _resultValue.snapshotId = snapshotId;
            _resultValue.status = status;
            _resultValue.storageType = storageType;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            _resultValue.zoneId = zoneId;
            _resultValue.zoneName = zoneName;
            return _resultValue;
        }
    }
}
