// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInstancePrimaryNetworkInterface {
    /**
     * @return 实例的IPv6地址数量。
     * 
     */
    private Integer ipv6AddressCount;
    /**
     * @return 实例的IPv6地址。
     * 
     */
    private List<String> ipv6Addresses;
    /**
     * @return 实例的MAC地址。
     * 
     */
    private String macAddress;
    /**
     * @return 实例的网络接口ID。
     * 
     */
    private String networkInterfaceId;
    /**
     * @return 实例的主IP地址。
     * 
     */
    private String primaryIpAddress;
    /**
     * @return 实例的私有IP地址。
     * 
     */
    private List<String> privateIpAddresses;
    /**
     * @return 实例的安全组ID。
     * 
     */
    private List<String> securityGroupIds;
    /**
     * @return 实例的子网ID。
     * 
     */
    private String subnetId;
    /**
     * @return 实例的VPC ID。
     * 
     */
    private String vpcId;

    private GetInstancePrimaryNetworkInterface() {}
    /**
     * @return 实例的IPv6地址数量。
     * 
     */
    public Integer ipv6AddressCount() {
        return this.ipv6AddressCount;
    }
    /**
     * @return 实例的IPv6地址。
     * 
     */
    public List<String> ipv6Addresses() {
        return this.ipv6Addresses;
    }
    /**
     * @return 实例的MAC地址。
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return 实例的网络接口ID。
     * 
     */
    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }
    /**
     * @return 实例的主IP地址。
     * 
     */
    public String primaryIpAddress() {
        return this.primaryIpAddress;
    }
    /**
     * @return 实例的私有IP地址。
     * 
     */
    public List<String> privateIpAddresses() {
        return this.privateIpAddresses;
    }
    /**
     * @return 实例的安全组ID。
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }
    /**
     * @return 实例的子网ID。
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return 实例的VPC ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstancePrimaryNetworkInterface defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer ipv6AddressCount;
        private List<String> ipv6Addresses;
        private String macAddress;
        private String networkInterfaceId;
        private String primaryIpAddress;
        private List<String> privateIpAddresses;
        private List<String> securityGroupIds;
        private String subnetId;
        private String vpcId;
        public Builder() {}
        public Builder(GetInstancePrimaryNetworkInterface defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.macAddress = defaults.macAddress;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.primaryIpAddress = defaults.primaryIpAddress;
    	      this.privateIpAddresses = defaults.privateIpAddresses;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.subnetId = defaults.subnetId;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder ipv6AddressCount(Integer ipv6AddressCount) {
            if (ipv6AddressCount == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "ipv6AddressCount");
            }
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Addresses(List<String> ipv6Addresses) {
            if (ipv6Addresses == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "ipv6Addresses");
            }
            this.ipv6Addresses = ipv6Addresses;
            return this;
        }
        public Builder ipv6Addresses(String... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaceId(String networkInterfaceId) {
            if (networkInterfaceId == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "networkInterfaceId");
            }
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }
        @CustomType.Setter
        public Builder primaryIpAddress(String primaryIpAddress) {
            if (primaryIpAddress == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "primaryIpAddress");
            }
            this.primaryIpAddress = primaryIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpAddresses(List<String> privateIpAddresses) {
            if (privateIpAddresses == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "privateIpAddresses");
            }
            this.privateIpAddresses = privateIpAddresses;
            return this;
        }
        public Builder privateIpAddresses(String... privateIpAddresses) {
            return privateIpAddresses(List.of(privateIpAddresses));
        }
        @CustomType.Setter
        public Builder securityGroupIds(List<String> securityGroupIds) {
            if (securityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "securityGroupIds");
            }
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetInstancePrimaryNetworkInterface", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetInstancePrimaryNetworkInterface build() {
            final var _resultValue = new GetInstancePrimaryNetworkInterface();
            _resultValue.ipv6AddressCount = ipv6AddressCount;
            _resultValue.ipv6Addresses = ipv6Addresses;
            _resultValue.macAddress = macAddress;
            _resultValue.networkInterfaceId = networkInterfaceId;
            _resultValue.primaryIpAddress = primaryIpAddress;
            _resultValue.privateIpAddresses = privateIpAddresses;
            _resultValue.securityGroupIds = securityGroupIds;
            _resultValue.subnetId = subnetId;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
