// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.rdsmysql;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.rdsmysql.inputs.DatabaseDatabasePrivilegeArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseArgs Empty = new DatabaseArgs();

    /**
     * 数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。
     * 
     */
    @Import(name="characterSetName")
    private @Nullable Output<String> characterSetName;

    /**
     * @return 数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。
     * 
     */
    public Optional<Output<String>> characterSetName() {
        return Optional.ofNullable(this.characterSetName);
    }

    @Import(name="databasePrivileges")
    private @Nullable Output<List<DatabaseDatabasePrivilegeArgs>> databasePrivileges;

    public Optional<Output<List<DatabaseDatabasePrivilegeArgs>>> databasePrivileges() {
        return Optional.ofNullable(this.databasePrivileges);
    }

    /**
     * 数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 数据库实例 ID。
     * 
     */
    @Import(name="instanceId", required=true)
    private Output<String> instanceId;

    /**
     * @return 数据库实例 ID。
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }

    /**
     * 数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return 数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    private DatabaseArgs() {}

    private DatabaseArgs(DatabaseArgs $) {
        this.characterSetName = $.characterSetName;
        this.databasePrivileges = $.databasePrivileges;
        this.description = $.description;
        this.instanceId = $.instanceId;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseArgs $;

        public Builder() {
            $ = new DatabaseArgs();
        }

        public Builder(DatabaseArgs defaults) {
            $ = new DatabaseArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param characterSetName 数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。
         * 
         * @return builder
         * 
         */
        public Builder characterSetName(@Nullable Output<String> characterSetName) {
            $.characterSetName = characterSetName;
            return this;
        }

        /**
         * @param characterSetName 数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。
         * 
         * @return builder
         * 
         */
        public Builder characterSetName(String characterSetName) {
            return characterSetName(Output.of(characterSetName));
        }

        public Builder databasePrivileges(@Nullable Output<List<DatabaseDatabasePrivilegeArgs>> databasePrivileges) {
            $.databasePrivileges = databasePrivileges;
            return this;
        }

        public Builder databasePrivileges(List<DatabaseDatabasePrivilegeArgs> databasePrivileges) {
            return databasePrivileges(Output.of(databasePrivileges));
        }

        public Builder databasePrivileges(DatabaseDatabasePrivilegeArgs... databasePrivileges) {
            return databasePrivileges(List.of(databasePrivileges));
        }

        /**
         * @param description 数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instanceId 数据库实例 ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId 数据库实例 ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param name 数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public DatabaseArgs build() {
            if ($.instanceId == null) {
                throw new MissingRequiredPropertyException("DatabaseArgs", "instanceId");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DatabaseArgs", "name");
            }
            return $;
        }
    }

}
