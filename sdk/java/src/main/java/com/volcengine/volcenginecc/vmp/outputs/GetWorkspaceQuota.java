// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vmp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetWorkspaceQuota {
    /**
     * @return 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
     * 
     */
    private Integer activeSeries;
    /**
     * @return 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
     * 
     */
    private Integer ingestSamplesPerSecond;
    /**
     * @return 最大查询 QPS。整数形式，默认取值范围为 1～500。
     * 
     */
    private Integer queryPerSecond;
    /**
     * @return 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
     * 
     */
    private Integer scanSamplesPerSecond;
    /**
     * @return 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
     * 
     */
    private Integer scanSeriesPerSecond;

    private GetWorkspaceQuota() {}
    /**
     * @return 最大活跃时序数。整数形式，默认取值范围为 1～50000000。
     * 
     */
    public Integer activeSeries() {
        return this.activeSeries;
    }
    /**
     * @return 指标摄入速率，即最大每秒写入样本数。整数形式，默认取值范围为 1～5000000。
     * 
     */
    public Integer ingestSamplesPerSecond() {
        return this.ingestSamplesPerSecond;
    }
    /**
     * @return 最大查询 QPS。整数形式，默认取值范围为 1～500。
     * 
     */
    public Integer queryPerSecond() {
        return this.queryPerSecond;
    }
    /**
     * @return 最大每秒扫描样本数。整数形式，默认取值范围为 1～1000000000。
     * 
     */
    public Integer scanSamplesPerSecond() {
        return this.scanSamplesPerSecond;
    }
    /**
     * @return 最大每秒扫描时序数。整数形式，默认取值范围为 1～200000。
     * 
     */
    public Integer scanSeriesPerSecond() {
        return this.scanSeriesPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceQuota defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeSeries;
        private Integer ingestSamplesPerSecond;
        private Integer queryPerSecond;
        private Integer scanSamplesPerSecond;
        private Integer scanSeriesPerSecond;
        public Builder() {}
        public Builder(GetWorkspaceQuota defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeSeries = defaults.activeSeries;
    	      this.ingestSamplesPerSecond = defaults.ingestSamplesPerSecond;
    	      this.queryPerSecond = defaults.queryPerSecond;
    	      this.scanSamplesPerSecond = defaults.scanSamplesPerSecond;
    	      this.scanSeriesPerSecond = defaults.scanSeriesPerSecond;
        }

        @CustomType.Setter
        public Builder activeSeries(Integer activeSeries) {
            if (activeSeries == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceQuota", "activeSeries");
            }
            this.activeSeries = activeSeries;
            return this;
        }
        @CustomType.Setter
        public Builder ingestSamplesPerSecond(Integer ingestSamplesPerSecond) {
            if (ingestSamplesPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceQuota", "ingestSamplesPerSecond");
            }
            this.ingestSamplesPerSecond = ingestSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder queryPerSecond(Integer queryPerSecond) {
            if (queryPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceQuota", "queryPerSecond");
            }
            this.queryPerSecond = queryPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder scanSamplesPerSecond(Integer scanSamplesPerSecond) {
            if (scanSamplesPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceQuota", "scanSamplesPerSecond");
            }
            this.scanSamplesPerSecond = scanSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder scanSeriesPerSecond(Integer scanSeriesPerSecond) {
            if (scanSeriesPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceQuota", "scanSeriesPerSecond");
            }
            this.scanSeriesPerSecond = scanSeriesPerSecond;
            return this;
        }
        public GetWorkspaceQuota build() {
            final var _resultValue = new GetWorkspaceQuota();
            _resultValue.activeSeries = activeSeries;
            _resultValue.ingestSamplesPerSecond = ingestSamplesPerSecond;
            _resultValue.queryPerSecond = queryPerSecond;
            _resultValue.scanSamplesPerSecond = scanSamplesPerSecond;
            _resultValue.scanSeriesPerSecond = scanSeriesPerSecond;
            return _resultValue;
        }
    }
}
