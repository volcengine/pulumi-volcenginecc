// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetServerGroupServer {
    /**
     * @return 是否开启全端口转发。on：开启。off（默认值）：关闭。
     * 
     */
    private String anyPortEnabled;
    /**
     * @return 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
     * 
     */
    private String instanceId;
    /**
     * @return 后端服务器的私网IP地址。多个后端服务器IP之间使用“&amp;”分隔。
     * 
     */
    private String ip;
    /**
     * @return 后端服务器接收请求的端口号。取值范围为1～65535。
     * 
     */
    private Integer port;
    /**
     * @return 后端服务器ID。
     * 
     */
    private String serverId;
    /**
     * @return 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
     * 
     */
    private String type;
    /**
     * @return 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
     * 
     */
    private Integer weight;

    private GetServerGroupServer() {}
    /**
     * @return 是否开启全端口转发。on：开启。off（默认值）：关闭。
     * 
     */
    public String anyPortEnabled() {
        return this.anyPortEnabled;
    }
    /**
     * @return 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 后端服务器的私网IP地址。多个后端服务器IP之间使用“&amp;”分隔。
     * 
     */
    public String ip() {
        return this.ip;
    }
    /**
     * @return 后端服务器接收请求的端口号。取值范围为1～65535。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 后端服务器ID。
     * 
     */
    public String serverId() {
        return this.serverId;
    }
    /**
     * @return 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
     * 
     */
    public Integer weight() {
        return this.weight;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupServer defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String anyPortEnabled;
        private String description;
        private String instanceId;
        private String ip;
        private Integer port;
        private String serverId;
        private String type;
        private Integer weight;
        public Builder() {}
        public Builder(GetServerGroupServer defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.anyPortEnabled = defaults.anyPortEnabled;
    	      this.description = defaults.description;
    	      this.instanceId = defaults.instanceId;
    	      this.ip = defaults.ip;
    	      this.port = defaults.port;
    	      this.serverId = defaults.serverId;
    	      this.type = defaults.type;
    	      this.weight = defaults.weight;
        }

        @CustomType.Setter
        public Builder anyPortEnabled(String anyPortEnabled) {
            if (anyPortEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "anyPortEnabled");
            }
            this.anyPortEnabled = anyPortEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            if (ip == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "ip");
            }
            this.ip = ip;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder serverId(String serverId) {
            if (serverId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "serverId");
            }
            this.serverId = serverId;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder weight(Integer weight) {
            if (weight == null) {
              throw new MissingRequiredPropertyException("GetServerGroupServer", "weight");
            }
            this.weight = weight;
            return this;
        }
        public GetServerGroupServer build() {
            final var _resultValue = new GetServerGroupServer();
            _resultValue.anyPortEnabled = anyPortEnabled;
            _resultValue.description = description;
            _resultValue.instanceId = instanceId;
            _resultValue.ip = ip;
            _resultValue.port = port;
            _resultValue.serverId = serverId;
            _resultValue.type = type;
            _resultValue.weight = weight;
            return _resultValue;
        }
    }
}
