// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.alb.inputs.ServerGroupHealthCheckArgs;
import com.volcengine.volcenginecc.alb.inputs.ServerGroupListenerArgs;
import com.volcengine.volcenginecc.alb.inputs.ServerGroupServerArgs;
import com.volcengine.volcenginecc.alb.inputs.ServerGroupStickySessionConfigArgs;
import com.volcengine.volcenginecc.alb.inputs.ServerGroupTagArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupState Empty = new ServerGroupState();

    /**
     * 后端服务器组的创建时间。
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return 后端服务器组的创建时间。
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * 后端服务器组的描述。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 后端服务器组的描述。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 服务器组健康检查配置信息。
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<ServerGroupHealthCheckArgs> healthCheck;

    /**
     * @return 服务器组健康检查配置信息。
     * 
     */
    public Optional<Output<ServerGroupHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * 服务器组的IP地址类型。目前只支持 IPv4
     * 
     */
    @Import(name="ipAddressType")
    private @Nullable Output<String> ipAddressType;

    /**
     * @return 服务器组的IP地址类型。目前只支持 IPv4
     * 
     */
    public Optional<Output<String>> ipAddressType() {
        return Optional.ofNullable(this.ipAddressType);
    }

    @Import(name="listeners")
    private @Nullable Output<List<ServerGroupListenerArgs>> listeners;

    public Optional<Output<List<ServerGroupListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * 后端服务器组所属项目名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 后端服务器组所属项目名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 后端协议：HTTP，HTTPS。
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 后端协议：HTTP，HTTPS。
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    /**
     * @return 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    /**
     * 服务器组内后端服务器的个数。
     * 
     */
    @Import(name="serverCount")
    private @Nullable Output<Integer> serverCount;

    /**
     * @return 服务器组内后端服务器的个数。
     * 
     */
    public Optional<Output<Integer>> serverCount() {
        return Optional.ofNullable(this.serverCount);
    }

    /**
     * 后端服务器组的ID。
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return 后端服务器组的ID。
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * 后端服务器组的名称。
     * 
     */
    @Import(name="serverGroupName")
    private @Nullable Output<String> serverGroupName;

    /**
     * @return 后端服务器组的名称。
     * 
     */
    public Optional<Output<String>> serverGroupName() {
        return Optional.ofNullable(this.serverGroupName);
    }

    /**
     * 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
     * 
     */
    @Import(name="serverGroupType")
    private @Nullable Output<String> serverGroupType;

    /**
     * @return 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
     * 
     */
    public Optional<Output<String>> serverGroupType() {
        return Optional.ofNullable(this.serverGroupType);
    }

    @Import(name="servers")
    private @Nullable Output<List<ServerGroupServerArgs>> servers;

    public Optional<Output<List<ServerGroupServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * 会话保持功能的参数信息。
     * 
     */
    @Import(name="stickySessionConfig")
    private @Nullable Output<ServerGroupStickySessionConfigArgs> stickySessionConfig;

    /**
     * @return 会话保持功能的参数信息。
     * 
     */
    public Optional<Output<ServerGroupStickySessionConfigArgs>> stickySessionConfig() {
        return Optional.ofNullable(this.stickySessionConfig);
    }

    @Import(name="tags")
    private @Nullable Output<List<ServerGroupTagArgs>> tags;

    public Optional<Output<List<ServerGroupTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 后端服务器组的最近操作时间。
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return 后端服务器组的最近操作时间。
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * 后端服务器组所属 Vpc 的 ID。
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return 后端服务器组所属 Vpc 的 ID。
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private ServerGroupState() {}

    private ServerGroupState(ServerGroupState $) {
        this.createTime = $.createTime;
        this.description = $.description;
        this.healthCheck = $.healthCheck;
        this.ipAddressType = $.ipAddressType;
        this.listeners = $.listeners;
        this.projectName = $.projectName;
        this.protocol = $.protocol;
        this.scheduler = $.scheduler;
        this.serverCount = $.serverCount;
        this.serverGroupId = $.serverGroupId;
        this.serverGroupName = $.serverGroupName;
        this.serverGroupType = $.serverGroupType;
        this.servers = $.servers;
        this.status = $.status;
        this.stickySessionConfig = $.stickySessionConfig;
        this.tags = $.tags;
        this.updateTime = $.updateTime;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupState $;

        public Builder() {
            $ = new ServerGroupState();
        }

        public Builder(ServerGroupState defaults) {
            $ = new ServerGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createTime 后端服务器组的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime 后端服务器组的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description 后端服务器组的描述。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 后端服务器组的描述。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param healthCheck 服务器组健康检查配置信息。
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<ServerGroupHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck 服务器组健康检查配置信息。
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(ServerGroupHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param ipAddressType 服务器组的IP地址类型。目前只支持 IPv4
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(@Nullable Output<String> ipAddressType) {
            $.ipAddressType = ipAddressType;
            return this;
        }

        /**
         * @param ipAddressType 服务器组的IP地址类型。目前只支持 IPv4
         * 
         * @return builder
         * 
         */
        public Builder ipAddressType(String ipAddressType) {
            return ipAddressType(Output.of(ipAddressType));
        }

        public Builder listeners(@Nullable Output<List<ServerGroupListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        public Builder listeners(List<ServerGroupListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        public Builder listeners(ServerGroupListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param projectName 后端服务器组所属项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 后端服务器组所属项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param protocol 后端协议：HTTP，HTTPS。
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 后端协议：HTTP，HTTPS。
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param scheduler 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
         * 
         * @return builder
         * 
         */
        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        /**
         * @param scheduler 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
         * 
         * @return builder
         * 
         */
        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        /**
         * @param serverCount 服务器组内后端服务器的个数。
         * 
         * @return builder
         * 
         */
        public Builder serverCount(@Nullable Output<Integer> serverCount) {
            $.serverCount = serverCount;
            return this;
        }

        /**
         * @param serverCount 服务器组内后端服务器的个数。
         * 
         * @return builder
         * 
         */
        public Builder serverCount(Integer serverCount) {
            return serverCount(Output.of(serverCount));
        }

        /**
         * @param serverGroupId 后端服务器组的ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId 后端服务器组的ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param serverGroupName 后端服务器组的名称。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(@Nullable Output<String> serverGroupName) {
            $.serverGroupName = serverGroupName;
            return this;
        }

        /**
         * @param serverGroupName 后端服务器组的名称。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(String serverGroupName) {
            return serverGroupName(Output.of(serverGroupName));
        }

        /**
         * @param serverGroupType 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupType(@Nullable Output<String> serverGroupType) {
            $.serverGroupType = serverGroupType;
            return this;
        }

        /**
         * @param serverGroupType 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupType(String serverGroupType) {
            return serverGroupType(Output.of(serverGroupType));
        }

        public Builder servers(@Nullable Output<List<ServerGroupServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        public Builder servers(List<ServerGroupServerArgs> servers) {
            return servers(Output.of(servers));
        }

        public Builder servers(ServerGroupServerArgs... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param status 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param stickySessionConfig 会话保持功能的参数信息。
         * 
         * @return builder
         * 
         */
        public Builder stickySessionConfig(@Nullable Output<ServerGroupStickySessionConfigArgs> stickySessionConfig) {
            $.stickySessionConfig = stickySessionConfig;
            return this;
        }

        /**
         * @param stickySessionConfig 会话保持功能的参数信息。
         * 
         * @return builder
         * 
         */
        public Builder stickySessionConfig(ServerGroupStickySessionConfigArgs stickySessionConfig) {
            return stickySessionConfig(Output.of(stickySessionConfig));
        }

        public Builder tags(@Nullable Output<List<ServerGroupTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ServerGroupTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ServerGroupTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updateTime 后端服务器组的最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime 后端服务器组的最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param vpcId 后端服务器组所属 Vpc 的 ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId 后端服务器组所属 Vpc 的 ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public ServerGroupState build() {
            return $;
        }
    }

}
