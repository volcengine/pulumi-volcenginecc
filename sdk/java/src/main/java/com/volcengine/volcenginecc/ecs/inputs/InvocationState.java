// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.ecs.inputs.InvocationInvocationResultArgs;
import com.volcengine.volcenginecc.ecs.inputs.InvocationParameterDefinitionArgs;
import com.volcengine.volcenginecc.ecs.inputs.InvocationTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InvocationState extends com.pulumi.resources.ResourceArgs {

    public static final InvocationState Empty = new InvocationState();

    /**
     * 命令内容。
     * 
     */
    @Import(name="commandContent")
    private @Nullable Output<String> commandContent;

    /**
     * @return 命令内容。
     * 
     */
    public Optional<Output<String>> commandContent() {
        return Optional.ofNullable(this.commandContent);
    }

    /**
     * 被调用命令的描述。
     * 
     */
    @Import(name="commandDescription")
    private @Nullable Output<String> commandDescription;

    /**
     * @return 被调用命令的描述。
     * 
     */
    public Optional<Output<String>> commandDescription() {
        return Optional.ofNullable(this.commandDescription);
    }

    /**
     * 命令ID。
     * 
     */
    @Import(name="commandId")
    private @Nullable Output<String> commandId;

    /**
     * @return 命令ID。
     * 
     */
    public Optional<Output<String>> commandId() {
        return Optional.ofNullable(this.commandId);
    }

    /**
     * 任务触发时的命令名称。
     * 
     */
    @Import(name="commandName")
    private @Nullable Output<String> commandName;

    /**
     * @return 任务触发时的命令名称。
     * 
     */
    public Optional<Output<String>> commandName() {
        return Optional.ofNullable(this.commandName);
    }

    /**
     * 被调用命令的提供方。
     * 
     */
    @Import(name="commandProvider")
    private @Nullable Output<String> commandProvider;

    /**
     * @return 被调用命令的提供方。
     * 
     */
    public Optional<Output<String>> commandProvider() {
        return Optional.ofNullable(this.commandProvider);
    }

    /**
     * 作业触发的命令类型。
     * 
     */
    @Import(name="commandType")
    private @Nullable Output<String> commandType;

    /**
     * @return 作业触发的命令类型。
     * 
     */
    public Optional<Output<String>> commandType() {
        return Optional.ofNullable(this.commandType);
    }

    /**
     * 被调用命令是否使用自定义参数。true：已启用。false：未启用。
     * 
     */
    @Import(name="enableParameter")
    private @Nullable Output<Boolean> enableParameter;

    /**
     * @return 被调用命令是否使用自定义参数。true：已启用。false：未启用。
     * 
     */
    public Optional<Output<Boolean>> enableParameter() {
        return Optional.ofNullable(this.enableParameter);
    }

    /**
     * 任务结束时间。
     * 
     */
    @Import(name="endTime")
    private @Nullable Output<String> endTime;

    /**
     * @return 任务结束时间。
     * 
     */
    public Optional<Output<String>> endTime() {
        return Optional.ofNullable(this.endTime);
    }

    /**
     * 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
     * 
     */
    @Import(name="frequency")
    private @Nullable Output<String> frequency;

    /**
     * @return 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
     * 
     */
    public Optional<Output<String>> frequency() {
        return Optional.ofNullable(this.frequency);
    }

    /**
     * 实例ID列表，最多支持200个ID。
     * 
     */
    @Import(name="instanceIds")
    private @Nullable Output<List<String>> instanceIds;

    /**
     * @return 实例ID列表，最多支持200个ID。
     * 
     */
    public Optional<Output<List<String>>> instanceIds() {
        return Optional.ofNullable(this.instanceIds);
    }

    /**
     * 执行实例数量。
     * 
     */
    @Import(name="instanceNumber")
    private @Nullable Output<Integer> instanceNumber;

    /**
     * @return 执行实例数量。
     * 
     */
    public Optional<Output<Integer>> instanceNumber() {
        return Optional.ofNullable(this.instanceNumber);
    }

    /**
     * 作业描述，默认为空字符串，不超过256个字符。
     * 
     */
    @Import(name="invocationDescription")
    private @Nullable Output<String> invocationDescription;

    /**
     * @return 作业描述，默认为空字符串，不超过256个字符。
     * 
     */
    public Optional<Output<String>> invocationDescription() {
        return Optional.ofNullable(this.invocationDescription);
    }

    /**
     * 任务执行 ID。
     * 
     */
    @Import(name="invocationId")
    private @Nullable Output<String> invocationId;

    /**
     * @return 任务执行 ID。
     * 
     */
    public Optional<Output<String>> invocationId() {
        return Optional.ofNullable(this.invocationId);
    }

    /**
     * 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
     * 
     */
    @Import(name="invocationName")
    private @Nullable Output<String> invocationName;

    /**
     * @return 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
     * 
     */
    public Optional<Output<String>> invocationName() {
        return Optional.ofNullable(this.invocationName);
    }

    @Import(name="invocationResults")
    private @Nullable Output<List<InvocationInvocationResultArgs>> invocationResults;

    public Optional<Output<List<InvocationInvocationResultArgs>>> invocationResults() {
        return Optional.ofNullable(this.invocationResults);
    }

    /**
     * 命令执行的总执行状态。
     * 
     */
    @Import(name="invocationStatus")
    private @Nullable Output<String> invocationStatus;

    /**
     * @return 命令执行的总执行状态。
     * 
     */
    public Optional<Output<String>> invocationStatus() {
        return Optional.ofNullable(this.invocationStatus);
    }

    /**
     * 执行时间。
     * 
     */
    @Import(name="launchTime")
    private @Nullable Output<String> launchTime;

    /**
     * @return 执行时间。
     * 
     */
    public Optional<Output<String>> launchTime() {
        return Optional.ofNullable(this.launchTime);
    }

    @Import(name="parameterDefinitions")
    private @Nullable Output<List<InvocationParameterDefinitionArgs>> parameterDefinitions;

    public Optional<Output<List<InvocationParameterDefinitionArgs>>> parameterDefinitions() {
        return Optional.ofNullable(this.parameterDefinitions);
    }

    /**
     * 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
     * 
     */
    @Import(name="parameters")
    private @Nullable Output<String> parameters;

    /**
     * @return 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
     * 
     */
    public Optional<Output<String>> parameters() {
        return Optional.ofNullable(this.parameters);
    }

    /**
     * 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 周期结束时间，仅适用于周期任务（Rate）。
     * 
     */
    @Import(name="recurrenceEndTime")
    private @Nullable Output<String> recurrenceEndTime;

    /**
     * @return 周期结束时间，仅适用于周期任务（Rate）。
     * 
     */
    public Optional<Output<String>> recurrenceEndTime() {
        return Optional.ofNullable(this.recurrenceEndTime);
    }

    /**
     * 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
     * 
     */
    @Import(name="repeatMode")
    private @Nullable Output<String> repeatMode;

    /**
     * @return 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
     * 
     */
    public Optional<Output<String>> repeatMode() {
        return Optional.ofNullable(this.repeatMode);
    }

    /**
     * 任务开始时间。
     * 
     */
    @Import(name="startTime")
    private @Nullable Output<String> startTime;

    /**
     * @return 任务开始时间。
     * 
     */
    public Optional<Output<String>> startTime() {
        return Optional.ofNullable(this.startTime);
    }

    @Import(name="tags")
    private @Nullable Output<List<InvocationTagArgs>> tags;

    public Optional<Output<List<InvocationTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * 在ECS实例中执行命令的用户名称。
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return 在ECS实例中执行命令的用户名称。
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * 自定义windows用户的密码。
     * 
     */
    @Import(name="windowsPassword")
    private @Nullable Output<String> windowsPassword;

    /**
     * @return 自定义windows用户的密码。
     * 
     */
    public Optional<Output<String>> windowsPassword() {
        return Optional.ofNullable(this.windowsPassword);
    }

    /**
     * 创建的命令在ECS实例中运行的目录。
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private InvocationState() {}

    private InvocationState(InvocationState $) {
        this.commandContent = $.commandContent;
        this.commandDescription = $.commandDescription;
        this.commandId = $.commandId;
        this.commandName = $.commandName;
        this.commandProvider = $.commandProvider;
        this.commandType = $.commandType;
        this.enableParameter = $.enableParameter;
        this.endTime = $.endTime;
        this.frequency = $.frequency;
        this.instanceIds = $.instanceIds;
        this.instanceNumber = $.instanceNumber;
        this.invocationDescription = $.invocationDescription;
        this.invocationId = $.invocationId;
        this.invocationName = $.invocationName;
        this.invocationResults = $.invocationResults;
        this.invocationStatus = $.invocationStatus;
        this.launchTime = $.launchTime;
        this.parameterDefinitions = $.parameterDefinitions;
        this.parameters = $.parameters;
        this.projectName = $.projectName;
        this.recurrenceEndTime = $.recurrenceEndTime;
        this.repeatMode = $.repeatMode;
        this.startTime = $.startTime;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.username = $.username;
        this.windowsPassword = $.windowsPassword;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InvocationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InvocationState $;

        public Builder() {
            $ = new InvocationState();
        }

        public Builder(InvocationState defaults) {
            $ = new InvocationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param commandContent 命令内容。
         * 
         * @return builder
         * 
         */
        public Builder commandContent(@Nullable Output<String> commandContent) {
            $.commandContent = commandContent;
            return this;
        }

        /**
         * @param commandContent 命令内容。
         * 
         * @return builder
         * 
         */
        public Builder commandContent(String commandContent) {
            return commandContent(Output.of(commandContent));
        }

        /**
         * @param commandDescription 被调用命令的描述。
         * 
         * @return builder
         * 
         */
        public Builder commandDescription(@Nullable Output<String> commandDescription) {
            $.commandDescription = commandDescription;
            return this;
        }

        /**
         * @param commandDescription 被调用命令的描述。
         * 
         * @return builder
         * 
         */
        public Builder commandDescription(String commandDescription) {
            return commandDescription(Output.of(commandDescription));
        }

        /**
         * @param commandId 命令ID。
         * 
         * @return builder
         * 
         */
        public Builder commandId(@Nullable Output<String> commandId) {
            $.commandId = commandId;
            return this;
        }

        /**
         * @param commandId 命令ID。
         * 
         * @return builder
         * 
         */
        public Builder commandId(String commandId) {
            return commandId(Output.of(commandId));
        }

        /**
         * @param commandName 任务触发时的命令名称。
         * 
         * @return builder
         * 
         */
        public Builder commandName(@Nullable Output<String> commandName) {
            $.commandName = commandName;
            return this;
        }

        /**
         * @param commandName 任务触发时的命令名称。
         * 
         * @return builder
         * 
         */
        public Builder commandName(String commandName) {
            return commandName(Output.of(commandName));
        }

        /**
         * @param commandProvider 被调用命令的提供方。
         * 
         * @return builder
         * 
         */
        public Builder commandProvider(@Nullable Output<String> commandProvider) {
            $.commandProvider = commandProvider;
            return this;
        }

        /**
         * @param commandProvider 被调用命令的提供方。
         * 
         * @return builder
         * 
         */
        public Builder commandProvider(String commandProvider) {
            return commandProvider(Output.of(commandProvider));
        }

        /**
         * @param commandType 作业触发的命令类型。
         * 
         * @return builder
         * 
         */
        public Builder commandType(@Nullable Output<String> commandType) {
            $.commandType = commandType;
            return this;
        }

        /**
         * @param commandType 作业触发的命令类型。
         * 
         * @return builder
         * 
         */
        public Builder commandType(String commandType) {
            return commandType(Output.of(commandType));
        }

        /**
         * @param enableParameter 被调用命令是否使用自定义参数。true：已启用。false：未启用。
         * 
         * @return builder
         * 
         */
        public Builder enableParameter(@Nullable Output<Boolean> enableParameter) {
            $.enableParameter = enableParameter;
            return this;
        }

        /**
         * @param enableParameter 被调用命令是否使用自定义参数。true：已启用。false：未启用。
         * 
         * @return builder
         * 
         */
        public Builder enableParameter(Boolean enableParameter) {
            return enableParameter(Output.of(enableParameter));
        }

        /**
         * @param endTime 任务结束时间。
         * 
         * @return builder
         * 
         */
        public Builder endTime(@Nullable Output<String> endTime) {
            $.endTime = endTime;
            return this;
        }

        /**
         * @param endTime 任务结束时间。
         * 
         * @return builder
         * 
         */
        public Builder endTime(String endTime) {
            return endTime(Output.of(endTime));
        }

        /**
         * @param frequency 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
         * 
         * @return builder
         * 
         */
        public Builder frequency(@Nullable Output<String> frequency) {
            $.frequency = frequency;
            return this;
        }

        /**
         * @param frequency 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
         * 
         * @return builder
         * 
         */
        public Builder frequency(String frequency) {
            return frequency(Output.of(frequency));
        }

        /**
         * @param instanceIds 实例ID列表，最多支持200个ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(@Nullable Output<List<String>> instanceIds) {
            $.instanceIds = instanceIds;
            return this;
        }

        /**
         * @param instanceIds 实例ID列表，最多支持200个ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(List<String> instanceIds) {
            return instanceIds(Output.of(instanceIds));
        }

        /**
         * @param instanceIds 实例ID列表，最多支持200个ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }

        /**
         * @param instanceNumber 执行实例数量。
         * 
         * @return builder
         * 
         */
        public Builder instanceNumber(@Nullable Output<Integer> instanceNumber) {
            $.instanceNumber = instanceNumber;
            return this;
        }

        /**
         * @param instanceNumber 执行实例数量。
         * 
         * @return builder
         * 
         */
        public Builder instanceNumber(Integer instanceNumber) {
            return instanceNumber(Output.of(instanceNumber));
        }

        /**
         * @param invocationDescription 作业描述，默认为空字符串，不超过256个字符。
         * 
         * @return builder
         * 
         */
        public Builder invocationDescription(@Nullable Output<String> invocationDescription) {
            $.invocationDescription = invocationDescription;
            return this;
        }

        /**
         * @param invocationDescription 作业描述，默认为空字符串，不超过256个字符。
         * 
         * @return builder
         * 
         */
        public Builder invocationDescription(String invocationDescription) {
            return invocationDescription(Output.of(invocationDescription));
        }

        /**
         * @param invocationId 任务执行 ID。
         * 
         * @return builder
         * 
         */
        public Builder invocationId(@Nullable Output<String> invocationId) {
            $.invocationId = invocationId;
            return this;
        }

        /**
         * @param invocationId 任务执行 ID。
         * 
         * @return builder
         * 
         */
        public Builder invocationId(String invocationId) {
            return invocationId(Output.of(invocationId));
        }

        /**
         * @param invocationName 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
         * 
         * @return builder
         * 
         */
        public Builder invocationName(@Nullable Output<String> invocationName) {
            $.invocationName = invocationName;
            return this;
        }

        /**
         * @param invocationName 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
         * 
         * @return builder
         * 
         */
        public Builder invocationName(String invocationName) {
            return invocationName(Output.of(invocationName));
        }

        public Builder invocationResults(@Nullable Output<List<InvocationInvocationResultArgs>> invocationResults) {
            $.invocationResults = invocationResults;
            return this;
        }

        public Builder invocationResults(List<InvocationInvocationResultArgs> invocationResults) {
            return invocationResults(Output.of(invocationResults));
        }

        public Builder invocationResults(InvocationInvocationResultArgs... invocationResults) {
            return invocationResults(List.of(invocationResults));
        }

        /**
         * @param invocationStatus 命令执行的总执行状态。
         * 
         * @return builder
         * 
         */
        public Builder invocationStatus(@Nullable Output<String> invocationStatus) {
            $.invocationStatus = invocationStatus;
            return this;
        }

        /**
         * @param invocationStatus 命令执行的总执行状态。
         * 
         * @return builder
         * 
         */
        public Builder invocationStatus(String invocationStatus) {
            return invocationStatus(Output.of(invocationStatus));
        }

        /**
         * @param launchTime 执行时间。
         * 
         * @return builder
         * 
         */
        public Builder launchTime(@Nullable Output<String> launchTime) {
            $.launchTime = launchTime;
            return this;
        }

        /**
         * @param launchTime 执行时间。
         * 
         * @return builder
         * 
         */
        public Builder launchTime(String launchTime) {
            return launchTime(Output.of(launchTime));
        }

        public Builder parameterDefinitions(@Nullable Output<List<InvocationParameterDefinitionArgs>> parameterDefinitions) {
            $.parameterDefinitions = parameterDefinitions;
            return this;
        }

        public Builder parameterDefinitions(List<InvocationParameterDefinitionArgs> parameterDefinitions) {
            return parameterDefinitions(Output.of(parameterDefinitions));
        }

        public Builder parameterDefinitions(InvocationParameterDefinitionArgs... parameterDefinitions) {
            return parameterDefinitions(List.of(parameterDefinitions));
        }

        /**
         * @param parameters 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
         * 
         * @return builder
         * 
         */
        public Builder parameters(@Nullable Output<String> parameters) {
            $.parameters = parameters;
            return this;
        }

        /**
         * @param parameters 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
         * 
         * @return builder
         * 
         */
        public Builder parameters(String parameters) {
            return parameters(Output.of(parameters));
        }

        /**
         * @param projectName 资源所属项目，一个资源只能归属于一个项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 资源所属项目，一个资源只能归属于一个项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param recurrenceEndTime 周期结束时间，仅适用于周期任务（Rate）。
         * 
         * @return builder
         * 
         */
        public Builder recurrenceEndTime(@Nullable Output<String> recurrenceEndTime) {
            $.recurrenceEndTime = recurrenceEndTime;
            return this;
        }

        /**
         * @param recurrenceEndTime 周期结束时间，仅适用于周期任务（Rate）。
         * 
         * @return builder
         * 
         */
        public Builder recurrenceEndTime(String recurrenceEndTime) {
            return recurrenceEndTime(Output.of(recurrenceEndTime));
        }

        /**
         * @param repeatMode 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
         * 
         * @return builder
         * 
         */
        public Builder repeatMode(@Nullable Output<String> repeatMode) {
            $.repeatMode = repeatMode;
            return this;
        }

        /**
         * @param repeatMode 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
         * 
         * @return builder
         * 
         */
        public Builder repeatMode(String repeatMode) {
            return repeatMode(Output.of(repeatMode));
        }

        /**
         * @param startTime 任务开始时间。
         * 
         * @return builder
         * 
         */
        public Builder startTime(@Nullable Output<String> startTime) {
            $.startTime = startTime;
            return this;
        }

        /**
         * @param startTime 任务开始时间。
         * 
         * @return builder
         * 
         */
        public Builder startTime(String startTime) {
            return startTime(Output.of(startTime));
        }

        public Builder tags(@Nullable Output<List<InvocationTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<InvocationTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(InvocationTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeout 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param username 在ECS实例中执行命令的用户名称。
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username 在ECS实例中执行命令的用户名称。
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param windowsPassword 自定义windows用户的密码。
         * 
         * @return builder
         * 
         */
        public Builder windowsPassword(@Nullable Output<String> windowsPassword) {
            $.windowsPassword = windowsPassword;
            return this;
        }

        /**
         * @param windowsPassword 自定义windows用户的密码。
         * 
         * @return builder
         * 
         */
        public Builder windowsPassword(String windowsPassword) {
            return windowsPassword(Output.of(windowsPassword));
        }

        /**
         * @param workingDir 创建的命令在ECS实例中运行的目录。
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir 创建的命令在ECS实例中运行的目录。
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public InvocationState build() {
            return $;
        }
    }

}
