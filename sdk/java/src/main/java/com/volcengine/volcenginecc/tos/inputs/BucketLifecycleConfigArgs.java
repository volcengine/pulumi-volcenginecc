// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigAbortInCompleteMultipartUploadArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigExpirationArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigFilterArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigNoCurrentVersionExpirationArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigNonCurrentVersionTransitionArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigTagArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigTransitionArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigArgs Empty = new BucketLifecycleConfigArgs();

    /**
     * 指定未合并的分片任务（碎片）的过期属性。
     * 
     */
    @Import(name="abortInCompleteMultipartUpload")
    private @Nullable Output<BucketLifecycleConfigAbortInCompleteMultipartUploadArgs> abortInCompleteMultipartUpload;

    /**
     * @return 指定未合并的分片任务（碎片）的过期属性。
     * 
     */
    public Optional<Output<BucketLifecycleConfigAbortInCompleteMultipartUploadArgs>> abortInCompleteMultipartUpload() {
        return Optional.ofNullable(this.abortInCompleteMultipartUpload);
    }

    /**
     * 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
     * 
     */
    @Import(name="expiration")
    private @Nullable Output<BucketLifecycleConfigExpirationArgs> expiration;

    /**
     * @return 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
     * 
     */
    public Optional<Output<BucketLifecycleConfigExpirationArgs>> expiration() {
        return Optional.ofNullable(this.expiration);
    }

    /**
     * 指定规则生效的过滤条件。
     * 
     */
    @Import(name="filter")
    private @Nullable Output<BucketLifecycleConfigFilterArgs> filter;

    /**
     * @return 指定规则生效的过滤条件。
     * 
     */
    public Optional<Output<BucketLifecycleConfigFilterArgs>> filter() {
        return Optional.ofNullable(this.filter);
    }

    /**
     * 规则 ID。
     * 
     */
    @Import(name="lifecycleRuleId")
    private @Nullable Output<String> lifecycleRuleId;

    /**
     * @return 规则 ID。
     * 
     */
    public Optional<Output<String>> lifecycleRuleId() {
        return Optional.ofNullable(this.lifecycleRuleId);
    }

    @Import(name="noCurrentVersionExpiration")
    private @Nullable Output<BucketLifecycleConfigNoCurrentVersionExpirationArgs> noCurrentVersionExpiration;

    public Optional<Output<BucketLifecycleConfigNoCurrentVersionExpirationArgs>> noCurrentVersionExpiration() {
        return Optional.ofNullable(this.noCurrentVersionExpiration);
    }

    @Import(name="nonCurrentVersionTransitions")
    private @Nullable Output<List<BucketLifecycleConfigNonCurrentVersionTransitionArgs>> nonCurrentVersionTransitions;

    public Optional<Output<List<BucketLifecycleConfigNonCurrentVersionTransitionArgs>>> nonCurrentVersionTransitions() {
        return Optional.ofNullable(this.nonCurrentVersionTransitions);
    }

    /**
     * 规则所适用的前缀。
     * 
     */
    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    /**
     * @return 规则所适用的前缀。
     * 
     */
    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * 是否启用规则。包括Enabled、Disabled。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 是否启用规则。包括Enabled、Disabled。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<BucketLifecycleConfigTagArgs>> tags;

    public Optional<Output<List<BucketLifecycleConfigTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    @Import(name="transitions")
    private @Nullable Output<List<BucketLifecycleConfigTransitionArgs>> transitions;

    public Optional<Output<List<BucketLifecycleConfigTransitionArgs>>> transitions() {
        return Optional.ofNullable(this.transitions);
    }

    private BucketLifecycleConfigArgs() {}

    private BucketLifecycleConfigArgs(BucketLifecycleConfigArgs $) {
        this.abortInCompleteMultipartUpload = $.abortInCompleteMultipartUpload;
        this.expiration = $.expiration;
        this.filter = $.filter;
        this.lifecycleRuleId = $.lifecycleRuleId;
        this.noCurrentVersionExpiration = $.noCurrentVersionExpiration;
        this.nonCurrentVersionTransitions = $.nonCurrentVersionTransitions;
        this.prefix = $.prefix;
        this.status = $.status;
        this.tags = $.tags;
        this.transitions = $.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigArgs $;

        public Builder() {
            $ = new BucketLifecycleConfigArgs();
        }

        public Builder(BucketLifecycleConfigArgs defaults) {
            $ = new BucketLifecycleConfigArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param abortInCompleteMultipartUpload 指定未合并的分片任务（碎片）的过期属性。
         * 
         * @return builder
         * 
         */
        public Builder abortInCompleteMultipartUpload(@Nullable Output<BucketLifecycleConfigAbortInCompleteMultipartUploadArgs> abortInCompleteMultipartUpload) {
            $.abortInCompleteMultipartUpload = abortInCompleteMultipartUpload;
            return this;
        }

        /**
         * @param abortInCompleteMultipartUpload 指定未合并的分片任务（碎片）的过期属性。
         * 
         * @return builder
         * 
         */
        public Builder abortInCompleteMultipartUpload(BucketLifecycleConfigAbortInCompleteMultipartUploadArgs abortInCompleteMultipartUpload) {
            return abortInCompleteMultipartUpload(Output.of(abortInCompleteMultipartUpload));
        }

        /**
         * @param expiration 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
         * 
         * @return builder
         * 
         */
        public Builder expiration(@Nullable Output<BucketLifecycleConfigExpirationArgs> expiration) {
            $.expiration = expiration;
            return this;
        }

        /**
         * @param expiration 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
         * 
         * @return builder
         * 
         */
        public Builder expiration(BucketLifecycleConfigExpirationArgs expiration) {
            return expiration(Output.of(expiration));
        }

        /**
         * @param filter 指定规则生效的过滤条件。
         * 
         * @return builder
         * 
         */
        public Builder filter(@Nullable Output<BucketLifecycleConfigFilterArgs> filter) {
            $.filter = filter;
            return this;
        }

        /**
         * @param filter 指定规则生效的过滤条件。
         * 
         * @return builder
         * 
         */
        public Builder filter(BucketLifecycleConfigFilterArgs filter) {
            return filter(Output.of(filter));
        }

        /**
         * @param lifecycleRuleId 规则 ID。
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRuleId(@Nullable Output<String> lifecycleRuleId) {
            $.lifecycleRuleId = lifecycleRuleId;
            return this;
        }

        /**
         * @param lifecycleRuleId 规则 ID。
         * 
         * @return builder
         * 
         */
        public Builder lifecycleRuleId(String lifecycleRuleId) {
            return lifecycleRuleId(Output.of(lifecycleRuleId));
        }

        public Builder noCurrentVersionExpiration(@Nullable Output<BucketLifecycleConfigNoCurrentVersionExpirationArgs> noCurrentVersionExpiration) {
            $.noCurrentVersionExpiration = noCurrentVersionExpiration;
            return this;
        }

        public Builder noCurrentVersionExpiration(BucketLifecycleConfigNoCurrentVersionExpirationArgs noCurrentVersionExpiration) {
            return noCurrentVersionExpiration(Output.of(noCurrentVersionExpiration));
        }

        public Builder nonCurrentVersionTransitions(@Nullable Output<List<BucketLifecycleConfigNonCurrentVersionTransitionArgs>> nonCurrentVersionTransitions) {
            $.nonCurrentVersionTransitions = nonCurrentVersionTransitions;
            return this;
        }

        public Builder nonCurrentVersionTransitions(List<BucketLifecycleConfigNonCurrentVersionTransitionArgs> nonCurrentVersionTransitions) {
            return nonCurrentVersionTransitions(Output.of(nonCurrentVersionTransitions));
        }

        public Builder nonCurrentVersionTransitions(BucketLifecycleConfigNonCurrentVersionTransitionArgs... nonCurrentVersionTransitions) {
            return nonCurrentVersionTransitions(List.of(nonCurrentVersionTransitions));
        }

        /**
         * @param prefix 规则所适用的前缀。
         * 
         * @return builder
         * 
         */
        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        /**
         * @param prefix 规则所适用的前缀。
         * 
         * @return builder
         * 
         */
        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param status 是否启用规则。包括Enabled、Disabled。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 是否启用规则。包括Enabled、Disabled。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<BucketLifecycleConfigTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<BucketLifecycleConfigTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(BucketLifecycleConfigTagArgs... tags) {
            return tags(List.of(tags));
        }

        public Builder transitions(@Nullable Output<List<BucketLifecycleConfigTransitionArgs>> transitions) {
            $.transitions = transitions;
            return this;
        }

        public Builder transitions(List<BucketLifecycleConfigTransitionArgs> transitions) {
            return transitions(Output.of(transitions));
        }

        public Builder transitions(BucketLifecycleConfigTransitionArgs... transitions) {
            return transitions(List.of(transitions));
        }

        public BucketLifecycleConfigArgs build() {
            return $;
        }
    }

}
