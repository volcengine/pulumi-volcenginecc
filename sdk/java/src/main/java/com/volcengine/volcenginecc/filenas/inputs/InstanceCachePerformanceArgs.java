// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.filenas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceCachePerformanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceCachePerformanceArgs Empty = new InstanceCachePerformanceArgs();

    /**
     * 预配置带宽，用于增加文件系统带宽。
     * 
     */
    @Import(name="cacheBandwidth")
    private @Nullable Output<Integer> cacheBandwidth;

    /**
     * @return 预配置带宽，用于增加文件系统带宽。
     * 
     */
    public Optional<Output<Integer>> cacheBandwidth() {
        return Optional.ofNullable(this.cacheBandwidth);
    }

    private InstanceCachePerformanceArgs() {}

    private InstanceCachePerformanceArgs(InstanceCachePerformanceArgs $) {
        this.cacheBandwidth = $.cacheBandwidth;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceCachePerformanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceCachePerformanceArgs $;

        public Builder() {
            $ = new InstanceCachePerformanceArgs();
        }

        public Builder(InstanceCachePerformanceArgs defaults) {
            $ = new InstanceCachePerformanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cacheBandwidth 预配置带宽，用于增加文件系统带宽。
         * 
         * @return builder
         * 
         */
        public Builder cacheBandwidth(@Nullable Output<Integer> cacheBandwidth) {
            $.cacheBandwidth = cacheBandwidth;
            return this;
        }

        /**
         * @param cacheBandwidth 预配置带宽，用于增加文件系统带宽。
         * 
         * @return builder
         * 
         */
        public Builder cacheBandwidth(Integer cacheBandwidth) {
            return cacheBandwidth(Output.of(cacheBandwidth));
        }

        public InstanceCachePerformanceArgs build() {
            return $;
        }
    }

}
