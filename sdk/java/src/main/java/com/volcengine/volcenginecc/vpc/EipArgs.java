// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.inputs.EipTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EipArgs extends com.pulumi.resources.ResourceArgs {

    public static final EipArgs Empty = new EipArgs();

    /**
     * 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
     * 
     */
    @Import(name="bandwidthPackageId")
    private @Nullable Output<String> bandwidthPackageId;

    /**
     * @return 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
     * 
     */
    public Optional<Output<String>> bandwidthPackageId() {
        return Optional.ofNullable(this.bandwidthPackageId);
    }

    /**
     * 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
     * 
     */
    @Import(name="billingType", required=true)
    private Output<Integer> billingType;

    /**
     * @return 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
     * 
     */
    public Output<Integer> billingType() {
        return this.billingType;
    }

    /**
     * 公网IP的描述信息。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 公网IP的描述信息。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
     * 
     */
    @Import(name="directMode")
    private @Nullable Output<Boolean> directMode;

    /**
     * @return 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
     * 
     */
    public Optional<Output<Boolean>> directMode() {
        return Optional.ofNullable(this.directMode);
    }

    /**
     * 当前绑定的实例ID。
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return 当前绑定的实例ID。
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
     * 
     */
    @Import(name="instanceType")
    private @Nullable Output<String> instanceType;

    /**
     * @return 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
     * 
     */
    public Optional<Output<String>> instanceType() {
        return Optional.ofNullable(this.instanceType);
    }

    /**
     * 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
     * 
     */
    @Import(name="ipAddress")
    private @Nullable Output<String> ipAddress;

    /**
     * @return 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
     * 
     */
    public Optional<Output<String>> ipAddress() {
        return Optional.ofNullable(this.ipAddress);
    }

    /**
     * IP地址池的ID。
     * 
     */
    @Import(name="ipAddressPoolId")
    private @Nullable Output<String> ipAddressPoolId;

    /**
     * @return IP地址池的ID。
     * 
     */
    public Optional<Output<String>> ipAddressPoolId() {
        return Optional.ofNullable(this.ipAddressPoolId);
    }

    /**
     * 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
     * 
     */
    @Import(name="isp")
    private @Nullable Output<String> isp;

    /**
     * @return 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
     * 
     */
    public Optional<Output<String>> isp() {
        return Optional.ofNullable(this.isp);
    }

    /**
     * 公网IP的名称。
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return 公网IP的名称。
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<Integer> periodUnit;

    /**
     * @return 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
     * 
     */
    public Optional<Output<Integer>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
     * 
     */
    @Import(name="privateIpAddress")
    private @Nullable Output<String> privateIpAddress;

    /**
     * @return 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
     * 
     */
    public Optional<Output<String>> privateIpAddress() {
        return Optional.ofNullable(this.privateIpAddress);
    }

    /**
     * 公网IP所属项目的名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 公网IP所属项目的名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
     * 
     */
    @Import(name="releaseWithInstance")
    private @Nullable Output<Boolean> releaseWithInstance;

    /**
     * @return 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
     * 
     */
    public Optional<Output<Boolean>> releaseWithInstance() {
        return Optional.ofNullable(this.releaseWithInstance);
    }

    /**
     * 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
     * 
     */
    @Import(name="renewPeriodTimes")
    private @Nullable Output<Integer> renewPeriodTimes;

    /**
     * @return 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
     * 
     */
    public Optional<Output<Integer>> renewPeriodTimes() {
        return Optional.ofNullable(this.renewPeriodTimes);
    }

    /**
     * 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
     * 
     */
    @Import(name="renewType")
    private @Nullable Output<Integer> renewType;

    /**
     * @return 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
     * 
     */
    public Optional<Output<Integer>> renewType() {
        return Optional.ofNullable(this.renewType);
    }

    /**
     * DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
     * 
     */
    @Import(name="securityProtectionInstanceId")
    private @Nullable Output<Integer> securityProtectionInstanceId;

    /**
     * @return DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
     * 
     */
    public Optional<Output<Integer>> securityProtectionInstanceId() {
        return Optional.ofNullable(this.securityProtectionInstanceId);
    }

    /**
     * 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
     * 
     */
    @Import(name="securityProtectionTypes")
    private @Nullable Output<List<String>> securityProtectionTypes;

    /**
     * @return 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
     * 
     */
    public Optional<Output<List<String>>> securityProtectionTypes() {
        return Optional.ofNullable(this.securityProtectionTypes);
    }

    /**
     * 是否由服务管理
     * 
     */
    @Import(name="serviceManaged")
    private @Nullable Output<Boolean> serviceManaged;

    /**
     * @return 是否由服务管理
     * 
     */
    public Optional<Output<Boolean>> serviceManaged() {
        return Optional.ofNullable(this.serviceManaged);
    }

    @Import(name="tags")
    private @Nullable Output<List<EipTagArgs>> tags;

    public Optional<Output<List<EipTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private EipArgs() {}

    private EipArgs(EipArgs $) {
        this.bandwidth = $.bandwidth;
        this.bandwidthPackageId = $.bandwidthPackageId;
        this.billingType = $.billingType;
        this.description = $.description;
        this.directMode = $.directMode;
        this.instanceId = $.instanceId;
        this.instanceType = $.instanceType;
        this.ipAddress = $.ipAddress;
        this.ipAddressPoolId = $.ipAddressPoolId;
        this.isp = $.isp;
        this.name = $.name;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.privateIpAddress = $.privateIpAddress;
        this.projectName = $.projectName;
        this.releaseWithInstance = $.releaseWithInstance;
        this.renewPeriodTimes = $.renewPeriodTimes;
        this.renewType = $.renewType;
        this.securityProtectionInstanceId = $.securityProtectionInstanceId;
        this.securityProtectionTypes = $.securityProtectionTypes;
        this.serviceManaged = $.serviceManaged;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EipArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EipArgs $;

        public Builder() {
            $ = new EipArgs();
        }

        public Builder(EipArgs defaults) {
            $ = new EipArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param bandwidthPackageId 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(@Nullable Output<String> bandwidthPackageId) {
            $.bandwidthPackageId = bandwidthPackageId;
            return this;
        }

        /**
         * @param bandwidthPackageId 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            return bandwidthPackageId(Output.of(bandwidthPackageId));
        }

        /**
         * @param billingType 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
         * 
         * @return builder
         * 
         */
        public Builder billingType(Output<Integer> billingType) {
            $.billingType = billingType;
            return this;
        }

        /**
         * @param billingType 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
         * 
         * @return builder
         * 
         */
        public Builder billingType(Integer billingType) {
            return billingType(Output.of(billingType));
        }

        /**
         * @param description 公网IP的描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 公网IP的描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param directMode 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
         * 
         * @return builder
         * 
         */
        public Builder directMode(@Nullable Output<Boolean> directMode) {
            $.directMode = directMode;
            return this;
        }

        /**
         * @param directMode 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
         * 
         * @return builder
         * 
         */
        public Builder directMode(Boolean directMode) {
            return directMode(Output.of(directMode));
        }

        /**
         * @param instanceId 当前绑定的实例ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId 当前绑定的实例ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param instanceType 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
         * 
         * @return builder
         * 
         */
        public Builder instanceType(@Nullable Output<String> instanceType) {
            $.instanceType = instanceType;
            return this;
        }

        /**
         * @param instanceType 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
         * 
         * @return builder
         * 
         */
        public Builder instanceType(String instanceType) {
            return instanceType(Output.of(instanceType));
        }

        /**
         * @param ipAddress 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(@Nullable Output<String> ipAddress) {
            $.ipAddress = ipAddress;
            return this;
        }

        /**
         * @param ipAddress 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
         * 
         * @return builder
         * 
         */
        public Builder ipAddress(String ipAddress) {
            return ipAddress(Output.of(ipAddress));
        }

        /**
         * @param ipAddressPoolId IP地址池的ID。
         * 
         * @return builder
         * 
         */
        public Builder ipAddressPoolId(@Nullable Output<String> ipAddressPoolId) {
            $.ipAddressPoolId = ipAddressPoolId;
            return this;
        }

        /**
         * @param ipAddressPoolId IP地址池的ID。
         * 
         * @return builder
         * 
         */
        public Builder ipAddressPoolId(String ipAddressPoolId) {
            return ipAddressPoolId(Output.of(ipAddressPoolId));
        }

        /**
         * @param isp 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
         * 
         * @return builder
         * 
         */
        public Builder isp(@Nullable Output<String> isp) {
            $.isp = isp;
            return this;
        }

        /**
         * @param isp 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
         * 
         * @return builder
         * 
         */
        public Builder isp(String isp) {
            return isp(Output.of(isp));
        }

        /**
         * @param name 公网IP的名称。
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 公网IP的名称。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param period 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<Integer> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(Integer periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param privateIpAddress 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(@Nullable Output<String> privateIpAddress) {
            $.privateIpAddress = privateIpAddress;
            return this;
        }

        /**
         * @param privateIpAddress 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
         * 
         * @return builder
         * 
         */
        public Builder privateIpAddress(String privateIpAddress) {
            return privateIpAddress(Output.of(privateIpAddress));
        }

        /**
         * @param projectName 公网IP所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 公网IP所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param releaseWithInstance 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
         * 
         * @return builder
         * 
         */
        public Builder releaseWithInstance(@Nullable Output<Boolean> releaseWithInstance) {
            $.releaseWithInstance = releaseWithInstance;
            return this;
        }

        /**
         * @param releaseWithInstance 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
         * 
         * @return builder
         * 
         */
        public Builder releaseWithInstance(Boolean releaseWithInstance) {
            return releaseWithInstance(Output.of(releaseWithInstance));
        }

        /**
         * @param renewPeriodTimes 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
         * 
         * @return builder
         * 
         */
        public Builder renewPeriodTimes(@Nullable Output<Integer> renewPeriodTimes) {
            $.renewPeriodTimes = renewPeriodTimes;
            return this;
        }

        /**
         * @param renewPeriodTimes 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
         * 
         * @return builder
         * 
         */
        public Builder renewPeriodTimes(Integer renewPeriodTimes) {
            return renewPeriodTimes(Output.of(renewPeriodTimes));
        }

        /**
         * @param renewType 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
         * 
         * @return builder
         * 
         */
        public Builder renewType(@Nullable Output<Integer> renewType) {
            $.renewType = renewType;
            return this;
        }

        /**
         * @param renewType 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
         * 
         * @return builder
         * 
         */
        public Builder renewType(Integer renewType) {
            return renewType(Output.of(renewType));
        }

        /**
         * @param securityProtectionInstanceId DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionInstanceId(@Nullable Output<Integer> securityProtectionInstanceId) {
            $.securityProtectionInstanceId = securityProtectionInstanceId;
            return this;
        }

        /**
         * @param securityProtectionInstanceId DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionInstanceId(Integer securityProtectionInstanceId) {
            return securityProtectionInstanceId(Output.of(securityProtectionInstanceId));
        }

        /**
         * @param securityProtectionTypes 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionTypes(@Nullable Output<List<String>> securityProtectionTypes) {
            $.securityProtectionTypes = securityProtectionTypes;
            return this;
        }

        /**
         * @param securityProtectionTypes 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionTypes(List<String> securityProtectionTypes) {
            return securityProtectionTypes(Output.of(securityProtectionTypes));
        }

        /**
         * @param securityProtectionTypes 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionTypes(String... securityProtectionTypes) {
            return securityProtectionTypes(List.of(securityProtectionTypes));
        }

        /**
         * @param serviceManaged 是否由服务管理
         * 
         * @return builder
         * 
         */
        public Builder serviceManaged(@Nullable Output<Boolean> serviceManaged) {
            $.serviceManaged = serviceManaged;
            return this;
        }

        /**
         * @param serviceManaged 是否由服务管理
         * 
         * @return builder
         * 
         */
        public Builder serviceManaged(Boolean serviceManaged) {
            return serviceManaged(Output.of(serviceManaged));
        }

        public Builder tags(@Nullable Output<List<EipTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<EipTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(EipTagArgs... tags) {
            return tags(List.of(tags));
        }

        public EipArgs build() {
            if ($.billingType == null) {
                throw new MissingRequiredPropertyException("EipArgs", "billingType");
            }
            return $;
        }
    }

}
