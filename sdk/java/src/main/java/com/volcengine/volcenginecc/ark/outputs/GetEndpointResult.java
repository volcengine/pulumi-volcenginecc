// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ark.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ark.outputs.GetEndpointCertificate;
import com.volcengine.volcenginecc.ark.outputs.GetEndpointModelReference;
import com.volcengine.volcenginecc.ark.outputs.GetEndpointModeration;
import com.volcengine.volcenginecc.ark.outputs.GetEndpointRateLimit;
import com.volcengine.volcenginecc.ark.outputs.GetEndpointTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEndpointResult {
    /**
     * @return 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
     * 
     */
    private Boolean batchOnly;
    /**
     * @return 证书信息。
     * 
     */
    private GetEndpointCertificate certificate;
    /**
     * @return 接入点创建时间，RFC3339格式。
     * 
     */
    private String createTime;
    /**
     * @return 接入点描述。
     * 
     */
    private String description;
    /**
     * @return 推理接入点的ID。
     * 
     */
    private String endpointId;
    /**
     * @return 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
     * 
     */
    private String endpointModelType;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 接入点接入模型。
     * 
     */
    private GetEndpointModelReference modelReference;
    /**
     * @return 模型单元，为空表示后付费；否则预付费。
     * 
     */
    private String modelUnitId;
    /**
     * @return 内容护栏方案。
     * 
     */
    private GetEndpointModeration moderation;
    /**
     * @return 接入点名称。
     * 
     */
    private String name;
    /**
     * @return 资源所属的项目名称，默认值为default。
     * 
     */
    private String projectName;
    /**
     * @return 接入点限流。
     * 
     */
    private GetEndpointRateLimit rateLimit;
    /**
     * @return 接入点切换的Id。
     * 
     */
    private String rollingId;
    /**
     * @return 如果存在 TPM 保障包，则为 TPM 保障包 ID。
     * 
     */
    private String scaleTierId;
    /**
     * @return 接入点状态。
     * 
     */
    private String status;
    /**
     * @return 状态附加说明信息。
     * 
     */
    private String statusReason;
    /**
     * @return 是否支持接入点切换模型版本。
     * 
     */
    private Boolean supportRolling;
    /**
     * @return 是否支持TPM保障包。
     * 
     */
    private Boolean supportScaleTier;
    /**
     * @return 接入点绑定的标签。
     * 
     */
    private List<GetEndpointTag> tags;
    /**
     * @return 接入点更新时间，RFC3339格式。
     * 
     */
    private String updateTime;

    private GetEndpointResult() {}
    /**
     * @return 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
     * 
     */
    public Boolean batchOnly() {
        return this.batchOnly;
    }
    /**
     * @return 证书信息。
     * 
     */
    public GetEndpointCertificate certificate() {
        return this.certificate;
    }
    /**
     * @return 接入点创建时间，RFC3339格式。
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return 接入点描述。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 推理接入点的ID。
     * 
     */
    public String endpointId() {
        return this.endpointId;
    }
    /**
     * @return 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
     * 
     */
    public String endpointModelType() {
        return this.endpointModelType;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 接入点接入模型。
     * 
     */
    public GetEndpointModelReference modelReference() {
        return this.modelReference;
    }
    /**
     * @return 模型单元，为空表示后付费；否则预付费。
     * 
     */
    public String modelUnitId() {
        return this.modelUnitId;
    }
    /**
     * @return 内容护栏方案。
     * 
     */
    public GetEndpointModeration moderation() {
        return this.moderation;
    }
    /**
     * @return 接入点名称。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 资源所属的项目名称，默认值为default。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 接入点限流。
     * 
     */
    public GetEndpointRateLimit rateLimit() {
        return this.rateLimit;
    }
    /**
     * @return 接入点切换的Id。
     * 
     */
    public String rollingId() {
        return this.rollingId;
    }
    /**
     * @return 如果存在 TPM 保障包，则为 TPM 保障包 ID。
     * 
     */
    public String scaleTierId() {
        return this.scaleTierId;
    }
    /**
     * @return 接入点状态。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 状态附加说明信息。
     * 
     */
    public String statusReason() {
        return this.statusReason;
    }
    /**
     * @return 是否支持接入点切换模型版本。
     * 
     */
    public Boolean supportRolling() {
        return this.supportRolling;
    }
    /**
     * @return 是否支持TPM保障包。
     * 
     */
    public Boolean supportScaleTier() {
        return this.supportScaleTier;
    }
    /**
     * @return 接入点绑定的标签。
     * 
     */
    public List<GetEndpointTag> tags() {
        return this.tags;
    }
    /**
     * @return 接入点更新时间，RFC3339格式。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEndpointResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean batchOnly;
        private GetEndpointCertificate certificate;
        private String createTime;
        private String description;
        private String endpointId;
        private String endpointModelType;
        private String id;
        private GetEndpointModelReference modelReference;
        private String modelUnitId;
        private GetEndpointModeration moderation;
        private String name;
        private String projectName;
        private GetEndpointRateLimit rateLimit;
        private String rollingId;
        private String scaleTierId;
        private String status;
        private String statusReason;
        private Boolean supportRolling;
        private Boolean supportScaleTier;
        private List<GetEndpointTag> tags;
        private String updateTime;
        public Builder() {}
        public Builder(GetEndpointResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.batchOnly = defaults.batchOnly;
    	      this.certificate = defaults.certificate;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.endpointId = defaults.endpointId;
    	      this.endpointModelType = defaults.endpointModelType;
    	      this.id = defaults.id;
    	      this.modelReference = defaults.modelReference;
    	      this.modelUnitId = defaults.modelUnitId;
    	      this.moderation = defaults.moderation;
    	      this.name = defaults.name;
    	      this.projectName = defaults.projectName;
    	      this.rateLimit = defaults.rateLimit;
    	      this.rollingId = defaults.rollingId;
    	      this.scaleTierId = defaults.scaleTierId;
    	      this.status = defaults.status;
    	      this.statusReason = defaults.statusReason;
    	      this.supportRolling = defaults.supportRolling;
    	      this.supportScaleTier = defaults.supportScaleTier;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder batchOnly(Boolean batchOnly) {
            if (batchOnly == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "batchOnly");
            }
            this.batchOnly = batchOnly;
            return this;
        }
        @CustomType.Setter
        public Builder certificate(GetEndpointCertificate certificate) {
            if (certificate == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "certificate");
            }
            this.certificate = certificate;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder endpointId(String endpointId) {
            if (endpointId == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "endpointId");
            }
            this.endpointId = endpointId;
            return this;
        }
        @CustomType.Setter
        public Builder endpointModelType(String endpointModelType) {
            if (endpointModelType == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "endpointModelType");
            }
            this.endpointModelType = endpointModelType;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder modelReference(GetEndpointModelReference modelReference) {
            if (modelReference == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "modelReference");
            }
            this.modelReference = modelReference;
            return this;
        }
        @CustomType.Setter
        public Builder modelUnitId(String modelUnitId) {
            if (modelUnitId == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "modelUnitId");
            }
            this.modelUnitId = modelUnitId;
            return this;
        }
        @CustomType.Setter
        public Builder moderation(GetEndpointModeration moderation) {
            if (moderation == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "moderation");
            }
            this.moderation = moderation;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder rateLimit(GetEndpointRateLimit rateLimit) {
            if (rateLimit == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "rateLimit");
            }
            this.rateLimit = rateLimit;
            return this;
        }
        @CustomType.Setter
        public Builder rollingId(String rollingId) {
            if (rollingId == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "rollingId");
            }
            this.rollingId = rollingId;
            return this;
        }
        @CustomType.Setter
        public Builder scaleTierId(String scaleTierId) {
            if (scaleTierId == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "scaleTierId");
            }
            this.scaleTierId = scaleTierId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusReason(String statusReason) {
            if (statusReason == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "statusReason");
            }
            this.statusReason = statusReason;
            return this;
        }
        @CustomType.Setter
        public Builder supportRolling(Boolean supportRolling) {
            if (supportRolling == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "supportRolling");
            }
            this.supportRolling = supportRolling;
            return this;
        }
        @CustomType.Setter
        public Builder supportScaleTier(Boolean supportScaleTier) {
            if (supportScaleTier == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "supportScaleTier");
            }
            this.supportScaleTier = supportScaleTier;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetEndpointTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetEndpointTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetEndpointResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetEndpointResult build() {
            final var _resultValue = new GetEndpointResult();
            _resultValue.batchOnly = batchOnly;
            _resultValue.certificate = certificate;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.endpointId = endpointId;
            _resultValue.endpointModelType = endpointModelType;
            _resultValue.id = id;
            _resultValue.modelReference = modelReference;
            _resultValue.modelUnitId = modelUnitId;
            _resultValue.moderation = moderation;
            _resultValue.name = name;
            _resultValue.projectName = projectName;
            _resultValue.rateLimit = rateLimit;
            _resultValue.rollingId = rollingId;
            _resultValue.scaleTierId = scaleTierId;
            _resultValue.status = status;
            _resultValue.statusReason = statusReason;
            _resultValue.supportRolling = supportRolling;
            _resultValue.supportScaleTier = supportScaleTier;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
