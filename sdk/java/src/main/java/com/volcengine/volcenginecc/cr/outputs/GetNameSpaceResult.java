// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.cr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNameSpaceResult {
    /**
     * @return 命名空间的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 命名空间名称。支持小写英文、数字、英文句号（.）、短划线（-）、下划线（_），标点符号不能出现在首位或末位，也不能连续输入。长度限制为 2～90 个字符。标准版实例：同一个镜像仓库实例下，名称必须唯一。体验版实例：同一地域下，所有火山引擎账号范围内的命名空间名称需要保持唯一。如果您设置的命名空间名称已被占用，请尝试其他名称或者 购买标准版实例。
     * 
     */
    private String name;
    /**
     * @return 命名空间所属项目的名称。参数值大小写敏感，不得超过 64 个字符。参数为空时，命名空间关联默认的 default项目。
     * 
     */
    private String project;
    /**
     * @return 命名空间下新建 OCI 制品仓库的默认公开属性，默认 Private。公开属性支持后续变更。Public：公开，不需要访问密钥，支持直接访问。Private：私有，需要输入访问密钥后才能够访问。
     * 
     */
    private String registry;

    private GetNameSpaceResult() {}
    /**
     * @return 命名空间的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 命名空间名称。支持小写英文、数字、英文句号（.）、短划线（-）、下划线（_），标点符号不能出现在首位或末位，也不能连续输入。长度限制为 2～90 个字符。标准版实例：同一个镜像仓库实例下，名称必须唯一。体验版实例：同一地域下，所有火山引擎账号范围内的命名空间名称需要保持唯一。如果您设置的命名空间名称已被占用，请尝试其他名称或者 购买标准版实例。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 命名空间所属项目的名称。参数值大小写敏感，不得超过 64 个字符。参数为空时，命名空间关联默认的 default项目。
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return 命名空间下新建 OCI 制品仓库的默认公开属性，默认 Private。公开属性支持后续变更。Public：公开，不需要访问密钥，支持直接访问。Private：私有，需要输入访问密钥后才能够访问。
     * 
     */
    public String registry() {
        return this.registry;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNameSpaceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdTime;
        private String id;
        private String name;
        private String project;
        private String registry;
        public Builder() {}
        public Builder(GetNameSpaceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdTime = defaults.createdTime;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.registry = defaults.registry;
        }

        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetNameSpaceResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNameSpaceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetNameSpaceResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetNameSpaceResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder registry(String registry) {
            if (registry == null) {
              throw new MissingRequiredPropertyException("GetNameSpaceResult", "registry");
            }
            this.registry = registry;
            return this;
        }
        public GetNameSpaceResult build() {
            final var _resultValue = new GetNameSpaceResult();
            _resultValue.createdTime = createdTime;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.registry = registry;
            return _resultValue;
        }
    }
}
