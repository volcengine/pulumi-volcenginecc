// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.vpc.inputs.BandwidthPackageEipAddressArgs;
import com.volcengine.volcenginecc.vpc.inputs.BandwidthPackageTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BandwidthPackageState extends com.pulumi.resources.ResourceArgs {

    public static final BandwidthPackageState Empty = new BandwidthPackageState();

    /**
     * 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
     * 
     */
    @Import(name="bandwidth")
    private @Nullable Output<Integer> bandwidth;

    /**
     * @return 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
     * 
     */
    public Optional<Output<Integer>> bandwidth() {
        return Optional.ofNullable(this.bandwidth);
    }

    /**
     * 带宽包ID
     * 
     */
    @Import(name="bandwidthPackageId")
    private @Nullable Output<String> bandwidthPackageId;

    /**
     * @return 带宽包ID
     * 
     */
    public Optional<Output<String>> bandwidthPackageId() {
        return Optional.ofNullable(this.bandwidthPackageId);
    }

    /**
     * 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
     * 
     */
    @Import(name="bandwidthPackageName")
    private @Nullable Output<String> bandwidthPackageName;

    /**
     * @return 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
     * 
     */
    public Optional<Output<String>> bandwidthPackageName() {
        return Optional.ofNullable(this.bandwidthPackageName);
    }

    /**
     * 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
     * 
     */
    @Import(name="billingType")
    private @Nullable Output<Integer> billingType;

    /**
     * @return 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
     * 
     */
    public Optional<Output<Integer>> billingType() {
        return Optional.ofNullable(this.billingType);
    }

    /**
     * 计费状态
     * 
     */
    @Import(name="businessStatus")
    private @Nullable Output<String> businessStatus;

    /**
     * @return 计费状态
     * 
     */
    public Optional<Output<String>> businessStatus() {
        return Optional.ofNullable(this.businessStatus);
    }

    /**
     * 创建时间
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 创建时间
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 删除时间
     * 
     */
    @Import(name="deletedTime")
    private @Nullable Output<String> deletedTime;

    /**
     * @return 删除时间
     * 
     */
    public Optional<Output<String>> deletedTime() {
        return Optional.ofNullable(this.deletedTime);
    }

    /**
     * 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="eipAddresses")
    private @Nullable Output<List<BandwidthPackageEipAddressArgs>> eipAddresses;

    public Optional<Output<List<BandwidthPackageEipAddressArgs>>> eipAddresses() {
        return Optional.ofNullable(this.eipAddresses);
    }

    /**
     * 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
     * 
     */
    @Import(name="enableDualStack")
    private @Nullable Output<Boolean> enableDualStack;

    /**
     * @return 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
     * 
     */
    public Optional<Output<Boolean>> enableDualStack() {
        return Optional.ofNullable(this.enableDualStack);
    }

    /**
     * 过期时间
     * 
     */
    @Import(name="expiredTime")
    private @Nullable Output<String> expiredTime;

    /**
     * @return 过期时间
     * 
     */
    public Optional<Output<String>> expiredTime() {
        return Optional.ofNullable(this.expiredTime);
    }

    /**
     * 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
     * 
     */
    @Import(name="isp")
    private @Nullable Output<String> isp;

    /**
     * @return 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
     * 
     */
    public Optional<Output<String>> isp() {
        return Optional.ofNullable(this.isp);
    }

    /**
     * 欠费时间
     * 
     */
    @Import(name="overdueTime")
    private @Nullable Output<String> overdueTime;

    /**
     * @return 欠费时间
     * 
     */
    public Optional<Output<String>> overdueTime() {
        return Optional.ofNullable(this.overdueTime);
    }

    /**
     * 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
     * 
     */
    @Import(name="period")
    private @Nullable Output<Integer> period;

    /**
     * @return 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
     * 
     */
    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    /**
     * 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
     * 
     */
    @Import(name="periodUnit")
    private @Nullable Output<Integer> periodUnit;

    /**
     * @return 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
     * 
     */
    public Optional<Output<Integer>> periodUnit() {
        return Optional.ofNullable(this.periodUnit);
    }

    /**
     * 项目名称，不填默认加入default项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 项目名称，不填默认加入default项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
     * 
     */
    @Import(name="ratio")
    private @Nullable Output<Integer> ratio;

    /**
     * @return 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
     * 
     */
    public Optional<Output<Integer>> ratio() {
        return Optional.ofNullable(this.ratio);
    }

    /**
     * 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
     * 
     */
    @Import(name="securityProtectionTypes")
    private @Nullable Output<List<String>> securityProtectionTypes;

    /**
     * @return 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
     * 
     */
    public Optional<Output<List<String>>> securityProtectionTypes() {
        return Optional.ofNullable(this.securityProtectionTypes);
    }

    /**
     * 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<BandwidthPackageTagArgs>> tags;

    public Optional<Output<List<BandwidthPackageTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 更新时间
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 更新时间
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private BandwidthPackageState() {}

    private BandwidthPackageState(BandwidthPackageState $) {
        this.bandwidth = $.bandwidth;
        this.bandwidthPackageId = $.bandwidthPackageId;
        this.bandwidthPackageName = $.bandwidthPackageName;
        this.billingType = $.billingType;
        this.businessStatus = $.businessStatus;
        this.createdTime = $.createdTime;
        this.deletedTime = $.deletedTime;
        this.description = $.description;
        this.eipAddresses = $.eipAddresses;
        this.enableDualStack = $.enableDualStack;
        this.expiredTime = $.expiredTime;
        this.isp = $.isp;
        this.overdueTime = $.overdueTime;
        this.period = $.period;
        this.periodUnit = $.periodUnit;
        this.projectName = $.projectName;
        this.protocol = $.protocol;
        this.ratio = $.ratio;
        this.securityProtectionTypes = $.securityProtectionTypes;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BandwidthPackageState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BandwidthPackageState $;

        public Builder() {
            $ = new BandwidthPackageState();
        }

        public Builder(BandwidthPackageState defaults) {
            $ = new BandwidthPackageState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bandwidth 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(@Nullable Output<Integer> bandwidth) {
            $.bandwidth = bandwidth;
            return this;
        }

        /**
         * @param bandwidth 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
         * 
         * @return builder
         * 
         */
        public Builder bandwidth(Integer bandwidth) {
            return bandwidth(Output.of(bandwidth));
        }

        /**
         * @param bandwidthPackageId 带宽包ID
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(@Nullable Output<String> bandwidthPackageId) {
            $.bandwidthPackageId = bandwidthPackageId;
            return this;
        }

        /**
         * @param bandwidthPackageId 带宽包ID
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            return bandwidthPackageId(Output.of(bandwidthPackageId));
        }

        /**
         * @param bandwidthPackageName 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageName(@Nullable Output<String> bandwidthPackageName) {
            $.bandwidthPackageName = bandwidthPackageName;
            return this;
        }

        /**
         * @param bandwidthPackageName 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
         * 
         * @return builder
         * 
         */
        public Builder bandwidthPackageName(String bandwidthPackageName) {
            return bandwidthPackageName(Output.of(bandwidthPackageName));
        }

        /**
         * @param billingType 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
         * 
         * @return builder
         * 
         */
        public Builder billingType(@Nullable Output<Integer> billingType) {
            $.billingType = billingType;
            return this;
        }

        /**
         * @param billingType 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
         * 
         * @return builder
         * 
         */
        public Builder billingType(Integer billingType) {
            return billingType(Output.of(billingType));
        }

        /**
         * @param businessStatus 计费状态
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(@Nullable Output<String> businessStatus) {
            $.businessStatus = businessStatus;
            return this;
        }

        /**
         * @param businessStatus 计费状态
         * 
         * @return builder
         * 
         */
        public Builder businessStatus(String businessStatus) {
            return businessStatus(Output.of(businessStatus));
        }

        /**
         * @param createdTime 创建时间
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 创建时间
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param deletedTime 删除时间
         * 
         * @return builder
         * 
         */
        public Builder deletedTime(@Nullable Output<String> deletedTime) {
            $.deletedTime = deletedTime;
            return this;
        }

        /**
         * @param deletedTime 删除时间
         * 
         * @return builder
         * 
         */
        public Builder deletedTime(String deletedTime) {
            return deletedTime(Output.of(deletedTime));
        }

        /**
         * @param description 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder eipAddresses(@Nullable Output<List<BandwidthPackageEipAddressArgs>> eipAddresses) {
            $.eipAddresses = eipAddresses;
            return this;
        }

        public Builder eipAddresses(List<BandwidthPackageEipAddressArgs> eipAddresses) {
            return eipAddresses(Output.of(eipAddresses));
        }

        public Builder eipAddresses(BandwidthPackageEipAddressArgs... eipAddresses) {
            return eipAddresses(List.of(eipAddresses));
        }

        /**
         * @param enableDualStack 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
         * 
         * @return builder
         * 
         */
        public Builder enableDualStack(@Nullable Output<Boolean> enableDualStack) {
            $.enableDualStack = enableDualStack;
            return this;
        }

        /**
         * @param enableDualStack 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
         * 
         * @return builder
         * 
         */
        public Builder enableDualStack(Boolean enableDualStack) {
            return enableDualStack(Output.of(enableDualStack));
        }

        /**
         * @param expiredTime 过期时间
         * 
         * @return builder
         * 
         */
        public Builder expiredTime(@Nullable Output<String> expiredTime) {
            $.expiredTime = expiredTime;
            return this;
        }

        /**
         * @param expiredTime 过期时间
         * 
         * @return builder
         * 
         */
        public Builder expiredTime(String expiredTime) {
            return expiredTime(Output.of(expiredTime));
        }

        /**
         * @param isp 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
         * 
         * @return builder
         * 
         */
        public Builder isp(@Nullable Output<String> isp) {
            $.isp = isp;
            return this;
        }

        /**
         * @param isp 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
         * 
         * @return builder
         * 
         */
        public Builder isp(String isp) {
            return isp(Output.of(isp));
        }

        /**
         * @param overdueTime 欠费时间
         * 
         * @return builder
         * 
         */
        public Builder overdueTime(@Nullable Output<String> overdueTime) {
            $.overdueTime = overdueTime;
            return this;
        }

        /**
         * @param overdueTime 欠费时间
         * 
         * @return builder
         * 
         */
        public Builder overdueTime(String overdueTime) {
            return overdueTime(Output.of(overdueTime));
        }

        /**
         * @param period 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
         * 
         * @return builder
         * 
         */
        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        /**
         * @param period 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
         * 
         * @return builder
         * 
         */
        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        /**
         * @param periodUnit 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(@Nullable Output<Integer> periodUnit) {
            $.periodUnit = periodUnit;
            return this;
        }

        /**
         * @param periodUnit 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
         * 
         * @return builder
         * 
         */
        public Builder periodUnit(Integer periodUnit) {
            return periodUnit(Output.of(periodUnit));
        }

        /**
         * @param projectName 项目名称，不填默认加入default项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 项目名称，不填默认加入default项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param protocol 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param ratio 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
         * 
         * @return builder
         * 
         */
        public Builder ratio(@Nullable Output<Integer> ratio) {
            $.ratio = ratio;
            return this;
        }

        /**
         * @param ratio 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
         * 
         * @return builder
         * 
         */
        public Builder ratio(Integer ratio) {
            return ratio(Output.of(ratio));
        }

        /**
         * @param securityProtectionTypes 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionTypes(@Nullable Output<List<String>> securityProtectionTypes) {
            $.securityProtectionTypes = securityProtectionTypes;
            return this;
        }

        /**
         * @param securityProtectionTypes 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionTypes(List<String> securityProtectionTypes) {
            return securityProtectionTypes(Output.of(securityProtectionTypes));
        }

        /**
         * @param securityProtectionTypes 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
         * 
         * @return builder
         * 
         */
        public Builder securityProtectionTypes(String... securityProtectionTypes) {
            return securityProtectionTypes(List.of(securityProtectionTypes));
        }

        /**
         * @param status 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<BandwidthPackageTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<BandwidthPackageTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(BandwidthPackageTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedTime 更新时间
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 更新时间
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public BandwidthPackageState build() {
            return $;
        }
    }

}
