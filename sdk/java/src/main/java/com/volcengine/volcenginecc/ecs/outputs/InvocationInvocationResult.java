// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InvocationInvocationResult {
    /**
     * @return 命令ID。
     * 
     */
    private @Nullable String commandId;
    /**
     * @return 命令执行的完成时间。
     * 
     */
    private @Nullable String endTime;
    /**
     * @return 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
     * 
     */
    private @Nullable String errorCode;
    /**
     * @return 命令执行失败的错误信息。
     * 
     */
    private @Nullable String errorMessage;
    /**
     * @return 脚本执行后的退出状态码。
     * 
     */
    private @Nullable Integer exitCode;
    /**
     * @return 实例ID。
     * 
     */
    private @Nullable String instanceId;
    /**
     * @return 任务执行ID。
     * 
     */
    private @Nullable String invocationId;
    /**
     * @return 任务执行结果ID。
     * 
     */
    private @Nullable String invocationResultId;
    /**
     * @return 单台实例的命令进度状态。
     * 
     */
    private @Nullable String invocationResultStatus;
    /**
     * @return 经过Base64编码的命令执行后输出信息。
     * 
     */
    private @Nullable String output;
    /**
     * @return 命令在实例中开始执行的时间。
     * 
     */
    private @Nullable String startTime;
    /**
     * @return 在实例中执行命令的用户名称。
     * 
     */
    private @Nullable String username;

    private InvocationInvocationResult() {}
    /**
     * @return 命令ID。
     * 
     */
    public Optional<String> commandId() {
        return Optional.ofNullable(this.commandId);
    }
    /**
     * @return 命令执行的完成时间。
     * 
     */
    public Optional<String> endTime() {
        return Optional.ofNullable(this.endTime);
    }
    /**
     * @return 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
     * 
     */
    public Optional<String> errorCode() {
        return Optional.ofNullable(this.errorCode);
    }
    /**
     * @return 命令执行失败的错误信息。
     * 
     */
    public Optional<String> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }
    /**
     * @return 脚本执行后的退出状态码。
     * 
     */
    public Optional<Integer> exitCode() {
        return Optional.ofNullable(this.exitCode);
    }
    /**
     * @return 实例ID。
     * 
     */
    public Optional<String> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }
    /**
     * @return 任务执行ID。
     * 
     */
    public Optional<String> invocationId() {
        return Optional.ofNullable(this.invocationId);
    }
    /**
     * @return 任务执行结果ID。
     * 
     */
    public Optional<String> invocationResultId() {
        return Optional.ofNullable(this.invocationResultId);
    }
    /**
     * @return 单台实例的命令进度状态。
     * 
     */
    public Optional<String> invocationResultStatus() {
        return Optional.ofNullable(this.invocationResultStatus);
    }
    /**
     * @return 经过Base64编码的命令执行后输出信息。
     * 
     */
    public Optional<String> output() {
        return Optional.ofNullable(this.output);
    }
    /**
     * @return 命令在实例中开始执行的时间。
     * 
     */
    public Optional<String> startTime() {
        return Optional.ofNullable(this.startTime);
    }
    /**
     * @return 在实例中执行命令的用户名称。
     * 
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InvocationInvocationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String commandId;
        private @Nullable String endTime;
        private @Nullable String errorCode;
        private @Nullable String errorMessage;
        private @Nullable Integer exitCode;
        private @Nullable String instanceId;
        private @Nullable String invocationId;
        private @Nullable String invocationResultId;
        private @Nullable String invocationResultStatus;
        private @Nullable String output;
        private @Nullable String startTime;
        private @Nullable String username;
        public Builder() {}
        public Builder(InvocationInvocationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandId = defaults.commandId;
    	      this.endTime = defaults.endTime;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.exitCode = defaults.exitCode;
    	      this.instanceId = defaults.instanceId;
    	      this.invocationId = defaults.invocationId;
    	      this.invocationResultId = defaults.invocationResultId;
    	      this.invocationResultStatus = defaults.invocationResultStatus;
    	      this.output = defaults.output;
    	      this.startTime = defaults.startTime;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder commandId(@Nullable String commandId) {

            this.commandId = commandId;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(@Nullable String endTime) {

            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder errorCode(@Nullable String errorCode) {

            this.errorCode = errorCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(@Nullable String errorMessage) {

            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(@Nullable Integer exitCode) {

            this.exitCode = exitCode;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(@Nullable String instanceId) {

            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationId(@Nullable String invocationId) {

            this.invocationId = invocationId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationResultId(@Nullable String invocationResultId) {

            this.invocationResultId = invocationResultId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationResultStatus(@Nullable String invocationResultStatus) {

            this.invocationResultStatus = invocationResultStatus;
            return this;
        }
        @CustomType.Setter
        public Builder output(@Nullable String output) {

            this.output = output;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(@Nullable String startTime) {

            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder username(@Nullable String username) {

            this.username = username;
            return this;
        }
        public InvocationInvocationResult build() {
            final var _resultValue = new InvocationInvocationResult();
            _resultValue.commandId = commandId;
            _resultValue.endTime = endTime;
            _resultValue.errorCode = errorCode;
            _resultValue.errorMessage = errorMessage;
            _resultValue.exitCode = exitCode;
            _resultValue.instanceId = instanceId;
            _resultValue.invocationId = invocationId;
            _resultValue.invocationResultId = invocationResultId;
            _resultValue.invocationResultStatus = invocationResultStatus;
            _resultValue.output = output;
            _resultValue.startTime = startTime;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
