// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class NlbServerGroupHealthCheck {
    /**
     * @return 健康检查的域名
     * 
     */
    private @Nullable String domain;
    /**
     * @return 是否开启健康检查
     * 
     */
    private @Nullable Boolean enabled;
    /**
     * @return 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
     * 
     */
    private @Nullable Integer healthyThreshold;
    /**
     * @return 健康检查正常的HTTP状态码
     * 
     */
    private @Nullable String httpCode;
    /**
     * @return 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
     * 
     */
    private @Nullable Integer interval;
    /**
     * @return 健康检查的请求方法
     * 
     */
    private @Nullable String method;
    /**
     * @return 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
     * 
     */
    private @Nullable Integer port;
    /**
     * @return 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
     * 
     */
    private @Nullable Integer timeout;
    /**
     * @return 健康检查的协议类型
     * 
     */
    private @Nullable String type;
    /**
     * @return UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
     * 
     */
    private @Nullable String udpExpect;
    /**
     * @return UDP健康检查的预期响应字符串
     * 
     */
    private @Nullable String udpRequest;
    /**
     * @return 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
     * 
     */
    private @Nullable Integer unhealthyThreshold;
    /**
     * @return 健康检查的路径
     * 
     */
    private @Nullable String uri;

    private NlbServerGroupHealthCheck() {}
    /**
     * @return 健康检查的域名
     * 
     */
    public Optional<String> domain() {
        return Optional.ofNullable(this.domain);
    }
    /**
     * @return 是否开启健康检查
     * 
     */
    public Optional<Boolean> enabled() {
        return Optional.ofNullable(this.enabled);
    }
    /**
     * @return 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
     * 
     */
    public Optional<Integer> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }
    /**
     * @return 健康检查正常的HTTP状态码
     * 
     */
    public Optional<String> httpCode() {
        return Optional.ofNullable(this.httpCode);
    }
    /**
     * @return 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
     * 
     */
    public Optional<Integer> interval() {
        return Optional.ofNullable(this.interval);
    }
    /**
     * @return 健康检查的请求方法
     * 
     */
    public Optional<String> method() {
        return Optional.ofNullable(this.method);
    }
    /**
     * @return 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
     * 
     */
    public Optional<Integer> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
     * 
     */
    public Optional<Integer> timeout() {
        return Optional.ofNullable(this.timeout);
    }
    /**
     * @return 健康检查的协议类型
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }
    /**
     * @return UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
     * 
     */
    public Optional<String> udpExpect() {
        return Optional.ofNullable(this.udpExpect);
    }
    /**
     * @return UDP健康检查的预期响应字符串
     * 
     */
    public Optional<String> udpRequest() {
        return Optional.ofNullable(this.udpRequest);
    }
    /**
     * @return 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
     * 
     */
    public Optional<Integer> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }
    /**
     * @return 健康检查的路径
     * 
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(NlbServerGroupHealthCheck defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String domain;
        private @Nullable Boolean enabled;
        private @Nullable Integer healthyThreshold;
        private @Nullable String httpCode;
        private @Nullable Integer interval;
        private @Nullable String method;
        private @Nullable Integer port;
        private @Nullable Integer timeout;
        private @Nullable String type;
        private @Nullable String udpExpect;
        private @Nullable String udpRequest;
        private @Nullable Integer unhealthyThreshold;
        private @Nullable String uri;
        public Builder() {}
        public Builder(NlbServerGroupHealthCheck defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domain = defaults.domain;
    	      this.enabled = defaults.enabled;
    	      this.healthyThreshold = defaults.healthyThreshold;
    	      this.httpCode = defaults.httpCode;
    	      this.interval = defaults.interval;
    	      this.method = defaults.method;
    	      this.port = defaults.port;
    	      this.timeout = defaults.timeout;
    	      this.type = defaults.type;
    	      this.udpExpect = defaults.udpExpect;
    	      this.udpRequest = defaults.udpRequest;
    	      this.unhealthyThreshold = defaults.unhealthyThreshold;
    	      this.uri = defaults.uri;
        }

        @CustomType.Setter
        public Builder domain(@Nullable String domain) {

            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(@Nullable Boolean enabled) {

            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder healthyThreshold(@Nullable Integer healthyThreshold) {

            this.healthyThreshold = healthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder httpCode(@Nullable String httpCode) {

            this.httpCode = httpCode;
            return this;
        }
        @CustomType.Setter
        public Builder interval(@Nullable Integer interval) {

            this.interval = interval;
            return this;
        }
        @CustomType.Setter
        public Builder method(@Nullable String method) {

            this.method = method;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Integer port) {

            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder timeout(@Nullable Integer timeout) {

            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder udpExpect(@Nullable String udpExpect) {

            this.udpExpect = udpExpect;
            return this;
        }
        @CustomType.Setter
        public Builder udpRequest(@Nullable String udpRequest) {

            this.udpRequest = udpRequest;
            return this;
        }
        @CustomType.Setter
        public Builder unhealthyThreshold(@Nullable Integer unhealthyThreshold) {

            this.unhealthyThreshold = unhealthyThreshold;
            return this;
        }
        @CustomType.Setter
        public Builder uri(@Nullable String uri) {

            this.uri = uri;
            return this;
        }
        public NlbServerGroupHealthCheck build() {
            final var _resultValue = new NlbServerGroupHealthCheck();
            _resultValue.domain = domain;
            _resultValue.enabled = enabled;
            _resultValue.healthyThreshold = healthyThreshold;
            _resultValue.httpCode = httpCode;
            _resultValue.interval = interval;
            _resultValue.method = method;
            _resultValue.port = port;
            _resultValue.timeout = timeout;
            _resultValue.type = type;
            _resultValue.udpExpect = udpExpect;
            _resultValue.udpRequest = udpRequest;
            _resultValue.unhealthyThreshold = unhealthyThreshold;
            _resultValue.uri = uri;
            return _resultValue;
        }
    }
}
