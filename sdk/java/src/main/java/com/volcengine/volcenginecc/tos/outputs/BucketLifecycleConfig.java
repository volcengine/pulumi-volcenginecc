// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigAbortInCompleteMultipartUpload;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigExpiration;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigFilter;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigNoCurrentVersionExpiration;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigNonCurrentVersionTransition;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigTag;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfigTransition;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketLifecycleConfig {
    /**
     * @return 指定未合并的分片任务（碎片）的过期属性。
     * 
     */
    private @Nullable BucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload;
    /**
     * @return 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
     * 
     */
    private @Nullable BucketLifecycleConfigExpiration expiration;
    /**
     * @return 指定规则生效的过滤条件。
     * 
     */
    private @Nullable BucketLifecycleConfigFilter filter;
    /**
     * @return 规则 ID。
     * 
     */
    private @Nullable String lifecycleRuleId;
    private @Nullable BucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration;
    private @Nullable List<BucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions;
    /**
     * @return 规则所适用的前缀。
     * 
     */
    private @Nullable String prefix;
    /**
     * @return 是否启用规则。包括Enabled、Disabled。
     * 
     */
    private @Nullable String status;
    private @Nullable List<BucketLifecycleConfigTag> tags;
    private @Nullable List<BucketLifecycleConfigTransition> transitions;

    private BucketLifecycleConfig() {}
    /**
     * @return 指定未合并的分片任务（碎片）的过期属性。
     * 
     */
    public Optional<BucketLifecycleConfigAbortInCompleteMultipartUpload> abortInCompleteMultipartUpload() {
        return Optional.ofNullable(this.abortInCompleteMultipartUpload);
    }
    /**
     * @return 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
     * 
     */
    public Optional<BucketLifecycleConfigExpiration> expiration() {
        return Optional.ofNullable(this.expiration);
    }
    /**
     * @return 指定规则生效的过滤条件。
     * 
     */
    public Optional<BucketLifecycleConfigFilter> filter() {
        return Optional.ofNullable(this.filter);
    }
    /**
     * @return 规则 ID。
     * 
     */
    public Optional<String> lifecycleRuleId() {
        return Optional.ofNullable(this.lifecycleRuleId);
    }
    public Optional<BucketLifecycleConfigNoCurrentVersionExpiration> noCurrentVersionExpiration() {
        return Optional.ofNullable(this.noCurrentVersionExpiration);
    }
    public List<BucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions() {
        return this.nonCurrentVersionTransitions == null ? List.of() : this.nonCurrentVersionTransitions;
    }
    /**
     * @return 规则所适用的前缀。
     * 
     */
    public Optional<String> prefix() {
        return Optional.ofNullable(this.prefix);
    }
    /**
     * @return 是否启用规则。包括Enabled、Disabled。
     * 
     */
    public Optional<String> status() {
        return Optional.ofNullable(this.status);
    }
    public List<BucketLifecycleConfigTag> tags() {
        return this.tags == null ? List.of() : this.tags;
    }
    public List<BucketLifecycleConfigTransition> transitions() {
        return this.transitions == null ? List.of() : this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable BucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload;
        private @Nullable BucketLifecycleConfigExpiration expiration;
        private @Nullable BucketLifecycleConfigFilter filter;
        private @Nullable String lifecycleRuleId;
        private @Nullable BucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration;
        private @Nullable List<BucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions;
        private @Nullable String prefix;
        private @Nullable String status;
        private @Nullable List<BucketLifecycleConfigTag> tags;
        private @Nullable List<BucketLifecycleConfigTransition> transitions;
        public Builder() {}
        public Builder(BucketLifecycleConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortInCompleteMultipartUpload = defaults.abortInCompleteMultipartUpload;
    	      this.expiration = defaults.expiration;
    	      this.filter = defaults.filter;
    	      this.lifecycleRuleId = defaults.lifecycleRuleId;
    	      this.noCurrentVersionExpiration = defaults.noCurrentVersionExpiration;
    	      this.nonCurrentVersionTransitions = defaults.nonCurrentVersionTransitions;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.transitions = defaults.transitions;
        }

        @CustomType.Setter
        public Builder abortInCompleteMultipartUpload(@Nullable BucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload) {

            this.abortInCompleteMultipartUpload = abortInCompleteMultipartUpload;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(@Nullable BucketLifecycleConfigExpiration expiration) {

            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder filter(@Nullable BucketLifecycleConfigFilter filter) {

            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleRuleId(@Nullable String lifecycleRuleId) {

            this.lifecycleRuleId = lifecycleRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder noCurrentVersionExpiration(@Nullable BucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration) {

            this.noCurrentVersionExpiration = noCurrentVersionExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder nonCurrentVersionTransitions(@Nullable List<BucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions) {

            this.nonCurrentVersionTransitions = nonCurrentVersionTransitions;
            return this;
        }
        public Builder nonCurrentVersionTransitions(BucketLifecycleConfigNonCurrentVersionTransition... nonCurrentVersionTransitions) {
            return nonCurrentVersionTransitions(List.of(nonCurrentVersionTransitions));
        }
        @CustomType.Setter
        public Builder prefix(@Nullable String prefix) {

            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder status(@Nullable String status) {

            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(@Nullable List<BucketLifecycleConfigTag> tags) {

            this.tags = tags;
            return this;
        }
        public Builder tags(BucketLifecycleConfigTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder transitions(@Nullable List<BucketLifecycleConfigTransition> transitions) {

            this.transitions = transitions;
            return this;
        }
        public Builder transitions(BucketLifecycleConfigTransition... transitions) {
            return transitions(List.of(transitions));
        }
        public BucketLifecycleConfig build() {
            final var _resultValue = new BucketLifecycleConfig();
            _resultValue.abortInCompleteMultipartUpload = abortInCompleteMultipartUpload;
            _resultValue.expiration = expiration;
            _resultValue.filter = filter;
            _resultValue.lifecycleRuleId = lifecycleRuleId;
            _resultValue.noCurrentVersionExpiration = noCurrentVersionExpiration;
            _resultValue.nonCurrentVersionTransitions = nonCurrentVersionTransitions;
            _resultValue.prefix = prefix;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.transitions = transitions;
            return _resultValue;
        }
    }
}
