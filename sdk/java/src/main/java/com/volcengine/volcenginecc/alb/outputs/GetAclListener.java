// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAclListener {
    /**
     * @return 监听器对本访问控制策略组的控制方式。white：白名单方式；black：黑名单方式
     * 
     */
    private String aclType;
    /**
     * @return 监听器的ID
     * 
     */
    private String listenerId;
    /**
     * @return 监听器的名称
     * 
     */
    private String listenerName;
    /**
     * @return 监听器的端口
     * 
     */
    private Integer port;
    /**
     * @return 监听器的协议
     * 
     */
    private String protocol;

    private GetAclListener() {}
    /**
     * @return 监听器对本访问控制策略组的控制方式。white：白名单方式；black：黑名单方式
     * 
     */
    public String aclType() {
        return this.aclType;
    }
    /**
     * @return 监听器的ID
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return 监听器的名称
     * 
     */
    public String listenerName() {
        return this.listenerName;
    }
    /**
     * @return 监听器的端口
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 监听器的协议
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAclListener defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aclType;
        private String listenerId;
        private String listenerName;
        private Integer port;
        private String protocol;
        public Builder() {}
        public Builder(GetAclListener defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclType = defaults.aclType;
    	      this.listenerId = defaults.listenerId;
    	      this.listenerName = defaults.listenerName;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder aclType(String aclType) {
            if (aclType == null) {
              throw new MissingRequiredPropertyException("GetAclListener", "aclType");
            }
            this.aclType = aclType;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetAclListener", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder listenerName(String listenerName) {
            if (listenerName == null) {
              throw new MissingRequiredPropertyException("GetAclListener", "listenerName");
            }
            this.listenerName = listenerName;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetAclListener", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetAclListener", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        public GetAclListener build() {
            final var _resultValue = new GetAclListener();
            _resultValue.aclType = aclType;
            _resultValue.listenerId = listenerId;
            _resultValue.listenerName = listenerName;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
