// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGroupEgressPermissionArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGroupEgressPermissionArgs Empty = new SecurityGroupEgressPermissionArgs();

    /**
     * 源地址的IPv4 CIDR或IPv6 CIDR
     * 
     */
    @Import(name="cidrIp")
    private @Nullable Output<String> cidrIp;

    /**
     * @return 源地址的IPv4 CIDR或IPv6 CIDR
     * 
     */
    public Optional<Output<String>> cidrIp() {
        return Optional.ofNullable(this.cidrIp);
    }

    /**
     * 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 安全组规则方向。ingress：入方向。egress：出方向
     * 
     */
    @Import(name="direction")
    private @Nullable Output<String> direction;

    /**
     * @return 安全组规则方向。ingress：入方向。egress：出方向
     * 
     */
    public Optional<Output<String>> direction() {
        return Optional.ofNullable(this.direction);
    }

    /**
     * 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
     * 
     */
    @Import(name="policy")
    private @Nullable Output<String> policy;

    /**
     * @return 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
     * 
     */
    public Optional<Output<String>> policy() {
        return Optional.ofNullable(this.policy);
    }

    /**
     * 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    @Import(name="portEnd")
    private @Nullable Output<Integer> portEnd;

    /**
     * @return 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    public Optional<Output<Integer>> portEnd() {
        return Optional.ofNullable(this.portEnd);
    }

    /**
     * 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    @Import(name="portStart")
    private @Nullable Output<Integer> portStart;

    /**
     * @return 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
     * 
     */
    public Optional<Output<Integer>> portStart() {
        return Optional.ofNullable(this.portStart);
    }

    /**
     * 前缀列表的ID
     * 
     */
    @Import(name="prefixListId")
    private @Nullable Output<String> prefixListId;

    /**
     * @return 前缀列表的ID
     * 
     */
    public Optional<Output<String>> prefixListId() {
        return Optional.ofNullable(this.prefixListId);
    }

    /**
     * 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
     * 
     */
    @Import(name="priority")
    private @Nullable Output<Integer> priority;

    /**
     * @return 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
     * 
     */
    public Optional<Output<Integer>> priority() {
        return Optional.ofNullable(this.priority);
    }

    /**
     * 协议类型。tcp、udp、icmp、icmpv6、all
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 协议类型。tcp、udp、icmp、icmpv6、all
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
     * 
     */
    @Import(name="sourceGroupId")
    private @Nullable Output<String> sourceGroupId;

    /**
     * @return 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
     * 
     */
    public Optional<Output<String>> sourceGroupId() {
        return Optional.ofNullable(this.sourceGroupId);
    }

    private SecurityGroupEgressPermissionArgs() {}

    private SecurityGroupEgressPermissionArgs(SecurityGroupEgressPermissionArgs $) {
        this.cidrIp = $.cidrIp;
        this.description = $.description;
        this.direction = $.direction;
        this.policy = $.policy;
        this.portEnd = $.portEnd;
        this.portStart = $.portStart;
        this.prefixListId = $.prefixListId;
        this.priority = $.priority;
        this.protocol = $.protocol;
        this.sourceGroupId = $.sourceGroupId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGroupEgressPermissionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGroupEgressPermissionArgs $;

        public Builder() {
            $ = new SecurityGroupEgressPermissionArgs();
        }

        public Builder(SecurityGroupEgressPermissionArgs defaults) {
            $ = new SecurityGroupEgressPermissionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param cidrIp 源地址的IPv4 CIDR或IPv6 CIDR
         * 
         * @return builder
         * 
         */
        public Builder cidrIp(@Nullable Output<String> cidrIp) {
            $.cidrIp = cidrIp;
            return this;
        }

        /**
         * @param cidrIp 源地址的IPv4 CIDR或IPv6 CIDR
         * 
         * @return builder
         * 
         */
        public Builder cidrIp(String cidrIp) {
            return cidrIp(Output.of(cidrIp));
        }

        /**
         * @param description 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 安全组规则的描述信息。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为1~ 255个字符。不填保持原有配置。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param direction 安全组规则方向。ingress：入方向。egress：出方向
         * 
         * @return builder
         * 
         */
        public Builder direction(@Nullable Output<String> direction) {
            $.direction = direction;
            return this;
        }

        /**
         * @param direction 安全组规则方向。ingress：入方向。egress：出方向
         * 
         * @return builder
         * 
         */
        public Builder direction(String direction) {
            return direction(Output.of(direction));
        }

        /**
         * @param policy 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
         * 
         * @return builder
         * 
         */
        public Builder policy(@Nullable Output<String> policy) {
            $.policy = policy;
            return this;
        }

        /**
         * @param policy 访问策略。即CidrIp 、SourceGroupId 或 PrefixListId 对应的资源访问安全组内的网卡。取值如下：accept：允许；drop：拒绝。
         * 
         * @return builder
         * 
         */
        public Builder policy(String policy) {
            return policy(Output.of(policy));
        }

        /**
         * @param portEnd 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
         * 
         * @return builder
         * 
         */
        public Builder portEnd(@Nullable Output<Integer> portEnd) {
            $.portEnd = portEnd;
            return this;
        }

        /**
         * @param portEnd 端口范围结束值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
         * 
         * @return builder
         * 
         */
        public Builder portEnd(Integer portEnd) {
            return portEnd(Output.of(portEnd));
        }

        /**
         * @param portStart 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
         * 
         * @return builder
         * 
         */
        public Builder portStart(@Nullable Output<Integer> portStart) {
            $.portStart = portStart;
            return this;
        }

        /**
         * @param portStart 端口范围起始值。1、当Protocol 传入tcp或udp时，取值范围为1~65535。2、当Protocol 传入icmp、icmpv6或all时，仅支持传入-1，表示不限制端口
         * 
         * @return builder
         * 
         */
        public Builder portStart(Integer portStart) {
            return portStart(Output.of(portStart));
        }

        /**
         * @param prefixListId 前缀列表的ID
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(@Nullable Output<String> prefixListId) {
            $.prefixListId = prefixListId;
            return this;
        }

        /**
         * @param prefixListId 前缀列表的ID
         * 
         * @return builder
         * 
         */
        public Builder prefixListId(String prefixListId) {
            return prefixListId(Output.of(prefixListId));
        }

        /**
         * @param priority 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
         * 
         * @return builder
         * 
         */
        public Builder priority(@Nullable Output<Integer> priority) {
            $.priority = priority;
            return this;
        }

        /**
         * @param priority 安全组规则优先级，数字越小，代表优先级越高。取值范围：1～100。不填默认值：1
         * 
         * @return builder
         * 
         */
        public Builder priority(Integer priority) {
            return priority(Output.of(priority));
        }

        /**
         * @param protocol 协议类型。tcp、udp、icmp、icmpv6、all
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 协议类型。tcp、udp、icmp、icmpv6、all
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param sourceGroupId 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
         * 
         * @return builder
         * 
         */
        public Builder sourceGroupId(@Nullable Output<String> sourceGroupId) {
            $.sourceGroupId = sourceGroupId;
            return this;
        }

        /**
         * @param sourceGroupId 源地址安全组ID。即该安全组中的所有网卡的地址作为源地址。
         * 
         * @return builder
         * 
         */
        public Builder sourceGroupId(String sourceGroupId) {
            return sourceGroupId(Output.of(sourceGroupId));
        }

        public SecurityGroupEgressPermissionArgs build() {
            return $;
        }
    }

}
