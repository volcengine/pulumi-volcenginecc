// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class BucketLifecycleConfigNonCurrentVersionTransition {
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
     * 
     */
    private @Nullable String nonCurrentDate;
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
     * 
     */
    private @Nullable Integer nonCurrentDays;
    /**
     * @return 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
     * 
     */
    private @Nullable String storageClass;

    private BucketLifecycleConfigNonCurrentVersionTransition() {}
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
     * 
     */
    public Optional<String> nonCurrentDate() {
        return Optional.ofNullable(this.nonCurrentDate);
    }
    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
     * 
     */
    public Optional<Integer> nonCurrentDays() {
        return Optional.ofNullable(this.nonCurrentDays);
    }
    /**
     * @return 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
     * 
     */
    public Optional<String> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(BucketLifecycleConfigNonCurrentVersionTransition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String nonCurrentDate;
        private @Nullable Integer nonCurrentDays;
        private @Nullable String storageClass;
        public Builder() {}
        public Builder(BucketLifecycleConfigNonCurrentVersionTransition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.nonCurrentDate = defaults.nonCurrentDate;
    	      this.nonCurrentDays = defaults.nonCurrentDays;
    	      this.storageClass = defaults.storageClass;
        }

        @CustomType.Setter
        public Builder nonCurrentDate(@Nullable String nonCurrentDate) {

            this.nonCurrentDate = nonCurrentDate;
            return this;
        }
        @CustomType.Setter
        public Builder nonCurrentDays(@Nullable Integer nonCurrentDays) {

            this.nonCurrentDays = nonCurrentDays;
            return this;
        }
        @CustomType.Setter
        public Builder storageClass(@Nullable String storageClass) {

            this.storageClass = storageClass;
            return this;
        }
        public BucketLifecycleConfigNonCurrentVersionTransition build() {
            final var _resultValue = new BucketLifecycleConfigNonCurrentVersionTransition();
            _resultValue.nonCurrentDate = nonCurrentDate;
            _resultValue.nonCurrentDays = nonCurrentDays;
            _resultValue.storageClass = storageClass;
            return _resultValue;
        }
    }
}
