// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserLoginProfileArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserLoginProfileArgs Empty = new UserLoginProfileArgs();

    /**
     * 登录配置创建时间。
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return 登录配置创建时间。
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * 上次登录时间。
     * 
     */
    @Import(name="lastLoginDate")
    private @Nullable Output<String> lastLoginDate;

    /**
     * @return 上次登录时间。
     * 
     */
    public Optional<Output<String>> lastLoginDate() {
        return Optional.ofNullable(this.lastLoginDate);
    }

    /**
     * 上次登录IP。
     * 
     */
    @Import(name="lastLoginIp")
    private @Nullable Output<String> lastLoginIp;

    /**
     * @return 上次登录IP。
     * 
     */
    public Optional<Output<String>> lastLoginIp() {
        return Optional.ofNullable(this.lastLoginIp);
    }

    /**
     * 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
     * 
     */
    @Import(name="lastResetPasswordTime")
    private @Nullable Output<Double> lastResetPasswordTime;

    /**
     * @return 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
     * 
     */
    public Optional<Output<Double>> lastResetPasswordTime() {
        return Optional.ofNullable(this.lastResetPasswordTime);
    }

    /**
     * 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
     * 
     */
    @Import(name="loginAllowed")
    private @Nullable Output<Boolean> loginAllowed;

    /**
     * @return 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
     * 
     */
    public Optional<Output<Boolean>> loginAllowed() {
        return Optional.ofNullable(this.loginAllowed);
    }

    /**
     * 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
     * 
     */
    @Import(name="loginLocked")
    private @Nullable Output<Boolean> loginLocked;

    /**
     * @return 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
     * 
     */
    public Optional<Output<Boolean>> loginLocked() {
        return Optional.ofNullable(this.loginLocked);
    }

    /**
     * 登录密码。
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return 登录密码。
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
     * 
     */
    @Import(name="passwordExpireAt")
    private @Nullable Output<Double> passwordExpireAt;

    /**
     * @return 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
     * 
     */
    public Optional<Output<Double>> passwordExpireAt() {
        return Optional.ofNullable(this.passwordExpireAt);
    }

    /**
     * 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
     * 
     */
    @Import(name="passwordResetRequired")
    private @Nullable Output<Boolean> passwordResetRequired;

    /**
     * @return 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
     * 
     */
    public Optional<Output<Boolean>> passwordResetRequired() {
        return Optional.ofNullable(this.passwordResetRequired);
    }

    /**
     * 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
     * 
     */
    @Import(name="safeAuthExemptDuration")
    private @Nullable Output<Double> safeAuthExemptDuration;

    /**
     * @return 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
     * 
     */
    public Optional<Output<Double>> safeAuthExemptDuration() {
        return Optional.ofNullable(this.safeAuthExemptDuration);
    }

    /**
     * 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
     * 
     */
    @Import(name="safeAuthExemptRequired")
    private @Nullable Output<Double> safeAuthExemptRequired;

    /**
     * @return 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
     * 
     */
    public Optional<Output<Double>> safeAuthExemptRequired() {
        return Optional.ofNullable(this.safeAuthExemptRequired);
    }

    /**
     * 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
     * 
     */
    @Import(name="safeAuthExemptUnit")
    private @Nullable Output<Double> safeAuthExemptUnit;

    /**
     * @return 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
     * 
     */
    public Optional<Output<Double>> safeAuthExemptUnit() {
        return Optional.ofNullable(this.safeAuthExemptUnit);
    }

    /**
     * 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
     * 
     */
    @Import(name="safeAuthFlag")
    private @Nullable Output<Boolean> safeAuthFlag;

    /**
     * @return 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
     * 
     */
    public Optional<Output<Boolean>> safeAuthFlag() {
        return Optional.ofNullable(this.safeAuthFlag);
    }

    /**
     * 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
     * 
     */
    @Import(name="safeAuthType")
    private @Nullable Output<String> safeAuthType;

    /**
     * @return 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
     * 
     */
    public Optional<Output<String>> safeAuthType() {
        return Optional.ofNullable(this.safeAuthType);
    }

    /**
     * 登录配置更新时间。
     * 
     */
    @Import(name="updateDate")
    private @Nullable Output<String> updateDate;

    /**
     * @return 登录配置更新时间。
     * 
     */
    public Optional<Output<String>> updateDate() {
        return Optional.ofNullable(this.updateDate);
    }

    private UserLoginProfileArgs() {}

    private UserLoginProfileArgs(UserLoginProfileArgs $) {
        this.createDate = $.createDate;
        this.lastLoginDate = $.lastLoginDate;
        this.lastLoginIp = $.lastLoginIp;
        this.lastResetPasswordTime = $.lastResetPasswordTime;
        this.loginAllowed = $.loginAllowed;
        this.loginLocked = $.loginLocked;
        this.password = $.password;
        this.passwordExpireAt = $.passwordExpireAt;
        this.passwordResetRequired = $.passwordResetRequired;
        this.safeAuthExemptDuration = $.safeAuthExemptDuration;
        this.safeAuthExemptRequired = $.safeAuthExemptRequired;
        this.safeAuthExemptUnit = $.safeAuthExemptUnit;
        this.safeAuthFlag = $.safeAuthFlag;
        this.safeAuthType = $.safeAuthType;
        this.updateDate = $.updateDate;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserLoginProfileArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserLoginProfileArgs $;

        public Builder() {
            $ = new UserLoginProfileArgs();
        }

        public Builder(UserLoginProfileArgs defaults) {
            $ = new UserLoginProfileArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param createDate 登录配置创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate 登录配置创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param lastLoginDate 上次登录时间。
         * 
         * @return builder
         * 
         */
        public Builder lastLoginDate(@Nullable Output<String> lastLoginDate) {
            $.lastLoginDate = lastLoginDate;
            return this;
        }

        /**
         * @param lastLoginDate 上次登录时间。
         * 
         * @return builder
         * 
         */
        public Builder lastLoginDate(String lastLoginDate) {
            return lastLoginDate(Output.of(lastLoginDate));
        }

        /**
         * @param lastLoginIp 上次登录IP。
         * 
         * @return builder
         * 
         */
        public Builder lastLoginIp(@Nullable Output<String> lastLoginIp) {
            $.lastLoginIp = lastLoginIp;
            return this;
        }

        /**
         * @param lastLoginIp 上次登录IP。
         * 
         * @return builder
         * 
         */
        public Builder lastLoginIp(String lastLoginIp) {
            return lastLoginIp(Output.of(lastLoginIp));
        }

        /**
         * @param lastResetPasswordTime 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
         * 
         * @return builder
         * 
         */
        public Builder lastResetPasswordTime(@Nullable Output<Double> lastResetPasswordTime) {
            $.lastResetPasswordTime = lastResetPasswordTime;
            return this;
        }

        /**
         * @param lastResetPasswordTime 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
         * 
         * @return builder
         * 
         */
        public Builder lastResetPasswordTime(Double lastResetPasswordTime) {
            return lastResetPasswordTime(Output.of(lastResetPasswordTime));
        }

        /**
         * @param loginAllowed 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
         * 
         * @return builder
         * 
         */
        public Builder loginAllowed(@Nullable Output<Boolean> loginAllowed) {
            $.loginAllowed = loginAllowed;
            return this;
        }

        /**
         * @param loginAllowed 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
         * 
         * @return builder
         * 
         */
        public Builder loginAllowed(Boolean loginAllowed) {
            return loginAllowed(Output.of(loginAllowed));
        }

        /**
         * @param loginLocked 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
         * 
         * @return builder
         * 
         */
        public Builder loginLocked(@Nullable Output<Boolean> loginLocked) {
            $.loginLocked = loginLocked;
            return this;
        }

        /**
         * @param loginLocked 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
         * 
         * @return builder
         * 
         */
        public Builder loginLocked(Boolean loginLocked) {
            return loginLocked(Output.of(loginLocked));
        }

        /**
         * @param password 登录密码。
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password 登录密码。
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordExpireAt 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
         * 
         * @return builder
         * 
         */
        public Builder passwordExpireAt(@Nullable Output<Double> passwordExpireAt) {
            $.passwordExpireAt = passwordExpireAt;
            return this;
        }

        /**
         * @param passwordExpireAt 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
         * 
         * @return builder
         * 
         */
        public Builder passwordExpireAt(Double passwordExpireAt) {
            return passwordExpireAt(Output.of(passwordExpireAt));
        }

        /**
         * @param passwordResetRequired 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
         * 
         * @return builder
         * 
         */
        public Builder passwordResetRequired(@Nullable Output<Boolean> passwordResetRequired) {
            $.passwordResetRequired = passwordResetRequired;
            return this;
        }

        /**
         * @param passwordResetRequired 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
         * 
         * @return builder
         * 
         */
        public Builder passwordResetRequired(Boolean passwordResetRequired) {
            return passwordResetRequired(Output.of(passwordResetRequired));
        }

        /**
         * @param safeAuthExemptDuration 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthExemptDuration(@Nullable Output<Double> safeAuthExemptDuration) {
            $.safeAuthExemptDuration = safeAuthExemptDuration;
            return this;
        }

        /**
         * @param safeAuthExemptDuration 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthExemptDuration(Double safeAuthExemptDuration) {
            return safeAuthExemptDuration(Output.of(safeAuthExemptDuration));
        }

        /**
         * @param safeAuthExemptRequired 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthExemptRequired(@Nullable Output<Double> safeAuthExemptRequired) {
            $.safeAuthExemptRequired = safeAuthExemptRequired;
            return this;
        }

        /**
         * @param safeAuthExemptRequired 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthExemptRequired(Double safeAuthExemptRequired) {
            return safeAuthExemptRequired(Output.of(safeAuthExemptRequired));
        }

        /**
         * @param safeAuthExemptUnit 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthExemptUnit(@Nullable Output<Double> safeAuthExemptUnit) {
            $.safeAuthExemptUnit = safeAuthExemptUnit;
            return this;
        }

        /**
         * @param safeAuthExemptUnit 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthExemptUnit(Double safeAuthExemptUnit) {
            return safeAuthExemptUnit(Output.of(safeAuthExemptUnit));
        }

        /**
         * @param safeAuthFlag 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthFlag(@Nullable Output<Boolean> safeAuthFlag) {
            $.safeAuthFlag = safeAuthFlag;
            return this;
        }

        /**
         * @param safeAuthFlag 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthFlag(Boolean safeAuthFlag) {
            return safeAuthFlag(Output.of(safeAuthFlag));
        }

        /**
         * @param safeAuthType 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthType(@Nullable Output<String> safeAuthType) {
            $.safeAuthType = safeAuthType;
            return this;
        }

        /**
         * @param safeAuthType 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
         * 
         * @return builder
         * 
         */
        public Builder safeAuthType(String safeAuthType) {
            return safeAuthType(Output.of(safeAuthType));
        }

        /**
         * @param updateDate 登录配置更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateDate(@Nullable Output<String> updateDate) {
            $.updateDate = updateDate;
            return this;
        }

        /**
         * @param updateDate 登录配置更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateDate(String updateDate) {
            return updateDate(Output.of(updateDate));
        }

        public UserLoginProfileArgs build() {
            return $;
        }
    }

}
