// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetNlbServerGroupHealthCheck;
import com.volcengine.volcenginecc.clb.outputs.GetNlbServerGroupServer;
import com.volcengine.volcenginecc.clb.outputs.GetNlbServerGroupTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNlbServerGroupResult {
    /**
     * @return 账号ID
     * 
     */
    private String accountId;
    /**
     * @return 是否开启全端口转发
     * 
     */
    private Boolean anyPortEnabled;
    /**
     * @return 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
     * 
     */
    private Boolean bypassSecurityGroupEnabled;
    /**
     * @return 是否开启连接优雅中断
     * 
     */
    private Boolean connectionDrainEnabled;
    /**
     * @return 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
     * 
     */
    private Integer connectionDrainTimeout;
    /**
     * @return 后端服务器组的创建时间
     * 
     */
    private String createdTime;
    /**
     * @return 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return 健康检查相关参数
     * 
     */
    private GetNlbServerGroupHealthCheck healthCheck;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 服务器组的IP地址类型
     * 
     */
    private String ipAddressVersion;
    /**
     * @return 是否开启源地址保持
     * 
     */
    private Boolean preserveClientIpEnabled;
    /**
     * @return 项目名称
     * 
     */
    private String projectName;
    /**
     * @return NLB转发流量到后端服务器时使用的通信协议
     * 
     */
    private String protocol;
    /**
     * @return 是否开启Proxy-Protocol协议
     * 
     */
    private String proxyProtocolType;
    /**
     * @return 服务器组关联的NLB实例
     * 
     */
    private List<String> relatedLoadBalancerIds;
    /**
     * @return NLB转发流量时遵循的规则
     * 
     */
    private String scheduler;
    /**
     * @return 服务器组中后端服务器的数量
     * 
     */
    private Integer serverCount;
    /**
     * @return 服务器组ID
     * 
     */
    private String serverGroupId;
    /**
     * @return 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
     * 
     */
    private String serverGroupName;
    /**
     * @return 服务器组中待添加后端服务器的信息
     * 
     */
    private List<GetNlbServerGroupServer> servers;
    /**
     * @return 是否开启会话保持
     * 
     */
    private Boolean sessionPersistenceEnabled;
    /**
     * @return 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
     * 
     */
    private Integer sessionPersistenceTimeout;
    /**
     * @return 服务器组的状态
     * 
     */
    private String status;
    /**
     * @return 标签
     * 
     */
    private List<GetNlbServerGroupTag> tags;
    /**
     * @return 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
     * 
     */
    private Boolean timestampRemoveEnabled;
    /**
     * @return 服务器组的类型
     * 
     */
    private String type;
    /**
     * @return 后端服务器组的更新时间
     * 
     */
    private String updatedTime;
    /**
     * @return 服务器组所属私有网络的ID。
     * 
     */
    private String vpcId;

    private GetNlbServerGroupResult() {}
    /**
     * @return 账号ID
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return 是否开启全端口转发
     * 
     */
    public Boolean anyPortEnabled() {
        return this.anyPortEnabled;
    }
    /**
     * @return 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
     * 
     */
    public Boolean bypassSecurityGroupEnabled() {
        return this.bypassSecurityGroupEnabled;
    }
    /**
     * @return 是否开启连接优雅中断
     * 
     */
    public Boolean connectionDrainEnabled() {
        return this.connectionDrainEnabled;
    }
    /**
     * @return 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
     * 
     */
    public Integer connectionDrainTimeout() {
        return this.connectionDrainTimeout;
    }
    /**
     * @return 后端服务器组的创建时间
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 健康检查相关参数
     * 
     */
    public GetNlbServerGroupHealthCheck healthCheck() {
        return this.healthCheck;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 服务器组的IP地址类型
     * 
     */
    public String ipAddressVersion() {
        return this.ipAddressVersion;
    }
    /**
     * @return 是否开启源地址保持
     * 
     */
    public Boolean preserveClientIpEnabled() {
        return this.preserveClientIpEnabled;
    }
    /**
     * @return 项目名称
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return NLB转发流量到后端服务器时使用的通信协议
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return 是否开启Proxy-Protocol协议
     * 
     */
    public String proxyProtocolType() {
        return this.proxyProtocolType;
    }
    /**
     * @return 服务器组关联的NLB实例
     * 
     */
    public List<String> relatedLoadBalancerIds() {
        return this.relatedLoadBalancerIds;
    }
    /**
     * @return NLB转发流量时遵循的规则
     * 
     */
    public String scheduler() {
        return this.scheduler;
    }
    /**
     * @return 服务器组中后端服务器的数量
     * 
     */
    public Integer serverCount() {
        return this.serverCount;
    }
    /**
     * @return 服务器组ID
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
     * 
     */
    public String serverGroupName() {
        return this.serverGroupName;
    }
    /**
     * @return 服务器组中待添加后端服务器的信息
     * 
     */
    public List<GetNlbServerGroupServer> servers() {
        return this.servers;
    }
    /**
     * @return 是否开启会话保持
     * 
     */
    public Boolean sessionPersistenceEnabled() {
        return this.sessionPersistenceEnabled;
    }
    /**
     * @return 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
     * 
     */
    public Integer sessionPersistenceTimeout() {
        return this.sessionPersistenceTimeout;
    }
    /**
     * @return 服务器组的状态
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 标签
     * 
     */
    public List<GetNlbServerGroupTag> tags() {
        return this.tags;
    }
    /**
     * @return 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
     * 
     */
    public Boolean timestampRemoveEnabled() {
        return this.timestampRemoveEnabled;
    }
    /**
     * @return 服务器组的类型
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return 后端服务器组的更新时间
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return 服务器组所属私有网络的ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNlbServerGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Boolean anyPortEnabled;
        private Boolean bypassSecurityGroupEnabled;
        private Boolean connectionDrainEnabled;
        private Integer connectionDrainTimeout;
        private String createdTime;
        private String description;
        private GetNlbServerGroupHealthCheck healthCheck;
        private String id;
        private String ipAddressVersion;
        private Boolean preserveClientIpEnabled;
        private String projectName;
        private String protocol;
        private String proxyProtocolType;
        private List<String> relatedLoadBalancerIds;
        private String scheduler;
        private Integer serverCount;
        private String serverGroupId;
        private String serverGroupName;
        private List<GetNlbServerGroupServer> servers;
        private Boolean sessionPersistenceEnabled;
        private Integer sessionPersistenceTimeout;
        private String status;
        private List<GetNlbServerGroupTag> tags;
        private Boolean timestampRemoveEnabled;
        private String type;
        private String updatedTime;
        private String vpcId;
        public Builder() {}
        public Builder(GetNlbServerGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.anyPortEnabled = defaults.anyPortEnabled;
    	      this.bypassSecurityGroupEnabled = defaults.bypassSecurityGroupEnabled;
    	      this.connectionDrainEnabled = defaults.connectionDrainEnabled;
    	      this.connectionDrainTimeout = defaults.connectionDrainTimeout;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.healthCheck = defaults.healthCheck;
    	      this.id = defaults.id;
    	      this.ipAddressVersion = defaults.ipAddressVersion;
    	      this.preserveClientIpEnabled = defaults.preserveClientIpEnabled;
    	      this.projectName = defaults.projectName;
    	      this.protocol = defaults.protocol;
    	      this.proxyProtocolType = defaults.proxyProtocolType;
    	      this.relatedLoadBalancerIds = defaults.relatedLoadBalancerIds;
    	      this.scheduler = defaults.scheduler;
    	      this.serverCount = defaults.serverCount;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.serverGroupName = defaults.serverGroupName;
    	      this.servers = defaults.servers;
    	      this.sessionPersistenceEnabled = defaults.sessionPersistenceEnabled;
    	      this.sessionPersistenceTimeout = defaults.sessionPersistenceTimeout;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.timestampRemoveEnabled = defaults.timestampRemoveEnabled;
    	      this.type = defaults.type;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder anyPortEnabled(Boolean anyPortEnabled) {
            if (anyPortEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "anyPortEnabled");
            }
            this.anyPortEnabled = anyPortEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder bypassSecurityGroupEnabled(Boolean bypassSecurityGroupEnabled) {
            if (bypassSecurityGroupEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "bypassSecurityGroupEnabled");
            }
            this.bypassSecurityGroupEnabled = bypassSecurityGroupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder connectionDrainEnabled(Boolean connectionDrainEnabled) {
            if (connectionDrainEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "connectionDrainEnabled");
            }
            this.connectionDrainEnabled = connectionDrainEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder connectionDrainTimeout(Integer connectionDrainTimeout) {
            if (connectionDrainTimeout == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "connectionDrainTimeout");
            }
            this.connectionDrainTimeout = connectionDrainTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(GetNlbServerGroupHealthCheck healthCheck) {
            if (healthCheck == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "healthCheck");
            }
            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressVersion(String ipAddressVersion) {
            if (ipAddressVersion == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "ipAddressVersion");
            }
            this.ipAddressVersion = ipAddressVersion;
            return this;
        }
        @CustomType.Setter
        public Builder preserveClientIpEnabled(Boolean preserveClientIpEnabled) {
            if (preserveClientIpEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "preserveClientIpEnabled");
            }
            this.preserveClientIpEnabled = preserveClientIpEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder proxyProtocolType(String proxyProtocolType) {
            if (proxyProtocolType == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "proxyProtocolType");
            }
            this.proxyProtocolType = proxyProtocolType;
            return this;
        }
        @CustomType.Setter
        public Builder relatedLoadBalancerIds(List<String> relatedLoadBalancerIds) {
            if (relatedLoadBalancerIds == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "relatedLoadBalancerIds");
            }
            this.relatedLoadBalancerIds = relatedLoadBalancerIds;
            return this;
        }
        public Builder relatedLoadBalancerIds(String... relatedLoadBalancerIds) {
            return relatedLoadBalancerIds(List.of(relatedLoadBalancerIds));
        }
        @CustomType.Setter
        public Builder scheduler(String scheduler) {
            if (scheduler == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "scheduler");
            }
            this.scheduler = scheduler;
            return this;
        }
        @CustomType.Setter
        public Builder serverCount(Integer serverCount) {
            if (serverCount == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "serverCount");
            }
            this.serverCount = serverCount;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupName(String serverGroupName) {
            if (serverGroupName == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "serverGroupName");
            }
            this.serverGroupName = serverGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<GetNlbServerGroupServer> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(GetNlbServerGroupServer... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder sessionPersistenceEnabled(Boolean sessionPersistenceEnabled) {
            if (sessionPersistenceEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "sessionPersistenceEnabled");
            }
            this.sessionPersistenceEnabled = sessionPersistenceEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder sessionPersistenceTimeout(Integer sessionPersistenceTimeout) {
            if (sessionPersistenceTimeout == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "sessionPersistenceTimeout");
            }
            this.sessionPersistenceTimeout = sessionPersistenceTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetNlbServerGroupTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetNlbServerGroupTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timestampRemoveEnabled(Boolean timestampRemoveEnabled) {
            if (timestampRemoveEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "timestampRemoveEnabled");
            }
            this.timestampRemoveEnabled = timestampRemoveEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetNlbServerGroupResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetNlbServerGroupResult build() {
            final var _resultValue = new GetNlbServerGroupResult();
            _resultValue.accountId = accountId;
            _resultValue.anyPortEnabled = anyPortEnabled;
            _resultValue.bypassSecurityGroupEnabled = bypassSecurityGroupEnabled;
            _resultValue.connectionDrainEnabled = connectionDrainEnabled;
            _resultValue.connectionDrainTimeout = connectionDrainTimeout;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.healthCheck = healthCheck;
            _resultValue.id = id;
            _resultValue.ipAddressVersion = ipAddressVersion;
            _resultValue.preserveClientIpEnabled = preserveClientIpEnabled;
            _resultValue.projectName = projectName;
            _resultValue.protocol = protocol;
            _resultValue.proxyProtocolType = proxyProtocolType;
            _resultValue.relatedLoadBalancerIds = relatedLoadBalancerIds;
            _resultValue.scheduler = scheduler;
            _resultValue.serverCount = serverCount;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.serverGroupName = serverGroupName;
            _resultValue.servers = servers;
            _resultValue.sessionPersistenceEnabled = sessionPersistenceEnabled;
            _resultValue.sessionPersistenceTimeout = sessionPersistenceTimeout;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.timestampRemoveEnabled = timestampRemoveEnabled;
            _resultValue.type = type;
            _resultValue.updatedTime = updatedTime;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
