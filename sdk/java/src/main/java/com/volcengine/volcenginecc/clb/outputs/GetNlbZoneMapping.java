// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNlbZoneMapping {
    /**
     * @return 网卡ID。
     * 
     */
    private String eniId;
    /**
     * @return NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
     * 
     */
    private String ipv4Address;
    /**
     * @return NLB实例的公网IPv4 EIP地址。
     * 
     */
    private String ipv4EipAddress;
    /**
     * @return NLB实例的公网IPv4 EIP ID。
     * 
     */
    private String ipv4EipId;
    /**
     * @return NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
     * 
     */
    private String ipv4HcStatus;
    /**
     * @return NLB实例的私网IPv4 LIP地址。
     * 
     */
    private List<String> ipv4LocalAddresses;
    /**
     * @return NLB实例的私网IPv6 VIP地址。
     * 
     */
    private String ipv6Address;
    /**
     * @return NLB实例关联的IPv6公网带宽的ID。
     * 
     */
    private String ipv6EipId;
    /**
     * @return NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
     * 
     */
    private String ipv6HcStatus;
    /**
     * @return NLB实例的私网IPv6 LIP地址。
     * 
     */
    private List<String> ipv6LocalAddresses;
    /**
     * @return NLB实例所属的子网ID。
     * 
     */
    private String subnetId;
    /**
     * @return NLB实例所属的可用区ID。
     * 
     */
    private String zoneId;

    private GetNlbZoneMapping() {}
    /**
     * @return 网卡ID。
     * 
     */
    public String eniId() {
        return this.eniId;
    }
    /**
     * @return NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
     * 
     */
    public String ipv4Address() {
        return this.ipv4Address;
    }
    /**
     * @return NLB实例的公网IPv4 EIP地址。
     * 
     */
    public String ipv4EipAddress() {
        return this.ipv4EipAddress;
    }
    /**
     * @return NLB实例的公网IPv4 EIP ID。
     * 
     */
    public String ipv4EipId() {
        return this.ipv4EipId;
    }
    /**
     * @return NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
     * 
     */
    public String ipv4HcStatus() {
        return this.ipv4HcStatus;
    }
    /**
     * @return NLB实例的私网IPv4 LIP地址。
     * 
     */
    public List<String> ipv4LocalAddresses() {
        return this.ipv4LocalAddresses;
    }
    /**
     * @return NLB实例的私网IPv6 VIP地址。
     * 
     */
    public String ipv6Address() {
        return this.ipv6Address;
    }
    /**
     * @return NLB实例关联的IPv6公网带宽的ID。
     * 
     */
    public String ipv6EipId() {
        return this.ipv6EipId;
    }
    /**
     * @return NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
     * 
     */
    public String ipv6HcStatus() {
        return this.ipv6HcStatus;
    }
    /**
     * @return NLB实例的私网IPv6 LIP地址。
     * 
     */
    public List<String> ipv6LocalAddresses() {
        return this.ipv6LocalAddresses;
    }
    /**
     * @return NLB实例所属的子网ID。
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return NLB实例所属的可用区ID。
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNlbZoneMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String eniId;
        private String ipv4Address;
        private String ipv4EipAddress;
        private String ipv4EipId;
        private String ipv4HcStatus;
        private List<String> ipv4LocalAddresses;
        private String ipv6Address;
        private String ipv6EipId;
        private String ipv6HcStatus;
        private List<String> ipv6LocalAddresses;
        private String subnetId;
        private String zoneId;
        public Builder() {}
        public Builder(GetNlbZoneMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.eniId = defaults.eniId;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4EipAddress = defaults.ipv4EipAddress;
    	      this.ipv4EipId = defaults.ipv4EipId;
    	      this.ipv4HcStatus = defaults.ipv4HcStatus;
    	      this.ipv4LocalAddresses = defaults.ipv4LocalAddresses;
    	      this.ipv6Address = defaults.ipv6Address;
    	      this.ipv6EipId = defaults.ipv6EipId;
    	      this.ipv6HcStatus = defaults.ipv6HcStatus;
    	      this.ipv6LocalAddresses = defaults.ipv6LocalAddresses;
    	      this.subnetId = defaults.subnetId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder eniId(String eniId) {
            if (eniId == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "eniId");
            }
            this.eniId = eniId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            if (ipv4Address == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv4Address");
            }
            this.ipv4Address = ipv4Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4EipAddress(String ipv4EipAddress) {
            if (ipv4EipAddress == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv4EipAddress");
            }
            this.ipv4EipAddress = ipv4EipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4EipId(String ipv4EipId) {
            if (ipv4EipId == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv4EipId");
            }
            this.ipv4EipId = ipv4EipId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4HcStatus(String ipv4HcStatus) {
            if (ipv4HcStatus == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv4HcStatus");
            }
            this.ipv4HcStatus = ipv4HcStatus;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4LocalAddresses(List<String> ipv4LocalAddresses) {
            if (ipv4LocalAddresses == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv4LocalAddresses");
            }
            this.ipv4LocalAddresses = ipv4LocalAddresses;
            return this;
        }
        public Builder ipv4LocalAddresses(String... ipv4LocalAddresses) {
            return ipv4LocalAddresses(List.of(ipv4LocalAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Address(String ipv6Address) {
            if (ipv6Address == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv6Address");
            }
            this.ipv6Address = ipv6Address;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6EipId(String ipv6EipId) {
            if (ipv6EipId == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv6EipId");
            }
            this.ipv6EipId = ipv6EipId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6HcStatus(String ipv6HcStatus) {
            if (ipv6HcStatus == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv6HcStatus");
            }
            this.ipv6HcStatus = ipv6HcStatus;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6LocalAddresses(List<String> ipv6LocalAddresses) {
            if (ipv6LocalAddresses == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "ipv6LocalAddresses");
            }
            this.ipv6LocalAddresses = ipv6LocalAddresses;
            return this;
        }
        public Builder ipv6LocalAddresses(String... ipv6LocalAddresses) {
            return ipv6LocalAddresses(List.of(ipv6LocalAddresses));
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetNlbZoneMapping", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetNlbZoneMapping build() {
            final var _resultValue = new GetNlbZoneMapping();
            _resultValue.eniId = eniId;
            _resultValue.ipv4Address = ipv4Address;
            _resultValue.ipv4EipAddress = ipv4EipAddress;
            _resultValue.ipv4EipId = ipv4EipId;
            _resultValue.ipv4HcStatus = ipv4HcStatus;
            _resultValue.ipv4LocalAddresses = ipv4LocalAddresses;
            _resultValue.ipv6Address = ipv6Address;
            _resultValue.ipv6EipId = ipv6EipId;
            _resultValue.ipv6HcStatus = ipv6HcStatus;
            _resultValue.ipv6LocalAddresses = ipv6LocalAddresses;
            _resultValue.subnetId = subnetId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
