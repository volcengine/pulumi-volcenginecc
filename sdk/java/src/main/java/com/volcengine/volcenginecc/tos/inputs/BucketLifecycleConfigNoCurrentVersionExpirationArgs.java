// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketLifecycleConfigNoCurrentVersionExpirationArgs extends com.pulumi.resources.ResourceArgs {

    public static final BucketLifecycleConfigNoCurrentVersionExpirationArgs Empty = new BucketLifecycleConfigNoCurrentVersionExpirationArgs();

    /**
     * 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
     * 
     */
    @Import(name="nonCurrentDate")
    private @Nullable Output<String> nonCurrentDate;

    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
     * 
     */
    public Optional<Output<String>> nonCurrentDate() {
        return Optional.ofNullable(this.nonCurrentDate);
    }

    /**
     * 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
     * 
     */
    @Import(name="nonCurrentDays")
    private @Nullable Output<Integer> nonCurrentDays;

    /**
     * @return 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
     * 
     */
    public Optional<Output<Integer>> nonCurrentDays() {
        return Optional.ofNullable(this.nonCurrentDays);
    }

    private BucketLifecycleConfigNoCurrentVersionExpirationArgs() {}

    private BucketLifecycleConfigNoCurrentVersionExpirationArgs(BucketLifecycleConfigNoCurrentVersionExpirationArgs $) {
        this.nonCurrentDate = $.nonCurrentDate;
        this.nonCurrentDays = $.nonCurrentDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketLifecycleConfigNoCurrentVersionExpirationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketLifecycleConfigNoCurrentVersionExpirationArgs $;

        public Builder() {
            $ = new BucketLifecycleConfigNoCurrentVersionExpirationArgs();
        }

        public Builder(BucketLifecycleConfigNoCurrentVersionExpirationArgs defaults) {
            $ = new BucketLifecycleConfigNoCurrentVersionExpirationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param nonCurrentDate 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
         * 
         * @return builder
         * 
         */
        public Builder nonCurrentDate(@Nullable Output<String> nonCurrentDate) {
            $.nonCurrentDate = nonCurrentDate;
            return this;
        }

        /**
         * @param nonCurrentDate 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
         * 
         * @return builder
         * 
         */
        public Builder nonCurrentDate(String nonCurrentDate) {
            return nonCurrentDate(Output.of(nonCurrentDate));
        }

        /**
         * @param nonCurrentDays 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
         * 
         * @return builder
         * 
         */
        public Builder nonCurrentDays(@Nullable Output<Integer> nonCurrentDays) {
            $.nonCurrentDays = nonCurrentDays;
            return this;
        }

        /**
         * @param nonCurrentDays 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
         * 
         * @return builder
         * 
         */
        public Builder nonCurrentDays(Integer nonCurrentDays) {
            return nonCurrentDays(Output.of(nonCurrentDays));
        }

        public BucketLifecycleConfigNoCurrentVersionExpirationArgs build() {
            return $;
        }
    }

}
