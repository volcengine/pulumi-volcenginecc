// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.Objects;

@CustomType
public final class GetInstanceCpuMemory {
    /**
     * @return 实例的核数。
     * 
     */
    private Integer coreCount;
    /**
     * @return 实例的CPU数量。
     * 
     */
    private Integer cpuNumber;
    /**
     * @return 实例的内存大小，单位MB。
     * 
     */
    private Integer memorySize;
    /**
     * @return 实例的每核线程数。
     * 
     */
    private Integer threadsPerCore;

    private GetInstanceCpuMemory() {}
    /**
     * @return 实例的核数。
     * 
     */
    public Integer coreCount() {
        return this.coreCount;
    }
    /**
     * @return 实例的CPU数量。
     * 
     */
    public Integer cpuNumber() {
        return this.cpuNumber;
    }
    /**
     * @return 实例的内存大小，单位MB。
     * 
     */
    public Integer memorySize() {
        return this.memorySize;
    }
    /**
     * @return 实例的每核线程数。
     * 
     */
    public Integer threadsPerCore() {
        return this.threadsPerCore;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceCpuMemory defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer coreCount;
        private Integer cpuNumber;
        private Integer memorySize;
        private Integer threadsPerCore;
        public Builder() {}
        public Builder(GetInstanceCpuMemory defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.coreCount = defaults.coreCount;
    	      this.cpuNumber = defaults.cpuNumber;
    	      this.memorySize = defaults.memorySize;
    	      this.threadsPerCore = defaults.threadsPerCore;
        }

        @CustomType.Setter
        public Builder coreCount(Integer coreCount) {
            if (coreCount == null) {
              throw new MissingRequiredPropertyException("GetInstanceCpuMemory", "coreCount");
            }
            this.coreCount = coreCount;
            return this;
        }
        @CustomType.Setter
        public Builder cpuNumber(Integer cpuNumber) {
            if (cpuNumber == null) {
              throw new MissingRequiredPropertyException("GetInstanceCpuMemory", "cpuNumber");
            }
            this.cpuNumber = cpuNumber;
            return this;
        }
        @CustomType.Setter
        public Builder memorySize(Integer memorySize) {
            if (memorySize == null) {
              throw new MissingRequiredPropertyException("GetInstanceCpuMemory", "memorySize");
            }
            this.memorySize = memorySize;
            return this;
        }
        @CustomType.Setter
        public Builder threadsPerCore(Integer threadsPerCore) {
            if (threadsPerCore == null) {
              throw new MissingRequiredPropertyException("GetInstanceCpuMemory", "threadsPerCore");
            }
            this.threadsPerCore = threadsPerCore;
            return this;
        }
        public GetInstanceCpuMemory build() {
            final var _resultValue = new GetInstanceCpuMemory();
            _resultValue.coreCount = coreCount;
            _resultValue.cpuNumber = cpuNumber;
            _resultValue.memorySize = memorySize;
            _resultValue.threadsPerCore = threadsPerCore;
            return _resultValue;
        }
    }
}
