// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.tos.inputs.BucketAclArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketAclGrantArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketLifecycleConfigArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BucketState extends com.pulumi.resources.ResourceArgs {

    public static final BucketState Empty = new BucketState();

    /**
     * 桶的访问控制权限。
     * 
     */
    @Import(name="acl")
    private @Nullable Output<BucketAclArgs> acl;

    /**
     * @return 桶的访问控制权限。
     * 
     */
    public Optional<Output<BucketAclArgs>> acl() {
        return Optional.ofNullable(this.acl);
    }

    @Import(name="aclGrant")
    private @Nullable Output<BucketAclGrantArgs> aclGrant;

    public Optional<Output<BucketAclGrantArgs>> aclGrant() {
        return Optional.ofNullable(this.aclGrant);
    }

    /**
     * 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     * 
     */
    @Import(name="azRedundancy")
    private @Nullable Output<String> azRedundancy;

    /**
     * @return 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     * 
     */
    public Optional<Output<String>> azRedundancy() {
        return Optional.ofNullable(this.azRedundancy);
    }

    /**
     * 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     * 
     */
    @Import(name="bucketType")
    private @Nullable Output<String> bucketType;

    /**
     * @return 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     * 
     */
    public Optional<Output<String>> bucketType() {
        return Optional.ofNullable(this.bucketType);
    }

    /**
     * 桶的创建时间。
     * 
     */
    @Import(name="creationDate")
    private @Nullable Output<String> creationDate;

    /**
     * @return 桶的创建时间。
     * 
     */
    public Optional<Output<String>> creationDate() {
        return Optional.ofNullable(this.creationDate);
    }

    /**
     * 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     * 
     */
    @Import(name="enableVersionStatus")
    private @Nullable Output<String> enableVersionStatus;

    /**
     * @return 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     * 
     */
    public Optional<Output<String>> enableVersionStatus() {
        return Optional.ofNullable(this.enableVersionStatus);
    }

    /**
     * 存储桶的 TOS 协议公网访问域名。
     * 
     */
    @Import(name="extranetEndpoint")
    private @Nullable Output<String> extranetEndpoint;

    /**
     * @return 存储桶的 TOS 协议公网访问域名。
     * 
     */
    public Optional<Output<String>> extranetEndpoint() {
        return Optional.ofNullable(this.extranetEndpoint);
    }

    /**
     * 存储桶的 TOS 协议私网访问域名
     * 
     */
    @Import(name="intranetEndpoint")
    private @Nullable Output<String> intranetEndpoint;

    /**
     * @return 存储桶的 TOS 协议私网访问域名
     * 
     */
    public Optional<Output<String>> intranetEndpoint() {
        return Optional.ofNullable(this.intranetEndpoint);
    }

    @Import(name="lifecycleConfigs")
    private @Nullable Output<List<BucketLifecycleConfigArgs>> lifecycleConfigs;

    public Optional<Output<List<BucketLifecycleConfigArgs>>> lifecycleConfigs() {
        return Optional.ofNullable(this.lifecycleConfigs);
    }

    /**
     * 桶所在区域。
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return 桶所在区域。
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * 桶名。
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return 桶名。
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * 存储桶所属项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 存储桶所属项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     * 
     */
    @Import(name="storageClass")
    private @Nullable Output<String> storageClass;

    /**
     * @return 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     * 
     */
    public Optional<Output<String>> storageClass() {
        return Optional.ofNullable(this.storageClass);
    }

    @Import(name="tags")
    private @Nullable Output<List<BucketTagArgs>> tags;

    public Optional<Output<List<BucketTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private BucketState() {}

    private BucketState(BucketState $) {
        this.acl = $.acl;
        this.aclGrant = $.aclGrant;
        this.azRedundancy = $.azRedundancy;
        this.bucketType = $.bucketType;
        this.creationDate = $.creationDate;
        this.enableVersionStatus = $.enableVersionStatus;
        this.extranetEndpoint = $.extranetEndpoint;
        this.intranetEndpoint = $.intranetEndpoint;
        this.lifecycleConfigs = $.lifecycleConfigs;
        this.location = $.location;
        this.name = $.name;
        this.projectName = $.projectName;
        this.storageClass = $.storageClass;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BucketState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BucketState $;

        public Builder() {
            $ = new BucketState();
        }

        public Builder(BucketState defaults) {
            $ = new BucketState(Objects.requireNonNull(defaults));
        }

        /**
         * @param acl 桶的访问控制权限。
         * 
         * @return builder
         * 
         */
        public Builder acl(@Nullable Output<BucketAclArgs> acl) {
            $.acl = acl;
            return this;
        }

        /**
         * @param acl 桶的访问控制权限。
         * 
         * @return builder
         * 
         */
        public Builder acl(BucketAclArgs acl) {
            return acl(Output.of(acl));
        }

        public Builder aclGrant(@Nullable Output<BucketAclGrantArgs> aclGrant) {
            $.aclGrant = aclGrant;
            return this;
        }

        public Builder aclGrant(BucketAclGrantArgs aclGrant) {
            return aclGrant(Output.of(aclGrant));
        }

        /**
         * @param azRedundancy 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
         * 
         * @return builder
         * 
         */
        public Builder azRedundancy(@Nullable Output<String> azRedundancy) {
            $.azRedundancy = azRedundancy;
            return this;
        }

        /**
         * @param azRedundancy 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
         * 
         * @return builder
         * 
         */
        public Builder azRedundancy(String azRedundancy) {
            return azRedundancy(Output.of(azRedundancy));
        }

        /**
         * @param bucketType 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
         * 
         * @return builder
         * 
         */
        public Builder bucketType(@Nullable Output<String> bucketType) {
            $.bucketType = bucketType;
            return this;
        }

        /**
         * @param bucketType 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
         * 
         * @return builder
         * 
         */
        public Builder bucketType(String bucketType) {
            return bucketType(Output.of(bucketType));
        }

        /**
         * @param creationDate 桶的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder creationDate(@Nullable Output<String> creationDate) {
            $.creationDate = creationDate;
            return this;
        }

        /**
         * @param creationDate 桶的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder creationDate(String creationDate) {
            return creationDate(Output.of(creationDate));
        }

        /**
         * @param enableVersionStatus 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
         * 
         * @return builder
         * 
         */
        public Builder enableVersionStatus(@Nullable Output<String> enableVersionStatus) {
            $.enableVersionStatus = enableVersionStatus;
            return this;
        }

        /**
         * @param enableVersionStatus 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
         * 
         * @return builder
         * 
         */
        public Builder enableVersionStatus(String enableVersionStatus) {
            return enableVersionStatus(Output.of(enableVersionStatus));
        }

        /**
         * @param extranetEndpoint 存储桶的 TOS 协议公网访问域名。
         * 
         * @return builder
         * 
         */
        public Builder extranetEndpoint(@Nullable Output<String> extranetEndpoint) {
            $.extranetEndpoint = extranetEndpoint;
            return this;
        }

        /**
         * @param extranetEndpoint 存储桶的 TOS 协议公网访问域名。
         * 
         * @return builder
         * 
         */
        public Builder extranetEndpoint(String extranetEndpoint) {
            return extranetEndpoint(Output.of(extranetEndpoint));
        }

        /**
         * @param intranetEndpoint 存储桶的 TOS 协议私网访问域名
         * 
         * @return builder
         * 
         */
        public Builder intranetEndpoint(@Nullable Output<String> intranetEndpoint) {
            $.intranetEndpoint = intranetEndpoint;
            return this;
        }

        /**
         * @param intranetEndpoint 存储桶的 TOS 协议私网访问域名
         * 
         * @return builder
         * 
         */
        public Builder intranetEndpoint(String intranetEndpoint) {
            return intranetEndpoint(Output.of(intranetEndpoint));
        }

        public Builder lifecycleConfigs(@Nullable Output<List<BucketLifecycleConfigArgs>> lifecycleConfigs) {
            $.lifecycleConfigs = lifecycleConfigs;
            return this;
        }

        public Builder lifecycleConfigs(List<BucketLifecycleConfigArgs> lifecycleConfigs) {
            return lifecycleConfigs(Output.of(lifecycleConfigs));
        }

        public Builder lifecycleConfigs(BucketLifecycleConfigArgs... lifecycleConfigs) {
            return lifecycleConfigs(List.of(lifecycleConfigs));
        }

        /**
         * @param location 桶所在区域。
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location 桶所在区域。
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param name 桶名。
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 桶名。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectName 存储桶所属项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 存储桶所属项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param storageClass 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
         * 
         * @return builder
         * 
         */
        public Builder storageClass(@Nullable Output<String> storageClass) {
            $.storageClass = storageClass;
            return this;
        }

        /**
         * @param storageClass 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
         * 
         * @return builder
         * 
         */
        public Builder storageClass(String storageClass) {
            return storageClass(Output.of(storageClass));
        }

        public Builder tags(@Nullable Output<List<BucketTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<BucketTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(BucketTagArgs... tags) {
            return tags(List.of(tags));
        }

        public BucketState build() {
            return $;
        }
    }

}
