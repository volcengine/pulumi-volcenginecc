// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.cr.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.cr.outputs.GetRegistryProxyCache;
import com.volcengine.volcenginecc.cr.outputs.GetRegistryStatus;
import com.volcengine.volcenginecc.cr.outputs.GetRegistryTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetRegistryResult {
    /**
     * @return 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
     * 
     */
    private String chargeType;
    /**
     * @return 创建镜像仓库实例的时间。
     * 
     */
    private String createdTime;
    /**
     * @return 仅计费类型为HybridCharge有值，实例到期时间
     * 
     */
    private String expireTime;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
     * 
     */
    private String name;
    /**
     * @return 填写实例需要关联的项目。一个实例仅支持关联一个项目
     * 
     */
    private String project;
    /**
     * @return ProxyCache配置，设置为ProxyCache时必填
     * 
     */
    private GetRegistryProxyCache proxyCache;
    /**
     * @return 是否设置为ProxyCache实例
     * 
     */
    private Boolean proxyCacheEnabled;
    /**
     * @return 仅计费类型为HybridCharge有值，实例自动续费类型
     * 
     */
    private String renewType;
    /**
     * @return 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
     * 
     */
    private GetRegistryStatus status;
    /**
     * @return 实例的标签
     * 
     */
    private List<GetRegistryTag> tags;
    /**
     * @return 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
     * 
     */
    private String type;

    private GetRegistryResult() {}
    /**
     * @return 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return 创建镜像仓库实例的时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 仅计费类型为HybridCharge有值，实例到期时间
     * 
     */
    public String expireTime() {
        return this.expireTime;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 填写实例需要关联的项目。一个实例仅支持关联一个项目
     * 
     */
    public String project() {
        return this.project;
    }
    /**
     * @return ProxyCache配置，设置为ProxyCache时必填
     * 
     */
    public GetRegistryProxyCache proxyCache() {
        return this.proxyCache;
    }
    /**
     * @return 是否设置为ProxyCache实例
     * 
     */
    public Boolean proxyCacheEnabled() {
        return this.proxyCacheEnabled;
    }
    /**
     * @return 仅计费类型为HybridCharge有值，实例自动续费类型
     * 
     */
    public String renewType() {
        return this.renewType;
    }
    /**
     * @return 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
     * 
     */
    public GetRegistryStatus status() {
        return this.status;
    }
    /**
     * @return 实例的标签
     * 
     */
    public List<GetRegistryTag> tags() {
        return this.tags;
    }
    /**
     * @return 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRegistryResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chargeType;
        private String createdTime;
        private String expireTime;
        private String id;
        private String name;
        private String project;
        private GetRegistryProxyCache proxyCache;
        private Boolean proxyCacheEnabled;
        private String renewType;
        private GetRegistryStatus status;
        private List<GetRegistryTag> tags;
        private String type;
        public Builder() {}
        public Builder(GetRegistryResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chargeType = defaults.chargeType;
    	      this.createdTime = defaults.createdTime;
    	      this.expireTime = defaults.expireTime;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.project = defaults.project;
    	      this.proxyCache = defaults.proxyCache;
    	      this.proxyCacheEnabled = defaults.proxyCacheEnabled;
    	      this.renewType = defaults.renewType;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder expireTime(String expireTime) {
            if (expireTime == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "expireTime");
            }
            this.expireTime = expireTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder project(String project) {
            if (project == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "project");
            }
            this.project = project;
            return this;
        }
        @CustomType.Setter
        public Builder proxyCache(GetRegistryProxyCache proxyCache) {
            if (proxyCache == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "proxyCache");
            }
            this.proxyCache = proxyCache;
            return this;
        }
        @CustomType.Setter
        public Builder proxyCacheEnabled(Boolean proxyCacheEnabled) {
            if (proxyCacheEnabled == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "proxyCacheEnabled");
            }
            this.proxyCacheEnabled = proxyCacheEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder renewType(String renewType) {
            if (renewType == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "renewType");
            }
            this.renewType = renewType;
            return this;
        }
        @CustomType.Setter
        public Builder status(GetRegistryStatus status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetRegistryTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetRegistryTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetRegistryResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetRegistryResult build() {
            final var _resultValue = new GetRegistryResult();
            _resultValue.chargeType = chargeType;
            _resultValue.createdTime = createdTime;
            _resultValue.expireTime = expireTime;
            _resultValue.id = id;
            _resultValue.name = name;
            _resultValue.project = project;
            _resultValue.proxyCache = proxyCache;
            _resultValue.proxyCacheEnabled = proxyCacheEnabled;
            _resultValue.renewType = renewType;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
