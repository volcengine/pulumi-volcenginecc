// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.clb.inputs.ServerGroupListenerArgs;
import com.volcengine.volcenginecc.clb.inputs.ServerGroupServerArgs;
import com.volcengine.volcenginecc.clb.inputs.ServerGroupTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServerGroupState extends com.pulumi.resources.ResourceArgs {

    public static final ServerGroupState Empty = new ServerGroupState();

    /**
     * 后端服务器组的IP地址类型。ipv4：后端服务器组为IPv4类型。ipv6：后端服务器组为IPv6类型。
     * 
     */
    @Import(name="addressIpVersion")
    private @Nullable Output<String> addressIpVersion;

    /**
     * @return 后端服务器组的IP地址类型。ipv4：后端服务器组为IPv4类型。ipv6：后端服务器组为IPv6类型。
     * 
     */
    public Optional<Output<String>> addressIpVersion() {
        return Optional.ofNullable(this.addressIpVersion);
    }

    /**
     * 是否开启全端口转发。on：开启全端口转发。off：关闭全端口转发。
     * 
     */
    @Import(name="anyPortEnabled")
    private @Nullable Output<String> anyPortEnabled;

    /**
     * @return 是否开启全端口转发。on：开启全端口转发。off：关闭全端口转发。
     * 
     */
    public Optional<Output<String>> anyPortEnabled() {
        return Optional.ofNullable(this.anyPortEnabled);
    }

    /**
     * 后端服务器组的创建时间。
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return 后端服务器组的创建时间。
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * 后端服务器组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个符。不填则默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 后端服务器组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个符。不填则默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="listeners")
    private @Nullable Output<List<ServerGroupListenerArgs>> listeners;

    public Optional<Output<List<ServerGroupListenerArgs>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * 后端服务器组所属的CLB实例ID。
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return 后端服务器组所属的CLB实例ID。
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * 后端服务器组的ID。
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return 后端服务器组的ID。
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * 后端服务器组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。不填默认为后端服务器组ID。
     * 
     */
    @Import(name="serverGroupName")
    private @Nullable Output<String> serverGroupName;

    /**
     * @return 后端服务器组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。不填默认为后端服务器组ID。
     * 
     */
    public Optional<Output<String>> serverGroupName() {
        return Optional.ofNullable(this.serverGroupName);
    }

    @Import(name="servers")
    private @Nullable Output<List<ServerGroupServerArgs>> servers;

    public Optional<Output<List<ServerGroupServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    @Import(name="tags")
    private @Nullable Output<List<ServerGroupTagArgs>> tags;

    public Optional<Output<List<ServerGroupTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 后端服务器组的类型。instance：表示该后端服务器组只能添加云服务器的主网卡或辅助网卡作为后端服务器。ip：表示该后端服务器组只能添加IP地址作为后端服务器。
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 后端服务器组的类型。instance：表示该后端服务器组只能添加云服务器的主网卡或辅助网卡作为后端服务器。ip：表示该后端服务器组只能添加IP地址作为后端服务器。
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * 后端服务器组的最近操作时间。
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return 后端服务器组的最近操作时间。
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private ServerGroupState() {}

    private ServerGroupState(ServerGroupState $) {
        this.addressIpVersion = $.addressIpVersion;
        this.anyPortEnabled = $.anyPortEnabled;
        this.createTime = $.createTime;
        this.description = $.description;
        this.listeners = $.listeners;
        this.loadBalancerId = $.loadBalancerId;
        this.serverGroupId = $.serverGroupId;
        this.serverGroupName = $.serverGroupName;
        this.servers = $.servers;
        this.tags = $.tags;
        this.type = $.type;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServerGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServerGroupState $;

        public Builder() {
            $ = new ServerGroupState();
        }

        public Builder(ServerGroupState defaults) {
            $ = new ServerGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressIpVersion 后端服务器组的IP地址类型。ipv4：后端服务器组为IPv4类型。ipv6：后端服务器组为IPv6类型。
         * 
         * @return builder
         * 
         */
        public Builder addressIpVersion(@Nullable Output<String> addressIpVersion) {
            $.addressIpVersion = addressIpVersion;
            return this;
        }

        /**
         * @param addressIpVersion 后端服务器组的IP地址类型。ipv4：后端服务器组为IPv4类型。ipv6：后端服务器组为IPv6类型。
         * 
         * @return builder
         * 
         */
        public Builder addressIpVersion(String addressIpVersion) {
            return addressIpVersion(Output.of(addressIpVersion));
        }

        /**
         * @param anyPortEnabled 是否开启全端口转发。on：开启全端口转发。off：关闭全端口转发。
         * 
         * @return builder
         * 
         */
        public Builder anyPortEnabled(@Nullable Output<String> anyPortEnabled) {
            $.anyPortEnabled = anyPortEnabled;
            return this;
        }

        /**
         * @param anyPortEnabled 是否开启全端口转发。on：开启全端口转发。off：关闭全端口转发。
         * 
         * @return builder
         * 
         */
        public Builder anyPortEnabled(String anyPortEnabled) {
            return anyPortEnabled(Output.of(anyPortEnabled));
        }

        /**
         * @param createTime 后端服务器组的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime 后端服务器组的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param description 后端服务器组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个符。不填则默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 后端服务器组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个符。不填则默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder listeners(@Nullable Output<List<ServerGroupListenerArgs>> listeners) {
            $.listeners = listeners;
            return this;
        }

        public Builder listeners(List<ServerGroupListenerArgs> listeners) {
            return listeners(Output.of(listeners));
        }

        public Builder listeners(ServerGroupListenerArgs... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param loadBalancerId 后端服务器组所属的CLB实例ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId 后端服务器组所属的CLB实例ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param serverGroupId 后端服务器组的ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId 后端服务器组的ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param serverGroupName 后端服务器组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。不填默认为后端服务器组ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(@Nullable Output<String> serverGroupName) {
            $.serverGroupName = serverGroupName;
            return this;
        }

        /**
         * @param serverGroupName 后端服务器组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。不填默认为后端服务器组ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(String serverGroupName) {
            return serverGroupName(Output.of(serverGroupName));
        }

        public Builder servers(@Nullable Output<List<ServerGroupServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        public Builder servers(List<ServerGroupServerArgs> servers) {
            return servers(Output.of(servers));
        }

        public Builder servers(ServerGroupServerArgs... servers) {
            return servers(List.of(servers));
        }

        public Builder tags(@Nullable Output<List<ServerGroupTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<ServerGroupTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(ServerGroupTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type 后端服务器组的类型。instance：表示该后端服务器组只能添加云服务器的主网卡或辅助网卡作为后端服务器。ip：表示该后端服务器组只能添加IP地址作为后端服务器。
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 后端服务器组的类型。instance：表示该后端服务器组只能添加云服务器的主网卡或辅助网卡作为后端服务器。ip：表示该后端服务器组只能添加IP地址作为后端服务器。
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updateTime 后端服务器组的最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime 后端服务器组的最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public ServerGroupState build() {
            return $;
        }
    }

}
