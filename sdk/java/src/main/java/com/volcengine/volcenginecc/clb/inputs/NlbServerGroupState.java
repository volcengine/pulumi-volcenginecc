// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.clb.inputs.NlbServerGroupHealthCheckArgs;
import com.volcengine.volcenginecc.clb.inputs.NlbServerGroupServerArgs;
import com.volcengine.volcenginecc.clb.inputs.NlbServerGroupTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NlbServerGroupState extends com.pulumi.resources.ResourceArgs {

    public static final NlbServerGroupState Empty = new NlbServerGroupState();

    /**
     * 账号ID
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return 账号ID
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * 是否开启全端口转发
     * 
     */
    @Import(name="anyPortEnabled")
    private @Nullable Output<Boolean> anyPortEnabled;

    /**
     * @return 是否开启全端口转发
     * 
     */
    public Optional<Output<Boolean>> anyPortEnabled() {
        return Optional.ofNullable(this.anyPortEnabled);
    }

    /**
     * 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
     * 
     */
    @Import(name="bypassSecurityGroupEnabled")
    private @Nullable Output<Boolean> bypassSecurityGroupEnabled;

    /**
     * @return 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
     * 
     */
    public Optional<Output<Boolean>> bypassSecurityGroupEnabled() {
        return Optional.ofNullable(this.bypassSecurityGroupEnabled);
    }

    /**
     * 是否开启连接优雅中断
     * 
     */
    @Import(name="connectionDrainEnabled")
    private @Nullable Output<Boolean> connectionDrainEnabled;

    /**
     * @return 是否开启连接优雅中断
     * 
     */
    public Optional<Output<Boolean>> connectionDrainEnabled() {
        return Optional.ofNullable(this.connectionDrainEnabled);
    }

    /**
     * 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
     * 
     */
    @Import(name="connectionDrainTimeout")
    private @Nullable Output<Integer> connectionDrainTimeout;

    /**
     * @return 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
     * 
     */
    public Optional<Output<Integer>> connectionDrainTimeout() {
        return Optional.ofNullable(this.connectionDrainTimeout);
    }

    /**
     * 后端服务器组的创建时间
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 后端服务器组的创建时间
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 健康检查相关参数
     * 
     */
    @Import(name="healthCheck")
    private @Nullable Output<NlbServerGroupHealthCheckArgs> healthCheck;

    /**
     * @return 健康检查相关参数
     * 
     */
    public Optional<Output<NlbServerGroupHealthCheckArgs>> healthCheck() {
        return Optional.ofNullable(this.healthCheck);
    }

    /**
     * 服务器组的IP地址类型
     * 
     */
    @Import(name="ipAddressVersion")
    private @Nullable Output<String> ipAddressVersion;

    /**
     * @return 服务器组的IP地址类型
     * 
     */
    public Optional<Output<String>> ipAddressVersion() {
        return Optional.ofNullable(this.ipAddressVersion);
    }

    /**
     * 是否开启源地址保持
     * 
     */
    @Import(name="preserveClientIpEnabled")
    private @Nullable Output<Boolean> preserveClientIpEnabled;

    /**
     * @return 是否开启源地址保持
     * 
     */
    public Optional<Output<Boolean>> preserveClientIpEnabled() {
        return Optional.ofNullable(this.preserveClientIpEnabled);
    }

    /**
     * 项目名称
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 项目名称
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * NLB转发流量到后端服务器时使用的通信协议
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return NLB转发流量到后端服务器时使用的通信协议
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * 是否开启Proxy-Protocol协议
     * 
     */
    @Import(name="proxyProtocolType")
    private @Nullable Output<String> proxyProtocolType;

    /**
     * @return 是否开启Proxy-Protocol协议
     * 
     */
    public Optional<Output<String>> proxyProtocolType() {
        return Optional.ofNullable(this.proxyProtocolType);
    }

    /**
     * 服务器组关联的NLB实例
     * 
     */
    @Import(name="relatedLoadBalancerIds")
    private @Nullable Output<List<String>> relatedLoadBalancerIds;

    /**
     * @return 服务器组关联的NLB实例
     * 
     */
    public Optional<Output<List<String>>> relatedLoadBalancerIds() {
        return Optional.ofNullable(this.relatedLoadBalancerIds);
    }

    /**
     * NLB转发流量时遵循的规则
     * 
     */
    @Import(name="scheduler")
    private @Nullable Output<String> scheduler;

    /**
     * @return NLB转发流量时遵循的规则
     * 
     */
    public Optional<Output<String>> scheduler() {
        return Optional.ofNullable(this.scheduler);
    }

    /**
     * 服务器组中后端服务器的数量
     * 
     */
    @Import(name="serverCount")
    private @Nullable Output<Integer> serverCount;

    /**
     * @return 服务器组中后端服务器的数量
     * 
     */
    public Optional<Output<Integer>> serverCount() {
        return Optional.ofNullable(this.serverCount);
    }

    /**
     * 服务器组ID
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return 服务器组ID
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
     * 
     */
    @Import(name="serverGroupName")
    private @Nullable Output<String> serverGroupName;

    /**
     * @return 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
     * 
     */
    public Optional<Output<String>> serverGroupName() {
        return Optional.ofNullable(this.serverGroupName);
    }

    @Import(name="servers")
    private @Nullable Output<List<NlbServerGroupServerArgs>> servers;

    public Optional<Output<List<NlbServerGroupServerArgs>>> servers() {
        return Optional.ofNullable(this.servers);
    }

    /**
     * 是否开启会话保持
     * 
     */
    @Import(name="sessionPersistenceEnabled")
    private @Nullable Output<Boolean> sessionPersistenceEnabled;

    /**
     * @return 是否开启会话保持
     * 
     */
    public Optional<Output<Boolean>> sessionPersistenceEnabled() {
        return Optional.ofNullable(this.sessionPersistenceEnabled);
    }

    /**
     * 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
     * 
     */
    @Import(name="sessionPersistenceTimeout")
    private @Nullable Output<Integer> sessionPersistenceTimeout;

    /**
     * @return 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
     * 
     */
    public Optional<Output<Integer>> sessionPersistenceTimeout() {
        return Optional.ofNullable(this.sessionPersistenceTimeout);
    }

    /**
     * 服务器组的状态
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 服务器组的状态
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<NlbServerGroupTagArgs>> tags;

    public Optional<Output<List<NlbServerGroupTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
     * 
     */
    @Import(name="timestampRemoveEnabled")
    private @Nullable Output<Boolean> timestampRemoveEnabled;

    /**
     * @return 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
     * 
     */
    public Optional<Output<Boolean>> timestampRemoveEnabled() {
        return Optional.ofNullable(this.timestampRemoveEnabled);
    }

    /**
     * 服务器组的类型
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 服务器组的类型
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * 后端服务器组的更新时间
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 后端服务器组的更新时间
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    /**
     * 服务器组所属私有网络的ID。
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return 服务器组所属私有网络的ID。
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private NlbServerGroupState() {}

    private NlbServerGroupState(NlbServerGroupState $) {
        this.accountId = $.accountId;
        this.anyPortEnabled = $.anyPortEnabled;
        this.bypassSecurityGroupEnabled = $.bypassSecurityGroupEnabled;
        this.connectionDrainEnabled = $.connectionDrainEnabled;
        this.connectionDrainTimeout = $.connectionDrainTimeout;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.healthCheck = $.healthCheck;
        this.ipAddressVersion = $.ipAddressVersion;
        this.preserveClientIpEnabled = $.preserveClientIpEnabled;
        this.projectName = $.projectName;
        this.protocol = $.protocol;
        this.proxyProtocolType = $.proxyProtocolType;
        this.relatedLoadBalancerIds = $.relatedLoadBalancerIds;
        this.scheduler = $.scheduler;
        this.serverCount = $.serverCount;
        this.serverGroupId = $.serverGroupId;
        this.serverGroupName = $.serverGroupName;
        this.servers = $.servers;
        this.sessionPersistenceEnabled = $.sessionPersistenceEnabled;
        this.sessionPersistenceTimeout = $.sessionPersistenceTimeout;
        this.status = $.status;
        this.tags = $.tags;
        this.timestampRemoveEnabled = $.timestampRemoveEnabled;
        this.type = $.type;
        this.updatedTime = $.updatedTime;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NlbServerGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NlbServerGroupState $;

        public Builder() {
            $ = new NlbServerGroupState();
        }

        public Builder(NlbServerGroupState defaults) {
            $ = new NlbServerGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId 账号ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId 账号ID
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param anyPortEnabled 是否开启全端口转发
         * 
         * @return builder
         * 
         */
        public Builder anyPortEnabled(@Nullable Output<Boolean> anyPortEnabled) {
            $.anyPortEnabled = anyPortEnabled;
            return this;
        }

        /**
         * @param anyPortEnabled 是否开启全端口转发
         * 
         * @return builder
         * 
         */
        public Builder anyPortEnabled(Boolean anyPortEnabled) {
            return anyPortEnabled(Output.of(anyPortEnabled));
        }

        /**
         * @param bypassSecurityGroupEnabled 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
         * 
         * @return builder
         * 
         */
        public Builder bypassSecurityGroupEnabled(@Nullable Output<Boolean> bypassSecurityGroupEnabled) {
            $.bypassSecurityGroupEnabled = bypassSecurityGroupEnabled;
            return this;
        }

        /**
         * @param bypassSecurityGroupEnabled 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
         * 
         * @return builder
         * 
         */
        public Builder bypassSecurityGroupEnabled(Boolean bypassSecurityGroupEnabled) {
            return bypassSecurityGroupEnabled(Output.of(bypassSecurityGroupEnabled));
        }

        /**
         * @param connectionDrainEnabled 是否开启连接优雅中断
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainEnabled(@Nullable Output<Boolean> connectionDrainEnabled) {
            $.connectionDrainEnabled = connectionDrainEnabled;
            return this;
        }

        /**
         * @param connectionDrainEnabled 是否开启连接优雅中断
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainEnabled(Boolean connectionDrainEnabled) {
            return connectionDrainEnabled(Output.of(connectionDrainEnabled));
        }

        /**
         * @param connectionDrainTimeout 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainTimeout(@Nullable Output<Integer> connectionDrainTimeout) {
            $.connectionDrainTimeout = connectionDrainTimeout;
            return this;
        }

        /**
         * @param connectionDrainTimeout 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
         * 
         * @return builder
         * 
         */
        public Builder connectionDrainTimeout(Integer connectionDrainTimeout) {
            return connectionDrainTimeout(Output.of(connectionDrainTimeout));
        }

        /**
         * @param createdTime 后端服务器组的创建时间
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 后端服务器组的创建时间
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param healthCheck 健康检查相关参数
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(@Nullable Output<NlbServerGroupHealthCheckArgs> healthCheck) {
            $.healthCheck = healthCheck;
            return this;
        }

        /**
         * @param healthCheck 健康检查相关参数
         * 
         * @return builder
         * 
         */
        public Builder healthCheck(NlbServerGroupHealthCheckArgs healthCheck) {
            return healthCheck(Output.of(healthCheck));
        }

        /**
         * @param ipAddressVersion 服务器组的IP地址类型
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVersion(@Nullable Output<String> ipAddressVersion) {
            $.ipAddressVersion = ipAddressVersion;
            return this;
        }

        /**
         * @param ipAddressVersion 服务器组的IP地址类型
         * 
         * @return builder
         * 
         */
        public Builder ipAddressVersion(String ipAddressVersion) {
            return ipAddressVersion(Output.of(ipAddressVersion));
        }

        /**
         * @param preserveClientIpEnabled 是否开启源地址保持
         * 
         * @return builder
         * 
         */
        public Builder preserveClientIpEnabled(@Nullable Output<Boolean> preserveClientIpEnabled) {
            $.preserveClientIpEnabled = preserveClientIpEnabled;
            return this;
        }

        /**
         * @param preserveClientIpEnabled 是否开启源地址保持
         * 
         * @return builder
         * 
         */
        public Builder preserveClientIpEnabled(Boolean preserveClientIpEnabled) {
            return preserveClientIpEnabled(Output.of(preserveClientIpEnabled));
        }

        /**
         * @param projectName 项目名称
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 项目名称
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param protocol NLB转发流量到后端服务器时使用的通信协议
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol NLB转发流量到后端服务器时使用的通信协议
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param proxyProtocolType 是否开启Proxy-Protocol协议
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolType(@Nullable Output<String> proxyProtocolType) {
            $.proxyProtocolType = proxyProtocolType;
            return this;
        }

        /**
         * @param proxyProtocolType 是否开启Proxy-Protocol协议
         * 
         * @return builder
         * 
         */
        public Builder proxyProtocolType(String proxyProtocolType) {
            return proxyProtocolType(Output.of(proxyProtocolType));
        }

        /**
         * @param relatedLoadBalancerIds 服务器组关联的NLB实例
         * 
         * @return builder
         * 
         */
        public Builder relatedLoadBalancerIds(@Nullable Output<List<String>> relatedLoadBalancerIds) {
            $.relatedLoadBalancerIds = relatedLoadBalancerIds;
            return this;
        }

        /**
         * @param relatedLoadBalancerIds 服务器组关联的NLB实例
         * 
         * @return builder
         * 
         */
        public Builder relatedLoadBalancerIds(List<String> relatedLoadBalancerIds) {
            return relatedLoadBalancerIds(Output.of(relatedLoadBalancerIds));
        }

        /**
         * @param relatedLoadBalancerIds 服务器组关联的NLB实例
         * 
         * @return builder
         * 
         */
        public Builder relatedLoadBalancerIds(String... relatedLoadBalancerIds) {
            return relatedLoadBalancerIds(List.of(relatedLoadBalancerIds));
        }

        /**
         * @param scheduler NLB转发流量时遵循的规则
         * 
         * @return builder
         * 
         */
        public Builder scheduler(@Nullable Output<String> scheduler) {
            $.scheduler = scheduler;
            return this;
        }

        /**
         * @param scheduler NLB转发流量时遵循的规则
         * 
         * @return builder
         * 
         */
        public Builder scheduler(String scheduler) {
            return scheduler(Output.of(scheduler));
        }

        /**
         * @param serverCount 服务器组中后端服务器的数量
         * 
         * @return builder
         * 
         */
        public Builder serverCount(@Nullable Output<Integer> serverCount) {
            $.serverCount = serverCount;
            return this;
        }

        /**
         * @param serverCount 服务器组中后端服务器的数量
         * 
         * @return builder
         * 
         */
        public Builder serverCount(Integer serverCount) {
            return serverCount(Output.of(serverCount));
        }

        /**
         * @param serverGroupId 服务器组ID
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId 服务器组ID
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param serverGroupName 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(@Nullable Output<String> serverGroupName) {
            $.serverGroupName = serverGroupName;
            return this;
        }

        /**
         * @param serverGroupName 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupName(String serverGroupName) {
            return serverGroupName(Output.of(serverGroupName));
        }

        public Builder servers(@Nullable Output<List<NlbServerGroupServerArgs>> servers) {
            $.servers = servers;
            return this;
        }

        public Builder servers(List<NlbServerGroupServerArgs> servers) {
            return servers(Output.of(servers));
        }

        public Builder servers(NlbServerGroupServerArgs... servers) {
            return servers(List.of(servers));
        }

        /**
         * @param sessionPersistenceEnabled 是否开启会话保持
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistenceEnabled(@Nullable Output<Boolean> sessionPersistenceEnabled) {
            $.sessionPersistenceEnabled = sessionPersistenceEnabled;
            return this;
        }

        /**
         * @param sessionPersistenceEnabled 是否开启会话保持
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistenceEnabled(Boolean sessionPersistenceEnabled) {
            return sessionPersistenceEnabled(Output.of(sessionPersistenceEnabled));
        }

        /**
         * @param sessionPersistenceTimeout 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistenceTimeout(@Nullable Output<Integer> sessionPersistenceTimeout) {
            $.sessionPersistenceTimeout = sessionPersistenceTimeout;
            return this;
        }

        /**
         * @param sessionPersistenceTimeout 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
         * 
         * @return builder
         * 
         */
        public Builder sessionPersistenceTimeout(Integer sessionPersistenceTimeout) {
            return sessionPersistenceTimeout(Output.of(sessionPersistenceTimeout));
        }

        /**
         * @param status 服务器组的状态
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 服务器组的状态
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<NlbServerGroupTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<NlbServerGroupTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(NlbServerGroupTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timestampRemoveEnabled 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
         * 
         * @return builder
         * 
         */
        public Builder timestampRemoveEnabled(@Nullable Output<Boolean> timestampRemoveEnabled) {
            $.timestampRemoveEnabled = timestampRemoveEnabled;
            return this;
        }

        /**
         * @param timestampRemoveEnabled 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
         * 
         * @return builder
         * 
         */
        public Builder timestampRemoveEnabled(Boolean timestampRemoveEnabled) {
            return timestampRemoveEnabled(Output.of(timestampRemoveEnabled));
        }

        /**
         * @param type 服务器组的类型
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 服务器组的类型
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param updatedTime 后端服务器组的更新时间
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 后端服务器组的更新时间
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        /**
         * @param vpcId 服务器组所属私有网络的ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId 服务器组所属私有网络的ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public NlbServerGroupState build() {
            return $;
        }
    }

}
