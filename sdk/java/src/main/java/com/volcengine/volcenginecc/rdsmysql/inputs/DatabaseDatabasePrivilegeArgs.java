// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.rdsmysql.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DatabaseDatabasePrivilegeArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseDatabasePrivilegeArgs Empty = new DatabaseDatabasePrivilegeArgs();

    /**
     * 数据库账号名称。
     * 
     */
    @Import(name="accountName")
    private @Nullable Output<String> accountName;

    /**
     * @return 数据库账号名称。
     * 
     */
    public Optional<Output<String>> accountName() {
        return Optional.ofNullable(this.accountName);
    }

    /**
     * 授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。
     * 
     */
    @Import(name="accountPrivilege")
    private @Nullable Output<String> accountPrivilege;

    /**
     * @return 授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。
     * 
     */
    public Optional<Output<String>> accountPrivilege() {
        return Optional.ofNullable(this.accountPrivilege);
    }

    /**
     * 数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。
     * 
     */
    @Import(name="accountPrivilegeDetail")
    private @Nullable Output<String> accountPrivilegeDetail;

    /**
     * @return 数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。
     * 
     */
    public Optional<Output<String>> accountPrivilegeDetail() {
        return Optional.ofNullable(this.accountPrivilegeDetail);
    }

    /**
     * 指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，
     * 
     */
    @Import(name="host")
    private @Nullable Output<String> host;

    /**
     * @return 指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，
     * 
     */
    public Optional<Output<String>> host() {
        return Optional.ofNullable(this.host);
    }

    private DatabaseDatabasePrivilegeArgs() {}

    private DatabaseDatabasePrivilegeArgs(DatabaseDatabasePrivilegeArgs $) {
        this.accountName = $.accountName;
        this.accountPrivilege = $.accountPrivilege;
        this.accountPrivilegeDetail = $.accountPrivilegeDetail;
        this.host = $.host;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseDatabasePrivilegeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseDatabasePrivilegeArgs $;

        public Builder() {
            $ = new DatabaseDatabasePrivilegeArgs();
        }

        public Builder(DatabaseDatabasePrivilegeArgs defaults) {
            $ = new DatabaseDatabasePrivilegeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountName 数据库账号名称。
         * 
         * @return builder
         * 
         */
        public Builder accountName(@Nullable Output<String> accountName) {
            $.accountName = accountName;
            return this;
        }

        /**
         * @param accountName 数据库账号名称。
         * 
         * @return builder
         * 
         */
        public Builder accountName(String accountName) {
            return accountName(Output.of(accountName));
        }

        /**
         * @param accountPrivilege 授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。
         * 
         * @return builder
         * 
         */
        public Builder accountPrivilege(@Nullable Output<String> accountPrivilege) {
            $.accountPrivilege = accountPrivilege;
            return this;
        }

        /**
         * @param accountPrivilege 授予的账号权限类型，取值：ReadWrite：读写权限。ReadOnly：只读权限。DDLOnly：仅 DDL 权限。DMLOnly：仅 DML 权限。Custom：自定义权限。
         * 
         * @return builder
         * 
         */
        public Builder accountPrivilege(String accountPrivilege) {
            return accountPrivilege(Output.of(accountPrivilege));
        }

        /**
         * @param accountPrivilegeDetail 数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。
         * 
         * @return builder
         * 
         */
        public Builder accountPrivilegeDetail(@Nullable Output<String> accountPrivilegeDetail) {
            $.accountPrivilegeDetail = accountPrivilegeDetail;
            return this;
        }

        /**
         * @param accountPrivilegeDetail 数据库权限字符串。作为请求参数时，当 AccountPrivilege 取值为 Custom 时必填，取值：SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,REFERENCES,INDEX,ALTER,CREATE TEMPORARY TABLES,LOCK TABLES,EXECUTE,CREATE VIEW,SHOW VIEW,CREATE ROUTINE,ALTER ROUTINE,EVENT,TRIGGER,作为返回结果时，不管 AccountPrivilege 的值是否为 Custom，都会展示 AccountPrivilege 的详细权限。
         * 
         * @return builder
         * 
         */
        public Builder accountPrivilegeDetail(String accountPrivilegeDetail) {
            return accountPrivilegeDetail(Output.of(accountPrivilegeDetail));
        }

        /**
         * @param host 指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host 指定的数据库账号可以访问数据库的 IP 地址。默认值为 %。若指定 Host 为 %，允许该账号从任意 IP 地址访问数据库。若指定 Host 为 192.10.10.%，则表示该账号可从 192.10.10.0~192.10.10.255 之间的 IP 地址访问数据库。指定的 Host 需要添加在实例所绑定的白名单中，
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        public DatabaseDatabasePrivilegeArgs build() {
            return $;
        }
    }

}
