// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.storageebs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetVolumeExtraPerformance {
    /**
     * @return 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
     * 
     */
    private String extraPerformanceTypeId;
    /**
     * @return 云盘的额外IOPS。
     * 
     */
    private Double iops;
    /**
     * @return 云盘的额外吞吐量。
     * 
     */
    private Double throughput;

    private GetVolumeExtraPerformance() {}
    /**
     * @return 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
     * 
     */
    public String extraPerformanceTypeId() {
        return this.extraPerformanceTypeId;
    }
    /**
     * @return 云盘的额外IOPS。
     * 
     */
    public Double iops() {
        return this.iops;
    }
    /**
     * @return 云盘的额外吞吐量。
     * 
     */
    public Double throughput() {
        return this.throughput;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeExtraPerformance defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String extraPerformanceTypeId;
        private Double iops;
        private Double throughput;
        public Builder() {}
        public Builder(GetVolumeExtraPerformance defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.extraPerformanceTypeId = defaults.extraPerformanceTypeId;
    	      this.iops = defaults.iops;
    	      this.throughput = defaults.throughput;
        }

        @CustomType.Setter
        public Builder extraPerformanceTypeId(String extraPerformanceTypeId) {
            if (extraPerformanceTypeId == null) {
              throw new MissingRequiredPropertyException("GetVolumeExtraPerformance", "extraPerformanceTypeId");
            }
            this.extraPerformanceTypeId = extraPerformanceTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder iops(Double iops) {
            if (iops == null) {
              throw new MissingRequiredPropertyException("GetVolumeExtraPerformance", "iops");
            }
            this.iops = iops;
            return this;
        }
        @CustomType.Setter
        public Builder throughput(Double throughput) {
            if (throughput == null) {
              throw new MissingRequiredPropertyException("GetVolumeExtraPerformance", "throughput");
            }
            this.throughput = throughput;
            return this;
        }
        public GetVolumeExtraPerformance build() {
            final var _resultValue = new GetVolumeExtraPerformance();
            _resultValue.extraPerformanceTypeId = extraPerformanceTypeId;
            _resultValue.iops = iops;
            _resultValue.throughput = throughput;
            return _resultValue;
        }
    }
}
