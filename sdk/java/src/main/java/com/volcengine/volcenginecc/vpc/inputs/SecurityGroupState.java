// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.vpc.inputs.SecurityGroupEgressPermissionArgs;
import com.volcengine.volcenginecc.vpc.inputs.SecurityGroupIngressPermissionArgs;
import com.volcengine.volcenginecc.vpc.inputs.SecurityGroupTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityGroupState extends com.pulumi.resources.ResourceArgs {

    public static final SecurityGroupState Empty = new SecurityGroupState();

    /**
     * 安全组创建时间。
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return 安全组创建时间。
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    @Import(name="egressPermissions")
    private @Nullable Output<List<SecurityGroupEgressPermissionArgs>> egressPermissions;

    public Optional<Output<List<SecurityGroupEgressPermissionArgs>>> egressPermissions() {
        return Optional.ofNullable(this.egressPermissions);
    }

    @Import(name="ingressPermissions")
    private @Nullable Output<List<SecurityGroupIngressPermissionArgs>> ingressPermissions;

    public Optional<Output<List<SecurityGroupIngressPermissionArgs>>> ingressPermissions() {
        return Optional.ofNullable(this.ingressPermissions);
    }

    /**
     * 安全组所属项目名称。不填默认项目为default。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 安全组所属项目名称。不填默认项目为default。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 安全组ID。
     * 
     */
    @Import(name="securityGroupId")
    private @Nullable Output<String> securityGroupId;

    /**
     * @return 安全组ID。
     * 
     */
    public Optional<Output<String>> securityGroupId() {
        return Optional.ofNullable(this.securityGroupId);
    }

    /**
     * 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
     * 
     */
    @Import(name="securityGroupName")
    private @Nullable Output<String> securityGroupName;

    /**
     * @return 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
     * 
     */
    public Optional<Output<String>> securityGroupName() {
        return Optional.ofNullable(this.securityGroupName);
    }

    /**
     * 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
     * 
     */
    @Import(name="serviceManaged")
    private @Nullable Output<Boolean> serviceManaged;

    /**
     * @return 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
     * 
     */
    public Optional<Output<Boolean>> serviceManaged() {
        return Optional.ofNullable(this.serviceManaged);
    }

    /**
     * 安全组状态。Available为可用，Creating为创建中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 安全组状态。Available为可用，Creating为创建中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<SecurityGroupTagArgs>> tags;

    public Optional<Output<List<SecurityGroupTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * 安全组所属的VPC ID。
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return 安全组所属的VPC ID。
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private SecurityGroupState() {}

    private SecurityGroupState(SecurityGroupState $) {
        this.creationTime = $.creationTime;
        this.description = $.description;
        this.egressPermissions = $.egressPermissions;
        this.ingressPermissions = $.ingressPermissions;
        this.projectName = $.projectName;
        this.securityGroupId = $.securityGroupId;
        this.securityGroupName = $.securityGroupName;
        this.serviceManaged = $.serviceManaged;
        this.status = $.status;
        this.tags = $.tags;
        this.type = $.type;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityGroupState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityGroupState $;

        public Builder() {
            $ = new SecurityGroupState();
        }

        public Builder(SecurityGroupState defaults) {
            $ = new SecurityGroupState(Objects.requireNonNull(defaults));
        }

        /**
         * @param creationTime 安全组创建时间。
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime 安全组创建时间。
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param description 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 安全组的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不填默认空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder egressPermissions(@Nullable Output<List<SecurityGroupEgressPermissionArgs>> egressPermissions) {
            $.egressPermissions = egressPermissions;
            return this;
        }

        public Builder egressPermissions(List<SecurityGroupEgressPermissionArgs> egressPermissions) {
            return egressPermissions(Output.of(egressPermissions));
        }

        public Builder egressPermissions(SecurityGroupEgressPermissionArgs... egressPermissions) {
            return egressPermissions(List.of(egressPermissions));
        }

        public Builder ingressPermissions(@Nullable Output<List<SecurityGroupIngressPermissionArgs>> ingressPermissions) {
            $.ingressPermissions = ingressPermissions;
            return this;
        }

        public Builder ingressPermissions(List<SecurityGroupIngressPermissionArgs> ingressPermissions) {
            return ingressPermissions(Output.of(ingressPermissions));
        }

        public Builder ingressPermissions(SecurityGroupIngressPermissionArgs... ingressPermissions) {
            return ingressPermissions(List.of(ingressPermissions));
        }

        /**
         * @param projectName 安全组所属项目名称。不填默认项目为default。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 安全组所属项目名称。不填默认项目为default。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param securityGroupId 安全组ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(@Nullable Output<String> securityGroupId) {
            $.securityGroupId = securityGroupId;
            return this;
        }

        /**
         * @param securityGroupId 安全组ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupId(String securityGroupId) {
            return securityGroupId(Output.of(securityGroupId));
        }

        /**
         * @param securityGroupName 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupName(@Nullable Output<String> securityGroupName) {
            $.securityGroupName = securityGroupName;
            return this;
        }

        /**
         * @param securityGroupName 安全组的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认是安全组的ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupName(String securityGroupName) {
            return securityGroupName(Output.of(securityGroupName));
        }

        /**
         * @param serviceManaged 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
         * 
         * @return builder
         * 
         */
        public Builder serviceManaged(@Nullable Output<Boolean> serviceManaged) {
            $.serviceManaged = serviceManaged;
            return this;
        }

        /**
         * @param serviceManaged 安全组是否为托管安全组。true为托管安全组，false为非托管安全组。
         * 
         * @return builder
         * 
         */
        public Builder serviceManaged(Boolean serviceManaged) {
            return serviceManaged(Output.of(serviceManaged));
        }

        /**
         * @param status 安全组状态。Available为可用，Creating为创建中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 安全组状态。Available为可用，Creating为创建中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<SecurityGroupTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<SecurityGroupTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(SecurityGroupTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param type 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 安全组类型。1、default：默认安全组。2、normal：自定义安全组。3、VpnGW： VPN网关安全组。4、NatGW： Nat网关安全组。 5、cidr_only：CIDR-Only安全组。
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param vpcId 安全组所属的VPC ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId 安全组所属的VPC ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public SecurityGroupState build() {
            return $;
        }
    }

}
