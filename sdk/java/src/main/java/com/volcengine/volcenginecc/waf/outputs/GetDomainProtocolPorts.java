// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.waf.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainProtocolPorts {
    /**
     * @return HTTP 协议的端口号。
     * 
     */
    private List<Integer> http;
    /**
     * @return HTTPS 协议的端口号。
     * 
     */
    private List<Integer> https;

    private GetDomainProtocolPorts() {}
    /**
     * @return HTTP 协议的端口号。
     * 
     */
    public List<Integer> http() {
        return this.http;
    }
    /**
     * @return HTTPS 协议的端口号。
     * 
     */
    public List<Integer> https() {
        return this.https;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainProtocolPorts defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<Integer> http;
        private List<Integer> https;
        public Builder() {}
        public Builder(GetDomainProtocolPorts defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.http = defaults.http;
    	      this.https = defaults.https;
        }

        @CustomType.Setter
        public Builder http(List<Integer> http) {
            if (http == null) {
              throw new MissingRequiredPropertyException("GetDomainProtocolPorts", "http");
            }
            this.http = http;
            return this;
        }
        public Builder http(Integer... http) {
            return http(List.of(http));
        }
        @CustomType.Setter
        public Builder https(List<Integer> https) {
            if (https == null) {
              throw new MissingRequiredPropertyException("GetDomainProtocolPorts", "https");
            }
            this.https = https;
            return this;
        }
        public Builder https(Integer... https) {
            return https(List.of(https));
        }
        public GetDomainProtocolPorts build() {
            final var _resultValue = new GetDomainProtocolPorts();
            _resultValue.http = http;
            _resultValue.https = https;
            return _resultValue;
        }
    }
}
