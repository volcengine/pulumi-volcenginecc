// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.tos.BucketArgs;
import com.volcengine.volcenginecc.tos.inputs.BucketState;
import com.volcengine.volcenginecc.tos.outputs.BucketAcl;
import com.volcengine.volcenginecc.tos.outputs.BucketAclGrant;
import com.volcengine.volcenginecc.tos.outputs.BucketLifecycleConfig;
import com.volcengine.volcenginecc.tos.outputs.BucketTag;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * 存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:tos/bucket:Bucket example &#34;name&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:tos/bucket:Bucket")
public class Bucket extends com.pulumi.resources.CustomResource {
    /**
     * 桶的访问控制权限。
     * 
     */
    @Export(name="acl", refs={BucketAcl.class}, tree="[0]")
    private Output<BucketAcl> acl;

    /**
     * @return 桶的访问控制权限。
     * 
     */
    public Output<BucketAcl> acl() {
        return this.acl;
    }
    @Export(name="aclGrant", refs={BucketAclGrant.class}, tree="[0]")
    private Output<BucketAclGrant> aclGrant;

    public Output<BucketAclGrant> aclGrant() {
        return this.aclGrant;
    }
    /**
     * 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     * 
     */
    @Export(name="azRedundancy", refs={String.class}, tree="[0]")
    private Output<String> azRedundancy;

    /**
     * @return 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     * 
     */
    public Output<String> azRedundancy() {
        return this.azRedundancy;
    }
    /**
     * 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     * 
     */
    @Export(name="bucketType", refs={String.class}, tree="[0]")
    private Output<String> bucketType;

    /**
     * @return 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     * 
     */
    public Output<String> bucketType() {
        return this.bucketType;
    }
    /**
     * 桶的创建时间。
     * 
     */
    @Export(name="creationDate", refs={String.class}, tree="[0]")
    private Output<String> creationDate;

    /**
     * @return 桶的创建时间。
     * 
     */
    public Output<String> creationDate() {
        return this.creationDate;
    }
    /**
     * 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     * 
     */
    @Export(name="enableVersionStatus", refs={String.class}, tree="[0]")
    private Output<String> enableVersionStatus;

    /**
     * @return 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     * 
     */
    public Output<String> enableVersionStatus() {
        return this.enableVersionStatus;
    }
    /**
     * 存储桶的 TOS 协议公网访问域名。
     * 
     */
    @Export(name="extranetEndpoint", refs={String.class}, tree="[0]")
    private Output<String> extranetEndpoint;

    /**
     * @return 存储桶的 TOS 协议公网访问域名。
     * 
     */
    public Output<String> extranetEndpoint() {
        return this.extranetEndpoint;
    }
    /**
     * 存储桶的 TOS 协议私网访问域名
     * 
     */
    @Export(name="intranetEndpoint", refs={String.class}, tree="[0]")
    private Output<String> intranetEndpoint;

    /**
     * @return 存储桶的 TOS 协议私网访问域名
     * 
     */
    public Output<String> intranetEndpoint() {
        return this.intranetEndpoint;
    }
    @Export(name="lifecycleConfigs", refs={List.class,BucketLifecycleConfig.class}, tree="[0,1]")
    private Output<List<BucketLifecycleConfig>> lifecycleConfigs;

    public Output<List<BucketLifecycleConfig>> lifecycleConfigs() {
        return this.lifecycleConfigs;
    }
    /**
     * 桶所在区域。
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output<String> location;

    /**
     * @return 桶所在区域。
     * 
     */
    public Output<String> location() {
        return this.location;
    }
    /**
     * 桶名。
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return 桶名。
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * 存储桶所属项目。
     * 
     */
    @Export(name="projectName", refs={String.class}, tree="[0]")
    private Output<String> projectName;

    /**
     * @return 存储桶所属项目。
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }
    /**
     * 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     * 
     */
    @Export(name="storageClass", refs={String.class}, tree="[0]")
    private Output<String> storageClass;

    /**
     * @return 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     * 
     */
    public Output<String> storageClass() {
        return this.storageClass;
    }
    @Export(name="tags", refs={List.class,BucketTag.class}, tree="[0,1]")
    private Output<List<BucketTag>> tags;

    public Output<List<BucketTag>> tags() {
        return this.tags;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Bucket(java.lang.String name) {
        this(name, BucketArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Bucket(java.lang.String name, BucketArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Bucket(java.lang.String name, BucketArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:tos/bucket:Bucket", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Bucket(java.lang.String name, Output<java.lang.String> id, @Nullable BucketState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:tos/bucket:Bucket", name, state, makeResourceOptions(options, id), false);
    }

    private static BucketArgs makeArgs(BucketArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? BucketArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Bucket get(java.lang.String name, Output<java.lang.String> id, @Nullable BucketState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Bucket(name, id, state, options);
    }
}
