// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.apig.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UpstreamSourceIngressSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final UpstreamSourceIngressSettingsArgs Empty = new UpstreamSourceIngressSettingsArgs();

    /**
     * 是否启用所有Ingress类。
     * 
     */
    @Import(name="enableAllIngressClasses")
    private @Nullable Output<Boolean> enableAllIngressClasses;

    /**
     * @return 是否启用所有Ingress类。
     * 
     */
    public Optional<Output<Boolean>> enableAllIngressClasses() {
        return Optional.ofNullable(this.enableAllIngressClasses);
    }

    /**
     * 是否全部命名空间。
     * 
     */
    @Import(name="enableAllNamespaces")
    private @Nullable Output<Boolean> enableAllNamespaces;

    /**
     * @return 是否全部命名空间。
     * 
     */
    public Optional<Output<Boolean>> enableAllNamespaces() {
        return Optional.ofNullable(this.enableAllNamespaces);
    }

    /**
     * 是否开启。
     * 
     */
    @Import(name="enableIngress")
    private @Nullable Output<Boolean> enableIngress;

    /**
     * @return 是否开启。
     * 
     */
    public Optional<Output<Boolean>> enableIngress() {
        return Optional.ofNullable(this.enableIngress);
    }

    /**
     * 是否监听IngressClass为空的资源。
     * 
     */
    @Import(name="enableIngressWithoutIngressClass")
    private @Nullable Output<Boolean> enableIngressWithoutIngressClass;

    /**
     * @return 是否监听IngressClass为空的资源。
     * 
     */
    public Optional<Output<Boolean>> enableIngressWithoutIngressClass() {
        return Optional.ofNullable(this.enableIngressWithoutIngressClass);
    }

    /**
     * 指定IngressClass。
     * 
     */
    @Import(name="ingressClasses")
    private @Nullable Output<List<String>> ingressClasses;

    /**
     * @return 指定IngressClass。
     * 
     */
    public Optional<Output<List<String>>> ingressClasses() {
        return Optional.ofNullable(this.ingressClasses);
    }

    /**
     * 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
     * 
     */
    @Import(name="updateStatus")
    private @Nullable Output<Boolean> updateStatus;

    /**
     * @return 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
     * 
     */
    public Optional<Output<Boolean>> updateStatus() {
        return Optional.ofNullable(this.updateStatus);
    }

    /**
     * 指定命名空间。
     * 
     */
    @Import(name="watchNamespaces")
    private @Nullable Output<List<String>> watchNamespaces;

    /**
     * @return 指定命名空间。
     * 
     */
    public Optional<Output<List<String>>> watchNamespaces() {
        return Optional.ofNullable(this.watchNamespaces);
    }

    private UpstreamSourceIngressSettingsArgs() {}

    private UpstreamSourceIngressSettingsArgs(UpstreamSourceIngressSettingsArgs $) {
        this.enableAllIngressClasses = $.enableAllIngressClasses;
        this.enableAllNamespaces = $.enableAllNamespaces;
        this.enableIngress = $.enableIngress;
        this.enableIngressWithoutIngressClass = $.enableIngressWithoutIngressClass;
        this.ingressClasses = $.ingressClasses;
        this.updateStatus = $.updateStatus;
        this.watchNamespaces = $.watchNamespaces;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UpstreamSourceIngressSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UpstreamSourceIngressSettingsArgs $;

        public Builder() {
            $ = new UpstreamSourceIngressSettingsArgs();
        }

        public Builder(UpstreamSourceIngressSettingsArgs defaults) {
            $ = new UpstreamSourceIngressSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enableAllIngressClasses 是否启用所有Ingress类。
         * 
         * @return builder
         * 
         */
        public Builder enableAllIngressClasses(@Nullable Output<Boolean> enableAllIngressClasses) {
            $.enableAllIngressClasses = enableAllIngressClasses;
            return this;
        }

        /**
         * @param enableAllIngressClasses 是否启用所有Ingress类。
         * 
         * @return builder
         * 
         */
        public Builder enableAllIngressClasses(Boolean enableAllIngressClasses) {
            return enableAllIngressClasses(Output.of(enableAllIngressClasses));
        }

        /**
         * @param enableAllNamespaces 是否全部命名空间。
         * 
         * @return builder
         * 
         */
        public Builder enableAllNamespaces(@Nullable Output<Boolean> enableAllNamespaces) {
            $.enableAllNamespaces = enableAllNamespaces;
            return this;
        }

        /**
         * @param enableAllNamespaces 是否全部命名空间。
         * 
         * @return builder
         * 
         */
        public Builder enableAllNamespaces(Boolean enableAllNamespaces) {
            return enableAllNamespaces(Output.of(enableAllNamespaces));
        }

        /**
         * @param enableIngress 是否开启。
         * 
         * @return builder
         * 
         */
        public Builder enableIngress(@Nullable Output<Boolean> enableIngress) {
            $.enableIngress = enableIngress;
            return this;
        }

        /**
         * @param enableIngress 是否开启。
         * 
         * @return builder
         * 
         */
        public Builder enableIngress(Boolean enableIngress) {
            return enableIngress(Output.of(enableIngress));
        }

        /**
         * @param enableIngressWithoutIngressClass 是否监听IngressClass为空的资源。
         * 
         * @return builder
         * 
         */
        public Builder enableIngressWithoutIngressClass(@Nullable Output<Boolean> enableIngressWithoutIngressClass) {
            $.enableIngressWithoutIngressClass = enableIngressWithoutIngressClass;
            return this;
        }

        /**
         * @param enableIngressWithoutIngressClass 是否监听IngressClass为空的资源。
         * 
         * @return builder
         * 
         */
        public Builder enableIngressWithoutIngressClass(Boolean enableIngressWithoutIngressClass) {
            return enableIngressWithoutIngressClass(Output.of(enableIngressWithoutIngressClass));
        }

        /**
         * @param ingressClasses 指定IngressClass。
         * 
         * @return builder
         * 
         */
        public Builder ingressClasses(@Nullable Output<List<String>> ingressClasses) {
            $.ingressClasses = ingressClasses;
            return this;
        }

        /**
         * @param ingressClasses 指定IngressClass。
         * 
         * @return builder
         * 
         */
        public Builder ingressClasses(List<String> ingressClasses) {
            return ingressClasses(Output.of(ingressClasses));
        }

        /**
         * @param ingressClasses 指定IngressClass。
         * 
         * @return builder
         * 
         */
        public Builder ingressClasses(String... ingressClasses) {
            return ingressClasses(List.of(ingressClasses));
        }

        /**
         * @param updateStatus 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
         * 
         * @return builder
         * 
         */
        public Builder updateStatus(@Nullable Output<Boolean> updateStatus) {
            $.updateStatus = updateStatus;
            return this;
        }

        /**
         * @param updateStatus 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
         * 
         * @return builder
         * 
         */
        public Builder updateStatus(Boolean updateStatus) {
            return updateStatus(Output.of(updateStatus));
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(@Nullable Output<List<String>> watchNamespaces) {
            $.watchNamespaces = watchNamespaces;
            return this;
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(List<String> watchNamespaces) {
            return watchNamespaces(Output.of(watchNamespaces));
        }

        /**
         * @param watchNamespaces 指定命名空间。
         * 
         * @return builder
         * 
         */
        public Builder watchNamespaces(String... watchNamespaces) {
            return watchNamespaces(List.of(watchNamespaces));
        }

        public UpstreamSourceIngressSettingsArgs build() {
            return $;
        }
    }

}
