// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tos.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigAbortInCompleteMultipartUpload;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigExpiration;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigFilter;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigNoCurrentVersionExpiration;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigNonCurrentVersionTransition;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigTag;
import com.volcengine.volcenginecc.tos.outputs.GetBucketLifecycleConfigTransition;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetBucketLifecycleConfig {
    /**
     * @return 指定未合并的分片任务（碎片）的过期属性。
     * 
     */
    private GetBucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload;
    /**
     * @return 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
     * 
     */
    private GetBucketLifecycleConfigExpiration expiration;
    /**
     * @return 指定规则生效的过滤条件。
     * 
     */
    private GetBucketLifecycleConfigFilter filter;
    /**
     * @return 规则 ID。
     * 
     */
    private String lifecycleRuleId;
    private GetBucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration;
    /**
     * @return 基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。
     * 
     */
    private List<GetBucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions;
    /**
     * @return 规则所适用的前缀。
     * 
     */
    private String prefix;
    /**
     * @return 是否启用规则。包括Enabled、Disabled。
     * 
     */
    private String status;
    /**
     * @return 标签。
     * 
     */
    private List<GetBucketLifecycleConfigTag> tags;
    /**
     * @return 基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。
     * 
     */
    private List<GetBucketLifecycleConfigTransition> transitions;

    private GetBucketLifecycleConfig() {}
    /**
     * @return 指定未合并的分片任务（碎片）的过期属性。
     * 
     */
    public GetBucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload() {
        return this.abortInCompleteMultipartUpload;
    }
    /**
     * @return 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
     * 
     */
    public GetBucketLifecycleConfigExpiration expiration() {
        return this.expiration;
    }
    /**
     * @return 指定规则生效的过滤条件。
     * 
     */
    public GetBucketLifecycleConfigFilter filter() {
        return this.filter;
    }
    /**
     * @return 规则 ID。
     * 
     */
    public String lifecycleRuleId() {
        return this.lifecycleRuleId;
    }
    public GetBucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration() {
        return this.noCurrentVersionExpiration;
    }
    /**
     * @return 基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。
     * 
     */
    public List<GetBucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions() {
        return this.nonCurrentVersionTransitions;
    }
    /**
     * @return 规则所适用的前缀。
     * 
     */
    public String prefix() {
        return this.prefix;
    }
    /**
     * @return 是否启用规则。包括Enabled、Disabled。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 标签。
     * 
     */
    public List<GetBucketLifecycleConfigTag> tags() {
        return this.tags;
    }
    /**
     * @return 基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。
     * 
     */
    public List<GetBucketLifecycleConfigTransition> transitions() {
        return this.transitions;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBucketLifecycleConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetBucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload;
        private GetBucketLifecycleConfigExpiration expiration;
        private GetBucketLifecycleConfigFilter filter;
        private String lifecycleRuleId;
        private GetBucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration;
        private List<GetBucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions;
        private String prefix;
        private String status;
        private List<GetBucketLifecycleConfigTag> tags;
        private List<GetBucketLifecycleConfigTransition> transitions;
        public Builder() {}
        public Builder(GetBucketLifecycleConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.abortInCompleteMultipartUpload = defaults.abortInCompleteMultipartUpload;
    	      this.expiration = defaults.expiration;
    	      this.filter = defaults.filter;
    	      this.lifecycleRuleId = defaults.lifecycleRuleId;
    	      this.noCurrentVersionExpiration = defaults.noCurrentVersionExpiration;
    	      this.nonCurrentVersionTransitions = defaults.nonCurrentVersionTransitions;
    	      this.prefix = defaults.prefix;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.transitions = defaults.transitions;
        }

        @CustomType.Setter
        public Builder abortInCompleteMultipartUpload(GetBucketLifecycleConfigAbortInCompleteMultipartUpload abortInCompleteMultipartUpload) {
            if (abortInCompleteMultipartUpload == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "abortInCompleteMultipartUpload");
            }
            this.abortInCompleteMultipartUpload = abortInCompleteMultipartUpload;
            return this;
        }
        @CustomType.Setter
        public Builder expiration(GetBucketLifecycleConfigExpiration expiration) {
            if (expiration == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "expiration");
            }
            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder filter(GetBucketLifecycleConfigFilter filter) {
            if (filter == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "filter");
            }
            this.filter = filter;
            return this;
        }
        @CustomType.Setter
        public Builder lifecycleRuleId(String lifecycleRuleId) {
            if (lifecycleRuleId == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "lifecycleRuleId");
            }
            this.lifecycleRuleId = lifecycleRuleId;
            return this;
        }
        @CustomType.Setter
        public Builder noCurrentVersionExpiration(GetBucketLifecycleConfigNoCurrentVersionExpiration noCurrentVersionExpiration) {
            if (noCurrentVersionExpiration == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "noCurrentVersionExpiration");
            }
            this.noCurrentVersionExpiration = noCurrentVersionExpiration;
            return this;
        }
        @CustomType.Setter
        public Builder nonCurrentVersionTransitions(List<GetBucketLifecycleConfigNonCurrentVersionTransition> nonCurrentVersionTransitions) {
            if (nonCurrentVersionTransitions == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "nonCurrentVersionTransitions");
            }
            this.nonCurrentVersionTransitions = nonCurrentVersionTransitions;
            return this;
        }
        public Builder nonCurrentVersionTransitions(GetBucketLifecycleConfigNonCurrentVersionTransition... nonCurrentVersionTransitions) {
            return nonCurrentVersionTransitions(List.of(nonCurrentVersionTransitions));
        }
        @CustomType.Setter
        public Builder prefix(String prefix) {
            if (prefix == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "prefix");
            }
            this.prefix = prefix;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetBucketLifecycleConfigTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetBucketLifecycleConfigTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder transitions(List<GetBucketLifecycleConfigTransition> transitions) {
            if (transitions == null) {
              throw new MissingRequiredPropertyException("GetBucketLifecycleConfig", "transitions");
            }
            this.transitions = transitions;
            return this;
        }
        public Builder transitions(GetBucketLifecycleConfigTransition... transitions) {
            return transitions(List.of(transitions));
        }
        public GetBucketLifecycleConfig build() {
            final var _resultValue = new GetBucketLifecycleConfig();
            _resultValue.abortInCompleteMultipartUpload = abortInCompleteMultipartUpload;
            _resultValue.expiration = expiration;
            _resultValue.filter = filter;
            _resultValue.lifecycleRuleId = lifecycleRuleId;
            _resultValue.noCurrentVersionExpiration = noCurrentVersionExpiration;
            _resultValue.nonCurrentVersionTransitions = nonCurrentVersionTransitions;
            _resultValue.prefix = prefix;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.transitions = transitions;
            return _resultValue;
        }
    }
}
