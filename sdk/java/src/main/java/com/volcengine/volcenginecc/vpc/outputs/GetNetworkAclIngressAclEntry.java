// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkAclIngressAclEntry {
    /**
     * @return 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
     * 
     */
    private String cidrIp;
    /**
     * @return 规则的描述信息。
     * 
     */
    private String description;
    /**
     * @return 规则的ID。
     * 
     */
    private String networkAclEntryId;
    /**
     * @return 规则的名称。
     * 
     */
    private String networkAclEntryName;
    /**
     * @return 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
     * 
     */
    private String policy;
    /**
     * @return 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
     * 
     */
    private String port;
    /**
     * @return 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
     * 
     */
    private Integer priority;
    /**
     * @return 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
     * 
     */
    private String protocol;

    private GetNetworkAclIngressAclEntry() {}
    /**
     * @return 入向规则时为源地址的网段。出向规则时为目标地址的网段。支持CIDR格式和IPv4格式的IP地址范围。默认值：无。
     * 
     */
    public String cidrIp() {
        return this.cidrIp;
    }
    /**
     * @return 规则的描述信息。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 规则的ID。
     * 
     */
    public String networkAclEntryId() {
        return this.networkAclEntryId;
    }
    /**
     * @return 规则的名称。
     * 
     */
    public String networkAclEntryName() {
        return this.networkAclEntryName;
    }
    /**
     * @return 授权策略。accept：允许访问。drop：拒绝访问，不返回拒绝访问的信息，仅表现出发起端请求超时或类似无法建立连接的信息。
     * 
     */
    public String policy() {
        return this.policy;
    }
    /**
     * @return 规则的目的端口范围。当方向规则的Protocol为all、icmp或gre时，端口范围为-1/-1，表示不限制端口。当方向规则的Protocol为tcp或udp时，端口范围为1~65535，格式为1/200、80/80，表示端口1到端口200、端口80。
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return 方向规则的优先级，数字越小，代表优先级越高。不填默认值：1。
     * 
     */
    public Integer priority() {
        return this.priority;
    }
    /**
     * @return 协议类型。tcp：TCP协议。udp：UDP协议。icmp：ICMP协议。icmpv6：ICMPV6协议。gre：GRE协议。all：支持所有协议。
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkAclIngressAclEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cidrIp;
        private String description;
        private String networkAclEntryId;
        private String networkAclEntryName;
        private String policy;
        private String port;
        private Integer priority;
        private String protocol;
        public Builder() {}
        public Builder(GetNetworkAclIngressAclEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cidrIp = defaults.cidrIp;
    	      this.description = defaults.description;
    	      this.networkAclEntryId = defaults.networkAclEntryId;
    	      this.networkAclEntryName = defaults.networkAclEntryName;
    	      this.policy = defaults.policy;
    	      this.port = defaults.port;
    	      this.priority = defaults.priority;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder cidrIp(String cidrIp) {
            if (cidrIp == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "cidrIp");
            }
            this.cidrIp = cidrIp;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder networkAclEntryId(String networkAclEntryId) {
            if (networkAclEntryId == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "networkAclEntryId");
            }
            this.networkAclEntryId = networkAclEntryId;
            return this;
        }
        @CustomType.Setter
        public Builder networkAclEntryName(String networkAclEntryName) {
            if (networkAclEntryName == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "networkAclEntryName");
            }
            this.networkAclEntryName = networkAclEntryName;
            return this;
        }
        @CustomType.Setter
        public Builder policy(String policy) {
            if (policy == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "policy");
            }
            this.policy = policy;
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder priority(Integer priority) {
            if (priority == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "priority");
            }
            this.priority = priority;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetNetworkAclIngressAclEntry", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        public GetNetworkAclIngressAclEntry build() {
            final var _resultValue = new GetNetworkAclIngressAclEntry();
            _resultValue.cidrIp = cidrIp;
            _resultValue.description = description;
            _resultValue.networkAclEntryId = networkAclEntryId;
            _resultValue.networkAclEntryName = networkAclEntryName;
            _resultValue.policy = policy;
            _resultValue.port = port;
            _resultValue.priority = priority;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
