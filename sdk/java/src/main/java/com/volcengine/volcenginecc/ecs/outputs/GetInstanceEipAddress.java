// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceEipAddress {
    /**
     * @return 实例的分配ID。
     * 
     */
    private String allocationId;
    /**
     * @return 公网IP的带宽上限，默认值为1，单位：Mbps。
     * - `ChargeType`传入`PayByBandwidth`：取值范围1～500。
     * - `ChargeType`传入`PayByTraffic`：取值范围1～200。
     * 
     */
    private Integer bandwidthMbps;
    /**
     * @return 共享带宽包的ID，表示将公网IP加入到共享带宽包。
     * - 您可以调用[DescribeBandwidthPackages](https://www.volcengine.com/docs/6623/100685)接口，查询共享带宽包的ID。
     * - 公网IP加入到共享带宽包必须同时满足如下条件：
     *   - 二者的安全防护类型相同。
     *   - 二者的地域相同。
     *   - 公网IP的计费方式必须是按量计费。
     *   - 共享带宽包为IPv4类型。
     * 
     */
    private String bandwidthPackageId;
    /**
     * @return 公网IP的计费方式，取值：
     * - PayByBandwidth（默认）：按量计费-按带宽上限计费。
     * - PayByTraffic：按量计费-按实际流量计费。
     * - PrePaid：包年包月。
     *   :::tip
     *   实例的计费类型`InstanceChargeType`取值为`PostPaid`时，该参数取值不能为`PrePaid`。
     *   :::
     * 
     */
    private String chargeType;
    /**
     * @return 实例的IP地址。
     * 
     */
    private String ipAddress;
    /**
     * @return 公网IP的线路类型，默认为BGP。取值：
     * - BGP：BGP（多线）。
     * - 若您的账号已申请并开通了静态单线权限，则可传入如下取值：
     *   - ChinaMobile：中国移动静态单线。
     *   - ChinaTelecom：中国电信静态单线。
     *   - ChinaUnicom：中国联通静态单线。
     * - 若您的账号已申请并开通了BGP单线权限，则可传入SingleLine_BGP。
     * - 若您的账号已申请并开通了静态BGP权限，则可传入Static_BGP。
     * 
     */
    private String isp;
    /**
     * @return 实例是否随实例释放。
     * 
     */
    private Boolean releaseWithInstance;

    private GetInstanceEipAddress() {}
    /**
     * @return 实例的分配ID。
     * 
     */
    public String allocationId() {
        return this.allocationId;
    }
    /**
     * @return 公网IP的带宽上限，默认值为1，单位：Mbps。
     * - `ChargeType`传入`PayByBandwidth`：取值范围1～500。
     * - `ChargeType`传入`PayByTraffic`：取值范围1～200。
     * 
     */
    public Integer bandwidthMbps() {
        return this.bandwidthMbps;
    }
    /**
     * @return 共享带宽包的ID，表示将公网IP加入到共享带宽包。
     * - 您可以调用[DescribeBandwidthPackages](https://www.volcengine.com/docs/6623/100685)接口，查询共享带宽包的ID。
     * - 公网IP加入到共享带宽包必须同时满足如下条件：
     *   - 二者的安全防护类型相同。
     *   - 二者的地域相同。
     *   - 公网IP的计费方式必须是按量计费。
     *   - 共享带宽包为IPv4类型。
     * 
     */
    public String bandwidthPackageId() {
        return this.bandwidthPackageId;
    }
    /**
     * @return 公网IP的计费方式，取值：
     * - PayByBandwidth（默认）：按量计费-按带宽上限计费。
     * - PayByTraffic：按量计费-按实际流量计费。
     * - PrePaid：包年包月。
     *   :::tip
     *   实例的计费类型`InstanceChargeType`取值为`PostPaid`时，该参数取值不能为`PrePaid`。
     *   :::
     * 
     */
    public String chargeType() {
        return this.chargeType;
    }
    /**
     * @return 实例的IP地址。
     * 
     */
    public String ipAddress() {
        return this.ipAddress;
    }
    /**
     * @return 公网IP的线路类型，默认为BGP。取值：
     * - BGP：BGP（多线）。
     * - 若您的账号已申请并开通了静态单线权限，则可传入如下取值：
     *   - ChinaMobile：中国移动静态单线。
     *   - ChinaTelecom：中国电信静态单线。
     *   - ChinaUnicom：中国联通静态单线。
     * - 若您的账号已申请并开通了BGP单线权限，则可传入SingleLine_BGP。
     * - 若您的账号已申请并开通了静态BGP权限，则可传入Static_BGP。
     * 
     */
    public String isp() {
        return this.isp;
    }
    /**
     * @return 实例是否随实例释放。
     * 
     */
    public Boolean releaseWithInstance() {
        return this.releaseWithInstance;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceEipAddress defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String allocationId;
        private Integer bandwidthMbps;
        private String bandwidthPackageId;
        private String chargeType;
        private String ipAddress;
        private String isp;
        private Boolean releaseWithInstance;
        public Builder() {}
        public Builder(GetInstanceEipAddress defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allocationId = defaults.allocationId;
    	      this.bandwidthMbps = defaults.bandwidthMbps;
    	      this.bandwidthPackageId = defaults.bandwidthPackageId;
    	      this.chargeType = defaults.chargeType;
    	      this.ipAddress = defaults.ipAddress;
    	      this.isp = defaults.isp;
    	      this.releaseWithInstance = defaults.releaseWithInstance;
        }

        @CustomType.Setter
        public Builder allocationId(String allocationId) {
            if (allocationId == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "allocationId");
            }
            this.allocationId = allocationId;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthMbps(Integer bandwidthMbps) {
            if (bandwidthMbps == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "bandwidthMbps");
            }
            this.bandwidthMbps = bandwidthMbps;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidthPackageId(String bandwidthPackageId) {
            if (bandwidthPackageId == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "bandwidthPackageId");
            }
            this.bandwidthPackageId = bandwidthPackageId;
            return this;
        }
        @CustomType.Setter
        public Builder chargeType(String chargeType) {
            if (chargeType == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "chargeType");
            }
            this.chargeType = chargeType;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddress(String ipAddress) {
            if (ipAddress == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "ipAddress");
            }
            this.ipAddress = ipAddress;
            return this;
        }
        @CustomType.Setter
        public Builder isp(String isp) {
            if (isp == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "isp");
            }
            this.isp = isp;
            return this;
        }
        @CustomType.Setter
        public Builder releaseWithInstance(Boolean releaseWithInstance) {
            if (releaseWithInstance == null) {
              throw new MissingRequiredPropertyException("GetInstanceEipAddress", "releaseWithInstance");
            }
            this.releaseWithInstance = releaseWithInstance;
            return this;
        }
        public GetInstanceEipAddress build() {
            final var _resultValue = new GetInstanceEipAddress();
            _resultValue.allocationId = allocationId;
            _resultValue.bandwidthMbps = bandwidthMbps;
            _resultValue.bandwidthPackageId = bandwidthPackageId;
            _resultValue.chargeType = chargeType;
            _resultValue.ipAddress = ipAddress;
            _resultValue.isp = isp;
            _resultValue.releaseWithInstance = releaseWithInstance;
            return _resultValue;
        }
    }
}
