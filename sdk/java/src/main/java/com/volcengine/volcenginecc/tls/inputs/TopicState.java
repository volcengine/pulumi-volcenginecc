// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tls.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.tls.inputs.TopicTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TopicState extends com.pulumi.resources.ResourceArgs {

    public static final TopicState Empty = new TopicState();

    /**
     * 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    @Import(name="archiveTtl")
    private @Nullable Output<Integer> archiveTtl;

    /**
     * @return 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Optional<Output<Integer>> archiveTtl() {
        return Optional.ofNullable(this.archiveTtl);
    }

    /**
     * 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     * 
     */
    @Import(name="autoSplit")
    private @Nullable Output<Boolean> autoSplit;

    /**
     * @return 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     * 
     */
    public Optional<Output<Boolean>> autoSplit() {
        return Optional.ofNullable(this.autoSplit);
    }

    /**
     * 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    @Import(name="coldTtl")
    private @Nullable Output<Integer> coldTtl;

    /**
     * @return 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Optional<Output<Integer>> coldTtl() {
        return Optional.ofNullable(this.coldTtl);
    }

    /**
     * 日志主题创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 日志主题创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     * 
     */
    @Import(name="enableHotTtl")
    private @Nullable Output<Boolean> enableHotTtl;

    /**
     * @return 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     * 
     */
    public Optional<Output<Boolean>> enableHotTtl() {
        return Optional.ofNullable(this.enableHotTtl);
    }

    /**
     * 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     * 
     */
    @Import(name="enableTracking")
    private @Nullable Output<Boolean> enableTracking;

    /**
     * @return 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     * 
     */
    public Optional<Output<Boolean>> enableTracking() {
        return Optional.ofNullable(this.enableTracking);
    }

    /**
     * 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    @Import(name="hotTtl")
    private @Nullable Output<Integer> hotTtl;

    /**
     * @return 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Optional<Output<Integer>> hotTtl() {
        return Optional.ofNullable(this.hotTtl);
    }

    /**
     * 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     * 
     */
    @Import(name="logPublicIp")
    private @Nullable Output<Boolean> logPublicIp;

    /**
     * @return 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     * 
     */
    public Optional<Output<Boolean>> logPublicIp() {
        return Optional.ofNullable(this.logPublicIp);
    }

    /**
     * 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     * 
     */
    @Import(name="maxSplitShard")
    private @Nullable Output<Integer> maxSplitShard;

    /**
     * @return 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     * 
     */
    public Optional<Output<Integer>> maxSplitShard() {
        return Optional.ofNullable(this.maxSplitShard);
    }

    /**
     * 日志主题所属的日志项目 ID。
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return 日志主题所属的日志项目 ID。
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     * 
     */
    @Import(name="shardCount")
    private @Nullable Output<Integer> shardCount;

    /**
     * @return 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     * 
     */
    public Optional<Output<Integer>> shardCount() {
        return Optional.ofNullable(this.shardCount);
    }

    @Import(name="tags")
    private @Nullable Output<List<TopicTagArgs>> tags;

    public Optional<Output<List<TopicTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 时间格式
     * 
     */
    @Import(name="timeFormat")
    private @Nullable Output<String> timeFormat;

    /**
     * @return 时间格式
     * 
     */
    public Optional<Output<String>> timeFormat() {
        return Optional.ofNullable(this.timeFormat);
    }

    /**
     * 时间字段名
     * 
     */
    @Import(name="timeKey")
    private @Nullable Output<String> timeKey;

    /**
     * @return 时间字段名
     * 
     */
    public Optional<Output<String>> timeKey() {
        return Optional.ofNullable(this.timeKey);
    }

    /**
     * 日志主题 ID。
     * 
     */
    @Import(name="topicId")
    private @Nullable Output<String> topicId;

    /**
     * @return 日志主题 ID。
     * 
     */
    public Optional<Output<String>> topicId() {
        return Optional.ofNullable(this.topicId);
    }

    /**
     * 日志主题名称。
     * 
     */
    @Import(name="topicName")
    private @Nullable Output<String> topicName;

    /**
     * @return 日志主题名称。
     * 
     */
    public Optional<Output<String>> topicName() {
        return Optional.ofNullable(this.topicName);
    }

    /**
     * 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     * 
     */
    @Import(name="ttl")
    private @Nullable Output<Integer> ttl;

    /**
     * @return 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     * 
     */
    public Optional<Output<Integer>> ttl() {
        return Optional.ofNullable(this.ttl);
    }

    /**
     * 日志主题修改时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 日志主题修改时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private TopicState() {}

    private TopicState(TopicState $) {
        this.archiveTtl = $.archiveTtl;
        this.autoSplit = $.autoSplit;
        this.coldTtl = $.coldTtl;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.enableHotTtl = $.enableHotTtl;
        this.enableTracking = $.enableTracking;
        this.hotTtl = $.hotTtl;
        this.logPublicIp = $.logPublicIp;
        this.maxSplitShard = $.maxSplitShard;
        this.projectId = $.projectId;
        this.shardCount = $.shardCount;
        this.tags = $.tags;
        this.timeFormat = $.timeFormat;
        this.timeKey = $.timeKey;
        this.topicId = $.topicId;
        this.topicName = $.topicName;
        this.ttl = $.ttl;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TopicState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TopicState $;

        public Builder() {
            $ = new TopicState();
        }

        public Builder(TopicState defaults) {
            $ = new TopicState(Objects.requireNonNull(defaults));
        }

        /**
         * @param archiveTtl 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
         * 
         * @return builder
         * 
         */
        public Builder archiveTtl(@Nullable Output<Integer> archiveTtl) {
            $.archiveTtl = archiveTtl;
            return this;
        }

        /**
         * @param archiveTtl 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
         * 
         * @return builder
         * 
         */
        public Builder archiveTtl(Integer archiveTtl) {
            return archiveTtl(Output.of(archiveTtl));
        }

        /**
         * @param autoSplit 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
         * 
         * @return builder
         * 
         */
        public Builder autoSplit(@Nullable Output<Boolean> autoSplit) {
            $.autoSplit = autoSplit;
            return this;
        }

        /**
         * @param autoSplit 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
         * 
         * @return builder
         * 
         */
        public Builder autoSplit(Boolean autoSplit) {
            return autoSplit(Output.of(autoSplit));
        }

        /**
         * @param coldTtl 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
         * 
         * @return builder
         * 
         */
        public Builder coldTtl(@Nullable Output<Integer> coldTtl) {
            $.coldTtl = coldTtl;
            return this;
        }

        /**
         * @param coldTtl 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
         * 
         * @return builder
         * 
         */
        public Builder coldTtl(Integer coldTtl) {
            return coldTtl(Output.of(coldTtl));
        }

        /**
         * @param createdTime 日志主题创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 日志主题创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableHotTtl 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
         * 
         * @return builder
         * 
         */
        public Builder enableHotTtl(@Nullable Output<Boolean> enableHotTtl) {
            $.enableHotTtl = enableHotTtl;
            return this;
        }

        /**
         * @param enableHotTtl 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
         * 
         * @return builder
         * 
         */
        public Builder enableHotTtl(Boolean enableHotTtl) {
            return enableHotTtl(Output.of(enableHotTtl));
        }

        /**
         * @param enableTracking 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
         * 
         * @return builder
         * 
         */
        public Builder enableTracking(@Nullable Output<Boolean> enableTracking) {
            $.enableTracking = enableTracking;
            return this;
        }

        /**
         * @param enableTracking 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
         * 
         * @return builder
         * 
         */
        public Builder enableTracking(Boolean enableTracking) {
            return enableTracking(Output.of(enableTracking));
        }

        /**
         * @param hotTtl 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
         * 
         * @return builder
         * 
         */
        public Builder hotTtl(@Nullable Output<Integer> hotTtl) {
            $.hotTtl = hotTtl;
            return this;
        }

        /**
         * @param hotTtl 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
         * 
         * @return builder
         * 
         */
        public Builder hotTtl(Integer hotTtl) {
            return hotTtl(Output.of(hotTtl));
        }

        /**
         * @param logPublicIp 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
         * 
         * @return builder
         * 
         */
        public Builder logPublicIp(@Nullable Output<Boolean> logPublicIp) {
            $.logPublicIp = logPublicIp;
            return this;
        }

        /**
         * @param logPublicIp 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
         * 
         * @return builder
         * 
         */
        public Builder logPublicIp(Boolean logPublicIp) {
            return logPublicIp(Output.of(logPublicIp));
        }

        /**
         * @param maxSplitShard 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
         * 
         * @return builder
         * 
         */
        public Builder maxSplitShard(@Nullable Output<Integer> maxSplitShard) {
            $.maxSplitShard = maxSplitShard;
            return this;
        }

        /**
         * @param maxSplitShard 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
         * 
         * @return builder
         * 
         */
        public Builder maxSplitShard(Integer maxSplitShard) {
            return maxSplitShard(Output.of(maxSplitShard));
        }

        /**
         * @param projectId 日志主题所属的日志项目 ID。
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId 日志主题所属的日志项目 ID。
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param shardCount 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
         * 
         * @return builder
         * 
         */
        public Builder shardCount(@Nullable Output<Integer> shardCount) {
            $.shardCount = shardCount;
            return this;
        }

        /**
         * @param shardCount 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
         * 
         * @return builder
         * 
         */
        public Builder shardCount(Integer shardCount) {
            return shardCount(Output.of(shardCount));
        }

        public Builder tags(@Nullable Output<List<TopicTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<TopicTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(TopicTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeFormat 时间格式
         * 
         * @return builder
         * 
         */
        public Builder timeFormat(@Nullable Output<String> timeFormat) {
            $.timeFormat = timeFormat;
            return this;
        }

        /**
         * @param timeFormat 时间格式
         * 
         * @return builder
         * 
         */
        public Builder timeFormat(String timeFormat) {
            return timeFormat(Output.of(timeFormat));
        }

        /**
         * @param timeKey 时间字段名
         * 
         * @return builder
         * 
         */
        public Builder timeKey(@Nullable Output<String> timeKey) {
            $.timeKey = timeKey;
            return this;
        }

        /**
         * @param timeKey 时间字段名
         * 
         * @return builder
         * 
         */
        public Builder timeKey(String timeKey) {
            return timeKey(Output.of(timeKey));
        }

        /**
         * @param topicId 日志主题 ID。
         * 
         * @return builder
         * 
         */
        public Builder topicId(@Nullable Output<String> topicId) {
            $.topicId = topicId;
            return this;
        }

        /**
         * @param topicId 日志主题 ID。
         * 
         * @return builder
         * 
         */
        public Builder topicId(String topicId) {
            return topicId(Output.of(topicId));
        }

        /**
         * @param topicName 日志主题名称。
         * 
         * @return builder
         * 
         */
        public Builder topicName(@Nullable Output<String> topicName) {
            $.topicName = topicName;
            return this;
        }

        /**
         * @param topicName 日志主题名称。
         * 
         * @return builder
         * 
         */
        public Builder topicName(String topicName) {
            return topicName(Output.of(topicName));
        }

        /**
         * @param ttl 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
         * 
         * @return builder
         * 
         */
        public Builder ttl(@Nullable Output<Integer> ttl) {
            $.ttl = ttl;
            return this;
        }

        /**
         * @param ttl 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
         * 
         * @return builder
         * 
         */
        public Builder ttl(Integer ttl) {
            return ttl(Output.of(ttl));
        }

        /**
         * @param updatedTime 日志主题修改时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 日志主题修改时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public TopicState build() {
            return $;
        }
    }

}
