// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vke.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.vke.inputs.AddonStatusArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AddonState extends com.pulumi.resources.ResourceArgs {

    public static final AddonState Empty = new AddonState();

    /**
     * 组件所在集群 ID。
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return 组件所在集群 ID。
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * 组件配置。
     * 
     */
    @Import(name="config")
    private @Nullable Output<String> config;

    /**
     * @return 组件配置。
     * 
     */
    public Optional<Output<String>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * 安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
     * 
     */
    @Import(name="createTime")
    private @Nullable Output<String> createTime;

    /**
     * @return 安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
     * 
     */
    public Optional<Output<String>> createTime() {
        return Optional.ofNullable(this.createTime);
    }

    /**
     * 组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
     * 
     */
    @Import(name="deployMode")
    private @Nullable Output<String> deployMode;

    /**
     * @return 组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
     * 
     */
    public Optional<Output<String>> deployMode() {
        return Optional.ofNullable(this.deployMode);
    }

    /**
     * 部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
     * 
     */
    @Import(name="deployNodeType")
    private @Nullable Output<String> deployNodeType;

    /**
     * @return 部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
     * 
     */
    public Optional<Output<String>> deployNodeType() {
        return Optional.ofNullable(this.deployNodeType);
    }

    /**
     * 组件名称。
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return 组件名称。
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * 组件状态。
     * 
     */
    @Import(name="status")
    private @Nullable Output<AddonStatusArgs> status;

    /**
     * @return 组件状态。
     * 
     */
    public Optional<Output<AddonStatusArgs>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * 更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return 更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    /**
     * 组件版本。
     * 
     */
    @Import(name="version")
    private @Nullable Output<String> version;

    /**
     * @return 组件版本。
     * 
     */
    public Optional<Output<String>> version() {
        return Optional.ofNullable(this.version);
    }

    private AddonState() {}

    private AddonState(AddonState $) {
        this.clusterId = $.clusterId;
        this.config = $.config;
        this.createTime = $.createTime;
        this.deployMode = $.deployMode;
        this.deployNodeType = $.deployNodeType;
        this.name = $.name;
        this.status = $.status;
        this.updateTime = $.updateTime;
        this.version = $.version;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AddonState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AddonState $;

        public Builder() {
            $ = new AddonState();
        }

        public Builder(AddonState defaults) {
            $ = new AddonState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterId 组件所在集群 ID。
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId 组件所在集群 ID。
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param config 组件配置。
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<String> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config 组件配置。
         * 
         * @return builder
         * 
         */
        public Builder config(String config) {
            return config(Output.of(config));
        }

        /**
         * @param createTime 安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(@Nullable Output<String> createTime) {
            $.createTime = createTime;
            return this;
        }

        /**
         * @param createTime 安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
         * 
         * @return builder
         * 
         */
        public Builder createTime(String createTime) {
            return createTime(Output.of(createTime));
        }

        /**
         * @param deployMode 组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
         * 
         * @return builder
         * 
         */
        public Builder deployMode(@Nullable Output<String> deployMode) {
            $.deployMode = deployMode;
            return this;
        }

        /**
         * @param deployMode 组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
         * 
         * @return builder
         * 
         */
        public Builder deployMode(String deployMode) {
            return deployMode(Output.of(deployMode));
        }

        /**
         * @param deployNodeType 部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
         * 
         * @return builder
         * 
         */
        public Builder deployNodeType(@Nullable Output<String> deployNodeType) {
            $.deployNodeType = deployNodeType;
            return this;
        }

        /**
         * @param deployNodeType 部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
         * 
         * @return builder
         * 
         */
        public Builder deployNodeType(String deployNodeType) {
            return deployNodeType(Output.of(deployNodeType));
        }

        /**
         * @param name 组件名称。
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 组件名称。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param status 组件状态。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<AddonStatusArgs> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 组件状态。
         * 
         * @return builder
         * 
         */
        public Builder status(AddonStatusArgs status) {
            return status(Output.of(status));
        }

        /**
         * @param updateTime 更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime 更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        /**
         * @param version 组件版本。
         * 
         * @return builder
         * 
         */
        public Builder version(@Nullable Output<String> version) {
            $.version = version;
            return this;
        }

        /**
         * @param version 组件版本。
         * 
         * @return builder
         * 
         */
        public Builder version(String version) {
            return version(Output.of(version));
        }

        public AddonState build() {
            return $;
        }
    }

}
