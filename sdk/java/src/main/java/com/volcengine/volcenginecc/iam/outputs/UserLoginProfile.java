// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class UserLoginProfile {
    /**
     * @return 登录配置创建时间。
     * 
     */
    private @Nullable String createDate;
    /**
     * @return 上次登录时间。
     * 
     */
    private @Nullable String lastLoginDate;
    /**
     * @return 上次登录IP。
     * 
     */
    private @Nullable String lastLoginIp;
    /**
     * @return 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
     * 
     */
    private @Nullable Double lastResetPasswordTime;
    /**
     * @return 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
     * 
     */
    private @Nullable Boolean loginAllowed;
    /**
     * @return 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
     * 
     */
    private @Nullable Boolean loginLocked;
    /**
     * @return 登录密码。
     * 
     */
    private @Nullable String password;
    /**
     * @return 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
     * 
     */
    private @Nullable Double passwordExpireAt;
    /**
     * @return 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
     * 
     */
    private @Nullable Boolean passwordResetRequired;
    /**
     * @return 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
     * 
     */
    private @Nullable Double safeAuthExemptDuration;
    /**
     * @return 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
     * 
     */
    private @Nullable Double safeAuthExemptRequired;
    /**
     * @return 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
     * 
     */
    private @Nullable Double safeAuthExemptUnit;
    /**
     * @return 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
     * 
     */
    private @Nullable Boolean safeAuthFlag;
    /**
     * @return 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
     * 
     */
    private @Nullable String safeAuthType;
    /**
     * @return 登录配置更新时间。
     * 
     */
    private @Nullable String updateDate;

    private UserLoginProfile() {}
    /**
     * @return 登录配置创建时间。
     * 
     */
    public Optional<String> createDate() {
        return Optional.ofNullable(this.createDate);
    }
    /**
     * @return 上次登录时间。
     * 
     */
    public Optional<String> lastLoginDate() {
        return Optional.ofNullable(this.lastLoginDate);
    }
    /**
     * @return 上次登录IP。
     * 
     */
    public Optional<String> lastLoginIp() {
        return Optional.ofNullable(this.lastLoginIp);
    }
    /**
     * @return 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
     * 
     */
    public Optional<Double> lastResetPasswordTime() {
        return Optional.ofNullable(this.lastResetPasswordTime);
    }
    /**
     * @return 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
     * 
     */
    public Optional<Boolean> loginAllowed() {
        return Optional.ofNullable(this.loginAllowed);
    }
    /**
     * @return 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
     * 
     */
    public Optional<Boolean> loginLocked() {
        return Optional.ofNullable(this.loginLocked);
    }
    /**
     * @return 登录密码。
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
     * 
     */
    public Optional<Double> passwordExpireAt() {
        return Optional.ofNullable(this.passwordExpireAt);
    }
    /**
     * @return 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
     * 
     */
    public Optional<Boolean> passwordResetRequired() {
        return Optional.ofNullable(this.passwordResetRequired);
    }
    /**
     * @return 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
     * 
     */
    public Optional<Double> safeAuthExemptDuration() {
        return Optional.ofNullable(this.safeAuthExemptDuration);
    }
    /**
     * @return 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
     * 
     */
    public Optional<Double> safeAuthExemptRequired() {
        return Optional.ofNullable(this.safeAuthExemptRequired);
    }
    /**
     * @return 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
     * 
     */
    public Optional<Double> safeAuthExemptUnit() {
        return Optional.ofNullable(this.safeAuthExemptUnit);
    }
    /**
     * @return 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
     * 
     */
    public Optional<Boolean> safeAuthFlag() {
        return Optional.ofNullable(this.safeAuthFlag);
    }
    /**
     * @return 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
     * 
     */
    public Optional<String> safeAuthType() {
        return Optional.ofNullable(this.safeAuthType);
    }
    /**
     * @return 登录配置更新时间。
     * 
     */
    public Optional<String> updateDate() {
        return Optional.ofNullable(this.updateDate);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(UserLoginProfile defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String createDate;
        private @Nullable String lastLoginDate;
        private @Nullable String lastLoginIp;
        private @Nullable Double lastResetPasswordTime;
        private @Nullable Boolean loginAllowed;
        private @Nullable Boolean loginLocked;
        private @Nullable String password;
        private @Nullable Double passwordExpireAt;
        private @Nullable Boolean passwordResetRequired;
        private @Nullable Double safeAuthExemptDuration;
        private @Nullable Double safeAuthExemptRequired;
        private @Nullable Double safeAuthExemptUnit;
        private @Nullable Boolean safeAuthFlag;
        private @Nullable String safeAuthType;
        private @Nullable String updateDate;
        public Builder() {}
        public Builder(UserLoginProfile defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createDate = defaults.createDate;
    	      this.lastLoginDate = defaults.lastLoginDate;
    	      this.lastLoginIp = defaults.lastLoginIp;
    	      this.lastResetPasswordTime = defaults.lastResetPasswordTime;
    	      this.loginAllowed = defaults.loginAllowed;
    	      this.loginLocked = defaults.loginLocked;
    	      this.password = defaults.password;
    	      this.passwordExpireAt = defaults.passwordExpireAt;
    	      this.passwordResetRequired = defaults.passwordResetRequired;
    	      this.safeAuthExemptDuration = defaults.safeAuthExemptDuration;
    	      this.safeAuthExemptRequired = defaults.safeAuthExemptRequired;
    	      this.safeAuthExemptUnit = defaults.safeAuthExemptUnit;
    	      this.safeAuthFlag = defaults.safeAuthFlag;
    	      this.safeAuthType = defaults.safeAuthType;
    	      this.updateDate = defaults.updateDate;
        }

        @CustomType.Setter
        public Builder createDate(@Nullable String createDate) {

            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastLoginDate(@Nullable String lastLoginDate) {

            this.lastLoginDate = lastLoginDate;
            return this;
        }
        @CustomType.Setter
        public Builder lastLoginIp(@Nullable String lastLoginIp) {

            this.lastLoginIp = lastLoginIp;
            return this;
        }
        @CustomType.Setter
        public Builder lastResetPasswordTime(@Nullable Double lastResetPasswordTime) {

            this.lastResetPasswordTime = lastResetPasswordTime;
            return this;
        }
        @CustomType.Setter
        public Builder loginAllowed(@Nullable Boolean loginAllowed) {

            this.loginAllowed = loginAllowed;
            return this;
        }
        @CustomType.Setter
        public Builder loginLocked(@Nullable Boolean loginLocked) {

            this.loginLocked = loginLocked;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {

            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordExpireAt(@Nullable Double passwordExpireAt) {

            this.passwordExpireAt = passwordExpireAt;
            return this;
        }
        @CustomType.Setter
        public Builder passwordResetRequired(@Nullable Boolean passwordResetRequired) {

            this.passwordResetRequired = passwordResetRequired;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthExemptDuration(@Nullable Double safeAuthExemptDuration) {

            this.safeAuthExemptDuration = safeAuthExemptDuration;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthExemptRequired(@Nullable Double safeAuthExemptRequired) {

            this.safeAuthExemptRequired = safeAuthExemptRequired;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthExemptUnit(@Nullable Double safeAuthExemptUnit) {

            this.safeAuthExemptUnit = safeAuthExemptUnit;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthFlag(@Nullable Boolean safeAuthFlag) {

            this.safeAuthFlag = safeAuthFlag;
            return this;
        }
        @CustomType.Setter
        public Builder safeAuthType(@Nullable String safeAuthType) {

            this.safeAuthType = safeAuthType;
            return this;
        }
        @CustomType.Setter
        public Builder updateDate(@Nullable String updateDate) {

            this.updateDate = updateDate;
            return this;
        }
        public UserLoginProfile build() {
            final var _resultValue = new UserLoginProfile();
            _resultValue.createDate = createDate;
            _resultValue.lastLoginDate = lastLoginDate;
            _resultValue.lastLoginIp = lastLoginIp;
            _resultValue.lastResetPasswordTime = lastResetPasswordTime;
            _resultValue.loginAllowed = loginAllowed;
            _resultValue.loginLocked = loginLocked;
            _resultValue.password = password;
            _resultValue.passwordExpireAt = passwordExpireAt;
            _resultValue.passwordResetRequired = passwordResetRequired;
            _resultValue.safeAuthExemptDuration = safeAuthExemptDuration;
            _resultValue.safeAuthExemptRequired = safeAuthExemptRequired;
            _resultValue.safeAuthExemptUnit = safeAuthExemptUnit;
            _resultValue.safeAuthFlag = safeAuthFlag;
            _resultValue.safeAuthType = safeAuthType;
            _resultValue.updateDate = updateDate;
            return _resultValue;
        }
    }
}
