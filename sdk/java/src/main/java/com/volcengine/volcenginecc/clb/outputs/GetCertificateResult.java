// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetCertificateTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCertificateResult {
    /**
     * @return 证书的ID。
     * 
     */
    private String certificateId;
    /**
     * @return 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
     * 
     */
    private String certificateName;
    /**
     * @return 证书的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
     * 
     */
    private String description;
    /**
     * @return 证书的主域名。
     * 
     */
    private String domainName;
    /**
     * @return 证书的过期时间。
     * 
     */
    private String expiredAt;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 证书关联的监听器的ID。
     * 
     */
    private List<String> listeners;
    /**
     * @return 证书的私钥。
     * 
     */
    private String privateKey;
    /**
     * @return 证书所属项目的名称。不填默认为default。
     * 
     */
    private String projectName;
    /**
     * @return 证书的公钥。
     * 
     */
    private String publicKey;
    /**
     * @return 是否为托管资源。true：托管资源。false：非托管资源。
     * 
     */
    private Boolean serviceManaged;
    /**
     * @return 证书的备用域名列表。
     * 
     */
    private List<String> subjectAlternativeNames;
    /**
     * @return 标签列表。
     * 
     */
    private List<GetCertificateTag> tags;

    private GetCertificateResult() {}
    /**
     * @return 证书的ID。
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
     * 
     */
    public String certificateName() {
        return this.certificateName;
    }
    /**
     * @return 证书的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 证书的主域名。
     * 
     */
    public String domainName() {
        return this.domainName;
    }
    /**
     * @return 证书的过期时间。
     * 
     */
    public String expiredAt() {
        return this.expiredAt;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 证书关联的监听器的ID。
     * 
     */
    public List<String> listeners() {
        return this.listeners;
    }
    /**
     * @return 证书的私钥。
     * 
     */
    public String privateKey() {
        return this.privateKey;
    }
    /**
     * @return 证书所属项目的名称。不填默认为default。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 证书的公钥。
     * 
     */
    public String publicKey() {
        return this.publicKey;
    }
    /**
     * @return 是否为托管资源。true：托管资源。false：非托管资源。
     * 
     */
    public Boolean serviceManaged() {
        return this.serviceManaged;
    }
    /**
     * @return 证书的备用域名列表。
     * 
     */
    public List<String> subjectAlternativeNames() {
        return this.subjectAlternativeNames;
    }
    /**
     * @return 标签列表。
     * 
     */
    public List<GetCertificateTag> tags() {
        return this.tags;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCertificateResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String certificateId;
        private String certificateName;
        private String createdTime;
        private String description;
        private String domainName;
        private String expiredAt;
        private String id;
        private List<String> listeners;
        private String privateKey;
        private String projectName;
        private String publicKey;
        private Boolean serviceManaged;
        private List<String> subjectAlternativeNames;
        private List<GetCertificateTag> tags;
        public Builder() {}
        public Builder(GetCertificateResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.certificateId = defaults.certificateId;
    	      this.certificateName = defaults.certificateName;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.domainName = defaults.domainName;
    	      this.expiredAt = defaults.expiredAt;
    	      this.id = defaults.id;
    	      this.listeners = defaults.listeners;
    	      this.privateKey = defaults.privateKey;
    	      this.projectName = defaults.projectName;
    	      this.publicKey = defaults.publicKey;
    	      this.serviceManaged = defaults.serviceManaged;
    	      this.subjectAlternativeNames = defaults.subjectAlternativeNames;
    	      this.tags = defaults.tags;
        }

        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(String certificateName) {
            if (certificateName == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "certificateName");
            }
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainName(String domainName) {
            if (domainName == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "domainName");
            }
            this.domainName = domainName;
            return this;
        }
        @CustomType.Setter
        public Builder expiredAt(String expiredAt) {
            if (expiredAt == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "expiredAt");
            }
            this.expiredAt = expiredAt;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listeners(List<String> listeners) {
            if (listeners == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "listeners");
            }
            this.listeners = listeners;
            return this;
        }
        public Builder listeners(String... listeners) {
            return listeners(List.of(listeners));
        }
        @CustomType.Setter
        public Builder privateKey(String privateKey) {
            if (privateKey == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "privateKey");
            }
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder publicKey(String publicKey) {
            if (publicKey == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "publicKey");
            }
            this.publicKey = publicKey;
            return this;
        }
        @CustomType.Setter
        public Builder serviceManaged(Boolean serviceManaged) {
            if (serviceManaged == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "serviceManaged");
            }
            this.serviceManaged = serviceManaged;
            return this;
        }
        @CustomType.Setter
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            if (subjectAlternativeNames == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "subjectAlternativeNames");
            }
            this.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }
        @CustomType.Setter
        public Builder tags(List<GetCertificateTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetCertificateResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetCertificateTag... tags) {
            return tags(List.of(tags));
        }
        public GetCertificateResult build() {
            final var _resultValue = new GetCertificateResult();
            _resultValue.certificateId = certificateId;
            _resultValue.certificateName = certificateName;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.domainName = domainName;
            _resultValue.expiredAt = expiredAt;
            _resultValue.id = id;
            _resultValue.listeners = listeners;
            _resultValue.privateKey = privateKey;
            _resultValue.projectName = projectName;
            _resultValue.publicKey = publicKey;
            _resultValue.serviceManaged = serviceManaged;
            _resultValue.subjectAlternativeNames = subjectAlternativeNames;
            _resultValue.tags = tags;
            return _resultValue;
        }
    }
}
