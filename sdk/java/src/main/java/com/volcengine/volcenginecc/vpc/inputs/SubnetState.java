// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.vpc.inputs.SubnetRouteTableArgs;
import com.volcengine.volcenginecc.vpc.inputs.SubnetTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SubnetState extends com.pulumi.resources.ResourceArgs {

    public static final SubnetState Empty = new SubnetState();

    /**
     * 子网所属账户的ID。
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<String> accountId;

    /**
     * @return 子网所属账户的ID。
     * 
     */
    public Optional<Output<String>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * 子网中可用的IP地址数量。
     * 
     */
    @Import(name="availableIpAddressCount")
    private @Nullable Output<Integer> availableIpAddressCount;

    /**
     * @return 子网中可用的IP地址数量。
     * 
     */
    public Optional<Output<Integer>> availableIpAddressCount() {
        return Optional.ofNullable(this.availableIpAddressCount);
    }

    /**
     * 子网的IPv4网段。
     * 
     */
    @Import(name="cidrBlock")
    private @Nullable Output<String> cidrBlock;

    /**
     * @return 子网的IPv4网段。
     * 
     */
    public Optional<Output<String>> cidrBlock() {
        return Optional.ofNullable(this.cidrBlock);
    }

    /**
     * 子网的创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 子网的创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
     * 
     */
    @Import(name="enableIpv6")
    private @Nullable Output<Boolean> enableIpv6;

    /**
     * @return 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
     * 
     */
    public Optional<Output<Boolean>> enableIpv6() {
        return Optional.ofNullable(this.enableIpv6);
    }

    /**
     * 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
     * 
     */
    @Import(name="ipv6CidrBlock")
    private @Nullable Output<String> ipv6CidrBlock;

    /**
     * @return 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
     * 
     */
    public Optional<Output<String>> ipv6CidrBlock() {
        return Optional.ofNullable(this.ipv6CidrBlock);
    }

    /**
     * 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
     * 
     */
    @Import(name="isDefault")
    private @Nullable Output<Boolean> isDefault;

    /**
     * @return 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
     * 
     */
    public Optional<Output<Boolean>> isDefault() {
        return Optional.ofNullable(this.isDefault);
    }

    /**
     * 子网关联的网络ACL的ID。
     * 
     */
    @Import(name="networkAclId")
    private @Nullable Output<String> networkAclId;

    /**
     * @return 子网关联的网络ACL的ID。
     * 
     */
    public Optional<Output<String>> networkAclId() {
        return Optional.ofNullable(this.networkAclId);
    }

    /**
     * 子网所在VPC实例所属项目的名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 子网所在VPC实例所属项目的名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 路由表信息。
     * 
     */
    @Import(name="routeTable")
    private @Nullable Output<SubnetRouteTableArgs> routeTable;

    /**
     * @return 路由表信息。
     * 
     */
    public Optional<Output<SubnetRouteTableArgs>> routeTable() {
        return Optional.ofNullable(this.routeTable);
    }

    /**
     * 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * 待修改信息的子网的ID。
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return 待修改信息的子网的ID。
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    /**
     * 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
     * 
     */
    @Import(name="subnetName")
    private @Nullable Output<String> subnetName;

    /**
     * @return 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
     * 
     */
    public Optional<Output<String>> subnetName() {
        return Optional.ofNullable(this.subnetName);
    }

    @Import(name="tags")
    private @Nullable Output<List<SubnetTagArgs>> tags;

    public Optional<Output<List<SubnetTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 子网下可用IP总数。
     * 
     */
    @Import(name="totalIpv4Count")
    private @Nullable Output<Integer> totalIpv4Count;

    /**
     * @return 子网下可用IP总数。
     * 
     */
    public Optional<Output<Integer>> totalIpv4Count() {
        return Optional.ofNullable(this.totalIpv4Count);
    }

    /**
     * 子网的更新时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 子网的更新时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    /**
     * 子网所属VPC的ID。
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return 子网所属VPC的ID。
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    /**
     * 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private SubnetState() {}

    private SubnetState(SubnetState $) {
        this.accountId = $.accountId;
        this.availableIpAddressCount = $.availableIpAddressCount;
        this.cidrBlock = $.cidrBlock;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.enableIpv6 = $.enableIpv6;
        this.ipv6CidrBlock = $.ipv6CidrBlock;
        this.isDefault = $.isDefault;
        this.networkAclId = $.networkAclId;
        this.projectName = $.projectName;
        this.routeTable = $.routeTable;
        this.status = $.status;
        this.subnetId = $.subnetId;
        this.subnetName = $.subnetName;
        this.tags = $.tags;
        this.totalIpv4Count = $.totalIpv4Count;
        this.updatedTime = $.updatedTime;
        this.vpcId = $.vpcId;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SubnetState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SubnetState $;

        public Builder() {
            $ = new SubnetState();
        }

        public Builder(SubnetState defaults) {
            $ = new SubnetState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId 子网所属账户的ID。
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<String> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId 子网所属账户的ID。
         * 
         * @return builder
         * 
         */
        public Builder accountId(String accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param availableIpAddressCount 子网中可用的IP地址数量。
         * 
         * @return builder
         * 
         */
        public Builder availableIpAddressCount(@Nullable Output<Integer> availableIpAddressCount) {
            $.availableIpAddressCount = availableIpAddressCount;
            return this;
        }

        /**
         * @param availableIpAddressCount 子网中可用的IP地址数量。
         * 
         * @return builder
         * 
         */
        public Builder availableIpAddressCount(Integer availableIpAddressCount) {
            return availableIpAddressCount(Output.of(availableIpAddressCount));
        }

        /**
         * @param cidrBlock 子网的IPv4网段。
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(@Nullable Output<String> cidrBlock) {
            $.cidrBlock = cidrBlock;
            return this;
        }

        /**
         * @param cidrBlock 子网的IPv4网段。
         * 
         * @return builder
         * 
         */
        public Builder cidrBlock(String cidrBlock) {
            return cidrBlock(Output.of(cidrBlock));
        }

        /**
         * @param createdTime 子网的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 子网的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableIpv6 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(@Nullable Output<Boolean> enableIpv6) {
            $.enableIpv6 = enableIpv6;
            return this;
        }

        /**
         * @param enableIpv6 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
         * 
         * @return builder
         * 
         */
        public Builder enableIpv6(Boolean enableIpv6) {
            return enableIpv6(Output.of(enableIpv6));
        }

        /**
         * @param ipv6CidrBlock 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(@Nullable Output<String> ipv6CidrBlock) {
            $.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }

        /**
         * @param ipv6CidrBlock 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
         * 
         * @return builder
         * 
         */
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            return ipv6CidrBlock(Output.of(ipv6CidrBlock));
        }

        /**
         * @param isDefault 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
         * 
         * @return builder
         * 
         */
        public Builder isDefault(@Nullable Output<Boolean> isDefault) {
            $.isDefault = isDefault;
            return this;
        }

        /**
         * @param isDefault 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
         * 
         * @return builder
         * 
         */
        public Builder isDefault(Boolean isDefault) {
            return isDefault(Output.of(isDefault));
        }

        /**
         * @param networkAclId 子网关联的网络ACL的ID。
         * 
         * @return builder
         * 
         */
        public Builder networkAclId(@Nullable Output<String> networkAclId) {
            $.networkAclId = networkAclId;
            return this;
        }

        /**
         * @param networkAclId 子网关联的网络ACL的ID。
         * 
         * @return builder
         * 
         */
        public Builder networkAclId(String networkAclId) {
            return networkAclId(Output.of(networkAclId));
        }

        /**
         * @param projectName 子网所在VPC实例所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 子网所在VPC实例所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param routeTable 路由表信息。
         * 
         * @return builder
         * 
         */
        public Builder routeTable(@Nullable Output<SubnetRouteTableArgs> routeTable) {
            $.routeTable = routeTable;
            return this;
        }

        /**
         * @param routeTable 路由表信息。
         * 
         * @return builder
         * 
         */
        public Builder routeTable(SubnetRouteTableArgs routeTable) {
            return routeTable(Output.of(routeTable));
        }

        /**
         * @param status 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param subnetId 待修改信息的子网的ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId 待修改信息的子网的ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        /**
         * @param subnetName 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetName(@Nullable Output<String> subnetName) {
            $.subnetName = subnetName;
            return this;
        }

        /**
         * @param subnetName 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetName(String subnetName) {
            return subnetName(Output.of(subnetName));
        }

        public Builder tags(@Nullable Output<List<SubnetTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<SubnetTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(SubnetTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param totalIpv4Count 子网下可用IP总数。
         * 
         * @return builder
         * 
         */
        public Builder totalIpv4Count(@Nullable Output<Integer> totalIpv4Count) {
            $.totalIpv4Count = totalIpv4Count;
            return this;
        }

        /**
         * @param totalIpv4Count 子网下可用IP总数。
         * 
         * @return builder
         * 
         */
        public Builder totalIpv4Count(Integer totalIpv4Count) {
            return totalIpv4Count(Output.of(totalIpv4Count));
        }

        /**
         * @param updatedTime 子网的更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 子网的更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        /**
         * @param vpcId 子网所属VPC的ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId 子网所属VPC的ID。
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        /**
         * @param zoneId 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public SubnetState build() {
            return $;
        }
    }

}
