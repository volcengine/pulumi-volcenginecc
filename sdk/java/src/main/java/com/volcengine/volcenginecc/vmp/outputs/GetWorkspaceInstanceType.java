// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vmp.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetWorkspaceInstanceType {
    /**
     * @return 最大活跃时序数。
     * 
     */
    private Integer activeSeries;
    /**
     * @return 可用区（az）数。
     * 
     */
    private Integer availabilityZoneReplicas;
    /**
     * @return 降采样策略。
     * 
     */
    private List<String> downsamplingPeriods;
    /**
     * @return 最大每秒写入样本数。
     * 
     */
    private Integer ingestSamplesPerSecond;
    /**
     * @return 最大查询并发数。
     * 
     */
    private Integer queryConcurrency;
    /**
     * @return 最大查询 QPS。
     * 
     */
    private Integer queryPerSecond;
    /**
     * @return 每个可用区（az）的数据副本数。
     * 
     */
    private Integer replicasPerZone;
    /**
     * @return 最长数据保留时间。
     * 
     */
    private String retentionPeriod;
    /**
     * @return 最大每秒扫描样本数。
     * 
     */
    private Integer scanSamplesPerSecond;
    /**
     * @return 最大每秒扫描时序数。
     * 
     */
    private Integer scanSeriesPerSecond;

    private GetWorkspaceInstanceType() {}
    /**
     * @return 最大活跃时序数。
     * 
     */
    public Integer activeSeries() {
        return this.activeSeries;
    }
    /**
     * @return 可用区（az）数。
     * 
     */
    public Integer availabilityZoneReplicas() {
        return this.availabilityZoneReplicas;
    }
    /**
     * @return 降采样策略。
     * 
     */
    public List<String> downsamplingPeriods() {
        return this.downsamplingPeriods;
    }
    /**
     * @return 最大每秒写入样本数。
     * 
     */
    public Integer ingestSamplesPerSecond() {
        return this.ingestSamplesPerSecond;
    }
    /**
     * @return 最大查询并发数。
     * 
     */
    public Integer queryConcurrency() {
        return this.queryConcurrency;
    }
    /**
     * @return 最大查询 QPS。
     * 
     */
    public Integer queryPerSecond() {
        return this.queryPerSecond;
    }
    /**
     * @return 每个可用区（az）的数据副本数。
     * 
     */
    public Integer replicasPerZone() {
        return this.replicasPerZone;
    }
    /**
     * @return 最长数据保留时间。
     * 
     */
    public String retentionPeriod() {
        return this.retentionPeriod;
    }
    /**
     * @return 最大每秒扫描样本数。
     * 
     */
    public Integer scanSamplesPerSecond() {
        return this.scanSamplesPerSecond;
    }
    /**
     * @return 最大每秒扫描时序数。
     * 
     */
    public Integer scanSeriesPerSecond() {
        return this.scanSeriesPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetWorkspaceInstanceType defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer activeSeries;
        private Integer availabilityZoneReplicas;
        private List<String> downsamplingPeriods;
        private Integer ingestSamplesPerSecond;
        private Integer queryConcurrency;
        private Integer queryPerSecond;
        private Integer replicasPerZone;
        private String retentionPeriod;
        private Integer scanSamplesPerSecond;
        private Integer scanSeriesPerSecond;
        public Builder() {}
        public Builder(GetWorkspaceInstanceType defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.activeSeries = defaults.activeSeries;
    	      this.availabilityZoneReplicas = defaults.availabilityZoneReplicas;
    	      this.downsamplingPeriods = defaults.downsamplingPeriods;
    	      this.ingestSamplesPerSecond = defaults.ingestSamplesPerSecond;
    	      this.queryConcurrency = defaults.queryConcurrency;
    	      this.queryPerSecond = defaults.queryPerSecond;
    	      this.replicasPerZone = defaults.replicasPerZone;
    	      this.retentionPeriod = defaults.retentionPeriod;
    	      this.scanSamplesPerSecond = defaults.scanSamplesPerSecond;
    	      this.scanSeriesPerSecond = defaults.scanSeriesPerSecond;
        }

        @CustomType.Setter
        public Builder activeSeries(Integer activeSeries) {
            if (activeSeries == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "activeSeries");
            }
            this.activeSeries = activeSeries;
            return this;
        }
        @CustomType.Setter
        public Builder availabilityZoneReplicas(Integer availabilityZoneReplicas) {
            if (availabilityZoneReplicas == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "availabilityZoneReplicas");
            }
            this.availabilityZoneReplicas = availabilityZoneReplicas;
            return this;
        }
        @CustomType.Setter
        public Builder downsamplingPeriods(List<String> downsamplingPeriods) {
            if (downsamplingPeriods == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "downsamplingPeriods");
            }
            this.downsamplingPeriods = downsamplingPeriods;
            return this;
        }
        public Builder downsamplingPeriods(String... downsamplingPeriods) {
            return downsamplingPeriods(List.of(downsamplingPeriods));
        }
        @CustomType.Setter
        public Builder ingestSamplesPerSecond(Integer ingestSamplesPerSecond) {
            if (ingestSamplesPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "ingestSamplesPerSecond");
            }
            this.ingestSamplesPerSecond = ingestSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder queryConcurrency(Integer queryConcurrency) {
            if (queryConcurrency == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "queryConcurrency");
            }
            this.queryConcurrency = queryConcurrency;
            return this;
        }
        @CustomType.Setter
        public Builder queryPerSecond(Integer queryPerSecond) {
            if (queryPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "queryPerSecond");
            }
            this.queryPerSecond = queryPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder replicasPerZone(Integer replicasPerZone) {
            if (replicasPerZone == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "replicasPerZone");
            }
            this.replicasPerZone = replicasPerZone;
            return this;
        }
        @CustomType.Setter
        public Builder retentionPeriod(String retentionPeriod) {
            if (retentionPeriod == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "retentionPeriod");
            }
            this.retentionPeriod = retentionPeriod;
            return this;
        }
        @CustomType.Setter
        public Builder scanSamplesPerSecond(Integer scanSamplesPerSecond) {
            if (scanSamplesPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "scanSamplesPerSecond");
            }
            this.scanSamplesPerSecond = scanSamplesPerSecond;
            return this;
        }
        @CustomType.Setter
        public Builder scanSeriesPerSecond(Integer scanSeriesPerSecond) {
            if (scanSeriesPerSecond == null) {
              throw new MissingRequiredPropertyException("GetWorkspaceInstanceType", "scanSeriesPerSecond");
            }
            this.scanSeriesPerSecond = scanSeriesPerSecond;
            return this;
        }
        public GetWorkspaceInstanceType build() {
            final var _resultValue = new GetWorkspaceInstanceType();
            _resultValue.activeSeries = activeSeries;
            _resultValue.availabilityZoneReplicas = availabilityZoneReplicas;
            _resultValue.downsamplingPeriods = downsamplingPeriods;
            _resultValue.ingestSamplesPerSecond = ingestSamplesPerSecond;
            _resultValue.queryConcurrency = queryConcurrency;
            _resultValue.queryPerSecond = queryPerSecond;
            _resultValue.replicasPerZone = replicasPerZone;
            _resultValue.retentionPeriod = retentionPeriod;
            _resultValue.scanSamplesPerSecond = scanSamplesPerSecond;
            _resultValue.scanSeriesPerSecond = scanSeriesPerSecond;
            return _resultValue;
        }
    }
}
