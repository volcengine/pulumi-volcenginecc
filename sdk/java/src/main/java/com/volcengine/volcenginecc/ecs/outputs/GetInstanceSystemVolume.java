// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInstanceSystemVolume {
    /**
     * @return 实例是否随实例删除。
     * 
     */
    private Boolean deleteWithInstance;
    /**
     * @return 实例的额外性能IOPS。
     * 
     */
    private Integer extraPerformanceIops;
    /**
     * @return 实例的额外性能吞吐量，单位MB。
     * 
     */
    private Integer extraPerformanceThroughputMb;
    /**
     * @return 额外性能的类型，取值如下：Balance：均衡型额外性能。IOPS：IOPS型额外性能。Throughput：吞吐量型额外性能。
     * 
     */
    private String extraPerformanceTypeId;
    /**
     * @return 实例的大小，单位GiB。
     * 
     */
    private Integer size;
    /**
     * @return 实例的快照ID。
     * 
     */
    private String snapshotId;
    /**
     * @return 实例的卷ID。
     * 
     */
    private String volumeId;
    /**
     * @return 云盘类型，取值说明如下：PTSSD：性能型SSD。ESSD_PL0：极速型SSD云盘，PL0规格。ESSD_FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0：吞吐型SSD云盘。
     * 
     */
    private String volumeType;

    private GetInstanceSystemVolume() {}
    /**
     * @return 实例是否随实例删除。
     * 
     */
    public Boolean deleteWithInstance() {
        return this.deleteWithInstance;
    }
    /**
     * @return 实例的额外性能IOPS。
     * 
     */
    public Integer extraPerformanceIops() {
        return this.extraPerformanceIops;
    }
    /**
     * @return 实例的额外性能吞吐量，单位MB。
     * 
     */
    public Integer extraPerformanceThroughputMb() {
        return this.extraPerformanceThroughputMb;
    }
    /**
     * @return 额外性能的类型，取值如下：Balance：均衡型额外性能。IOPS：IOPS型额外性能。Throughput：吞吐量型额外性能。
     * 
     */
    public String extraPerformanceTypeId() {
        return this.extraPerformanceTypeId;
    }
    /**
     * @return 实例的大小，单位GiB。
     * 
     */
    public Integer size() {
        return this.size;
    }
    /**
     * @return 实例的快照ID。
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return 实例的卷ID。
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }
    /**
     * @return 云盘类型，取值说明如下：PTSSD：性能型SSD。ESSD_PL0：极速型SSD云盘，PL0规格。ESSD_FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0：吞吐型SSD云盘。
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInstanceSystemVolume defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean deleteWithInstance;
        private Integer extraPerformanceIops;
        private Integer extraPerformanceThroughputMb;
        private String extraPerformanceTypeId;
        private Integer size;
        private String snapshotId;
        private String volumeId;
        private String volumeType;
        public Builder() {}
        public Builder(GetInstanceSystemVolume defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.deleteWithInstance = defaults.deleteWithInstance;
    	      this.extraPerformanceIops = defaults.extraPerformanceIops;
    	      this.extraPerformanceThroughputMb = defaults.extraPerformanceThroughputMb;
    	      this.extraPerformanceTypeId = defaults.extraPerformanceTypeId;
    	      this.size = defaults.size;
    	      this.snapshotId = defaults.snapshotId;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeType = defaults.volumeType;
        }

        @CustomType.Setter
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            if (deleteWithInstance == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "deleteWithInstance");
            }
            this.deleteWithInstance = deleteWithInstance;
            return this;
        }
        @CustomType.Setter
        public Builder extraPerformanceIops(Integer extraPerformanceIops) {
            if (extraPerformanceIops == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "extraPerformanceIops");
            }
            this.extraPerformanceIops = extraPerformanceIops;
            return this;
        }
        @CustomType.Setter
        public Builder extraPerformanceThroughputMb(Integer extraPerformanceThroughputMb) {
            if (extraPerformanceThroughputMb == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "extraPerformanceThroughputMb");
            }
            this.extraPerformanceThroughputMb = extraPerformanceThroughputMb;
            return this;
        }
        @CustomType.Setter
        public Builder extraPerformanceTypeId(String extraPerformanceTypeId) {
            if (extraPerformanceTypeId == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "extraPerformanceTypeId");
            }
            this.extraPerformanceTypeId = extraPerformanceTypeId;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            if (volumeId == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "volumeId");
            }
            this.volumeId = volumeId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            if (volumeType == null) {
              throw new MissingRequiredPropertyException("GetInstanceSystemVolume", "volumeType");
            }
            this.volumeType = volumeType;
            return this;
        }
        public GetInstanceSystemVolume build() {
            final var _resultValue = new GetInstanceSystemVolume();
            _resultValue.deleteWithInstance = deleteWithInstance;
            _resultValue.extraPerformanceIops = extraPerformanceIops;
            _resultValue.extraPerformanceThroughputMb = extraPerformanceThroughputMb;
            _resultValue.extraPerformanceTypeId = extraPerformanceTypeId;
            _resultValue.size = size;
            _resultValue.snapshotId = snapshotId;
            _resultValue.volumeId = volumeId;
            _resultValue.volumeType = volumeType;
            return _resultValue;
        }
    }
}
