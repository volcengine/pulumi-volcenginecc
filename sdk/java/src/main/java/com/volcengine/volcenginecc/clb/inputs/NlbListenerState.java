// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.clb.inputs.NlbListenerHealthArgs;
import com.volcengine.volcenginecc.clb.inputs.NlbListenerTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NlbListenerState extends com.pulumi.resources.ResourceArgs {

    public static final NlbListenerState Empty = new NlbListenerState();

    /**
     * TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * 监听器的连接超时时间（秒）。
     * 
     */
    @Import(name="connectionTimeout")
    private @Nullable Output<Integer> connectionTimeout;

    /**
     * @return 监听器的连接超时时间（秒）。
     * 
     */
    public Optional<Output<Integer>> connectionTimeout() {
        return Optional.ofNullable(this.connectionTimeout);
    }

    /**
     * 监听器的创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 监听器的创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 监听器描述信息。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 监听器描述信息。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 是否启用监听器。true：开启；false：关闭。
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return 是否启用监听器。true：开启；false：关闭。
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * 全端口监听的结束端口，仅当Port为0时有效。
     * 
     */
    @Import(name="endPort")
    private @Nullable Output<Integer> endPort;

    /**
     * @return 全端口监听的结束端口，仅当Port为0时有效。
     * 
     */
    public Optional<Output<Integer>> endPort() {
        return Optional.ofNullable(this.endPort);
    }

    @Import(name="healths")
    private @Nullable Output<List<NlbListenerHealthArgs>> healths;

    public Optional<Output<List<NlbListenerHealthArgs>>> healths() {
        return Optional.ofNullable(this.healths);
    }

    /**
     * 监听器唯一标识。
     * 
     */
    @Import(name="listenerId")
    private @Nullable Output<String> listenerId;

    /**
     * @return 监听器唯一标识。
     * 
     */
    public Optional<Output<String>> listenerId() {
        return Optional.ofNullable(this.listenerId);
    }

    /**
     * 监听器名称。
     * 
     */
    @Import(name="listenerName")
    private @Nullable Output<String> listenerName;

    /**
     * @return 监听器名称。
     * 
     */
    public Optional<Output<String>> listenerName() {
        return Optional.ofNullable(this.listenerName);
    }

    /**
     * 负载均衡实例ID。
     * 
     */
    @Import(name="loadBalancerId")
    private @Nullable Output<String> loadBalancerId;

    /**
     * @return 负载均衡实例ID。
     * 
     */
    public Optional<Output<String>> loadBalancerId() {
        return Optional.ofNullable(this.loadBalancerId);
    }

    /**
     * 监听器接收请求的端口，0表示启用全端口监听。
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return 监听器接收请求的端口，0表示启用全端口监听。
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 监听协议类型。
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return 监听协议类型。
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     * 
     */
    @Import(name="securityPolicyId")
    private @Nullable Output<String> securityPolicyId;

    /**
     * @return TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     * 
     */
    public Optional<Output<String>> securityPolicyId() {
        return Optional.ofNullable(this.securityPolicyId);
    }

    /**
     * 监听器关联的服务器组ID。
     * 
     */
    @Import(name="serverGroupId")
    private @Nullable Output<String> serverGroupId;

    /**
     * @return 监听器关联的服务器组ID。
     * 
     */
    public Optional<Output<String>> serverGroupId() {
        return Optional.ofNullable(this.serverGroupId);
    }

    /**
     * 全端口监听的起始端口，仅当Port为0时有效。
     * 
     */
    @Import(name="startPort")
    private @Nullable Output<Integer> startPort;

    /**
     * @return 全端口监听的起始端口，仅当Port为0时有效。
     * 
     */
    public Optional<Output<Integer>> startPort() {
        return Optional.ofNullable(this.startPort);
    }

    /**
     * 监听器的状态。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 监听器的状态。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<NlbListenerTagArgs>> tags;

    public Optional<Output<List<NlbListenerTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 监听器最近操作时间。
     * 
     */
    @Import(name="updatedTime")
    private @Nullable Output<String> updatedTime;

    /**
     * @return 监听器最近操作时间。
     * 
     */
    public Optional<Output<String>> updatedTime() {
        return Optional.ofNullable(this.updatedTime);
    }

    private NlbListenerState() {}

    private NlbListenerState(NlbListenerState $) {
        this.certificateId = $.certificateId;
        this.connectionTimeout = $.connectionTimeout;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.enabled = $.enabled;
        this.endPort = $.endPort;
        this.healths = $.healths;
        this.listenerId = $.listenerId;
        this.listenerName = $.listenerName;
        this.loadBalancerId = $.loadBalancerId;
        this.port = $.port;
        this.protocol = $.protocol;
        this.securityPolicyId = $.securityPolicyId;
        this.serverGroupId = $.serverGroupId;
        this.startPort = $.startPort;
        this.status = $.status;
        this.tags = $.tags;
        this.updatedTime = $.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NlbListenerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NlbListenerState $;

        public Builder() {
            $ = new NlbListenerState();
        }

        public Builder(NlbListenerState defaults) {
            $ = new NlbListenerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param connectionTimeout 监听器的连接超时时间（秒）。
         * 
         * @return builder
         * 
         */
        public Builder connectionTimeout(@Nullable Output<Integer> connectionTimeout) {
            $.connectionTimeout = connectionTimeout;
            return this;
        }

        /**
         * @param connectionTimeout 监听器的连接超时时间（秒）。
         * 
         * @return builder
         * 
         */
        public Builder connectionTimeout(Integer connectionTimeout) {
            return connectionTimeout(Output.of(connectionTimeout));
        }

        /**
         * @param createdTime 监听器的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 监听器的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 监听器描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 监听器描述信息。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enabled 是否启用监听器。true：开启；false：关闭。
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled 是否启用监听器。true：开启；false：关闭。
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param endPort 全端口监听的结束端口，仅当Port为0时有效。
         * 
         * @return builder
         * 
         */
        public Builder endPort(@Nullable Output<Integer> endPort) {
            $.endPort = endPort;
            return this;
        }

        /**
         * @param endPort 全端口监听的结束端口，仅当Port为0时有效。
         * 
         * @return builder
         * 
         */
        public Builder endPort(Integer endPort) {
            return endPort(Output.of(endPort));
        }

        public Builder healths(@Nullable Output<List<NlbListenerHealthArgs>> healths) {
            $.healths = healths;
            return this;
        }

        public Builder healths(List<NlbListenerHealthArgs> healths) {
            return healths(Output.of(healths));
        }

        public Builder healths(NlbListenerHealthArgs... healths) {
            return healths(List.of(healths));
        }

        /**
         * @param listenerId 监听器唯一标识。
         * 
         * @return builder
         * 
         */
        public Builder listenerId(@Nullable Output<String> listenerId) {
            $.listenerId = listenerId;
            return this;
        }

        /**
         * @param listenerId 监听器唯一标识。
         * 
         * @return builder
         * 
         */
        public Builder listenerId(String listenerId) {
            return listenerId(Output.of(listenerId));
        }

        /**
         * @param listenerName 监听器名称。
         * 
         * @return builder
         * 
         */
        public Builder listenerName(@Nullable Output<String> listenerName) {
            $.listenerName = listenerName;
            return this;
        }

        /**
         * @param listenerName 监听器名称。
         * 
         * @return builder
         * 
         */
        public Builder listenerName(String listenerName) {
            return listenerName(Output.of(listenerName));
        }

        /**
         * @param loadBalancerId 负载均衡实例ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(@Nullable Output<String> loadBalancerId) {
            $.loadBalancerId = loadBalancerId;
            return this;
        }

        /**
         * @param loadBalancerId 负载均衡实例ID。
         * 
         * @return builder
         * 
         */
        public Builder loadBalancerId(String loadBalancerId) {
            return loadBalancerId(Output.of(loadBalancerId));
        }

        /**
         * @param port 监听器接收请求的端口，0表示启用全端口监听。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 监听器接收请求的端口，0表示启用全端口监听。
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param protocol 监听协议类型。
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol 监听协议类型。
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param securityPolicyId TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(@Nullable Output<String> securityPolicyId) {
            $.securityPolicyId = securityPolicyId;
            return this;
        }

        /**
         * @param securityPolicyId TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
         * 
         * @return builder
         * 
         */
        public Builder securityPolicyId(String securityPolicyId) {
            return securityPolicyId(Output.of(securityPolicyId));
        }

        /**
         * @param serverGroupId 监听器关联的服务器组ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(@Nullable Output<String> serverGroupId) {
            $.serverGroupId = serverGroupId;
            return this;
        }

        /**
         * @param serverGroupId 监听器关联的服务器组ID。
         * 
         * @return builder
         * 
         */
        public Builder serverGroupId(String serverGroupId) {
            return serverGroupId(Output.of(serverGroupId));
        }

        /**
         * @param startPort 全端口监听的起始端口，仅当Port为0时有效。
         * 
         * @return builder
         * 
         */
        public Builder startPort(@Nullable Output<Integer> startPort) {
            $.startPort = startPort;
            return this;
        }

        /**
         * @param startPort 全端口监听的起始端口，仅当Port为0时有效。
         * 
         * @return builder
         * 
         */
        public Builder startPort(Integer startPort) {
            return startPort(Output.of(startPort));
        }

        /**
         * @param status 监听器的状态。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 监听器的状态。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<NlbListenerTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<NlbListenerTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(NlbListenerTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param updatedTime 监听器最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(@Nullable Output<String> updatedTime) {
            $.updatedTime = updatedTime;
            return this;
        }

        /**
         * @param updatedTime 监听器最近操作时间。
         * 
         * @return builder
         * 
         */
        public Builder updatedTime(String updatedTime) {
            return updatedTime(Output.of(updatedTime));
        }

        public NlbListenerState build() {
            return $;
        }
    }

}
