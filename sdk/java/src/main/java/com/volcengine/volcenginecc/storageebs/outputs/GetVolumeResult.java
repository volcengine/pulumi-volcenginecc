// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.storageebs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.storageebs.outputs.GetVolumeBaselinePerformance;
import com.volcengine.volcenginecc.storageebs.outputs.GetVolumeExtraPerformance;
import com.volcengine.volcenginecc.storageebs.outputs.GetVolumeTag;
import com.volcengine.volcenginecc.storageebs.outputs.GetVolumeTotalPerformance;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetVolumeResult {
    /**
     * @return 自动快照策略ID。
     * 
     */
    private String autoSnapshotPolicyId;
    /**
     * @return 自动快照策略名称。
     * 
     */
    private String autoSnapshotPolicyName;
    /**
     * @return 基本性能。
     * 
     */
    private GetVolumeBaselinePerformance baselinePerformance;
    /**
     * @return 云盘创建时间。
     * 
     */
    private String createdAt;
    /**
     * @return 释放实例时，该云盘是否随实例一起释放，取值说明如下：true：云盘随实例一起释放。false：云盘不随实例一起释放。
     * 
     */
    private Boolean deleteWithInstance;
    /**
     * @return 云盘的描述信息，默认为空，长度限制在1 ~ 255字符之间。
     * 
     */
    private String description;
    /**
     * @return 设备名称
     * 
     */
    private String deviceName;
    /**
     * @return 具体错误
     * 
     */
    private String errorDetail;
    /**
     * @return 包年包月到期时间。
     * 
     */
    private String expiredTime;
    /**
     * @return 额外性能。
     * 
     */
    private GetVolumeExtraPerformance extraPerformance;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 云盘中的镜像ID。
     * 
     */
    private String imageId;
    /**
     * @return 创建云盘的同时挂载的ECS实例ID。
     * 
     */
    private String instanceId;
    /**
     * @return 云盘属性，data表示数据盘。默认值为data。说明： 仅支持创建数据盘。
     * 
     */
    private String kind;
    /**
     * @return 云盘欠费回收时间。
     * 
     */
    private String overdueReclaimTime;
    /**
     * @return 云盘欠费关停时间。
     * 
     */
    private String overdueTime;
    /**
     * @return 付费类型，说明如下： Pre：预付费（包年包月） Post：后付费（按量计费）。
     * 
     */
    private String payType;
    /**
     * @return 云盘所要加入的Project（项目）名称。
     * 
     */
    private String projectName;
    /**
     * @return 续费方式 1：手动续费 2 ：自动续费 3 ：到期不续费。
     * 
     */
    private Double renewType;
    /**
     * @return Size，数据盘容量大小，单位为GiB。不同类型的数据盘容量范围如下：ESSD*PL0：10~65536 GiB；ESSD*FlexPL：10~65536 GiB；TSSD_TL0：40~65536 GiB
     * 
     */
    private Double size;
    /**
     * @return 快照计数
     * 
     */
    private Double snapshotCount;
    /**
     * @return 源快照。
     * 
     */
    private String sourceSnapshotId;
    /**
     * @return 云盘状态
     * 
     */
    private String status;
    /**
     * @return 云盘的标签信息
     * 
     */
    private List<GetVolumeTag> tags;
    /**
     * @return 总性能。
     * 
     */
    private GetVolumeTotalPerformance totalPerformance;
    /**
     * @return 交易状态 0：创建中 1：运行中 2：创建失败
     * 
     */
    private Double tradeStatus;
    /**
     * @return 云盘更新时间。
     * 
     */
    private String updatedAt;
    /**
     * @return 云盘id。
     * 
     */
    private String volumeId;
    /**
     * @return 云盘显示名称。命名规则如下：首字符仅支持中文、字母或下划线（*）。可包含中文、字母、数字、下划线（*）或中划线（-）。长度限制在1~128字符之间。
     * 
     */
    private String volumeName;
    /**
     * @return 云盘类型，取值说明如下：ESSD*PL0：极速型SSD云盘，PL0规格。ESSD*FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0: 吞吐型SSD云盘。
     * 
     */
    private String volumeType;
    /**
     * @return 可用区ID。
     * 
     */
    private String zoneId;

    private GetVolumeResult() {}
    /**
     * @return 自动快照策略ID。
     * 
     */
    public String autoSnapshotPolicyId() {
        return this.autoSnapshotPolicyId;
    }
    /**
     * @return 自动快照策略名称。
     * 
     */
    public String autoSnapshotPolicyName() {
        return this.autoSnapshotPolicyName;
    }
    /**
     * @return 基本性能。
     * 
     */
    public GetVolumeBaselinePerformance baselinePerformance() {
        return this.baselinePerformance;
    }
    /**
     * @return 云盘创建时间。
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return 释放实例时，该云盘是否随实例一起释放，取值说明如下：true：云盘随实例一起释放。false：云盘不随实例一起释放。
     * 
     */
    public Boolean deleteWithInstance() {
        return this.deleteWithInstance;
    }
    /**
     * @return 云盘的描述信息，默认为空，长度限制在1 ~ 255字符之间。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 设备名称
     * 
     */
    public String deviceName() {
        return this.deviceName;
    }
    /**
     * @return 具体错误
     * 
     */
    public String errorDetail() {
        return this.errorDetail;
    }
    /**
     * @return 包年包月到期时间。
     * 
     */
    public String expiredTime() {
        return this.expiredTime;
    }
    /**
     * @return 额外性能。
     * 
     */
    public GetVolumeExtraPerformance extraPerformance() {
        return this.extraPerformance;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 云盘中的镜像ID。
     * 
     */
    public String imageId() {
        return this.imageId;
    }
    /**
     * @return 创建云盘的同时挂载的ECS实例ID。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 云盘属性，data表示数据盘。默认值为data。说明： 仅支持创建数据盘。
     * 
     */
    public String kind() {
        return this.kind;
    }
    /**
     * @return 云盘欠费回收时间。
     * 
     */
    public String overdueReclaimTime() {
        return this.overdueReclaimTime;
    }
    /**
     * @return 云盘欠费关停时间。
     * 
     */
    public String overdueTime() {
        return this.overdueTime;
    }
    /**
     * @return 付费类型，说明如下： Pre：预付费（包年包月） Post：后付费（按量计费）。
     * 
     */
    public String payType() {
        return this.payType;
    }
    /**
     * @return 云盘所要加入的Project（项目）名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 续费方式 1：手动续费 2 ：自动续费 3 ：到期不续费。
     * 
     */
    public Double renewType() {
        return this.renewType;
    }
    /**
     * @return Size，数据盘容量大小，单位为GiB。不同类型的数据盘容量范围如下：ESSD*PL0：10~65536 GiB；ESSD*FlexPL：10~65536 GiB；TSSD_TL0：40~65536 GiB
     * 
     */
    public Double size() {
        return this.size;
    }
    /**
     * @return 快照计数
     * 
     */
    public Double snapshotCount() {
        return this.snapshotCount;
    }
    /**
     * @return 源快照。
     * 
     */
    public String sourceSnapshotId() {
        return this.sourceSnapshotId;
    }
    /**
     * @return 云盘状态
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 云盘的标签信息
     * 
     */
    public List<GetVolumeTag> tags() {
        return this.tags;
    }
    /**
     * @return 总性能。
     * 
     */
    public GetVolumeTotalPerformance totalPerformance() {
        return this.totalPerformance;
    }
    /**
     * @return 交易状态 0：创建中 1：运行中 2：创建失败
     * 
     */
    public Double tradeStatus() {
        return this.tradeStatus;
    }
    /**
     * @return 云盘更新时间。
     * 
     */
    public String updatedAt() {
        return this.updatedAt;
    }
    /**
     * @return 云盘id。
     * 
     */
    public String volumeId() {
        return this.volumeId;
    }
    /**
     * @return 云盘显示名称。命名规则如下：首字符仅支持中文、字母或下划线（*）。可包含中文、字母、数字、下划线（*）或中划线（-）。长度限制在1~128字符之间。
     * 
     */
    public String volumeName() {
        return this.volumeName;
    }
    /**
     * @return 云盘类型，取值说明如下：ESSD*PL0：极速型SSD云盘，PL0规格。ESSD*FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0: 吞吐型SSD云盘。
     * 
     */
    public String volumeType() {
        return this.volumeType;
    }
    /**
     * @return 可用区ID。
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVolumeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String autoSnapshotPolicyId;
        private String autoSnapshotPolicyName;
        private GetVolumeBaselinePerformance baselinePerformance;
        private String createdAt;
        private Boolean deleteWithInstance;
        private String description;
        private String deviceName;
        private String errorDetail;
        private String expiredTime;
        private GetVolumeExtraPerformance extraPerformance;
        private String id;
        private String imageId;
        private String instanceId;
        private String kind;
        private String overdueReclaimTime;
        private String overdueTime;
        private String payType;
        private String projectName;
        private Double renewType;
        private Double size;
        private Double snapshotCount;
        private String sourceSnapshotId;
        private String status;
        private List<GetVolumeTag> tags;
        private GetVolumeTotalPerformance totalPerformance;
        private Double tradeStatus;
        private String updatedAt;
        private String volumeId;
        private String volumeName;
        private String volumeType;
        private String zoneId;
        public Builder() {}
        public Builder(GetVolumeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.autoSnapshotPolicyId = defaults.autoSnapshotPolicyId;
    	      this.autoSnapshotPolicyName = defaults.autoSnapshotPolicyName;
    	      this.baselinePerformance = defaults.baselinePerformance;
    	      this.createdAt = defaults.createdAt;
    	      this.deleteWithInstance = defaults.deleteWithInstance;
    	      this.description = defaults.description;
    	      this.deviceName = defaults.deviceName;
    	      this.errorDetail = defaults.errorDetail;
    	      this.expiredTime = defaults.expiredTime;
    	      this.extraPerformance = defaults.extraPerformance;
    	      this.id = defaults.id;
    	      this.imageId = defaults.imageId;
    	      this.instanceId = defaults.instanceId;
    	      this.kind = defaults.kind;
    	      this.overdueReclaimTime = defaults.overdueReclaimTime;
    	      this.overdueTime = defaults.overdueTime;
    	      this.payType = defaults.payType;
    	      this.projectName = defaults.projectName;
    	      this.renewType = defaults.renewType;
    	      this.size = defaults.size;
    	      this.snapshotCount = defaults.snapshotCount;
    	      this.sourceSnapshotId = defaults.sourceSnapshotId;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.totalPerformance = defaults.totalPerformance;
    	      this.tradeStatus = defaults.tradeStatus;
    	      this.updatedAt = defaults.updatedAt;
    	      this.volumeId = defaults.volumeId;
    	      this.volumeName = defaults.volumeName;
    	      this.volumeType = defaults.volumeType;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            if (autoSnapshotPolicyId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "autoSnapshotPolicyId");
            }
            this.autoSnapshotPolicyId = autoSnapshotPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder autoSnapshotPolicyName(String autoSnapshotPolicyName) {
            if (autoSnapshotPolicyName == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "autoSnapshotPolicyName");
            }
            this.autoSnapshotPolicyName = autoSnapshotPolicyName;
            return this;
        }
        @CustomType.Setter
        public Builder baselinePerformance(GetVolumeBaselinePerformance baselinePerformance) {
            if (baselinePerformance == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "baselinePerformance");
            }
            this.baselinePerformance = baselinePerformance;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            if (deleteWithInstance == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "deleteWithInstance");
            }
            this.deleteWithInstance = deleteWithInstance;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder deviceName(String deviceName) {
            if (deviceName == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "deviceName");
            }
            this.deviceName = deviceName;
            return this;
        }
        @CustomType.Setter
        public Builder errorDetail(String errorDetail) {
            if (errorDetail == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "errorDetail");
            }
            this.errorDetail = errorDetail;
            return this;
        }
        @CustomType.Setter
        public Builder expiredTime(String expiredTime) {
            if (expiredTime == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "expiredTime");
            }
            this.expiredTime = expiredTime;
            return this;
        }
        @CustomType.Setter
        public Builder extraPerformance(GetVolumeExtraPerformance extraPerformance) {
            if (extraPerformance == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "extraPerformance");
            }
            this.extraPerformance = extraPerformance;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder imageId(String imageId) {
            if (imageId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "imageId");
            }
            this.imageId = imageId;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder kind(String kind) {
            if (kind == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "kind");
            }
            this.kind = kind;
            return this;
        }
        @CustomType.Setter
        public Builder overdueReclaimTime(String overdueReclaimTime) {
            if (overdueReclaimTime == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "overdueReclaimTime");
            }
            this.overdueReclaimTime = overdueReclaimTime;
            return this;
        }
        @CustomType.Setter
        public Builder overdueTime(String overdueTime) {
            if (overdueTime == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "overdueTime");
            }
            this.overdueTime = overdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder payType(String payType) {
            if (payType == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "payType");
            }
            this.payType = payType;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder renewType(Double renewType) {
            if (renewType == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "renewType");
            }
            this.renewType = renewType;
            return this;
        }
        @CustomType.Setter
        public Builder size(Double size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotCount(Double snapshotCount) {
            if (snapshotCount == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "snapshotCount");
            }
            this.snapshotCount = snapshotCount;
            return this;
        }
        @CustomType.Setter
        public Builder sourceSnapshotId(String sourceSnapshotId) {
            if (sourceSnapshotId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "sourceSnapshotId");
            }
            this.sourceSnapshotId = sourceSnapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetVolumeTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetVolumeTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder totalPerformance(GetVolumeTotalPerformance totalPerformance) {
            if (totalPerformance == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "totalPerformance");
            }
            this.totalPerformance = totalPerformance;
            return this;
        }
        @CustomType.Setter
        public Builder tradeStatus(Double tradeStatus) {
            if (tradeStatus == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "tradeStatus");
            }
            this.tradeStatus = tradeStatus;
            return this;
        }
        @CustomType.Setter
        public Builder updatedAt(String updatedAt) {
            if (updatedAt == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "updatedAt");
            }
            this.updatedAt = updatedAt;
            return this;
        }
        @CustomType.Setter
        public Builder volumeId(String volumeId) {
            if (volumeId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "volumeId");
            }
            this.volumeId = volumeId;
            return this;
        }
        @CustomType.Setter
        public Builder volumeName(String volumeName) {
            if (volumeName == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "volumeName");
            }
            this.volumeName = volumeName;
            return this;
        }
        @CustomType.Setter
        public Builder volumeType(String volumeType) {
            if (volumeType == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "volumeType");
            }
            this.volumeType = volumeType;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetVolumeResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetVolumeResult build() {
            final var _resultValue = new GetVolumeResult();
            _resultValue.autoSnapshotPolicyId = autoSnapshotPolicyId;
            _resultValue.autoSnapshotPolicyName = autoSnapshotPolicyName;
            _resultValue.baselinePerformance = baselinePerformance;
            _resultValue.createdAt = createdAt;
            _resultValue.deleteWithInstance = deleteWithInstance;
            _resultValue.description = description;
            _resultValue.deviceName = deviceName;
            _resultValue.errorDetail = errorDetail;
            _resultValue.expiredTime = expiredTime;
            _resultValue.extraPerformance = extraPerformance;
            _resultValue.id = id;
            _resultValue.imageId = imageId;
            _resultValue.instanceId = instanceId;
            _resultValue.kind = kind;
            _resultValue.overdueReclaimTime = overdueReclaimTime;
            _resultValue.overdueTime = overdueTime;
            _resultValue.payType = payType;
            _resultValue.projectName = projectName;
            _resultValue.renewType = renewType;
            _resultValue.size = size;
            _resultValue.snapshotCount = snapshotCount;
            _resultValue.sourceSnapshotId = sourceSnapshotId;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.totalPerformance = totalPerformance;
            _resultValue.tradeStatus = tradeStatus;
            _resultValue.updatedAt = updatedAt;
            _resultValue.volumeId = volumeId;
            _resultValue.volumeName = volumeName;
            _resultValue.volumeType = volumeType;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
