// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ecs.inputs.CommandParameterDefinitionArgs;
import com.volcengine.volcenginecc.ecs.inputs.CommandTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CommandArgs extends com.pulumi.resources.ResourceArgs {

    public static final CommandArgs Empty = new CommandArgs();

    /**
     * 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
     * 
     */
    @Import(name="commandContent", required=true)
    private Output<String> commandContent;

    /**
     * @return 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
     * 
     */
    public Output<String> commandContent() {
        return this.commandContent;
    }

    /**
     * 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
     * 
     */
    @Import(name="contentEncoding")
    private @Nullable Output<String> contentEncoding;

    /**
     * @return 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
     * 
     */
    public Optional<Output<String>> contentEncoding() {
        return Optional.ofNullable(this.contentEncoding);
    }

    /**
     * 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
     * 
     */
    @Import(name="enableParameter")
    private @Nullable Output<Boolean> enableParameter;

    /**
     * @return 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
     * 
     */
    public Optional<Output<Boolean>> enableParameter() {
        return Optional.ofNullable(this.enableParameter);
    }

    /**
     * 命令名称。字符长度1~32。不限制特殊字符。
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return 命令名称。字符长度1~32。不限制特殊字符。
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    @Import(name="parameterDefinitions")
    private @Nullable Output<List<CommandParameterDefinitionArgs>> parameterDefinitions;

    public Optional<Output<List<CommandParameterDefinitionArgs>>> parameterDefinitions() {
        return Optional.ofNullable(this.parameterDefinitions);
    }

    /**
     * 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    @Import(name="tags")
    private @Nullable Output<List<CommandTagArgs>> tags;

    public Optional<Output<List<CommandTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     * 执行命令时的用户名。
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return 执行命令时的用户名。
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * 创建的命令在ECS实例中运行的目录。
     * 
     */
    @Import(name="workingDir")
    private @Nullable Output<String> workingDir;

    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    public Optional<Output<String>> workingDir() {
        return Optional.ofNullable(this.workingDir);
    }

    private CommandArgs() {}

    private CommandArgs(CommandArgs $) {
        this.commandContent = $.commandContent;
        this.contentEncoding = $.contentEncoding;
        this.description = $.description;
        this.enableParameter = $.enableParameter;
        this.name = $.name;
        this.parameterDefinitions = $.parameterDefinitions;
        this.projectName = $.projectName;
        this.tags = $.tags;
        this.timeout = $.timeout;
        this.type = $.type;
        this.username = $.username;
        this.workingDir = $.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommandArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommandArgs $;

        public Builder() {
            $ = new CommandArgs();
        }

        public Builder(CommandArgs defaults) {
            $ = new CommandArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param commandContent 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
         * 
         * @return builder
         * 
         */
        public Builder commandContent(Output<String> commandContent) {
            $.commandContent = commandContent;
            return this;
        }

        /**
         * @param commandContent 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
         * 
         * @return builder
         * 
         */
        public Builder commandContent(String commandContent) {
            return commandContent(Output.of(commandContent));
        }

        /**
         * @param contentEncoding 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(@Nullable Output<String> contentEncoding) {
            $.contentEncoding = contentEncoding;
            return this;
        }

        /**
         * @param contentEncoding 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
         * 
         * @return builder
         * 
         */
        public Builder contentEncoding(String contentEncoding) {
            return contentEncoding(Output.of(contentEncoding));
        }

        /**
         * @param description 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param enableParameter 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
         * 
         * @return builder
         * 
         */
        public Builder enableParameter(@Nullable Output<Boolean> enableParameter) {
            $.enableParameter = enableParameter;
            return this;
        }

        /**
         * @param enableParameter 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
         * 
         * @return builder
         * 
         */
        public Builder enableParameter(Boolean enableParameter) {
            return enableParameter(Output.of(enableParameter));
        }

        /**
         * @param name 命令名称。字符长度1~32。不限制特殊字符。
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 命令名称。字符长度1~32。不限制特殊字符。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder parameterDefinitions(@Nullable Output<List<CommandParameterDefinitionArgs>> parameterDefinitions) {
            $.parameterDefinitions = parameterDefinitions;
            return this;
        }

        public Builder parameterDefinitions(List<CommandParameterDefinitionArgs> parameterDefinitions) {
            return parameterDefinitions(Output.of(parameterDefinitions));
        }

        public Builder parameterDefinitions(CommandParameterDefinitionArgs... parameterDefinitions) {
            return parameterDefinitions(List.of(parameterDefinitions));
        }

        /**
         * @param projectName 资源所属项目，一个资源只能归属于一个项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 资源所属项目，一个资源只能归属于一个项目。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        public Builder tags(@Nullable Output<List<CommandTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<CommandTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(CommandTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param timeout 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param username 执行命令时的用户名。
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username 执行命令时的用户名。
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        /**
         * @param workingDir 创建的命令在ECS实例中运行的目录。
         * 
         * @return builder
         * 
         */
        public Builder workingDir(@Nullable Output<String> workingDir) {
            $.workingDir = workingDir;
            return this;
        }

        /**
         * @param workingDir 创建的命令在ECS实例中运行的目录。
         * 
         * @return builder
         * 
         */
        public Builder workingDir(String workingDir) {
            return workingDir(Output.of(workingDir));
        }

        public CommandArgs build() {
            if ($.commandContent == null) {
                throw new MissingRequiredPropertyException("CommandArgs", "commandContent");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("CommandArgs", "name");
            }
            if ($.type == null) {
                throw new MissingRequiredPropertyException("CommandArgs", "type");
            }
            return $;
        }
    }

}
