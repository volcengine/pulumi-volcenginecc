// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetSubnetRouteTable;
import com.volcengine.volcenginecc.vpc.outputs.GetSubnetTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSubnetResult {
    /**
     * @return 子网所属账户的ID。
     * 
     */
    private String accountId;
    /**
     * @return 子网中可用的IP地址数量。
     * 
     */
    private Integer availableIpAddressCount;
    /**
     * @return 子网的IPv4网段。
     * 
     */
    private String cidrBlock;
    /**
     * @return 子网的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
     * 
     */
    private String description;
    /**
     * @return 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
     * 
     */
    private Boolean enableIpv6;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
     * 
     */
    private String ipv6CidrBlock;
    /**
     * @return 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
     * 
     */
    private Boolean isDefault;
    /**
     * @return 子网关联的网络ACL的ID。
     * 
     */
    private String networkAclId;
    /**
     * @return 子网所在VPC实例所属项目的名称。
     * 
     */
    private String projectName;
    /**
     * @return 路由表信息。
     * 
     */
    private GetSubnetRouteTable routeTable;
    /**
     * @return 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
     * 
     */
    private String status;
    /**
     * @return 待修改信息的子网的ID。
     * 
     */
    private String subnetId;
    /**
     * @return 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
     * 
     */
    private String subnetName;
    private List<GetSubnetTag> tags;
    /**
     * @return 子网下可用IP总数。
     * 
     */
    private Integer totalIpv4Count;
    /**
     * @return 子网的更新时间。
     * 
     */
    private String updatedTime;
    /**
     * @return 子网所属VPC的ID。
     * 
     */
    private String vpcId;
    /**
     * @return 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
     * 
     */
    private String zoneId;

    private GetSubnetResult() {}
    /**
     * @return 子网所属账户的ID。
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return 子网中可用的IP地址数量。
     * 
     */
    public Integer availableIpAddressCount() {
        return this.availableIpAddressCount;
    }
    /**
     * @return 子网的IPv4网段。
     * 
     */
    public String cidrBlock() {
        return this.cidrBlock;
    }
    /**
     * @return 子网的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
     * 
     */
    public Boolean enableIpv6() {
        return this.enableIpv6;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
     * 
     */
    public String ipv6CidrBlock() {
        return this.ipv6CidrBlock;
    }
    /**
     * @return 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
     * 
     */
    public Boolean isDefault() {
        return this.isDefault;
    }
    /**
     * @return 子网关联的网络ACL的ID。
     * 
     */
    public String networkAclId() {
        return this.networkAclId;
    }
    /**
     * @return 子网所在VPC实例所属项目的名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 路由表信息。
     * 
     */
    public GetSubnetRouteTable routeTable() {
        return this.routeTable;
    }
    /**
     * @return 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 待修改信息的子网的ID。
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    /**
     * @return 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
     * 
     */
    public String subnetName() {
        return this.subnetName;
    }
    public List<GetSubnetTag> tags() {
        return this.tags;
    }
    /**
     * @return 子网下可用IP总数。
     * 
     */
    public Integer totalIpv4Count() {
        return this.totalIpv4Count;
    }
    /**
     * @return 子网的更新时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return 子网所属VPC的ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSubnetResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private Integer availableIpAddressCount;
        private String cidrBlock;
        private String createdTime;
        private String description;
        private Boolean enableIpv6;
        private String id;
        private String ipv6CidrBlock;
        private Boolean isDefault;
        private String networkAclId;
        private String projectName;
        private GetSubnetRouteTable routeTable;
        private String status;
        private String subnetId;
        private String subnetName;
        private List<GetSubnetTag> tags;
        private Integer totalIpv4Count;
        private String updatedTime;
        private String vpcId;
        private String zoneId;
        public Builder() {}
        public Builder(GetSubnetResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.availableIpAddressCount = defaults.availableIpAddressCount;
    	      this.cidrBlock = defaults.cidrBlock;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.enableIpv6 = defaults.enableIpv6;
    	      this.id = defaults.id;
    	      this.ipv6CidrBlock = defaults.ipv6CidrBlock;
    	      this.isDefault = defaults.isDefault;
    	      this.networkAclId = defaults.networkAclId;
    	      this.projectName = defaults.projectName;
    	      this.routeTable = defaults.routeTable;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.subnetName = defaults.subnetName;
    	      this.tags = defaults.tags;
    	      this.totalIpv4Count = defaults.totalIpv4Count;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder availableIpAddressCount(Integer availableIpAddressCount) {
            if (availableIpAddressCount == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "availableIpAddressCount");
            }
            this.availableIpAddressCount = availableIpAddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder cidrBlock(String cidrBlock) {
            if (cidrBlock == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "cidrBlock");
            }
            this.cidrBlock = cidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpv6(Boolean enableIpv6) {
            if (enableIpv6 == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "enableIpv6");
            }
            this.enableIpv6 = enableIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6CidrBlock(String ipv6CidrBlock) {
            if (ipv6CidrBlock == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "ipv6CidrBlock");
            }
            this.ipv6CidrBlock = ipv6CidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder isDefault(Boolean isDefault) {
            if (isDefault == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "isDefault");
            }
            this.isDefault = isDefault;
            return this;
        }
        @CustomType.Setter
        public Builder networkAclId(String networkAclId) {
            if (networkAclId == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "networkAclId");
            }
            this.networkAclId = networkAclId;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder routeTable(GetSubnetRouteTable routeTable) {
            if (routeTable == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "routeTable");
            }
            this.routeTable = routeTable;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder subnetName(String subnetName) {
            if (subnetName == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "subnetName");
            }
            this.subnetName = subnetName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetSubnetTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetSubnetTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder totalIpv4Count(Integer totalIpv4Count) {
            if (totalIpv4Count == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "totalIpv4Count");
            }
            this.totalIpv4Count = totalIpv4Count;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetSubnetResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetSubnetResult build() {
            final var _resultValue = new GetSubnetResult();
            _resultValue.accountId = accountId;
            _resultValue.availableIpAddressCount = availableIpAddressCount;
            _resultValue.cidrBlock = cidrBlock;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.enableIpv6 = enableIpv6;
            _resultValue.id = id;
            _resultValue.ipv6CidrBlock = ipv6CidrBlock;
            _resultValue.isDefault = isDefault;
            _resultValue.networkAclId = networkAclId;
            _resultValue.projectName = projectName;
            _resultValue.routeTable = routeTable;
            _resultValue.status = status;
            _resultValue.subnetId = subnetId;
            _resultValue.subnetName = subnetName;
            _resultValue.tags = tags;
            _resultValue.totalIpv4Count = totalIpv4Count;
            _resultValue.updatedTime = updatedTime;
            _resultValue.vpcId = vpcId;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
