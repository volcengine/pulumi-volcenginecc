// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class InvocationParameterDefinition {
    /**
     * @return 自定义参数值（数字）允许的小数点后位数。
     * 
     */
    private @Nullable Integer decimalPrecision;
    /**
     * @return 自定义参数默认值。
     * 
     */
    private @Nullable String defaultValue;
    /**
     * @return 自定义参数值（字符串）的最大长度。
     * 
     */
    private @Nullable Integer maxLength;
    /**
     * @return 自定义参数值（数字）的最大值。
     * 
     */
    private @Nullable String maxValue;
    /**
     * @return 自定义参数值（字符串）的最小长度。
     * 
     */
    private @Nullable Integer minLength;
    /**
     * @return 自定义参数值（数字）的最小值。
     * 
     */
    private @Nullable String minValue;
    /**
     * @return 自定义参数名称，需要在脚本中通过{{Param}}定义 。
     * 
     */
    private @Nullable String name;
    /**
     * @return 是否必填。true：必填。false：非必填。
     * 
     */
    private @Nullable Boolean required;
    /**
     * @return 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
     * 
     */
    private @Nullable String type;

    private InvocationParameterDefinition() {}
    /**
     * @return 自定义参数值（数字）允许的小数点后位数。
     * 
     */
    public Optional<Integer> decimalPrecision() {
        return Optional.ofNullable(this.decimalPrecision);
    }
    /**
     * @return 自定义参数默认值。
     * 
     */
    public Optional<String> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }
    /**
     * @return 自定义参数值（字符串）的最大长度。
     * 
     */
    public Optional<Integer> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }
    /**
     * @return 自定义参数值（数字）的最大值。
     * 
     */
    public Optional<String> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }
    /**
     * @return 自定义参数值（字符串）的最小长度。
     * 
     */
    public Optional<Integer> minLength() {
        return Optional.ofNullable(this.minLength);
    }
    /**
     * @return 自定义参数值（数字）的最小值。
     * 
     */
    public Optional<String> minValue() {
        return Optional.ofNullable(this.minValue);
    }
    /**
     * @return 自定义参数名称，需要在脚本中通过{{Param}}定义 。
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return 是否必填。true：必填。false：非必填。
     * 
     */
    public Optional<Boolean> required() {
        return Optional.ofNullable(this.required);
    }
    /**
     * @return 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
     * 
     */
    public Optional<String> type() {
        return Optional.ofNullable(this.type);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(InvocationParameterDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer decimalPrecision;
        private @Nullable String defaultValue;
        private @Nullable Integer maxLength;
        private @Nullable String maxValue;
        private @Nullable Integer minLength;
        private @Nullable String minValue;
        private @Nullable String name;
        private @Nullable Boolean required;
        private @Nullable String type;
        public Builder() {}
        public Builder(InvocationParameterDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decimalPrecision = defaults.decimalPrecision;
    	      this.defaultValue = defaults.defaultValue;
    	      this.maxLength = defaults.maxLength;
    	      this.maxValue = defaults.maxValue;
    	      this.minLength = defaults.minLength;
    	      this.minValue = defaults.minValue;
    	      this.name = defaults.name;
    	      this.required = defaults.required;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder decimalPrecision(@Nullable Integer decimalPrecision) {

            this.decimalPrecision = decimalPrecision;
            return this;
        }
        @CustomType.Setter
        public Builder defaultValue(@Nullable String defaultValue) {

            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder maxLength(@Nullable Integer maxLength) {

            this.maxLength = maxLength;
            return this;
        }
        @CustomType.Setter
        public Builder maxValue(@Nullable String maxValue) {

            this.maxValue = maxValue;
            return this;
        }
        @CustomType.Setter
        public Builder minLength(@Nullable Integer minLength) {

            this.minLength = minLength;
            return this;
        }
        @CustomType.Setter
        public Builder minValue(@Nullable String minValue) {

            this.minValue = minValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder required(@Nullable Boolean required) {

            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder type(@Nullable String type) {

            this.type = type;
            return this;
        }
        public InvocationParameterDefinition build() {
            final var _resultValue = new InvocationParameterDefinition();
            _resultValue.decimalPrecision = decimalPrecision;
            _resultValue.defaultValue = defaultValue;
            _resultValue.maxLength = maxLength;
            _resultValue.maxValue = maxValue;
            _resultValue.minLength = minLength;
            _resultValue.minValue = minValue;
            _resultValue.name = name;
            _resultValue.required = required;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
