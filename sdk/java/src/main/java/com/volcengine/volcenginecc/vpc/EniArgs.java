// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.vpc.inputs.EniPrimaryIpAddressArgs;
import com.volcengine.volcenginecc.vpc.inputs.EniPrivateIpSetArgs;
import com.volcengine.volcenginecc.vpc.inputs.EniTagArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EniArgs extends com.pulumi.resources.ResourceArgs {

    public static final EniArgs Empty = new EniArgs();

    /**
     * 是否开启随云服务器实例删除，true为开启，false为不开启。
     * 
     */
    @Import(name="deleteOnTermination")
    private @Nullable Output<Boolean> deleteOnTermination;

    /**
     * @return 是否开启随云服务器实例删除，true为开启，false为不开启。
     * 
     */
    public Optional<Output<Boolean>> deleteOnTermination() {
        return Optional.ofNullable(this.deleteOnTermination);
    }

    /**
     * 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
     * 
     */
    @Import(name="ipv6AddressCount")
    private @Nullable Output<Integer> ipv6AddressCount;

    /**
     * @return 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
     * 
     */
    public Optional<Output<Integer>> ipv6AddressCount() {
        return Optional.ofNullable(this.ipv6AddressCount);
    }

    /**
     * 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
     * 
     */
    @Import(name="ipv6Sets")
    private @Nullable Output<List<String>> ipv6Sets;

    /**
     * @return 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
     * 
     */
    public Optional<Output<List<String>>> ipv6Sets() {
        return Optional.ofNullable(this.ipv6Sets);
    }

    /**
     * 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
     * 
     */
    @Import(name="networkInterfaceName")
    private @Nullable Output<String> networkInterfaceName;

    /**
     * @return 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
     * 
     */
    public Optional<Output<String>> networkInterfaceName() {
        return Optional.ofNullable(this.networkInterfaceName);
    }

    /**
     * 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
     * 
     */
    @Import(name="portSecurityEnabled")
    private @Nullable Output<Boolean> portSecurityEnabled;

    /**
     * @return 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
     * 
     */
    public Optional<Output<Boolean>> portSecurityEnabled() {
        return Optional.ofNullable(this.portSecurityEnabled);
    }

    /**
     * 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
     * 
     */
    @Import(name="primaryIpAddress")
    private @Nullable Output<EniPrimaryIpAddressArgs> primaryIpAddress;

    /**
     * @return 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
     * 
     */
    public Optional<Output<EniPrimaryIpAddressArgs>> primaryIpAddress() {
        return Optional.ofNullable(this.primaryIpAddress);
    }

    @Import(name="privateIpSets")
    private @Nullable Output<List<EniPrivateIpSetArgs>> privateIpSets;

    public Optional<Output<List<EniPrivateIpSetArgs>>> privateIpSets() {
        return Optional.ofNullable(this.privateIpSets);
    }

    /**
     * 网卡所属项目的名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 网卡所属项目的名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
     * 
     */
    @Import(name="secondaryPrivateIpAddressCount")
    private @Nullable Output<Integer> secondaryPrivateIpAddressCount;

    /**
     * @return 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
     * 
     */
    public Optional<Output<Integer>> secondaryPrivateIpAddressCount() {
        return Optional.ofNullable(this.secondaryPrivateIpAddressCount);
    }

    /**
     * 辅助网卡加入一个或多个安全组的ID。
     * 
     */
    @Import(name="securityGroupIds")
    private @Nullable Output<List<String>> securityGroupIds;

    /**
     * @return 辅助网卡加入一个或多个安全组的ID。
     * 
     */
    public Optional<Output<List<String>>> securityGroupIds() {
        return Optional.ofNullable(this.securityGroupIds);
    }

    /**
     * 辅助网卡所在子网的ID。
     * 
     */
    @Import(name="subnetId")
    private @Nullable Output<String> subnetId;

    /**
     * @return 辅助网卡所在子网的ID。
     * 
     */
    public Optional<Output<String>> subnetId() {
        return Optional.ofNullable(this.subnetId);
    }

    @Import(name="tags")
    private @Nullable Output<List<EniTagArgs>> tags;

    public Optional<Output<List<EniTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 网卡所属可用区的ID。
     * 
     */
    @Import(name="zoneId")
    private @Nullable Output<String> zoneId;

    /**
     * @return 网卡所属可用区的ID。
     * 
     */
    public Optional<Output<String>> zoneId() {
        return Optional.ofNullable(this.zoneId);
    }

    private EniArgs() {}

    private EniArgs(EniArgs $) {
        this.deleteOnTermination = $.deleteOnTermination;
        this.description = $.description;
        this.instanceId = $.instanceId;
        this.ipv6AddressCount = $.ipv6AddressCount;
        this.ipv6Sets = $.ipv6Sets;
        this.networkInterfaceName = $.networkInterfaceName;
        this.portSecurityEnabled = $.portSecurityEnabled;
        this.primaryIpAddress = $.primaryIpAddress;
        this.privateIpSets = $.privateIpSets;
        this.projectName = $.projectName;
        this.secondaryPrivateIpAddressCount = $.secondaryPrivateIpAddressCount;
        this.securityGroupIds = $.securityGroupIds;
        this.subnetId = $.subnetId;
        this.tags = $.tags;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EniArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EniArgs $;

        public Builder() {
            $ = new EniArgs();
        }

        public Builder(EniArgs defaults) {
            $ = new EniArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteOnTermination 是否开启随云服务器实例删除，true为开启，false为不开启。
         * 
         * @return builder
         * 
         */
        public Builder deleteOnTermination(@Nullable Output<Boolean> deleteOnTermination) {
            $.deleteOnTermination = deleteOnTermination;
            return this;
        }

        /**
         * @param deleteOnTermination 是否开启随云服务器实例删除，true为开启，false为不开启。
         * 
         * @return builder
         * 
         */
        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            return deleteOnTermination(Output.of(deleteOnTermination));
        }

        /**
         * @param description 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param instanceId 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param ipv6AddressCount 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressCount(@Nullable Output<Integer> ipv6AddressCount) {
            $.ipv6AddressCount = ipv6AddressCount;
            return this;
        }

        /**
         * @param ipv6AddressCount 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressCount(Integer ipv6AddressCount) {
            return ipv6AddressCount(Output.of(ipv6AddressCount));
        }

        /**
         * @param ipv6Sets 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
         * 
         * @return builder
         * 
         */
        public Builder ipv6Sets(@Nullable Output<List<String>> ipv6Sets) {
            $.ipv6Sets = ipv6Sets;
            return this;
        }

        /**
         * @param ipv6Sets 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
         * 
         * @return builder
         * 
         */
        public Builder ipv6Sets(List<String> ipv6Sets) {
            return ipv6Sets(Output.of(ipv6Sets));
        }

        /**
         * @param ipv6Sets 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
         * 
         * @return builder
         * 
         */
        public Builder ipv6Sets(String... ipv6Sets) {
            return ipv6Sets(List.of(ipv6Sets));
        }

        /**
         * @param networkInterfaceName 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceName(@Nullable Output<String> networkInterfaceName) {
            $.networkInterfaceName = networkInterfaceName;
            return this;
        }

        /**
         * @param networkInterfaceName 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
         * 
         * @return builder
         * 
         */
        public Builder networkInterfaceName(String networkInterfaceName) {
            return networkInterfaceName(Output.of(networkInterfaceName));
        }

        /**
         * @param portSecurityEnabled 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
         * 
         * @return builder
         * 
         */
        public Builder portSecurityEnabled(@Nullable Output<Boolean> portSecurityEnabled) {
            $.portSecurityEnabled = portSecurityEnabled;
            return this;
        }

        /**
         * @param portSecurityEnabled 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
         * 
         * @return builder
         * 
         */
        public Builder portSecurityEnabled(Boolean portSecurityEnabled) {
            return portSecurityEnabled(Output.of(portSecurityEnabled));
        }

        /**
         * @param primaryIpAddress 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
         * 
         * @return builder
         * 
         */
        public Builder primaryIpAddress(@Nullable Output<EniPrimaryIpAddressArgs> primaryIpAddress) {
            $.primaryIpAddress = primaryIpAddress;
            return this;
        }

        /**
         * @param primaryIpAddress 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
         * 
         * @return builder
         * 
         */
        public Builder primaryIpAddress(EniPrimaryIpAddressArgs primaryIpAddress) {
            return primaryIpAddress(Output.of(primaryIpAddress));
        }

        public Builder privateIpSets(@Nullable Output<List<EniPrivateIpSetArgs>> privateIpSets) {
            $.privateIpSets = privateIpSets;
            return this;
        }

        public Builder privateIpSets(List<EniPrivateIpSetArgs> privateIpSets) {
            return privateIpSets(Output.of(privateIpSets));
        }

        public Builder privateIpSets(EniPrivateIpSetArgs... privateIpSets) {
            return privateIpSets(List.of(privateIpSets));
        }

        /**
         * @param projectName 网卡所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 网卡所属项目的名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param secondaryPrivateIpAddressCount 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
         * 
         * @return builder
         * 
         */
        public Builder secondaryPrivateIpAddressCount(@Nullable Output<Integer> secondaryPrivateIpAddressCount) {
            $.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            return this;
        }

        /**
         * @param secondaryPrivateIpAddressCount 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
         * 
         * @return builder
         * 
         */
        public Builder secondaryPrivateIpAddressCount(Integer secondaryPrivateIpAddressCount) {
            return secondaryPrivateIpAddressCount(Output.of(secondaryPrivateIpAddressCount));
        }

        /**
         * @param securityGroupIds 辅助网卡加入一个或多个安全组的ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(@Nullable Output<List<String>> securityGroupIds) {
            $.securityGroupIds = securityGroupIds;
            return this;
        }

        /**
         * @param securityGroupIds 辅助网卡加入一个或多个安全组的ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(List<String> securityGroupIds) {
            return securityGroupIds(Output.of(securityGroupIds));
        }

        /**
         * @param securityGroupIds 辅助网卡加入一个或多个安全组的ID。
         * 
         * @return builder
         * 
         */
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }

        /**
         * @param subnetId 辅助网卡所在子网的ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetId(@Nullable Output<String> subnetId) {
            $.subnetId = subnetId;
            return this;
        }

        /**
         * @param subnetId 辅助网卡所在子网的ID。
         * 
         * @return builder
         * 
         */
        public Builder subnetId(String subnetId) {
            return subnetId(Output.of(subnetId));
        }

        public Builder tags(@Nullable Output<List<EniTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<EniTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(EniTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param zoneId 网卡所属可用区的ID。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(@Nullable Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId 网卡所属可用区的ID。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public EniArgs build() {
            return $;
        }
    }

}
