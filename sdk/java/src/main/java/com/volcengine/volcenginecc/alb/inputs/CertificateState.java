// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.alb.inputs.CertificateTagArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * 证书ID。
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return 证书ID。
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * 证书类型，取值：CA：CA证书、Server：服务器证书。
     * 
     */
    @Import(name="certificateType")
    private @Nullable Output<String> certificateType;

    /**
     * @return 证书类型，取值：CA：CA证书、Server：服务器证书。
     * 
     */
    public Optional<Output<String>> certificateType() {
        return Optional.ofNullable(this.certificateType);
    }

    /**
     * 证书创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 证书创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 证书描述。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 证书描述。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 证书域名。
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return 证书域名。
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * 证书过期时间。
     * 
     */
    @Import(name="expiredAt")
    private @Nullable Output<String> expiredAt;

    /**
     * @return 证书过期时间。
     * 
     */
    public Optional<Output<String>> expiredAt() {
        return Optional.ofNullable(this.expiredAt);
    }

    /**
     * 证书关联的监听器列表。
     * 
     */
    @Import(name="listeners")
    private @Nullable Output<List<String>> listeners;

    /**
     * @return 证书关联的监听器列表。
     * 
     */
    public Optional<Output<List<String>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * 服务器证书的私钥，当证书类型为Server时必填。
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return 服务器证书的私钥，当证书类型为Server时必填。
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * 项目名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 项目名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 服务器证书的公钥。
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return 服务器证书的公钥。
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * 证书扩展域名列表，用英文&#39;,&#39; 分隔多个域名， 包含(commonName,DnsName,IP)。
     * 
     */
    @Import(name="san")
    private @Nullable Output<String> san;

    /**
     * @return 证书扩展域名列表，用英文&#39;,&#39; 分隔多个域名， 包含(commonName,DnsName,IP)。
     * 
     */
    public Optional<Output<String>> san() {
        return Optional.ofNullable(this.san);
    }

    /**
     * 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    @Import(name="tags")
    private @Nullable Output<List<CertificateTagArgs>> tags;

    public Optional<Output<List<CertificateTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificateId = $.certificateId;
        this.certificateName = $.certificateName;
        this.certificateType = $.certificateType;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.domainName = $.domainName;
        this.expiredAt = $.expiredAt;
        this.listeners = $.listeners;
        this.privateKey = $.privateKey;
        this.projectName = $.projectName;
        this.publicKey = $.publicKey;
        this.san = $.san;
        this.status = $.status;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId 证书ID。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId 证书ID。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateName 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param certificateType 证书类型，取值：CA：CA证书、Server：服务器证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateType(@Nullable Output<String> certificateType) {
            $.certificateType = certificateType;
            return this;
        }

        /**
         * @param certificateType 证书类型，取值：CA：CA证书、Server：服务器证书。
         * 
         * @return builder
         * 
         */
        public Builder certificateType(String certificateType) {
            return certificateType(Output.of(certificateType));
        }

        /**
         * @param createdTime 证书创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 证书创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 证书描述。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 证书描述。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainName 证书域名。
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName 证书域名。
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param expiredAt 证书过期时间。
         * 
         * @return builder
         * 
         */
        public Builder expiredAt(@Nullable Output<String> expiredAt) {
            $.expiredAt = expiredAt;
            return this;
        }

        /**
         * @param expiredAt 证书过期时间。
         * 
         * @return builder
         * 
         */
        public Builder expiredAt(String expiredAt) {
            return expiredAt(Output.of(expiredAt));
        }

        /**
         * @param listeners 证书关联的监听器列表。
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable Output<List<String>> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners 证书关联的监听器列表。
         * 
         * @return builder
         * 
         */
        public Builder listeners(List<String> listeners) {
            return listeners(Output.of(listeners));
        }

        /**
         * @param listeners 证书关联的监听器列表。
         * 
         * @return builder
         * 
         */
        public Builder listeners(String... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param privateKey 服务器证书的私钥，当证书类型为Server时必填。
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey 服务器证书的私钥，当证书类型为Server时必填。
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param projectName 项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 项目名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param publicKey 服务器证书的公钥。
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey 服务器证书的公钥。
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param san 证书扩展域名列表，用英文&#39;,&#39; 分隔多个域名， 包含(commonName,DnsName,IP)。
         * 
         * @return builder
         * 
         */
        public Builder san(@Nullable Output<String> san) {
            $.san = san;
            return this;
        }

        /**
         * @param san 证书扩展域名列表，用英文&#39;,&#39; 分隔多个域名， 包含(commonName,DnsName,IP)。
         * 
         * @return builder
         * 
         */
        public Builder san(String san) {
            return san(Output.of(san));
        }

        /**
         * @param status 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        public Builder tags(@Nullable Output<List<CertificateTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<CertificateTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(CertificateTagArgs... tags) {
            return tags(List.of(tags));
        }

        public CertificateState build() {
            return $;
        }
    }

}
