// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.alb.outputs.GetListenerDomainExtension;
import com.volcengine.volcenginecc.alb.outputs.GetListenerServerGroup;
import com.volcengine.volcenginecc.alb.outputs.GetListenerTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListenerResult {
    /**
     * @return 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     * 
     */
    private String accessLogRecordCustomizedHeadersEnabled;
    /**
     * @return 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     * 
     */
    private List<String> aclIds;
    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     * 
     */
    private String aclStatus;
    /**
     * @return 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     * 
     */
    private String aclType;
    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     * 
     */
    private String caCertificateId;
    /**
     * @return HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     * 
     */
    private String caCertificateSource;
    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
     * 
     */
    private String certCenterCertificateId;
    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     * 
     */
    private String certificateId;
    /**
     * @return HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     * 
     */
    private String certificateSource;
    /**
     * @return 监听器的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 个性化配置ID，未绑定时值为空字符串。
     * 
     */
    private String customizedCfgId;
    /**
     * @return 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。
     * 
     */
    private List<GetListenerDomainExtension> domainExtensions;
    /**
     * @return HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     * 
     */
    private String enableHttp2;
    /**
     * @return QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     * 
     */
    private String enableQuic;
    /**
     * @return 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     * 
     */
    private String enabled;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 监听器 ID。
     * 
     */
    private String listenerId;
    /**
     * @return 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     * 
     */
    private String listenerName;
    /**
     * @return 监听器所属的负载均衡实例 ID。
     * 
     */
    private String loadBalancerId;
    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    private String pcaLeafCertificateId;
    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
     * 
     */
    private String pcaRootCaCertificateId;
    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
     * 
     */
    private String pcaSubCaCertificateId;
    /**
     * @return 监听器的监听端口，取值：1 - 65535 。
     * 
     */
    private Integer port;
    /**
     * @return 监听器所属项目名称。
     * 
     */
    private String projectName;
    /**
     * @return 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     * 
     */
    private String protocol;
    /**
     * @return 监听器的默认服务器组。
     * 
     */
    private String serverGroupId;
    /**
     * @return 关联监听器的所有服务器组。
     * 
     */
    private List<GetListenerServerGroup> serverGroups;
    /**
     * @return 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     * 
     */
    private String status;
    /**
     * @return 监听器所属标签。
     * 
     */
    private List<GetListenerTag> tags;
    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    private String updatedTime;

    private GetListenerResult() {}
    /**
     * @return 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     * 
     */
    public String accessLogRecordCustomizedHeadersEnabled() {
        return this.accessLogRecordCustomizedHeadersEnabled;
    }
    /**
     * @return 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     * 
     */
    public List<String> aclIds() {
        return this.aclIds;
    }
    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     * 
     */
    public String aclStatus() {
        return this.aclStatus;
    }
    /**
     * @return 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     * 
     */
    public String aclType() {
        return this.aclType;
    }
    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     * 
     */
    public String caCertificateId() {
        return this.caCertificateId;
    }
    /**
     * @return HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     * 
     */
    public String caCertificateSource() {
        return this.caCertificateSource;
    }
    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
     * 
     */
    public String certCenterCertificateId() {
        return this.certCenterCertificateId;
    }
    /**
     * @return HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     * 
     */
    public String certificateSource() {
        return this.certificateSource;
    }
    /**
     * @return 监听器的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 个性化配置ID，未绑定时值为空字符串。
     * 
     */
    public String customizedCfgId() {
        return this.customizedCfgId;
    }
    /**
     * @return 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。
     * 
     */
    public List<GetListenerDomainExtension> domainExtensions() {
        return this.domainExtensions;
    }
    /**
     * @return HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     * 
     */
    public String enableHttp2() {
        return this.enableHttp2;
    }
    /**
     * @return QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     * 
     */
    public String enableQuic() {
        return this.enableQuic;
    }
    /**
     * @return 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     * 
     */
    public String enabled() {
        return this.enabled;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 监听器 ID。
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     * 
     */
    public String listenerName() {
        return this.listenerName;
    }
    /**
     * @return 监听器所属的负载均衡实例 ID。
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
     * 
     */
    public String pcaLeafCertificateId() {
        return this.pcaLeafCertificateId;
    }
    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
     * 
     */
    public String pcaRootCaCertificateId() {
        return this.pcaRootCaCertificateId;
    }
    /**
     * @return HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
     * 
     */
    public String pcaSubCaCertificateId() {
        return this.pcaSubCaCertificateId;
    }
    /**
     * @return 监听器的监听端口，取值：1 - 65535 。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 监听器所属项目名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return 监听器的默认服务器组。
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return 关联监听器的所有服务器组。
     * 
     */
    public List<GetListenerServerGroup> serverGroups() {
        return this.serverGroups;
    }
    /**
     * @return 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 监听器所属标签。
     * 
     */
    public List<GetListenerTag> tags() {
        return this.tags;
    }
    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accessLogRecordCustomizedHeadersEnabled;
        private List<String> aclIds;
        private String aclStatus;
        private String aclType;
        private String caCertificateId;
        private String caCertificateSource;
        private String certCenterCertificateId;
        private String certificateId;
        private String certificateSource;
        private String createdTime;
        private String customizedCfgId;
        private String description;
        private List<GetListenerDomainExtension> domainExtensions;
        private String enableHttp2;
        private String enableQuic;
        private String enabled;
        private String id;
        private String listenerId;
        private String listenerName;
        private String loadBalancerId;
        private String pcaLeafCertificateId;
        private String pcaRootCaCertificateId;
        private String pcaSubCaCertificateId;
        private Integer port;
        private String projectName;
        private String protocol;
        private String serverGroupId;
        private List<GetListenerServerGroup> serverGroups;
        private String status;
        private List<GetListenerTag> tags;
        private String updatedTime;
        public Builder() {}
        public Builder(GetListenerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessLogRecordCustomizedHeadersEnabled = defaults.accessLogRecordCustomizedHeadersEnabled;
    	      this.aclIds = defaults.aclIds;
    	      this.aclStatus = defaults.aclStatus;
    	      this.aclType = defaults.aclType;
    	      this.caCertificateId = defaults.caCertificateId;
    	      this.caCertificateSource = defaults.caCertificateSource;
    	      this.certCenterCertificateId = defaults.certCenterCertificateId;
    	      this.certificateId = defaults.certificateId;
    	      this.certificateSource = defaults.certificateSource;
    	      this.createdTime = defaults.createdTime;
    	      this.customizedCfgId = defaults.customizedCfgId;
    	      this.description = defaults.description;
    	      this.domainExtensions = defaults.domainExtensions;
    	      this.enableHttp2 = defaults.enableHttp2;
    	      this.enableQuic = defaults.enableQuic;
    	      this.enabled = defaults.enabled;
    	      this.id = defaults.id;
    	      this.listenerId = defaults.listenerId;
    	      this.listenerName = defaults.listenerName;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.pcaLeafCertificateId = defaults.pcaLeafCertificateId;
    	      this.pcaRootCaCertificateId = defaults.pcaRootCaCertificateId;
    	      this.pcaSubCaCertificateId = defaults.pcaSubCaCertificateId;
    	      this.port = defaults.port;
    	      this.projectName = defaults.projectName;
    	      this.protocol = defaults.protocol;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.serverGroups = defaults.serverGroups;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder accessLogRecordCustomizedHeadersEnabled(String accessLogRecordCustomizedHeadersEnabled) {
            if (accessLogRecordCustomizedHeadersEnabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "accessLogRecordCustomizedHeadersEnabled");
            }
            this.accessLogRecordCustomizedHeadersEnabled = accessLogRecordCustomizedHeadersEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder aclIds(List<String> aclIds) {
            if (aclIds == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "aclIds");
            }
            this.aclIds = aclIds;
            return this;
        }
        public Builder aclIds(String... aclIds) {
            return aclIds(List.of(aclIds));
        }
        @CustomType.Setter
        public Builder aclStatus(String aclStatus) {
            if (aclStatus == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "aclStatus");
            }
            this.aclStatus = aclStatus;
            return this;
        }
        @CustomType.Setter
        public Builder aclType(String aclType) {
            if (aclType == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "aclType");
            }
            this.aclType = aclType;
            return this;
        }
        @CustomType.Setter
        public Builder caCertificateId(String caCertificateId) {
            if (caCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "caCertificateId");
            }
            this.caCertificateId = caCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder caCertificateSource(String caCertificateSource) {
            if (caCertificateSource == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "caCertificateSource");
            }
            this.caCertificateSource = caCertificateSource;
            return this;
        }
        @CustomType.Setter
        public Builder certCenterCertificateId(String certCenterCertificateId) {
            if (certCenterCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "certCenterCertificateId");
            }
            this.certCenterCertificateId = certCenterCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSource(String certificateSource) {
            if (certificateSource == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "certificateSource");
            }
            this.certificateSource = certificateSource;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder customizedCfgId(String customizedCfgId) {
            if (customizedCfgId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "customizedCfgId");
            }
            this.customizedCfgId = customizedCfgId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder domainExtensions(List<GetListenerDomainExtension> domainExtensions) {
            if (domainExtensions == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "domainExtensions");
            }
            this.domainExtensions = domainExtensions;
            return this;
        }
        public Builder domainExtensions(GetListenerDomainExtension... domainExtensions) {
            return domainExtensions(List.of(domainExtensions));
        }
        @CustomType.Setter
        public Builder enableHttp2(String enableHttp2) {
            if (enableHttp2 == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "enableHttp2");
            }
            this.enableHttp2 = enableHttp2;
            return this;
        }
        @CustomType.Setter
        public Builder enableQuic(String enableQuic) {
            if (enableQuic == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "enableQuic");
            }
            this.enableQuic = enableQuic;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(String enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder listenerName(String listenerName) {
            if (listenerName == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "listenerName");
            }
            this.listenerName = listenerName;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder pcaLeafCertificateId(String pcaLeafCertificateId) {
            if (pcaLeafCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "pcaLeafCertificateId");
            }
            this.pcaLeafCertificateId = pcaLeafCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder pcaRootCaCertificateId(String pcaRootCaCertificateId) {
            if (pcaRootCaCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "pcaRootCaCertificateId");
            }
            this.pcaRootCaCertificateId = pcaRootCaCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder pcaSubCaCertificateId(String pcaSubCaCertificateId) {
            if (pcaSubCaCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "pcaSubCaCertificateId");
            }
            this.pcaSubCaCertificateId = pcaSubCaCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroups(List<GetListenerServerGroup> serverGroups) {
            if (serverGroups == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "serverGroups");
            }
            this.serverGroups = serverGroups;
            return this;
        }
        public Builder serverGroups(GetListenerServerGroup... serverGroups) {
            return serverGroups(List.of(serverGroups));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetListenerTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetListenerTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetListenerResult build() {
            final var _resultValue = new GetListenerResult();
            _resultValue.accessLogRecordCustomizedHeadersEnabled = accessLogRecordCustomizedHeadersEnabled;
            _resultValue.aclIds = aclIds;
            _resultValue.aclStatus = aclStatus;
            _resultValue.aclType = aclType;
            _resultValue.caCertificateId = caCertificateId;
            _resultValue.caCertificateSource = caCertificateSource;
            _resultValue.certCenterCertificateId = certCenterCertificateId;
            _resultValue.certificateId = certificateId;
            _resultValue.certificateSource = certificateSource;
            _resultValue.createdTime = createdTime;
            _resultValue.customizedCfgId = customizedCfgId;
            _resultValue.description = description;
            _resultValue.domainExtensions = domainExtensions;
            _resultValue.enableHttp2 = enableHttp2;
            _resultValue.enableQuic = enableQuic;
            _resultValue.enabled = enabled;
            _resultValue.id = id;
            _resultValue.listenerId = listenerId;
            _resultValue.listenerName = listenerName;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.pcaLeafCertificateId = pcaLeafCertificateId;
            _resultValue.pcaRootCaCertificateId = pcaRootCaCertificateId;
            _resultValue.pcaSubCaCertificateId = pcaSubCaCertificateId;
            _resultValue.port = port;
            _resultValue.projectName = projectName;
            _resultValue.protocol = protocol;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.serverGroups = serverGroups;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
