// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.waf.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.waf.outputs.GetDomainBackendGroup;
import com.volcengine.volcenginecc.waf.outputs.GetDomainCloudAccessConfig;
import com.volcengine.volcenginecc.waf.outputs.GetDomainProtocolPorts;
import com.volcengine.volcenginecc.waf.outputs.GetDomainTcpListenerConfig;
import com.volcengine.volcenginecc.waf.outputs.GetDomainTlsFieldsConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDomainResult {
    /**
     * @return 接入模式。10：CNAME 接入，11：负载均衡（CLB）7 层接入。
     * 
     */
    private Integer accessMode;
    /**
     * @return 高防实例 IP。高防型 WAF 接入展示，否则为空。
     * 
     */
    private String advancedDefenseIp;
    /**
     * @return 高防实例 Ipv6。高防型 WAF 接入展示，否则为空。
     * 
     */
    private String advancedDefenseIpv6;
    /**
     * @return 是否开启了 API 防护策略。0：关闭，1：开启。
     * 
     */
    private Integer apiEnable;
    /**
     * @return 攻击状态。0:未发现攻击,1:发现攻击。
     * 
     */
    private Integer attackStatus;
    /**
     * @return 是否开启智能 CC 防护策略。0：关闭，1：开启。
     * 
     */
    private Integer autoCcEnable;
    /**
     * @return 是否开启自动封禁。0：关闭，1：开启。
     * 
     */
    private Integer automaticBlackEnable;
    /**
     * @return 源站配置。
     * 
     */
    private List<GetDomainBackendGroup> backendGroups;
    /**
     * @return 是否开启了黑名单策略。0：关闭, 1：开启。
     * 
     */
    private Integer blackIpEnable;
    /**
     * @return 是否开启了区域封禁策略。0：关闭;1：开启。
     * 
     */
    private Integer blackLctEnable;
    /**
     * @return 是否开启动态Token防护。
     * 
     */
    private Integer botDytokenEnable;
    /**
     * @return 是否开启 bot 频率限制策略。
     * 0：关闭
     * 1：开启。
     * 
     */
    private Integer botFrequencyEnable;
    /**
     * @return 是否开启 bot 统计防护策略。
     * 0：关闭
     * 1：开启。
     * 
     */
    private Integer botRepeatEnable;
    /**
     * @return 设置 bot 行为地图策略默认动作，当 BotSequenceEnable = 1 开启状态时生效。默认为 0 （观察）。
     * 0：观察
     * 2：拦截
     * 6：JS 挑战
     * 7：人机验证。
     * 
     */
    private Integer botSequenceDefaultAction;
    /**
     * @return 是否开启 bot 行为地图。
     * 0：关闭
     * 1：开启。
     * 
     */
    private Integer botSequenceEnable;
    /**
     * @return 是否开启 CC 防护策略。
     * 0：关闭
     * 1：开启。
     * 
     */
    private Integer ccEnable;
    /**
     * @return 托管至证书中心的证书ID。
     * 
     */
    private String certificateId;
    /**
     * @return 证书名称，协议类型包含 HTTPS 时显示。
     * 
     */
    private String certificateName;
    /**
     * @return 证书托管平台:waf/certificate_service。
     * 
     */
    private String certificatePlatform;
    /**
     * @return CLB实例ID。
     * 
     */
    private String clbInstanceIds;
    /**
     * @return CLB监听器ID。
     * 
     */
    private String clbListenerId;
    /**
     * @return CLB后端服务器组ID。
     * 
     */
    private String clbPoolId;
    /**
     * @return CLB后端服务器ID。
     * 
     */
    private String clbServerId;
    /**
     * @return 客户端IP获取方式。0:自定义Header字段,1:通过X-Forwarded-For(XFF)字段中第一个公网IP地址作为客户端真实IP地址。
     * 
     */
    private Integer clientIpLocation;
    /**
     * @return 客户端请求body最大值(MB)。
     * 
     */
    private Integer clientMaxBodySize;
    /**
     * @return LB接入参数。
     * 
     */
    private List<GetDomainCloudAccessConfig> cloudAccessConfigs;
    /**
     * @return CNAME记录。
     * 
     */
    private String cname;
    /**
     * @return 是否开启自定义BOT防护。
     * 
     */
    private Integer customBotEnable;
    /**
     * @return 自定义Header。
     * 
     */
    private List<String> customHeaders;
    /**
     * @return 是否开启自定义响应。
     * 
     */
    private Integer customRspEnable;
    /**
     * @return 自定义SNI。
     * 
     */
    private String customSni;
    /**
     * @return 为例外 ALB 实例设置防护模式。
     * 1：启用防护，已配置的防护策略生效。
     * 2：暂停防护，仅执行转发而不检测，已配置的防护策略不生效。
     * 3：回源模式，直接将请求解析至源站，不再转发至 WAF 实例。
     * 设置例外防护实例后，域名可能还会存在以下防护状态：
     * 5：部分启用，默认防护模式为启用防护，但存在例外实例为暂停防护或回源模式状态。
     * 6：部分暂停，默认防护模式为暂停防护，但存在例外实例为启用防护或回源模式状态。
     * 7：部分回源，默认防护模式为回源模式，但存在例外实例为启用防护或暂停防护状态。
     * 
     */
    private Integer defenceMode;
    /**
     * @return 是否开启数据泄露防护。
     * 
     */
    private Integer dlpEnable;
    /**
     * @return 防护的域名信息，支持泛域名和精确域名。
     * 
     */
    private String domain;
    /**
     * @return 是否开启用户自定义重定向。0:关闭,1:开启。
     * 
     */
    private Integer enableCustomRedirect;
    /**
     * @return 是否开启HTTP2.0。0:关闭,1:开启。
     * 
     */
    private Integer enableHttp2;
    /**
     * @return 是否支持防护Ipv6请求。0:关闭,1:开启。
     * 
     */
    private Integer enableIpv6;
    /**
     * @return 是否开启SNI配置。0:关闭,1:开启。
     * 
     */
    private Integer enableSni;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 长连接复用个数。
     * 
     */
    private Integer keepAliveRequest;
    /**
     * @return 长连接保持时间(秒)。
     * 
     */
    private Integer keepAliveTimeout;
    /**
     * @return 负载均衡算法类型。wrr:加权轮询,wlc:加权最小连接数,sh:源地址哈希。
     * 
     */
    private String lbAlgorithm;
    /**
     * @return 端口号。
     * 
     */
    private Integer port;
    /**
     * @return 项目名称。
     * 
     */
    private String projectName;
    /**
     * @return 是否开启协议跟随。0:关闭,1:开启。
     * 
     */
    private Integer protocolFollow;
    /**
     * @return 接入端口信息。
     * 
     */
    private GetDomainProtocolPorts protocolPorts;
    /**
     * @return 接入协议类型,支持HTTP/HTTPS。
     * 
     */
    private List<String> protocols;
    /**
     * @return 是否开启代理配置。0:关闭,1:开启。
     * 
     */
    private Integer proxyConfig;
    /**
     * @return WAF和后端服务器的建连超时时间(秒)。
     * 
     */
    private Integer proxyConnectTimeout;
    /**
     * @return WAF回源长连接可复用个数。
     * 
     */
    private Integer proxyKeepAlive;
    /**
     * @return 空闲长连接超时时间(秒)。
     * 
     */
    private Integer proxyKeepAliveTimeout;
    /**
     * @return WAF从后端服务器读取响应的超时时间(秒)。
     * 
     */
    private Integer proxyReadTimeout;
    /**
     * @return WAF回源重试次数。
     * 
     */
    private Integer proxyRetry;
    /**
     * @return WAF将请求传输到后端服务器的超时时间(秒)。
     * 
     */
    private Integer proxyWriteTimeout;
    /**
     * @return CNAME接入回源方式。0:私网回源,1:公网回源。
     * 
     */
    private Integer publicRealServer;
    /**
     * @return 是否开启异常响应防护。
     * 
     */
    private Integer rspAbnormalEnable;
    /**
     * @return 服务IP。
     * 
     */
    private String serverIps;
    /**
     * @return WAF回源IP。
     * 
     */
    private String srcIps;
    /**
     * @return 源站协议。
     * 
     */
    private String srcProtocol;
    /**
     * @return 加密套件。
     * 
     */
    private List<String> sslCiphers;
    /**
     * @return TLS协议版本。如:TLSv1,TLSv1.1,TLSv1.2,TLSv1.3。
     * 
     */
    private List<String> sslProtocols;
    /**
     * @return 接入状态。0:正常,1:DNS未解析,2:配置中,3:配置失败,4:配置未生效,5:更新中,6:实例已删除。
     * 
     */
    private Integer status;
    /**
     * @return 是否开启托管BOT防护。
     * 
     */
    private Integer systemBotEnable;
    /**
     * @return 是否开启防篡改。
     * 
     */
    private Integer tamperProofEnable;
    /**
     * @return TCP监听器配置。
     * 
     */
    private List<GetDomainTcpListenerConfig> tcpListenerConfigs;
    /**
     * @return 是否开启日志服务。0:关闭,1:开启。
     * 
     */
    private Integer tlsEnable;
    /**
     * @return 日志字段配置详情。
     * 
     */
    private GetDomainTlsFieldsConfig tlsFieldsConfig;
    /**
     * @return 更新时间。
     * 
     */
    private String updateTime;
    /**
     * @return VPC ID。
     * 
     */
    private String vpcId;
    /**
     * @return 是否开启WAF防护。
     * 
     */
    private Integer wafEnable;
    /**
     * @return 是否开启白名单请求防护。
     * 
     */
    private Integer wafWhiteReqEnable;
    /**
     * @return 是否开启白名单防护。
     * 
     */
    private Integer whiteEnable;
    /**
     * @return 是否开启字段白名单防护。
     * 
     */
    private Integer whiteFieldEnable;

    private GetDomainResult() {}
    /**
     * @return 接入模式。10：CNAME 接入，11：负载均衡（CLB）7 层接入。
     * 
     */
    public Integer accessMode() {
        return this.accessMode;
    }
    /**
     * @return 高防实例 IP。高防型 WAF 接入展示，否则为空。
     * 
     */
    public String advancedDefenseIp() {
        return this.advancedDefenseIp;
    }
    /**
     * @return 高防实例 Ipv6。高防型 WAF 接入展示，否则为空。
     * 
     */
    public String advancedDefenseIpv6() {
        return this.advancedDefenseIpv6;
    }
    /**
     * @return 是否开启了 API 防护策略。0：关闭，1：开启。
     * 
     */
    public Integer apiEnable() {
        return this.apiEnable;
    }
    /**
     * @return 攻击状态。0:未发现攻击,1:发现攻击。
     * 
     */
    public Integer attackStatus() {
        return this.attackStatus;
    }
    /**
     * @return 是否开启智能 CC 防护策略。0：关闭，1：开启。
     * 
     */
    public Integer autoCcEnable() {
        return this.autoCcEnable;
    }
    /**
     * @return 是否开启自动封禁。0：关闭，1：开启。
     * 
     */
    public Integer automaticBlackEnable() {
        return this.automaticBlackEnable;
    }
    /**
     * @return 源站配置。
     * 
     */
    public List<GetDomainBackendGroup> backendGroups() {
        return this.backendGroups;
    }
    /**
     * @return 是否开启了黑名单策略。0：关闭, 1：开启。
     * 
     */
    public Integer blackIpEnable() {
        return this.blackIpEnable;
    }
    /**
     * @return 是否开启了区域封禁策略。0：关闭;1：开启。
     * 
     */
    public Integer blackLctEnable() {
        return this.blackLctEnable;
    }
    /**
     * @return 是否开启动态Token防护。
     * 
     */
    public Integer botDytokenEnable() {
        return this.botDytokenEnable;
    }
    /**
     * @return 是否开启 bot 频率限制策略。
     * 0：关闭
     * 1：开启。
     * 
     */
    public Integer botFrequencyEnable() {
        return this.botFrequencyEnable;
    }
    /**
     * @return 是否开启 bot 统计防护策略。
     * 0：关闭
     * 1：开启。
     * 
     */
    public Integer botRepeatEnable() {
        return this.botRepeatEnable;
    }
    /**
     * @return 设置 bot 行为地图策略默认动作，当 BotSequenceEnable = 1 开启状态时生效。默认为 0 （观察）。
     * 0：观察
     * 2：拦截
     * 6：JS 挑战
     * 7：人机验证。
     * 
     */
    public Integer botSequenceDefaultAction() {
        return this.botSequenceDefaultAction;
    }
    /**
     * @return 是否开启 bot 行为地图。
     * 0：关闭
     * 1：开启。
     * 
     */
    public Integer botSequenceEnable() {
        return this.botSequenceEnable;
    }
    /**
     * @return 是否开启 CC 防护策略。
     * 0：关闭
     * 1：开启。
     * 
     */
    public Integer ccEnable() {
        return this.ccEnable;
    }
    /**
     * @return 托管至证书中心的证书ID。
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return 证书名称，协议类型包含 HTTPS 时显示。
     * 
     */
    public String certificateName() {
        return this.certificateName;
    }
    /**
     * @return 证书托管平台:waf/certificate_service。
     * 
     */
    public String certificatePlatform() {
        return this.certificatePlatform;
    }
    /**
     * @return CLB实例ID。
     * 
     */
    public String clbInstanceIds() {
        return this.clbInstanceIds;
    }
    /**
     * @return CLB监听器ID。
     * 
     */
    public String clbListenerId() {
        return this.clbListenerId;
    }
    /**
     * @return CLB后端服务器组ID。
     * 
     */
    public String clbPoolId() {
        return this.clbPoolId;
    }
    /**
     * @return CLB后端服务器ID。
     * 
     */
    public String clbServerId() {
        return this.clbServerId;
    }
    /**
     * @return 客户端IP获取方式。0:自定义Header字段,1:通过X-Forwarded-For(XFF)字段中第一个公网IP地址作为客户端真实IP地址。
     * 
     */
    public Integer clientIpLocation() {
        return this.clientIpLocation;
    }
    /**
     * @return 客户端请求body最大值(MB)。
     * 
     */
    public Integer clientMaxBodySize() {
        return this.clientMaxBodySize;
    }
    /**
     * @return LB接入参数。
     * 
     */
    public List<GetDomainCloudAccessConfig> cloudAccessConfigs() {
        return this.cloudAccessConfigs;
    }
    /**
     * @return CNAME记录。
     * 
     */
    public String cname() {
        return this.cname;
    }
    /**
     * @return 是否开启自定义BOT防护。
     * 
     */
    public Integer customBotEnable() {
        return this.customBotEnable;
    }
    /**
     * @return 自定义Header。
     * 
     */
    public List<String> customHeaders() {
        return this.customHeaders;
    }
    /**
     * @return 是否开启自定义响应。
     * 
     */
    public Integer customRspEnable() {
        return this.customRspEnable;
    }
    /**
     * @return 自定义SNI。
     * 
     */
    public String customSni() {
        return this.customSni;
    }
    /**
     * @return 为例外 ALB 实例设置防护模式。
     * 1：启用防护，已配置的防护策略生效。
     * 2：暂停防护，仅执行转发而不检测，已配置的防护策略不生效。
     * 3：回源模式，直接将请求解析至源站，不再转发至 WAF 实例。
     * 设置例外防护实例后，域名可能还会存在以下防护状态：
     * 5：部分启用，默认防护模式为启用防护，但存在例外实例为暂停防护或回源模式状态。
     * 6：部分暂停，默认防护模式为暂停防护，但存在例外实例为启用防护或回源模式状态。
     * 7：部分回源，默认防护模式为回源模式，但存在例外实例为启用防护或暂停防护状态。
     * 
     */
    public Integer defenceMode() {
        return this.defenceMode;
    }
    /**
     * @return 是否开启数据泄露防护。
     * 
     */
    public Integer dlpEnable() {
        return this.dlpEnable;
    }
    /**
     * @return 防护的域名信息，支持泛域名和精确域名。
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return 是否开启用户自定义重定向。0:关闭,1:开启。
     * 
     */
    public Integer enableCustomRedirect() {
        return this.enableCustomRedirect;
    }
    /**
     * @return 是否开启HTTP2.0。0:关闭,1:开启。
     * 
     */
    public Integer enableHttp2() {
        return this.enableHttp2;
    }
    /**
     * @return 是否支持防护Ipv6请求。0:关闭,1:开启。
     * 
     */
    public Integer enableIpv6() {
        return this.enableIpv6;
    }
    /**
     * @return 是否开启SNI配置。0:关闭,1:开启。
     * 
     */
    public Integer enableSni() {
        return this.enableSni;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 长连接复用个数。
     * 
     */
    public Integer keepAliveRequest() {
        return this.keepAliveRequest;
    }
    /**
     * @return 长连接保持时间(秒)。
     * 
     */
    public Integer keepAliveTimeout() {
        return this.keepAliveTimeout;
    }
    /**
     * @return 负载均衡算法类型。wrr:加权轮询,wlc:加权最小连接数,sh:源地址哈希。
     * 
     */
    public String lbAlgorithm() {
        return this.lbAlgorithm;
    }
    /**
     * @return 端口号。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 项目名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 是否开启协议跟随。0:关闭,1:开启。
     * 
     */
    public Integer protocolFollow() {
        return this.protocolFollow;
    }
    /**
     * @return 接入端口信息。
     * 
     */
    public GetDomainProtocolPorts protocolPorts() {
        return this.protocolPorts;
    }
    /**
     * @return 接入协议类型,支持HTTP/HTTPS。
     * 
     */
    public List<String> protocols() {
        return this.protocols;
    }
    /**
     * @return 是否开启代理配置。0:关闭,1:开启。
     * 
     */
    public Integer proxyConfig() {
        return this.proxyConfig;
    }
    /**
     * @return WAF和后端服务器的建连超时时间(秒)。
     * 
     */
    public Integer proxyConnectTimeout() {
        return this.proxyConnectTimeout;
    }
    /**
     * @return WAF回源长连接可复用个数。
     * 
     */
    public Integer proxyKeepAlive() {
        return this.proxyKeepAlive;
    }
    /**
     * @return 空闲长连接超时时间(秒)。
     * 
     */
    public Integer proxyKeepAliveTimeout() {
        return this.proxyKeepAliveTimeout;
    }
    /**
     * @return WAF从后端服务器读取响应的超时时间(秒)。
     * 
     */
    public Integer proxyReadTimeout() {
        return this.proxyReadTimeout;
    }
    /**
     * @return WAF回源重试次数。
     * 
     */
    public Integer proxyRetry() {
        return this.proxyRetry;
    }
    /**
     * @return WAF将请求传输到后端服务器的超时时间(秒)。
     * 
     */
    public Integer proxyWriteTimeout() {
        return this.proxyWriteTimeout;
    }
    /**
     * @return CNAME接入回源方式。0:私网回源,1:公网回源。
     * 
     */
    public Integer publicRealServer() {
        return this.publicRealServer;
    }
    /**
     * @return 是否开启异常响应防护。
     * 
     */
    public Integer rspAbnormalEnable() {
        return this.rspAbnormalEnable;
    }
    /**
     * @return 服务IP。
     * 
     */
    public String serverIps() {
        return this.serverIps;
    }
    /**
     * @return WAF回源IP。
     * 
     */
    public String srcIps() {
        return this.srcIps;
    }
    /**
     * @return 源站协议。
     * 
     */
    public String srcProtocol() {
        return this.srcProtocol;
    }
    /**
     * @return 加密套件。
     * 
     */
    public List<String> sslCiphers() {
        return this.sslCiphers;
    }
    /**
     * @return TLS协议版本。如:TLSv1,TLSv1.1,TLSv1.2,TLSv1.3。
     * 
     */
    public List<String> sslProtocols() {
        return this.sslProtocols;
    }
    /**
     * @return 接入状态。0:正常,1:DNS未解析,2:配置中,3:配置失败,4:配置未生效,5:更新中,6:实例已删除。
     * 
     */
    public Integer status() {
        return this.status;
    }
    /**
     * @return 是否开启托管BOT防护。
     * 
     */
    public Integer systemBotEnable() {
        return this.systemBotEnable;
    }
    /**
     * @return 是否开启防篡改。
     * 
     */
    public Integer tamperProofEnable() {
        return this.tamperProofEnable;
    }
    /**
     * @return TCP监听器配置。
     * 
     */
    public List<GetDomainTcpListenerConfig> tcpListenerConfigs() {
        return this.tcpListenerConfigs;
    }
    /**
     * @return 是否开启日志服务。0:关闭,1:开启。
     * 
     */
    public Integer tlsEnable() {
        return this.tlsEnable;
    }
    /**
     * @return 日志字段配置详情。
     * 
     */
    public GetDomainTlsFieldsConfig tlsFieldsConfig() {
        return this.tlsFieldsConfig;
    }
    /**
     * @return 更新时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return VPC ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return 是否开启WAF防护。
     * 
     */
    public Integer wafEnable() {
        return this.wafEnable;
    }
    /**
     * @return 是否开启白名单请求防护。
     * 
     */
    public Integer wafWhiteReqEnable() {
        return this.wafWhiteReqEnable;
    }
    /**
     * @return 是否开启白名单防护。
     * 
     */
    public Integer whiteEnable() {
        return this.whiteEnable;
    }
    /**
     * @return 是否开启字段白名单防护。
     * 
     */
    public Integer whiteFieldEnable() {
        return this.whiteFieldEnable;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDomainResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer accessMode;
        private String advancedDefenseIp;
        private String advancedDefenseIpv6;
        private Integer apiEnable;
        private Integer attackStatus;
        private Integer autoCcEnable;
        private Integer automaticBlackEnable;
        private List<GetDomainBackendGroup> backendGroups;
        private Integer blackIpEnable;
        private Integer blackLctEnable;
        private Integer botDytokenEnable;
        private Integer botFrequencyEnable;
        private Integer botRepeatEnable;
        private Integer botSequenceDefaultAction;
        private Integer botSequenceEnable;
        private Integer ccEnable;
        private String certificateId;
        private String certificateName;
        private String certificatePlatform;
        private String clbInstanceIds;
        private String clbListenerId;
        private String clbPoolId;
        private String clbServerId;
        private Integer clientIpLocation;
        private Integer clientMaxBodySize;
        private List<GetDomainCloudAccessConfig> cloudAccessConfigs;
        private String cname;
        private Integer customBotEnable;
        private List<String> customHeaders;
        private Integer customRspEnable;
        private String customSni;
        private Integer defenceMode;
        private Integer dlpEnable;
        private String domain;
        private Integer enableCustomRedirect;
        private Integer enableHttp2;
        private Integer enableIpv6;
        private Integer enableSni;
        private String id;
        private Integer keepAliveRequest;
        private Integer keepAliveTimeout;
        private String lbAlgorithm;
        private Integer port;
        private String projectName;
        private Integer protocolFollow;
        private GetDomainProtocolPorts protocolPorts;
        private List<String> protocols;
        private Integer proxyConfig;
        private Integer proxyConnectTimeout;
        private Integer proxyKeepAlive;
        private Integer proxyKeepAliveTimeout;
        private Integer proxyReadTimeout;
        private Integer proxyRetry;
        private Integer proxyWriteTimeout;
        private Integer publicRealServer;
        private Integer rspAbnormalEnable;
        private String serverIps;
        private String srcIps;
        private String srcProtocol;
        private List<String> sslCiphers;
        private List<String> sslProtocols;
        private Integer status;
        private Integer systemBotEnable;
        private Integer tamperProofEnable;
        private List<GetDomainTcpListenerConfig> tcpListenerConfigs;
        private Integer tlsEnable;
        private GetDomainTlsFieldsConfig tlsFieldsConfig;
        private String updateTime;
        private String vpcId;
        private Integer wafEnable;
        private Integer wafWhiteReqEnable;
        private Integer whiteEnable;
        private Integer whiteFieldEnable;
        public Builder() {}
        public Builder(GetDomainResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessMode = defaults.accessMode;
    	      this.advancedDefenseIp = defaults.advancedDefenseIp;
    	      this.advancedDefenseIpv6 = defaults.advancedDefenseIpv6;
    	      this.apiEnable = defaults.apiEnable;
    	      this.attackStatus = defaults.attackStatus;
    	      this.autoCcEnable = defaults.autoCcEnable;
    	      this.automaticBlackEnable = defaults.automaticBlackEnable;
    	      this.backendGroups = defaults.backendGroups;
    	      this.blackIpEnable = defaults.blackIpEnable;
    	      this.blackLctEnable = defaults.blackLctEnable;
    	      this.botDytokenEnable = defaults.botDytokenEnable;
    	      this.botFrequencyEnable = defaults.botFrequencyEnable;
    	      this.botRepeatEnable = defaults.botRepeatEnable;
    	      this.botSequenceDefaultAction = defaults.botSequenceDefaultAction;
    	      this.botSequenceEnable = defaults.botSequenceEnable;
    	      this.ccEnable = defaults.ccEnable;
    	      this.certificateId = defaults.certificateId;
    	      this.certificateName = defaults.certificateName;
    	      this.certificatePlatform = defaults.certificatePlatform;
    	      this.clbInstanceIds = defaults.clbInstanceIds;
    	      this.clbListenerId = defaults.clbListenerId;
    	      this.clbPoolId = defaults.clbPoolId;
    	      this.clbServerId = defaults.clbServerId;
    	      this.clientIpLocation = defaults.clientIpLocation;
    	      this.clientMaxBodySize = defaults.clientMaxBodySize;
    	      this.cloudAccessConfigs = defaults.cloudAccessConfigs;
    	      this.cname = defaults.cname;
    	      this.customBotEnable = defaults.customBotEnable;
    	      this.customHeaders = defaults.customHeaders;
    	      this.customRspEnable = defaults.customRspEnable;
    	      this.customSni = defaults.customSni;
    	      this.defenceMode = defaults.defenceMode;
    	      this.dlpEnable = defaults.dlpEnable;
    	      this.domain = defaults.domain;
    	      this.enableCustomRedirect = defaults.enableCustomRedirect;
    	      this.enableHttp2 = defaults.enableHttp2;
    	      this.enableIpv6 = defaults.enableIpv6;
    	      this.enableSni = defaults.enableSni;
    	      this.id = defaults.id;
    	      this.keepAliveRequest = defaults.keepAliveRequest;
    	      this.keepAliveTimeout = defaults.keepAliveTimeout;
    	      this.lbAlgorithm = defaults.lbAlgorithm;
    	      this.port = defaults.port;
    	      this.projectName = defaults.projectName;
    	      this.protocolFollow = defaults.protocolFollow;
    	      this.protocolPorts = defaults.protocolPorts;
    	      this.protocols = defaults.protocols;
    	      this.proxyConfig = defaults.proxyConfig;
    	      this.proxyConnectTimeout = defaults.proxyConnectTimeout;
    	      this.proxyKeepAlive = defaults.proxyKeepAlive;
    	      this.proxyKeepAliveTimeout = defaults.proxyKeepAliveTimeout;
    	      this.proxyReadTimeout = defaults.proxyReadTimeout;
    	      this.proxyRetry = defaults.proxyRetry;
    	      this.proxyWriteTimeout = defaults.proxyWriteTimeout;
    	      this.publicRealServer = defaults.publicRealServer;
    	      this.rspAbnormalEnable = defaults.rspAbnormalEnable;
    	      this.serverIps = defaults.serverIps;
    	      this.srcIps = defaults.srcIps;
    	      this.srcProtocol = defaults.srcProtocol;
    	      this.sslCiphers = defaults.sslCiphers;
    	      this.sslProtocols = defaults.sslProtocols;
    	      this.status = defaults.status;
    	      this.systemBotEnable = defaults.systemBotEnable;
    	      this.tamperProofEnable = defaults.tamperProofEnable;
    	      this.tcpListenerConfigs = defaults.tcpListenerConfigs;
    	      this.tlsEnable = defaults.tlsEnable;
    	      this.tlsFieldsConfig = defaults.tlsFieldsConfig;
    	      this.updateTime = defaults.updateTime;
    	      this.vpcId = defaults.vpcId;
    	      this.wafEnable = defaults.wafEnable;
    	      this.wafWhiteReqEnable = defaults.wafWhiteReqEnable;
    	      this.whiteEnable = defaults.whiteEnable;
    	      this.whiteFieldEnable = defaults.whiteFieldEnable;
        }

        @CustomType.Setter
        public Builder accessMode(Integer accessMode) {
            if (accessMode == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "accessMode");
            }
            this.accessMode = accessMode;
            return this;
        }
        @CustomType.Setter
        public Builder advancedDefenseIp(String advancedDefenseIp) {
            if (advancedDefenseIp == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "advancedDefenseIp");
            }
            this.advancedDefenseIp = advancedDefenseIp;
            return this;
        }
        @CustomType.Setter
        public Builder advancedDefenseIpv6(String advancedDefenseIpv6) {
            if (advancedDefenseIpv6 == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "advancedDefenseIpv6");
            }
            this.advancedDefenseIpv6 = advancedDefenseIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder apiEnable(Integer apiEnable) {
            if (apiEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "apiEnable");
            }
            this.apiEnable = apiEnable;
            return this;
        }
        @CustomType.Setter
        public Builder attackStatus(Integer attackStatus) {
            if (attackStatus == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "attackStatus");
            }
            this.attackStatus = attackStatus;
            return this;
        }
        @CustomType.Setter
        public Builder autoCcEnable(Integer autoCcEnable) {
            if (autoCcEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "autoCcEnable");
            }
            this.autoCcEnable = autoCcEnable;
            return this;
        }
        @CustomType.Setter
        public Builder automaticBlackEnable(Integer automaticBlackEnable) {
            if (automaticBlackEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "automaticBlackEnable");
            }
            this.automaticBlackEnable = automaticBlackEnable;
            return this;
        }
        @CustomType.Setter
        public Builder backendGroups(List<GetDomainBackendGroup> backendGroups) {
            if (backendGroups == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "backendGroups");
            }
            this.backendGroups = backendGroups;
            return this;
        }
        public Builder backendGroups(GetDomainBackendGroup... backendGroups) {
            return backendGroups(List.of(backendGroups));
        }
        @CustomType.Setter
        public Builder blackIpEnable(Integer blackIpEnable) {
            if (blackIpEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "blackIpEnable");
            }
            this.blackIpEnable = blackIpEnable;
            return this;
        }
        @CustomType.Setter
        public Builder blackLctEnable(Integer blackLctEnable) {
            if (blackLctEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "blackLctEnable");
            }
            this.blackLctEnable = blackLctEnable;
            return this;
        }
        @CustomType.Setter
        public Builder botDytokenEnable(Integer botDytokenEnable) {
            if (botDytokenEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "botDytokenEnable");
            }
            this.botDytokenEnable = botDytokenEnable;
            return this;
        }
        @CustomType.Setter
        public Builder botFrequencyEnable(Integer botFrequencyEnable) {
            if (botFrequencyEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "botFrequencyEnable");
            }
            this.botFrequencyEnable = botFrequencyEnable;
            return this;
        }
        @CustomType.Setter
        public Builder botRepeatEnable(Integer botRepeatEnable) {
            if (botRepeatEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "botRepeatEnable");
            }
            this.botRepeatEnable = botRepeatEnable;
            return this;
        }
        @CustomType.Setter
        public Builder botSequenceDefaultAction(Integer botSequenceDefaultAction) {
            if (botSequenceDefaultAction == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "botSequenceDefaultAction");
            }
            this.botSequenceDefaultAction = botSequenceDefaultAction;
            return this;
        }
        @CustomType.Setter
        public Builder botSequenceEnable(Integer botSequenceEnable) {
            if (botSequenceEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "botSequenceEnable");
            }
            this.botSequenceEnable = botSequenceEnable;
            return this;
        }
        @CustomType.Setter
        public Builder ccEnable(Integer ccEnable) {
            if (ccEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "ccEnable");
            }
            this.ccEnable = ccEnable;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateName(String certificateName) {
            if (certificateName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "certificateName");
            }
            this.certificateName = certificateName;
            return this;
        }
        @CustomType.Setter
        public Builder certificatePlatform(String certificatePlatform) {
            if (certificatePlatform == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "certificatePlatform");
            }
            this.certificatePlatform = certificatePlatform;
            return this;
        }
        @CustomType.Setter
        public Builder clbInstanceIds(String clbInstanceIds) {
            if (clbInstanceIds == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clbInstanceIds");
            }
            this.clbInstanceIds = clbInstanceIds;
            return this;
        }
        @CustomType.Setter
        public Builder clbListenerId(String clbListenerId) {
            if (clbListenerId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clbListenerId");
            }
            this.clbListenerId = clbListenerId;
            return this;
        }
        @CustomType.Setter
        public Builder clbPoolId(String clbPoolId) {
            if (clbPoolId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clbPoolId");
            }
            this.clbPoolId = clbPoolId;
            return this;
        }
        @CustomType.Setter
        public Builder clbServerId(String clbServerId) {
            if (clbServerId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clbServerId");
            }
            this.clbServerId = clbServerId;
            return this;
        }
        @CustomType.Setter
        public Builder clientIpLocation(Integer clientIpLocation) {
            if (clientIpLocation == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clientIpLocation");
            }
            this.clientIpLocation = clientIpLocation;
            return this;
        }
        @CustomType.Setter
        public Builder clientMaxBodySize(Integer clientMaxBodySize) {
            if (clientMaxBodySize == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "clientMaxBodySize");
            }
            this.clientMaxBodySize = clientMaxBodySize;
            return this;
        }
        @CustomType.Setter
        public Builder cloudAccessConfigs(List<GetDomainCloudAccessConfig> cloudAccessConfigs) {
            if (cloudAccessConfigs == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "cloudAccessConfigs");
            }
            this.cloudAccessConfigs = cloudAccessConfigs;
            return this;
        }
        public Builder cloudAccessConfigs(GetDomainCloudAccessConfig... cloudAccessConfigs) {
            return cloudAccessConfigs(List.of(cloudAccessConfigs));
        }
        @CustomType.Setter
        public Builder cname(String cname) {
            if (cname == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "cname");
            }
            this.cname = cname;
            return this;
        }
        @CustomType.Setter
        public Builder customBotEnable(Integer customBotEnable) {
            if (customBotEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "customBotEnable");
            }
            this.customBotEnable = customBotEnable;
            return this;
        }
        @CustomType.Setter
        public Builder customHeaders(List<String> customHeaders) {
            if (customHeaders == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "customHeaders");
            }
            this.customHeaders = customHeaders;
            return this;
        }
        public Builder customHeaders(String... customHeaders) {
            return customHeaders(List.of(customHeaders));
        }
        @CustomType.Setter
        public Builder customRspEnable(Integer customRspEnable) {
            if (customRspEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "customRspEnable");
            }
            this.customRspEnable = customRspEnable;
            return this;
        }
        @CustomType.Setter
        public Builder customSni(String customSni) {
            if (customSni == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "customSni");
            }
            this.customSni = customSni;
            return this;
        }
        @CustomType.Setter
        public Builder defenceMode(Integer defenceMode) {
            if (defenceMode == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "defenceMode");
            }
            this.defenceMode = defenceMode;
            return this;
        }
        @CustomType.Setter
        public Builder dlpEnable(Integer dlpEnable) {
            if (dlpEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "dlpEnable");
            }
            this.dlpEnable = dlpEnable;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            if (domain == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "domain");
            }
            this.domain = domain;
            return this;
        }
        @CustomType.Setter
        public Builder enableCustomRedirect(Integer enableCustomRedirect) {
            if (enableCustomRedirect == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "enableCustomRedirect");
            }
            this.enableCustomRedirect = enableCustomRedirect;
            return this;
        }
        @CustomType.Setter
        public Builder enableHttp2(Integer enableHttp2) {
            if (enableHttp2 == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "enableHttp2");
            }
            this.enableHttp2 = enableHttp2;
            return this;
        }
        @CustomType.Setter
        public Builder enableIpv6(Integer enableIpv6) {
            if (enableIpv6 == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "enableIpv6");
            }
            this.enableIpv6 = enableIpv6;
            return this;
        }
        @CustomType.Setter
        public Builder enableSni(Integer enableSni) {
            if (enableSni == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "enableSni");
            }
            this.enableSni = enableSni;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keepAliveRequest(Integer keepAliveRequest) {
            if (keepAliveRequest == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "keepAliveRequest");
            }
            this.keepAliveRequest = keepAliveRequest;
            return this;
        }
        @CustomType.Setter
        public Builder keepAliveTimeout(Integer keepAliveTimeout) {
            if (keepAliveTimeout == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "keepAliveTimeout");
            }
            this.keepAliveTimeout = keepAliveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder lbAlgorithm(String lbAlgorithm) {
            if (lbAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "lbAlgorithm");
            }
            this.lbAlgorithm = lbAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder protocolFollow(Integer protocolFollow) {
            if (protocolFollow == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "protocolFollow");
            }
            this.protocolFollow = protocolFollow;
            return this;
        }
        @CustomType.Setter
        public Builder protocolPorts(GetDomainProtocolPorts protocolPorts) {
            if (protocolPorts == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "protocolPorts");
            }
            this.protocolPorts = protocolPorts;
            return this;
        }
        @CustomType.Setter
        public Builder protocols(List<String> protocols) {
            if (protocols == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "protocols");
            }
            this.protocols = protocols;
            return this;
        }
        public Builder protocols(String... protocols) {
            return protocols(List.of(protocols));
        }
        @CustomType.Setter
        public Builder proxyConfig(Integer proxyConfig) {
            if (proxyConfig == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyConfig");
            }
            this.proxyConfig = proxyConfig;
            return this;
        }
        @CustomType.Setter
        public Builder proxyConnectTimeout(Integer proxyConnectTimeout) {
            if (proxyConnectTimeout == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyConnectTimeout");
            }
            this.proxyConnectTimeout = proxyConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder proxyKeepAlive(Integer proxyKeepAlive) {
            if (proxyKeepAlive == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyKeepAlive");
            }
            this.proxyKeepAlive = proxyKeepAlive;
            return this;
        }
        @CustomType.Setter
        public Builder proxyKeepAliveTimeout(Integer proxyKeepAliveTimeout) {
            if (proxyKeepAliveTimeout == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyKeepAliveTimeout");
            }
            this.proxyKeepAliveTimeout = proxyKeepAliveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder proxyReadTimeout(Integer proxyReadTimeout) {
            if (proxyReadTimeout == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyReadTimeout");
            }
            this.proxyReadTimeout = proxyReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder proxyRetry(Integer proxyRetry) {
            if (proxyRetry == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyRetry");
            }
            this.proxyRetry = proxyRetry;
            return this;
        }
        @CustomType.Setter
        public Builder proxyWriteTimeout(Integer proxyWriteTimeout) {
            if (proxyWriteTimeout == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "proxyWriteTimeout");
            }
            this.proxyWriteTimeout = proxyWriteTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder publicRealServer(Integer publicRealServer) {
            if (publicRealServer == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "publicRealServer");
            }
            this.publicRealServer = publicRealServer;
            return this;
        }
        @CustomType.Setter
        public Builder rspAbnormalEnable(Integer rspAbnormalEnable) {
            if (rspAbnormalEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "rspAbnormalEnable");
            }
            this.rspAbnormalEnable = rspAbnormalEnable;
            return this;
        }
        @CustomType.Setter
        public Builder serverIps(String serverIps) {
            if (serverIps == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "serverIps");
            }
            this.serverIps = serverIps;
            return this;
        }
        @CustomType.Setter
        public Builder srcIps(String srcIps) {
            if (srcIps == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "srcIps");
            }
            this.srcIps = srcIps;
            return this;
        }
        @CustomType.Setter
        public Builder srcProtocol(String srcProtocol) {
            if (srcProtocol == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "srcProtocol");
            }
            this.srcProtocol = srcProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder sslCiphers(List<String> sslCiphers) {
            if (sslCiphers == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "sslCiphers");
            }
            this.sslCiphers = sslCiphers;
            return this;
        }
        public Builder sslCiphers(String... sslCiphers) {
            return sslCiphers(List.of(sslCiphers));
        }
        @CustomType.Setter
        public Builder sslProtocols(List<String> sslProtocols) {
            if (sslProtocols == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "sslProtocols");
            }
            this.sslProtocols = sslProtocols;
            return this;
        }
        public Builder sslProtocols(String... sslProtocols) {
            return sslProtocols(List.of(sslProtocols));
        }
        @CustomType.Setter
        public Builder status(Integer status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder systemBotEnable(Integer systemBotEnable) {
            if (systemBotEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "systemBotEnable");
            }
            this.systemBotEnable = systemBotEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tamperProofEnable(Integer tamperProofEnable) {
            if (tamperProofEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "tamperProofEnable");
            }
            this.tamperProofEnable = tamperProofEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tcpListenerConfigs(List<GetDomainTcpListenerConfig> tcpListenerConfigs) {
            if (tcpListenerConfigs == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "tcpListenerConfigs");
            }
            this.tcpListenerConfigs = tcpListenerConfigs;
            return this;
        }
        public Builder tcpListenerConfigs(GetDomainTcpListenerConfig... tcpListenerConfigs) {
            return tcpListenerConfigs(List.of(tcpListenerConfigs));
        }
        @CustomType.Setter
        public Builder tlsEnable(Integer tlsEnable) {
            if (tlsEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "tlsEnable");
            }
            this.tlsEnable = tlsEnable;
            return this;
        }
        @CustomType.Setter
        public Builder tlsFieldsConfig(GetDomainTlsFieldsConfig tlsFieldsConfig) {
            if (tlsFieldsConfig == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "tlsFieldsConfig");
            }
            this.tlsFieldsConfig = tlsFieldsConfig;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder wafEnable(Integer wafEnable) {
            if (wafEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "wafEnable");
            }
            this.wafEnable = wafEnable;
            return this;
        }
        @CustomType.Setter
        public Builder wafWhiteReqEnable(Integer wafWhiteReqEnable) {
            if (wafWhiteReqEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "wafWhiteReqEnable");
            }
            this.wafWhiteReqEnable = wafWhiteReqEnable;
            return this;
        }
        @CustomType.Setter
        public Builder whiteEnable(Integer whiteEnable) {
            if (whiteEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "whiteEnable");
            }
            this.whiteEnable = whiteEnable;
            return this;
        }
        @CustomType.Setter
        public Builder whiteFieldEnable(Integer whiteFieldEnable) {
            if (whiteFieldEnable == null) {
              throw new MissingRequiredPropertyException("GetDomainResult", "whiteFieldEnable");
            }
            this.whiteFieldEnable = whiteFieldEnable;
            return this;
        }
        public GetDomainResult build() {
            final var _resultValue = new GetDomainResult();
            _resultValue.accessMode = accessMode;
            _resultValue.advancedDefenseIp = advancedDefenseIp;
            _resultValue.advancedDefenseIpv6 = advancedDefenseIpv6;
            _resultValue.apiEnable = apiEnable;
            _resultValue.attackStatus = attackStatus;
            _resultValue.autoCcEnable = autoCcEnable;
            _resultValue.automaticBlackEnable = automaticBlackEnable;
            _resultValue.backendGroups = backendGroups;
            _resultValue.blackIpEnable = blackIpEnable;
            _resultValue.blackLctEnable = blackLctEnable;
            _resultValue.botDytokenEnable = botDytokenEnable;
            _resultValue.botFrequencyEnable = botFrequencyEnable;
            _resultValue.botRepeatEnable = botRepeatEnable;
            _resultValue.botSequenceDefaultAction = botSequenceDefaultAction;
            _resultValue.botSequenceEnable = botSequenceEnable;
            _resultValue.ccEnable = ccEnable;
            _resultValue.certificateId = certificateId;
            _resultValue.certificateName = certificateName;
            _resultValue.certificatePlatform = certificatePlatform;
            _resultValue.clbInstanceIds = clbInstanceIds;
            _resultValue.clbListenerId = clbListenerId;
            _resultValue.clbPoolId = clbPoolId;
            _resultValue.clbServerId = clbServerId;
            _resultValue.clientIpLocation = clientIpLocation;
            _resultValue.clientMaxBodySize = clientMaxBodySize;
            _resultValue.cloudAccessConfigs = cloudAccessConfigs;
            _resultValue.cname = cname;
            _resultValue.customBotEnable = customBotEnable;
            _resultValue.customHeaders = customHeaders;
            _resultValue.customRspEnable = customRspEnable;
            _resultValue.customSni = customSni;
            _resultValue.defenceMode = defenceMode;
            _resultValue.dlpEnable = dlpEnable;
            _resultValue.domain = domain;
            _resultValue.enableCustomRedirect = enableCustomRedirect;
            _resultValue.enableHttp2 = enableHttp2;
            _resultValue.enableIpv6 = enableIpv6;
            _resultValue.enableSni = enableSni;
            _resultValue.id = id;
            _resultValue.keepAliveRequest = keepAliveRequest;
            _resultValue.keepAliveTimeout = keepAliveTimeout;
            _resultValue.lbAlgorithm = lbAlgorithm;
            _resultValue.port = port;
            _resultValue.projectName = projectName;
            _resultValue.protocolFollow = protocolFollow;
            _resultValue.protocolPorts = protocolPorts;
            _resultValue.protocols = protocols;
            _resultValue.proxyConfig = proxyConfig;
            _resultValue.proxyConnectTimeout = proxyConnectTimeout;
            _resultValue.proxyKeepAlive = proxyKeepAlive;
            _resultValue.proxyKeepAliveTimeout = proxyKeepAliveTimeout;
            _resultValue.proxyReadTimeout = proxyReadTimeout;
            _resultValue.proxyRetry = proxyRetry;
            _resultValue.proxyWriteTimeout = proxyWriteTimeout;
            _resultValue.publicRealServer = publicRealServer;
            _resultValue.rspAbnormalEnable = rspAbnormalEnable;
            _resultValue.serverIps = serverIps;
            _resultValue.srcIps = srcIps;
            _resultValue.srcProtocol = srcProtocol;
            _resultValue.sslCiphers = sslCiphers;
            _resultValue.sslProtocols = sslProtocols;
            _resultValue.status = status;
            _resultValue.systemBotEnable = systemBotEnable;
            _resultValue.tamperProofEnable = tamperProofEnable;
            _resultValue.tcpListenerConfigs = tcpListenerConfigs;
            _resultValue.tlsEnable = tlsEnable;
            _resultValue.tlsFieldsConfig = tlsFieldsConfig;
            _resultValue.updateTime = updateTime;
            _resultValue.vpcId = vpcId;
            _resultValue.wafEnable = wafEnable;
            _resultValue.wafWhiteReqEnable = wafWhiteReqEnable;
            _resultValue.whiteEnable = whiteEnable;
            _resultValue.whiteFieldEnable = whiteFieldEnable;
            return _resultValue;
        }
    }
}
