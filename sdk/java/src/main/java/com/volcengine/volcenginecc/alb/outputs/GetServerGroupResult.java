// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.alb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.alb.outputs.GetServerGroupHealthCheck;
import com.volcengine.volcenginecc.alb.outputs.GetServerGroupListener;
import com.volcengine.volcenginecc.alb.outputs.GetServerGroupServer;
import com.volcengine.volcenginecc.alb.outputs.GetServerGroupStickySessionConfig;
import com.volcengine.volcenginecc.alb.outputs.GetServerGroupTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerGroupResult {
    /**
     * @return 后端服务器组的创建时间。
     * 
     */
    private String createTime;
    /**
     * @return 后端服务器组的描述。
     * 
     */
    private String description;
    /**
     * @return 服务器组健康检查配置信息。
     * 
     */
    private GetServerGroupHealthCheck healthCheck;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 服务器组的IP地址类型。目前只支持 IPv4
     * 
     */
    private String ipAddressType;
    /**
     * @return 后端服务器组关联的监听器信息。
     * 
     */
    private List<GetServerGroupListener> listeners;
    /**
     * @return 后端服务器组所属项目名称。
     * 
     */
    private String projectName;
    /**
     * @return 后端协议：HTTP，HTTPS。
     * 
     */
    private String protocol;
    /**
     * @return 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    private String scheduler;
    /**
     * @return 服务器组内后端服务器的个数。
     * 
     */
    private Integer serverCount;
    /**
     * @return 后端服务器组的ID。
     * 
     */
    private String serverGroupId;
    /**
     * @return 后端服务器组的名称。
     * 
     */
    private String serverGroupName;
    /**
     * @return 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
     * 
     */
    private String serverGroupType;
    /**
     * @return 后端服务器组中服务器的信息。
     * 
     */
    private List<GetServerGroupServer> servers;
    /**
     * @return 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
     * 
     */
    private String status;
    /**
     * @return 会话保持功能的参数信息。
     * 
     */
    private GetServerGroupStickySessionConfig stickySessionConfig;
    /**
     * @return 标签信息。
     * 
     */
    private List<GetServerGroupTag> tags;
    /**
     * @return 后端服务器组的最近操作时间。
     * 
     */
    private String updateTime;
    /**
     * @return 后端服务器组所属 Vpc 的 ID。
     * 
     */
    private String vpcId;

    private GetServerGroupResult() {}
    /**
     * @return 后端服务器组的创建时间。
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return 后端服务器组的描述。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 服务器组健康检查配置信息。
     * 
     */
    public GetServerGroupHealthCheck healthCheck() {
        return this.healthCheck;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 服务器组的IP地址类型。目前只支持 IPv4
     * 
     */
    public String ipAddressType() {
        return this.ipAddressType;
    }
    /**
     * @return 后端服务器组关联的监听器信息。
     * 
     */
    public List<GetServerGroupListener> listeners() {
        return this.listeners;
    }
    /**
     * @return 后端服务器组所属项目名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 后端协议：HTTP，HTTPS。
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    public String scheduler() {
        return this.scheduler;
    }
    /**
     * @return 服务器组内后端服务器的个数。
     * 
     */
    public Integer serverCount() {
        return this.serverCount;
    }
    /**
     * @return 后端服务器组的ID。
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return 后端服务器组的名称。
     * 
     */
    public String serverGroupName() {
        return this.serverGroupName;
    }
    /**
     * @return 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
     * 
     */
    public String serverGroupType() {
        return this.serverGroupType;
    }
    /**
     * @return 后端服务器组中服务器的信息。
     * 
     */
    public List<GetServerGroupServer> servers() {
        return this.servers;
    }
    /**
     * @return 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 会话保持功能的参数信息。
     * 
     */
    public GetServerGroupStickySessionConfig stickySessionConfig() {
        return this.stickySessionConfig;
    }
    /**
     * @return 标签信息。
     * 
     */
    public List<GetServerGroupTag> tags() {
        return this.tags;
    }
    /**
     * @return 后端服务器组的最近操作时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }
    /**
     * @return 后端服务器组所属 Vpc 的 ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createTime;
        private String description;
        private GetServerGroupHealthCheck healthCheck;
        private String id;
        private String ipAddressType;
        private List<GetServerGroupListener> listeners;
        private String projectName;
        private String protocol;
        private String scheduler;
        private Integer serverCount;
        private String serverGroupId;
        private String serverGroupName;
        private String serverGroupType;
        private List<GetServerGroupServer> servers;
        private String status;
        private GetServerGroupStickySessionConfig stickySessionConfig;
        private List<GetServerGroupTag> tags;
        private String updateTime;
        private String vpcId;
        public Builder() {}
        public Builder(GetServerGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.healthCheck = defaults.healthCheck;
    	      this.id = defaults.id;
    	      this.ipAddressType = defaults.ipAddressType;
    	      this.listeners = defaults.listeners;
    	      this.projectName = defaults.projectName;
    	      this.protocol = defaults.protocol;
    	      this.scheduler = defaults.scheduler;
    	      this.serverCount = defaults.serverCount;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.serverGroupName = defaults.serverGroupName;
    	      this.serverGroupType = defaults.serverGroupType;
    	      this.servers = defaults.servers;
    	      this.status = defaults.status;
    	      this.stickySessionConfig = defaults.stickySessionConfig;
    	      this.tags = defaults.tags;
    	      this.updateTime = defaults.updateTime;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(GetServerGroupHealthCheck healthCheck) {
            if (healthCheck == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "healthCheck");
            }
            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressType(String ipAddressType) {
            if (ipAddressType == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "ipAddressType");
            }
            this.ipAddressType = ipAddressType;
            return this;
        }
        @CustomType.Setter
        public Builder listeners(List<GetServerGroupListener> listeners) {
            if (listeners == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "listeners");
            }
            this.listeners = listeners;
            return this;
        }
        public Builder listeners(GetServerGroupListener... listeners) {
            return listeners(List.of(listeners));
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder scheduler(String scheduler) {
            if (scheduler == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "scheduler");
            }
            this.scheduler = scheduler;
            return this;
        }
        @CustomType.Setter
        public Builder serverCount(Integer serverCount) {
            if (serverCount == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "serverCount");
            }
            this.serverCount = serverCount;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupName(String serverGroupName) {
            if (serverGroupName == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "serverGroupName");
            }
            this.serverGroupName = serverGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupType(String serverGroupType) {
            if (serverGroupType == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "serverGroupType");
            }
            this.serverGroupType = serverGroupType;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<GetServerGroupServer> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(GetServerGroupServer... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder stickySessionConfig(GetServerGroupStickySessionConfig stickySessionConfig) {
            if (stickySessionConfig == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "stickySessionConfig");
            }
            this.stickySessionConfig = stickySessionConfig;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetServerGroupTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetServerGroupTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetServerGroupResult build() {
            final var _resultValue = new GetServerGroupResult();
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.healthCheck = healthCheck;
            _resultValue.id = id;
            _resultValue.ipAddressType = ipAddressType;
            _resultValue.listeners = listeners;
            _resultValue.projectName = projectName;
            _resultValue.protocol = protocol;
            _resultValue.scheduler = scheduler;
            _resultValue.serverCount = serverCount;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.serverGroupName = serverGroupName;
            _resultValue.serverGroupType = serverGroupType;
            _resultValue.servers = servers;
            _resultValue.status = status;
            _resultValue.stickySessionConfig = stickySessionConfig;
            _resultValue.tags = tags;
            _resultValue.updateTime = updateTime;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
