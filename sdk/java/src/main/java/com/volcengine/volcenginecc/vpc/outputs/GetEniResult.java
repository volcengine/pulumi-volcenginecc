// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vpc.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.vpc.outputs.GetEniPrimaryIpAddress;
import com.volcengine.volcenginecc.vpc.outputs.GetEniPrivateIpSet;
import com.volcengine.volcenginecc.vpc.outputs.GetEniTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetEniResult {
    /**
     * @return 网卡所有者ID。
     * 
     */
    private String accountId;
    /**
     * @return 网卡创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 是否开启随云服务器实例删除，true为开启，false为不开启。
     * 
     */
    private Boolean deleteOnTermination;
    /**
     * @return 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
     * 
     */
    private String description;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
     * 
     */
    private String instanceId;
    /**
     * @return 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
     * 
     */
    private Integer ipv6AddressCount;
    /**
     * @return 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
     * 
     */
    private List<String> ipv6Sets;
    /**
     * @return 网卡的MAC地址。
     * 
     */
    private String macAddress;
    /**
     * @return 网卡ID。
     * 
     */
    private String networkInterfaceId;
    /**
     * @return 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
     * 
     */
    private String networkInterfaceName;
    /**
     * @return 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
     * 
     */
    private Boolean portSecurityEnabled;
    /**
     * @return 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
     * 
     */
    private GetEniPrimaryIpAddress primaryIpAddress;
    /**
     * @return 网卡的私网IPv4地址列表。
     * 
     */
    private List<GetEniPrivateIpSet> privateIpSets;
    /**
     * @return 网卡所属项目的名称。
     * 
     */
    private String projectName;
    /**
     * @return 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
     * 
     */
    private Integer secondaryPrivateIpAddressCount;
    /**
     * @return 辅助网卡加入一个或多个安全组的ID。
     * 
     */
    private List<String> securityGroupIds;
    /**
     * @return 是否为火山引擎官方服务网卡，true为是，false为否。
     * 
     */
    private Boolean serviceManaged;
    /**
     * @return 网卡的绑定状态。
     * 
     */
    private String status;
    /**
     * @return 辅助网卡所在子网的ID。
     * 
     */
    private String subnetId;
    private List<GetEniTag> tags;
    /**
     * @return 网卡类型。primary：主网卡，secondary：辅助网卡
     * 
     */
    private String type;
    /**
     * @return 更新网卡的时间。
     * 
     */
    private String updatedTime;
    /**
     * @return 网卡所属的VPC的ID。
     * 
     */
    private String vpcId;
    /**
     * @return 网卡所属VPC的名称。
     * 
     */
    private String vpcName;
    /**
     * @return 网卡所属可用区的ID。
     * 
     */
    private String zoneId;

    private GetEniResult() {}
    /**
     * @return 网卡所有者ID。
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return 网卡创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 是否开启随云服务器实例删除，true为开启，false为不开启。
     * 
     */
    public Boolean deleteOnTermination() {
        return this.deleteOnTermination;
    }
    /**
     * @return 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
     * 
     */
    public Integer ipv6AddressCount() {
        return this.ipv6AddressCount;
    }
    /**
     * @return 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
     * 
     */
    public List<String> ipv6Sets() {
        return this.ipv6Sets;
    }
    /**
     * @return 网卡的MAC地址。
     * 
     */
    public String macAddress() {
        return this.macAddress;
    }
    /**
     * @return 网卡ID。
     * 
     */
    public String networkInterfaceId() {
        return this.networkInterfaceId;
    }
    /**
     * @return 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
     * 
     */
    public String networkInterfaceName() {
        return this.networkInterfaceName;
    }
    /**
     * @return 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
     * 
     */
    public Boolean portSecurityEnabled() {
        return this.portSecurityEnabled;
    }
    /**
     * @return 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
     * 
     */
    public GetEniPrimaryIpAddress primaryIpAddress() {
        return this.primaryIpAddress;
    }
    /**
     * @return 网卡的私网IPv4地址列表。
     * 
     */
    public List<GetEniPrivateIpSet> privateIpSets() {
        return this.privateIpSets;
    }
    /**
     * @return 网卡所属项目的名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
     * 
     */
    public Integer secondaryPrivateIpAddressCount() {
        return this.secondaryPrivateIpAddressCount;
    }
    /**
     * @return 辅助网卡加入一个或多个安全组的ID。
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }
    /**
     * @return 是否为火山引擎官方服务网卡，true为是，false为否。
     * 
     */
    public Boolean serviceManaged() {
        return this.serviceManaged;
    }
    /**
     * @return 网卡的绑定状态。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 辅助网卡所在子网的ID。
     * 
     */
    public String subnetId() {
        return this.subnetId;
    }
    public List<GetEniTag> tags() {
        return this.tags;
    }
    /**
     * @return 网卡类型。primary：主网卡，secondary：辅助网卡
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return 更新网卡的时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return 网卡所属的VPC的ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return 网卡所属VPC的名称。
     * 
     */
    public String vpcName() {
        return this.vpcName;
    }
    /**
     * @return 网卡所属可用区的ID。
     * 
     */
    public String zoneId() {
        return this.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEniResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String createdTime;
        private Boolean deleteOnTermination;
        private String description;
        private String id;
        private String instanceId;
        private Integer ipv6AddressCount;
        private List<String> ipv6Sets;
        private String macAddress;
        private String networkInterfaceId;
        private String networkInterfaceName;
        private Boolean portSecurityEnabled;
        private GetEniPrimaryIpAddress primaryIpAddress;
        private List<GetEniPrivateIpSet> privateIpSets;
        private String projectName;
        private Integer secondaryPrivateIpAddressCount;
        private List<String> securityGroupIds;
        private Boolean serviceManaged;
        private String status;
        private String subnetId;
        private List<GetEniTag> tags;
        private String type;
        private String updatedTime;
        private String vpcId;
        private String vpcName;
        private String zoneId;
        public Builder() {}
        public Builder(GetEniResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.createdTime = defaults.createdTime;
    	      this.deleteOnTermination = defaults.deleteOnTermination;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.ipv6AddressCount = defaults.ipv6AddressCount;
    	      this.ipv6Sets = defaults.ipv6Sets;
    	      this.macAddress = defaults.macAddress;
    	      this.networkInterfaceId = defaults.networkInterfaceId;
    	      this.networkInterfaceName = defaults.networkInterfaceName;
    	      this.portSecurityEnabled = defaults.portSecurityEnabled;
    	      this.primaryIpAddress = defaults.primaryIpAddress;
    	      this.privateIpSets = defaults.privateIpSets;
    	      this.projectName = defaults.projectName;
    	      this.secondaryPrivateIpAddressCount = defaults.secondaryPrivateIpAddressCount;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.serviceManaged = defaults.serviceManaged;
    	      this.status = defaults.status;
    	      this.subnetId = defaults.subnetId;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vpcId = defaults.vpcId;
    	      this.vpcName = defaults.vpcName;
    	      this.zoneId = defaults.zoneId;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder deleteOnTermination(Boolean deleteOnTermination) {
            if (deleteOnTermination == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "deleteOnTermination");
            }
            this.deleteOnTermination = deleteOnTermination;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressCount(Integer ipv6AddressCount) {
            if (ipv6AddressCount == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "ipv6AddressCount");
            }
            this.ipv6AddressCount = ipv6AddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Sets(List<String> ipv6Sets) {
            if (ipv6Sets == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "ipv6Sets");
            }
            this.ipv6Sets = ipv6Sets;
            return this;
        }
        public Builder ipv6Sets(String... ipv6Sets) {
            return ipv6Sets(List.of(ipv6Sets));
        }
        @CustomType.Setter
        public Builder macAddress(String macAddress) {
            if (macAddress == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "macAddress");
            }
            this.macAddress = macAddress;
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaceId(String networkInterfaceId) {
            if (networkInterfaceId == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "networkInterfaceId");
            }
            this.networkInterfaceId = networkInterfaceId;
            return this;
        }
        @CustomType.Setter
        public Builder networkInterfaceName(String networkInterfaceName) {
            if (networkInterfaceName == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "networkInterfaceName");
            }
            this.networkInterfaceName = networkInterfaceName;
            return this;
        }
        @CustomType.Setter
        public Builder portSecurityEnabled(Boolean portSecurityEnabled) {
            if (portSecurityEnabled == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "portSecurityEnabled");
            }
            this.portSecurityEnabled = portSecurityEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder primaryIpAddress(GetEniPrimaryIpAddress primaryIpAddress) {
            if (primaryIpAddress == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "primaryIpAddress");
            }
            this.primaryIpAddress = primaryIpAddress;
            return this;
        }
        @CustomType.Setter
        public Builder privateIpSets(List<GetEniPrivateIpSet> privateIpSets) {
            if (privateIpSets == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "privateIpSets");
            }
            this.privateIpSets = privateIpSets;
            return this;
        }
        public Builder privateIpSets(GetEniPrivateIpSet... privateIpSets) {
            return privateIpSets(List.of(privateIpSets));
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder secondaryPrivateIpAddressCount(Integer secondaryPrivateIpAddressCount) {
            if (secondaryPrivateIpAddressCount == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "secondaryPrivateIpAddressCount");
            }
            this.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(List<String> securityGroupIds) {
            if (securityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "securityGroupIds");
            }
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder serviceManaged(Boolean serviceManaged) {
            if (serviceManaged == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "serviceManaged");
            }
            this.serviceManaged = serviceManaged;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder subnetId(String subnetId) {
            if (subnetId == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "subnetId");
            }
            this.subnetId = subnetId;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetEniTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetEniTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder vpcName(String vpcName) {
            if (vpcName == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "vpcName");
            }
            this.vpcName = vpcName;
            return this;
        }
        @CustomType.Setter
        public Builder zoneId(String zoneId) {
            if (zoneId == null) {
              throw new MissingRequiredPropertyException("GetEniResult", "zoneId");
            }
            this.zoneId = zoneId;
            return this;
        }
        public GetEniResult build() {
            final var _resultValue = new GetEniResult();
            _resultValue.accountId = accountId;
            _resultValue.createdTime = createdTime;
            _resultValue.deleteOnTermination = deleteOnTermination;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.ipv6AddressCount = ipv6AddressCount;
            _resultValue.ipv6Sets = ipv6Sets;
            _resultValue.macAddress = macAddress;
            _resultValue.networkInterfaceId = networkInterfaceId;
            _resultValue.networkInterfaceName = networkInterfaceName;
            _resultValue.portSecurityEnabled = portSecurityEnabled;
            _resultValue.primaryIpAddress = primaryIpAddress;
            _resultValue.privateIpSets = privateIpSets;
            _resultValue.projectName = projectName;
            _resultValue.secondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            _resultValue.securityGroupIds = securityGroupIds;
            _resultValue.serviceManaged = serviceManaged;
            _resultValue.status = status;
            _resultValue.subnetId = subnetId;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.updatedTime = updatedTime;
            _resultValue.vpcId = vpcId;
            _resultValue.vpcName = vpcName;
            _resultValue.zoneId = zoneId;
            return _resultValue;
        }
    }
}
