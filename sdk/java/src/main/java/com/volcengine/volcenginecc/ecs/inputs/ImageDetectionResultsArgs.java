// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.ecs.inputs.ImageDetectionResultsItemArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ImageDetectionResultsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ImageDetectionResultsArgs Empty = new ImageDetectionResultsArgs();

    /**
     * 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
     * 
     */
    @Import(name="detectionStatus")
    private @Nullable Output<String> detectionStatus;

    /**
     * @return 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
     * 
     */
    public Optional<Output<String>> detectionStatus() {
        return Optional.ofNullable(this.detectionStatus);
    }

    @Import(name="items")
    private @Nullable Output<List<ImageDetectionResultsItemArgs>> items;

    public Optional<Output<List<ImageDetectionResultsItemArgs>>> items() {
        return Optional.ofNullable(this.items);
    }

    private ImageDetectionResultsArgs() {}

    private ImageDetectionResultsArgs(ImageDetectionResultsArgs $) {
        this.detectionStatus = $.detectionStatus;
        this.items = $.items;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ImageDetectionResultsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ImageDetectionResultsArgs $;

        public Builder() {
            $ = new ImageDetectionResultsArgs();
        }

        public Builder(ImageDetectionResultsArgs defaults) {
            $ = new ImageDetectionResultsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param detectionStatus 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
         * 
         * @return builder
         * 
         */
        public Builder detectionStatus(@Nullable Output<String> detectionStatus) {
            $.detectionStatus = detectionStatus;
            return this;
        }

        /**
         * @param detectionStatus 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
         * 
         * @return builder
         * 
         */
        public Builder detectionStatus(String detectionStatus) {
            return detectionStatus(Output.of(detectionStatus));
        }

        public Builder items(@Nullable Output<List<ImageDetectionResultsItemArgs>> items) {
            $.items = items;
            return this;
        }

        public Builder items(List<ImageDetectionResultsItemArgs> items) {
            return items(Output.of(items));
        }

        public Builder items(ImageDetectionResultsItemArgs... items) {
            return items(List.of(items));
        }

        public ImageDetectionResultsArgs build() {
            return $;
        }
    }

}
