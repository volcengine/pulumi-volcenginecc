// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.storageebs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.storageebs.inputs.VolumeExtraPerformanceArgs;
import com.volcengine.volcenginecc.storageebs.inputs.VolumeTagArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VolumeArgs extends com.pulumi.resources.ResourceArgs {

    public static final VolumeArgs Empty = new VolumeArgs();

    /**
     * 自动快照策略ID。
     * 
     */
    @Import(name="autoSnapshotPolicyId")
    private @Nullable Output<String> autoSnapshotPolicyId;

    /**
     * @return 自动快照策略ID。
     * 
     */
    public Optional<Output<String>> autoSnapshotPolicyId() {
        return Optional.ofNullable(this.autoSnapshotPolicyId);
    }

    /**
     * 释放实例时，该云盘是否随实例一起释放，取值说明如下：true：云盘随实例一起释放。false：云盘不随实例一起释放。
     * 
     */
    @Import(name="deleteWithInstance")
    private @Nullable Output<Boolean> deleteWithInstance;

    /**
     * @return 释放实例时，该云盘是否随实例一起释放，取值说明如下：true：云盘随实例一起释放。false：云盘不随实例一起释放。
     * 
     */
    public Optional<Output<Boolean>> deleteWithInstance() {
        return Optional.ofNullable(this.deleteWithInstance);
    }

    /**
     * 云盘的描述信息，默认为空，长度限制在1 ~ 255字符之间。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 云盘的描述信息，默认为空，长度限制在1 ~ 255字符之间。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 额外性能。
     * 
     */
    @Import(name="extraPerformance")
    private @Nullable Output<VolumeExtraPerformanceArgs> extraPerformance;

    /**
     * @return 额外性能。
     * 
     */
    public Optional<Output<VolumeExtraPerformanceArgs>> extraPerformance() {
        return Optional.ofNullable(this.extraPerformance);
    }

    /**
     * 创建云盘的同时挂载的ECS实例ID。
     * 
     */
    @Import(name="instanceId")
    private @Nullable Output<String> instanceId;

    /**
     * @return 创建云盘的同时挂载的ECS实例ID。
     * 
     */
    public Optional<Output<String>> instanceId() {
        return Optional.ofNullable(this.instanceId);
    }

    /**
     * 云盘属性，data表示数据盘。默认值为data。说明： 仅支持创建数据盘。
     * 
     */
    @Import(name="kind")
    private @Nullable Output<String> kind;

    /**
     * @return 云盘属性，data表示数据盘。默认值为data。说明： 仅支持创建数据盘。
     * 
     */
    public Optional<Output<String>> kind() {
        return Optional.ofNullable(this.kind);
    }

    /**
     * 付费类型，说明如下： Pre：预付费（包年包月） Post：后付费（按量计费）。
     * 
     */
    @Import(name="payType")
    private @Nullable Output<String> payType;

    /**
     * @return 付费类型，说明如下： Pre：预付费（包年包月） Post：后付费（按量计费）。
     * 
     */
    public Optional<Output<String>> payType() {
        return Optional.ofNullable(this.payType);
    }

    /**
     * 云盘所要加入的Project（项目）名称。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 云盘所要加入的Project（项目）名称。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * Size，数据盘容量大小，单位为GiB。不同类型的数据盘容量范围如下：ESSD*PL0：10~65536 GiB；ESSD*FlexPL：10~65536 GiB；TSSD_TL0：40~65536 GiB
     * 
     */
    @Import(name="size", required=true)
    private Output<Double> size;

    /**
     * @return Size，数据盘容量大小，单位为GiB。不同类型的数据盘容量范围如下：ESSD*PL0：10~65536 GiB；ESSD*FlexPL：10~65536 GiB；TSSD_TL0：40~65536 GiB
     * 
     */
    public Output<Double> size() {
        return this.size;
    }

    /**
     * 源快照。
     * 
     */
    @Import(name="sourceSnapshotId")
    private @Nullable Output<String> sourceSnapshotId;

    /**
     * @return 源快照。
     * 
     */
    public Optional<Output<String>> sourceSnapshotId() {
        return Optional.ofNullable(this.sourceSnapshotId);
    }

    @Import(name="tags")
    private @Nullable Output<List<VolumeTagArgs>> tags;

    public Optional<Output<List<VolumeTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 云盘显示名称。命名规则如下：首字符仅支持中文、字母或下划线（*）。可包含中文、字母、数字、下划线（*）或中划线（-）。长度限制在1~128字符之间。
     * 
     */
    @Import(name="volumeName", required=true)
    private Output<String> volumeName;

    /**
     * @return 云盘显示名称。命名规则如下：首字符仅支持中文、字母或下划线（*）。可包含中文、字母、数字、下划线（*）或中划线（-）。长度限制在1~128字符之间。
     * 
     */
    public Output<String> volumeName() {
        return this.volumeName;
    }

    /**
     * 云盘类型，取值说明如下：ESSD*PL0：极速型SSD云盘，PL0规格。ESSD*FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0: 吞吐型SSD云盘。
     * 
     */
    @Import(name="volumeType", required=true)
    private Output<String> volumeType;

    /**
     * @return 云盘类型，取值说明如下：ESSD*PL0：极速型SSD云盘，PL0规格。ESSD*FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0: 吞吐型SSD云盘。
     * 
     */
    public Output<String> volumeType() {
        return this.volumeType;
    }

    /**
     * 可用区ID。
     * 
     */
    @Import(name="zoneId", required=true)
    private Output<String> zoneId;

    /**
     * @return 可用区ID。
     * 
     */
    public Output<String> zoneId() {
        return this.zoneId;
    }

    private VolumeArgs() {}

    private VolumeArgs(VolumeArgs $) {
        this.autoSnapshotPolicyId = $.autoSnapshotPolicyId;
        this.deleteWithInstance = $.deleteWithInstance;
        this.description = $.description;
        this.extraPerformance = $.extraPerformance;
        this.instanceId = $.instanceId;
        this.kind = $.kind;
        this.payType = $.payType;
        this.projectName = $.projectName;
        this.size = $.size;
        this.sourceSnapshotId = $.sourceSnapshotId;
        this.tags = $.tags;
        this.volumeName = $.volumeName;
        this.volumeType = $.volumeType;
        this.zoneId = $.zoneId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VolumeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VolumeArgs $;

        public Builder() {
            $ = new VolumeArgs();
        }

        public Builder(VolumeArgs defaults) {
            $ = new VolumeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param autoSnapshotPolicyId 自动快照策略ID。
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyId(@Nullable Output<String> autoSnapshotPolicyId) {
            $.autoSnapshotPolicyId = autoSnapshotPolicyId;
            return this;
        }

        /**
         * @param autoSnapshotPolicyId 自动快照策略ID。
         * 
         * @return builder
         * 
         */
        public Builder autoSnapshotPolicyId(String autoSnapshotPolicyId) {
            return autoSnapshotPolicyId(Output.of(autoSnapshotPolicyId));
        }

        /**
         * @param deleteWithInstance 释放实例时，该云盘是否随实例一起释放，取值说明如下：true：云盘随实例一起释放。false：云盘不随实例一起释放。
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(@Nullable Output<Boolean> deleteWithInstance) {
            $.deleteWithInstance = deleteWithInstance;
            return this;
        }

        /**
         * @param deleteWithInstance 释放实例时，该云盘是否随实例一起释放，取值说明如下：true：云盘随实例一起释放。false：云盘不随实例一起释放。
         * 
         * @return builder
         * 
         */
        public Builder deleteWithInstance(Boolean deleteWithInstance) {
            return deleteWithInstance(Output.of(deleteWithInstance));
        }

        /**
         * @param description 云盘的描述信息，默认为空，长度限制在1 ~ 255字符之间。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 云盘的描述信息，默认为空，长度限制在1 ~ 255字符之间。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param extraPerformance 额外性能。
         * 
         * @return builder
         * 
         */
        public Builder extraPerformance(@Nullable Output<VolumeExtraPerformanceArgs> extraPerformance) {
            $.extraPerformance = extraPerformance;
            return this;
        }

        /**
         * @param extraPerformance 额外性能。
         * 
         * @return builder
         * 
         */
        public Builder extraPerformance(VolumeExtraPerformanceArgs extraPerformance) {
            return extraPerformance(Output.of(extraPerformance));
        }

        /**
         * @param instanceId 创建云盘的同时挂载的ECS实例ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(@Nullable Output<String> instanceId) {
            $.instanceId = instanceId;
            return this;
        }

        /**
         * @param instanceId 创建云盘的同时挂载的ECS实例ID。
         * 
         * @return builder
         * 
         */
        public Builder instanceId(String instanceId) {
            return instanceId(Output.of(instanceId));
        }

        /**
         * @param kind 云盘属性，data表示数据盘。默认值为data。说明： 仅支持创建数据盘。
         * 
         * @return builder
         * 
         */
        public Builder kind(@Nullable Output<String> kind) {
            $.kind = kind;
            return this;
        }

        /**
         * @param kind 云盘属性，data表示数据盘。默认值为data。说明： 仅支持创建数据盘。
         * 
         * @return builder
         * 
         */
        public Builder kind(String kind) {
            return kind(Output.of(kind));
        }

        /**
         * @param payType 付费类型，说明如下： Pre：预付费（包年包月） Post：后付费（按量计费）。
         * 
         * @return builder
         * 
         */
        public Builder payType(@Nullable Output<String> payType) {
            $.payType = payType;
            return this;
        }

        /**
         * @param payType 付费类型，说明如下： Pre：预付费（包年包月） Post：后付费（按量计费）。
         * 
         * @return builder
         * 
         */
        public Builder payType(String payType) {
            return payType(Output.of(payType));
        }

        /**
         * @param projectName 云盘所要加入的Project（项目）名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 云盘所要加入的Project（项目）名称。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param size Size，数据盘容量大小，单位为GiB。不同类型的数据盘容量范围如下：ESSD*PL0：10~65536 GiB；ESSD*FlexPL：10~65536 GiB；TSSD_TL0：40~65536 GiB
         * 
         * @return builder
         * 
         */
        public Builder size(Output<Double> size) {
            $.size = size;
            return this;
        }

        /**
         * @param size Size，数据盘容量大小，单位为GiB。不同类型的数据盘容量范围如下：ESSD*PL0：10~65536 GiB；ESSD*FlexPL：10~65536 GiB；TSSD_TL0：40~65536 GiB
         * 
         * @return builder
         * 
         */
        public Builder size(Double size) {
            return size(Output.of(size));
        }

        /**
         * @param sourceSnapshotId 源快照。
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotId(@Nullable Output<String> sourceSnapshotId) {
            $.sourceSnapshotId = sourceSnapshotId;
            return this;
        }

        /**
         * @param sourceSnapshotId 源快照。
         * 
         * @return builder
         * 
         */
        public Builder sourceSnapshotId(String sourceSnapshotId) {
            return sourceSnapshotId(Output.of(sourceSnapshotId));
        }

        public Builder tags(@Nullable Output<List<VolumeTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<VolumeTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(VolumeTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param volumeName 云盘显示名称。命名规则如下：首字符仅支持中文、字母或下划线（*）。可包含中文、字母、数字、下划线（*）或中划线（-）。长度限制在1~128字符之间。
         * 
         * @return builder
         * 
         */
        public Builder volumeName(Output<String> volumeName) {
            $.volumeName = volumeName;
            return this;
        }

        /**
         * @param volumeName 云盘显示名称。命名规则如下：首字符仅支持中文、字母或下划线（*）。可包含中文、字母、数字、下划线（*）或中划线（-）。长度限制在1~128字符之间。
         * 
         * @return builder
         * 
         */
        public Builder volumeName(String volumeName) {
            return volumeName(Output.of(volumeName));
        }

        /**
         * @param volumeType 云盘类型，取值说明如下：ESSD*PL0：极速型SSD云盘，PL0规格。ESSD*FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0: 吞吐型SSD云盘。
         * 
         * @return builder
         * 
         */
        public Builder volumeType(Output<String> volumeType) {
            $.volumeType = volumeType;
            return this;
        }

        /**
         * @param volumeType 云盘类型，取值说明如下：ESSD*PL0：极速型SSD云盘，PL0规格。ESSD*FlexPL: 极速型SSD云盘，FlexPL规格。TSSD_TL0: 吞吐型SSD云盘。
         * 
         * @return builder
         * 
         */
        public Builder volumeType(String volumeType) {
            return volumeType(Output.of(volumeType));
        }

        /**
         * @param zoneId 可用区ID。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(Output<String> zoneId) {
            $.zoneId = zoneId;
            return this;
        }

        /**
         * @param zoneId 可用区ID。
         * 
         * @return builder
         * 
         */
        public Builder zoneId(String zoneId) {
            return zoneId(Output.of(zoneId));
        }

        public VolumeArgs build() {
            if ($.size == null) {
                throw new MissingRequiredPropertyException("VolumeArgs", "size");
            }
            if ($.volumeName == null) {
                throw new MissingRequiredPropertyException("VolumeArgs", "volumeName");
            }
            if ($.volumeType == null) {
                throw new MissingRequiredPropertyException("VolumeArgs", "volumeType");
            }
            if ($.zoneId == null) {
                throw new MissingRequiredPropertyException("VolumeArgs", "zoneId");
            }
            return $;
        }
    }

}
