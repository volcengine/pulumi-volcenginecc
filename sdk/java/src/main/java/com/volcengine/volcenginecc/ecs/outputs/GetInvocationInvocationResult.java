// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetInvocationInvocationResult {
    /**
     * @return 命令ID。
     * 
     */
    private String commandId;
    /**
     * @return 命令执行的完成时间。
     * 
     */
    private String endTime;
    /**
     * @return 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
     * 
     */
    private String errorCode;
    /**
     * @return 命令执行失败的错误信息。
     * 
     */
    private String errorMessage;
    /**
     * @return 脚本执行后的退出状态码。
     * 
     */
    private Integer exitCode;
    /**
     * @return 实例ID。
     * 
     */
    private String instanceId;
    /**
     * @return 任务执行ID。
     * 
     */
    private String invocationId;
    /**
     * @return 任务执行结果ID。
     * 
     */
    private String invocationResultId;
    /**
     * @return 单台实例的命令进度状态。
     * 
     */
    private String invocationResultStatus;
    /**
     * @return 经过Base64编码的命令执行后输出信息。
     * 
     */
    private String output;
    /**
     * @return 命令在实例中开始执行的时间。
     * 
     */
    private String startTime;
    /**
     * @return 在实例中执行命令的用户名称。
     * 
     */
    private String username;

    private GetInvocationInvocationResult() {}
    /**
     * @return 命令ID。
     * 
     */
    public String commandId() {
        return this.commandId;
    }
    /**
     * @return 命令执行的完成时间。
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
     * 
     */
    public String errorCode() {
        return this.errorCode;
    }
    /**
     * @return 命令执行失败的错误信息。
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return 脚本执行后的退出状态码。
     * 
     */
    public Integer exitCode() {
        return this.exitCode;
    }
    /**
     * @return 实例ID。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 任务执行ID。
     * 
     */
    public String invocationId() {
        return this.invocationId;
    }
    /**
     * @return 任务执行结果ID。
     * 
     */
    public String invocationResultId() {
        return this.invocationResultId;
    }
    /**
     * @return 单台实例的命令进度状态。
     * 
     */
    public String invocationResultStatus() {
        return this.invocationResultStatus;
    }
    /**
     * @return 经过Base64编码的命令执行后输出信息。
     * 
     */
    public String output() {
        return this.output;
    }
    /**
     * @return 命令在实例中开始执行的时间。
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return 在实例中执行命令的用户名称。
     * 
     */
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvocationInvocationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commandId;
        private String endTime;
        private String errorCode;
        private String errorMessage;
        private Integer exitCode;
        private String instanceId;
        private String invocationId;
        private String invocationResultId;
        private String invocationResultStatus;
        private String output;
        private String startTime;
        private String username;
        public Builder() {}
        public Builder(GetInvocationInvocationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandId = defaults.commandId;
    	      this.endTime = defaults.endTime;
    	      this.errorCode = defaults.errorCode;
    	      this.errorMessage = defaults.errorMessage;
    	      this.exitCode = defaults.exitCode;
    	      this.instanceId = defaults.instanceId;
    	      this.invocationId = defaults.invocationId;
    	      this.invocationResultId = defaults.invocationResultId;
    	      this.invocationResultStatus = defaults.invocationResultStatus;
    	      this.output = defaults.output;
    	      this.startTime = defaults.startTime;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder commandId(String commandId) {
            if (commandId == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "commandId");
            }
            this.commandId = commandId;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder errorCode(String errorCode) {
            if (errorCode == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "errorCode");
            }
            this.errorCode = errorCode;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder exitCode(Integer exitCode) {
            if (exitCode == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "exitCode");
            }
            this.exitCode = exitCode;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationId(String invocationId) {
            if (invocationId == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "invocationId");
            }
            this.invocationId = invocationId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationResultId(String invocationResultId) {
            if (invocationResultId == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "invocationResultId");
            }
            this.invocationResultId = invocationResultId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationResultStatus(String invocationResultStatus) {
            if (invocationResultStatus == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "invocationResultStatus");
            }
            this.invocationResultStatus = invocationResultStatus;
            return this;
        }
        @CustomType.Setter
        public Builder output(String output) {
            if (output == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "output");
            }
            this.output = output;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetInvocationInvocationResult", "username");
            }
            this.username = username;
            return this;
        }
        public GetInvocationInvocationResult build() {
            final var _resultValue = new GetInvocationInvocationResult();
            _resultValue.commandId = commandId;
            _resultValue.endTime = endTime;
            _resultValue.errorCode = errorCode;
            _resultValue.errorMessage = errorMessage;
            _resultValue.exitCode = exitCode;
            _resultValue.instanceId = instanceId;
            _resultValue.invocationId = invocationId;
            _resultValue.invocationResultId = invocationResultId;
            _resultValue.invocationResultStatus = invocationResultStatus;
            _resultValue.output = output;
            _resultValue.startTime = startTime;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
