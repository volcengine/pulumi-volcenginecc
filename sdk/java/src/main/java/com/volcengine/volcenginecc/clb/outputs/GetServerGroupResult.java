// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetServerGroupListener;
import com.volcengine.volcenginecc.clb.outputs.GetServerGroupServer;
import com.volcengine.volcenginecc.clb.outputs.GetServerGroupTag;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerGroupResult {
    /**
     * @return 后端服务器组的IP地址类型。ipv4：后端服务器组为IPv4类型。ipv6：后端服务器组为IPv6类型。
     * 
     */
    private String addressIpVersion;
    /**
     * @return 是否开启全端口转发。on：开启全端口转发。off：关闭全端口转发。
     * 
     */
    private String anyPortEnabled;
    /**
     * @return 后端服务器组的创建时间。
     * 
     */
    private String createTime;
    /**
     * @return 后端服务器组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个符。不填则默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 后端服务器组关联的监听器信息。
     * 
     */
    private List<GetServerGroupListener> listeners;
    /**
     * @return 后端服务器组所属的CLB实例ID。
     * 
     */
    private String loadBalancerId;
    /**
     * @return 后端服务器组的ID。
     * 
     */
    private String serverGroupId;
    /**
     * @return 后端服务器组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。不填默认为后端服务器组ID。
     * 
     */
    private String serverGroupName;
    /**
     * @return 后端服务器组中服务器的信息。
     * 
     */
    private List<GetServerGroupServer> servers;
    /**
     * @return 标签信息。
     * 
     */
    private List<GetServerGroupTag> tags;
    /**
     * @return 后端服务器组的类型。instance：表示该后端服务器组只能添加云服务器的主网卡或辅助网卡作为后端服务器。ip：表示该后端服务器组只能添加IP地址作为后端服务器。
     * 
     */
    private String type;
    /**
     * @return 后端服务器组的最近操作时间。
     * 
     */
    private String updateTime;

    private GetServerGroupResult() {}
    /**
     * @return 后端服务器组的IP地址类型。ipv4：后端服务器组为IPv4类型。ipv6：后端服务器组为IPv6类型。
     * 
     */
    public String addressIpVersion() {
        return this.addressIpVersion;
    }
    /**
     * @return 是否开启全端口转发。on：开启全端口转发。off：关闭全端口转发。
     * 
     */
    public String anyPortEnabled() {
        return this.anyPortEnabled;
    }
    /**
     * @return 后端服务器组的创建时间。
     * 
     */
    public String createTime() {
        return this.createTime;
    }
    /**
     * @return 后端服务器组的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个符。不填则默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 后端服务器组关联的监听器信息。
     * 
     */
    public List<GetServerGroupListener> listeners() {
        return this.listeners;
    }
    /**
     * @return 后端服务器组所属的CLB实例ID。
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return 后端服务器组的ID。
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return 后端服务器组的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。不填默认为后端服务器组ID。
     * 
     */
    public String serverGroupName() {
        return this.serverGroupName;
    }
    /**
     * @return 后端服务器组中服务器的信息。
     * 
     */
    public List<GetServerGroupServer> servers() {
        return this.servers;
    }
    /**
     * @return 标签信息。
     * 
     */
    public List<GetServerGroupTag> tags() {
        return this.tags;
    }
    /**
     * @return 后端服务器组的类型。instance：表示该后端服务器组只能添加云服务器的主网卡或辅助网卡作为后端服务器。ip：表示该后端服务器组只能添加IP地址作为后端服务器。
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return 后端服务器组的最近操作时间。
     * 
     */
    public String updateTime() {
        return this.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerGroupResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String addressIpVersion;
        private String anyPortEnabled;
        private String createTime;
        private String description;
        private String id;
        private List<GetServerGroupListener> listeners;
        private String loadBalancerId;
        private String serverGroupId;
        private String serverGroupName;
        private List<GetServerGroupServer> servers;
        private List<GetServerGroupTag> tags;
        private String type;
        private String updateTime;
        public Builder() {}
        public Builder(GetServerGroupResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.addressIpVersion = defaults.addressIpVersion;
    	      this.anyPortEnabled = defaults.anyPortEnabled;
    	      this.createTime = defaults.createTime;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.listeners = defaults.listeners;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.serverGroupName = defaults.serverGroupName;
    	      this.servers = defaults.servers;
    	      this.tags = defaults.tags;
    	      this.type = defaults.type;
    	      this.updateTime = defaults.updateTime;
        }

        @CustomType.Setter
        public Builder addressIpVersion(String addressIpVersion) {
            if (addressIpVersion == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "addressIpVersion");
            }
            this.addressIpVersion = addressIpVersion;
            return this;
        }
        @CustomType.Setter
        public Builder anyPortEnabled(String anyPortEnabled) {
            if (anyPortEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "anyPortEnabled");
            }
            this.anyPortEnabled = anyPortEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder createTime(String createTime) {
            if (createTime == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "createTime");
            }
            this.createTime = createTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder listeners(List<GetServerGroupListener> listeners) {
            if (listeners == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "listeners");
            }
            this.listeners = listeners;
            return this;
        }
        public Builder listeners(GetServerGroupListener... listeners) {
            return listeners(List.of(listeners));
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupName(String serverGroupName) {
            if (serverGroupName == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "serverGroupName");
            }
            this.serverGroupName = serverGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder servers(List<GetServerGroupServer> servers) {
            if (servers == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "servers");
            }
            this.servers = servers;
            return this;
        }
        public Builder servers(GetServerGroupServer... servers) {
            return servers(List.of(servers));
        }
        @CustomType.Setter
        public Builder tags(List<GetServerGroupTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetServerGroupTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder updateTime(String updateTime) {
            if (updateTime == null) {
              throw new MissingRequiredPropertyException("GetServerGroupResult", "updateTime");
            }
            this.updateTime = updateTime;
            return this;
        }
        public GetServerGroupResult build() {
            final var _resultValue = new GetServerGroupResult();
            _resultValue.addressIpVersion = addressIpVersion;
            _resultValue.anyPortEnabled = anyPortEnabled;
            _resultValue.createTime = createTime;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.listeners = listeners;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.serverGroupName = serverGroupName;
            _resultValue.servers = servers;
            _resultValue.tags = tags;
            _resultValue.type = type;
            _resultValue.updateTime = updateTime;
            return _resultValue;
        }
    }
}
