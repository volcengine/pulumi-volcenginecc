// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.redis;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.redis.InstanceArgs;
import com.volcengine.volcenginecc.redis.inputs.InstanceState;
import com.volcengine.volcenginecc.redis.outputs.InstanceCapacity;
import com.volcengine.volcenginecc.redis.outputs.InstanceConfigureNode;
import com.volcengine.volcenginecc.redis.outputs.InstanceInstanceShard;
import com.volcengine.volcenginecc.redis.outputs.InstanceTag;
import com.volcengine.volcenginecc.redis.outputs.InstanceVisitAddr;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * 缓存数据库 Redis 版的基本单位是实例。实例是独立的、虚拟化的数据库运行环境，是多个数据节点与代理节点的集合，数据节点上运行 Redis 引擎。
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.volcengine.volcenginecc.redis.Instance;
 * import com.volcengine.volcenginecc.redis.InstanceArgs;
 * import com.pulumi.volcenginecc.redis.inputs.InstanceTagArgs;
 * import com.pulumi.volcenginecc.redis.inputs.InstanceConfigureNodeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var redisInstanceDemo = new Instance("redisInstanceDemo", InstanceArgs.builder()
 *             .instanceName("RedisInstance")
 *             .shardedCluster(1)
 *             .password("********")
 *             .nodeNumber(2)
 *             .shardCapacity(512)
 *             .shardNumber(2)
 *             .engineVersion("5.0")
 *             .vpcId("vpc-13f8xxxx")
 *             .subnetId("vpc_subnet-xxxx")
 *             .deletionProtection("disabled")
 *             .chargeType("PostPaid")
 *             .port(6381)
 *             .projectName("default")
 *             .tags(InstanceTagArgs.builder()
 *                 .key("env")
 *                 .value("test")
 *                 .build())
 *             .multiAz("enabled")
 *             .configureNodes(            
 *                 InstanceConfigureNodeArgs.builder()
 *                     .az("cn-beijing-a")
 *                     .build(),
 *                 InstanceConfigureNodeArgs.builder()
 *                     .az("cn-beijing-b")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:redis/instance:Instance example &#34;instance_id&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:redis/instance:Instance")
public class Instance extends com.pulumi.resources.CustomResource {
    /**
     * 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
     * 
     */
    @Export(name="allowListIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> allowListIds;

    /**
     * @return 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
     * 
     */
    public Output<List<String>> allowListIds() {
        return this.allowListIds;
    }
    /**
     * 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
     * 
     */
    @Export(name="autoRenew", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> autoRenew;

    /**
     * @return 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
     * 
     */
    public Output<Boolean> autoRenew() {
        return this.autoRenew;
    }
    /**
     * 为变更前创建的全量备份设置备份名称。
     * 
     */
    @Export(name="backupPointName", refs={String.class}, tree="[0]")
    private Output<String> backupPointName;

    /**
     * @return 为变更前创建的全量备份设置备份名称。
     * 
     */
    public Output<String> backupPointName() {
        return this.backupPointName;
    }
    /**
     * 实例的容量信息。
     * 
     */
    @Export(name="capacity", refs={InstanceCapacity.class}, tree="[0]")
    private Output<InstanceCapacity> capacity;

    /**
     * @return 实例的容量信息。
     * 
     */
    public Output<InstanceCapacity> capacity() {
        return this.capacity;
    }
    /**
     * 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
     * 
     */
    @Export(name="chargeType", refs={String.class}, tree="[0]")
    private Output<String> chargeType;

    /**
     * @return 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
     * 
     */
    public Output<String> chargeType() {
        return this.chargeType;
    }
    @Export(name="configureNodes", refs={List.class,InstanceConfigureNode.class}, tree="[0,1]")
    private Output<List<InstanceConfigureNode>> configureNodes;

    public Output<List<InstanceConfigureNode>> configureNodes() {
        return this.configureNodes;
    }
    /**
     * 是否在变更前创建备份。
     * 
     */
    @Export(name="createBackup", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> createBackup;

    /**
     * @return 是否在变更前创建备份。
     * 
     */
    public Output<Boolean> createBackup() {
        return this.createBackup;
    }
    /**
     * 实例的创建时间。
     * 
     */
    @Export(name="createTime", refs={String.class}, tree="[0]")
    private Output<String> createTime;

    /**
     * @return 实例的创建时间。
     * 
     */
    public Output<String> createTime() {
        return this.createTime;
    }
    /**
     * 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
     * 
     */
    @Export(name="dataLayout", refs={String.class}, tree="[0]")
    private Output<String> dataLayout;

    /**
     * @return 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
     * 
     */
    public Output<String> dataLayout() {
        return this.dataLayout;
    }
    /**
     * 开启或关闭实例删除保护功能。
     * 
     */
    @Export(name="deletionProtection", refs={String.class}, tree="[0]")
    private Output<String> deletionProtection;

    /**
     * @return 开启或关闭实例删除保护功能。
     * 
     */
    public Output<String> deletionProtection() {
        return this.deletionProtection;
    }
    /**
     * 数据库版本号。
     * 
     */
    @Export(name="engineVersion", refs={String.class}, tree="[0]")
    private Output<String> engineVersion;

    /**
     * @return 数据库版本号。
     * 
     */
    public Output<String> engineVersion() {
        return this.engineVersion;
    }
    /**
     * 实例到期时间。
     * 
     */
    @Export(name="expiredTime", refs={String.class}, tree="[0]")
    private Output<String> expiredTime;

    /**
     * @return 实例到期时间。
     * 
     */
    public Output<String> expiredTime() {
        return this.expiredTime;
    }
    /**
     * Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
     * 
     */
    @Export(name="instanceClass", refs={String.class}, tree="[0]")
    private Output<String> instanceClass;

    /**
     * @return Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
     * 
     */
    public Output<String> instanceClass() {
        return this.instanceClass;
    }
    /**
     * 实例 ID。
     * 
     */
    @Export(name="instanceId", refs={String.class}, tree="[0]")
    private Output<String> instanceId;

    /**
     * @return 实例 ID。
     * 
     */
    public Output<String> instanceId() {
        return this.instanceId;
    }
    /**
     * 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
     * 
     */
    @Export(name="instanceName", refs={String.class}, tree="[0]")
    private Output<String> instanceName;

    /**
     * @return 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }
    @Export(name="instanceShards", refs={List.class,InstanceInstanceShard.class}, tree="[0,1]")
    private Output<List<InstanceInstanceShard>> instanceShards;

    public Output<List<InstanceInstanceShard>> instanceShards() {
        return this.instanceShards;
    }
    /**
     * 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
     * 
     */
    @Export(name="maintenanceTime", refs={String.class}, tree="[0]")
    private Output<String> maintenanceTime;

    /**
     * @return 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
     * 
     */
    public Output<String> maintenanceTime() {
        return this.maintenanceTime;
    }
    /**
     * 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
     * 
     */
    @Export(name="maxConnections", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxConnections;

    /**
     * @return 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
     * 
     */
    public Output<Integer> maxConnections() {
        return this.maxConnections;
    }
    /**
     * 设置实例的可用区部署方案。
     * 
     */
    @Export(name="multiAz", refs={String.class}, tree="[0]")
    private Output<String> multiAz;

    /**
     * @return 设置实例的可用区部署方案。
     * 
     */
    public Output<String> multiAz() {
        return this.multiAz;
    }
    /**
     * 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
     * 
     */
    @Export(name="noAuthMode", refs={String.class}, tree="[0]")
    private Output<String> noAuthMode;

    /**
     * @return 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
     * 
     */
    public Output<String> noAuthMode() {
        return this.noAuthMode;
    }
    /**
     * Proxy 和 Server 节点 ID 列表。
     * 
     */
    @Export(name="nodeIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> nodeIds;

    /**
     * @return Proxy 和 Server 节点 ID 列表。
     * 
     */
    public Output<List<String>> nodeIds() {
        return this.nodeIds;
    }
    /**
     * 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
     * 
     */
    @Export(name="nodeNumber", refs={Integer.class}, tree="[0]")
    private Output<Integer> nodeNumber;

    /**
     * @return 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
     * 
     */
    public Output<Integer> nodeNumber() {
        return this.nodeNumber;
    }
    /**
     * 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
     * 
     */
    @Export(name="parameterGroupId", refs={String.class}, tree="[0]")
    private Output<String> parameterGroupId;

    /**
     * @return 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
     * 
     */
    public Output<String> parameterGroupId() {
        return this.parameterGroupId;
    }
    /**
     * 设置默认数据库 default 账号的密码。
     * 
     */
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output<String> password;

    /**
     * @return 设置默认数据库 default 账号的密码。
     * 
     */
    public Output<String> password() {
        return this.password;
    }
    /**
     * 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * 实例私网连接地址的域名。
     * 
     */
    @Export(name="privateAddress", refs={String.class}, tree="[0]")
    private Output<String> privateAddress;

    /**
     * @return 实例私网连接地址的域名。
     * 
     */
    public Output<String> privateAddress() {
        return this.privateAddress;
    }
    /**
     * 实例所属的项目。
     * 
     */
    @Export(name="projectName", refs={String.class}, tree="[0]")
    private Output<String> projectName;

    /**
     * @return 实例所属的项目。
     * 
     */
    public Output<String> projectName() {
        return this.projectName;
    }
    /**
     * 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
     * 
     */
    @Export(name="purchaseMonths", refs={Integer.class}, tree="[0]")
    private Output<Integer> purchaseMonths;

    /**
     * @return 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
     * 
     */
    public Output<Integer> purchaseMonths() {
        return this.purchaseMonths;
    }
    /**
     * 设置是否保留额外带宽
     * 
     */
    @Export(name="reserveAdditionalBandwidth", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> reserveAdditionalBandwidth;

    /**
     * @return 设置是否保留额外带宽
     * 
     */
    public Output<Boolean> reserveAdditionalBandwidth() {
        return this.reserveAdditionalBandwidth;
    }
    /**
     * 实例的服务类型
     * 
     */
    @Export(name="serviceType", refs={String.class}, tree="[0]")
    private Output<String> serviceType;

    /**
     * @return 实例的服务类型
     * 
     */
    public Output<String> serviceType() {
        return this.serviceType;
    }
    /**
     * 实例中每个分片的内存容量。单位：MiB。
     * 
     */
    @Export(name="shardCapacity", refs={Integer.class}, tree="[0]")
    private Output<Integer> shardCapacity;

    /**
     * @return 实例中每个分片的内存容量。单位：MiB。
     * 
     */
    public Output<Integer> shardCapacity() {
        return this.shardCapacity;
    }
    /**
     * 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
     * 
     */
    @Export(name="shardNumber", refs={Integer.class}, tree="[0]")
    private Output<Integer> shardNumber;

    /**
     * @return 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
     * 
     */
    public Output<Integer> shardNumber() {
        return this.shardNumber;
    }
    /**
     * 是否启用分片集群。取值范围如下：0：不启用。1：启用。
     * 
     */
    @Export(name="shardedCluster", refs={Integer.class}, tree="[0]")
    private Output<Integer> shardedCluster;

    /**
     * @return 是否启用分片集群。取值范围如下：0：不启用。1：启用。
     * 
     */
    public Output<Integer> shardedCluster() {
        return this.shardedCluster;
    }
    /**
     * 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    /**
     * 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
     * 
     */
    @Export(name="subnetId", refs={String.class}, tree="[0]")
    private Output<String> subnetId;

    /**
     * @return 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
     * 
     */
    public Output<String> subnetId() {
        return this.subnetId;
    }
    @Export(name="tags", refs={List.class,InstanceTag.class}, tree="[0,1]")
    private Output<List<InstanceTag>> tags;

    public Output<List<InstanceTag>> tags() {
        return this.tags;
    }
    /**
     * 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
     * 
     */
    @Export(name="viPv6", refs={String.class}, tree="[0]")
    private Output<String> viPv6;

    /**
     * @return 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
     * 
     */
    public Output<String> viPv6() {
        return this.viPv6;
    }
    /**
     * 实例私网连接地址所对应的 IPv4 地址。
     * 
     */
    @Export(name="vip", refs={String.class}, tree="[0]")
    private Output<String> vip;

    /**
     * @return 实例私网连接地址所对应的 IPv4 地址。
     * 
     */
    public Output<String> vip() {
        return this.vip;
    }
    @Export(name="visitAddrs", refs={List.class,InstanceVisitAddr.class}, tree="[0,1]")
    private Output<List<InstanceVisitAddr>> visitAddrs;

    public Output<List<InstanceVisitAddr>> visitAddrs() {
        return this.visitAddrs;
    }
    /**
     * 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
     * 
     */
    @Export(name="vpcAuthMode", refs={String.class}, tree="[0]")
    private Output<String> vpcAuthMode;

    /**
     * @return 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
     * 
     */
    public Output<String> vpcAuthMode() {
        return this.vpcAuthMode;
    }
    /**
     * 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
     * 
     */
    @Export(name="vpcId", refs={String.class}, tree="[0]")
    private Output<String> vpcId;

    /**
     * @return 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
     * 
     */
    public Output<String> vpcId() {
        return this.vpcId;
    }
    /**
     * 实例所在的可用区列表。
     * 
     */
    @Export(name="zoneIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> zoneIds;

    /**
     * @return 实例所在的可用区列表。
     * 
     */
    public Output<List<String>> zoneIds() {
        return this.zoneIds;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Instance(java.lang.String name) {
        this(name, InstanceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Instance(java.lang.String name, InstanceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Instance(java.lang.String name, InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:redis/instance:Instance", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Instance(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:redis/instance:Instance", name, state, makeResourceOptions(options, id), false);
    }

    private static InstanceArgs makeArgs(InstanceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? InstanceArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Instance get(java.lang.String name, Output<java.lang.String> id, @Nullable InstanceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Instance(name, id, state, options);
    }
}
