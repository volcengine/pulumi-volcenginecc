// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.volcengine.volcenginecc.Utilities;
import com.volcengine.volcenginecc.clb.ListenerArgs;
import com.volcengine.volcenginecc.clb.inputs.ListenerState;
import com.volcengine.volcenginecc.clb.outputs.ListenerHealthCheck;
import com.volcengine.volcenginecc.clb.outputs.ListenerTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * 监听器负责根据指定的协议和端口，监听CLB实例接收到的用户访问请求。CLB将按照该监听器配置的调度算法，将访问请求转发至该后端服务器组内健康的后端服务器。
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * ```sh
 * $ pulumi import volcenginecc:clb/listener:Listener example &#34;listener_id&#34;
 * ```
 * 
 */
@ResourceType(type="volcenginecc:clb/listener:Listener")
public class Listener extends com.pulumi.resources.CustomResource {
    /**
     * 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     * 
     */
    @Export(name="aclIds", refs={List.class,String.class}, tree="[0,1]")
    private Output<List<String>> aclIds;

    /**
     * @return 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     * 
     */
    public Output<List<String>> aclIds() {
        return this.aclIds;
    }
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     * 
     */
    @Export(name="aclStatus", refs={String.class}, tree="[0]")
    private Output<String> aclStatus;

    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     * 
     */
    public Output<String> aclStatus() {
        return this.aclStatus;
    }
    /**
     * 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     * 
     */
    @Export(name="aclType", refs={String.class}, tree="[0]")
    private Output<String> aclType;

    /**
     * @return 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     * 
     */
    public Output<String> aclType() {
        return this.aclType;
    }
    /**
     * 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     * 
     */
    @Export(name="bandwidth", refs={Integer.class}, tree="[0]")
    private Output<Integer> bandwidth;

    /**
     * @return 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     * 
     */
    public Output<Integer> bandwidth() {
        return this.bandwidth;
    }
    /**
     * 双向认证的CA证书。
     * 
     */
    @Export(name="caCertificateId", refs={String.class}, tree="[0]")
    private Output<String> caCertificateId;

    /**
     * @return 双向认证的CA证书。
     * 
     */
    public Output<String> caCertificateId() {
        return this.caCertificateId;
    }
    /**
     * 是否开启双向认证。on：开启。off（默认值）：不开启。
     * 
     */
    @Export(name="caEnabled", refs={String.class}, tree="[0]")
    private Output<String> caEnabled;

    /**
     * @return 是否开启双向认证。on：开启。off（默认值）：不开启。
     * 
     */
    public Output<String> caEnabled() {
        return this.caEnabled;
    }
    /**
     * 证书中心的证书的ID。
     * 
     */
    @Export(name="certCenterCertificateId", refs={String.class}, tree="[0]")
    private Output<String> certCenterCertificateId;

    /**
     * @return 证书中心的证书的ID。
     * 
     */
    public Output<String> certCenterCertificateId() {
        return this.certCenterCertificateId;
    }
    /**
     * CLB侧证书管理模块的证书的ID。
     * 
     */
    @Export(name="certificateId", refs={String.class}, tree="[0]")
    private Output<String> certificateId;

    /**
     * @return CLB侧证书管理模块的证书的ID。
     * 
     */
    public Output<String> certificateId() {
        return this.certificateId;
    }
    /**
     * 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     * 
     */
    @Export(name="certificateSource", refs={String.class}, tree="[0]")
    private Output<String> certificateSource;

    /**
     * @return 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     * 
     */
    public Output<String> certificateSource() {
        return this.certificateSource;
    }
    /**
     * 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     * 
     */
    @Export(name="clientBodyTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> clientBodyTimeout;

    /**
     * @return 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     * 
     */
    public Output<Integer> clientBodyTimeout() {
        return this.clientBodyTimeout;
    }
    /**
     * 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Export(name="clientHeaderTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> clientHeaderTimeout;

    /**
     * @return 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Output<Integer> clientHeaderTimeout() {
        return this.clientHeaderTimeout;
    }
    /**
     * 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     * 
     */
    @Export(name="connectionDrainEnabled", refs={String.class}, tree="[0]")
    private Output<String> connectionDrainEnabled;

    /**
     * @return 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     * 
     */
    public Output<String> connectionDrainEnabled() {
        return this.connectionDrainEnabled;
    }
    /**
     * 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     * 
     */
    @Export(name="connectionDrainTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> connectionDrainTimeout;

    /**
     * @return 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     * 
     */
    public Output<Integer> connectionDrainTimeout() {
        return this.connectionDrainTimeout;
    }
    /**
     * 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     * 
     */
    @Export(name="cookie", refs={String.class}, tree="[0]")
    private Output<String> cookie;

    /**
     * @return 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     * 
     */
    public Output<String> cookie() {
        return this.cookie;
    }
    /**
     * 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     * 
     */
    @Export(name="cps", refs={Integer.class}, tree="[0]")
    private Output<Integer> cps;

    /**
     * @return 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     * 
     */
    public Output<Integer> cps() {
        return this.cps;
    }
    /**
     * 监听器的创建时间。
     * 
     */
    @Export(name="createdTime", refs={String.class}, tree="[0]")
    private Output<String> createdTime;

    /**
     * @return 监听器的创建时间。
     * 
     */
    public Output<String> createdTime() {
        return this.createdTime;
    }
    /**
     * 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output<String> description;

    /**
     * @return 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     * 
     */
    public Output<String> description() {
        return this.description;
    }
    /**
     * 是否启用监听器。on（默认值）：开启。off：不开启。
     * 
     */
    @Export(name="enabled", refs={String.class}, tree="[0]")
    private Output<String> enabled;

    /**
     * @return 是否启用监听器。on（默认值）：开启。off：不开启。
     * 
     */
    public Output<String> enabled() {
        return this.enabled;
    }
    /**
     * 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     * 
     */
    @Export(name="endPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> endPort;

    /**
     * @return 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     * 
     */
    public Output<Integer> endPort() {
        return this.endPort;
    }
    /**
     * 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     * 
     */
    @Export(name="establishedTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> establishedTimeout;

    /**
     * @return 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     * 
     */
    public Output<Integer> establishedTimeout() {
        return this.establishedTimeout;
    }
    /**
     * 健康检查相关信息。
     * 
     */
    @Export(name="healthCheck", refs={ListenerHealthCheck.class}, tree="[0]")
    private Output<ListenerHealthCheck> healthCheck;

    /**
     * @return 健康检查相关信息。
     * 
     */
    public Output<ListenerHealthCheck> healthCheck() {
        return this.healthCheck;
    }
    /**
     * 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     * 
     */
    @Export(name="http2Enabled", refs={String.class}, tree="[0]")
    private Output<String> http2Enabled;

    /**
     * @return 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     * 
     */
    public Output<String> http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Export(name="keepaliveTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> keepaliveTimeout;

    /**
     * @return 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Output<Integer> keepaliveTimeout() {
        return this.keepaliveTimeout;
    }
    /**
     * 监听器的ID。
     * 
     */
    @Export(name="listenerId", refs={String.class}, tree="[0]")
    private Output<String> listenerId;

    /**
     * @return 监听器的ID。
     * 
     */
    public Output<String> listenerId() {
        return this.listenerId;
    }
    /**
     * 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     * 
     */
    @Export(name="listenerName", refs={String.class}, tree="[0]")
    private Output<String> listenerName;

    /**
     * @return 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     * 
     */
    public Output<String> listenerName() {
        return this.listenerName;
    }
    /**
     * CLB实例的ID。
     * 
     */
    @Export(name="loadBalancerId", refs={String.class}, tree="[0]")
    private Output<String> loadBalancerId;

    /**
     * @return CLB实例的ID。
     * 
     */
    public Output<String> loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     * 
     */
    @Export(name="maxConnections", refs={Integer.class}, tree="[0]")
    private Output<Integer> maxConnections;

    /**
     * @return 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     * 
     */
    public Output<Integer> maxConnections() {
        return this.maxConnections;
    }
    /**
     * 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     * 
     */
    @Export(name="persistenceTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> persistenceTimeout;

    /**
     * @return 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     * 
     */
    public Output<Integer> persistenceTimeout() {
        return this.persistenceTimeout;
    }
    /**
     * 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     * 
     */
    @Export(name="persistenceType", refs={String.class}, tree="[0]")
    private Output<String> persistenceType;

    /**
     * @return 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     * 
     */
    public Output<String> persistenceType() {
        return this.persistenceType;
    }
    /**
     * 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     * 
     */
    @Export(name="port", refs={Integer.class}, tree="[0]")
    private Output<Integer> port;

    /**
     * @return 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }
    /**
     * 监听器的协议。
     * 
     */
    @Export(name="protocol", refs={String.class}, tree="[0]")
    private Output<String> protocol;

    /**
     * @return 监听器的协议。
     * 
     */
    public Output<String> protocol() {
        return this.protocol;
    }
    /**
     * CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Export(name="proxyConnectTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> proxyConnectTimeout;

    /**
     * @return CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Output<Integer> proxyConnectTimeout() {
        return this.proxyConnectTimeout;
    }
    /**
     * 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     * 
     */
    @Export(name="proxyProtocolType", refs={String.class}, tree="[0]")
    private Output<String> proxyProtocolType;

    /**
     * @return 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     * 
     */
    public Output<String> proxyProtocolType() {
        return this.proxyProtocolType;
    }
    /**
     * CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Export(name="proxyReadTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> proxyReadTimeout;

    /**
     * @return CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Output<Integer> proxyReadTimeout() {
        return this.proxyReadTimeout;
    }
    /**
     * CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Export(name="proxySendTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> proxySendTimeout;

    /**
     * @return CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Output<Integer> proxySendTimeout() {
        return this.proxySendTimeout;
    }
    /**
     * 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    @Export(name="scheduler", refs={String.class}, tree="[0]")
    private Output<String> scheduler;

    /**
     * @return 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    public Output<String> scheduler() {
        return this.scheduler;
    }
    /**
     * HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     * 
     */
    @Export(name="securityPolicyId", refs={String.class}, tree="[0]")
    private Output<String> securityPolicyId;

    /**
     * @return HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     * 
     */
    public Output<String> securityPolicyId() {
        return this.securityPolicyId;
    }
    /**
     * CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    @Export(name="sendTimeout", refs={Integer.class}, tree="[0]")
    private Output<Integer> sendTimeout;

    /**
     * @return CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Output<Integer> sendTimeout() {
        return this.sendTimeout;
    }
    /**
     * 监听器关联的后端服务器组 ID。
     * 
     */
    @Export(name="serverGroupId", refs={String.class}, tree="[0]")
    private Output<String> serverGroupId;

    /**
     * @return 监听器关联的后端服务器组 ID。
     * 
     */
    public Output<String> serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     * 
     */
    @Export(name="startPort", refs={Integer.class}, tree="[0]")
    private Output<Integer> startPort;

    /**
     * @return 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     * 
     */
    public Output<Integer> startPort() {
        return this.startPort;
    }
    /**
     * 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     * 
     */
    @Export(name="status", refs={String.class}, tree="[0]")
    private Output<String> status;

    /**
     * @return 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     * 
     */
    public Output<String> status() {
        return this.status;
    }
    @Export(name="tags", refs={List.class,ListenerTag.class}, tree="[0,1]")
    private Output<List<ListenerTag>> tags;

    public Output<List<ListenerTag>> tags() {
        return this.tags;
    }
    /**
     * 监听器最近一次的操作时间。
     * 
     */
    @Export(name="updatedTime", refs={String.class}, tree="[0]")
    private Output<String> updatedTime;

    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    public Output<String> updatedTime() {
        return this.updatedTime;
    }
    /**
     * 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     * 
     */
    @Export(name="wafProtectionEnabled", refs={String.class}, tree="[0]")
    private Output<String> wafProtectionEnabled;

    /**
     * @return 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     * 
     */
    public Output<String> wafProtectionEnabled() {
        return this.wafProtectionEnabled;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Listener(java.lang.String name) {
        this(name, ListenerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Listener(java.lang.String name, ListenerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Listener(java.lang.String name, ListenerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:clb/listener:Listener", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Listener(java.lang.String name, Output<java.lang.String> id, @Nullable ListenerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("volcenginecc:clb/listener:Listener", name, state, makeResourceOptions(options, id), false);
    }

    private static ListenerArgs makeArgs(ListenerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? ListenerArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .pluginDownloadURL("github://api.github.com/volcengine")
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Listener get(java.lang.String name, Output<java.lang.String> id, @Nullable ListenerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Listener(name, id, state, options);
    }
}
