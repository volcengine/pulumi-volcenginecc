// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstancePlacementArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstancePlacementArgs Empty = new InstancePlacementArgs();

    /**
     * 针对节省停机模式的ECS实例，停止后会释放部分资源，本参数用于查看ECS实例重新启动时是否仍固定部署在原宿主机上。取值：Host：启用节省停机模式的实例重新启动时，仍会部署在原宿主机上。Default（默认）：启用节省停机模式的实例重新启动时，会优先迁移到支持自动部署的宿主机；若支持自动部署的宿主机资源不足，则在原宿主机上进行启动。
     * 
     */
    @Import(name="affinity")
    private @Nullable Output<String> affinity;

    /**
     * @return 针对节省停机模式的ECS实例，停止后会释放部分资源，本参数用于查看ECS实例重新启动时是否仍固定部署在原宿主机上。取值：Host：启用节省停机模式的实例重新启动时，仍会部署在原宿主机上。Default（默认）：启用节省停机模式的实例重新启动时，会优先迁移到支持自动部署的宿主机；若支持自动部署的宿主机资源不足，则在原宿主机上进行启动。
     * 
     */
    public Optional<Output<String>> affinity() {
        return Optional.ofNullable(this.affinity);
    }

    /**
     * 实例的专用主机集群ID。
     * 
     */
    @Import(name="dedicatedHostClusterId")
    private @Nullable Output<String> dedicatedHostClusterId;

    /**
     * @return 实例的专用主机集群ID。
     * 
     */
    public Optional<Output<String>> dedicatedHostClusterId() {
        return Optional.ofNullable(this.dedicatedHostClusterId);
    }

    /**
     * 实例的专用主机ID。
     * 
     */
    @Import(name="dedicatedHostId")
    private @Nullable Output<String> dedicatedHostId;

    /**
     * @return 实例的专用主机ID。
     * 
     */
    public Optional<Output<String>> dedicatedHostId() {
        return Optional.ofNullable(this.dedicatedHostId);
    }

    /**
     * 是否在专有宿主机上创建实例，取值：Default（默认）：创建普通云服务器实例。Host：创建专有宿主机实例。若您不指定DedicatedHostId，则由系统自动选择专有宿主机放置实例
     * 
     */
    @Import(name="tenancy")
    private @Nullable Output<String> tenancy;

    /**
     * @return 是否在专有宿主机上创建实例，取值：Default（默认）：创建普通云服务器实例。Host：创建专有宿主机实例。若您不指定DedicatedHostId，则由系统自动选择专有宿主机放置实例
     * 
     */
    public Optional<Output<String>> tenancy() {
        return Optional.ofNullable(this.tenancy);
    }

    private InstancePlacementArgs() {}

    private InstancePlacementArgs(InstancePlacementArgs $) {
        this.affinity = $.affinity;
        this.dedicatedHostClusterId = $.dedicatedHostClusterId;
        this.dedicatedHostId = $.dedicatedHostId;
        this.tenancy = $.tenancy;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstancePlacementArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstancePlacementArgs $;

        public Builder() {
            $ = new InstancePlacementArgs();
        }

        public Builder(InstancePlacementArgs defaults) {
            $ = new InstancePlacementArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param affinity 针对节省停机模式的ECS实例，停止后会释放部分资源，本参数用于查看ECS实例重新启动时是否仍固定部署在原宿主机上。取值：Host：启用节省停机模式的实例重新启动时，仍会部署在原宿主机上。Default（默认）：启用节省停机模式的实例重新启动时，会优先迁移到支持自动部署的宿主机；若支持自动部署的宿主机资源不足，则在原宿主机上进行启动。
         * 
         * @return builder
         * 
         */
        public Builder affinity(@Nullable Output<String> affinity) {
            $.affinity = affinity;
            return this;
        }

        /**
         * @param affinity 针对节省停机模式的ECS实例，停止后会释放部分资源，本参数用于查看ECS实例重新启动时是否仍固定部署在原宿主机上。取值：Host：启用节省停机模式的实例重新启动时，仍会部署在原宿主机上。Default（默认）：启用节省停机模式的实例重新启动时，会优先迁移到支持自动部署的宿主机；若支持自动部署的宿主机资源不足，则在原宿主机上进行启动。
         * 
         * @return builder
         * 
         */
        public Builder affinity(String affinity) {
            return affinity(Output.of(affinity));
        }

        /**
         * @param dedicatedHostClusterId 实例的专用主机集群ID。
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostClusterId(@Nullable Output<String> dedicatedHostClusterId) {
            $.dedicatedHostClusterId = dedicatedHostClusterId;
            return this;
        }

        /**
         * @param dedicatedHostClusterId 实例的专用主机集群ID。
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostClusterId(String dedicatedHostClusterId) {
            return dedicatedHostClusterId(Output.of(dedicatedHostClusterId));
        }

        /**
         * @param dedicatedHostId 实例的专用主机ID。
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(@Nullable Output<String> dedicatedHostId) {
            $.dedicatedHostId = dedicatedHostId;
            return this;
        }

        /**
         * @param dedicatedHostId 实例的专用主机ID。
         * 
         * @return builder
         * 
         */
        public Builder dedicatedHostId(String dedicatedHostId) {
            return dedicatedHostId(Output.of(dedicatedHostId));
        }

        /**
         * @param tenancy 是否在专有宿主机上创建实例，取值：Default（默认）：创建普通云服务器实例。Host：创建专有宿主机实例。若您不指定DedicatedHostId，则由系统自动选择专有宿主机放置实例
         * 
         * @return builder
         * 
         */
        public Builder tenancy(@Nullable Output<String> tenancy) {
            $.tenancy = tenancy;
            return this;
        }

        /**
         * @param tenancy 是否在专有宿主机上创建实例，取值：Default（默认）：创建普通云服务器实例。Host：创建专有宿主机实例。若您不指定DedicatedHostId，则由系统自动选择专有宿主机放置实例
         * 
         * @return builder
         * 
         */
        public Builder tenancy(String tenancy) {
            return tenancy(Output.of(tenancy));
        }

        public InstancePlacementArgs build() {
            return $;
        }
    }

}
