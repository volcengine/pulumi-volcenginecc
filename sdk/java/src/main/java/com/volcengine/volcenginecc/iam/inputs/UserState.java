// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.iam.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.iam.inputs.UserLoginProfileArgs;
import com.volcengine.volcenginecc.iam.inputs.UserPolicyArgs;
import com.volcengine.volcenginecc.iam.inputs.UserSecurityConfigArgs;
import com.volcengine.volcenginecc.iam.inputs.UserTagArgs;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserState extends com.pulumi.resources.ResourceArgs {

    public static final UserState Empty = new UserState();

    /**
     * 子用户归属的主账号。
     * 
     */
    @Import(name="accountId")
    private @Nullable Output<Double> accountId;

    /**
     * @return 子用户归属的主账号。
     * 
     */
    public Optional<Output<Double>> accountId() {
        return Optional.ofNullable(this.accountId);
    }

    /**
     * 子用户对应的创建时间。
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return 子用户对应的创建时间。
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * 子用户对应的描述信息，长度不超过255。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 子用户对应的描述信息，长度不超过255。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_{@literal @}符号。
     * 
     */
    @Import(name="displayName")
    private @Nullable Output<String> displayName;

    /**
     * @return 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_{@literal @}符号。
     * 
     */
    public Optional<Output<String>> displayName() {
        return Optional.ofNullable(this.displayName);
    }

    /**
     * 子用户对应的电子邮件地址。
     * 
     */
    @Import(name="email")
    private @Nullable Output<String> email;

    /**
     * @return 子用户对应的电子邮件地址。
     * 
     */
    public Optional<Output<String>> email() {
        return Optional.ofNullable(this.email);
    }

    /**
     * 子用户归属的用户组。
     * 
     */
    @Import(name="groups")
    private @Nullable Output<List<String>> groups;

    /**
     * @return 子用户归属的用户组。
     * 
     */
    public Optional<Output<List<String>>> groups() {
        return Optional.ofNullable(this.groups);
    }

    /**
     * 子用户的登录配置。
     * 
     */
    @Import(name="loginProfile")
    private @Nullable Output<UserLoginProfileArgs> loginProfile;

    /**
     * @return 子用户的登录配置。
     * 
     */
    public Optional<Output<UserLoginProfileArgs>> loginProfile() {
        return Optional.ofNullable(this.loginProfile);
    }

    /**
     * 子用户对应的手机号。
     * 
     */
    @Import(name="mobilePhone")
    private @Nullable Output<String> mobilePhone;

    /**
     * @return 子用户对应的手机号。
     * 
     */
    public Optional<Output<String>> mobilePhone() {
        return Optional.ofNullable(this.mobilePhone);
    }

    @Import(name="policies")
    private @Nullable Output<List<UserPolicyArgs>> policies;

    public Optional<Output<List<UserPolicyArgs>>> policies() {
        return Optional.ofNullable(this.policies);
    }

    /**
     * 子用户的操作保护配置。
     * 
     */
    @Import(name="securityConfig")
    private @Nullable Output<UserSecurityConfigArgs> securityConfig;

    /**
     * @return 子用户的操作保护配置。
     * 
     */
    public Optional<Output<UserSecurityConfigArgs>> securityConfig() {
        return Optional.ofNullable(this.securityConfig);
    }

    @Import(name="tags")
    private @Nullable Output<List<UserTagArgs>> tags;

    public Optional<Output<List<UserTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * 子用户对应的Trn表达式。
     * 
     */
    @Import(name="trn")
    private @Nullable Output<String> trn;

    /**
     * @return 子用户对应的Trn表达式。
     * 
     */
    public Optional<Output<String>> trn() {
        return Optional.ofNullable(this.trn);
    }

    /**
     * 子用户对应的更新时间。
     * 
     */
    @Import(name="updateDate")
    private @Nullable Output<String> updateDate;

    /**
     * @return 子用户对应的更新时间。
     * 
     */
    public Optional<Output<String>> updateDate() {
        return Optional.ofNullable(this.updateDate);
    }

    /**
     * 子用户的ID。
     * 
     */
    @Import(name="userId")
    private @Nullable Output<Integer> userId;

    /**
     * @return 子用户的ID。
     * 
     */
    public Optional<Output<Integer>> userId() {
        return Optional.ofNullable(this.userId);
    }

    /**
     * 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-{@literal @}符号。
     * 
     */
    @Import(name="userName")
    private @Nullable Output<String> userName;

    /**
     * @return 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-{@literal @}符号。
     * 
     */
    public Optional<Output<String>> userName() {
        return Optional.ofNullable(this.userName);
    }

    private UserState() {}

    private UserState(UserState $) {
        this.accountId = $.accountId;
        this.createDate = $.createDate;
        this.description = $.description;
        this.displayName = $.displayName;
        this.email = $.email;
        this.groups = $.groups;
        this.loginProfile = $.loginProfile;
        this.mobilePhone = $.mobilePhone;
        this.policies = $.policies;
        this.securityConfig = $.securityConfig;
        this.tags = $.tags;
        this.trn = $.trn;
        this.updateDate = $.updateDate;
        this.userId = $.userId;
        this.userName = $.userName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserState $;

        public Builder() {
            $ = new UserState();
        }

        public Builder(UserState defaults) {
            $ = new UserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountId 子用户归属的主账号。
         * 
         * @return builder
         * 
         */
        public Builder accountId(@Nullable Output<Double> accountId) {
            $.accountId = accountId;
            return this;
        }

        /**
         * @param accountId 子用户归属的主账号。
         * 
         * @return builder
         * 
         */
        public Builder accountId(Double accountId) {
            return accountId(Output.of(accountId));
        }

        /**
         * @param createDate 子用户对应的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate 子用户对应的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param description 子用户对应的描述信息，长度不超过255。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 子用户对应的描述信息，长度不超过255。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param displayName 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_{@literal @}符号。
         * 
         * @return builder
         * 
         */
        public Builder displayName(@Nullable Output<String> displayName) {
            $.displayName = displayName;
            return this;
        }

        /**
         * @param displayName 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_{@literal @}符号。
         * 
         * @return builder
         * 
         */
        public Builder displayName(String displayName) {
            return displayName(Output.of(displayName));
        }

        /**
         * @param email 子用户对应的电子邮件地址。
         * 
         * @return builder
         * 
         */
        public Builder email(@Nullable Output<String> email) {
            $.email = email;
            return this;
        }

        /**
         * @param email 子用户对应的电子邮件地址。
         * 
         * @return builder
         * 
         */
        public Builder email(String email) {
            return email(Output.of(email));
        }

        /**
         * @param groups 子用户归属的用户组。
         * 
         * @return builder
         * 
         */
        public Builder groups(@Nullable Output<List<String>> groups) {
            $.groups = groups;
            return this;
        }

        /**
         * @param groups 子用户归属的用户组。
         * 
         * @return builder
         * 
         */
        public Builder groups(List<String> groups) {
            return groups(Output.of(groups));
        }

        /**
         * @param groups 子用户归属的用户组。
         * 
         * @return builder
         * 
         */
        public Builder groups(String... groups) {
            return groups(List.of(groups));
        }

        /**
         * @param loginProfile 子用户的登录配置。
         * 
         * @return builder
         * 
         */
        public Builder loginProfile(@Nullable Output<UserLoginProfileArgs> loginProfile) {
            $.loginProfile = loginProfile;
            return this;
        }

        /**
         * @param loginProfile 子用户的登录配置。
         * 
         * @return builder
         * 
         */
        public Builder loginProfile(UserLoginProfileArgs loginProfile) {
            return loginProfile(Output.of(loginProfile));
        }

        /**
         * @param mobilePhone 子用户对应的手机号。
         * 
         * @return builder
         * 
         */
        public Builder mobilePhone(@Nullable Output<String> mobilePhone) {
            $.mobilePhone = mobilePhone;
            return this;
        }

        /**
         * @param mobilePhone 子用户对应的手机号。
         * 
         * @return builder
         * 
         */
        public Builder mobilePhone(String mobilePhone) {
            return mobilePhone(Output.of(mobilePhone));
        }

        public Builder policies(@Nullable Output<List<UserPolicyArgs>> policies) {
            $.policies = policies;
            return this;
        }

        public Builder policies(List<UserPolicyArgs> policies) {
            return policies(Output.of(policies));
        }

        public Builder policies(UserPolicyArgs... policies) {
            return policies(List.of(policies));
        }

        /**
         * @param securityConfig 子用户的操作保护配置。
         * 
         * @return builder
         * 
         */
        public Builder securityConfig(@Nullable Output<UserSecurityConfigArgs> securityConfig) {
            $.securityConfig = securityConfig;
            return this;
        }

        /**
         * @param securityConfig 子用户的操作保护配置。
         * 
         * @return builder
         * 
         */
        public Builder securityConfig(UserSecurityConfigArgs securityConfig) {
            return securityConfig(Output.of(securityConfig));
        }

        public Builder tags(@Nullable Output<List<UserTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<UserTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(UserTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param trn 子用户对应的Trn表达式。
         * 
         * @return builder
         * 
         */
        public Builder trn(@Nullable Output<String> trn) {
            $.trn = trn;
            return this;
        }

        /**
         * @param trn 子用户对应的Trn表达式。
         * 
         * @return builder
         * 
         */
        public Builder trn(String trn) {
            return trn(Output.of(trn));
        }

        /**
         * @param updateDate 子用户对应的更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateDate(@Nullable Output<String> updateDate) {
            $.updateDate = updateDate;
            return this;
        }

        /**
         * @param updateDate 子用户对应的更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateDate(String updateDate) {
            return updateDate(Output.of(updateDate));
        }

        /**
         * @param userId 子用户的ID。
         * 
         * @return builder
         * 
         */
        public Builder userId(@Nullable Output<Integer> userId) {
            $.userId = userId;
            return this;
        }

        /**
         * @param userId 子用户的ID。
         * 
         * @return builder
         * 
         */
        public Builder userId(Integer userId) {
            return userId(Output.of(userId));
        }

        /**
         * @param userName 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-{@literal @}符号。
         * 
         * @return builder
         * 
         */
        public Builder userName(@Nullable Output<String> userName) {
            $.userName = userName;
            return this;
        }

        /**
         * @param userName 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-{@literal @}符号。
         * 
         * @return builder
         * 
         */
        public Builder userName(String userName) {
            return userName(Output.of(userName));
        }

        public UserState build() {
            return $;
        }
    }

}
