// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetRuleRedirectConfig {
    /**
     * @return 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
     * 
     */
    private String host;
    /**
     * @return 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&amp;’、‘＝’等字符。长度限制为1 ～ 128个字符。
     * 
     */
    private String path;
    /**
     * @return 转发规则重定向的端口，取值范围为 1~65535。
     * 
     */
    private String port;
    /**
     * @return 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
     * 
     */
    private String protocol;
    /**
     * @return 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
     * 
     */
    private String statusCode;

    private GetRuleRedirectConfig() {}
    /**
     * @return 转发规则重定向的域名，当前仅支持精确域名。规范如下：需至少包含一个‘.’，且不允许以‘.’开头或结尾。仅允许包含字母、数字、‘.’、‘-‘。长度限制为1 ～ 128个字符。符合域名规范的精确域名，例如：www.test.com。
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return 转发规则重定向的路径。规范如下：必须以正斜线“/”开头，字符‘/’不能连续出现。仅允许包含字母、数字、‘-’、‘_’、‘/’、‘.’、‘%’、‘?’、‘#’、‘&amp;’、‘＝’等字符。长度限制为1 ～ 128个字符。
     * 
     */
    public String path() {
        return this.path;
    }
    /**
     * @return 转发规则重定向的端口，取值范围为 1~65535。
     * 
     */
    public String port() {
        return this.port;
    }
    /**
     * @return 转发规则重定向的协议。取值如下：HTTP。HTTPS（默认值）。
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return 转发规则重定向的状态码。取值如下：301（默认）：表示请求的资源已被永久移动到新的 URL，客户端应该使用新的 URL 进行后续请求。302：表示请求的资源被临时移动到新的 URL，但未来可能会再次更改，客户端应该使用新的 URL 进行后续请求。307：与 302 类似，但在重定向时要求客户端保持请求方法不变。例如，原来是 GET 请求，则重定向后仍然是 GET 请求。308：与 301 类似，但在重定向时要求客户端保持请求方法不变。
     * 
     */
    public String statusCode() {
        return this.statusCode;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRuleRedirectConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String host;
        private String path;
        private String port;
        private String protocol;
        private String statusCode;
        public Builder() {}
        public Builder(GetRuleRedirectConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.path = defaults.path;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.statusCode = defaults.statusCode;
        }

        @CustomType.Setter
        public Builder host(String host) {
            if (host == null) {
              throw new MissingRequiredPropertyException("GetRuleRedirectConfig", "host");
            }
            this.host = host;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetRuleRedirectConfig", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder port(String port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetRuleRedirectConfig", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetRuleRedirectConfig", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder statusCode(String statusCode) {
            if (statusCode == null) {
              throw new MissingRequiredPropertyException("GetRuleRedirectConfig", "statusCode");
            }
            this.statusCode = statusCode;
            return this;
        }
        public GetRuleRedirectConfig build() {
            final var _resultValue = new GetRuleRedirectConfig();
            _resultValue.host = host;
            _resultValue.path = path;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.statusCode = statusCode;
            return _resultValue;
        }
    }
}
