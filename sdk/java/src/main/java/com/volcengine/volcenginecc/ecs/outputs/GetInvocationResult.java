// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.ecs.outputs.GetInvocationInvocationResult;
import com.volcengine.volcenginecc.ecs.outputs.GetInvocationParameterDefinition;
import com.volcengine.volcenginecc.ecs.outputs.GetInvocationTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetInvocationResult {
    /**
     * @return 命令内容。
     * 
     */
    private String commandContent;
    /**
     * @return 被调用命令的描述。
     * 
     */
    private String commandDescription;
    /**
     * @return 命令ID。
     * 
     */
    private String commandId;
    /**
     * @return 任务触发时的命令名称。
     * 
     */
    private String commandName;
    /**
     * @return 被调用命令的提供方。
     * 
     */
    private String commandProvider;
    /**
     * @return 作业触发的命令类型。
     * 
     */
    private String commandType;
    /**
     * @return 被调用命令是否使用自定义参数。true：已启用。false：未启用。
     * 
     */
    private Boolean enableParameter;
    /**
     * @return 任务结束时间。
     * 
     */
    private String endTime;
    /**
     * @return 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
     * 
     */
    private String frequency;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 实例ID列表，最多支持200个ID。
     * 
     */
    private List<String> instanceIds;
    /**
     * @return 执行实例数量。
     * 
     */
    private Integer instanceNumber;
    /**
     * @return 作业描述，默认为空字符串，不超过256个字符。
     * 
     */
    private String invocationDescription;
    /**
     * @return 任务执行 ID。
     * 
     */
    private String invocationId;
    /**
     * @return 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
     * 
     */
    private String invocationName;
    /**
     * @return 单台实例执行命令的结果。
     * 
     */
    private List<GetInvocationInvocationResult> invocationResults;
    /**
     * @return 命令执行的总执行状态。
     * 
     */
    private String invocationStatus;
    /**
     * @return 执行时间。
     * 
     */
    private String launchTime;
    private List<GetInvocationParameterDefinition> parameterDefinitions;
    /**
     * @return 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
     * 
     */
    private String parameters;
    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    private String projectName;
    /**
     * @return 周期结束时间，仅适用于周期任务（Rate）。
     * 
     */
    private String recurrenceEndTime;
    /**
     * @return 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
     * 
     */
    private String repeatMode;
    /**
     * @return 任务开始时间。
     * 
     */
    private String startTime;
    private List<GetInvocationTag> tags;
    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
     * 
     */
    private Integer timeout;
    /**
     * @return 在ECS实例中执行命令的用户名称。
     * 
     */
    private String username;
    /**
     * @return 自定义windows用户的密码。
     * 
     */
    private String windowsPassword;
    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    private String workingDir;

    private GetInvocationResult() {}
    /**
     * @return 命令内容。
     * 
     */
    public String commandContent() {
        return this.commandContent;
    }
    /**
     * @return 被调用命令的描述。
     * 
     */
    public String commandDescription() {
        return this.commandDescription;
    }
    /**
     * @return 命令ID。
     * 
     */
    public String commandId() {
        return this.commandId;
    }
    /**
     * @return 任务触发时的命令名称。
     * 
     */
    public String commandName() {
        return this.commandName;
    }
    /**
     * @return 被调用命令的提供方。
     * 
     */
    public String commandProvider() {
        return this.commandProvider;
    }
    /**
     * @return 作业触发的命令类型。
     * 
     */
    public String commandType() {
        return this.commandType;
    }
    /**
     * @return 被调用命令是否使用自定义参数。true：已启用。false：未启用。
     * 
     */
    public Boolean enableParameter() {
        return this.enableParameter;
    }
    /**
     * @return 任务结束时间。
     * 
     */
    public String endTime() {
        return this.endTime;
    }
    /**
     * @return 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
     * 
     */
    public String frequency() {
        return this.frequency;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 实例ID列表，最多支持200个ID。
     * 
     */
    public List<String> instanceIds() {
        return this.instanceIds;
    }
    /**
     * @return 执行实例数量。
     * 
     */
    public Integer instanceNumber() {
        return this.instanceNumber;
    }
    /**
     * @return 作业描述，默认为空字符串，不超过256个字符。
     * 
     */
    public String invocationDescription() {
        return this.invocationDescription;
    }
    /**
     * @return 任务执行 ID。
     * 
     */
    public String invocationId() {
        return this.invocationId;
    }
    /**
     * @return 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
     * 
     */
    public String invocationName() {
        return this.invocationName;
    }
    /**
     * @return 单台实例执行命令的结果。
     * 
     */
    public List<GetInvocationInvocationResult> invocationResults() {
        return this.invocationResults;
    }
    /**
     * @return 命令执行的总执行状态。
     * 
     */
    public String invocationStatus() {
        return this.invocationStatus;
    }
    /**
     * @return 执行时间。
     * 
     */
    public String launchTime() {
        return this.launchTime;
    }
    public List<GetInvocationParameterDefinition> parameterDefinitions() {
        return this.parameterDefinitions;
    }
    /**
     * @return 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
     * 
     */
    public String parameters() {
        return this.parameters;
    }
    /**
     * @return 资源所属项目，一个资源只能归属于一个项目。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return 周期结束时间，仅适用于周期任务（Rate）。
     * 
     */
    public String recurrenceEndTime() {
        return this.recurrenceEndTime;
    }
    /**
     * @return 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
     * 
     */
    public String repeatMode() {
        return this.repeatMode;
    }
    /**
     * @return 任务开始时间。
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    public List<GetInvocationTag> tags() {
        return this.tags;
    }
    /**
     * @return 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
     * 
     */
    public Integer timeout() {
        return this.timeout;
    }
    /**
     * @return 在ECS实例中执行命令的用户名称。
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return 自定义windows用户的密码。
     * 
     */
    public String windowsPassword() {
        return this.windowsPassword;
    }
    /**
     * @return 创建的命令在ECS实例中运行的目录。
     * 
     */
    public String workingDir() {
        return this.workingDir;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInvocationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String commandContent;
        private String commandDescription;
        private String commandId;
        private String commandName;
        private String commandProvider;
        private String commandType;
        private Boolean enableParameter;
        private String endTime;
        private String frequency;
        private String id;
        private List<String> instanceIds;
        private Integer instanceNumber;
        private String invocationDescription;
        private String invocationId;
        private String invocationName;
        private List<GetInvocationInvocationResult> invocationResults;
        private String invocationStatus;
        private String launchTime;
        private List<GetInvocationParameterDefinition> parameterDefinitions;
        private String parameters;
        private String projectName;
        private String recurrenceEndTime;
        private String repeatMode;
        private String startTime;
        private List<GetInvocationTag> tags;
        private Integer timeout;
        private String username;
        private String windowsPassword;
        private String workingDir;
        public Builder() {}
        public Builder(GetInvocationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.commandContent = defaults.commandContent;
    	      this.commandDescription = defaults.commandDescription;
    	      this.commandId = defaults.commandId;
    	      this.commandName = defaults.commandName;
    	      this.commandProvider = defaults.commandProvider;
    	      this.commandType = defaults.commandType;
    	      this.enableParameter = defaults.enableParameter;
    	      this.endTime = defaults.endTime;
    	      this.frequency = defaults.frequency;
    	      this.id = defaults.id;
    	      this.instanceIds = defaults.instanceIds;
    	      this.instanceNumber = defaults.instanceNumber;
    	      this.invocationDescription = defaults.invocationDescription;
    	      this.invocationId = defaults.invocationId;
    	      this.invocationName = defaults.invocationName;
    	      this.invocationResults = defaults.invocationResults;
    	      this.invocationStatus = defaults.invocationStatus;
    	      this.launchTime = defaults.launchTime;
    	      this.parameterDefinitions = defaults.parameterDefinitions;
    	      this.parameters = defaults.parameters;
    	      this.projectName = defaults.projectName;
    	      this.recurrenceEndTime = defaults.recurrenceEndTime;
    	      this.repeatMode = defaults.repeatMode;
    	      this.startTime = defaults.startTime;
    	      this.tags = defaults.tags;
    	      this.timeout = defaults.timeout;
    	      this.username = defaults.username;
    	      this.windowsPassword = defaults.windowsPassword;
    	      this.workingDir = defaults.workingDir;
        }

        @CustomType.Setter
        public Builder commandContent(String commandContent) {
            if (commandContent == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "commandContent");
            }
            this.commandContent = commandContent;
            return this;
        }
        @CustomType.Setter
        public Builder commandDescription(String commandDescription) {
            if (commandDescription == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "commandDescription");
            }
            this.commandDescription = commandDescription;
            return this;
        }
        @CustomType.Setter
        public Builder commandId(String commandId) {
            if (commandId == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "commandId");
            }
            this.commandId = commandId;
            return this;
        }
        @CustomType.Setter
        public Builder commandName(String commandName) {
            if (commandName == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "commandName");
            }
            this.commandName = commandName;
            return this;
        }
        @CustomType.Setter
        public Builder commandProvider(String commandProvider) {
            if (commandProvider == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "commandProvider");
            }
            this.commandProvider = commandProvider;
            return this;
        }
        @CustomType.Setter
        public Builder commandType(String commandType) {
            if (commandType == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "commandType");
            }
            this.commandType = commandType;
            return this;
        }
        @CustomType.Setter
        public Builder enableParameter(Boolean enableParameter) {
            if (enableParameter == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "enableParameter");
            }
            this.enableParameter = enableParameter;
            return this;
        }
        @CustomType.Setter
        public Builder endTime(String endTime) {
            if (endTime == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "endTime");
            }
            this.endTime = endTime;
            return this;
        }
        @CustomType.Setter
        public Builder frequency(String frequency) {
            if (frequency == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "frequency");
            }
            this.frequency = frequency;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceIds(List<String> instanceIds) {
            if (instanceIds == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "instanceIds");
            }
            this.instanceIds = instanceIds;
            return this;
        }
        public Builder instanceIds(String... instanceIds) {
            return instanceIds(List.of(instanceIds));
        }
        @CustomType.Setter
        public Builder instanceNumber(Integer instanceNumber) {
            if (instanceNumber == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "instanceNumber");
            }
            this.instanceNumber = instanceNumber;
            return this;
        }
        @CustomType.Setter
        public Builder invocationDescription(String invocationDescription) {
            if (invocationDescription == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "invocationDescription");
            }
            this.invocationDescription = invocationDescription;
            return this;
        }
        @CustomType.Setter
        public Builder invocationId(String invocationId) {
            if (invocationId == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "invocationId");
            }
            this.invocationId = invocationId;
            return this;
        }
        @CustomType.Setter
        public Builder invocationName(String invocationName) {
            if (invocationName == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "invocationName");
            }
            this.invocationName = invocationName;
            return this;
        }
        @CustomType.Setter
        public Builder invocationResults(List<GetInvocationInvocationResult> invocationResults) {
            if (invocationResults == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "invocationResults");
            }
            this.invocationResults = invocationResults;
            return this;
        }
        public Builder invocationResults(GetInvocationInvocationResult... invocationResults) {
            return invocationResults(List.of(invocationResults));
        }
        @CustomType.Setter
        public Builder invocationStatus(String invocationStatus) {
            if (invocationStatus == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "invocationStatus");
            }
            this.invocationStatus = invocationStatus;
            return this;
        }
        @CustomType.Setter
        public Builder launchTime(String launchTime) {
            if (launchTime == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "launchTime");
            }
            this.launchTime = launchTime;
            return this;
        }
        @CustomType.Setter
        public Builder parameterDefinitions(List<GetInvocationParameterDefinition> parameterDefinitions) {
            if (parameterDefinitions == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "parameterDefinitions");
            }
            this.parameterDefinitions = parameterDefinitions;
            return this;
        }
        public Builder parameterDefinitions(GetInvocationParameterDefinition... parameterDefinitions) {
            return parameterDefinitions(List.of(parameterDefinitions));
        }
        @CustomType.Setter
        public Builder parameters(String parameters) {
            if (parameters == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "parameters");
            }
            this.parameters = parameters;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder recurrenceEndTime(String recurrenceEndTime) {
            if (recurrenceEndTime == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "recurrenceEndTime");
            }
            this.recurrenceEndTime = recurrenceEndTime;
            return this;
        }
        @CustomType.Setter
        public Builder repeatMode(String repeatMode) {
            if (repeatMode == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "repeatMode");
            }
            this.repeatMode = repeatMode;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetInvocationTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetInvocationTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            if (timeout == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "timeout");
            }
            this.timeout = timeout;
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            if (username == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "username");
            }
            this.username = username;
            return this;
        }
        @CustomType.Setter
        public Builder windowsPassword(String windowsPassword) {
            if (windowsPassword == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "windowsPassword");
            }
            this.windowsPassword = windowsPassword;
            return this;
        }
        @CustomType.Setter
        public Builder workingDir(String workingDir) {
            if (workingDir == null) {
              throw new MissingRequiredPropertyException("GetInvocationResult", "workingDir");
            }
            this.workingDir = workingDir;
            return this;
        }
        public GetInvocationResult build() {
            final var _resultValue = new GetInvocationResult();
            _resultValue.commandContent = commandContent;
            _resultValue.commandDescription = commandDescription;
            _resultValue.commandId = commandId;
            _resultValue.commandName = commandName;
            _resultValue.commandProvider = commandProvider;
            _resultValue.commandType = commandType;
            _resultValue.enableParameter = enableParameter;
            _resultValue.endTime = endTime;
            _resultValue.frequency = frequency;
            _resultValue.id = id;
            _resultValue.instanceIds = instanceIds;
            _resultValue.instanceNumber = instanceNumber;
            _resultValue.invocationDescription = invocationDescription;
            _resultValue.invocationId = invocationId;
            _resultValue.invocationName = invocationName;
            _resultValue.invocationResults = invocationResults;
            _resultValue.invocationStatus = invocationStatus;
            _resultValue.launchTime = launchTime;
            _resultValue.parameterDefinitions = parameterDefinitions;
            _resultValue.parameters = parameters;
            _resultValue.projectName = projectName;
            _resultValue.recurrenceEndTime = recurrenceEndTime;
            _resultValue.repeatMode = repeatMode;
            _resultValue.startTime = startTime;
            _resultValue.tags = tags;
            _resultValue.timeout = timeout;
            _resultValue.username = username;
            _resultValue.windowsPassword = windowsPassword;
            _resultValue.workingDir = workingDir;
            return _resultValue;
        }
    }
}
