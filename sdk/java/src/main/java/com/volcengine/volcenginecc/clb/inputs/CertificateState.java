// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.volcengine.volcenginecc.clb.inputs.CertificateTagArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CertificateState extends com.pulumi.resources.ResourceArgs {

    public static final CertificateState Empty = new CertificateState();

    /**
     * 证书的ID。
     * 
     */
    @Import(name="certificateId")
    private @Nullable Output<String> certificateId;

    /**
     * @return 证书的ID。
     * 
     */
    public Optional<Output<String>> certificateId() {
        return Optional.ofNullable(this.certificateId);
    }

    /**
     * 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
     * 
     */
    @Import(name="certificateName")
    private @Nullable Output<String> certificateName;

    /**
     * @return 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
     * 
     */
    public Optional<Output<String>> certificateName() {
        return Optional.ofNullable(this.certificateName);
    }

    /**
     * 证书的创建时间。
     * 
     */
    @Import(name="createdTime")
    private @Nullable Output<String> createdTime;

    /**
     * @return 证书的创建时间。
     * 
     */
    public Optional<Output<String>> createdTime() {
        return Optional.ofNullable(this.createdTime);
    }

    /**
     * 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 证书的主域名。
     * 
     */
    @Import(name="domainName")
    private @Nullable Output<String> domainName;

    /**
     * @return 证书的主域名。
     * 
     */
    public Optional<Output<String>> domainName() {
        return Optional.ofNullable(this.domainName);
    }

    /**
     * 证书的过期时间。
     * 
     */
    @Import(name="expiredAt")
    private @Nullable Output<String> expiredAt;

    /**
     * @return 证书的过期时间。
     * 
     */
    public Optional<Output<String>> expiredAt() {
        return Optional.ofNullable(this.expiredAt);
    }

    /**
     * 证书关联的监听器的ID。
     * 
     */
    @Import(name="listeners")
    private @Nullable Output<List<String>> listeners;

    /**
     * @return 证书关联的监听器的ID。
     * 
     */
    public Optional<Output<List<String>>> listeners() {
        return Optional.ofNullable(this.listeners);
    }

    /**
     * 证书的私钥。
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return 证书的私钥。
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * 证书所属项目的名称。不填默认为default。
     * 
     */
    @Import(name="projectName")
    private @Nullable Output<String> projectName;

    /**
     * @return 证书所属项目的名称。不填默认为default。
     * 
     */
    public Optional<Output<String>> projectName() {
        return Optional.ofNullable(this.projectName);
    }

    /**
     * 证书的公钥。
     * 
     */
    @Import(name="publicKey")
    private @Nullable Output<String> publicKey;

    /**
     * @return 证书的公钥。
     * 
     */
    public Optional<Output<String>> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    /**
     * 是否为托管资源。true：托管资源。false：非托管资源。
     * 
     */
    @Import(name="serviceManaged")
    private @Nullable Output<Boolean> serviceManaged;

    /**
     * @return 是否为托管资源。true：托管资源。false：非托管资源。
     * 
     */
    public Optional<Output<Boolean>> serviceManaged() {
        return Optional.ofNullable(this.serviceManaged);
    }

    /**
     * 证书的备用域名列表。
     * 
     */
    @Import(name="subjectAlternativeNames")
    private @Nullable Output<List<String>> subjectAlternativeNames;

    /**
     * @return 证书的备用域名列表。
     * 
     */
    public Optional<Output<List<String>>> subjectAlternativeNames() {
        return Optional.ofNullable(this.subjectAlternativeNames);
    }

    @Import(name="tags")
    private @Nullable Output<List<CertificateTagArgs>> tags;

    public Optional<Output<List<CertificateTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    private CertificateState() {}

    private CertificateState(CertificateState $) {
        this.certificateId = $.certificateId;
        this.certificateName = $.certificateName;
        this.createdTime = $.createdTime;
        this.description = $.description;
        this.domainName = $.domainName;
        this.expiredAt = $.expiredAt;
        this.listeners = $.listeners;
        this.privateKey = $.privateKey;
        this.projectName = $.projectName;
        this.publicKey = $.publicKey;
        this.serviceManaged = $.serviceManaged;
        this.subjectAlternativeNames = $.subjectAlternativeNames;
        this.tags = $.tags;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CertificateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CertificateState $;

        public Builder() {
            $ = new CertificateState();
        }

        public Builder(CertificateState defaults) {
            $ = new CertificateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificateId 证书的ID。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(@Nullable Output<String> certificateId) {
            $.certificateId = certificateId;
            return this;
        }

        /**
         * @param certificateId 证书的ID。
         * 
         * @return builder
         * 
         */
        public Builder certificateId(String certificateId) {
            return certificateId(Output.of(certificateId));
        }

        /**
         * @param certificateName 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
         * 
         * @return builder
         * 
         */
        public Builder certificateName(@Nullable Output<String> certificateName) {
            $.certificateName = certificateName;
            return this;
        }

        /**
         * @param certificateName 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
         * 
         * @return builder
         * 
         */
        public Builder certificateName(String certificateName) {
            return certificateName(Output.of(certificateName));
        }

        /**
         * @param createdTime 证书的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(@Nullable Output<String> createdTime) {
            $.createdTime = createdTime;
            return this;
        }

        /**
         * @param createdTime 证书的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder createdTime(String createdTime) {
            return createdTime(Output.of(createdTime));
        }

        /**
         * @param description 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param domainName 证书的主域名。
         * 
         * @return builder
         * 
         */
        public Builder domainName(@Nullable Output<String> domainName) {
            $.domainName = domainName;
            return this;
        }

        /**
         * @param domainName 证书的主域名。
         * 
         * @return builder
         * 
         */
        public Builder domainName(String domainName) {
            return domainName(Output.of(domainName));
        }

        /**
         * @param expiredAt 证书的过期时间。
         * 
         * @return builder
         * 
         */
        public Builder expiredAt(@Nullable Output<String> expiredAt) {
            $.expiredAt = expiredAt;
            return this;
        }

        /**
         * @param expiredAt 证书的过期时间。
         * 
         * @return builder
         * 
         */
        public Builder expiredAt(String expiredAt) {
            return expiredAt(Output.of(expiredAt));
        }

        /**
         * @param listeners 证书关联的监听器的ID。
         * 
         * @return builder
         * 
         */
        public Builder listeners(@Nullable Output<List<String>> listeners) {
            $.listeners = listeners;
            return this;
        }

        /**
         * @param listeners 证书关联的监听器的ID。
         * 
         * @return builder
         * 
         */
        public Builder listeners(List<String> listeners) {
            return listeners(Output.of(listeners));
        }

        /**
         * @param listeners 证书关联的监听器的ID。
         * 
         * @return builder
         * 
         */
        public Builder listeners(String... listeners) {
            return listeners(List.of(listeners));
        }

        /**
         * @param privateKey 证书的私钥。
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey 证书的私钥。
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param projectName 证书所属项目的名称。不填默认为default。
         * 
         * @return builder
         * 
         */
        public Builder projectName(@Nullable Output<String> projectName) {
            $.projectName = projectName;
            return this;
        }

        /**
         * @param projectName 证书所属项目的名称。不填默认为default。
         * 
         * @return builder
         * 
         */
        public Builder projectName(String projectName) {
            return projectName(Output.of(projectName));
        }

        /**
         * @param publicKey 证书的公钥。
         * 
         * @return builder
         * 
         */
        public Builder publicKey(@Nullable Output<String> publicKey) {
            $.publicKey = publicKey;
            return this;
        }

        /**
         * @param publicKey 证书的公钥。
         * 
         * @return builder
         * 
         */
        public Builder publicKey(String publicKey) {
            return publicKey(Output.of(publicKey));
        }

        /**
         * @param serviceManaged 是否为托管资源。true：托管资源。false：非托管资源。
         * 
         * @return builder
         * 
         */
        public Builder serviceManaged(@Nullable Output<Boolean> serviceManaged) {
            $.serviceManaged = serviceManaged;
            return this;
        }

        /**
         * @param serviceManaged 是否为托管资源。true：托管资源。false：非托管资源。
         * 
         * @return builder
         * 
         */
        public Builder serviceManaged(Boolean serviceManaged) {
            return serviceManaged(Output.of(serviceManaged));
        }

        /**
         * @param subjectAlternativeNames 证书的备用域名列表。
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(@Nullable Output<List<String>> subjectAlternativeNames) {
            $.subjectAlternativeNames = subjectAlternativeNames;
            return this;
        }

        /**
         * @param subjectAlternativeNames 证书的备用域名列表。
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(List<String> subjectAlternativeNames) {
            return subjectAlternativeNames(Output.of(subjectAlternativeNames));
        }

        /**
         * @param subjectAlternativeNames 证书的备用域名列表。
         * 
         * @return builder
         * 
         */
        public Builder subjectAlternativeNames(String... subjectAlternativeNames) {
            return subjectAlternativeNames(List.of(subjectAlternativeNames));
        }

        public Builder tags(@Nullable Output<List<CertificateTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        public Builder tags(List<CertificateTagArgs> tags) {
            return tags(Output.of(tags));
        }

        public Builder tags(CertificateTagArgs... tags) {
            return tags(List.of(tags));
        }

        public CertificateState build() {
            return $;
        }
    }

}
