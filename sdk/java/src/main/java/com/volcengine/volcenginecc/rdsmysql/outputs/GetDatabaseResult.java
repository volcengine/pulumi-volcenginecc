// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.rdsmysql.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.rdsmysql.outputs.GetDatabaseDatabasePrivilege;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDatabaseResult {
    /**
     * @return 数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。
     * 
     */
    private String characterSetName;
    /**
     * @return 授权数据库权限信息。
     * 
     */
    private List<GetDatabaseDatabasePrivilege> databasePrivileges;
    /**
     * @return 数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。
     * 
     */
    private String description;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 数据库实例 ID。
     * 
     */
    private String instanceId;
    /**
     * @return 数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。
     * 
     */
    private String name;
    private String status;

    private GetDatabaseResult() {}
    /**
     * @return 数据库字符集。目前支持的字符集包含：utf8、utf8mb4（默认）、latin1、ascii。
     * 
     */
    public String characterSetName() {
        return this.characterSetName;
    }
    /**
     * @return 授权数据库权限信息。
     * 
     */
    public List<GetDatabaseDatabasePrivilege> databasePrivileges() {
        return this.databasePrivileges;
    }
    /**
     * @return 数据库的描述信息，长度不超过 256 个字符。该字段可选，若不设置该字段，或设置了该字段但描述信息长度为 0 ，则描述信息为空。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 数据库实例 ID。
     * 
     */
    public String instanceId() {
        return this.instanceId;
    }
    /**
     * @return 数据库名称。命名规则如下：名称唯一。长度为 2~64 个字符。以字母开头，以字母或数字结尾。由字母、数字、下划线（_）或中划线（-）组成。不能使用某些预留字，包括 root、admin 等。
     * 
     */
    public String name() {
        return this.name;
    }
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String characterSetName;
        private List<GetDatabaseDatabasePrivilege> databasePrivileges;
        private String description;
        private String id;
        private String instanceId;
        private String name;
        private String status;
        public Builder() {}
        public Builder(GetDatabaseResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.characterSetName = defaults.characterSetName;
    	      this.databasePrivileges = defaults.databasePrivileges;
    	      this.description = defaults.description;
    	      this.id = defaults.id;
    	      this.instanceId = defaults.instanceId;
    	      this.name = defaults.name;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder characterSetName(String characterSetName) {
            if (characterSetName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "characterSetName");
            }
            this.characterSetName = characterSetName;
            return this;
        }
        @CustomType.Setter
        public Builder databasePrivileges(List<GetDatabaseDatabasePrivilege> databasePrivileges) {
            if (databasePrivileges == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "databasePrivileges");
            }
            this.databasePrivileges = databasePrivileges;
            return this;
        }
        public Builder databasePrivileges(GetDatabaseDatabasePrivilege... databasePrivileges) {
            return databasePrivileges(List.of(databasePrivileges));
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceId(String instanceId) {
            if (instanceId == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "instanceId");
            }
            this.instanceId = instanceId;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDatabaseResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetDatabaseResult build() {
            final var _resultValue = new GetDatabaseResult();
            _resultValue.characterSetName = characterSetName;
            _resultValue.databasePrivileges = databasePrivileges;
            _resultValue.description = description;
            _resultValue.id = id;
            _resultValue.instanceId = instanceId;
            _resultValue.name = name;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
