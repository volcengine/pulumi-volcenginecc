// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetNlbTag;
import com.volcengine.volcenginecc.clb.outputs.GetNlbZoneMapping;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNlbResult {
    /**
     * @return NLB实例所属的账号ID。
     * 
     */
    private String accountId;
    /**
     * @return NLB实例的计费状态。Normal: 正常，FinancialLocked: 被锁定。
     * 
     */
    private String billingStatus;
    /**
     * @return NLB实例的计费类型。3：按使用量计费
     * 
     */
    private Integer billingType;
    /**
     * @return NLB实例的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
     * 
     */
    private Boolean crossZoneEnabled;
    /**
     * @return NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    private String description;
    /**
     * @return NLB实例的DNS地址。
     * 
     */
    private String dnsName;
    /**
     * @return NLB实例欠费关停时间。
     * 
     */
    private String expectedOverdueTime;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
     * 
     */
    private String ipAddressVersion;
    /**
     * @return IPv4类型的共享带宽包ID。
     * 
     */
    private String ipv4BandwidthPackageId;
    /**
     * @return NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    private String ipv4NetworkType;
    /**
     * @return IPv6类型的共享带宽包ID。
     * 
     */
    private String ipv6BandwidthPackageId;
    /**
     * @return NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    private String ipv6NetworkType;
    /**
     * @return NLB实例ID。
     * 
     */
    private String loadBalancerId;
    /**
     * @return NLB实例的名称。
     * 
     */
    private String loadBalancerName;
    /**
     * @return 系统为NLB实例自动关联的托管安全组ID。
     * 
     */
    private String managedSecurityGroupId;
    /**
     * @return NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
     * 
     */
    private String modificationProtectionStatus;
    /**
     * @return NLB实例被锁定的时间。参数BillingStatus为Normal时，本参数返回为空字符串。
     * 
     */
    private String overdueTime;
    /**
     * @return NLB实例所属项目的名称。
     * 
     */
    private String projectName;
    /**
     * @return NLB实例的预期回收时间。参数BillingStatus为Normal时，本参数返回为空字符串。
     * 
     */
    private String reclaimedTime;
    /**
     * @return NLB实例关联的安全组ID列表。
     * 
     */
    private List<String> securityGroupIds;
    /**
     * @return NLB 实例的状态。Inactive：已停止。Active：运行中。Creating：创建中。Provisioning：创建中。仅调用API创建NLB实例时存在该状态。Configuring：配置中。Deleting：删除中。CreateFailed：创建失败。
     * 
     */
    private String status;
    /**
     * @return NLB实例的标签信息。
     * 
     */
    private List<GetNlbTag> tags;
    /**
     * @return NLB实例的更新时间。
     * 
     */
    private String updatedTime;
    /**
     * @return NLB实例所属的VPC ID。
     * 
     */
    private String vpcId;
    /**
     * @return NLB实例的可用区信息。
     * 
     */
    private List<GetNlbZoneMapping> zoneMappings;

    private GetNlbResult() {}
    /**
     * @return NLB实例所属的账号ID。
     * 
     */
    public String accountId() {
        return this.accountId;
    }
    /**
     * @return NLB实例的计费状态。Normal: 正常，FinancialLocked: 被锁定。
     * 
     */
    public String billingStatus() {
        return this.billingStatus;
    }
    /**
     * @return NLB实例的计费类型。3：按使用量计费
     * 
     */
    public Integer billingType() {
        return this.billingType;
    }
    /**
     * @return NLB实例的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
     * 
     */
    public Boolean crossZoneEnabled() {
        return this.crossZoneEnabled;
    }
    /**
     * @return NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return NLB实例的DNS地址。
     * 
     */
    public String dnsName() {
        return this.dnsName;
    }
    /**
     * @return NLB实例欠费关停时间。
     * 
     */
    public String expectedOverdueTime() {
        return this.expectedOverdueTime;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
     * 
     */
    public String ipAddressVersion() {
        return this.ipAddressVersion;
    }
    /**
     * @return IPv4类型的共享带宽包ID。
     * 
     */
    public String ipv4BandwidthPackageId() {
        return this.ipv4BandwidthPackageId;
    }
    /**
     * @return NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    public String ipv4NetworkType() {
        return this.ipv4NetworkType;
    }
    /**
     * @return IPv6类型的共享带宽包ID。
     * 
     */
    public String ipv6BandwidthPackageId() {
        return this.ipv6BandwidthPackageId;
    }
    /**
     * @return NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
     * 
     */
    public String ipv6NetworkType() {
        return this.ipv6NetworkType;
    }
    /**
     * @return NLB实例ID。
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return NLB实例的名称。
     * 
     */
    public String loadBalancerName() {
        return this.loadBalancerName;
    }
    /**
     * @return 系统为NLB实例自动关联的托管安全组ID。
     * 
     */
    public String managedSecurityGroupId() {
        return this.managedSecurityGroupId;
    }
    /**
     * @return NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
     * 
     */
    public String modificationProtectionStatus() {
        return this.modificationProtectionStatus;
    }
    /**
     * @return NLB实例被锁定的时间。参数BillingStatus为Normal时，本参数返回为空字符串。
     * 
     */
    public String overdueTime() {
        return this.overdueTime;
    }
    /**
     * @return NLB实例所属项目的名称。
     * 
     */
    public String projectName() {
        return this.projectName;
    }
    /**
     * @return NLB实例的预期回收时间。参数BillingStatus为Normal时，本参数返回为空字符串。
     * 
     */
    public String reclaimedTime() {
        return this.reclaimedTime;
    }
    /**
     * @return NLB实例关联的安全组ID列表。
     * 
     */
    public List<String> securityGroupIds() {
        return this.securityGroupIds;
    }
    /**
     * @return NLB 实例的状态。Inactive：已停止。Active：运行中。Creating：创建中。Provisioning：创建中。仅调用API创建NLB实例时存在该状态。Configuring：配置中。Deleting：删除中。CreateFailed：创建失败。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return NLB实例的标签信息。
     * 
     */
    public List<GetNlbTag> tags() {
        return this.tags;
    }
    /**
     * @return NLB实例的更新时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return NLB实例所属的VPC ID。
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }
    /**
     * @return NLB实例的可用区信息。
     * 
     */
    public List<GetNlbZoneMapping> zoneMappings() {
        return this.zoneMappings;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNlbResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accountId;
        private String billingStatus;
        private Integer billingType;
        private String createdTime;
        private Boolean crossZoneEnabled;
        private String description;
        private String dnsName;
        private String expectedOverdueTime;
        private String id;
        private String ipAddressVersion;
        private String ipv4BandwidthPackageId;
        private String ipv4NetworkType;
        private String ipv6BandwidthPackageId;
        private String ipv6NetworkType;
        private String loadBalancerId;
        private String loadBalancerName;
        private String managedSecurityGroupId;
        private String modificationProtectionStatus;
        private String overdueTime;
        private String projectName;
        private String reclaimedTime;
        private List<String> securityGroupIds;
        private String status;
        private List<GetNlbTag> tags;
        private String updatedTime;
        private String vpcId;
        private List<GetNlbZoneMapping> zoneMappings;
        public Builder() {}
        public Builder(GetNlbResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountId = defaults.accountId;
    	      this.billingStatus = defaults.billingStatus;
    	      this.billingType = defaults.billingType;
    	      this.createdTime = defaults.createdTime;
    	      this.crossZoneEnabled = defaults.crossZoneEnabled;
    	      this.description = defaults.description;
    	      this.dnsName = defaults.dnsName;
    	      this.expectedOverdueTime = defaults.expectedOverdueTime;
    	      this.id = defaults.id;
    	      this.ipAddressVersion = defaults.ipAddressVersion;
    	      this.ipv4BandwidthPackageId = defaults.ipv4BandwidthPackageId;
    	      this.ipv4NetworkType = defaults.ipv4NetworkType;
    	      this.ipv6BandwidthPackageId = defaults.ipv6BandwidthPackageId;
    	      this.ipv6NetworkType = defaults.ipv6NetworkType;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.loadBalancerName = defaults.loadBalancerName;
    	      this.managedSecurityGroupId = defaults.managedSecurityGroupId;
    	      this.modificationProtectionStatus = defaults.modificationProtectionStatus;
    	      this.overdueTime = defaults.overdueTime;
    	      this.projectName = defaults.projectName;
    	      this.reclaimedTime = defaults.reclaimedTime;
    	      this.securityGroupIds = defaults.securityGroupIds;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
    	      this.vpcId = defaults.vpcId;
    	      this.zoneMappings = defaults.zoneMappings;
        }

        @CustomType.Setter
        public Builder accountId(String accountId) {
            if (accountId == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "accountId");
            }
            this.accountId = accountId;
            return this;
        }
        @CustomType.Setter
        public Builder billingStatus(String billingStatus) {
            if (billingStatus == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "billingStatus");
            }
            this.billingStatus = billingStatus;
            return this;
        }
        @CustomType.Setter
        public Builder billingType(Integer billingType) {
            if (billingType == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "billingType");
            }
            this.billingType = billingType;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder crossZoneEnabled(Boolean crossZoneEnabled) {
            if (crossZoneEnabled == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "crossZoneEnabled");
            }
            this.crossZoneEnabled = crossZoneEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder dnsName(String dnsName) {
            if (dnsName == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "dnsName");
            }
            this.dnsName = dnsName;
            return this;
        }
        @CustomType.Setter
        public Builder expectedOverdueTime(String expectedOverdueTime) {
            if (expectedOverdueTime == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "expectedOverdueTime");
            }
            this.expectedOverdueTime = expectedOverdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddressVersion(String ipAddressVersion) {
            if (ipAddressVersion == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "ipAddressVersion");
            }
            this.ipAddressVersion = ipAddressVersion;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4BandwidthPackageId(String ipv4BandwidthPackageId) {
            if (ipv4BandwidthPackageId == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "ipv4BandwidthPackageId");
            }
            this.ipv4BandwidthPackageId = ipv4BandwidthPackageId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv4NetworkType(String ipv4NetworkType) {
            if (ipv4NetworkType == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "ipv4NetworkType");
            }
            this.ipv4NetworkType = ipv4NetworkType;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6BandwidthPackageId(String ipv6BandwidthPackageId) {
            if (ipv6BandwidthPackageId == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "ipv6BandwidthPackageId");
            }
            this.ipv6BandwidthPackageId = ipv6BandwidthPackageId;
            return this;
        }
        @CustomType.Setter
        public Builder ipv6NetworkType(String ipv6NetworkType) {
            if (ipv6NetworkType == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "ipv6NetworkType");
            }
            this.ipv6NetworkType = ipv6NetworkType;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerName(String loadBalancerName) {
            if (loadBalancerName == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "loadBalancerName");
            }
            this.loadBalancerName = loadBalancerName;
            return this;
        }
        @CustomType.Setter
        public Builder managedSecurityGroupId(String managedSecurityGroupId) {
            if (managedSecurityGroupId == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "managedSecurityGroupId");
            }
            this.managedSecurityGroupId = managedSecurityGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder modificationProtectionStatus(String modificationProtectionStatus) {
            if (modificationProtectionStatus == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "modificationProtectionStatus");
            }
            this.modificationProtectionStatus = modificationProtectionStatus;
            return this;
        }
        @CustomType.Setter
        public Builder overdueTime(String overdueTime) {
            if (overdueTime == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "overdueTime");
            }
            this.overdueTime = overdueTime;
            return this;
        }
        @CustomType.Setter
        public Builder projectName(String projectName) {
            if (projectName == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "projectName");
            }
            this.projectName = projectName;
            return this;
        }
        @CustomType.Setter
        public Builder reclaimedTime(String reclaimedTime) {
            if (reclaimedTime == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "reclaimedTime");
            }
            this.reclaimedTime = reclaimedTime;
            return this;
        }
        @CustomType.Setter
        public Builder securityGroupIds(List<String> securityGroupIds) {
            if (securityGroupIds == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "securityGroupIds");
            }
            this.securityGroupIds = securityGroupIds;
            return this;
        }
        public Builder securityGroupIds(String... securityGroupIds) {
            return securityGroupIds(List.of(securityGroupIds));
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetNlbTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetNlbTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        @CustomType.Setter
        public Builder zoneMappings(List<GetNlbZoneMapping> zoneMappings) {
            if (zoneMappings == null) {
              throw new MissingRequiredPropertyException("GetNlbResult", "zoneMappings");
            }
            this.zoneMappings = zoneMappings;
            return this;
        }
        public Builder zoneMappings(GetNlbZoneMapping... zoneMappings) {
            return zoneMappings(List.of(zoneMappings));
        }
        public GetNlbResult build() {
            final var _resultValue = new GetNlbResult();
            _resultValue.accountId = accountId;
            _resultValue.billingStatus = billingStatus;
            _resultValue.billingType = billingType;
            _resultValue.createdTime = createdTime;
            _resultValue.crossZoneEnabled = crossZoneEnabled;
            _resultValue.description = description;
            _resultValue.dnsName = dnsName;
            _resultValue.expectedOverdueTime = expectedOverdueTime;
            _resultValue.id = id;
            _resultValue.ipAddressVersion = ipAddressVersion;
            _resultValue.ipv4BandwidthPackageId = ipv4BandwidthPackageId;
            _resultValue.ipv4NetworkType = ipv4NetworkType;
            _resultValue.ipv6BandwidthPackageId = ipv6BandwidthPackageId;
            _resultValue.ipv6NetworkType = ipv6NetworkType;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.loadBalancerName = loadBalancerName;
            _resultValue.managedSecurityGroupId = managedSecurityGroupId;
            _resultValue.modificationProtectionStatus = modificationProtectionStatus;
            _resultValue.overdueTime = overdueTime;
            _resultValue.projectName = projectName;
            _resultValue.reclaimedTime = reclaimedTime;
            _resultValue.securityGroupIds = securityGroupIds;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            _resultValue.vpcId = vpcId;
            _resultValue.zoneMappings = zoneMappings;
            return _resultValue;
        }
    }
}
