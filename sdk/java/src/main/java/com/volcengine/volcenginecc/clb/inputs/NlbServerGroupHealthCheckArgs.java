// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NlbServerGroupHealthCheckArgs extends com.pulumi.resources.ResourceArgs {

    public static final NlbServerGroupHealthCheckArgs Empty = new NlbServerGroupHealthCheckArgs();

    /**
     * 健康检查的域名
     * 
     */
    @Import(name="domain")
    private @Nullable Output<String> domain;

    /**
     * @return 健康检查的域名
     * 
     */
    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    /**
     * 是否开启健康检查
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return 是否开启健康检查
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
     * 
     */
    @Import(name="healthyThreshold")
    private @Nullable Output<Integer> healthyThreshold;

    /**
     * @return 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
     * 
     */
    public Optional<Output<Integer>> healthyThreshold() {
        return Optional.ofNullable(this.healthyThreshold);
    }

    /**
     * 健康检查正常的HTTP状态码
     * 
     */
    @Import(name="httpCode")
    private @Nullable Output<String> httpCode;

    /**
     * @return 健康检查正常的HTTP状态码
     * 
     */
    public Optional<Output<String>> httpCode() {
        return Optional.ofNullable(this.httpCode);
    }

    /**
     * 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
     * 
     */
    @Import(name="interval")
    private @Nullable Output<Integer> interval;

    /**
     * @return 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
     * 
     */
    public Optional<Output<Integer>> interval() {
        return Optional.ofNullable(this.interval);
    }

    /**
     * 健康检查的请求方法
     * 
     */
    @Import(name="method")
    private @Nullable Output<String> method;

    /**
     * @return 健康检查的请求方法
     * 
     */
    public Optional<Output<String>> method() {
        return Optional.ofNullable(this.method);
    }

    /**
     * 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * 健康检查的协议类型
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 健康检查的协议类型
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
     * 
     */
    @Import(name="udpExpect")
    private @Nullable Output<String> udpExpect;

    /**
     * @return UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
     * 
     */
    public Optional<Output<String>> udpExpect() {
        return Optional.ofNullable(this.udpExpect);
    }

    /**
     * UDP健康检查的预期响应字符串
     * 
     */
    @Import(name="udpRequest")
    private @Nullable Output<String> udpRequest;

    /**
     * @return UDP健康检查的预期响应字符串
     * 
     */
    public Optional<Output<String>> udpRequest() {
        return Optional.ofNullable(this.udpRequest);
    }

    /**
     * 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
     * 
     */
    @Import(name="unhealthyThreshold")
    private @Nullable Output<Integer> unhealthyThreshold;

    /**
     * @return 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
     * 
     */
    public Optional<Output<Integer>> unhealthyThreshold() {
        return Optional.ofNullable(this.unhealthyThreshold);
    }

    /**
     * 健康检查的路径
     * 
     */
    @Import(name="uri")
    private @Nullable Output<String> uri;

    /**
     * @return 健康检查的路径
     * 
     */
    public Optional<Output<String>> uri() {
        return Optional.ofNullable(this.uri);
    }

    private NlbServerGroupHealthCheckArgs() {}

    private NlbServerGroupHealthCheckArgs(NlbServerGroupHealthCheckArgs $) {
        this.domain = $.domain;
        this.enabled = $.enabled;
        this.healthyThreshold = $.healthyThreshold;
        this.httpCode = $.httpCode;
        this.interval = $.interval;
        this.method = $.method;
        this.port = $.port;
        this.timeout = $.timeout;
        this.type = $.type;
        this.udpExpect = $.udpExpect;
        this.udpRequest = $.udpRequest;
        this.unhealthyThreshold = $.unhealthyThreshold;
        this.uri = $.uri;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NlbServerGroupHealthCheckArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NlbServerGroupHealthCheckArgs $;

        public Builder() {
            $ = new NlbServerGroupHealthCheckArgs();
        }

        public Builder(NlbServerGroupHealthCheckArgs defaults) {
            $ = new NlbServerGroupHealthCheckArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param domain 健康检查的域名
         * 
         * @return builder
         * 
         */
        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        /**
         * @param domain 健康检查的域名
         * 
         * @return builder
         * 
         */
        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        /**
         * @param enabled 是否开启健康检查
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled 是否开启健康检查
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param healthyThreshold 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(@Nullable Output<Integer> healthyThreshold) {
            $.healthyThreshold = healthyThreshold;
            return this;
        }

        /**
         * @param healthyThreshold 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
         * 
         * @return builder
         * 
         */
        public Builder healthyThreshold(Integer healthyThreshold) {
            return healthyThreshold(Output.of(healthyThreshold));
        }

        /**
         * @param httpCode 健康检查正常的HTTP状态码
         * 
         * @return builder
         * 
         */
        public Builder httpCode(@Nullable Output<String> httpCode) {
            $.httpCode = httpCode;
            return this;
        }

        /**
         * @param httpCode 健康检查正常的HTTP状态码
         * 
         * @return builder
         * 
         */
        public Builder httpCode(String httpCode) {
            return httpCode(Output.of(httpCode));
        }

        /**
         * @param interval 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
         * 
         * @return builder
         * 
         */
        public Builder interval(@Nullable Output<Integer> interval) {
            $.interval = interval;
            return this;
        }

        /**
         * @param interval 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
         * 
         * @return builder
         * 
         */
        public Builder interval(Integer interval) {
            return interval(Output.of(interval));
        }

        /**
         * @param method 健康检查的请求方法
         * 
         * @return builder
         * 
         */
        public Builder method(@Nullable Output<String> method) {
            $.method = method;
            return this;
        }

        /**
         * @param method 健康检查的请求方法
         * 
         * @return builder
         * 
         */
        public Builder method(String method) {
            return method(Output.of(method));
        }

        /**
         * @param port 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param timeout 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type 健康检查的协议类型
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 健康检查的协议类型
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param udpExpect UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
         * 
         * @return builder
         * 
         */
        public Builder udpExpect(@Nullable Output<String> udpExpect) {
            $.udpExpect = udpExpect;
            return this;
        }

        /**
         * @param udpExpect UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
         * 
         * @return builder
         * 
         */
        public Builder udpExpect(String udpExpect) {
            return udpExpect(Output.of(udpExpect));
        }

        /**
         * @param udpRequest UDP健康检查的预期响应字符串
         * 
         * @return builder
         * 
         */
        public Builder udpRequest(@Nullable Output<String> udpRequest) {
            $.udpRequest = udpRequest;
            return this;
        }

        /**
         * @param udpRequest UDP健康检查的预期响应字符串
         * 
         * @return builder
         * 
         */
        public Builder udpRequest(String udpRequest) {
            return udpRequest(Output.of(udpRequest));
        }

        /**
         * @param unhealthyThreshold 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(@Nullable Output<Integer> unhealthyThreshold) {
            $.unhealthyThreshold = unhealthyThreshold;
            return this;
        }

        /**
         * @param unhealthyThreshold 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
         * 
         * @return builder
         * 
         */
        public Builder unhealthyThreshold(Integer unhealthyThreshold) {
            return unhealthyThreshold(Output.of(unhealthyThreshold));
        }

        /**
         * @param uri 健康检查的路径
         * 
         * @return builder
         * 
         */
        public Builder uri(@Nullable Output<String> uri) {
            $.uri = uri;
            return this;
        }

        /**
         * @param uri 健康检查的路径
         * 
         * @return builder
         * 
         */
        public Builder uri(String uri) {
            return uri(Output.of(uri));
        }

        public NlbServerGroupHealthCheckArgs build() {
            return $;
        }
    }

}
