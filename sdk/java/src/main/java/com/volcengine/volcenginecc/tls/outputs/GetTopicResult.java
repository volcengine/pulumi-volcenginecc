// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.tls.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.tls.outputs.GetTopicTag;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetTopicResult {
    /**
     * @return 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    private Integer archiveTtl;
    /**
     * @return 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     * 
     */
    private Boolean autoSplit;
    /**
     * @return 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    private Integer coldTtl;
    /**
     * @return 日志主题创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     * 
     */
    private String description;
    /**
     * @return 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     * 
     */
    private Boolean enableHotTtl;
    /**
     * @return 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     * 
     */
    private Boolean enableTracking;
    /**
     * @return 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    private Integer hotTtl;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     * 
     */
    private Boolean logPublicIp;
    /**
     * @return 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     * 
     */
    private Integer maxSplitShard;
    /**
     * @return 日志主题所属的日志项目 ID。
     * 
     */
    private String projectId;
    /**
     * @return 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     * 
     */
    private Integer shardCount;
    /**
     * @return 标签列表。
     * 
     */
    private List<GetTopicTag> tags;
    /**
     * @return 时间格式
     * 
     */
    private String timeFormat;
    /**
     * @return 时间字段名
     * 
     */
    private String timeKey;
    /**
     * @return 日志主题 ID。
     * 
     */
    private String topicId;
    /**
     * @return 日志主题名称。
     * 
     */
    private String topicName;
    /**
     * @return 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     * 
     */
    private Integer ttl;
    /**
     * @return 日志主题修改时间。
     * 
     */
    private String updatedTime;

    private GetTopicResult() {}
    /**
     * @return 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Integer archiveTtl() {
        return this.archiveTtl;
    }
    /**
     * @return 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     * 
     */
    public Boolean autoSplit() {
        return this.autoSplit;
    }
    /**
     * @return 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Integer coldTtl() {
        return this.coldTtl;
    }
    /**
     * @return 日志主题创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 日志主题描述信息。不支持 &lt;&gt;、&#39;、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     * 
     */
    public Boolean enableHotTtl() {
        return this.enableHotTtl;
    }
    /**
     * @return 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     * 
     */
    public Boolean enableTracking() {
        return this.enableTracking;
    }
    /**
     * @return 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     * 
     */
    public Integer hotTtl() {
        return this.hotTtl;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     * 
     */
    public Boolean logPublicIp() {
        return this.logPublicIp;
    }
    /**
     * @return 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     * 
     */
    public Integer maxSplitShard() {
        return this.maxSplitShard;
    }
    /**
     * @return 日志主题所属的日志项目 ID。
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     * 
     */
    public Integer shardCount() {
        return this.shardCount;
    }
    /**
     * @return 标签列表。
     * 
     */
    public List<GetTopicTag> tags() {
        return this.tags;
    }
    /**
     * @return 时间格式
     * 
     */
    public String timeFormat() {
        return this.timeFormat;
    }
    /**
     * @return 时间字段名
     * 
     */
    public String timeKey() {
        return this.timeKey;
    }
    /**
     * @return 日志主题 ID。
     * 
     */
    public String topicId() {
        return this.topicId;
    }
    /**
     * @return 日志主题名称。
     * 
     */
    public String topicName() {
        return this.topicName;
    }
    /**
     * @return 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     * 
     */
    public Integer ttl() {
        return this.ttl;
    }
    /**
     * @return 日志主题修改时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetTopicResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer archiveTtl;
        private Boolean autoSplit;
        private Integer coldTtl;
        private String createdTime;
        private String description;
        private Boolean enableHotTtl;
        private Boolean enableTracking;
        private Integer hotTtl;
        private String id;
        private Boolean logPublicIp;
        private Integer maxSplitShard;
        private String projectId;
        private Integer shardCount;
        private List<GetTopicTag> tags;
        private String timeFormat;
        private String timeKey;
        private String topicId;
        private String topicName;
        private Integer ttl;
        private String updatedTime;
        public Builder() {}
        public Builder(GetTopicResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.archiveTtl = defaults.archiveTtl;
    	      this.autoSplit = defaults.autoSplit;
    	      this.coldTtl = defaults.coldTtl;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.enableHotTtl = defaults.enableHotTtl;
    	      this.enableTracking = defaults.enableTracking;
    	      this.hotTtl = defaults.hotTtl;
    	      this.id = defaults.id;
    	      this.logPublicIp = defaults.logPublicIp;
    	      this.maxSplitShard = defaults.maxSplitShard;
    	      this.projectId = defaults.projectId;
    	      this.shardCount = defaults.shardCount;
    	      this.tags = defaults.tags;
    	      this.timeFormat = defaults.timeFormat;
    	      this.timeKey = defaults.timeKey;
    	      this.topicId = defaults.topicId;
    	      this.topicName = defaults.topicName;
    	      this.ttl = defaults.ttl;
    	      this.updatedTime = defaults.updatedTime;
        }

        @CustomType.Setter
        public Builder archiveTtl(Integer archiveTtl) {
            if (archiveTtl == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "archiveTtl");
            }
            this.archiveTtl = archiveTtl;
            return this;
        }
        @CustomType.Setter
        public Builder autoSplit(Boolean autoSplit) {
            if (autoSplit == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "autoSplit");
            }
            this.autoSplit = autoSplit;
            return this;
        }
        @CustomType.Setter
        public Builder coldTtl(Integer coldTtl) {
            if (coldTtl == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "coldTtl");
            }
            this.coldTtl = coldTtl;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enableHotTtl(Boolean enableHotTtl) {
            if (enableHotTtl == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "enableHotTtl");
            }
            this.enableHotTtl = enableHotTtl;
            return this;
        }
        @CustomType.Setter
        public Builder enableTracking(Boolean enableTracking) {
            if (enableTracking == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "enableTracking");
            }
            this.enableTracking = enableTracking;
            return this;
        }
        @CustomType.Setter
        public Builder hotTtl(Integer hotTtl) {
            if (hotTtl == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "hotTtl");
            }
            this.hotTtl = hotTtl;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder logPublicIp(Boolean logPublicIp) {
            if (logPublicIp == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "logPublicIp");
            }
            this.logPublicIp = logPublicIp;
            return this;
        }
        @CustomType.Setter
        public Builder maxSplitShard(Integer maxSplitShard) {
            if (maxSplitShard == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "maxSplitShard");
            }
            this.maxSplitShard = maxSplitShard;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder shardCount(Integer shardCount) {
            if (shardCount == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "shardCount");
            }
            this.shardCount = shardCount;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetTopicTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetTopicTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder timeFormat(String timeFormat) {
            if (timeFormat == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "timeFormat");
            }
            this.timeFormat = timeFormat;
            return this;
        }
        @CustomType.Setter
        public Builder timeKey(String timeKey) {
            if (timeKey == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "timeKey");
            }
            this.timeKey = timeKey;
            return this;
        }
        @CustomType.Setter
        public Builder topicId(String topicId) {
            if (topicId == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "topicId");
            }
            this.topicId = topicId;
            return this;
        }
        @CustomType.Setter
        public Builder topicName(String topicName) {
            if (topicName == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "topicName");
            }
            this.topicName = topicName;
            return this;
        }
        @CustomType.Setter
        public Builder ttl(Integer ttl) {
            if (ttl == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "ttl");
            }
            this.ttl = ttl;
            return this;
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetTopicResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        public GetTopicResult build() {
            final var _resultValue = new GetTopicResult();
            _resultValue.archiveTtl = archiveTtl;
            _resultValue.autoSplit = autoSplit;
            _resultValue.coldTtl = coldTtl;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.enableHotTtl = enableHotTtl;
            _resultValue.enableTracking = enableTracking;
            _resultValue.hotTtl = hotTtl;
            _resultValue.id = id;
            _resultValue.logPublicIp = logPublicIp;
            _resultValue.maxSplitShard = maxSplitShard;
            _resultValue.projectId = projectId;
            _resultValue.shardCount = shardCount;
            _resultValue.tags = tags;
            _resultValue.timeFormat = timeFormat;
            _resultValue.timeKey = timeKey;
            _resultValue.topicId = topicId;
            _resultValue.topicName = topicName;
            _resultValue.ttl = ttl;
            _resultValue.updatedTime = updatedTime;
            return _resultValue;
        }
    }
}
