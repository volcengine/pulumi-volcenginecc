// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.clb.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.volcengine.volcenginecc.clb.outputs.GetListenerHealthCheck;
import com.volcengine.volcenginecc.clb.outputs.GetListenerTag;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetListenerResult {
    /**
     * @return 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     * 
     */
    private List<String> aclIds;
    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     * 
     */
    private String aclStatus;
    /**
     * @return 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     * 
     */
    private String aclType;
    /**
     * @return 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     * 
     */
    private Integer bandwidth;
    /**
     * @return 双向认证的CA证书。
     * 
     */
    private String caCertificateId;
    /**
     * @return 是否开启双向认证。on：开启。off（默认值）：不开启。
     * 
     */
    private String caEnabled;
    /**
     * @return 证书中心的证书的ID。
     * 
     */
    private String certCenterCertificateId;
    /**
     * @return CLB侧证书管理模块的证书的ID。
     * 
     */
    private String certificateId;
    /**
     * @return 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     * 
     */
    private String certificateSource;
    /**
     * @return 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     * 
     */
    private Integer clientBodyTimeout;
    /**
     * @return 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    private Integer clientHeaderTimeout;
    /**
     * @return 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     * 
     */
    private String connectionDrainEnabled;
    /**
     * @return 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     * 
     */
    private Integer connectionDrainTimeout;
    /**
     * @return 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     * 
     */
    private String cookie;
    /**
     * @return 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     * 
     */
    private Integer cps;
    /**
     * @return 监听器的创建时间。
     * 
     */
    private String createdTime;
    /**
     * @return 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     * 
     */
    private String description;
    /**
     * @return 是否启用监听器。on（默认值）：开启。off：不开启。
     * 
     */
    private String enabled;
    /**
     * @return 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     * 
     */
    private Integer endPort;
    /**
     * @return 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     * 
     */
    private Integer establishedTimeout;
    /**
     * @return 健康检查相关信息。
     * 
     */
    private GetListenerHealthCheck healthCheck;
    /**
     * @return 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     * 
     */
    private String http2Enabled;
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    private String id;
    /**
     * @return 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    private Integer keepaliveTimeout;
    /**
     * @return 监听器的ID。
     * 
     */
    private String listenerId;
    /**
     * @return 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     * 
     */
    private String listenerName;
    /**
     * @return CLB实例的ID。
     * 
     */
    private String loadBalancerId;
    /**
     * @return 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     * 
     */
    private Integer maxConnections;
    /**
     * @return 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     * 
     */
    private Integer persistenceTimeout;
    /**
     * @return 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     * 
     */
    private String persistenceType;
    /**
     * @return 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     * 
     */
    private Integer port;
    /**
     * @return 监听器的协议。
     * 
     */
    private String protocol;
    /**
     * @return CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    private Integer proxyConnectTimeout;
    /**
     * @return 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     * 
     */
    private String proxyProtocolType;
    /**
     * @return CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    private Integer proxyReadTimeout;
    /**
     * @return CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    private Integer proxySendTimeout;
    /**
     * @return 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    private String scheduler;
    /**
     * @return HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     * 
     */
    private String securityPolicyId;
    /**
     * @return CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    private Integer sendTimeout;
    /**
     * @return 监听器关联的后端服务器组 ID。
     * 
     */
    private String serverGroupId;
    /**
     * @return 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     * 
     */
    private Integer startPort;
    /**
     * @return 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     * 
     */
    private String status;
    /**
     * @return 监听器所属标签。
     * 
     */
    private List<GetListenerTag> tags;
    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    private String updatedTime;
    /**
     * @return 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     * 
     */
    private String wafProtectionEnabled;

    private GetListenerResult() {}
    /**
     * @return 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     * 
     */
    public List<String> aclIds() {
        return this.aclIds;
    }
    /**
     * @return 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     * 
     */
    public String aclStatus() {
        return this.aclStatus;
    }
    /**
     * @return 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     * 
     */
    public String aclType() {
        return this.aclType;
    }
    /**
     * @return 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     * 
     */
    public Integer bandwidth() {
        return this.bandwidth;
    }
    /**
     * @return 双向认证的CA证书。
     * 
     */
    public String caCertificateId() {
        return this.caCertificateId;
    }
    /**
     * @return 是否开启双向认证。on：开启。off（默认值）：不开启。
     * 
     */
    public String caEnabled() {
        return this.caEnabled;
    }
    /**
     * @return 证书中心的证书的ID。
     * 
     */
    public String certCenterCertificateId() {
        return this.certCenterCertificateId;
    }
    /**
     * @return CLB侧证书管理模块的证书的ID。
     * 
     */
    public String certificateId() {
        return this.certificateId;
    }
    /**
     * @return 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     * 
     */
    public String certificateSource() {
        return this.certificateSource;
    }
    /**
     * @return 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     * 
     */
    public Integer clientBodyTimeout() {
        return this.clientBodyTimeout;
    }
    /**
     * @return 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Integer clientHeaderTimeout() {
        return this.clientHeaderTimeout;
    }
    /**
     * @return 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     * 
     */
    public String connectionDrainEnabled() {
        return this.connectionDrainEnabled;
    }
    /**
     * @return 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     * 
     */
    public Integer connectionDrainTimeout() {
        return this.connectionDrainTimeout;
    }
    /**
     * @return 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     * 
     */
    public String cookie() {
        return this.cookie;
    }
    /**
     * @return 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     * 
     */
    public Integer cps() {
        return this.cps;
    }
    /**
     * @return 监听器的创建时间。
     * 
     */
    public String createdTime() {
        return this.createdTime;
    }
    /**
     * @return 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return 是否启用监听器。on（默认值）：开启。off：不开启。
     * 
     */
    public String enabled() {
        return this.enabled;
    }
    /**
     * @return 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     * 
     */
    public Integer endPort() {
        return this.endPort;
    }
    /**
     * @return 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     * 
     */
    public Integer establishedTimeout() {
        return this.establishedTimeout;
    }
    /**
     * @return 健康检查相关信息。
     * 
     */
    public GetListenerHealthCheck healthCheck() {
        return this.healthCheck;
    }
    /**
     * @return 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     * 
     */
    public String http2Enabled() {
        return this.http2Enabled;
    }
    /**
     * @return Uniquely identifies the resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Integer keepaliveTimeout() {
        return this.keepaliveTimeout;
    }
    /**
     * @return 监听器的ID。
     * 
     */
    public String listenerId() {
        return this.listenerId;
    }
    /**
     * @return 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     * 
     */
    public String listenerName() {
        return this.listenerName;
    }
    /**
     * @return CLB实例的ID。
     * 
     */
    public String loadBalancerId() {
        return this.loadBalancerId;
    }
    /**
     * @return 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     * 
     */
    public Integer maxConnections() {
        return this.maxConnections;
    }
    /**
     * @return 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     * 
     */
    public Integer persistenceTimeout() {
        return this.persistenceTimeout;
    }
    /**
     * @return 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     * 
     */
    public String persistenceType() {
        return this.persistenceType;
    }
    /**
     * @return 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     * 
     */
    public Integer port() {
        return this.port;
    }
    /**
     * @return 监听器的协议。
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Integer proxyConnectTimeout() {
        return this.proxyConnectTimeout;
    }
    /**
     * @return 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     * 
     */
    public String proxyProtocolType() {
        return this.proxyProtocolType;
    }
    /**
     * @return CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Integer proxyReadTimeout() {
        return this.proxyReadTimeout;
    }
    /**
     * @return CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Integer proxySendTimeout() {
        return this.proxySendTimeout;
    }
    /**
     * @return 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     * 
     */
    public String scheduler() {
        return this.scheduler;
    }
    /**
     * @return HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     * 
     */
    public String securityPolicyId() {
        return this.securityPolicyId;
    }
    /**
     * @return CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     * 
     */
    public Integer sendTimeout() {
        return this.sendTimeout;
    }
    /**
     * @return 监听器关联的后端服务器组 ID。
     * 
     */
    public String serverGroupId() {
        return this.serverGroupId;
    }
    /**
     * @return 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     * 
     */
    public Integer startPort() {
        return this.startPort;
    }
    /**
     * @return 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return 监听器所属标签。
     * 
     */
    public List<GetListenerTag> tags() {
        return this.tags;
    }
    /**
     * @return 监听器最近一次的操作时间。
     * 
     */
    public String updatedTime() {
        return this.updatedTime;
    }
    /**
     * @return 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     * 
     */
    public String wafProtectionEnabled() {
        return this.wafProtectionEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetListenerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> aclIds;
        private String aclStatus;
        private String aclType;
        private Integer bandwidth;
        private String caCertificateId;
        private String caEnabled;
        private String certCenterCertificateId;
        private String certificateId;
        private String certificateSource;
        private Integer clientBodyTimeout;
        private Integer clientHeaderTimeout;
        private String connectionDrainEnabled;
        private Integer connectionDrainTimeout;
        private String cookie;
        private Integer cps;
        private String createdTime;
        private String description;
        private String enabled;
        private Integer endPort;
        private Integer establishedTimeout;
        private GetListenerHealthCheck healthCheck;
        private String http2Enabled;
        private String id;
        private Integer keepaliveTimeout;
        private String listenerId;
        private String listenerName;
        private String loadBalancerId;
        private Integer maxConnections;
        private Integer persistenceTimeout;
        private String persistenceType;
        private Integer port;
        private String protocol;
        private Integer proxyConnectTimeout;
        private String proxyProtocolType;
        private Integer proxyReadTimeout;
        private Integer proxySendTimeout;
        private String scheduler;
        private String securityPolicyId;
        private Integer sendTimeout;
        private String serverGroupId;
        private Integer startPort;
        private String status;
        private List<GetListenerTag> tags;
        private String updatedTime;
        private String wafProtectionEnabled;
        public Builder() {}
        public Builder(GetListenerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aclIds = defaults.aclIds;
    	      this.aclStatus = defaults.aclStatus;
    	      this.aclType = defaults.aclType;
    	      this.bandwidth = defaults.bandwidth;
    	      this.caCertificateId = defaults.caCertificateId;
    	      this.caEnabled = defaults.caEnabled;
    	      this.certCenterCertificateId = defaults.certCenterCertificateId;
    	      this.certificateId = defaults.certificateId;
    	      this.certificateSource = defaults.certificateSource;
    	      this.clientBodyTimeout = defaults.clientBodyTimeout;
    	      this.clientHeaderTimeout = defaults.clientHeaderTimeout;
    	      this.connectionDrainEnabled = defaults.connectionDrainEnabled;
    	      this.connectionDrainTimeout = defaults.connectionDrainTimeout;
    	      this.cookie = defaults.cookie;
    	      this.cps = defaults.cps;
    	      this.createdTime = defaults.createdTime;
    	      this.description = defaults.description;
    	      this.enabled = defaults.enabled;
    	      this.endPort = defaults.endPort;
    	      this.establishedTimeout = defaults.establishedTimeout;
    	      this.healthCheck = defaults.healthCheck;
    	      this.http2Enabled = defaults.http2Enabled;
    	      this.id = defaults.id;
    	      this.keepaliveTimeout = defaults.keepaliveTimeout;
    	      this.listenerId = defaults.listenerId;
    	      this.listenerName = defaults.listenerName;
    	      this.loadBalancerId = defaults.loadBalancerId;
    	      this.maxConnections = defaults.maxConnections;
    	      this.persistenceTimeout = defaults.persistenceTimeout;
    	      this.persistenceType = defaults.persistenceType;
    	      this.port = defaults.port;
    	      this.protocol = defaults.protocol;
    	      this.proxyConnectTimeout = defaults.proxyConnectTimeout;
    	      this.proxyProtocolType = defaults.proxyProtocolType;
    	      this.proxyReadTimeout = defaults.proxyReadTimeout;
    	      this.proxySendTimeout = defaults.proxySendTimeout;
    	      this.scheduler = defaults.scheduler;
    	      this.securityPolicyId = defaults.securityPolicyId;
    	      this.sendTimeout = defaults.sendTimeout;
    	      this.serverGroupId = defaults.serverGroupId;
    	      this.startPort = defaults.startPort;
    	      this.status = defaults.status;
    	      this.tags = defaults.tags;
    	      this.updatedTime = defaults.updatedTime;
    	      this.wafProtectionEnabled = defaults.wafProtectionEnabled;
        }

        @CustomType.Setter
        public Builder aclIds(List<String> aclIds) {
            if (aclIds == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "aclIds");
            }
            this.aclIds = aclIds;
            return this;
        }
        public Builder aclIds(String... aclIds) {
            return aclIds(List.of(aclIds));
        }
        @CustomType.Setter
        public Builder aclStatus(String aclStatus) {
            if (aclStatus == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "aclStatus");
            }
            this.aclStatus = aclStatus;
            return this;
        }
        @CustomType.Setter
        public Builder aclType(String aclType) {
            if (aclType == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "aclType");
            }
            this.aclType = aclType;
            return this;
        }
        @CustomType.Setter
        public Builder bandwidth(Integer bandwidth) {
            if (bandwidth == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "bandwidth");
            }
            this.bandwidth = bandwidth;
            return this;
        }
        @CustomType.Setter
        public Builder caCertificateId(String caCertificateId) {
            if (caCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "caCertificateId");
            }
            this.caCertificateId = caCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder caEnabled(String caEnabled) {
            if (caEnabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "caEnabled");
            }
            this.caEnabled = caEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder certCenterCertificateId(String certCenterCertificateId) {
            if (certCenterCertificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "certCenterCertificateId");
            }
            this.certCenterCertificateId = certCenterCertificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateId(String certificateId) {
            if (certificateId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "certificateId");
            }
            this.certificateId = certificateId;
            return this;
        }
        @CustomType.Setter
        public Builder certificateSource(String certificateSource) {
            if (certificateSource == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "certificateSource");
            }
            this.certificateSource = certificateSource;
            return this;
        }
        @CustomType.Setter
        public Builder clientBodyTimeout(Integer clientBodyTimeout) {
            if (clientBodyTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "clientBodyTimeout");
            }
            this.clientBodyTimeout = clientBodyTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder clientHeaderTimeout(Integer clientHeaderTimeout) {
            if (clientHeaderTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "clientHeaderTimeout");
            }
            this.clientHeaderTimeout = clientHeaderTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder connectionDrainEnabled(String connectionDrainEnabled) {
            if (connectionDrainEnabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "connectionDrainEnabled");
            }
            this.connectionDrainEnabled = connectionDrainEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder connectionDrainTimeout(Integer connectionDrainTimeout) {
            if (connectionDrainTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "connectionDrainTimeout");
            }
            this.connectionDrainTimeout = connectionDrainTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder cookie(String cookie) {
            if (cookie == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "cookie");
            }
            this.cookie = cookie;
            return this;
        }
        @CustomType.Setter
        public Builder cps(Integer cps) {
            if (cps == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "cps");
            }
            this.cps = cps;
            return this;
        }
        @CustomType.Setter
        public Builder createdTime(String createdTime) {
            if (createdTime == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "createdTime");
            }
            this.createdTime = createdTime;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(String enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder endPort(Integer endPort) {
            if (endPort == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "endPort");
            }
            this.endPort = endPort;
            return this;
        }
        @CustomType.Setter
        public Builder establishedTimeout(Integer establishedTimeout) {
            if (establishedTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "establishedTimeout");
            }
            this.establishedTimeout = establishedTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder healthCheck(GetListenerHealthCheck healthCheck) {
            if (healthCheck == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "healthCheck");
            }
            this.healthCheck = healthCheck;
            return this;
        }
        @CustomType.Setter
        public Builder http2Enabled(String http2Enabled) {
            if (http2Enabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "http2Enabled");
            }
            this.http2Enabled = http2Enabled;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder keepaliveTimeout(Integer keepaliveTimeout) {
            if (keepaliveTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "keepaliveTimeout");
            }
            this.keepaliveTimeout = keepaliveTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder listenerId(String listenerId) {
            if (listenerId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "listenerId");
            }
            this.listenerId = listenerId;
            return this;
        }
        @CustomType.Setter
        public Builder listenerName(String listenerName) {
            if (listenerName == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "listenerName");
            }
            this.listenerName = listenerName;
            return this;
        }
        @CustomType.Setter
        public Builder loadBalancerId(String loadBalancerId) {
            if (loadBalancerId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "loadBalancerId");
            }
            this.loadBalancerId = loadBalancerId;
            return this;
        }
        @CustomType.Setter
        public Builder maxConnections(Integer maxConnections) {
            if (maxConnections == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "maxConnections");
            }
            this.maxConnections = maxConnections;
            return this;
        }
        @CustomType.Setter
        public Builder persistenceTimeout(Integer persistenceTimeout) {
            if (persistenceTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "persistenceTimeout");
            }
            this.persistenceTimeout = persistenceTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder persistenceType(String persistenceType) {
            if (persistenceType == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "persistenceType");
            }
            this.persistenceType = persistenceType;
            return this;
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder proxyConnectTimeout(Integer proxyConnectTimeout) {
            if (proxyConnectTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "proxyConnectTimeout");
            }
            this.proxyConnectTimeout = proxyConnectTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder proxyProtocolType(String proxyProtocolType) {
            if (proxyProtocolType == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "proxyProtocolType");
            }
            this.proxyProtocolType = proxyProtocolType;
            return this;
        }
        @CustomType.Setter
        public Builder proxyReadTimeout(Integer proxyReadTimeout) {
            if (proxyReadTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "proxyReadTimeout");
            }
            this.proxyReadTimeout = proxyReadTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder proxySendTimeout(Integer proxySendTimeout) {
            if (proxySendTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "proxySendTimeout");
            }
            this.proxySendTimeout = proxySendTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder scheduler(String scheduler) {
            if (scheduler == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "scheduler");
            }
            this.scheduler = scheduler;
            return this;
        }
        @CustomType.Setter
        public Builder securityPolicyId(String securityPolicyId) {
            if (securityPolicyId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "securityPolicyId");
            }
            this.securityPolicyId = securityPolicyId;
            return this;
        }
        @CustomType.Setter
        public Builder sendTimeout(Integer sendTimeout) {
            if (sendTimeout == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "sendTimeout");
            }
            this.sendTimeout = sendTimeout;
            return this;
        }
        @CustomType.Setter
        public Builder serverGroupId(String serverGroupId) {
            if (serverGroupId == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "serverGroupId");
            }
            this.serverGroupId = serverGroupId;
            return this;
        }
        @CustomType.Setter
        public Builder startPort(Integer startPort) {
            if (startPort == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "startPort");
            }
            this.startPort = startPort;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetListenerTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetListenerTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder updatedTime(String updatedTime) {
            if (updatedTime == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "updatedTime");
            }
            this.updatedTime = updatedTime;
            return this;
        }
        @CustomType.Setter
        public Builder wafProtectionEnabled(String wafProtectionEnabled) {
            if (wafProtectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetListenerResult", "wafProtectionEnabled");
            }
            this.wafProtectionEnabled = wafProtectionEnabled;
            return this;
        }
        public GetListenerResult build() {
            final var _resultValue = new GetListenerResult();
            _resultValue.aclIds = aclIds;
            _resultValue.aclStatus = aclStatus;
            _resultValue.aclType = aclType;
            _resultValue.bandwidth = bandwidth;
            _resultValue.caCertificateId = caCertificateId;
            _resultValue.caEnabled = caEnabled;
            _resultValue.certCenterCertificateId = certCenterCertificateId;
            _resultValue.certificateId = certificateId;
            _resultValue.certificateSource = certificateSource;
            _resultValue.clientBodyTimeout = clientBodyTimeout;
            _resultValue.clientHeaderTimeout = clientHeaderTimeout;
            _resultValue.connectionDrainEnabled = connectionDrainEnabled;
            _resultValue.connectionDrainTimeout = connectionDrainTimeout;
            _resultValue.cookie = cookie;
            _resultValue.cps = cps;
            _resultValue.createdTime = createdTime;
            _resultValue.description = description;
            _resultValue.enabled = enabled;
            _resultValue.endPort = endPort;
            _resultValue.establishedTimeout = establishedTimeout;
            _resultValue.healthCheck = healthCheck;
            _resultValue.http2Enabled = http2Enabled;
            _resultValue.id = id;
            _resultValue.keepaliveTimeout = keepaliveTimeout;
            _resultValue.listenerId = listenerId;
            _resultValue.listenerName = listenerName;
            _resultValue.loadBalancerId = loadBalancerId;
            _resultValue.maxConnections = maxConnections;
            _resultValue.persistenceTimeout = persistenceTimeout;
            _resultValue.persistenceType = persistenceType;
            _resultValue.port = port;
            _resultValue.protocol = protocol;
            _resultValue.proxyConnectTimeout = proxyConnectTimeout;
            _resultValue.proxyProtocolType = proxyProtocolType;
            _resultValue.proxyReadTimeout = proxyReadTimeout;
            _resultValue.proxySendTimeout = proxySendTimeout;
            _resultValue.scheduler = scheduler;
            _resultValue.securityPolicyId = securityPolicyId;
            _resultValue.sendTimeout = sendTimeout;
            _resultValue.serverGroupId = serverGroupId;
            _resultValue.startPort = startPort;
            _resultValue.status = status;
            _resultValue.tags = tags;
            _resultValue.updatedTime = updatedTime;
            _resultValue.wafProtectionEnabled = wafProtectionEnabled;
            return _resultValue;
        }
    }
}
