// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.vmp.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class WorkspaceInstanceTypeArgs extends com.pulumi.resources.ResourceArgs {

    public static final WorkspaceInstanceTypeArgs Empty = new WorkspaceInstanceTypeArgs();

    /**
     * 最大活跃时序数。
     * 
     */
    @Import(name="activeSeries")
    private @Nullable Output<Integer> activeSeries;

    /**
     * @return 最大活跃时序数。
     * 
     */
    public Optional<Output<Integer>> activeSeries() {
        return Optional.ofNullable(this.activeSeries);
    }

    /**
     * 可用区（az）数。
     * 
     */
    @Import(name="availabilityZoneReplicas")
    private @Nullable Output<Integer> availabilityZoneReplicas;

    /**
     * @return 可用区（az）数。
     * 
     */
    public Optional<Output<Integer>> availabilityZoneReplicas() {
        return Optional.ofNullable(this.availabilityZoneReplicas);
    }

    /**
     * 降采样策略。
     * 
     */
    @Import(name="downsamplingPeriods")
    private @Nullable Output<List<String>> downsamplingPeriods;

    /**
     * @return 降采样策略。
     * 
     */
    public Optional<Output<List<String>>> downsamplingPeriods() {
        return Optional.ofNullable(this.downsamplingPeriods);
    }

    /**
     * 最大每秒写入样本数。
     * 
     */
    @Import(name="ingestSamplesPerSecond")
    private @Nullable Output<Integer> ingestSamplesPerSecond;

    /**
     * @return 最大每秒写入样本数。
     * 
     */
    public Optional<Output<Integer>> ingestSamplesPerSecond() {
        return Optional.ofNullable(this.ingestSamplesPerSecond);
    }

    /**
     * 最大查询并发数。
     * 
     */
    @Import(name="queryConcurrency")
    private @Nullable Output<Integer> queryConcurrency;

    /**
     * @return 最大查询并发数。
     * 
     */
    public Optional<Output<Integer>> queryConcurrency() {
        return Optional.ofNullable(this.queryConcurrency);
    }

    /**
     * 最大查询 QPS。
     * 
     */
    @Import(name="queryPerSecond")
    private @Nullable Output<Integer> queryPerSecond;

    /**
     * @return 最大查询 QPS。
     * 
     */
    public Optional<Output<Integer>> queryPerSecond() {
        return Optional.ofNullable(this.queryPerSecond);
    }

    /**
     * 每个可用区（az）的数据副本数。
     * 
     */
    @Import(name="replicasPerZone")
    private @Nullable Output<Integer> replicasPerZone;

    /**
     * @return 每个可用区（az）的数据副本数。
     * 
     */
    public Optional<Output<Integer>> replicasPerZone() {
        return Optional.ofNullable(this.replicasPerZone);
    }

    /**
     * 最长数据保留时间。
     * 
     */
    @Import(name="retentionPeriod")
    private @Nullable Output<String> retentionPeriod;

    /**
     * @return 最长数据保留时间。
     * 
     */
    public Optional<Output<String>> retentionPeriod() {
        return Optional.ofNullable(this.retentionPeriod);
    }

    /**
     * 最大每秒扫描样本数。
     * 
     */
    @Import(name="scanSamplesPerSecond")
    private @Nullable Output<Integer> scanSamplesPerSecond;

    /**
     * @return 最大每秒扫描样本数。
     * 
     */
    public Optional<Output<Integer>> scanSamplesPerSecond() {
        return Optional.ofNullable(this.scanSamplesPerSecond);
    }

    /**
     * 最大每秒扫描时序数。
     * 
     */
    @Import(name="scanSeriesPerSecond")
    private @Nullable Output<Integer> scanSeriesPerSecond;

    /**
     * @return 最大每秒扫描时序数。
     * 
     */
    public Optional<Output<Integer>> scanSeriesPerSecond() {
        return Optional.ofNullable(this.scanSeriesPerSecond);
    }

    private WorkspaceInstanceTypeArgs() {}

    private WorkspaceInstanceTypeArgs(WorkspaceInstanceTypeArgs $) {
        this.activeSeries = $.activeSeries;
        this.availabilityZoneReplicas = $.availabilityZoneReplicas;
        this.downsamplingPeriods = $.downsamplingPeriods;
        this.ingestSamplesPerSecond = $.ingestSamplesPerSecond;
        this.queryConcurrency = $.queryConcurrency;
        this.queryPerSecond = $.queryPerSecond;
        this.replicasPerZone = $.replicasPerZone;
        this.retentionPeriod = $.retentionPeriod;
        this.scanSamplesPerSecond = $.scanSamplesPerSecond;
        this.scanSeriesPerSecond = $.scanSeriesPerSecond;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(WorkspaceInstanceTypeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private WorkspaceInstanceTypeArgs $;

        public Builder() {
            $ = new WorkspaceInstanceTypeArgs();
        }

        public Builder(WorkspaceInstanceTypeArgs defaults) {
            $ = new WorkspaceInstanceTypeArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param activeSeries 最大活跃时序数。
         * 
         * @return builder
         * 
         */
        public Builder activeSeries(@Nullable Output<Integer> activeSeries) {
            $.activeSeries = activeSeries;
            return this;
        }

        /**
         * @param activeSeries 最大活跃时序数。
         * 
         * @return builder
         * 
         */
        public Builder activeSeries(Integer activeSeries) {
            return activeSeries(Output.of(activeSeries));
        }

        /**
         * @param availabilityZoneReplicas 可用区（az）数。
         * 
         * @return builder
         * 
         */
        public Builder availabilityZoneReplicas(@Nullable Output<Integer> availabilityZoneReplicas) {
            $.availabilityZoneReplicas = availabilityZoneReplicas;
            return this;
        }

        /**
         * @param availabilityZoneReplicas 可用区（az）数。
         * 
         * @return builder
         * 
         */
        public Builder availabilityZoneReplicas(Integer availabilityZoneReplicas) {
            return availabilityZoneReplicas(Output.of(availabilityZoneReplicas));
        }

        /**
         * @param downsamplingPeriods 降采样策略。
         * 
         * @return builder
         * 
         */
        public Builder downsamplingPeriods(@Nullable Output<List<String>> downsamplingPeriods) {
            $.downsamplingPeriods = downsamplingPeriods;
            return this;
        }

        /**
         * @param downsamplingPeriods 降采样策略。
         * 
         * @return builder
         * 
         */
        public Builder downsamplingPeriods(List<String> downsamplingPeriods) {
            return downsamplingPeriods(Output.of(downsamplingPeriods));
        }

        /**
         * @param downsamplingPeriods 降采样策略。
         * 
         * @return builder
         * 
         */
        public Builder downsamplingPeriods(String... downsamplingPeriods) {
            return downsamplingPeriods(List.of(downsamplingPeriods));
        }

        /**
         * @param ingestSamplesPerSecond 最大每秒写入样本数。
         * 
         * @return builder
         * 
         */
        public Builder ingestSamplesPerSecond(@Nullable Output<Integer> ingestSamplesPerSecond) {
            $.ingestSamplesPerSecond = ingestSamplesPerSecond;
            return this;
        }

        /**
         * @param ingestSamplesPerSecond 最大每秒写入样本数。
         * 
         * @return builder
         * 
         */
        public Builder ingestSamplesPerSecond(Integer ingestSamplesPerSecond) {
            return ingestSamplesPerSecond(Output.of(ingestSamplesPerSecond));
        }

        /**
         * @param queryConcurrency 最大查询并发数。
         * 
         * @return builder
         * 
         */
        public Builder queryConcurrency(@Nullable Output<Integer> queryConcurrency) {
            $.queryConcurrency = queryConcurrency;
            return this;
        }

        /**
         * @param queryConcurrency 最大查询并发数。
         * 
         * @return builder
         * 
         */
        public Builder queryConcurrency(Integer queryConcurrency) {
            return queryConcurrency(Output.of(queryConcurrency));
        }

        /**
         * @param queryPerSecond 最大查询 QPS。
         * 
         * @return builder
         * 
         */
        public Builder queryPerSecond(@Nullable Output<Integer> queryPerSecond) {
            $.queryPerSecond = queryPerSecond;
            return this;
        }

        /**
         * @param queryPerSecond 最大查询 QPS。
         * 
         * @return builder
         * 
         */
        public Builder queryPerSecond(Integer queryPerSecond) {
            return queryPerSecond(Output.of(queryPerSecond));
        }

        /**
         * @param replicasPerZone 每个可用区（az）的数据副本数。
         * 
         * @return builder
         * 
         */
        public Builder replicasPerZone(@Nullable Output<Integer> replicasPerZone) {
            $.replicasPerZone = replicasPerZone;
            return this;
        }

        /**
         * @param replicasPerZone 每个可用区（az）的数据副本数。
         * 
         * @return builder
         * 
         */
        public Builder replicasPerZone(Integer replicasPerZone) {
            return replicasPerZone(Output.of(replicasPerZone));
        }

        /**
         * @param retentionPeriod 最长数据保留时间。
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(@Nullable Output<String> retentionPeriod) {
            $.retentionPeriod = retentionPeriod;
            return this;
        }

        /**
         * @param retentionPeriod 最长数据保留时间。
         * 
         * @return builder
         * 
         */
        public Builder retentionPeriod(String retentionPeriod) {
            return retentionPeriod(Output.of(retentionPeriod));
        }

        /**
         * @param scanSamplesPerSecond 最大每秒扫描样本数。
         * 
         * @return builder
         * 
         */
        public Builder scanSamplesPerSecond(@Nullable Output<Integer> scanSamplesPerSecond) {
            $.scanSamplesPerSecond = scanSamplesPerSecond;
            return this;
        }

        /**
         * @param scanSamplesPerSecond 最大每秒扫描样本数。
         * 
         * @return builder
         * 
         */
        public Builder scanSamplesPerSecond(Integer scanSamplesPerSecond) {
            return scanSamplesPerSecond(Output.of(scanSamplesPerSecond));
        }

        /**
         * @param scanSeriesPerSecond 最大每秒扫描时序数。
         * 
         * @return builder
         * 
         */
        public Builder scanSeriesPerSecond(@Nullable Output<Integer> scanSeriesPerSecond) {
            $.scanSeriesPerSecond = scanSeriesPerSecond;
            return this;
        }

        /**
         * @param scanSeriesPerSecond 最大每秒扫描时序数。
         * 
         * @return builder
         * 
         */
        public Builder scanSeriesPerSecond(Integer scanSeriesPerSecond) {
            return scanSeriesPerSecond(Output.of(scanSeriesPerSecond));
        }

        public WorkspaceInstanceTypeArgs build() {
            return $;
        }
    }

}
