// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCommandParameterDefinition {
    /**
     * @return 自定义参数值（数字）允许的小数点后位数。
     * 
     */
    private Integer decimalPrecision;
    /**
     * @return 自定义参数默认值。
     * 
     */
    private String defaultValue;
    /**
     * @return 自定义参数值（字符串）的最大长度。
     * 
     */
    private Integer maxLength;
    /**
     * @return 自定义参数值（数字）的最大值。
     * 
     */
    private String maxValue;
    /**
     * @return 自定义参数值（字符串）的最小长度。
     * 
     */
    private Integer minLength;
    /**
     * @return 自定义参数值（数字）的最小值。
     * 
     */
    private String minValue;
    /**
     * @return 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
     * 
     */
    private String name;
    /**
     * @return 是否必填。
     * 
     */
    private Boolean required;
    /**
     * @return 自定义参数类型。
     * 
     */
    private String type;

    private GetCommandParameterDefinition() {}
    /**
     * @return 自定义参数值（数字）允许的小数点后位数。
     * 
     */
    public Integer decimalPrecision() {
        return this.decimalPrecision;
    }
    /**
     * @return 自定义参数默认值。
     * 
     */
    public String defaultValue() {
        return this.defaultValue;
    }
    /**
     * @return 自定义参数值（字符串）的最大长度。
     * 
     */
    public Integer maxLength() {
        return this.maxLength;
    }
    /**
     * @return 自定义参数值（数字）的最大值。
     * 
     */
    public String maxValue() {
        return this.maxValue;
    }
    /**
     * @return 自定义参数值（字符串）的最小长度。
     * 
     */
    public Integer minLength() {
        return this.minLength;
    }
    /**
     * @return 自定义参数值（数字）的最小值。
     * 
     */
    public String minValue() {
        return this.minValue;
    }
    /**
     * @return 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return 是否必填。
     * 
     */
    public Boolean required() {
        return this.required;
    }
    /**
     * @return 自定义参数类型。
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCommandParameterDefinition defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer decimalPrecision;
        private String defaultValue;
        private Integer maxLength;
        private String maxValue;
        private Integer minLength;
        private String minValue;
        private String name;
        private Boolean required;
        private String type;
        public Builder() {}
        public Builder(GetCommandParameterDefinition defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.decimalPrecision = defaults.decimalPrecision;
    	      this.defaultValue = defaults.defaultValue;
    	      this.maxLength = defaults.maxLength;
    	      this.maxValue = defaults.maxValue;
    	      this.minLength = defaults.minLength;
    	      this.minValue = defaults.minValue;
    	      this.name = defaults.name;
    	      this.required = defaults.required;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder decimalPrecision(Integer decimalPrecision) {
            if (decimalPrecision == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "decimalPrecision");
            }
            this.decimalPrecision = decimalPrecision;
            return this;
        }
        @CustomType.Setter
        public Builder defaultValue(String defaultValue) {
            if (defaultValue == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "defaultValue");
            }
            this.defaultValue = defaultValue;
            return this;
        }
        @CustomType.Setter
        public Builder maxLength(Integer maxLength) {
            if (maxLength == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "maxLength");
            }
            this.maxLength = maxLength;
            return this;
        }
        @CustomType.Setter
        public Builder maxValue(String maxValue) {
            if (maxValue == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "maxValue");
            }
            this.maxValue = maxValue;
            return this;
        }
        @CustomType.Setter
        public Builder minLength(Integer minLength) {
            if (minLength == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "minLength");
            }
            this.minLength = minLength;
            return this;
        }
        @CustomType.Setter
        public Builder minValue(String minValue) {
            if (minValue == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "minValue");
            }
            this.minValue = minValue;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder required(Boolean required) {
            if (required == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "required");
            }
            this.required = required;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCommandParameterDefinition", "type");
            }
            this.type = type;
            return this;
        }
        public GetCommandParameterDefinition build() {
            final var _resultValue = new GetCommandParameterDefinition();
            _resultValue.decimalPrecision = decimalPrecision;
            _resultValue.defaultValue = defaultValue;
            _resultValue.maxLength = maxLength;
            _resultValue.maxValue = maxValue;
            _resultValue.minLength = minLength;
            _resultValue.minValue = minValue;
            _resultValue.name = name;
            _resultValue.required = required;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
