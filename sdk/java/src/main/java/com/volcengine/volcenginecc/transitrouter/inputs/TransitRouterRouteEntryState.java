// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.transitrouter.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TransitRouterRouteEntryState extends com.pulumi.resources.ResourceArgs {

    public static final TransitRouterRouteEntryState Empty = new TransitRouterRouteEntryState();

    /**
     * 路由条目的AS路径。
     * 
     */
    @Import(name="asPaths")
    private @Nullable Output<List<String>> asPaths;

    /**
     * @return 路由条目的AS路径。
     * 
     */
    public Optional<Output<List<String>>> asPaths() {
        return Optional.ofNullable(this.asPaths);
    }

    /**
     * 路由条目的创建时间。
     * 
     */
    @Import(name="creationTime")
    private @Nullable Output<String> creationTime;

    /**
     * @return 路由条目的创建时间。
     * 
     */
    public Optional<Output<String>> creationTime() {
        return Optional.ofNullable(this.creationTime);
    }

    /**
     * TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * 路由条目的目标网段。
     * 
     */
    @Import(name="destinationCidrBlock")
    private @Nullable Output<String> destinationCidrBlock;

    /**
     * @return 路由条目的目标网段。
     * 
     */
    public Optional<Output<String>> destinationCidrBlock() {
        return Optional.ofNullable(this.destinationCidrBlock);
    }

    /**
     * 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * TR路由条目的ID。
     * 
     */
    @Import(name="transitRouterRouteEntryId")
    private @Nullable Output<String> transitRouterRouteEntryId;

    /**
     * @return TR路由条目的ID。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryId() {
        return Optional.ofNullable(this.transitRouterRouteEntryId);
    }

    /**
     * 路由条目的名称。
     * 
     */
    @Import(name="transitRouterRouteEntryName")
    private @Nullable Output<String> transitRouterRouteEntryName;

    /**
     * @return 路由条目的名称。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryName() {
        return Optional.ofNullable(this.transitRouterRouteEntryName);
    }

    /**
     * 路由条目的下一跳ID。
     * 
     */
    @Import(name="transitRouterRouteEntryNextHopId")
    private @Nullable Output<String> transitRouterRouteEntryNextHopId;

    /**
     * @return 路由条目的下一跳ID。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryNextHopId() {
        return Optional.ofNullable(this.transitRouterRouteEntryNextHopId);
    }

    /**
     * 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
     * 
     */
    @Import(name="transitRouterRouteEntryNextHopType")
    private @Nullable Output<String> transitRouterRouteEntryNextHopType;

    /**
     * @return 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryNextHopType() {
        return Optional.ofNullable(this.transitRouterRouteEntryNextHopType);
    }

    /**
     * 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
     * 
     */
    @Import(name="transitRouterRouteEntryType")
    private @Nullable Output<String> transitRouterRouteEntryType;

    /**
     * @return 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
     * 
     */
    public Optional<Output<String>> transitRouterRouteEntryType() {
        return Optional.ofNullable(this.transitRouterRouteEntryType);
    }

    /**
     * 中转路由器实例关联的路由表的ID。
     * 
     */
    @Import(name="transitRouterRouteTableId")
    private @Nullable Output<String> transitRouterRouteTableId;

    /**
     * @return 中转路由器实例关联的路由表的ID。
     * 
     */
    public Optional<Output<String>> transitRouterRouteTableId() {
        return Optional.ofNullable(this.transitRouterRouteTableId);
    }

    /**
     * 路由条目的更新时间。
     * 
     */
    @Import(name="updateTime")
    private @Nullable Output<String> updateTime;

    /**
     * @return 路由条目的更新时间。
     * 
     */
    public Optional<Output<String>> updateTime() {
        return Optional.ofNullable(this.updateTime);
    }

    private TransitRouterRouteEntryState() {}

    private TransitRouterRouteEntryState(TransitRouterRouteEntryState $) {
        this.asPaths = $.asPaths;
        this.creationTime = $.creationTime;
        this.description = $.description;
        this.destinationCidrBlock = $.destinationCidrBlock;
        this.status = $.status;
        this.transitRouterRouteEntryId = $.transitRouterRouteEntryId;
        this.transitRouterRouteEntryName = $.transitRouterRouteEntryName;
        this.transitRouterRouteEntryNextHopId = $.transitRouterRouteEntryNextHopId;
        this.transitRouterRouteEntryNextHopType = $.transitRouterRouteEntryNextHopType;
        this.transitRouterRouteEntryType = $.transitRouterRouteEntryType;
        this.transitRouterRouteTableId = $.transitRouterRouteTableId;
        this.updateTime = $.updateTime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TransitRouterRouteEntryState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TransitRouterRouteEntryState $;

        public Builder() {
            $ = new TransitRouterRouteEntryState();
        }

        public Builder(TransitRouterRouteEntryState defaults) {
            $ = new TransitRouterRouteEntryState(Objects.requireNonNull(defaults));
        }

        /**
         * @param asPaths 路由条目的AS路径。
         * 
         * @return builder
         * 
         */
        public Builder asPaths(@Nullable Output<List<String>> asPaths) {
            $.asPaths = asPaths;
            return this;
        }

        /**
         * @param asPaths 路由条目的AS路径。
         * 
         * @return builder
         * 
         */
        public Builder asPaths(List<String> asPaths) {
            return asPaths(Output.of(asPaths));
        }

        /**
         * @param asPaths 路由条目的AS路径。
         * 
         * @return builder
         * 
         */
        public Builder asPaths(String... asPaths) {
            return asPaths(List.of(asPaths));
        }

        /**
         * @param creationTime 路由条目的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder creationTime(@Nullable Output<String> creationTime) {
            $.creationTime = creationTime;
            return this;
        }

        /**
         * @param creationTime 路由条目的创建时间。
         * 
         * @return builder
         * 
         */
        public Builder creationTime(String creationTime) {
            return creationTime(Output.of(creationTime));
        }

        /**
         * @param description TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param destinationCidrBlock 路由条目的目标网段。
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(@Nullable Output<String> destinationCidrBlock) {
            $.destinationCidrBlock = destinationCidrBlock;
            return this;
        }

        /**
         * @param destinationCidrBlock 路由条目的目标网段。
         * 
         * @return builder
         * 
         */
        public Builder destinationCidrBlock(String destinationCidrBlock) {
            return destinationCidrBlock(Output.of(destinationCidrBlock));
        }

        /**
         * @param status 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param transitRouterRouteEntryId TR路由条目的ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryId(@Nullable Output<String> transitRouterRouteEntryId) {
            $.transitRouterRouteEntryId = transitRouterRouteEntryId;
            return this;
        }

        /**
         * @param transitRouterRouteEntryId TR路由条目的ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryId(String transitRouterRouteEntryId) {
            return transitRouterRouteEntryId(Output.of(transitRouterRouteEntryId));
        }

        /**
         * @param transitRouterRouteEntryName 路由条目的名称。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryName(@Nullable Output<String> transitRouterRouteEntryName) {
            $.transitRouterRouteEntryName = transitRouterRouteEntryName;
            return this;
        }

        /**
         * @param transitRouterRouteEntryName 路由条目的名称。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryName(String transitRouterRouteEntryName) {
            return transitRouterRouteEntryName(Output.of(transitRouterRouteEntryName));
        }

        /**
         * @param transitRouterRouteEntryNextHopId 路由条目的下一跳ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopId(@Nullable Output<String> transitRouterRouteEntryNextHopId) {
            $.transitRouterRouteEntryNextHopId = transitRouterRouteEntryNextHopId;
            return this;
        }

        /**
         * @param transitRouterRouteEntryNextHopId 路由条目的下一跳ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopId(String transitRouterRouteEntryNextHopId) {
            return transitRouterRouteEntryNextHopId(Output.of(transitRouterRouteEntryNextHopId));
        }

        /**
         * @param transitRouterRouteEntryNextHopType 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopType(@Nullable Output<String> transitRouterRouteEntryNextHopType) {
            $.transitRouterRouteEntryNextHopType = transitRouterRouteEntryNextHopType;
            return this;
        }

        /**
         * @param transitRouterRouteEntryNextHopType 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryNextHopType(String transitRouterRouteEntryNextHopType) {
            return transitRouterRouteEntryNextHopType(Output.of(transitRouterRouteEntryNextHopType));
        }

        /**
         * @param transitRouterRouteEntryType 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryType(@Nullable Output<String> transitRouterRouteEntryType) {
            $.transitRouterRouteEntryType = transitRouterRouteEntryType;
            return this;
        }

        /**
         * @param transitRouterRouteEntryType 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteEntryType(String transitRouterRouteEntryType) {
            return transitRouterRouteEntryType(Output.of(transitRouterRouteEntryType));
        }

        /**
         * @param transitRouterRouteTableId 中转路由器实例关联的路由表的ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(@Nullable Output<String> transitRouterRouteTableId) {
            $.transitRouterRouteTableId = transitRouterRouteTableId;
            return this;
        }

        /**
         * @param transitRouterRouteTableId 中转路由器实例关联的路由表的ID。
         * 
         * @return builder
         * 
         */
        public Builder transitRouterRouteTableId(String transitRouterRouteTableId) {
            return transitRouterRouteTableId(Output.of(transitRouterRouteTableId));
        }

        /**
         * @param updateTime 路由条目的更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(@Nullable Output<String> updateTime) {
            $.updateTime = updateTime;
            return this;
        }

        /**
         * @param updateTime 路由条目的更新时间。
         * 
         * @return builder
         * 
         */
        public Builder updateTime(String updateTime) {
            return updateTime(Output.of(updateTime));
        }

        public TransitRouterRouteEntryState build() {
            return $;
        }
    }

}
