// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.redis.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InstanceVisitAddrArgs extends com.pulumi.resources.ResourceArgs {

    public static final InstanceVisitAddrArgs Empty = new InstanceVisitAddrArgs();

    /**
     * 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
     * 
     */
    @Import(name="addrType")
    private @Nullable Output<String> addrType;

    /**
     * @return 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
     * 
     */
    public Optional<Output<String>> addrType() {
        return Optional.ofNullable(this.addrType);
    }

    /**
     * IP 地址或者域名。
     * 
     */
    @Import(name="address")
    private @Nullable Output<String> address;

    /**
     * @return IP 地址或者域名。
     * 
     */
    public Optional<Output<String>> address() {
        return Optional.ofNullable(this.address);
    }

    /**
     * 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
     * 
     */
    @Import(name="eipId")
    private @Nullable Output<String> eipId;

    /**
     * @return 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
     * 
     */
    public Optional<Output<String>> eipId() {
        return Optional.ofNullable(this.eipId);
    }

    /**
     * 端口号。
     * 
     */
    @Import(name="port")
    private @Nullable Output<String> port;

    /**
     * @return 端口号。
     * 
     */
    public Optional<Output<String>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * 连接地址所对应的 IPv6 地址。
     * 
     */
    @Import(name="viPv6")
    private @Nullable Output<String> viPv6;

    /**
     * @return 连接地址所对应的 IPv6 地址。
     * 
     */
    public Optional<Output<String>> viPv6() {
        return Optional.ofNullable(this.viPv6);
    }

    /**
     * 连接地址所对应的 IPv4 地址。
     * 
     */
    @Import(name="vip")
    private @Nullable Output<String> vip;

    /**
     * @return 连接地址所对应的 IPv4 地址。
     * 
     */
    public Optional<Output<String>> vip() {
        return Optional.ofNullable(this.vip);
    }

    private InstanceVisitAddrArgs() {}

    private InstanceVisitAddrArgs(InstanceVisitAddrArgs $) {
        this.addrType = $.addrType;
        this.address = $.address;
        this.eipId = $.eipId;
        this.port = $.port;
        this.viPv6 = $.viPv6;
        this.vip = $.vip;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InstanceVisitAddrArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InstanceVisitAddrArgs $;

        public Builder() {
            $ = new InstanceVisitAddrArgs();
        }

        public Builder(InstanceVisitAddrArgs defaults) {
            $ = new InstanceVisitAddrArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param addrType 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
         * 
         * @return builder
         * 
         */
        public Builder addrType(@Nullable Output<String> addrType) {
            $.addrType = addrType;
            return this;
        }

        /**
         * @param addrType 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
         * 
         * @return builder
         * 
         */
        public Builder addrType(String addrType) {
            return addrType(Output.of(addrType));
        }

        /**
         * @param address IP 地址或者域名。
         * 
         * @return builder
         * 
         */
        public Builder address(@Nullable Output<String> address) {
            $.address = address;
            return this;
        }

        /**
         * @param address IP 地址或者域名。
         * 
         * @return builder
         * 
         */
        public Builder address(String address) {
            return address(Output.of(address));
        }

        /**
         * @param eipId 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
         * 
         * @return builder
         * 
         */
        public Builder eipId(@Nullable Output<String> eipId) {
            $.eipId = eipId;
            return this;
        }

        /**
         * @param eipId 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
         * 
         * @return builder
         * 
         */
        public Builder eipId(String eipId) {
            return eipId(Output.of(eipId));
        }

        /**
         * @param port 端口号。
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<String> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port 端口号。
         * 
         * @return builder
         * 
         */
        public Builder port(String port) {
            return port(Output.of(port));
        }

        /**
         * @param viPv6 连接地址所对应的 IPv6 地址。
         * 
         * @return builder
         * 
         */
        public Builder viPv6(@Nullable Output<String> viPv6) {
            $.viPv6 = viPv6;
            return this;
        }

        /**
         * @param viPv6 连接地址所对应的 IPv6 地址。
         * 
         * @return builder
         * 
         */
        public Builder viPv6(String viPv6) {
            return viPv6(Output.of(viPv6));
        }

        /**
         * @param vip 连接地址所对应的 IPv4 地址。
         * 
         * @return builder
         * 
         */
        public Builder vip(@Nullable Output<String> vip) {
            $.vip = vip;
            return this;
        }

        /**
         * @param vip 连接地址所对应的 IPv4 地址。
         * 
         * @return builder
         * 
         */
        public Builder vip(String vip) {
            return vip(Output.of(vip));
        }

        public InstanceVisitAddrArgs build() {
            return $;
        }
    }

}
