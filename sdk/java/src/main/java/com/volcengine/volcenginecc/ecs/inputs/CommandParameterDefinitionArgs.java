// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.volcengine.volcenginecc.ecs.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CommandParameterDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final CommandParameterDefinitionArgs Empty = new CommandParameterDefinitionArgs();

    /**
     * 自定义参数值（数字）允许的小数点后位数。
     * 
     */
    @Import(name="decimalPrecision")
    private @Nullable Output<Integer> decimalPrecision;

    /**
     * @return 自定义参数值（数字）允许的小数点后位数。
     * 
     */
    public Optional<Output<Integer>> decimalPrecision() {
        return Optional.ofNullable(this.decimalPrecision);
    }

    /**
     * 自定义参数默认值。
     * 
     */
    @Import(name="defaultValue")
    private @Nullable Output<String> defaultValue;

    /**
     * @return 自定义参数默认值。
     * 
     */
    public Optional<Output<String>> defaultValue() {
        return Optional.ofNullable(this.defaultValue);
    }

    /**
     * 自定义参数值（字符串）的最大长度。
     * 
     */
    @Import(name="maxLength")
    private @Nullable Output<Integer> maxLength;

    /**
     * @return 自定义参数值（字符串）的最大长度。
     * 
     */
    public Optional<Output<Integer>> maxLength() {
        return Optional.ofNullable(this.maxLength);
    }

    /**
     * 自定义参数值（数字）的最大值。
     * 
     */
    @Import(name="maxValue")
    private @Nullable Output<String> maxValue;

    /**
     * @return 自定义参数值（数字）的最大值。
     * 
     */
    public Optional<Output<String>> maxValue() {
        return Optional.ofNullable(this.maxValue);
    }

    /**
     * 自定义参数值（字符串）的最小长度。
     * 
     */
    @Import(name="minLength")
    private @Nullable Output<Integer> minLength;

    /**
     * @return 自定义参数值（字符串）的最小长度。
     * 
     */
    public Optional<Output<Integer>> minLength() {
        return Optional.ofNullable(this.minLength);
    }

    /**
     * 自定义参数值（数字）的最小值。
     * 
     */
    @Import(name="minValue")
    private @Nullable Output<String> minValue;

    /**
     * @return 自定义参数值（数字）的最小值。
     * 
     */
    public Optional<Output<String>> minValue() {
        return Optional.ofNullable(this.minValue);
    }

    /**
     * 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * 是否必填。
     * 
     */
    @Import(name="required")
    private @Nullable Output<Boolean> required;

    /**
     * @return 是否必填。
     * 
     */
    public Optional<Output<Boolean>> required() {
        return Optional.ofNullable(this.required);
    }

    /**
     * 自定义参数类型。
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return 自定义参数类型。
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private CommandParameterDefinitionArgs() {}

    private CommandParameterDefinitionArgs(CommandParameterDefinitionArgs $) {
        this.decimalPrecision = $.decimalPrecision;
        this.defaultValue = $.defaultValue;
        this.maxLength = $.maxLength;
        this.maxValue = $.maxValue;
        this.minLength = $.minLength;
        this.minValue = $.minValue;
        this.name = $.name;
        this.required = $.required;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CommandParameterDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CommandParameterDefinitionArgs $;

        public Builder() {
            $ = new CommandParameterDefinitionArgs();
        }

        public Builder(CommandParameterDefinitionArgs defaults) {
            $ = new CommandParameterDefinitionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param decimalPrecision 自定义参数值（数字）允许的小数点后位数。
         * 
         * @return builder
         * 
         */
        public Builder decimalPrecision(@Nullable Output<Integer> decimalPrecision) {
            $.decimalPrecision = decimalPrecision;
            return this;
        }

        /**
         * @param decimalPrecision 自定义参数值（数字）允许的小数点后位数。
         * 
         * @return builder
         * 
         */
        public Builder decimalPrecision(Integer decimalPrecision) {
            return decimalPrecision(Output.of(decimalPrecision));
        }

        /**
         * @param defaultValue 自定义参数默认值。
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(@Nullable Output<String> defaultValue) {
            $.defaultValue = defaultValue;
            return this;
        }

        /**
         * @param defaultValue 自定义参数默认值。
         * 
         * @return builder
         * 
         */
        public Builder defaultValue(String defaultValue) {
            return defaultValue(Output.of(defaultValue));
        }

        /**
         * @param maxLength 自定义参数值（字符串）的最大长度。
         * 
         * @return builder
         * 
         */
        public Builder maxLength(@Nullable Output<Integer> maxLength) {
            $.maxLength = maxLength;
            return this;
        }

        /**
         * @param maxLength 自定义参数值（字符串）的最大长度。
         * 
         * @return builder
         * 
         */
        public Builder maxLength(Integer maxLength) {
            return maxLength(Output.of(maxLength));
        }

        /**
         * @param maxValue 自定义参数值（数字）的最大值。
         * 
         * @return builder
         * 
         */
        public Builder maxValue(@Nullable Output<String> maxValue) {
            $.maxValue = maxValue;
            return this;
        }

        /**
         * @param maxValue 自定义参数值（数字）的最大值。
         * 
         * @return builder
         * 
         */
        public Builder maxValue(String maxValue) {
            return maxValue(Output.of(maxValue));
        }

        /**
         * @param minLength 自定义参数值（字符串）的最小长度。
         * 
         * @return builder
         * 
         */
        public Builder minLength(@Nullable Output<Integer> minLength) {
            $.minLength = minLength;
            return this;
        }

        /**
         * @param minLength 自定义参数值（字符串）的最小长度。
         * 
         * @return builder
         * 
         */
        public Builder minLength(Integer minLength) {
            return minLength(Output.of(minLength));
        }

        /**
         * @param minValue 自定义参数值（数字）的最小值。
         * 
         * @return builder
         * 
         */
        public Builder minValue(@Nullable Output<String> minValue) {
            $.minValue = minValue;
            return this;
        }

        /**
         * @param minValue 自定义参数值（数字）的最小值。
         * 
         * @return builder
         * 
         */
        public Builder minValue(String minValue) {
            return minValue(Output.of(minValue));
        }

        /**
         * @param name 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param required 是否必填。
         * 
         * @return builder
         * 
         */
        public Builder required(@Nullable Output<Boolean> required) {
            $.required = required;
            return this;
        }

        /**
         * @param required 是否必填。
         * 
         * @return builder
         * 
         */
        public Builder required(Boolean required) {
            return required(Output.of(required));
        }

        /**
         * @param type 自定义参数类型。
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type 自定义参数类型。
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CommandParameterDefinitionArgs build() {
            return $;
        }
    }

}
