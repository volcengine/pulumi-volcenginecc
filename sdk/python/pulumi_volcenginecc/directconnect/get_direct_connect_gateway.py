# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetDirectConnectGatewayResult',
    'AwaitableGetDirectConnectGatewayResult',
    'get_direct_connect_gateway',
    'get_direct_connect_gateway_output',
]

@pulumi.output_type
class GetDirectConnectGatewayResult:
    """
    A collection of values returned by getDirectConnectGateway.
    """
    def __init__(__self__, account_id=None, associate_cens=None, business_status=None, created_time=None, deleted_time=None, description=None, direct_connect_gateway_id=None, direct_connect_gateway_name=None, enable_ipv6=None, id=None, lock_reason=None, overdue_time=None, project_name=None, status=None, tags=None, updated_time=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if associate_cens and not isinstance(associate_cens, list):
            raise TypeError("Expected argument 'associate_cens' to be a list")
        pulumi.set(__self__, "associate_cens", associate_cens)
        if business_status and not isinstance(business_status, str):
            raise TypeError("Expected argument 'business_status' to be a str")
        pulumi.set(__self__, "business_status", business_status)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if deleted_time and not isinstance(deleted_time, str):
            raise TypeError("Expected argument 'deleted_time' to be a str")
        pulumi.set(__self__, "deleted_time", deleted_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if direct_connect_gateway_id and not isinstance(direct_connect_gateway_id, str):
            raise TypeError("Expected argument 'direct_connect_gateway_id' to be a str")
        pulumi.set(__self__, "direct_connect_gateway_id", direct_connect_gateway_id)
        if direct_connect_gateway_name and not isinstance(direct_connect_gateway_name, str):
            raise TypeError("Expected argument 'direct_connect_gateway_name' to be a str")
        pulumi.set(__self__, "direct_connect_gateway_name", direct_connect_gateway_name)
        if enable_ipv6 and not isinstance(enable_ipv6, bool):
            raise TypeError("Expected argument 'enable_ipv6' to be a bool")
        pulumi.set(__self__, "enable_ipv6", enable_ipv6)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if lock_reason and not isinstance(lock_reason, str):
            raise TypeError("Expected argument 'lock_reason' to be a str")
        pulumi.set(__self__, "lock_reason", lock_reason)
        if overdue_time and not isinstance(overdue_time, str):
            raise TypeError("Expected argument 'overdue_time' to be a str")
        pulumi.set(__self__, "overdue_time", overdue_time)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        专线网关所属账号的ID。
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="associateCens")
    def associate_cens(self) -> Sequence['outputs.GetDirectConnectGatewayAssociateCenResult']:
        """
        关联的CEN信息。
        """
        return pulumi.get(self, "associate_cens")

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> builtins.str:
        """
        专线网关是否被锁定。Normal：正常。FinancialLocked：被锁定。
        """
        return pulumi.get(self, "business_status")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> builtins.str:
        """
        创建专线网关的时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="deletedTime")
    def deleted_time(self) -> builtins.str:
        """
        预期资源强制回收时间。仅当资源因为欠费冻结，此参数才会有返回值，否则均返回空值。
        """
        return pulumi.get(self, "deleted_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        专线网关的描述信息。以中文、字母、数字开头，只能包含中文、字母、数字、点号（.）、空格（ ）、下划线（_）、中划线（-）、等号（=）、英文逗号（,）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directConnectGatewayId")
    def direct_connect_gateway_id(self) -> builtins.str:
        """
        专线网关的ID。
        """
        return pulumi.get(self, "direct_connect_gateway_id")

    @property
    @pulumi.getter(name="directConnectGatewayName")
    def direct_connect_gateway_name(self) -> builtins.str:
        """
        专线网关的名称。以中文、字母、数字开头，只能包含中文、字母、数字、点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为专线网关的ID。
        """
        return pulumi.get(self, "direct_connect_gateway_name")

    @property
    @pulumi.getter(name="enableIpv6")
    def enable_ipv6(self) -> builtins.bool:
        """
        是否支持IPv6。true：支持。false：不支持。
        """
        return pulumi.get(self, "enable_ipv6")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lockReason")
    def lock_reason(self) -> builtins.str:
        """
        专线网关被锁定的原因。unlock：解锁。financial：因欠费被锁定。security：因安全被锁定。
        """
        return pulumi.get(self, "lock_reason")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> builtins.str:
        """
        资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值，否则均返回空值。
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        专线网关所属的项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        专线网关的状态。Creating：创建中。Deleting：删除中。Pending：配置中。Available：可用。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetDirectConnectGatewayTagResult']:
        """
        专线网关已添加的全部标签信息。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> builtins.str:
        """
        更新专线网关的时间。
        """
        return pulumi.get(self, "updated_time")


class AwaitableGetDirectConnectGatewayResult(GetDirectConnectGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDirectConnectGatewayResult(
            account_id=self.account_id,
            associate_cens=self.associate_cens,
            business_status=self.business_status,
            created_time=self.created_time,
            deleted_time=self.deleted_time,
            description=self.description,
            direct_connect_gateway_id=self.direct_connect_gateway_id,
            direct_connect_gateway_name=self.direct_connect_gateway_name,
            enable_ipv6=self.enable_ipv6,
            id=self.id,
            lock_reason=self.lock_reason,
            overdue_time=self.overdue_time,
            project_name=self.project_name,
            status=self.status,
            tags=self.tags,
            updated_time=self.updated_time)


def get_direct_connect_gateway(id: Optional[builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDirectConnectGatewayResult:
    """
    Data Source schema for Volcengine::DirectConnect::DirectConnectGateway


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:directconnect/getDirectConnectGateway:getDirectConnectGateway', __args__, opts=opts, typ=GetDirectConnectGatewayResult).value

    return AwaitableGetDirectConnectGatewayResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        associate_cens=pulumi.get(__ret__, 'associate_cens'),
        business_status=pulumi.get(__ret__, 'business_status'),
        created_time=pulumi.get(__ret__, 'created_time'),
        deleted_time=pulumi.get(__ret__, 'deleted_time'),
        description=pulumi.get(__ret__, 'description'),
        direct_connect_gateway_id=pulumi.get(__ret__, 'direct_connect_gateway_id'),
        direct_connect_gateway_name=pulumi.get(__ret__, 'direct_connect_gateway_name'),
        enable_ipv6=pulumi.get(__ret__, 'enable_ipv6'),
        id=pulumi.get(__ret__, 'id'),
        lock_reason=pulumi.get(__ret__, 'lock_reason'),
        overdue_time=pulumi.get(__ret__, 'overdue_time'),
        project_name=pulumi.get(__ret__, 'project_name'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'))
def get_direct_connect_gateway_output(id: Optional[pulumi.Input[builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDirectConnectGatewayResult]:
    """
    Data Source schema for Volcengine::DirectConnect::DirectConnectGateway


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:directconnect/getDirectConnectGateway:getDirectConnectGateway', __args__, opts=opts, typ=GetDirectConnectGatewayResult)
    return __ret__.apply(lambda __response__: GetDirectConnectGatewayResult(
        account_id=pulumi.get(__response__, 'account_id'),
        associate_cens=pulumi.get(__response__, 'associate_cens'),
        business_status=pulumi.get(__response__, 'business_status'),
        created_time=pulumi.get(__response__, 'created_time'),
        deleted_time=pulumi.get(__response__, 'deleted_time'),
        description=pulumi.get(__response__, 'description'),
        direct_connect_gateway_id=pulumi.get(__response__, 'direct_connect_gateway_id'),
        direct_connect_gateway_name=pulumi.get(__response__, 'direct_connect_gateway_name'),
        enable_ipv6=pulumi.get(__response__, 'enable_ipv6'),
        id=pulumi.get(__response__, 'id'),
        lock_reason=pulumi.get(__response__, 'lock_reason'),
        overdue_time=pulumi.get(__response__, 'overdue_time'),
        project_name=pulumi.get(__response__, 'project_name'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time')))
