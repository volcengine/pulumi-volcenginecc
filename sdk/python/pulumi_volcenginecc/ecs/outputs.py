# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'ImageDetectionResults',
    'ImageDetectionResultsItem',
    'ImageSnapshot',
    'ImageTag',
    'GetImageDetectionResultsResult',
    'GetImageDetectionResultsItemResult',
    'GetImageSnapshotResult',
    'GetImageTagResult',
]

@pulumi.output_type
class ImageDetectionResults(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "detectionStatus":
            suggest = "detection_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageDetectionResults. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageDetectionResults.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageDetectionResults.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 detection_status: Optional[builtins.str] = None,
                 items: Optional[Sequence['outputs.ImageDetectionResultsItem']] = None):
        """
        :param builtins.str detection_status: 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        if detection_status is not None:
            pulumi.set(__self__, "detection_status", detection_status)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="detectionStatus")
    def detection_status(self) -> Optional[builtins.str]:
        """
        检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        return pulumi.get(self, "detection_status")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.ImageDetectionResultsItem']]:
        return pulumi.get(self, "items")


@pulumi.output_type
class ImageDetectionResultsItem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "riskCode":
            suggest = "risk_code"
        elif key == "riskLevel":
            suggest = "risk_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageDetectionResultsItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageDetectionResultsItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageDetectionResultsItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[builtins.str] = None,
                 result: Optional[builtins.str] = None,
                 risk_code: Optional[builtins.str] = None,
                 risk_level: Optional[builtins.str] = None):
        """
        :param builtins.str name: 检测项名称。
        :param builtins.str result: 该检测项对应结果。
        :param builtins.str risk_code: 风险描述码。
        :param builtins.str risk_level: 风险等级。若该参数返回值为空，表示无风险。
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if risk_code is not None:
            pulumi.set(__self__, "risk_code", risk_code)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        检测项名称。
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> Optional[builtins.str]:
        """
        该检测项对应结果。
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="riskCode")
    def risk_code(self) -> Optional[builtins.str]:
        """
        风险描述码。
        """
        return pulumi.get(self, "risk_code")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[builtins.str]:
        """
        风险等级。若该参数返回值为空，表示无风险。
        """
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class ImageSnapshot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "snapshotId":
            suggest = "snapshot_id"
        elif key == "volumeKind":
            suggest = "volume_kind"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ImageSnapshot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ImageSnapshot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ImageSnapshot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size: Optional[builtins.int] = None,
                 snapshot_id: Optional[builtins.str] = None,
                 volume_kind: Optional[builtins.str] = None):
        """
        :param builtins.int size: 快照大小。单位为GiB。
        :param builtins.str snapshot_id: 快照ID。
        :param builtins.str volume_kind: 云盘种类。system：系统盘。data：数据盘。
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_kind is not None:
            pulumi.set(__self__, "volume_kind", volume_kind)

    @property
    @pulumi.getter
    def size(self) -> Optional[builtins.int]:
        """
        快照大小。单位为GiB。
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[builtins.str]:
        """
        快照ID。
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="volumeKind")
    def volume_kind(self) -> Optional[builtins.str]:
        """
        云盘种类。system：系统盘。data：数据盘。
        """
        return pulumi.get(self, "volume_kind")


@pulumi.output_type
class ImageTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 镜像标签的标签键。
        :param builtins.str value: 镜像标签的值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        镜像标签的标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        镜像标签的值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetImageDetectionResultsResult(dict):
    def __init__(__self__, *,
                 detection_status: builtins.str,
                 items: Sequence['outputs.GetImageDetectionResultsItemResult']):
        """
        :param builtins.str detection_status: 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        :param Sequence['GetImageDetectionResultsItemArgs'] items: 镜像检测项详情。
        """
        pulumi.set(__self__, "detection_status", detection_status)
        pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="detectionStatus")
    def detection_status(self) -> builtins.str:
        """
        检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        return pulumi.get(self, "detection_status")

    @property
    @pulumi.getter
    def items(self) -> Sequence['outputs.GetImageDetectionResultsItemResult']:
        """
        镜像检测项详情。
        """
        return pulumi.get(self, "items")


@pulumi.output_type
class GetImageDetectionResultsItemResult(dict):
    def __init__(__self__, *,
                 name: builtins.str,
                 result: builtins.str,
                 risk_code: builtins.str,
                 risk_level: builtins.str):
        """
        :param builtins.str name: 检测项名称。
        :param builtins.str result: 该检测项对应结果。
        :param builtins.str risk_code: 风险描述码。
        :param builtins.str risk_level: 风险等级。若该参数返回值为空，表示无风险。
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "result", result)
        pulumi.set(__self__, "risk_code", risk_code)
        pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        检测项名称。
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def result(self) -> builtins.str:
        """
        该检测项对应结果。
        """
        return pulumi.get(self, "result")

    @property
    @pulumi.getter(name="riskCode")
    def risk_code(self) -> builtins.str:
        """
        风险描述码。
        """
        return pulumi.get(self, "risk_code")

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> builtins.str:
        """
        风险等级。若该参数返回值为空，表示无风险。
        """
        return pulumi.get(self, "risk_level")


@pulumi.output_type
class GetImageSnapshotResult(dict):
    def __init__(__self__, *,
                 size: builtins.int,
                 snapshot_id: builtins.str,
                 volume_kind: builtins.str):
        """
        :param builtins.int size: 快照大小。单位为GiB。
        :param builtins.str snapshot_id: 快照ID。
        :param builtins.str volume_kind: 云盘种类。system：系统盘。data：数据盘。
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "volume_kind", volume_kind)

    @property
    @pulumi.getter
    def size(self) -> builtins.int:
        """
        快照大小。单位为GiB。
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> builtins.str:
        """
        快照ID。
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="volumeKind")
    def volume_kind(self) -> builtins.str:
        """
        云盘种类。system：系统盘。data：数据盘。
        """
        return pulumi.get(self, "volume_kind")


@pulumi.output_type
class GetImageTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 镜像标签的标签键。
        :param builtins.str value: 镜像标签的值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        镜像标签的标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        镜像标签的值。
        """
        return pulumi.get(self, "value")


