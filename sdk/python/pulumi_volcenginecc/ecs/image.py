# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ImageArgs', 'Image']

@pulumi.input_type
class ImageArgs:
    def __init__(__self__, *,
                 image_name: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detection_results: Optional[pulumi.Input['ImageDetectionResultsArgs']] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 kernel: Optional[pulumi.Input[builtins.str]] = None,
                 license_type: Optional[pulumi.Input[builtins.str]] = None,
                 os_name: Optional[pulumi.Input[builtins.str]] = None,
                 os_type: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 platform_version: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 share_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 snapshot_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]] = None):
        """
        The set of arguments for constructing a Image resource.
        :param pulumi.Input[builtins.str] image_name: 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        :param pulumi.Input[builtins.str] description: 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        :param pulumi.Input['ImageDetectionResultsArgs'] detection_results: 镜像的检测结果。
        :param pulumi.Input[builtins.str] instance_id: 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        :param pulumi.Input[builtins.str] kernel: 镜像的内核版本。
        :param pulumi.Input[builtins.str] license_type: 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        :param pulumi.Input[builtins.str] os_name: 镜像操作系统的名称。
        :param pulumi.Input[builtins.str] os_type: 操作系统类型。
        :param pulumi.Input[builtins.str] platform: 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        :param pulumi.Input[builtins.str] platform_version: 镜像的发行版本。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] share_permissions: 镜像共享的账户
        :param pulumi.Input[builtins.str] snapshot_group_id: 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        :param pulumi.Input[builtins.str] snapshot_id: 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        """
        pulumi.set(__self__, "image_name", image_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detection_results is not None:
            pulumi.set(__self__, "detection_results", detection_results)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if share_permissions is not None:
            pulumi.set(__self__, "share_permissions", share_permissions)
        if snapshot_group_id is not None:
            pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Input[builtins.str]:
        """
        镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectionResults")
    def detection_results(self) -> Optional[pulumi.Input['ImageDetectionResultsArgs']]:
        """
        镜像的检测结果。
        """
        return pulumi.get(self, "detection_results")

    @detection_results.setter
    def detection_results(self, value: Optional[pulumi.Input['ImageDetectionResultsArgs']]):
        pulumi.set(self, "detection_results", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def kernel(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的内核版本。
        """
        return pulumi.get(self, "kernel")

    @kernel.setter
    def kernel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kernel", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像操作系统的名称。
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        操作系统类型。
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的发行版本。
        """
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform_version", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="sharePermissions")
    def share_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        镜像共享的账户
        """
        return pulumi.get(self, "share_permissions")

    @share_permissions.setter
    def share_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "share_permissions", value)

    @property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        """
        return pulumi.get(self, "snapshot_group_id")

    @snapshot_group_id.setter
    def snapshot_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_group_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _ImageState:
    def __init__(__self__, *,
                 architecture: Optional[pulumi.Input[builtins.str]] = None,
                 boot_mode: Optional[pulumi.Input[builtins.str]] = None,
                 created_at: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detection_results: Optional[pulumi.Input['ImageDetectionResultsArgs']] = None,
                 image_id: Optional[pulumi.Input[builtins.str]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 image_owner_id: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 is_install_run_command_agent: Optional[pulumi.Input[builtins.bool]] = None,
                 is_lts: Optional[pulumi.Input[builtins.bool]] = None,
                 is_support_cloud_init: Optional[pulumi.Input[builtins.bool]] = None,
                 kernel: Optional[pulumi.Input[builtins.str]] = None,
                 license_type: Optional[pulumi.Input[builtins.str]] = None,
                 os_name: Optional[pulumi.Input[builtins.str]] = None,
                 os_type: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 platform_version: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 share_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 share_status: Optional[pulumi.Input[builtins.str]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 snapshots: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotArgs']]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[builtins.str]] = None,
                 virtual_size: Optional[pulumi.Input[builtins.float]] = None,
                 visibility: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Image resources.
        :param pulumi.Input[builtins.str] architecture: 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
        :param pulumi.Input[builtins.str] boot_mode: 镜像的启动模式。可以选择BIOS、UEFI类型。
        :param pulumi.Input[builtins.str] created_at: 镜像创建时间
        :param pulumi.Input[builtins.str] description: 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        :param pulumi.Input['ImageDetectionResultsArgs'] detection_results: 镜像的检测结果。
        :param pulumi.Input[builtins.str] image_id: 镜像ID。
        :param pulumi.Input[builtins.str] image_name: 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        :param pulumi.Input[builtins.str] image_owner_id: 镜像所属的账号ID。
        :param pulumi.Input[builtins.str] instance_id: 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        :param pulumi.Input[builtins.bool] is_install_run_command_agent: 镜像中是否安装了云助手Agent。
        :param pulumi.Input[builtins.bool] is_lts: 公共镜像是否长期维护。
        :param pulumi.Input[builtins.bool] is_support_cloud_init: 镜像是否支持Cloud-init。
        :param pulumi.Input[builtins.str] kernel: 镜像的内核版本。
        :param pulumi.Input[builtins.str] license_type: 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        :param pulumi.Input[builtins.str] os_name: 镜像操作系统的名称。
        :param pulumi.Input[builtins.str] os_type: 操作系统类型。
        :param pulumi.Input[builtins.str] platform: 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        :param pulumi.Input[builtins.str] platform_version: 镜像的发行版本。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] share_permissions: 镜像共享的账户
        :param pulumi.Input[builtins.str] share_status: 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
        :param pulumi.Input[builtins.int] size: 镜像大小，单位为GiB。
        :param pulumi.Input[builtins.str] snapshot_group_id: 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        :param pulumi.Input[builtins.str] snapshot_id: 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        :param pulumi.Input[builtins.str] status: 镜像的状态。
        :param pulumi.Input[builtins.str] updated_at: 镜像更新时间
        :param pulumi.Input[builtins.float] virtual_size: 镜像大小，单位为Byte。
        :param pulumi.Input[builtins.str] visibility: 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
        """
        if architecture is not None:
            pulumi.set(__self__, "architecture", architecture)
        if boot_mode is not None:
            pulumi.set(__self__, "boot_mode", boot_mode)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if detection_results is not None:
            pulumi.set(__self__, "detection_results", detection_results)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if image_owner_id is not None:
            pulumi.set(__self__, "image_owner_id", image_owner_id)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if is_install_run_command_agent is not None:
            pulumi.set(__self__, "is_install_run_command_agent", is_install_run_command_agent)
        if is_lts is not None:
            pulumi.set(__self__, "is_lts", is_lts)
        if is_support_cloud_init is not None:
            pulumi.set(__self__, "is_support_cloud_init", is_support_cloud_init)
        if kernel is not None:
            pulumi.set(__self__, "kernel", kernel)
        if license_type is not None:
            pulumi.set(__self__, "license_type", license_type)
        if os_name is not None:
            pulumi.set(__self__, "os_name", os_name)
        if os_type is not None:
            pulumi.set(__self__, "os_type", os_type)
        if platform is not None:
            pulumi.set(__self__, "platform", platform)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if share_permissions is not None:
            pulumi.set(__self__, "share_permissions", share_permissions)
        if share_status is not None:
            pulumi.set(__self__, "share_status", share_status)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_group_id is not None:
            pulumi.set(__self__, "snapshot_group_id", snapshot_group_id)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if snapshots is not None:
            pulumi.set(__self__, "snapshots", snapshots)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if virtual_size is not None:
            pulumi.set(__self__, "virtual_size", virtual_size)
        if visibility is not None:
            pulumi.set(__self__, "visibility", visibility)

    @property
    @pulumi.getter
    def architecture(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
        """
        return pulumi.get(self, "architecture")

    @architecture.setter
    def architecture(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "architecture", value)

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的启动模式。可以选择BIOS、UEFI类型。
        """
        return pulumi.get(self, "boot_mode")

    @boot_mode.setter
    def boot_mode(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "boot_mode", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像创建时间
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="detectionResults")
    def detection_results(self) -> Optional[pulumi.Input['ImageDetectionResultsArgs']]:
        """
        镜像的检测结果。
        """
        return pulumi.get(self, "detection_results")

    @detection_results.setter
    def detection_results(self, value: Optional[pulumi.Input['ImageDetectionResultsArgs']]):
        pulumi.set(self, "detection_results", value)

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像ID。
        """
        return pulumi.get(self, "image_id")

    @image_id.setter
    def image_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_id", value)

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        """
        return pulumi.get(self, "image_name")

    @image_name.setter
    def image_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_name", value)

    @property
    @pulumi.getter(name="imageOwnerId")
    def image_owner_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像所属的账号ID。
        """
        return pulumi.get(self, "image_owner_id")

    @image_owner_id.setter
    def image_owner_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "image_owner_id", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="isInstallRunCommandAgent")
    def is_install_run_command_agent(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        镜像中是否安装了云助手Agent。
        """
        return pulumi.get(self, "is_install_run_command_agent")

    @is_install_run_command_agent.setter
    def is_install_run_command_agent(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_install_run_command_agent", value)

    @property
    @pulumi.getter(name="isLts")
    def is_lts(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        公共镜像是否长期维护。
        """
        return pulumi.get(self, "is_lts")

    @is_lts.setter
    def is_lts(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_lts", value)

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        镜像是否支持Cloud-init。
        """
        return pulumi.get(self, "is_support_cloud_init")

    @is_support_cloud_init.setter
    def is_support_cloud_init(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_support_cloud_init", value)

    @property
    @pulumi.getter
    def kernel(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的内核版本。
        """
        return pulumi.get(self, "kernel")

    @kernel.setter
    def kernel(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kernel", value)

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        """
        return pulumi.get(self, "license_type")

    @license_type.setter
    def license_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "license_type", value)

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像操作系统的名称。
        """
        return pulumi.get(self, "os_name")

    @os_name.setter
    def os_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "os_name", value)

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        操作系统类型。
        """
        return pulumi.get(self, "os_type")

    @os_type.setter
    def os_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "os_type", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        """
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform", value)

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的发行版本。
        """
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "platform_version", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="sharePermissions")
    def share_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        镜像共享的账户
        """
        return pulumi.get(self, "share_permissions")

    @share_permissions.setter
    def share_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "share_permissions", value)

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
        """
        return pulumi.get(self, "share_status")

    @share_status.setter
    def share_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "share_status", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        镜像大小，单位为GiB。
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        """
        return pulumi.get(self, "snapshot_group_id")

    @snapshot_group_id.setter
    def snapshot_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_group_id", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def snapshots(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotArgs']]]]:
        return pulumi.get(self, "snapshots")

    @snapshots.setter
    def snapshots(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageSnapshotArgs']]]]):
        pulumi.set(self, "snapshots", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的状态。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像更新时间
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="virtualSize")
    def virtual_size(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        镜像大小，单位为Byte。
        """
        return pulumi.get(self, "virtual_size")

    @virtual_size.setter
    def virtual_size(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "virtual_size", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
        """
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "visibility", value)


@pulumi.type_token("volcenginecc:ecs/image:Image")
class Image(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detection_results: Optional[pulumi.Input[Union['ImageDetectionResultsArgs', 'ImageDetectionResultsArgsDict']]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 kernel: Optional[pulumi.Input[builtins.str]] = None,
                 license_type: Optional[pulumi.Input[builtins.str]] = None,
                 os_name: Optional[pulumi.Input[builtins.str]] = None,
                 os_type: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 platform_version: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 share_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 snapshot_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]]] = None,
                 __props__=None):
        """
        镜像是包含了云服务器实例所需的基本操作系统、应用数据的特殊文件。创建实例时，必须选择镜像。

        ## Import

        ```sh
        $ pulumi import volcenginecc:ecs/image:Image example "image_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        :param pulumi.Input[Union['ImageDetectionResultsArgs', 'ImageDetectionResultsArgsDict']] detection_results: 镜像的检测结果。
        :param pulumi.Input[builtins.str] image_name: 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        :param pulumi.Input[builtins.str] instance_id: 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        :param pulumi.Input[builtins.str] kernel: 镜像的内核版本。
        :param pulumi.Input[builtins.str] license_type: 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        :param pulumi.Input[builtins.str] os_name: 镜像操作系统的名称。
        :param pulumi.Input[builtins.str] os_type: 操作系统类型。
        :param pulumi.Input[builtins.str] platform: 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        :param pulumi.Input[builtins.str] platform_version: 镜像的发行版本。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] share_permissions: 镜像共享的账户
        :param pulumi.Input[builtins.str] snapshot_group_id: 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        :param pulumi.Input[builtins.str] snapshot_id: 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ImageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        镜像是包含了云服务器实例所需的基本操作系统、应用数据的特殊文件。创建实例时，必须选择镜像。

        ## Import

        ```sh
        $ pulumi import volcenginecc:ecs/image:Image example "image_id"
        ```

        :param str resource_name: The name of the resource.
        :param ImageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ImageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 detection_results: Optional[pulumi.Input[Union['ImageDetectionResultsArgs', 'ImageDetectionResultsArgsDict']]] = None,
                 image_name: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 kernel: Optional[pulumi.Input[builtins.str]] = None,
                 license_type: Optional[pulumi.Input[builtins.str]] = None,
                 os_name: Optional[pulumi.Input[builtins.str]] = None,
                 os_type: Optional[pulumi.Input[builtins.str]] = None,
                 platform: Optional[pulumi.Input[builtins.str]] = None,
                 platform_version: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 share_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 snapshot_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ImageArgs.__new__(ImageArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["detection_results"] = detection_results
            if image_name is None and not opts.urn:
                raise TypeError("Missing required property 'image_name'")
            __props__.__dict__["image_name"] = image_name
            __props__.__dict__["instance_id"] = instance_id
            __props__.__dict__["kernel"] = kernel
            __props__.__dict__["license_type"] = license_type
            __props__.__dict__["os_name"] = os_name
            __props__.__dict__["os_type"] = os_type
            __props__.__dict__["platform"] = platform
            __props__.__dict__["platform_version"] = platform_version
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["share_permissions"] = share_permissions
            __props__.__dict__["snapshot_group_id"] = snapshot_group_id
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["architecture"] = None
            __props__.__dict__["boot_mode"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["image_id"] = None
            __props__.__dict__["image_owner_id"] = None
            __props__.__dict__["is_install_run_command_agent"] = None
            __props__.__dict__["is_lts"] = None
            __props__.__dict__["is_support_cloud_init"] = None
            __props__.__dict__["share_status"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["snapshots"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["virtual_size"] = None
            __props__.__dict__["visibility"] = None
        super(Image, __self__).__init__(
            'volcenginecc:ecs/image:Image',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            architecture: Optional[pulumi.Input[builtins.str]] = None,
            boot_mode: Optional[pulumi.Input[builtins.str]] = None,
            created_at: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            detection_results: Optional[pulumi.Input[Union['ImageDetectionResultsArgs', 'ImageDetectionResultsArgsDict']]] = None,
            image_id: Optional[pulumi.Input[builtins.str]] = None,
            image_name: Optional[pulumi.Input[builtins.str]] = None,
            image_owner_id: Optional[pulumi.Input[builtins.str]] = None,
            instance_id: Optional[pulumi.Input[builtins.str]] = None,
            is_install_run_command_agent: Optional[pulumi.Input[builtins.bool]] = None,
            is_lts: Optional[pulumi.Input[builtins.bool]] = None,
            is_support_cloud_init: Optional[pulumi.Input[builtins.bool]] = None,
            kernel: Optional[pulumi.Input[builtins.str]] = None,
            license_type: Optional[pulumi.Input[builtins.str]] = None,
            os_name: Optional[pulumi.Input[builtins.str]] = None,
            os_type: Optional[pulumi.Input[builtins.str]] = None,
            platform: Optional[pulumi.Input[builtins.str]] = None,
            platform_version: Optional[pulumi.Input[builtins.str]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            share_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            share_status: Optional[pulumi.Input[builtins.str]] = None,
            size: Optional[pulumi.Input[builtins.int]] = None,
            snapshot_group_id: Optional[pulumi.Input[builtins.str]] = None,
            snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
            snapshots: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageSnapshotArgs', 'ImageSnapshotArgsDict']]]]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ImageTagArgs', 'ImageTagArgsDict']]]]] = None,
            updated_at: Optional[pulumi.Input[builtins.str]] = None,
            virtual_size: Optional[pulumi.Input[builtins.float]] = None,
            visibility: Optional[pulumi.Input[builtins.str]] = None) -> 'Image':
        """
        Get an existing Image resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] architecture: 镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
        :param pulumi.Input[builtins.str] boot_mode: 镜像的启动模式。可以选择BIOS、UEFI类型。
        :param pulumi.Input[builtins.str] created_at: 镜像创建时间
        :param pulumi.Input[builtins.str] description: 镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        :param pulumi.Input[Union['ImageDetectionResultsArgs', 'ImageDetectionResultsArgsDict']] detection_results: 镜像的检测结果。
        :param pulumi.Input[builtins.str] image_id: 镜像ID。
        :param pulumi.Input[builtins.str] image_name: 镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        :param pulumi.Input[builtins.str] image_owner_id: 镜像所属的账号ID。
        :param pulumi.Input[builtins.str] instance_id: 实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        :param pulumi.Input[builtins.bool] is_install_run_command_agent: 镜像中是否安装了云助手Agent。
        :param pulumi.Input[builtins.bool] is_lts: 公共镜像是否长期维护。
        :param pulumi.Input[builtins.bool] is_support_cloud_init: 镜像是否支持Cloud-init。
        :param pulumi.Input[builtins.str] kernel: 镜像的内核版本。
        :param pulumi.Input[builtins.str] license_type: 镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        :param pulumi.Input[builtins.str] os_name: 镜像操作系统的名称。
        :param pulumi.Input[builtins.str] os_type: 操作系统类型。
        :param pulumi.Input[builtins.str] platform: 镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        :param pulumi.Input[builtins.str] platform_version: 镜像的发行版本。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] share_permissions: 镜像共享的账户
        :param pulumi.Input[builtins.str] share_status: 镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
        :param pulumi.Input[builtins.int] size: 镜像大小，单位为GiB。
        :param pulumi.Input[builtins.str] snapshot_group_id: 快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        :param pulumi.Input[builtins.str] snapshot_id: 系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        :param pulumi.Input[builtins.str] status: 镜像的状态。
        :param pulumi.Input[builtins.str] updated_at: 镜像更新时间
        :param pulumi.Input[builtins.float] virtual_size: 镜像大小，单位为Byte。
        :param pulumi.Input[builtins.str] visibility: 镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ImageState.__new__(_ImageState)

        __props__.__dict__["architecture"] = architecture
        __props__.__dict__["boot_mode"] = boot_mode
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["detection_results"] = detection_results
        __props__.__dict__["image_id"] = image_id
        __props__.__dict__["image_name"] = image_name
        __props__.__dict__["image_owner_id"] = image_owner_id
        __props__.__dict__["instance_id"] = instance_id
        __props__.__dict__["is_install_run_command_agent"] = is_install_run_command_agent
        __props__.__dict__["is_lts"] = is_lts
        __props__.__dict__["is_support_cloud_init"] = is_support_cloud_init
        __props__.__dict__["kernel"] = kernel
        __props__.__dict__["license_type"] = license_type
        __props__.__dict__["os_name"] = os_name
        __props__.__dict__["os_type"] = os_type
        __props__.__dict__["platform"] = platform
        __props__.__dict__["platform_version"] = platform_version
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["share_permissions"] = share_permissions
        __props__.__dict__["share_status"] = share_status
        __props__.__dict__["size"] = size
        __props__.__dict__["snapshot_group_id"] = snapshot_group_id
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["snapshots"] = snapshots
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["updated_at"] = updated_at
        __props__.__dict__["virtual_size"] = virtual_size
        __props__.__dict__["visibility"] = visibility
        return Image(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def architecture(self) -> pulumi.Output[builtins.str]:
        """
        镜像的架构类型。可以选择amd64（x86计算）、arm64（ARM计算）类型。
        """
        return pulumi.get(self, "architecture")

    @property
    @pulumi.getter(name="bootMode")
    def boot_mode(self) -> pulumi.Output[builtins.str]:
        """
        镜像的启动模式。可以选择BIOS、UEFI类型。
        """
        return pulumi.get(self, "boot_mode")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        镜像创建时间
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        镜像描述。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、英文句号“.”、中文逗号“，”、中文句号“。”和空格。长度限制为0～255个字符。不填默认为空。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="detectionResults")
    def detection_results(self) -> pulumi.Output['outputs.ImageDetectionResults']:
        """
        镜像的检测结果。
        """
        return pulumi.get(self, "detection_results")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> pulumi.Output[builtins.str]:
        """
        镜像ID。
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> pulumi.Output[builtins.str]:
        """
        镜像名称。必须以字母、汉字开头。只能包含中文、字母、数字、下划线“_”、中划线“-”、英文句号“.”。长度限制为1 ~ 128个字符。
        """
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="imageOwnerId")
    def image_owner_id(self) -> pulumi.Output[builtins.str]:
        """
        镜像所属的账号ID。
        """
        return pulumi.get(self, "image_owner_id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Output[builtins.str]:
        """
        实例ID。本参数与SnapshotId、SnapshotGroupId参数，三选一必填。
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="isInstallRunCommandAgent")
    def is_install_run_command_agent(self) -> pulumi.Output[builtins.bool]:
        """
        镜像中是否安装了云助手Agent。
        """
        return pulumi.get(self, "is_install_run_command_agent")

    @property
    @pulumi.getter(name="isLts")
    def is_lts(self) -> pulumi.Output[builtins.bool]:
        """
        公共镜像是否长期维护。
        """
        return pulumi.get(self, "is_lts")

    @property
    @pulumi.getter(name="isSupportCloudInit")
    def is_support_cloud_init(self) -> pulumi.Output[builtins.bool]:
        """
        镜像是否支持Cloud-init。
        """
        return pulumi.get(self, "is_support_cloud_init")

    @property
    @pulumi.getter
    def kernel(self) -> pulumi.Output[builtins.str]:
        """
        镜像的内核版本。
        """
        return pulumi.get(self, "kernel")

    @property
    @pulumi.getter(name="licenseType")
    def license_type(self) -> pulumi.Output[builtins.str]:
        """
        镜像许可证类型。VolcanoEngine：默认，根据您设置的platform，采用火山引擎官方渠道的许可证。BYOL：自带许可证（BYOL）。
        """
        return pulumi.get(self, "license_type")

    @property
    @pulumi.getter(name="osName")
    def os_name(self) -> pulumi.Output[builtins.str]:
        """
        镜像操作系统的名称。
        """
        return pulumi.get(self, "os_name")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[builtins.str]:
        """
        操作系统类型。
        """
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def platform(self) -> pulumi.Output[builtins.str]:
        """
        镜像操作系统的发行版本。可以选择CentOS、Debian、veLinux、Windows Server、Fedora、OpenSUSE、Ubuntu。
        """
        return pulumi.get(self, "platform")

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> pulumi.Output[builtins.str]:
        """
        镜像的发行版本。
        """
        return pulumi.get(self, "platform_version")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        资源所属项目。调用接口账号若仅拥有部分项目权限时必须传入有权限的项目信息。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="sharePermissions")
    def share_permissions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        镜像共享的账户
        """
        return pulumi.get(self, "share_permissions")

    @property
    @pulumi.getter(name="shareStatus")
    def share_status(self) -> pulumi.Output[builtins.str]:
        """
        镜像共享状态。HasShared：自定义镜像已被共享给其他用户。当自定义镜像未被共享或使用公共镜像时，ShareStatus返回为空。
        """
        return pulumi.get(self, "share_status")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[builtins.int]:
        """
        镜像大小，单位为GiB。
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotGroupId")
    def snapshot_group_id(self) -> pulumi.Output[builtins.str]:
        """
        快照一致性组ID，表示使用快照一致性组创建自定义镜像。本参数与SnapshotId、InstanceId参数，三选一必填。
        """
        return pulumi.get(self, "snapshot_group_id")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[builtins.str]:
        """
        系统盘快照ID，表示使用系统盘快照创建自定义镜像。本参数与InstanceId、SnapshotGroupId参数，三选一必填。
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def snapshots(self) -> pulumi.Output[Sequence['outputs.ImageSnapshot']]:
        return pulumi.get(self, "snapshots")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        镜像的状态。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.ImageTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        镜像更新时间
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="virtualSize")
    def virtual_size(self) -> pulumi.Output[builtins.float]:
        """
        镜像大小，单位为Byte。
        """
        return pulumi.get(self, "virtual_size")

    @property
    @pulumi.getter
    def visibility(self) -> pulumi.Output[builtins.str]:
        """
        镜像的可见性。public：公共镜像。private：私有镜像。shared：共享镜像。
        """
        return pulumi.get(self, "visibility")

