# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CommandParameterDefinitionArgs',
    'CommandParameterDefinitionArgsDict',
    'CommandTagArgs',
    'CommandTagArgsDict',
    'ImageDetectionResultsArgs',
    'ImageDetectionResultsArgsDict',
    'ImageDetectionResultsItemArgs',
    'ImageDetectionResultsItemArgsDict',
    'ImageSnapshotArgs',
    'ImageSnapshotArgsDict',
    'ImageTagArgs',
    'ImageTagArgsDict',
    'InvocationInvocationResultArgs',
    'InvocationInvocationResultArgsDict',
    'InvocationParameterDefinitionArgs',
    'InvocationParameterDefinitionArgsDict',
    'InvocationTagArgs',
    'InvocationTagArgsDict',
    'KeypairTagArgs',
    'KeypairTagArgsDict',
]

MYPY = False

if not MYPY:
    class CommandParameterDefinitionArgsDict(TypedDict):
        decimal_precision: NotRequired[pulumi.Input[builtins.int]]
        """
        自定义参数值（数字）允许的小数点后位数。
        """
        default_value: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数默认值。
        """
        max_length: NotRequired[pulumi.Input[builtins.int]]
        """
        自定义参数值（字符串）的最大长度。
        """
        max_value: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数值（数字）的最大值。
        """
        min_length: NotRequired[pulumi.Input[builtins.int]]
        """
        自定义参数值（字符串）的最小长度。
        """
        min_value: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数值（数字）的最小值。
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
        """
        required: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否必填。
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数类型。
        """
elif False:
    CommandParameterDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CommandParameterDefinitionArgs:
    def __init__(__self__, *,
                 decimal_precision: Optional[pulumi.Input[builtins.int]] = None,
                 default_value: Optional[pulumi.Input[builtins.str]] = None,
                 max_length: Optional[pulumi.Input[builtins.int]] = None,
                 max_value: Optional[pulumi.Input[builtins.str]] = None,
                 min_length: Optional[pulumi.Input[builtins.int]] = None,
                 min_value: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 required: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] decimal_precision: 自定义参数值（数字）允许的小数点后位数。
        :param pulumi.Input[builtins.str] default_value: 自定义参数默认值。
        :param pulumi.Input[builtins.int] max_length: 自定义参数值（字符串）的最大长度。
        :param pulumi.Input[builtins.str] max_value: 自定义参数值（数字）的最大值。
        :param pulumi.Input[builtins.int] min_length: 自定义参数值（字符串）的最小长度。
        :param pulumi.Input[builtins.str] min_value: 自定义参数值（数字）的最小值。
        :param pulumi.Input[builtins.str] name: 自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
        :param pulumi.Input[builtins.bool] required: 是否必填。
        :param pulumi.Input[builtins.str] type: 自定义参数类型。
        """
        if decimal_precision is not None:
            pulumi.set(__self__, "decimal_precision", decimal_precision)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="decimalPrecision")
    def decimal_precision(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        自定义参数值（数字）允许的小数点后位数。
        """
        return pulumi.get(self, "decimal_precision")

    @decimal_precision.setter
    def decimal_precision(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "decimal_precision", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数默认值。
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        自定义参数值（字符串）的最大长度。
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数值（数字）的最大值。
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        自定义参数值（字符串）的最小长度。
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数值（数字）的最小值。
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数名称，需要在脚本中通过{{Param}}定义 。单个参数名不能超过64字节。遵循Shell变量命名规则，a-zA-Z0-9-_的组合。首个字符不能以数字开头。中间不能有空格，可以使用下划线。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否必填。
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数类型。
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class CommandTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    CommandTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CommandTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ImageDetectionResultsArgsDict(TypedDict):
        detection_status: NotRequired[pulumi.Input[builtins.str]]
        """
        检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgsDict']]]]
elif False:
    ImageDetectionResultsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageDetectionResultsArgs:
    def __init__(__self__, *,
                 detection_status: Optional[pulumi.Input[builtins.str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] detection_status: 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        if detection_status is not None:
            pulumi.set(__self__, "detection_status", detection_status)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="detectionStatus")
    def detection_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        return pulumi.get(self, "detection_status")

    @detection_status.setter
    def detection_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "detection_status", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class ImageDetectionResultsItemArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        检测项名称。
        """
        result: NotRequired[pulumi.Input[builtins.str]]
        """
        该检测项对应结果。
        """
        risk_code: NotRequired[pulumi.Input[builtins.str]]
        """
        风险描述码。
        """
        risk_level: NotRequired[pulumi.Input[builtins.str]]
        """
        风险等级。若该参数返回值为空，表示无风险。
        """
elif False:
    ImageDetectionResultsItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageDetectionResultsItemArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 result: Optional[pulumi.Input[builtins.str]] = None,
                 risk_code: Optional[pulumi.Input[builtins.str]] = None,
                 risk_level: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: 检测项名称。
        :param pulumi.Input[builtins.str] result: 该检测项对应结果。
        :param pulumi.Input[builtins.str] risk_code: 风险描述码。
        :param pulumi.Input[builtins.str] risk_level: 风险等级。若该参数返回值为空，表示无风险。
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if risk_code is not None:
            pulumi.set(__self__, "risk_code", risk_code)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        检测项名称。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        该检测项对应结果。
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="riskCode")
    def risk_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        风险描述码。
        """
        return pulumi.get(self, "risk_code")

    @risk_code.setter
    def risk_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "risk_code", value)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        风险等级。若该参数返回值为空，表示无风险。
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "risk_level", value)


if not MYPY:
    class ImageSnapshotArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[builtins.int]]
        """
        快照大小。单位为GiB。
        """
        snapshot_id: NotRequired[pulumi.Input[builtins.str]]
        """
        快照ID。
        """
        volume_kind: NotRequired[pulumi.Input[builtins.str]]
        """
        云盘种类。system：系统盘。data：数据盘。
        """
elif False:
    ImageSnapshotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageSnapshotArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 volume_kind: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] size: 快照大小。单位为GiB。
        :param pulumi.Input[builtins.str] snapshot_id: 快照ID。
        :param pulumi.Input[builtins.str] volume_kind: 云盘种类。system：系统盘。data：数据盘。
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_kind is not None:
            pulumi.set(__self__, "volume_kind", volume_kind)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        快照大小。单位为GiB。
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        快照ID。
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="volumeKind")
    def volume_kind(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        云盘种类。system：系统盘。data：数据盘。
        """
        return pulumi.get(self, "volume_kind")

    @volume_kind.setter
    def volume_kind(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "volume_kind", value)


if not MYPY:
    class ImageTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        镜像标签的标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        镜像标签的值。
        """
elif False:
    ImageTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 镜像标签的标签键。
        :param pulumi.Input[builtins.str] value: 镜像标签的值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像标签的标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像标签的值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InvocationInvocationResultArgsDict(TypedDict):
        command_id: NotRequired[pulumi.Input[builtins.str]]
        """
        命令ID。
        """
        end_time: NotRequired[pulumi.Input[builtins.str]]
        """
        命令执行的完成时间。
        """
        error_code: NotRequired[pulumi.Input[builtins.str]]
        """
        命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
        """
        error_message: NotRequired[pulumi.Input[builtins.str]]
        """
        命令执行失败的错误信息。
        """
        exit_code: NotRequired[pulumi.Input[builtins.int]]
        """
        脚本执行后的退出状态码。
        """
        instance_id: NotRequired[pulumi.Input[builtins.str]]
        """
        实例ID。
        """
        invocation_id: NotRequired[pulumi.Input[builtins.str]]
        """
        任务执行ID。
        """
        invocation_result_id: NotRequired[pulumi.Input[builtins.str]]
        """
        任务执行结果ID。
        """
        invocation_result_status: NotRequired[pulumi.Input[builtins.str]]
        """
        单台实例的命令进度状态。
        """
        output: NotRequired[pulumi.Input[builtins.str]]
        """
        经过Base64编码的命令执行后输出信息。
        """
        start_time: NotRequired[pulumi.Input[builtins.str]]
        """
        命令在实例中开始执行的时间。
        """
        username: NotRequired[pulumi.Input[builtins.str]]
        """
        在实例中执行命令的用户名称。
        """
elif False:
    InvocationInvocationResultArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InvocationInvocationResultArgs:
    def __init__(__self__, *,
                 command_id: Optional[pulumi.Input[builtins.str]] = None,
                 end_time: Optional[pulumi.Input[builtins.str]] = None,
                 error_code: Optional[pulumi.Input[builtins.str]] = None,
                 error_message: Optional[pulumi.Input[builtins.str]] = None,
                 exit_code: Optional[pulumi.Input[builtins.int]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 invocation_id: Optional[pulumi.Input[builtins.str]] = None,
                 invocation_result_id: Optional[pulumi.Input[builtins.str]] = None,
                 invocation_result_status: Optional[pulumi.Input[builtins.str]] = None,
                 output: Optional[pulumi.Input[builtins.str]] = None,
                 start_time: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] command_id: 命令ID。
        :param pulumi.Input[builtins.str] end_time: 命令执行的完成时间。
        :param pulumi.Input[builtins.str] error_code: 命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
        :param pulumi.Input[builtins.str] error_message: 命令执行失败的错误信息。
        :param pulumi.Input[builtins.int] exit_code: 脚本执行后的退出状态码。
        :param pulumi.Input[builtins.str] instance_id: 实例ID。
        :param pulumi.Input[builtins.str] invocation_id: 任务执行ID。
        :param pulumi.Input[builtins.str] invocation_result_id: 任务执行结果ID。
        :param pulumi.Input[builtins.str] invocation_result_status: 单台实例的命令进度状态。
        :param pulumi.Input[builtins.str] output: 经过Base64编码的命令执行后输出信息。
        :param pulumi.Input[builtins.str] start_time: 命令在实例中开始执行的时间。
        :param pulumi.Input[builtins.str] username: 在实例中执行命令的用户名称。
        """
        if command_id is not None:
            pulumi.set(__self__, "command_id", command_id)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)
        if error_code is not None:
            pulumi.set(__self__, "error_code", error_code)
        if error_message is not None:
            pulumi.set(__self__, "error_message", error_message)
        if exit_code is not None:
            pulumi.set(__self__, "exit_code", exit_code)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if invocation_id is not None:
            pulumi.set(__self__, "invocation_id", invocation_id)
        if invocation_result_id is not None:
            pulumi.set(__self__, "invocation_result_id", invocation_result_id)
        if invocation_result_status is not None:
            pulumi.set(__self__, "invocation_result_status", invocation_result_status)
        if output is not None:
            pulumi.set(__self__, "output", output)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令ID。
        """
        return pulumi.get(self, "command_id")

    @command_id.setter
    def command_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "command_id", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令执行的完成时间。
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="errorCode")
    def error_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令执行失败的错误码。TaskDeliveryTimeout：表示命令下发超时。TaskExecutionTimeout：表示命令执行超时。TaskExecutionFailed：表示命令执行失败。
        """
        return pulumi.get(self, "error_code")

    @error_code.setter
    def error_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "error_code", value)

    @property
    @pulumi.getter(name="errorMessage")
    def error_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令执行失败的错误信息。
        """
        return pulumi.get(self, "error_message")

    @error_message.setter
    def error_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "error_message", value)

    @property
    @pulumi.getter(name="exitCode")
    def exit_code(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        脚本执行后的退出状态码。
        """
        return pulumi.get(self, "exit_code")

    @exit_code.setter
    def exit_code(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "exit_code", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        实例ID。
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter(name="invocationId")
    def invocation_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        任务执行ID。
        """
        return pulumi.get(self, "invocation_id")

    @invocation_id.setter
    def invocation_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "invocation_id", value)

    @property
    @pulumi.getter(name="invocationResultId")
    def invocation_result_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        任务执行结果ID。
        """
        return pulumi.get(self, "invocation_result_id")

    @invocation_result_id.setter
    def invocation_result_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "invocation_result_id", value)

    @property
    @pulumi.getter(name="invocationResultStatus")
    def invocation_result_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        单台实例的命令进度状态。
        """
        return pulumi.get(self, "invocation_result_status")

    @invocation_result_status.setter
    def invocation_result_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "invocation_result_status", value)

    @property
    @pulumi.getter
    def output(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        经过Base64编码的命令执行后输出信息。
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令在实例中开始执行的时间。
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        在实例中执行命令的用户名称。
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)


if not MYPY:
    class InvocationParameterDefinitionArgsDict(TypedDict):
        decimal_precision: NotRequired[pulumi.Input[builtins.int]]
        """
        自定义参数值（数字）允许的小数点后位数。
        """
        default_value: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数默认值。
        """
        max_length: NotRequired[pulumi.Input[builtins.int]]
        """
        自定义参数值（字符串）的最大长度。
        """
        max_value: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数值（数字）的最大值。
        """
        min_length: NotRequired[pulumi.Input[builtins.int]]
        """
        自定义参数值（字符串）的最小长度。
        """
        min_value: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数值（数字）的最小值。
        """
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数名称，需要在脚本中通过{{Param}}定义 。
        """
        required: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否必填。true：必填。false：非必填。
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
        """
elif False:
    InvocationParameterDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InvocationParameterDefinitionArgs:
    def __init__(__self__, *,
                 decimal_precision: Optional[pulumi.Input[builtins.int]] = None,
                 default_value: Optional[pulumi.Input[builtins.str]] = None,
                 max_length: Optional[pulumi.Input[builtins.int]] = None,
                 max_value: Optional[pulumi.Input[builtins.str]] = None,
                 min_length: Optional[pulumi.Input[builtins.int]] = None,
                 min_value: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 required: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] decimal_precision: 自定义参数值（数字）允许的小数点后位数。
        :param pulumi.Input[builtins.str] default_value: 自定义参数默认值。
        :param pulumi.Input[builtins.int] max_length: 自定义参数值（字符串）的最大长度。
        :param pulumi.Input[builtins.str] max_value: 自定义参数值（数字）的最大值。
        :param pulumi.Input[builtins.int] min_length: 自定义参数值（字符串）的最小长度。
        :param pulumi.Input[builtins.str] min_value: 自定义参数值（数字）的最小值。
        :param pulumi.Input[builtins.str] name: 自定义参数名称，需要在脚本中通过{{Param}}定义 。
        :param pulumi.Input[builtins.bool] required: 是否必填。true：必填。false：非必填。
        :param pulumi.Input[builtins.str] type: 自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
        """
        if decimal_precision is not None:
            pulumi.set(__self__, "decimal_precision", decimal_precision)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if max_length is not None:
            pulumi.set(__self__, "max_length", max_length)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_length is not None:
            pulumi.set(__self__, "min_length", min_length)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="decimalPrecision")
    def decimal_precision(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        自定义参数值（数字）允许的小数点后位数。
        """
        return pulumi.get(self, "decimal_precision")

    @decimal_precision.setter
    def decimal_precision(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "decimal_precision", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数默认值。
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        自定义参数值（字符串）的最大长度。
        """
        return pulumi.get(self, "max_length")

    @max_length.setter
    def max_length(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_length", value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数值（数字）的最大值。
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        自定义参数值（字符串）的最小长度。
        """
        return pulumi.get(self, "min_length")

    @min_length.setter
    def min_length(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "min_length", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数值（数字）的最小值。
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数名称，需要在脚本中通过{{Param}}定义 。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否必填。true：必填。false：非必填。
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义参数类型。String：表示自定义参数类型字符串类型。Digit：表示自定义参数类型为数值类型。
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


if not MYPY:
    class InvocationTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    InvocationTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InvocationTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class KeypairTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    KeypairTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KeypairTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


