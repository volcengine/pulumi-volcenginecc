# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ImageDetectionResultsArgs',
    'ImageDetectionResultsArgsDict',
    'ImageDetectionResultsItemArgs',
    'ImageDetectionResultsItemArgsDict',
    'ImageSnapshotArgs',
    'ImageSnapshotArgsDict',
    'ImageTagArgs',
    'ImageTagArgsDict',
]

MYPY = False

if not MYPY:
    class ImageDetectionResultsArgsDict(TypedDict):
        detection_status: NotRequired[pulumi.Input[builtins.str]]
        """
        检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgsDict']]]]
elif False:
    ImageDetectionResultsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageDetectionResultsArgs:
    def __init__(__self__, *,
                 detection_status: Optional[pulumi.Input[builtins.str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] detection_status: 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        if detection_status is not None:
            pulumi.set(__self__, "detection_status", detection_status)
        if items is not None:
            pulumi.set(__self__, "items", items)

    @property
    @pulumi.getter(name="detectionStatus")
    def detection_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
        """
        return pulumi.get(self, "detection_status")

    @detection_status.setter
    def detection_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "detection_status", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgs']]]]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ImageDetectionResultsItemArgs']]]]):
        pulumi.set(self, "items", value)


if not MYPY:
    class ImageDetectionResultsItemArgsDict(TypedDict):
        name: NotRequired[pulumi.Input[builtins.str]]
        """
        检测项名称。
        """
        result: NotRequired[pulumi.Input[builtins.str]]
        """
        该检测项对应结果。
        """
        risk_code: NotRequired[pulumi.Input[builtins.str]]
        """
        风险描述码。
        """
        risk_level: NotRequired[pulumi.Input[builtins.str]]
        """
        风险等级。若该参数返回值为空，表示无风险。
        """
elif False:
    ImageDetectionResultsItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageDetectionResultsItemArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 result: Optional[pulumi.Input[builtins.str]] = None,
                 risk_code: Optional[pulumi.Input[builtins.str]] = None,
                 risk_level: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] name: 检测项名称。
        :param pulumi.Input[builtins.str] result: 该检测项对应结果。
        :param pulumi.Input[builtins.str] risk_code: 风险描述码。
        :param pulumi.Input[builtins.str] risk_level: 风险等级。若该参数返回值为空，表示无风险。
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if result is not None:
            pulumi.set(__self__, "result", result)
        if risk_code is not None:
            pulumi.set(__self__, "risk_code", risk_code)
        if risk_level is not None:
            pulumi.set(__self__, "risk_level", risk_level)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        检测项名称。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def result(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        该检测项对应结果。
        """
        return pulumi.get(self, "result")

    @result.setter
    def result(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "result", value)

    @property
    @pulumi.getter(name="riskCode")
    def risk_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        风险描述码。
        """
        return pulumi.get(self, "risk_code")

    @risk_code.setter
    def risk_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "risk_code", value)

    @property
    @pulumi.getter(name="riskLevel")
    def risk_level(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        风险等级。若该参数返回值为空，表示无风险。
        """
        return pulumi.get(self, "risk_level")

    @risk_level.setter
    def risk_level(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "risk_level", value)


if not MYPY:
    class ImageSnapshotArgsDict(TypedDict):
        size: NotRequired[pulumi.Input[builtins.int]]
        """
        快照大小。单位为GiB。
        """
        snapshot_id: NotRequired[pulumi.Input[builtins.str]]
        """
        快照ID。
        """
        volume_kind: NotRequired[pulumi.Input[builtins.str]]
        """
        云盘种类。system：系统盘。data：数据盘。
        """
elif False:
    ImageSnapshotArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageSnapshotArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 volume_kind: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] size: 快照大小。单位为GiB。
        :param pulumi.Input[builtins.str] snapshot_id: 快照ID。
        :param pulumi.Input[builtins.str] volume_kind: 云盘种类。system：系统盘。data：数据盘。
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if volume_kind is not None:
            pulumi.set(__self__, "volume_kind", volume_kind)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        快照大小。单位为GiB。
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        快照ID。
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="volumeKind")
    def volume_kind(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        云盘种类。system：系统盘。data：数据盘。
        """
        return pulumi.get(self, "volume_kind")

    @volume_kind.setter
    def volume_kind(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "volume_kind", value)


if not MYPY:
    class ImageTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        镜像标签的标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        镜像标签的值。
        """
elif False:
    ImageTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ImageTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 镜像标签的标签键。
        :param pulumi.Input[builtins.str] value: 镜像标签的值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像标签的标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        镜像标签的值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


