# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CommandArgs', 'Command']

@pulumi.input_type
class CommandArgs:
    def __init__(__self__, *,
                 command_content: pulumi.Input[builtins.str],
                 name: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 content_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_parameter: Optional[pulumi.Input[builtins.bool]] = None,
                 parameter_definitions: Optional[pulumi.Input[Sequence[pulumi.Input['CommandParameterDefinitionArgs']]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 working_dir: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Command resource.
        :param pulumi.Input[builtins.str] command_content: 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        :param pulumi.Input[builtins.str] name: 命令名称。字符长度1~32。不限制特殊字符。
        :param pulumi.Input[builtins.str] type: 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        :param pulumi.Input[builtins.str] content_encoding: 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        :param pulumi.Input[builtins.str] description: 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        :param pulumi.Input[builtins.bool] enable_parameter: 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目，一个资源只能归属于一个项目。
        :param pulumi.Input[builtins.int] timeout: 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        :param pulumi.Input[builtins.str] username: 执行命令时的用户名。
        :param pulumi.Input[builtins.str] working_dir: 创建的命令在ECS实例中运行的目录。
        """
        pulumi.set(__self__, "command_content", command_content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_parameter is not None:
            pulumi.set(__self__, "enable_parameter", enable_parameter)
        if parameter_definitions is not None:
            pulumi.set(__self__, "parameter_definitions", parameter_definitions)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter(name="commandContent")
    def command_content(self) -> pulumi.Input[builtins.str]:
        """
        命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        """
        return pulumi.get(self, "command_content")

    @command_content.setter
    def command_content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "command_content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        命令名称。字符长度1~32。不限制特殊字符。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        """
        return pulumi.get(self, "content_encoding")

    @content_encoding.setter
    def content_encoding(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_encoding", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        """
        return pulumi.get(self, "enable_parameter")

    @enable_parameter.setter
    def enable_parameter(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_parameter", value)

    @property
    @pulumi.getter(name="parameterDefinitions")
    def parameter_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandParameterDefinitionArgs']]]]:
        return pulumi.get(self, "parameter_definitions")

    @parameter_definitions.setter
    def parameter_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandParameterDefinitionArgs']]]]):
        pulumi.set(self, "parameter_definitions", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        资源所属项目，一个资源只能归属于一个项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        执行命令时的用户名。
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建的命令在ECS实例中运行的目录。
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.input_type
class _CommandState:
    def __init__(__self__, *,
                 command_content: Optional[pulumi.Input[builtins.str]] = None,
                 command_id: Optional[pulumi.Input[builtins.str]] = None,
                 content_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_parameter: Optional[pulumi.Input[builtins.bool]] = None,
                 invocation_times: Optional[pulumi.Input[builtins.int]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parameter_definitions: Optional[pulumi.Input[Sequence[pulumi.Input['CommandParameterDefinitionArgs']]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 provider_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 working_dir: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Command resources.
        :param pulumi.Input[builtins.str] command_content: 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        :param pulumi.Input[builtins.str] command_id: 自定义命令ID。
        :param pulumi.Input[builtins.str] content_encoding: 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        :param pulumi.Input[builtins.str] created_time: 创建时间。
        :param pulumi.Input[builtins.str] description: 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        :param pulumi.Input[builtins.bool] enable_parameter: 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        :param pulumi.Input[builtins.int] invocation_times: 命令被调用次数。
        :param pulumi.Input[builtins.str] name: 命令名称。字符长度1~32。不限制特殊字符。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目，一个资源只能归属于一个项目。
        :param pulumi.Input[builtins.str] provider_name: 命令的提供方。
        :param pulumi.Input[builtins.int] timeout: 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        :param pulumi.Input[builtins.str] type: 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        :param pulumi.Input[builtins.str] updated_time: 更新时间。
        :param pulumi.Input[builtins.str] username: 执行命令时的用户名。
        :param pulumi.Input[builtins.str] working_dir: 创建的命令在ECS实例中运行的目录。
        """
        if command_content is not None:
            pulumi.set(__self__, "command_content", command_content)
        if command_id is not None:
            pulumi.set(__self__, "command_id", command_id)
        if content_encoding is not None:
            pulumi.set(__self__, "content_encoding", content_encoding)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enable_parameter is not None:
            pulumi.set(__self__, "enable_parameter", enable_parameter)
        if invocation_times is not None:
            pulumi.set(__self__, "invocation_times", invocation_times)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if parameter_definitions is not None:
            pulumi.set(__self__, "parameter_definitions", parameter_definitions)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if provider_name is not None:
            pulumi.set(__self__, "provider_name", provider_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if working_dir is not None:
            pulumi.set(__self__, "working_dir", working_dir)

    @property
    @pulumi.getter(name="commandContent")
    def command_content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        """
        return pulumi.get(self, "command_content")

    @command_content.setter
    def command_content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "command_content", value)

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        自定义命令ID。
        """
        return pulumi.get(self, "command_id")

    @command_id.setter
    def command_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "command_id", value)

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        """
        return pulumi.get(self, "content_encoding")

    @content_encoding.setter
    def content_encoding(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_encoding", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建时间。
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        """
        return pulumi.get(self, "enable_parameter")

    @enable_parameter.setter
    def enable_parameter(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_parameter", value)

    @property
    @pulumi.getter(name="invocationTimes")
    def invocation_times(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        命令被调用次数。
        """
        return pulumi.get(self, "invocation_times")

    @invocation_times.setter
    def invocation_times(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "invocation_times", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令名称。字符长度1~32。不限制特殊字符。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterDefinitions")
    def parameter_definitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandParameterDefinitionArgs']]]]:
        return pulumi.get(self, "parameter_definitions")

    @parameter_definitions.setter
    def parameter_definitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandParameterDefinitionArgs']]]]):
        pulumi.set(self, "parameter_definitions", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        资源所属项目，一个资源只能归属于一个项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令的提供方。
        """
        return pulumi.get(self, "provider_name")

    @provider_name.setter
    def provider_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "provider_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CommandTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        更新时间。
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        执行命令时的用户名。
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建的命令在ECS实例中运行的目录。
        """
        return pulumi.get(self, "working_dir")

    @working_dir.setter
    def working_dir(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "working_dir", value)


@pulumi.type_token("volcenginecc:ecs/command:Command")
class Command(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_content: Optional[pulumi.Input[builtins.str]] = None,
                 content_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_parameter: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parameter_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CommandParameterDefinitionArgs', 'CommandParameterDefinitionArgsDict']]]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CommandTagArgs', 'CommandTagArgsDict']]]]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 working_dir: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        自定义命令是云助手提供的满足您个性化运维需求的功能，您可以在预置的公共命令不满足需求时创建自定义命令，并通过运维任务在实例中批量执行您编写的自定义命令。

        ## Import

        ```sh
        $ pulumi import volcenginecc:ecs/command:Command example "command_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] command_content: 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        :param pulumi.Input[builtins.str] content_encoding: 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        :param pulumi.Input[builtins.str] description: 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        :param pulumi.Input[builtins.bool] enable_parameter: 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        :param pulumi.Input[builtins.str] name: 命令名称。字符长度1~32。不限制特殊字符。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目，一个资源只能归属于一个项目。
        :param pulumi.Input[builtins.int] timeout: 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        :param pulumi.Input[builtins.str] type: 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        :param pulumi.Input[builtins.str] username: 执行命令时的用户名。
        :param pulumi.Input[builtins.str] working_dir: 创建的命令在ECS实例中运行的目录。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CommandArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        自定义命令是云助手提供的满足您个性化运维需求的功能，您可以在预置的公共命令不满足需求时创建自定义命令，并通过运维任务在实例中批量执行您编写的自定义命令。

        ## Import

        ```sh
        $ pulumi import volcenginecc:ecs/command:Command example "command_id"
        ```

        :param str resource_name: The name of the resource.
        :param CommandArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CommandArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 command_content: Optional[pulumi.Input[builtins.str]] = None,
                 content_encoding: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 enable_parameter: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parameter_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CommandParameterDefinitionArgs', 'CommandParameterDefinitionArgsDict']]]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CommandTagArgs', 'CommandTagArgsDict']]]]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None,
                 working_dir: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CommandArgs.__new__(CommandArgs)

            if command_content is None and not opts.urn:
                raise TypeError("Missing required property 'command_content'")
            __props__.__dict__["command_content"] = command_content
            __props__.__dict__["content_encoding"] = content_encoding
            __props__.__dict__["description"] = description
            __props__.__dict__["enable_parameter"] = enable_parameter
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["parameter_definitions"] = parameter_definitions
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeout"] = timeout
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["username"] = username
            __props__.__dict__["working_dir"] = working_dir
            __props__.__dict__["command_id"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["invocation_times"] = None
            __props__.__dict__["provider_name"] = None
            __props__.__dict__["updated_time"] = None
        super(Command, __self__).__init__(
            'volcenginecc:ecs/command:Command',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            command_content: Optional[pulumi.Input[builtins.str]] = None,
            command_id: Optional[pulumi.Input[builtins.str]] = None,
            content_encoding: Optional[pulumi.Input[builtins.str]] = None,
            created_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            enable_parameter: Optional[pulumi.Input[builtins.bool]] = None,
            invocation_times: Optional[pulumi.Input[builtins.int]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            parameter_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CommandParameterDefinitionArgs', 'CommandParameterDefinitionArgsDict']]]]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            provider_name: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CommandTagArgs', 'CommandTagArgsDict']]]]] = None,
            timeout: Optional[pulumi.Input[builtins.int]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            updated_time: Optional[pulumi.Input[builtins.str]] = None,
            username: Optional[pulumi.Input[builtins.str]] = None,
            working_dir: Optional[pulumi.Input[builtins.str]] = None) -> 'Command':
        """
        Get an existing Command resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] command_content: 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        :param pulumi.Input[builtins.str] command_id: 自定义命令ID。
        :param pulumi.Input[builtins.str] content_encoding: 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        :param pulumi.Input[builtins.str] created_time: 创建时间。
        :param pulumi.Input[builtins.str] description: 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        :param pulumi.Input[builtins.bool] enable_parameter: 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        :param pulumi.Input[builtins.int] invocation_times: 命令被调用次数。
        :param pulumi.Input[builtins.str] name: 命令名称。字符长度1~32。不限制特殊字符。
        :param pulumi.Input[builtins.str] project_name: 资源所属项目，一个资源只能归属于一个项目。
        :param pulumi.Input[builtins.str] provider_name: 命令的提供方。
        :param pulumi.Input[builtins.int] timeout: 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        :param pulumi.Input[builtins.str] type: 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        :param pulumi.Input[builtins.str] updated_time: 更新时间。
        :param pulumi.Input[builtins.str] username: 执行命令时的用户名。
        :param pulumi.Input[builtins.str] working_dir: 创建的命令在ECS实例中运行的目录。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CommandState.__new__(_CommandState)

        __props__.__dict__["command_content"] = command_content
        __props__.__dict__["command_id"] = command_id
        __props__.__dict__["content_encoding"] = content_encoding
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["enable_parameter"] = enable_parameter
        __props__.__dict__["invocation_times"] = invocation_times
        __props__.__dict__["name"] = name
        __props__.__dict__["parameter_definitions"] = parameter_definitions
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["provider_name"] = provider_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timeout"] = timeout
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["username"] = username
        __props__.__dict__["working_dir"] = working_dir
        return Command(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="commandContent")
    def command_content(self) -> pulumi.Output[builtins.str]:
        """
        命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        """
        return pulumi.get(self, "command_content")

    @property
    @pulumi.getter(name="commandId")
    def command_id(self) -> pulumi.Output[builtins.str]:
        """
        自定义命令ID。
        """
        return pulumi.get(self, "command_id")

    @property
    @pulumi.getter(name="contentEncoding")
    def content_encoding(self) -> pulumi.Output[builtins.str]:
        """
        命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        """
        return pulumi.get(self, "content_encoding")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[builtins.str]:
        """
        创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="enableParameter")
    def enable_parameter(self) -> pulumi.Output[builtins.bool]:
        """
        创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        """
        return pulumi.get(self, "enable_parameter")

    @property
    @pulumi.getter(name="invocationTimes")
    def invocation_times(self) -> pulumi.Output[builtins.int]:
        """
        命令被调用次数。
        """
        return pulumi.get(self, "invocation_times")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        命令名称。字符长度1~32。不限制特殊字符。
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parameterDefinitions")
    def parameter_definitions(self) -> pulumi.Output[Sequence['outputs.CommandParameterDefinition']]:
        return pulumi.get(self, "parameter_definitions")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        资源所属项目，一个资源只能归属于一个项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> pulumi.Output[builtins.str]:
        """
        命令的提供方。
        """
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.CommandTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[builtins.int]:
        """
        创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[builtins.str]:
        """
        更新时间。
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[builtins.str]:
        """
        执行命令时的用户名。
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="workingDir")
    def working_dir(self) -> pulumi.Output[builtins.str]:
        """
        创建的命令在ECS实例中运行的目录。
        """
        return pulumi.get(self, "working_dir")

