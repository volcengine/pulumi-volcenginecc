# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTransitRouterRouteTableResult',
    'AwaitableGetTransitRouterRouteTableResult',
    'get_transit_router_route_table',
    'get_transit_router_route_table_output',
]

@pulumi.output_type
class GetTransitRouterRouteTableResult:
    """
    A collection of values returned by getTransitRouterRouteTable.
    """
    def __init__(__self__, creation_time=None, description=None, id=None, in_route_policy_table_id=None, out_route_policy_table_id=None, status=None, tags=None, transit_router_id=None, transit_router_route_table_id=None, transit_router_route_table_name=None, transit_router_route_table_type=None, update_time=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_route_policy_table_id and not isinstance(in_route_policy_table_id, str):
            raise TypeError("Expected argument 'in_route_policy_table_id' to be a str")
        pulumi.set(__self__, "in_route_policy_table_id", in_route_policy_table_id)
        if out_route_policy_table_id and not isinstance(out_route_policy_table_id, str):
            raise TypeError("Expected argument 'out_route_policy_table_id' to be a str")
        pulumi.set(__self__, "out_route_policy_table_id", out_route_policy_table_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if transit_router_id and not isinstance(transit_router_id, str):
            raise TypeError("Expected argument 'transit_router_id' to be a str")
        pulumi.set(__self__, "transit_router_id", transit_router_id)
        if transit_router_route_table_id and not isinstance(transit_router_route_table_id, str):
            raise TypeError("Expected argument 'transit_router_route_table_id' to be a str")
        pulumi.set(__self__, "transit_router_route_table_id", transit_router_route_table_id)
        if transit_router_route_table_name and not isinstance(transit_router_route_table_name, str):
            raise TypeError("Expected argument 'transit_router_route_table_name' to be a str")
        pulumi.set(__self__, "transit_router_route_table_name", transit_router_route_table_name)
        if transit_router_route_table_type and not isinstance(transit_router_route_table_type, str):
            raise TypeError("Expected argument 'transit_router_route_table_type' to be a str")
        pulumi.set(__self__, "transit_router_route_table_type", transit_router_route_table_type)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> builtins.str:
        """
        TR路由表的创建时间
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        TR路由表的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inRoutePolicyTableId")
    def in_route_policy_table_id(self) -> builtins.str:
        """
        TR路由表关联的收方向路由策略的ID
        """
        return pulumi.get(self, "in_route_policy_table_id")

    @property
    @pulumi.getter(name="outRoutePolicyTableId")
    def out_route_policy_table_id(self) -> builtins.str:
        """
        TR路由表关联的发方向路由策略的ID
        """
        return pulumi.get(self, "out_route_policy_table_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        TR路由表的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTransitRouterRouteTableTagResult']:
        """
        TR路由表的标签信息。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="transitRouterId")
    def transit_router_id(self) -> builtins.str:
        """
        中转路由器实例的ID
        """
        return pulumi.get(self, "transit_router_id")

    @property
    @pulumi.getter(name="transitRouterRouteTableId")
    def transit_router_route_table_id(self) -> builtins.str:
        """
        TR路由表的ID
        """
        return pulumi.get(self, "transit_router_route_table_id")

    @property
    @pulumi.getter(name="transitRouterRouteTableName")
    def transit_router_route_table_name(self) -> builtins.str:
        """
        TR路由表的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为TR路由表的ID
        """
        return pulumi.get(self, "transit_router_route_table_name")

    @property
    @pulumi.getter(name="transitRouterRouteTableType")
    def transit_router_route_table_type(self) -> builtins.str:
        """
        TR路由表的类型。System：系统路由表。Custom：自定义路由表。
        """
        return pulumi.get(self, "transit_router_route_table_type")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> builtins.str:
        """
        TR路由表的最近操作时间
        """
        return pulumi.get(self, "update_time")


class AwaitableGetTransitRouterRouteTableResult(GetTransitRouterRouteTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransitRouterRouteTableResult(
            creation_time=self.creation_time,
            description=self.description,
            id=self.id,
            in_route_policy_table_id=self.in_route_policy_table_id,
            out_route_policy_table_id=self.out_route_policy_table_id,
            status=self.status,
            tags=self.tags,
            transit_router_id=self.transit_router_id,
            transit_router_route_table_id=self.transit_router_route_table_id,
            transit_router_route_table_name=self.transit_router_route_table_name,
            transit_router_route_table_type=self.transit_router_route_table_type,
            update_time=self.update_time)


def get_transit_router_route_table(id: Optional[builtins.str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransitRouterRouteTableResult:
    """
    Data Source schema for Volcengine::TransitRouter::TransitRouterRouteTable


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:transitrouter/getTransitRouterRouteTable:getTransitRouterRouteTable', __args__, opts=opts, typ=GetTransitRouterRouteTableResult).value

    return AwaitableGetTransitRouterRouteTableResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        in_route_policy_table_id=pulumi.get(__ret__, 'in_route_policy_table_id'),
        out_route_policy_table_id=pulumi.get(__ret__, 'out_route_policy_table_id'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        transit_router_id=pulumi.get(__ret__, 'transit_router_id'),
        transit_router_route_table_id=pulumi.get(__ret__, 'transit_router_route_table_id'),
        transit_router_route_table_name=pulumi.get(__ret__, 'transit_router_route_table_name'),
        transit_router_route_table_type=pulumi.get(__ret__, 'transit_router_route_table_type'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_transit_router_route_table_output(id: Optional[pulumi.Input[builtins.str]] = None,
                                          opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransitRouterRouteTableResult]:
    """
    Data Source schema for Volcengine::TransitRouter::TransitRouterRouteTable


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:transitrouter/getTransitRouterRouteTable:getTransitRouterRouteTable', __args__, opts=opts, typ=GetTransitRouterRouteTableResult)
    return __ret__.apply(lambda __response__: GetTransitRouterRouteTableResult(
        creation_time=pulumi.get(__response__, 'creation_time'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        in_route_policy_table_id=pulumi.get(__response__, 'in_route_policy_table_id'),
        out_route_policy_table_id=pulumi.get(__response__, 'out_route_policy_table_id'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        transit_router_id=pulumi.get(__response__, 'transit_router_id'),
        transit_router_route_table_id=pulumi.get(__response__, 'transit_router_route_table_id'),
        transit_router_route_table_name=pulumi.get(__response__, 'transit_router_route_table_name'),
        transit_router_route_table_type=pulumi.get(__response__, 'transit_router_route_table_type'),
        update_time=pulumi.get(__response__, 'update_time')))
