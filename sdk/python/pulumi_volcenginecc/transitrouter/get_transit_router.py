# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTransitRouterResult',
    'AwaitableGetTransitRouterResult',
    'get_transit_router',
    'get_transit_router_output',
]

@pulumi.output_type
class GetTransitRouterResult:
    """
    A collection of values returned by getTransitRouter.
    """
    def __init__(__self__, account_id=None, asn=None, attachments=None, business_status=None, creation_time=None, deleted_time=None, description=None, grant_status=None, id=None, overdue_time=None, project_name=None, status=None, tags=None, transit_router_id=None, transit_router_name=None, update_time=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if asn and not isinstance(asn, int):
            raise TypeError("Expected argument 'asn' to be a int")
        pulumi.set(__self__, "asn", asn)
        if attachments and not isinstance(attachments, list):
            raise TypeError("Expected argument 'attachments' to be a list")
        pulumi.set(__self__, "attachments", attachments)
        if business_status and not isinstance(business_status, str):
            raise TypeError("Expected argument 'business_status' to be a str")
        pulumi.set(__self__, "business_status", business_status)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if deleted_time and not isinstance(deleted_time, str):
            raise TypeError("Expected argument 'deleted_time' to be a str")
        pulumi.set(__self__, "deleted_time", deleted_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if grant_status and not isinstance(grant_status, str):
            raise TypeError("Expected argument 'grant_status' to be a str")
        pulumi.set(__self__, "grant_status", grant_status)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if overdue_time and not isinstance(overdue_time, str):
            raise TypeError("Expected argument 'overdue_time' to be a str")
        pulumi.set(__self__, "overdue_time", overdue_time)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if transit_router_id and not isinstance(transit_router_id, str):
            raise TypeError("Expected argument 'transit_router_id' to be a str")
        pulumi.set(__self__, "transit_router_id", transit_router_id)
        if transit_router_name and not isinstance(transit_router_name, str):
            raise TypeError("Expected argument 'transit_router_name' to be a str")
        pulumi.set(__self__, "transit_router_name", transit_router_name)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        网络实例连接所属的账号ID。
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def asn(self) -> builtins.int:
        """
        中转路由器的ASN号。取值范围为64512 ～ 65534 和 4200000000 ～ 4294967294，默认值为64512。
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def attachments(self) -> Sequence['outputs.GetTransitRouterAttachmentResult']:
        """
        网络实例连接的详细信息。
        """
        return pulumi.get(self, "attachments")

    @property
    @pulumi.getter(name="businessStatus")
    def business_status(self) -> builtins.str:
        """
        网络实例连接的业务状态。取值如下：Normal：正常。FinancialLocked：已冻结。
        """
        return pulumi.get(self, "business_status")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> builtins.str:
        """
        网络实例连接的创建时间。
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="deletedTime")
    def deleted_time(self) -> builtins.str:
        """
        网络实例连接的删除时间。
        """
        return pulumi.get(self, "deleted_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        中转路由器实例的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="grantStatus")
    def grant_status(self) -> builtins.str:
        """
        实例共享的状态。Accepted：已接受。Initial：待接受。
        """
        return pulumi.get(self, "grant_status")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> builtins.str:
        """
        中转路由器实例的欠费关停时间。
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        中转路由器实例所属项目的名称。不传入该参数或该参数不传入数值时，默认为default。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        中转路由器实例的状态。Creating: 创建中。Deleting: 删除中。Pending：配置中。Available：可用。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetTransitRouterTagResult']:
        """
        标签列表
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="transitRouterId")
    def transit_router_id(self) -> builtins.str:
        """
        中转路由器实例的ID。
        """
        return pulumi.get(self, "transit_router_id")

    @property
    @pulumi.getter(name="transitRouterName")
    def transit_router_name(self) -> builtins.str:
        """
        中转路由器实例的名称。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：点号（.）、下划线（_）和短横线（-）。长度限制为1 ~ 128个字符。不传入该参数或该参数不传入数值时，默认为中转路由器实例的ID。
        """
        return pulumi.get(self, "transit_router_name")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> builtins.str:
        """
        中转路由器实例的最近操作时间。
        """
        return pulumi.get(self, "update_time")


class AwaitableGetTransitRouterResult(GetTransitRouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTransitRouterResult(
            account_id=self.account_id,
            asn=self.asn,
            attachments=self.attachments,
            business_status=self.business_status,
            creation_time=self.creation_time,
            deleted_time=self.deleted_time,
            description=self.description,
            grant_status=self.grant_status,
            id=self.id,
            overdue_time=self.overdue_time,
            project_name=self.project_name,
            status=self.status,
            tags=self.tags,
            transit_router_id=self.transit_router_id,
            transit_router_name=self.transit_router_name,
            update_time=self.update_time)


def get_transit_router(id: Optional[builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTransitRouterResult:
    """
    Data Source schema for Volcengine::TransitRouter::TransitRouter


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:transitrouter/getTransitRouter:getTransitRouter', __args__, opts=opts, typ=GetTransitRouterResult).value

    return AwaitableGetTransitRouterResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        asn=pulumi.get(__ret__, 'asn'),
        attachments=pulumi.get(__ret__, 'attachments'),
        business_status=pulumi.get(__ret__, 'business_status'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        deleted_time=pulumi.get(__ret__, 'deleted_time'),
        description=pulumi.get(__ret__, 'description'),
        grant_status=pulumi.get(__ret__, 'grant_status'),
        id=pulumi.get(__ret__, 'id'),
        overdue_time=pulumi.get(__ret__, 'overdue_time'),
        project_name=pulumi.get(__ret__, 'project_name'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        transit_router_id=pulumi.get(__ret__, 'transit_router_id'),
        transit_router_name=pulumi.get(__ret__, 'transit_router_name'),
        update_time=pulumi.get(__ret__, 'update_time'))
def get_transit_router_output(id: Optional[pulumi.Input[builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTransitRouterResult]:
    """
    Data Source schema for Volcengine::TransitRouter::TransitRouter


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:transitrouter/getTransitRouter:getTransitRouter', __args__, opts=opts, typ=GetTransitRouterResult)
    return __ret__.apply(lambda __response__: GetTransitRouterResult(
        account_id=pulumi.get(__response__, 'account_id'),
        asn=pulumi.get(__response__, 'asn'),
        attachments=pulumi.get(__response__, 'attachments'),
        business_status=pulumi.get(__response__, 'business_status'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        deleted_time=pulumi.get(__response__, 'deleted_time'),
        description=pulumi.get(__response__, 'description'),
        grant_status=pulumi.get(__response__, 'grant_status'),
        id=pulumi.get(__response__, 'id'),
        overdue_time=pulumi.get(__response__, 'overdue_time'),
        project_name=pulumi.get(__response__, 'project_name'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        transit_router_id=pulumi.get(__response__, 'transit_router_id'),
        transit_router_name=pulumi.get(__response__, 'transit_router_name'),
        update_time=pulumi.get(__response__, 'update_time')))
