# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UpstreamSourceArgs', 'UpstreamSource']

@pulumi.input_type
class UpstreamSourceArgs:
    def __init__(__self__, *,
                 gateway_id: pulumi.Input[builtins.str],
                 source_spec: pulumi.Input['UpstreamSourceSourceSpecArgs'],
                 source_type: pulumi.Input[builtins.str],
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 ingress_settings: Optional[pulumi.Input['UpstreamSourceIngressSettingsArgs']] = None,
                 watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a UpstreamSource resource.
        :param pulumi.Input[builtins.str] gateway_id: 网关实例ID。
        :param pulumi.Input['UpstreamSourceSourceSpecArgs'] source_spec: Upstream来源配置。
        :param pulumi.Input[builtins.str] source_type: Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        :param pulumi.Input[builtins.str] comments: 备注，长度限制为0~253个字符。
        :param pulumi.Input['UpstreamSourceIngressSettingsArgs'] ingress_settings: 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] watch_namespaces: 指定命名空间。
        """
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "source_spec", source_spec)
        pulumi.set(__self__, "source_type", source_type)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if ingress_settings is not None:
            pulumi.set(__self__, "ingress_settings", ingress_settings)
        if watch_namespaces is not None:
            pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Input[builtins.str]:
        """
        网关实例ID。
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="sourceSpec")
    def source_spec(self) -> pulumi.Input['UpstreamSourceSourceSpecArgs']:
        """
        Upstream来源配置。
        """
        return pulumi.get(self, "source_spec")

    @source_spec.setter
    def source_spec(self, value: pulumi.Input['UpstreamSourceSourceSpecArgs']):
        pulumi.set(self, "source_spec", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[builtins.str]:
        """
        Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        备注，长度限制为0~253个字符。
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> Optional[pulumi.Input['UpstreamSourceIngressSettingsArgs']]:
        """
        路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        """
        return pulumi.get(self, "ingress_settings")

    @ingress_settings.setter
    def ingress_settings(self, value: Optional[pulumi.Input['UpstreamSourceIngressSettingsArgs']]):
        pulumi.set(self, "ingress_settings", value)

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        指定命名空间。
        """
        return pulumi.get(self, "watch_namespaces")

    @watch_namespaces.setter
    def watch_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "watch_namespaces", value)


@pulumi.input_type
class _UpstreamSourceState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ingress_settings: Optional[pulumi.Input['UpstreamSourceIngressSettingsArgs']] = None,
                 source_spec: Optional[pulumi.Input['UpstreamSourceSourceSpecArgs']] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 status_message: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None,
                 upstream_source_id: Optional[pulumi.Input[builtins.str]] = None,
                 watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Input properties used for looking up and filtering UpstreamSource resources.
        :param pulumi.Input[builtins.str] comments: 备注，长度限制为0~253个字符。
        :param pulumi.Input[builtins.str] created_time: 创建时间。
        :param pulumi.Input[builtins.str] gateway_id: 网关实例ID。
        :param pulumi.Input['UpstreamSourceIngressSettingsArgs'] ingress_settings: 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        :param pulumi.Input['UpstreamSourceSourceSpecArgs'] source_spec: Upstream来源配置。
        :param pulumi.Input[builtins.str] source_type: Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        :param pulumi.Input[builtins.str] status: 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
        :param pulumi.Input[builtins.str] status_message: 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
        :param pulumi.Input[builtins.str] updated_time: 更新时间。
        :param pulumi.Input[builtins.str] upstream_source_id: Upstream来源ID。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] watch_namespaces: 指定命名空间。
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if ingress_settings is not None:
            pulumi.set(__self__, "ingress_settings", ingress_settings)
        if source_spec is not None:
            pulumi.set(__self__, "source_spec", source_spec)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if upstream_source_id is not None:
            pulumi.set(__self__, "upstream_source_id", upstream_source_id)
        if watch_namespaces is not None:
            pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        备注，长度限制为0~253个字符。
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建时间。
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        网关实例ID。
        """
        return pulumi.get(self, "gateway_id")

    @gateway_id.setter
    def gateway_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "gateway_id", value)

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> Optional[pulumi.Input['UpstreamSourceIngressSettingsArgs']]:
        """
        路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        """
        return pulumi.get(self, "ingress_settings")

    @ingress_settings.setter
    def ingress_settings(self, value: Optional[pulumi.Input['UpstreamSourceIngressSettingsArgs']]):
        pulumi.set(self, "ingress_settings", value)

    @property
    @pulumi.getter(name="sourceSpec")
    def source_spec(self) -> Optional[pulumi.Input['UpstreamSourceSourceSpecArgs']]:
        """
        Upstream来源配置。
        """
        return pulumi.get(self, "source_spec")

    @source_spec.setter
    def source_spec(self, value: Optional[pulumi.Input['UpstreamSourceSourceSpecArgs']]):
        pulumi.set(self, "source_spec", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
        """
        return pulumi.get(self, "status_message")

    @status_message.setter
    def status_message(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status_message", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        更新时间。
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Upstream来源ID。
        """
        return pulumi.get(self, "upstream_source_id")

    @upstream_source_id.setter
    def upstream_source_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "upstream_source_id", value)

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        指定命名空间。
        """
        return pulumi.get(self, "watch_namespaces")

    @watch_namespaces.setter
    def watch_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "watch_namespaces", value)


@pulumi.type_token("volcenginecc:apig/upstreamSource:UpstreamSource")
class UpstreamSource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ingress_settings: Optional[pulumi.Input[Union['UpstreamSourceIngressSettingsArgs', 'UpstreamSourceIngressSettingsArgsDict']]] = None,
                 source_spec: Optional[pulumi.Input[Union['UpstreamSourceSourceSpecArgs', 'UpstreamSourceSourceSpecArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        API 网关支持基于容器服务（VKE）集和容器服务的注册集群功能，将集群导入到 API 网关实例，将其作为网关的 Upstream 来源，以便网关获取集群中的 Service 列表。

        ## Import

        ```sh
        $ pulumi import volcenginecc:apig/upstreamSource:UpstreamSource example "upstream_source_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] comments: 备注，长度限制为0~253个字符。
        :param pulumi.Input[builtins.str] gateway_id: 网关实例ID。
        :param pulumi.Input[Union['UpstreamSourceIngressSettingsArgs', 'UpstreamSourceIngressSettingsArgsDict']] ingress_settings: 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        :param pulumi.Input[Union['UpstreamSourceSourceSpecArgs', 'UpstreamSourceSourceSpecArgsDict']] source_spec: Upstream来源配置。
        :param pulumi.Input[builtins.str] source_type: Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] watch_namespaces: 指定命名空间。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UpstreamSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        API 网关支持基于容器服务（VKE）集和容器服务的注册集群功能，将集群导入到 API 网关实例，将其作为网关的 Upstream 来源，以便网关获取集群中的 Service 列表。

        ## Import

        ```sh
        $ pulumi import volcenginecc:apig/upstreamSource:UpstreamSource example "upstream_source_id"
        ```

        :param str resource_name: The name of the resource.
        :param UpstreamSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UpstreamSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[builtins.str]] = None,
                 gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ingress_settings: Optional[pulumi.Input[Union['UpstreamSourceIngressSettingsArgs', 'UpstreamSourceIngressSettingsArgsDict']]] = None,
                 source_spec: Optional[pulumi.Input[Union['UpstreamSourceSourceSpecArgs', 'UpstreamSourceSourceSpecArgsDict']]] = None,
                 source_type: Optional[pulumi.Input[builtins.str]] = None,
                 watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UpstreamSourceArgs.__new__(UpstreamSourceArgs)

            __props__.__dict__["comments"] = comments
            if gateway_id is None and not opts.urn:
                raise TypeError("Missing required property 'gateway_id'")
            __props__.__dict__["gateway_id"] = gateway_id
            __props__.__dict__["ingress_settings"] = ingress_settings
            if source_spec is None and not opts.urn:
                raise TypeError("Missing required property 'source_spec'")
            __props__.__dict__["source_spec"] = source_spec
            if source_type is None and not opts.urn:
                raise TypeError("Missing required property 'source_type'")
            __props__.__dict__["source_type"] = source_type
            __props__.__dict__["watch_namespaces"] = watch_namespaces
            __props__.__dict__["created_time"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_message"] = None
            __props__.__dict__["updated_time"] = None
            __props__.__dict__["upstream_source_id"] = None
        super(UpstreamSource, __self__).__init__(
            'volcenginecc:apig/upstreamSource:UpstreamSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[builtins.str]] = None,
            created_time: Optional[pulumi.Input[builtins.str]] = None,
            gateway_id: Optional[pulumi.Input[builtins.str]] = None,
            ingress_settings: Optional[pulumi.Input[Union['UpstreamSourceIngressSettingsArgs', 'UpstreamSourceIngressSettingsArgsDict']]] = None,
            source_spec: Optional[pulumi.Input[Union['UpstreamSourceSourceSpecArgs', 'UpstreamSourceSourceSpecArgsDict']]] = None,
            source_type: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            status_message: Optional[pulumi.Input[builtins.str]] = None,
            updated_time: Optional[pulumi.Input[builtins.str]] = None,
            upstream_source_id: Optional[pulumi.Input[builtins.str]] = None,
            watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None) -> 'UpstreamSource':
        """
        Get an existing UpstreamSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] comments: 备注，长度限制为0~253个字符。
        :param pulumi.Input[builtins.str] created_time: 创建时间。
        :param pulumi.Input[builtins.str] gateway_id: 网关实例ID。
        :param pulumi.Input[Union['UpstreamSourceIngressSettingsArgs', 'UpstreamSourceIngressSettingsArgsDict']] ingress_settings: 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        :param pulumi.Input[Union['UpstreamSourceSourceSpecArgs', 'UpstreamSourceSourceSpecArgsDict']] source_spec: Upstream来源配置。
        :param pulumi.Input[builtins.str] source_type: Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        :param pulumi.Input[builtins.str] status: 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
        :param pulumi.Input[builtins.str] status_message: 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
        :param pulumi.Input[builtins.str] updated_time: 更新时间。
        :param pulumi.Input[builtins.str] upstream_source_id: Upstream来源ID。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] watch_namespaces: 指定命名空间。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UpstreamSourceState.__new__(_UpstreamSourceState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["gateway_id"] = gateway_id
        __props__.__dict__["ingress_settings"] = ingress_settings
        __props__.__dict__["source_spec"] = source_spec
        __props__.__dict__["source_type"] = source_type
        __props__.__dict__["status"] = status
        __props__.__dict__["status_message"] = status_message
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["upstream_source_id"] = upstream_source_id
        __props__.__dict__["watch_namespaces"] = watch_namespaces
        return UpstreamSource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[builtins.str]:
        """
        备注，长度限制为0~253个字符。
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[builtins.str]:
        """
        创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> pulumi.Output[builtins.str]:
        """
        网关实例ID。
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="ingressSettings")
    def ingress_settings(self) -> pulumi.Output['outputs.UpstreamSourceIngressSettings']:
        """
        路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
        """
        return pulumi.get(self, "ingress_settings")

    @property
    @pulumi.getter(name="sourceSpec")
    def source_spec(self) -> pulumi.Output['outputs.UpstreamSourceSourceSpec']:
        """
        Upstream来源配置。
        """
        return pulumi.get(self, "source_spec")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Output[builtins.str]:
        """
        Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
        """
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> pulumi.Output[builtins.str]:
        """
        导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[builtins.str]:
        """
        更新时间。
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="upstreamSourceId")
    def upstream_source_id(self) -> pulumi.Output[builtins.str]:
        """
        Upstream来源ID。
        """
        return pulumi.get(self, "upstream_source_id")

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        指定命名空间。
        """
        return pulumi.get(self, "watch_namespaces")

