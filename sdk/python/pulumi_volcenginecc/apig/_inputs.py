# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'UpstreamSourceIngressSettingsArgs',
    'UpstreamSourceIngressSettingsArgsDict',
    'UpstreamSourceSourceSpecArgs',
    'UpstreamSourceSourceSpecArgsDict',
    'UpstreamSourceSourceSpecK8SSourceArgs',
    'UpstreamSourceSourceSpecK8SSourceArgsDict',
    'UpstreamSourceSourceSpecNacosSourceArgs',
    'UpstreamSourceSourceSpecNacosSourceArgsDict',
    'UpstreamSourceSourceSpecNacosSourceAuthConfigArgs',
    'UpstreamSourceSourceSpecNacosSourceAuthConfigArgsDict',
    'UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs',
    'UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgsDict',
]

MYPY = False

if not MYPY:
    class UpstreamSourceIngressSettingsArgsDict(TypedDict):
        enable_all_ingress_classes: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否启用所有Ingress类。
        """
        enable_all_namespaces: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否全部命名空间。
        """
        enable_ingress: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否开启。
        """
        enable_ingress_without_ingress_class: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否监听IngressClass为空的资源。
        """
        ingress_classes: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        指定IngressClass。
        """
        update_status: NotRequired[pulumi.Input[builtins.bool]]
        """
        流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        """
        watch_namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        指定命名空间。
        """
elif False:
    UpstreamSourceIngressSettingsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpstreamSourceIngressSettingsArgs:
    def __init__(__self__, *,
                 enable_all_ingress_classes: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_all_namespaces: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ingress: Optional[pulumi.Input[builtins.bool]] = None,
                 enable_ingress_without_ingress_class: Optional[pulumi.Input[builtins.bool]] = None,
                 ingress_classes: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 update_status: Optional[pulumi.Input[builtins.bool]] = None,
                 watch_namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.bool] enable_all_ingress_classes: 是否启用所有Ingress类。
        :param pulumi.Input[builtins.bool] enable_all_namespaces: 是否全部命名空间。
        :param pulumi.Input[builtins.bool] enable_ingress: 是否开启。
        :param pulumi.Input[builtins.bool] enable_ingress_without_ingress_class: 是否监听IngressClass为空的资源。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ingress_classes: 指定IngressClass。
        :param pulumi.Input[builtins.bool] update_status: 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] watch_namespaces: 指定命名空间。
        """
        if enable_all_ingress_classes is not None:
            pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        if enable_all_namespaces is not None:
            pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        if enable_ingress is not None:
            pulumi.set(__self__, "enable_ingress", enable_ingress)
        if enable_ingress_without_ingress_class is not None:
            pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        if ingress_classes is not None:
            pulumi.set(__self__, "ingress_classes", ingress_classes)
        if update_status is not None:
            pulumi.set(__self__, "update_status", update_status)
        if watch_namespaces is not None:
            pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否启用所有Ingress类。
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @enable_all_ingress_classes.setter
    def enable_all_ingress_classes(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_all_ingress_classes", value)

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否全部命名空间。
        """
        return pulumi.get(self, "enable_all_namespaces")

    @enable_all_namespaces.setter
    def enable_all_namespaces(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_all_namespaces", value)

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启。
        """
        return pulumi.get(self, "enable_ingress")

    @enable_ingress.setter
    def enable_ingress(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ingress", value)

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否监听IngressClass为空的资源。
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @enable_ingress_without_ingress_class.setter
    def enable_ingress_without_ingress_class(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enable_ingress_without_ingress_class", value)

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        指定IngressClass。
        """
        return pulumi.get(self, "ingress_classes")

    @ingress_classes.setter
    def ingress_classes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ingress_classes", value)

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        """
        return pulumi.get(self, "update_status")

    @update_status.setter
    def update_status(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "update_status", value)

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        指定命名空间。
        """
        return pulumi.get(self, "watch_namespaces")

    @watch_namespaces.setter
    def watch_namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "watch_namespaces", value)


if not MYPY:
    class UpstreamSourceSourceSpecArgsDict(TypedDict):
        k8_s_source: NotRequired[pulumi.Input['UpstreamSourceSourceSpecK8SSourceArgsDict']]
        """
        容器集群来源。
        """
        nacos_source: NotRequired[pulumi.Input['UpstreamSourceSourceSpecNacosSourceArgsDict']]
        """
        注册中心来源。
        """
elif False:
    UpstreamSourceSourceSpecArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpstreamSourceSourceSpecArgs:
    def __init__(__self__, *,
                 k8_s_source: Optional[pulumi.Input['UpstreamSourceSourceSpecK8SSourceArgs']] = None,
                 nacos_source: Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceArgs']] = None):
        """
        :param pulumi.Input['UpstreamSourceSourceSpecK8SSourceArgs'] k8_s_source: 容器集群来源。
        :param pulumi.Input['UpstreamSourceSourceSpecNacosSourceArgs'] nacos_source: 注册中心来源。
        """
        if k8_s_source is not None:
            pulumi.set(__self__, "k8_s_source", k8_s_source)
        if nacos_source is not None:
            pulumi.set(__self__, "nacos_source", nacos_source)

    @property
    @pulumi.getter(name="k8SSource")
    def k8_s_source(self) -> Optional[pulumi.Input['UpstreamSourceSourceSpecK8SSourceArgs']]:
        """
        容器集群来源。
        """
        return pulumi.get(self, "k8_s_source")

    @k8_s_source.setter
    def k8_s_source(self, value: Optional[pulumi.Input['UpstreamSourceSourceSpecK8SSourceArgs']]):
        pulumi.set(self, "k8_s_source", value)

    @property
    @pulumi.getter(name="nacosSource")
    def nacos_source(self) -> Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceArgs']]:
        """
        注册中心来源。
        """
        return pulumi.get(self, "nacos_source")

    @nacos_source.setter
    def nacos_source(self, value: Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceArgs']]):
        pulumi.set(self, "nacos_source", value)


if not MYPY:
    class UpstreamSourceSourceSpecK8SSourceArgsDict(TypedDict):
        cluster_id: NotRequired[pulumi.Input[builtins.str]]
        """
        集群ID。
        """
        cluster_type: NotRequired[pulumi.Input[builtins.str]]
        """
        集群类型。
        """
elif False:
    UpstreamSourceSourceSpecK8SSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpstreamSourceSourceSpecK8SSourceArgs:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cluster_id: 集群ID。
        :param pulumi.Input[builtins.str] cluster_type: 集群类型。
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        集群ID。
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        集群类型。
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cluster_type", value)


if not MYPY:
    class UpstreamSourceSourceSpecNacosSourceArgsDict(TypedDict):
        auth_config: NotRequired[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigArgsDict']]
        """
        认证配置。
        """
        nacos_id: NotRequired[pulumi.Input[builtins.str]]
        """
        Nacos ID。
        """
        nacos_name: NotRequired[pulumi.Input[builtins.str]]
        """
        Nacos名称。
        """
elif False:
    UpstreamSourceSourceSpecNacosSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpstreamSourceSourceSpecNacosSourceArgs:
    def __init__(__self__, *,
                 auth_config: Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigArgs']] = None,
                 nacos_id: Optional[pulumi.Input[builtins.str]] = None,
                 nacos_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigArgs'] auth_config: 认证配置。
        :param pulumi.Input[builtins.str] nacos_id: Nacos ID。
        :param pulumi.Input[builtins.str] nacos_name: Nacos名称。
        """
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if nacos_id is not None:
            pulumi.set(__self__, "nacos_id", nacos_id)
        if nacos_name is not None:
            pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigArgs']]:
        """
        认证配置。
        """
        return pulumi.get(self, "auth_config")

    @auth_config.setter
    def auth_config(self, value: Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigArgs']]):
        pulumi.set(self, "auth_config", value)

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Nacos ID。
        """
        return pulumi.get(self, "nacos_id")

    @nacos_id.setter
    def nacos_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nacos_id", value)

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Nacos名称。
        """
        return pulumi.get(self, "nacos_name")

    @nacos_name.setter
    def nacos_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "nacos_name", value)


if not MYPY:
    class UpstreamSourceSourceSpecNacosSourceAuthConfigArgsDict(TypedDict):
        basic: NotRequired[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgsDict']]
        """
        Basic认证。
        """
elif False:
    UpstreamSourceSourceSpecNacosSourceAuthConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpstreamSourceSourceSpecNacosSourceAuthConfigArgs:
    def __init__(__self__, *,
                 basic: Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs']] = None):
        """
        :param pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs'] basic: Basic认证。
        """
        if basic is not None:
            pulumi.set(__self__, "basic", basic)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs']]:
        """
        Basic认证。
        """
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input['UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs']]):
        pulumi.set(self, "basic", value)


if not MYPY:
    class UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgsDict(TypedDict):
        password: NotRequired[pulumi.Input[builtins.str]]
        """
        密码。
        """
        username: NotRequired[pulumi.Input[builtins.str]]
        """
        用户名。
        """
elif False:
    UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[builtins.str]] = None,
                 username: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] password: 密码。
        :param pulumi.Input[builtins.str] username: 用户名。
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        密码。
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        用户名。
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "username", value)


