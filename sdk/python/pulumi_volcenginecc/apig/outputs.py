# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'UpstreamSourceIngressSettings',
    'UpstreamSourceSourceSpec',
    'UpstreamSourceSourceSpecK8SSource',
    'UpstreamSourceSourceSpecNacosSource',
    'UpstreamSourceSourceSpecNacosSourceAuthConfig',
    'UpstreamSourceSourceSpecNacosSourceAuthConfigBasic',
    'GetUpstreamSourceIngressSettingsResult',
    'GetUpstreamSourceSourceSpecResult',
    'GetUpstreamSourceSourceSpecK8SSourceResult',
    'GetUpstreamSourceSourceSpecNacosSourceResult',
    'GetUpstreamSourceSourceSpecNacosSourceAuthConfigResult',
    'GetUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult',
]

@pulumi.output_type
class UpstreamSourceIngressSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableAllIngressClasses":
            suggest = "enable_all_ingress_classes"
        elif key == "enableAllNamespaces":
            suggest = "enable_all_namespaces"
        elif key == "enableIngress":
            suggest = "enable_ingress"
        elif key == "enableIngressWithoutIngressClass":
            suggest = "enable_ingress_without_ingress_class"
        elif key == "ingressClasses":
            suggest = "ingress_classes"
        elif key == "updateStatus":
            suggest = "update_status"
        elif key == "watchNamespaces":
            suggest = "watch_namespaces"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamSourceIngressSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamSourceIngressSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamSourceIngressSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_all_ingress_classes: Optional[builtins.bool] = None,
                 enable_all_namespaces: Optional[builtins.bool] = None,
                 enable_ingress: Optional[builtins.bool] = None,
                 enable_ingress_without_ingress_class: Optional[builtins.bool] = None,
                 ingress_classes: Optional[Sequence[builtins.str]] = None,
                 update_status: Optional[builtins.bool] = None,
                 watch_namespaces: Optional[Sequence[builtins.str]] = None):
        """
        :param builtins.bool enable_all_ingress_classes: 是否启用所有Ingress类。
        :param builtins.bool enable_all_namespaces: 是否全部命名空间。
        :param builtins.bool enable_ingress: 是否开启。
        :param builtins.bool enable_ingress_without_ingress_class: 是否监听IngressClass为空的资源。
        :param Sequence[builtins.str] ingress_classes: 指定IngressClass。
        :param builtins.bool update_status: 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        :param Sequence[builtins.str] watch_namespaces: 指定命名空间。
        """
        if enable_all_ingress_classes is not None:
            pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        if enable_all_namespaces is not None:
            pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        if enable_ingress is not None:
            pulumi.set(__self__, "enable_ingress", enable_ingress)
        if enable_ingress_without_ingress_class is not None:
            pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        if ingress_classes is not None:
            pulumi.set(__self__, "ingress_classes", ingress_classes)
        if update_status is not None:
            pulumi.set(__self__, "update_status", update_status)
        if watch_namespaces is not None:
            pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> Optional[builtins.bool]:
        """
        是否启用所有Ingress类。
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> Optional[builtins.bool]:
        """
        是否全部命名空间。
        """
        return pulumi.get(self, "enable_all_namespaces")

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> Optional[builtins.bool]:
        """
        是否开启。
        """
        return pulumi.get(self, "enable_ingress")

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> Optional[builtins.bool]:
        """
        是否监听IngressClass为空的资源。
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Optional[Sequence[builtins.str]]:
        """
        指定IngressClass。
        """
        return pulumi.get(self, "ingress_classes")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> Optional[builtins.bool]:
        """
        流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        """
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Optional[Sequence[builtins.str]]:
        """
        指定命名空间。
        """
        return pulumi.get(self, "watch_namespaces")


@pulumi.output_type
class UpstreamSourceSourceSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "k8SSource":
            suggest = "k8_s_source"
        elif key == "nacosSource":
            suggest = "nacos_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamSourceSourceSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamSourceSourceSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamSourceSourceSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 k8_s_source: Optional['outputs.UpstreamSourceSourceSpecK8SSource'] = None,
                 nacos_source: Optional['outputs.UpstreamSourceSourceSpecNacosSource'] = None):
        """
        :param 'UpstreamSourceSourceSpecK8SSourceArgs' k8_s_source: 容器集群来源。
        :param 'UpstreamSourceSourceSpecNacosSourceArgs' nacos_source: 注册中心来源。
        """
        if k8_s_source is not None:
            pulumi.set(__self__, "k8_s_source", k8_s_source)
        if nacos_source is not None:
            pulumi.set(__self__, "nacos_source", nacos_source)

    @property
    @pulumi.getter(name="k8SSource")
    def k8_s_source(self) -> Optional['outputs.UpstreamSourceSourceSpecK8SSource']:
        """
        容器集群来源。
        """
        return pulumi.get(self, "k8_s_source")

    @property
    @pulumi.getter(name="nacosSource")
    def nacos_source(self) -> Optional['outputs.UpstreamSourceSourceSpecNacosSource']:
        """
        注册中心来源。
        """
        return pulumi.get(self, "nacos_source")


@pulumi.output_type
class UpstreamSourceSourceSpecK8SSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "clusterType":
            suggest = "cluster_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamSourceSourceSpecK8SSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamSourceSourceSpecK8SSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamSourceSourceSpecK8SSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: Optional[builtins.str] = None,
                 cluster_type: Optional[builtins.str] = None):
        """
        :param builtins.str cluster_id: 集群ID。
        :param builtins.str cluster_type: 集群类型。
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[builtins.str]:
        """
        集群ID。
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[builtins.str]:
        """
        集群类型。
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class UpstreamSourceSourceSpecNacosSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authConfig":
            suggest = "auth_config"
        elif key == "nacosId":
            suggest = "nacos_id"
        elif key == "nacosName":
            suggest = "nacos_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UpstreamSourceSourceSpecNacosSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UpstreamSourceSourceSpecNacosSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UpstreamSourceSourceSpecNacosSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_config: Optional['outputs.UpstreamSourceSourceSpecNacosSourceAuthConfig'] = None,
                 nacos_id: Optional[builtins.str] = None,
                 nacos_name: Optional[builtins.str] = None):
        """
        :param 'UpstreamSourceSourceSpecNacosSourceAuthConfigArgs' auth_config: 认证配置。
        :param builtins.str nacos_id: Nacos ID。
        :param builtins.str nacos_name: Nacos名称。
        """
        if auth_config is not None:
            pulumi.set(__self__, "auth_config", auth_config)
        if nacos_id is not None:
            pulumi.set(__self__, "nacos_id", nacos_id)
        if nacos_name is not None:
            pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> Optional['outputs.UpstreamSourceSourceSpecNacosSourceAuthConfig']:
        """
        认证配置。
        """
        return pulumi.get(self, "auth_config")

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> Optional[builtins.str]:
        """
        Nacos ID。
        """
        return pulumi.get(self, "nacos_id")

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> Optional[builtins.str]:
        """
        Nacos名称。
        """
        return pulumi.get(self, "nacos_name")


@pulumi.output_type
class UpstreamSourceSourceSpecNacosSourceAuthConfig(dict):
    def __init__(__self__, *,
                 basic: Optional['outputs.UpstreamSourceSourceSpecNacosSourceAuthConfigBasic'] = None):
        """
        :param 'UpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs' basic: Basic认证。
        """
        if basic is not None:
            pulumi.set(__self__, "basic", basic)

    @property
    @pulumi.getter
    def basic(self) -> Optional['outputs.UpstreamSourceSourceSpecNacosSourceAuthConfigBasic']:
        """
        Basic认证。
        """
        return pulumi.get(self, "basic")


@pulumi.output_type
class UpstreamSourceSourceSpecNacosSourceAuthConfigBasic(dict):
    def __init__(__self__, *,
                 password: Optional[builtins.str] = None,
                 username: Optional[builtins.str] = None):
        """
        :param builtins.str password: 密码。
        :param builtins.str username: 用户名。
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[builtins.str]:
        """
        密码。
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[builtins.str]:
        """
        用户名。
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUpstreamSourceIngressSettingsResult(dict):
    def __init__(__self__, *,
                 enable_all_ingress_classes: builtins.bool,
                 enable_all_namespaces: builtins.bool,
                 enable_ingress: builtins.bool,
                 enable_ingress_without_ingress_class: builtins.bool,
                 ingress_classes: Sequence[builtins.str],
                 update_status: builtins.bool,
                 watch_namespaces: Sequence[builtins.str]):
        """
        :param builtins.bool enable_all_ingress_classes: 是否启用所有Ingress类。
        :param builtins.bool enable_all_namespaces: 是否全部命名空间。
        :param builtins.bool enable_ingress: 是否开启。
        :param builtins.bool enable_ingress_without_ingress_class: 是否监听IngressClass为空的资源。
        :param Sequence[builtins.str] ingress_classes: 指定IngressClass。
        :param builtins.bool update_status: 流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        :param Sequence[builtins.str] watch_namespaces: 指定命名空间。
        """
        pulumi.set(__self__, "enable_all_ingress_classes", enable_all_ingress_classes)
        pulumi.set(__self__, "enable_all_namespaces", enable_all_namespaces)
        pulumi.set(__self__, "enable_ingress", enable_ingress)
        pulumi.set(__self__, "enable_ingress_without_ingress_class", enable_ingress_without_ingress_class)
        pulumi.set(__self__, "ingress_classes", ingress_classes)
        pulumi.set(__self__, "update_status", update_status)
        pulumi.set(__self__, "watch_namespaces", watch_namespaces)

    @property
    @pulumi.getter(name="enableAllIngressClasses")
    def enable_all_ingress_classes(self) -> builtins.bool:
        """
        是否启用所有Ingress类。
        """
        return pulumi.get(self, "enable_all_ingress_classes")

    @property
    @pulumi.getter(name="enableAllNamespaces")
    def enable_all_namespaces(self) -> builtins.bool:
        """
        是否全部命名空间。
        """
        return pulumi.get(self, "enable_all_namespaces")

    @property
    @pulumi.getter(name="enableIngress")
    def enable_ingress(self) -> builtins.bool:
        """
        是否开启。
        """
        return pulumi.get(self, "enable_ingress")

    @property
    @pulumi.getter(name="enableIngressWithoutIngressClass")
    def enable_ingress_without_ingress_class(self) -> builtins.bool:
        """
        是否监听IngressClass为空的资源。
        """
        return pulumi.get(self, "enable_ingress_without_ingress_class")

    @property
    @pulumi.getter(name="ingressClasses")
    def ingress_classes(self) -> Sequence[builtins.str]:
        """
        指定IngressClass。
        """
        return pulumi.get(self, "ingress_classes")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> builtins.bool:
        """
        流量入口切换。开启后，当前集群Ingress中Status的IP地址会被修改为当前网关的IP地址。
        """
        return pulumi.get(self, "update_status")

    @property
    @pulumi.getter(name="watchNamespaces")
    def watch_namespaces(self) -> Sequence[builtins.str]:
        """
        指定命名空间。
        """
        return pulumi.get(self, "watch_namespaces")


@pulumi.output_type
class GetUpstreamSourceSourceSpecResult(dict):
    def __init__(__self__, *,
                 k8_s_source: 'outputs.GetUpstreamSourceSourceSpecK8SSourceResult',
                 nacos_source: 'outputs.GetUpstreamSourceSourceSpecNacosSourceResult'):
        """
        :param 'GetUpstreamSourceSourceSpecK8SSourceArgs' k8_s_source: 容器集群来源。
        :param 'GetUpstreamSourceSourceSpecNacosSourceArgs' nacos_source: 注册中心来源。
        """
        pulumi.set(__self__, "k8_s_source", k8_s_source)
        pulumi.set(__self__, "nacos_source", nacos_source)

    @property
    @pulumi.getter(name="k8SSource")
    def k8_s_source(self) -> 'outputs.GetUpstreamSourceSourceSpecK8SSourceResult':
        """
        容器集群来源。
        """
        return pulumi.get(self, "k8_s_source")

    @property
    @pulumi.getter(name="nacosSource")
    def nacos_source(self) -> 'outputs.GetUpstreamSourceSourceSpecNacosSourceResult':
        """
        注册中心来源。
        """
        return pulumi.get(self, "nacos_source")


@pulumi.output_type
class GetUpstreamSourceSourceSpecK8SSourceResult(dict):
    def __init__(__self__, *,
                 cluster_id: builtins.str,
                 cluster_type: builtins.str):
        """
        :param builtins.str cluster_id: 集群ID。
        :param builtins.str cluster_type: 集群类型。
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "cluster_type", cluster_type)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> builtins.str:
        """
        集群ID。
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> builtins.str:
        """
        集群类型。
        """
        return pulumi.get(self, "cluster_type")


@pulumi.output_type
class GetUpstreamSourceSourceSpecNacosSourceResult(dict):
    def __init__(__self__, *,
                 auth_config: 'outputs.GetUpstreamSourceSourceSpecNacosSourceAuthConfigResult',
                 nacos_id: builtins.str,
                 nacos_name: builtins.str):
        """
        :param 'GetUpstreamSourceSourceSpecNacosSourceAuthConfigArgs' auth_config: 认证配置。
        :param builtins.str nacos_id: Nacos ID。
        :param builtins.str nacos_name: Nacos名称。
        """
        pulumi.set(__self__, "auth_config", auth_config)
        pulumi.set(__self__, "nacos_id", nacos_id)
        pulumi.set(__self__, "nacos_name", nacos_name)

    @property
    @pulumi.getter(name="authConfig")
    def auth_config(self) -> 'outputs.GetUpstreamSourceSourceSpecNacosSourceAuthConfigResult':
        """
        认证配置。
        """
        return pulumi.get(self, "auth_config")

    @property
    @pulumi.getter(name="nacosId")
    def nacos_id(self) -> builtins.str:
        """
        Nacos ID。
        """
        return pulumi.get(self, "nacos_id")

    @property
    @pulumi.getter(name="nacosName")
    def nacos_name(self) -> builtins.str:
        """
        Nacos名称。
        """
        return pulumi.get(self, "nacos_name")


@pulumi.output_type
class GetUpstreamSourceSourceSpecNacosSourceAuthConfigResult(dict):
    def __init__(__self__, *,
                 basic: 'outputs.GetUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult'):
        """
        :param 'GetUpstreamSourceSourceSpecNacosSourceAuthConfigBasicArgs' basic: Basic认证。
        """
        pulumi.set(__self__, "basic", basic)

    @property
    @pulumi.getter
    def basic(self) -> 'outputs.GetUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult':
        """
        Basic认证。
        """
        return pulumi.get(self, "basic")


@pulumi.output_type
class GetUpstreamSourceSourceSpecNacosSourceAuthConfigBasicResult(dict):
    def __init__(__self__, *,
                 password: builtins.str,
                 username: builtins.str):
        """
        :param builtins.str password: 密码。
        :param builtins.str username: 用户名。
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        密码。
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> builtins.str:
        """
        用户名。
        """
        return pulumi.get(self, "username")


