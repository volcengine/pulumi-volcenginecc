# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VpcAssociateCen',
    'VpcTag',
    'GetVpcAssociateCenResult',
    'GetVpcTagResult',
]

@pulumi.output_type
class VpcAssociateCen(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cenId":
            suggest = "cen_id"
        elif key == "cenOwnerId":
            suggest = "cen_owner_id"
        elif key == "cenStatus":
            suggest = "cen_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcAssociateCen. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcAssociateCen.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcAssociateCen.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cen_id: Optional[builtins.str] = None,
                 cen_owner_id: Optional[builtins.str] = None,
                 cen_status: Optional[builtins.str] = None):
        """
        :param builtins.str cen_id: CEN的ID。
        :param builtins.str cen_owner_id: CEN的用户ID。
        :param builtins.str cen_status: VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
        if cen_id is not None:
            pulumi.set(__self__, "cen_id", cen_id)
        if cen_owner_id is not None:
            pulumi.set(__self__, "cen_owner_id", cen_owner_id)
        if cen_status is not None:
            pulumi.set(__self__, "cen_status", cen_status)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> Optional[builtins.str]:
        """
        CEN的ID。
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="cenOwnerId")
    def cen_owner_id(self) -> Optional[builtins.str]:
        """
        CEN的用户ID。
        """
        return pulumi.get(self, "cen_owner_id")

    @property
    @pulumi.getter(name="cenStatus")
    def cen_status(self) -> Optional[builtins.str]:
        """
        VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
        return pulumi.get(self, "cen_status")


@pulumi.output_type
class VpcTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVpcAssociateCenResult(dict):
    def __init__(__self__, *,
                 cen_id: builtins.str,
                 cen_owner_id: builtins.str,
                 cen_status: builtins.str):
        """
        :param builtins.str cen_id: CEN的ID。
        :param builtins.str cen_owner_id: CEN的用户ID。
        :param builtins.str cen_status: VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cen_owner_id", cen_owner_id)
        pulumi.set(__self__, "cen_status", cen_status)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> builtins.str:
        """
        CEN的ID。
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="cenOwnerId")
    def cen_owner_id(self) -> builtins.str:
        """
        CEN的用户ID。
        """
        return pulumi.get(self, "cen_owner_id")

    @property
    @pulumi.getter(name="cenStatus")
    def cen_status(self) -> builtins.str:
        """
        VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
        return pulumi.get(self, "cen_status")


@pulumi.output_type
class GetVpcTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        标签值。
        """
        return pulumi.get(self, "value")


