# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetRouteTableResult',
    'AwaitableGetRouteTableResult',
    'get_route_table',
    'get_route_table_output',
]

@pulumi.output_type
class GetRouteTableResult:
    """
    A collection of values returned by getRouteTable.
    """
    def __init__(__self__, account_id=None, associate_type=None, created_time=None, custom_route_entries=None, description=None, id=None, ipv4_gateway_id=None, ipv6_gateway_id=None, project_name=None, route_table_id=None, route_table_name=None, route_table_type=None, subnet_ids=None, system_route_entries=None, tags=None, updated_time=None, vpc_id=None, vpc_name=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if associate_type and not isinstance(associate_type, str):
            raise TypeError("Expected argument 'associate_type' to be a str")
        pulumi.set(__self__, "associate_type", associate_type)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if custom_route_entries and not isinstance(custom_route_entries, list):
            raise TypeError("Expected argument 'custom_route_entries' to be a list")
        pulumi.set(__self__, "custom_route_entries", custom_route_entries)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ipv4_gateway_id and not isinstance(ipv4_gateway_id, str):
            raise TypeError("Expected argument 'ipv4_gateway_id' to be a str")
        pulumi.set(__self__, "ipv4_gateway_id", ipv4_gateway_id)
        if ipv6_gateway_id and not isinstance(ipv6_gateway_id, str):
            raise TypeError("Expected argument 'ipv6_gateway_id' to be a str")
        pulumi.set(__self__, "ipv6_gateway_id", ipv6_gateway_id)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if route_table_id and not isinstance(route_table_id, str):
            raise TypeError("Expected argument 'route_table_id' to be a str")
        pulumi.set(__self__, "route_table_id", route_table_id)
        if route_table_name and not isinstance(route_table_name, str):
            raise TypeError("Expected argument 'route_table_name' to be a str")
        pulumi.set(__self__, "route_table_name", route_table_name)
        if route_table_type and not isinstance(route_table_type, str):
            raise TypeError("Expected argument 'route_table_type' to be a str")
        pulumi.set(__self__, "route_table_type", route_table_type)
        if subnet_ids and not isinstance(subnet_ids, list):
            raise TypeError("Expected argument 'subnet_ids' to be a list")
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if system_route_entries and not isinstance(system_route_entries, list):
            raise TypeError("Expected argument 'system_route_entries' to be a list")
        pulumi.set(__self__, "system_route_entries", system_route_entries)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name and not isinstance(vpc_name, str):
            raise TypeError("Expected argument 'vpc_name' to be a str")
        pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        路由表所属账号的ID。
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="associateType")
    def associate_type(self) -> builtins.str:
        """
        创建路由表输入的关联类型。1、Subnet：子网关联。2、Gateway：网关关联。
        """
        return pulumi.get(self, "associate_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> builtins.str:
        """
        路由表创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="customRouteEntries")
    def custom_route_entries(self) -> Sequence['outputs.GetRouteTableCustomRouteEntryResult']:
        """
        路由表关联的自定义路由条目列表。
        """
        return pulumi.get(self, "custom_route_entries")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        路由表描述信息。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4GatewayId")
    def ipv4_gateway_id(self) -> builtins.str:
        """
        关联路由表的IPv4网关ID。
        """
        return pulumi.get(self, "ipv4_gateway_id")

    @property
    @pulumi.getter(name="ipv6GatewayId")
    def ipv6_gateway_id(self) -> builtins.str:
        """
        关联路由表的IPv6网关ID。
        """
        return pulumi.get(self, "ipv6_gateway_id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        路由表所属项目的名称。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="routeTableId")
    def route_table_id(self) -> builtins.str:
        """
        路由表ID。
        """
        return pulumi.get(self, "route_table_id")

    @property
    @pulumi.getter(name="routeTableName")
    def route_table_name(self) -> builtins.str:
        """
        路由表名称。
        """
        return pulumi.get(self, "route_table_name")

    @property
    @pulumi.getter(name="routeTableType")
    def route_table_type(self) -> builtins.str:
        """
        路由表类型。1、Custom：自定义路由表。2、System：系统路由表。
        """
        return pulumi.get(self, "route_table_type")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[builtins.str]:
        """
        关联的子网的ID列表。
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="systemRouteEntries")
    def system_route_entries(self) -> Sequence['outputs.GetRouteTableSystemRouteEntryResult']:
        """
        路由表关联的系统默认路由条目列表。
        """
        return pulumi.get(self, "system_route_entries")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetRouteTableTagResult']:
        """
        标签列表。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> builtins.str:
        """
        路由表更新时间。
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        路由表所属VPC的ID。
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> builtins.str:
        """
        VPC的名称。
        """
        return pulumi.get(self, "vpc_name")


class AwaitableGetRouteTableResult(GetRouteTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteTableResult(
            account_id=self.account_id,
            associate_type=self.associate_type,
            created_time=self.created_time,
            custom_route_entries=self.custom_route_entries,
            description=self.description,
            id=self.id,
            ipv4_gateway_id=self.ipv4_gateway_id,
            ipv6_gateway_id=self.ipv6_gateway_id,
            project_name=self.project_name,
            route_table_id=self.route_table_id,
            route_table_name=self.route_table_name,
            route_table_type=self.route_table_type,
            subnet_ids=self.subnet_ids,
            system_route_entries=self.system_route_entries,
            tags=self.tags,
            updated_time=self.updated_time,
            vpc_id=self.vpc_id,
            vpc_name=self.vpc_name)


def get_route_table(id: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteTableResult:
    """
    Data Source schema for Volcengine::VPC::RouteTable


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:vpc/getRouteTable:getRouteTable', __args__, opts=opts, typ=GetRouteTableResult).value

    return AwaitableGetRouteTableResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        associate_type=pulumi.get(__ret__, 'associate_type'),
        created_time=pulumi.get(__ret__, 'created_time'),
        custom_route_entries=pulumi.get(__ret__, 'custom_route_entries'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        ipv4_gateway_id=pulumi.get(__ret__, 'ipv4_gateway_id'),
        ipv6_gateway_id=pulumi.get(__ret__, 'ipv6_gateway_id'),
        project_name=pulumi.get(__ret__, 'project_name'),
        route_table_id=pulumi.get(__ret__, 'route_table_id'),
        route_table_name=pulumi.get(__ret__, 'route_table_name'),
        route_table_type=pulumi.get(__ret__, 'route_table_type'),
        subnet_ids=pulumi.get(__ret__, 'subnet_ids'),
        system_route_entries=pulumi.get(__ret__, 'system_route_entries'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        vpc_name=pulumi.get(__ret__, 'vpc_name'))
def get_route_table_output(id: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRouteTableResult]:
    """
    Data Source schema for Volcengine::VPC::RouteTable


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:vpc/getRouteTable:getRouteTable', __args__, opts=opts, typ=GetRouteTableResult)
    return __ret__.apply(lambda __response__: GetRouteTableResult(
        account_id=pulumi.get(__response__, 'account_id'),
        associate_type=pulumi.get(__response__, 'associate_type'),
        created_time=pulumi.get(__response__, 'created_time'),
        custom_route_entries=pulumi.get(__response__, 'custom_route_entries'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        ipv4_gateway_id=pulumi.get(__response__, 'ipv4_gateway_id'),
        ipv6_gateway_id=pulumi.get(__response__, 'ipv6_gateway_id'),
        project_name=pulumi.get(__response__, 'project_name'),
        route_table_id=pulumi.get(__response__, 'route_table_id'),
        route_table_name=pulumi.get(__response__, 'route_table_name'),
        route_table_type=pulumi.get(__response__, 'route_table_type'),
        subnet_ids=pulumi.get(__response__, 'subnet_ids'),
        system_route_entries=pulumi.get(__response__, 'system_route_entries'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        vpc_name=pulumi.get(__response__, 'vpc_name')))
