# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNetworkAclResult',
    'AwaitableGetNetworkAclResult',
    'get_network_acl',
    'get_network_acl_output',
]

@pulumi.output_type
class GetNetworkAclResult:
    """
    A collection of values returned by getNetworkAcl.
    """
    def __init__(__self__, created_time=None, default_egress_acl_entries=None, default_ingress_acl_entries=None, description=None, egress_acl_entries=None, id=None, ingress_acl_entries=None, network_acl_id=None, network_acl_name=None, project_name=None, resources=None, status=None, tags=None, updated_time=None, vpc_id=None):
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if default_egress_acl_entries and not isinstance(default_egress_acl_entries, list):
            raise TypeError("Expected argument 'default_egress_acl_entries' to be a list")
        pulumi.set(__self__, "default_egress_acl_entries", default_egress_acl_entries)
        if default_ingress_acl_entries and not isinstance(default_ingress_acl_entries, list):
            raise TypeError("Expected argument 'default_ingress_acl_entries' to be a list")
        pulumi.set(__self__, "default_ingress_acl_entries", default_ingress_acl_entries)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if egress_acl_entries and not isinstance(egress_acl_entries, list):
            raise TypeError("Expected argument 'egress_acl_entries' to be a list")
        pulumi.set(__self__, "egress_acl_entries", egress_acl_entries)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ingress_acl_entries and not isinstance(ingress_acl_entries, list):
            raise TypeError("Expected argument 'ingress_acl_entries' to be a list")
        pulumi.set(__self__, "ingress_acl_entries", ingress_acl_entries)
        if network_acl_id and not isinstance(network_acl_id, str):
            raise TypeError("Expected argument 'network_acl_id' to be a str")
        pulumi.set(__self__, "network_acl_id", network_acl_id)
        if network_acl_name and not isinstance(network_acl_name, str):
            raise TypeError("Expected argument 'network_acl_name' to be a str")
        pulumi.set(__self__, "network_acl_name", network_acl_name)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if resources and not isinstance(resources, list):
            raise TypeError("Expected argument 'resources' to be a list")
        pulumi.set(__self__, "resources", resources)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> builtins.str:
        """
        网络ACL的创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="defaultEgressAclEntries")
    def default_egress_acl_entries(self) -> Sequence['outputs.GetNetworkAclDefaultEgressAclEntryResult']:
        """
        默认出向ACL规则列表。
        """
        return pulumi.get(self, "default_egress_acl_entries")

    @property
    @pulumi.getter(name="defaultIngressAclEntries")
    def default_ingress_acl_entries(self) -> Sequence['outputs.GetNetworkAclDefaultIngressAclEntryResult']:
        """
        默认入向ACL规则列表。
        """
        return pulumi.get(self, "default_ingress_acl_entries")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        网络ACL描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="egressAclEntries")
    def egress_acl_entries(self) -> Sequence['outputs.GetNetworkAclEgressAclEntryResult']:
        """
        出向ACL规则列表。
        """
        return pulumi.get(self, "egress_acl_entries")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ingressAclEntries")
    def ingress_acl_entries(self) -> Sequence['outputs.GetNetworkAclIngressAclEntryResult']:
        """
        入向ACL规则列表。
        """
        return pulumi.get(self, "ingress_acl_entries")

    @property
    @pulumi.getter(name="networkAclId")
    def network_acl_id(self) -> builtins.str:
        """
        网络ACL的ID。
        """
        return pulumi.get(self, "network_acl_id")

    @property
    @pulumi.getter(name="networkAclName")
    def network_acl_name(self) -> builtins.str:
        """
        网络ACL名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
        """
        return pulumi.get(self, "network_acl_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        网络ACL所属项目的名称。不填默认加入default项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetNetworkAclResourceResult']:
        """
        关联资源列表。
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        网络ACL的状态。Available：可用，Creating：创建中
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNetworkAclTagResult']:
        """
        标签列表。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> builtins.str:
        """
        网络ACL的更新时间。
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        网络ACL所属VPC的ID。
        """
        return pulumi.get(self, "vpc_id")


class AwaitableGetNetworkAclResult(GetNetworkAclResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkAclResult(
            created_time=self.created_time,
            default_egress_acl_entries=self.default_egress_acl_entries,
            default_ingress_acl_entries=self.default_ingress_acl_entries,
            description=self.description,
            egress_acl_entries=self.egress_acl_entries,
            id=self.id,
            ingress_acl_entries=self.ingress_acl_entries,
            network_acl_id=self.network_acl_id,
            network_acl_name=self.network_acl_name,
            project_name=self.project_name,
            resources=self.resources,
            status=self.status,
            tags=self.tags,
            updated_time=self.updated_time,
            vpc_id=self.vpc_id)


def get_network_acl(id: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkAclResult:
    """
    Data Source schema for Volcengine::VPC::NetworkAcl


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:vpc/getNetworkAcl:getNetworkAcl', __args__, opts=opts, typ=GetNetworkAclResult).value

    return AwaitableGetNetworkAclResult(
        created_time=pulumi.get(__ret__, 'created_time'),
        default_egress_acl_entries=pulumi.get(__ret__, 'default_egress_acl_entries'),
        default_ingress_acl_entries=pulumi.get(__ret__, 'default_ingress_acl_entries'),
        description=pulumi.get(__ret__, 'description'),
        egress_acl_entries=pulumi.get(__ret__, 'egress_acl_entries'),
        id=pulumi.get(__ret__, 'id'),
        ingress_acl_entries=pulumi.get(__ret__, 'ingress_acl_entries'),
        network_acl_id=pulumi.get(__ret__, 'network_acl_id'),
        network_acl_name=pulumi.get(__ret__, 'network_acl_name'),
        project_name=pulumi.get(__ret__, 'project_name'),
        resources=pulumi.get(__ret__, 'resources'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))
def get_network_acl_output(id: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkAclResult]:
    """
    Data Source schema for Volcengine::VPC::NetworkAcl


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:vpc/getNetworkAcl:getNetworkAcl', __args__, opts=opts, typ=GetNetworkAclResult)
    return __ret__.apply(lambda __response__: GetNetworkAclResult(
        created_time=pulumi.get(__response__, 'created_time'),
        default_egress_acl_entries=pulumi.get(__response__, 'default_egress_acl_entries'),
        default_ingress_acl_entries=pulumi.get(__response__, 'default_ingress_acl_entries'),
        description=pulumi.get(__response__, 'description'),
        egress_acl_entries=pulumi.get(__response__, 'egress_acl_entries'),
        id=pulumi.get(__response__, 'id'),
        ingress_acl_entries=pulumi.get(__response__, 'ingress_acl_entries'),
        network_acl_id=pulumi.get(__response__, 'network_acl_id'),
        network_acl_name=pulumi.get(__response__, 'network_acl_name'),
        project_name=pulumi.get(__response__, 'project_name'),
        resources=pulumi.get(__response__, 'resources'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time'),
        vpc_id=pulumi.get(__response__, 'vpc_id')))
