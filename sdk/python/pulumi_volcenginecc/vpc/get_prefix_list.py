# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetPrefixListResult',
    'AwaitableGetPrefixListResult',
    'get_prefix_list',
    'get_prefix_list_output',
]

@pulumi.output_type
class GetPrefixListResult:
    """
    A collection of values returned by getPrefixList.
    """
    def __init__(__self__, association_count=None, associations_route_tables=None, associations_security_groups=None, created_time=None, description=None, id=None, ip_version=None, max_entries=None, prefix_list_entries=None, prefix_list_id=None, prefix_list_name=None, project_name=None, status=None, tags=None, updated_time=None):
        if association_count and not isinstance(association_count, int):
            raise TypeError("Expected argument 'association_count' to be a int")
        pulumi.set(__self__, "association_count", association_count)
        if associations_route_tables and not isinstance(associations_route_tables, list):
            raise TypeError("Expected argument 'associations_route_tables' to be a list")
        pulumi.set(__self__, "associations_route_tables", associations_route_tables)
        if associations_security_groups and not isinstance(associations_security_groups, list):
            raise TypeError("Expected argument 'associations_security_groups' to be a list")
        pulumi.set(__self__, "associations_security_groups", associations_security_groups)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_version and not isinstance(ip_version, str):
            raise TypeError("Expected argument 'ip_version' to be a str")
        pulumi.set(__self__, "ip_version", ip_version)
        if max_entries and not isinstance(max_entries, int):
            raise TypeError("Expected argument 'max_entries' to be a int")
        pulumi.set(__self__, "max_entries", max_entries)
        if prefix_list_entries and not isinstance(prefix_list_entries, list):
            raise TypeError("Expected argument 'prefix_list_entries' to be a list")
        pulumi.set(__self__, "prefix_list_entries", prefix_list_entries)
        if prefix_list_id and not isinstance(prefix_list_id, str):
            raise TypeError("Expected argument 'prefix_list_id' to be a str")
        pulumi.set(__self__, "prefix_list_id", prefix_list_id)
        if prefix_list_name and not isinstance(prefix_list_name, str):
            raise TypeError("Expected argument 'prefix_list_name' to be a str")
        pulumi.set(__self__, "prefix_list_name", prefix_list_name)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter(name="associationCount")
    def association_count(self) -> builtins.int:
        """
        前缀列表关联的资源数量。
        """
        return pulumi.get(self, "association_count")

    @property
    @pulumi.getter(name="associationsRouteTables")
    def associations_route_tables(self) -> Sequence['outputs.GetPrefixListAssociationsRouteTableResult']:
        """
        前缀列表关联的路由表信息。
        """
        return pulumi.get(self, "associations_route_tables")

    @property
    @pulumi.getter(name="associationsSecurityGroups")
    def associations_security_groups(self) -> Sequence['outputs.GetPrefixListAssociationsSecurityGroupResult']:
        """
        前缀列表关联的安全组信息。
        """
        return pulumi.get(self, "associations_security_groups")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> builtins.str:
        """
        前缀列表的创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        前缀列表的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> builtins.str:
        """
        IP版本类型。取值：IPv4（默认值）：IPv4类型。IPv6：IPv6类型。
        """
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> builtins.int:
        """
        最大条目数，即前缀列表最多可添加条目的数量。取值范围为1～200。
        """
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="prefixListEntries")
    def prefix_list_entries(self) -> Sequence['outputs.GetPrefixListPrefixListEntryResult']:
        """
        前缀列表条目的CIDR。
        """
        return pulumi.get(self, "prefix_list_entries")

    @property
    @pulumi.getter(name="prefixListId")
    def prefix_list_id(self) -> builtins.str:
        """
        前缀列表的ID。
        """
        return pulumi.get(self, "prefix_list_id")

    @property
    @pulumi.getter(name="prefixListName")
    def prefix_list_name(self) -> builtins.str:
        """
        前缀列表的名称。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短划线（-）。
        """
        return pulumi.get(self, "prefix_list_name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        前缀列表所属项目的名称，不填默认加入default项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        前缀列表的状态。取值：Available：可用；Creating：创建中；Deleting：删除中；Pending：修改中。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetPrefixListTagResult']:
        """
        标签列表。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> builtins.str:
        """
        前缀列表的最近一次修改时间。
        """
        return pulumi.get(self, "updated_time")


class AwaitableGetPrefixListResult(GetPrefixListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrefixListResult(
            association_count=self.association_count,
            associations_route_tables=self.associations_route_tables,
            associations_security_groups=self.associations_security_groups,
            created_time=self.created_time,
            description=self.description,
            id=self.id,
            ip_version=self.ip_version,
            max_entries=self.max_entries,
            prefix_list_entries=self.prefix_list_entries,
            prefix_list_id=self.prefix_list_id,
            prefix_list_name=self.prefix_list_name,
            project_name=self.project_name,
            status=self.status,
            tags=self.tags,
            updated_time=self.updated_time)


def get_prefix_list(id: Optional[builtins.str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrefixListResult:
    """
    Data Source schema for Volcengine::VPC::PrefixList


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:vpc/getPrefixList:getPrefixList', __args__, opts=opts, typ=GetPrefixListResult).value

    return AwaitableGetPrefixListResult(
        association_count=pulumi.get(__ret__, 'association_count'),
        associations_route_tables=pulumi.get(__ret__, 'associations_route_tables'),
        associations_security_groups=pulumi.get(__ret__, 'associations_security_groups'),
        created_time=pulumi.get(__ret__, 'created_time'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        ip_version=pulumi.get(__ret__, 'ip_version'),
        max_entries=pulumi.get(__ret__, 'max_entries'),
        prefix_list_entries=pulumi.get(__ret__, 'prefix_list_entries'),
        prefix_list_id=pulumi.get(__ret__, 'prefix_list_id'),
        prefix_list_name=pulumi.get(__ret__, 'prefix_list_name'),
        project_name=pulumi.get(__ret__, 'project_name'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'))
def get_prefix_list_output(id: Optional[pulumi.Input[builtins.str]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPrefixListResult]:
    """
    Data Source schema for Volcengine::VPC::PrefixList


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:vpc/getPrefixList:getPrefixList', __args__, opts=opts, typ=GetPrefixListResult)
    return __ret__.apply(lambda __response__: GetPrefixListResult(
        association_count=pulumi.get(__response__, 'association_count'),
        associations_route_tables=pulumi.get(__response__, 'associations_route_tables'),
        associations_security_groups=pulumi.get(__response__, 'associations_security_groups'),
        created_time=pulumi.get(__response__, 'created_time'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        ip_version=pulumi.get(__response__, 'ip_version'),
        max_entries=pulumi.get(__response__, 'max_entries'),
        prefix_list_entries=pulumi.get(__response__, 'prefix_list_entries'),
        prefix_list_id=pulumi.get(__response__, 'prefix_list_id'),
        prefix_list_name=pulumi.get(__response__, 'prefix_list_name'),
        project_name=pulumi.get(__response__, 'project_name'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time')))
