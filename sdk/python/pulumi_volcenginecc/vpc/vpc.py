# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['VpcArgs', 'Vpc']

@pulumi.input_type
class VpcArgs:
    def __init__(__self__, *,
                 associate_cens: Optional[pulumi.Input[Sequence[pulumi.Input['VpcAssociateCenArgs']]]] = None,
                 cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv4_gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 nat_gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 support_ipv4_gateway: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VpcTagArgs']]]] = None,
                 user_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 vpc_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Vpc resource.
        :param pulumi.Input[builtins.str] cidr_block: VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        :param pulumi.Input[builtins.str] description: VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        :param pulumi.Input[builtins.str] ipv4_gateway_id: VPC 绑定的 IPv4 网关的 ID。
        :param pulumi.Input[builtins.str] ipv6_cidr_block: VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] nat_gateway_ids: VPC中创建的NAT网关的ID。
        :param pulumi.Input[builtins.str] project_name: VPC所属项目的名称。不填默认加入default项目。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] route_table_ids: VPC关联的路由表ID。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] secondary_cidr_blocks: VPC的辅助网段。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: VPC中安全组的列表。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] subnet_ids: VPC中子网的列表。
        :param pulumi.Input[builtins.bool] support_ipv4_gateway: VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] user_cidr_blocks: VPC的用户网段。
        :param pulumi.Input[builtins.str] vpc_name: VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        if associate_cens is not None:
            pulumi.set(__self__, "associate_cens", associate_cens)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if ipv4_gateway_id is not None:
            pulumi.set(__self__, "ipv4_gateway_id", ipv4_gateway_id)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if nat_gateway_ids is not None:
            pulumi.set(__self__, "nat_gateway_ids", nat_gateway_ids)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if route_table_ids is not None:
            pulumi.set(__self__, "route_table_ids", route_table_ids)
        if secondary_cidr_blocks is not None:
            pulumi.set(__self__, "secondary_cidr_blocks", secondary_cidr_blocks)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if support_ipv4_gateway is not None:
            pulumi.set(__self__, "support_ipv4_gateway", support_ipv4_gateway)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_cidr_blocks is not None:
            pulumi.set(__self__, "user_cidr_blocks", user_cidr_blocks)
        if vpc_name is not None:
            pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="associateCens")
    def associate_cens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcAssociateCenArgs']]]]:
        return pulumi.get(self, "associate_cens")

    @associate_cens.setter
    def associate_cens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcAssociateCenArgs']]]]):
        pulumi.set(self, "associate_cens", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="ipv4GatewayId")
    def ipv4_gateway_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC 绑定的 IPv4 网关的 ID。
        """
        return pulumi.get(self, "ipv4_gateway_id")

    @ipv4_gateway_id.setter
    def ipv4_gateway_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_gateway_id", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter(name="natGatewayIds")
    def nat_gateway_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC中创建的NAT网关的ID。
        """
        return pulumi.get(self, "nat_gateway_ids")

    @nat_gateway_ids.setter
    def nat_gateway_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "nat_gateway_ids", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC所属项目的名称。不填默认加入default项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC关联的路由表ID。
        """
        return pulumi.get(self, "route_table_ids")

    @route_table_ids.setter
    def route_table_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "route_table_ids", value)

    @property
    @pulumi.getter(name="secondaryCidrBlocks")
    def secondary_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC的辅助网段。
        """
        return pulumi.get(self, "secondary_cidr_blocks")

    @secondary_cidr_blocks.setter
    def secondary_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secondary_cidr_blocks", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC中安全组的列表。
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC中子网的列表。
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="supportIpv4Gateway")
    def support_ipv4_gateway(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        """
        return pulumi.get(self, "support_ipv4_gateway")

    @support_ipv4_gateway.setter
    def support_ipv4_gateway(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "support_ipv4_gateway", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userCidrBlocks")
    def user_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC的用户网段。
        """
        return pulumi.get(self, "user_cidr_blocks")

    @user_cidr_blocks.setter
    def user_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_cidr_blocks", value)

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        return pulumi.get(self, "vpc_name")

    @vpc_name.setter
    def vpc_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_name", value)


@pulumi.input_type
class _VpcState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 associate_cens: Optional[pulumi.Input[Sequence[pulumi.Input['VpcAssociateCenArgs']]]] = None,
                 cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 creation_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv4_gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 is_default: Optional[pulumi.Input[builtins.bool]] = None,
                 nat_gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 network_acl_num: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 support_ipv4_gateway: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['VpcTagArgs']]]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None,
                 user_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Vpc resources.
        :param pulumi.Input[builtins.str] account_id: VPC所属账号的ID。
        :param pulumi.Input[builtins.str] cidr_block: VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        :param pulumi.Input[builtins.str] creation_time: 创建VPC的时间。
        :param pulumi.Input[builtins.str] description: VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        :param pulumi.Input[builtins.str] ipv4_gateway_id: VPC 绑定的 IPv4 网关的 ID。
        :param pulumi.Input[builtins.str] ipv6_cidr_block: VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        :param pulumi.Input[builtins.bool] is_default: 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] nat_gateway_ids: VPC中创建的NAT网关的ID。
        :param pulumi.Input[builtins.str] network_acl_num: VPC中的网络ACL的数量。
        :param pulumi.Input[builtins.str] project_name: VPC所属项目的名称。不填默认加入default项目。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] route_table_ids: VPC关联的路由表ID。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] secondary_cidr_blocks: VPC的辅助网段。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: VPC中安全组的列表。
        :param pulumi.Input[builtins.str] status: VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] subnet_ids: VPC中子网的列表。
        :param pulumi.Input[builtins.bool] support_ipv4_gateway: VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        :param pulumi.Input[builtins.str] update_time: 更新VPC的时间。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] user_cidr_blocks: VPC的用户网段。
        :param pulumi.Input[builtins.str] vpc_id: VPC的ID。
        :param pulumi.Input[builtins.str] vpc_name: VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if associate_cens is not None:
            pulumi.set(__self__, "associate_cens", associate_cens)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if ipv4_gateway_id is not None:
            pulumi.set(__self__, "ipv4_gateway_id", ipv4_gateway_id)
        if ipv6_cidr_block is not None:
            pulumi.set(__self__, "ipv6_cidr_block", ipv6_cidr_block)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if nat_gateway_ids is not None:
            pulumi.set(__self__, "nat_gateway_ids", nat_gateway_ids)
        if network_acl_num is not None:
            pulumi.set(__self__, "network_acl_num", network_acl_num)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if route_table_ids is not None:
            pulumi.set(__self__, "route_table_ids", route_table_ids)
        if secondary_cidr_blocks is not None:
            pulumi.set(__self__, "secondary_cidr_blocks", secondary_cidr_blocks)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)
        if support_ipv4_gateway is not None:
            pulumi.set(__self__, "support_ipv4_gateway", support_ipv4_gateway)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if user_cidr_blocks is not None:
            pulumi.set(__self__, "user_cidr_blocks", user_cidr_blocks)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpc_name is not None:
            pulumi.set(__self__, "vpc_name", vpc_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC所属账号的ID。
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="associateCens")
    def associate_cens(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcAssociateCenArgs']]]]:
        return pulumi.get(self, "associate_cens")

    @associate_cens.setter
    def associate_cens(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcAssociateCenArgs']]]]):
        pulumi.set(self, "associate_cens", value)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建VPC的时间。
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="ipv4GatewayId")
    def ipv4_gateway_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC 绑定的 IPv4 网关的 ID。
        """
        return pulumi.get(self, "ipv4_gateway_id")

    @ipv4_gateway_id.setter
    def ipv4_gateway_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_gateway_id", value)

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @ipv6_cidr_block.setter
    def ipv6_cidr_block(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_cidr_block", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter(name="natGatewayIds")
    def nat_gateway_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC中创建的NAT网关的ID。
        """
        return pulumi.get(self, "nat_gateway_ids")

    @nat_gateway_ids.setter
    def nat_gateway_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "nat_gateway_ids", value)

    @property
    @pulumi.getter(name="networkAclNum")
    def network_acl_num(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC中的网络ACL的数量。
        """
        return pulumi.get(self, "network_acl_num")

    @network_acl_num.setter
    def network_acl_num(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "network_acl_num", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC所属项目的名称。不填默认加入default项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC关联的路由表ID。
        """
        return pulumi.get(self, "route_table_ids")

    @route_table_ids.setter
    def route_table_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "route_table_ids", value)

    @property
    @pulumi.getter(name="secondaryCidrBlocks")
    def secondary_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC的辅助网段。
        """
        return pulumi.get(self, "secondary_cidr_blocks")

    @secondary_cidr_blocks.setter
    def secondary_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "secondary_cidr_blocks", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC中安全组的列表。
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC中子网的列表。
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "subnet_ids", value)

    @property
    @pulumi.getter(name="supportIpv4Gateway")
    def support_ipv4_gateway(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        """
        return pulumi.get(self, "support_ipv4_gateway")

    @support_ipv4_gateway.setter
    def support_ipv4_gateway(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "support_ipv4_gateway", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['VpcTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['VpcTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        更新VPC的时间。
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="userCidrBlocks")
    def user_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        VPC的用户网段。
        """
        return pulumi.get(self, "user_cidr_blocks")

    @user_cidr_blocks.setter
    def user_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "user_cidr_blocks", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的ID。
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        return pulumi.get(self, "vpc_name")

    @vpc_name.setter
    def vpc_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_name", value)


@pulumi.type_token("volcenginecc:vpc/vpc:Vpc")
class Vpc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_cens: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcAssociateCenArgs', 'VpcAssociateCenArgsDict']]]]] = None,
                 cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv4_gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 nat_gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 support_ipv4_gateway: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcTagArgs', 'VpcTagArgsDict']]]]] = None,
                 user_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 vpc_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        私有网络为云上资源构建隔离的、自主配置的虚拟网络环境。可以在私有网络中自定义IP地址段、安全组、路由策略等网络特性，简单高效安全地管理云上资源。

        ## Import

        ```sh
        $ pulumi import volcenginecc:vpc/vpc:Vpc example "vpc_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] cidr_block: VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        :param pulumi.Input[builtins.str] description: VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        :param pulumi.Input[builtins.str] ipv4_gateway_id: VPC 绑定的 IPv4 网关的 ID。
        :param pulumi.Input[builtins.str] ipv6_cidr_block: VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] nat_gateway_ids: VPC中创建的NAT网关的ID。
        :param pulumi.Input[builtins.str] project_name: VPC所属项目的名称。不填默认加入default项目。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] route_table_ids: VPC关联的路由表ID。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] secondary_cidr_blocks: VPC的辅助网段。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: VPC中安全组的列表。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] subnet_ids: VPC中子网的列表。
        :param pulumi.Input[builtins.bool] support_ipv4_gateway: VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] user_cidr_blocks: VPC的用户网段。
        :param pulumi.Input[builtins.str] vpc_name: VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        私有网络为云上资源构建隔离的、自主配置的虚拟网络环境。可以在私有网络中自定义IP地址段、安全组、路由策略等网络特性，简单高效安全地管理云上资源。

        ## Import

        ```sh
        $ pulumi import volcenginecc:vpc/vpc:Vpc example "vpc_id"
        ```

        :param str resource_name: The name of the resource.
        :param VpcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 associate_cens: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcAssociateCenArgs', 'VpcAssociateCenArgsDict']]]]] = None,
                 cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv4_gateway_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_cidr_block: Optional[pulumi.Input[builtins.str]] = None,
                 nat_gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 support_ipv4_gateway: Optional[pulumi.Input[builtins.bool]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcTagArgs', 'VpcTagArgsDict']]]]] = None,
                 user_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 vpc_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcArgs.__new__(VpcArgs)

            __props__.__dict__["associate_cens"] = associate_cens
            __props__.__dict__["cidr_block"] = cidr_block
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["ipv4_gateway_id"] = ipv4_gateway_id
            __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
            __props__.__dict__["nat_gateway_ids"] = nat_gateway_ids
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["route_table_ids"] = route_table_ids
            __props__.__dict__["secondary_cidr_blocks"] = secondary_cidr_blocks
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["subnet_ids"] = subnet_ids
            __props__.__dict__["support_ipv4_gateway"] = support_ipv4_gateway
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_cidr_blocks"] = user_cidr_blocks
            __props__.__dict__["vpc_name"] = vpc_name
            __props__.__dict__["account_id"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["is_default"] = None
            __props__.__dict__["network_acl_num"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
            __props__.__dict__["vpc_id"] = None
        super(Vpc, __self__).__init__(
            'volcenginecc:vpc/vpc:Vpc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            associate_cens: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcAssociateCenArgs', 'VpcAssociateCenArgsDict']]]]] = None,
            cidr_block: Optional[pulumi.Input[builtins.str]] = None,
            creation_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            ipv4_gateway_id: Optional[pulumi.Input[builtins.str]] = None,
            ipv6_cidr_block: Optional[pulumi.Input[builtins.str]] = None,
            is_default: Optional[pulumi.Input[builtins.bool]] = None,
            nat_gateway_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            network_acl_num: Optional[pulumi.Input[builtins.str]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            route_table_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            secondary_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            support_ipv4_gateway: Optional[pulumi.Input[builtins.bool]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['VpcTagArgs', 'VpcTagArgsDict']]]]] = None,
            update_time: Optional[pulumi.Input[builtins.str]] = None,
            user_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None,
            vpc_name: Optional[pulumi.Input[builtins.str]] = None) -> 'Vpc':
        """
        Get an existing Vpc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: VPC所属账号的ID。
        :param pulumi.Input[builtins.str] cidr_block: VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        :param pulumi.Input[builtins.str] creation_time: 创建VPC的时间。
        :param pulumi.Input[builtins.str] description: VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] dns_servers: VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        :param pulumi.Input[builtins.str] ipv4_gateway_id: VPC 绑定的 IPv4 网关的 ID。
        :param pulumi.Input[builtins.str] ipv6_cidr_block: VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        :param pulumi.Input[builtins.bool] is_default: 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] nat_gateway_ids: VPC中创建的NAT网关的ID。
        :param pulumi.Input[builtins.str] network_acl_num: VPC中的网络ACL的数量。
        :param pulumi.Input[builtins.str] project_name: VPC所属项目的名称。不填默认加入default项目。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] route_table_ids: VPC关联的路由表ID。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] secondary_cidr_blocks: VPC的辅助网段。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_group_ids: VPC中安全组的列表。
        :param pulumi.Input[builtins.str] status: VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] subnet_ids: VPC中子网的列表。
        :param pulumi.Input[builtins.bool] support_ipv4_gateway: VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        :param pulumi.Input[builtins.str] update_time: 更新VPC的时间。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] user_cidr_blocks: VPC的用户网段。
        :param pulumi.Input[builtins.str] vpc_id: VPC的ID。
        :param pulumi.Input[builtins.str] vpc_name: VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpcState.__new__(_VpcState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["associate_cens"] = associate_cens
        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["description"] = description
        __props__.__dict__["dns_servers"] = dns_servers
        __props__.__dict__["ipv4_gateway_id"] = ipv4_gateway_id
        __props__.__dict__["ipv6_cidr_block"] = ipv6_cidr_block
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["nat_gateway_ids"] = nat_gateway_ids
        __props__.__dict__["network_acl_num"] = network_acl_num
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["route_table_ids"] = route_table_ids
        __props__.__dict__["secondary_cidr_blocks"] = secondary_cidr_blocks
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["status"] = status
        __props__.__dict__["subnet_ids"] = subnet_ids
        __props__.__dict__["support_ipv4_gateway"] = support_ipv4_gateway
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["user_cidr_blocks"] = user_cidr_blocks
        __props__.__dict__["vpc_id"] = vpc_id
        __props__.__dict__["vpc_name"] = vpc_name
        return Vpc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        """
        VPC所属账号的ID。
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="associateCens")
    def associate_cens(self) -> pulumi.Output[Sequence['outputs.VpcAssociateCen']]:
        return pulumi.get(self, "associate_cens")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[builtins.str]:
        """
        VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[builtins.str]:
        """
        创建VPC的时间。
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&分隔。不填则配置为默认DNS服务器地址。
        """
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="ipv4GatewayId")
    def ipv4_gateway_id(self) -> pulumi.Output[builtins.str]:
        """
        VPC 绑定的 IPv4 网关的 ID。
        """
        return pulumi.get(self, "ipv4_gateway_id")

    @property
    @pulumi.getter(name="ipv6CidrBlock")
    def ipv6_cidr_block(self) -> pulumi.Output[builtins.str]:
        """
        VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        """
        return pulumi.get(self, "ipv6_cidr_block")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[builtins.bool]:
        """
        该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter(name="natGatewayIds")
    def nat_gateway_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC中创建的NAT网关的ID。
        """
        return pulumi.get(self, "nat_gateway_ids")

    @property
    @pulumi.getter(name="networkAclNum")
    def network_acl_num(self) -> pulumi.Output[builtins.str]:
        """
        VPC中的网络ACL的数量。
        """
        return pulumi.get(self, "network_acl_num")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        VPC所属项目的名称。不填默认加入default项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="routeTableIds")
    def route_table_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC关联的路由表ID。
        """
        return pulumi.get(self, "route_table_ids")

    @property
    @pulumi.getter(name="secondaryCidrBlocks")
    def secondary_cidr_blocks(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC的辅助网段。
        """
        return pulumi.get(self, "secondary_cidr_blocks")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC中安全组的列表。
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC中子网的列表。
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="supportIpv4Gateway")
    def support_ipv4_gateway(self) -> pulumi.Output[builtins.bool]:
        """
        VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        """
        return pulumi.get(self, "support_ipv4_gateway")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.VpcTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[builtins.str]:
        """
        更新VPC的时间。
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="userCidrBlocks")
    def user_cidr_blocks(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        VPC的用户网段。
        """
        return pulumi.get(self, "user_cidr_blocks")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        """
        VPC的ID。
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpcName")
    def vpc_name(self) -> pulumi.Output[builtins.str]:
        """
        VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        """
        return pulumi.get(self, "vpc_name")

