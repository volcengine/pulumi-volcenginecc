# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VpcAssociateCenArgs',
    'VpcAssociateCenArgsDict',
    'VpcTagArgs',
    'VpcTagArgsDict',
]

MYPY = False

if not MYPY:
    class VpcAssociateCenArgsDict(TypedDict):
        cen_id: NotRequired[pulumi.Input[builtins.str]]
        """
        CEN的ID。
        """
        cen_owner_id: NotRequired[pulumi.Input[builtins.str]]
        """
        CEN的用户ID。
        """
        cen_status: NotRequired[pulumi.Input[builtins.str]]
        """
        VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
elif False:
    VpcAssociateCenArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcAssociateCenArgs:
    def __init__(__self__, *,
                 cen_id: Optional[pulumi.Input[builtins.str]] = None,
                 cen_owner_id: Optional[pulumi.Input[builtins.str]] = None,
                 cen_status: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] cen_id: CEN的ID。
        :param pulumi.Input[builtins.str] cen_owner_id: CEN的用户ID。
        :param pulumi.Input[builtins.str] cen_status: VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
        if cen_id is not None:
            pulumi.set(__self__, "cen_id", cen_id)
        if cen_owner_id is not None:
            pulumi.set(__self__, "cen_owner_id", cen_owner_id)
        if cen_status is not None:
            pulumi.set(__self__, "cen_status", cen_status)

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        CEN的ID。
        """
        return pulumi.get(self, "cen_id")

    @cen_id.setter
    def cen_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cen_id", value)

    @property
    @pulumi.getter(name="cenOwnerId")
    def cen_owner_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        CEN的用户ID。
        """
        return pulumi.get(self, "cen_owner_id")

    @cen_owner_id.setter
    def cen_owner_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cen_owner_id", value)

    @property
    @pulumi.getter(name="cenStatus")
    def cen_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        VPC在CEN中的状态。Attaching：加载中，Attached：已加载
        """
        return pulumi.get(self, "cen_status")

    @cen_status.setter
    def cen_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "cen_status", value)


if not MYPY:
    class VpcTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    VpcTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VpcTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


