# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'VolumeBaselinePerformanceArgs',
    'VolumeBaselinePerformanceArgsDict',
    'VolumeExtraPerformanceArgs',
    'VolumeExtraPerformanceArgsDict',
    'VolumeTotalPerformanceArgs',
    'VolumeTotalPerformanceArgsDict',
]

MYPY = False

if not MYPY:
    class VolumeBaselinePerformanceArgsDict(TypedDict):
        iops: NotRequired[pulumi.Input[builtins.float]]
        """
        云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
        """
        throughput: NotRequired[pulumi.Input[builtins.float]]
        """
        云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
        """
elif False:
    VolumeBaselinePerformanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeBaselinePerformanceArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[builtins.float]] = None,
                 throughput: Optional[pulumi.Input[builtins.float]] = None):
        """
        :param pulumi.Input[builtins.float] iops: 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
        :param pulumi.Input[builtins.float] throughput: 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
        """
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "throughput", value)


if not MYPY:
    class VolumeExtraPerformanceArgsDict(TypedDict):
        extra_performance_type_id: NotRequired[pulumi.Input[builtins.str]]
        """
        额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
        """
        iops: NotRequired[pulumi.Input[builtins.float]]
        """
        云盘的额外IOPS。
        """
        throughput: NotRequired[pulumi.Input[builtins.float]]
        """
        云盘的额外吞吐量。
        """
elif False:
    VolumeExtraPerformanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeExtraPerformanceArgs:
    def __init__(__self__, *,
                 extra_performance_type_id: Optional[pulumi.Input[builtins.str]] = None,
                 iops: Optional[pulumi.Input[builtins.float]] = None,
                 throughput: Optional[pulumi.Input[builtins.float]] = None):
        """
        :param pulumi.Input[builtins.str] extra_performance_type_id: 额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
        :param pulumi.Input[builtins.float] iops: 云盘的额外IOPS。
        :param pulumi.Input[builtins.float] throughput: 云盘的额外吞吐量。
        """
        if extra_performance_type_id is not None:
            pulumi.set(__self__, "extra_performance_type_id", extra_performance_type_id)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter(name="extraPerformanceTypeId")
    def extra_performance_type_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        额外性能的类型，取值如下：Balance：均衡型额外性能；IOPS：IOPS型额外性能；Throughput：吞吐量型额外性能。
        """
        return pulumi.get(self, "extra_performance_type_id")

    @extra_performance_type_id.setter
    def extra_performance_type_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "extra_performance_type_id", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        云盘的额外IOPS。
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        云盘的额外吞吐量。
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "throughput", value)


if not MYPY:
    class VolumeTotalPerformanceArgsDict(TypedDict):
        iops: NotRequired[pulumi.Input[builtins.float]]
        """
        云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
        """
        throughput: NotRequired[pulumi.Input[builtins.float]]
        """
        云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
        """
elif False:
    VolumeTotalPerformanceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class VolumeTotalPerformanceArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[builtins.float]] = None,
                 throughput: Optional[pulumi.Input[builtins.float]] = None):
        """
        :param pulumi.Input[builtins.float] iops: 云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
        :param pulumi.Input[builtins.float] throughput: 云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
        """
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if throughput is not None:
            pulumi.set(__self__, "throughput", throughput)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        云盘的总IOPS，即云盘的基准IOPS和额外IOPS之和。
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter
    def throughput(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        云盘的总吞吐量，即云盘的基准吞吐量和额外吞吐量之和。
        """
        return pulumi.get(self, "throughput")

    @throughput.setter
    def throughput(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "throughput", value)


