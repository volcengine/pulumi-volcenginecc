# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceCapacityArgs',
    'InstanceCapacityArgsDict',
    'InstanceConfigureNodeArgs',
    'InstanceConfigureNodeArgsDict',
    'InstanceInstanceShardArgs',
    'InstanceInstanceShardArgsDict',
    'InstanceInstanceShardServerNodeArgs',
    'InstanceInstanceShardServerNodeArgsDict',
    'InstanceTagArgs',
    'InstanceTagArgsDict',
    'InstanceVisitAddrArgs',
    'InstanceVisitAddrArgsDict',
]

MYPY = False

if not MYPY:
    class InstanceCapacityArgsDict(TypedDict):
        total: NotRequired[pulumi.Input[builtins.int]]
        """
        当前实例的内存总容量。单位：MiB。
        """
        used: NotRequired[pulumi.Input[builtins.int]]
        """
        当前实例已用容量。单位：MiB。
        """
elif False:
    InstanceCapacityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceCapacityArgs:
    def __init__(__self__, *,
                 total: Optional[pulumi.Input[builtins.int]] = None,
                 used: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.int] total: 当前实例的内存总容量。单位：MiB。
        :param pulumi.Input[builtins.int] used: 当前实例已用容量。单位：MiB。
        """
        if total is not None:
            pulumi.set(__self__, "total", total)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def total(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        当前实例的内存总容量。单位：MiB。
        """
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "total", value)

    @property
    @pulumi.getter
    def used(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        当前实例已用容量。单位：MiB。
        """
        return pulumi.get(self, "used")

    @used.setter
    def used(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "used", value)


if not MYPY:
    class InstanceConfigureNodeArgsDict(TypedDict):
        az: NotRequired[pulumi.Input[builtins.str]]
        """
        每个节点所属的可用区。
        """
elif False:
    InstanceConfigureNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceConfigureNodeArgs:
    def __init__(__self__, *,
                 az: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] az: 每个节点所属的可用区。
        """
        if az is not None:
            pulumi.set(__self__, "az", az)

    @property
    @pulumi.getter
    def az(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        每个节点所属的可用区。
        """
        return pulumi.get(self, "az")

    @az.setter
    def az(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "az", value)


if not MYPY:
    class InstanceInstanceShardArgsDict(TypedDict):
        node_number: NotRequired[pulumi.Input[builtins.int]]
        """
        分片中的节点数量
        """
        server_nodes: NotRequired[pulumi.Input[Sequence[pulumi.Input['InstanceInstanceShardServerNodeArgsDict']]]]
        shard_id: NotRequired[pulumi.Input[builtins.str]]
        """
        分片 ID。
        """
elif False:
    InstanceInstanceShardArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceInstanceShardArgs:
    def __init__(__self__, *,
                 node_number: Optional[pulumi.Input[builtins.int]] = None,
                 server_nodes: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInstanceShardServerNodeArgs']]]] = None,
                 shard_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.int] node_number: 分片中的节点数量
        :param pulumi.Input[builtins.str] shard_id: 分片 ID。
        """
        if node_number is not None:
            pulumi.set(__self__, "node_number", node_number)
        if server_nodes is not None:
            pulumi.set(__self__, "server_nodes", server_nodes)
        if shard_id is not None:
            pulumi.set(__self__, "shard_id", shard_id)

    @property
    @pulumi.getter(name="nodeNumber")
    def node_number(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        分片中的节点数量
        """
        return pulumi.get(self, "node_number")

    @node_number.setter
    def node_number(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "node_number", value)

    @property
    @pulumi.getter(name="serverNodes")
    def server_nodes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInstanceShardServerNodeArgs']]]]:
        return pulumi.get(self, "server_nodes")

    @server_nodes.setter
    def server_nodes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceInstanceShardServerNodeArgs']]]]):
        pulumi.set(self, "server_nodes", value)

    @property
    @pulumi.getter(name="shardId")
    def shard_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        分片 ID。
        """
        return pulumi.get(self, "shard_id")

    @shard_id.setter
    def shard_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "shard_id", value)


if not MYPY:
    class InstanceInstanceShardServerNodeArgsDict(TypedDict):
        current_role: NotRequired[pulumi.Input[builtins.str]]
        """
        节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
        """
        node_id: NotRequired[pulumi.Input[builtins.str]]
        """
        节点 ID。
        """
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
        """
        zone_id: NotRequired[pulumi.Input[builtins.str]]
        """
        节点所在的可用区。
        """
elif False:
    InstanceInstanceShardServerNodeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceInstanceShardServerNodeArgs:
    def __init__(__self__, *,
                 current_role: Optional[pulumi.Input[builtins.str]] = None,
                 node_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] current_role: 节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
        :param pulumi.Input[builtins.str] node_id: 节点 ID。
        :param pulumi.Input[builtins.str] status: 节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
        :param pulumi.Input[builtins.str] zone_id: 节点所在的可用区。
        """
        if current_role is not None:
            pulumi.set(__self__, "current_role", current_role)
        if node_id is not None:
            pulumi.set(__self__, "node_id", node_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="currentRole")
    def current_role(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        节点当前的角色。取值范围如下：PrimaryNode：主节点。SecondaryNode：从节点。
        """
        return pulumi.get(self, "current_role")

    @current_role.setter
    def current_role(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "current_role", value)

    @property
    @pulumi.getter(name="nodeId")
    def node_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        节点 ID。
        """
        return pulumi.get(self, "node_id")

    @node_id.setter
    def node_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "node_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        节点状态。取值范围如下：deploy：启动中。running：运行中。loading：数据加载中。error：错误。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        节点所在的可用区。
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


if not MYPY:
    class InstanceTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    InstanceTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class InstanceVisitAddrArgsDict(TypedDict):
        addr_type: NotRequired[pulumi.Input[builtins.str]]
        """
        连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
        """
        address: NotRequired[pulumi.Input[builtins.str]]
        """
        IP 地址或者域名。
        """
        eip_id: NotRequired[pulumi.Input[builtins.str]]
        """
        实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
        """
        port: NotRequired[pulumi.Input[builtins.str]]
        """
        端口号。
        """
        vi_pv6: NotRequired[pulumi.Input[builtins.str]]
        """
        连接地址所对应的 IPv6 地址。
        """
        vip: NotRequired[pulumi.Input[builtins.str]]
        """
        连接地址所对应的 IPv4 地址。
        """
elif False:
    InstanceVisitAddrArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceVisitAddrArgs:
    def __init__(__self__, *,
                 addr_type: Optional[pulumi.Input[builtins.str]] = None,
                 address: Optional[pulumi.Input[builtins.str]] = None,
                 eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.str]] = None,
                 vi_pv6: Optional[pulumi.Input[builtins.str]] = None,
                 vip: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] addr_type: 连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
        :param pulumi.Input[builtins.str] address: IP 地址或者域名。
        :param pulumi.Input[builtins.str] eip_id: 实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
        :param pulumi.Input[builtins.str] port: 端口号。
        :param pulumi.Input[builtins.str] vi_pv6: 连接地址所对应的 IPv6 地址。
        :param pulumi.Input[builtins.str] vip: 连接地址所对应的 IPv4 地址。
        """
        if addr_type is not None:
            pulumi.set(__self__, "addr_type", addr_type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if eip_id is not None:
            pulumi.set(__self__, "eip_id", eip_id)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if vi_pv6 is not None:
            pulumi.set(__self__, "vi_pv6", vi_pv6)
        if vip is not None:
            pulumi.set(__self__, "vip", vip)

    @property
    @pulumi.getter(name="addrType")
    def addr_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        连接地址类型，取值范围如下：Private：私网连接地址；Public：公网连接地址；DirectLink：直连地址。
        """
        return pulumi.get(self, "addr_type")

    @addr_type.setter
    def addr_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "addr_type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        IP 地址或者域名。
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="eipId")
    def eip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        实例公网地址所绑定的EIP ID。仅当连接地址类型（即AddrType）为Public公网连接地址时，返回该参数。
        """
        return pulumi.get(self, "eip_id")

    @eip_id.setter
    def eip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eip_id", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        端口号。
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="viPv6")
    def vi_pv6(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        连接地址所对应的 IPv6 地址。
        """
        return pulumi.get(self, "vi_pv6")

    @vi_pv6.setter
    def vi_pv6(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vi_pv6", value)

    @property
    @pulumi.getter
    def vip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        连接地址所对应的 IPv4 地址。
        """
        return pulumi.get(self, "vip")

    @vip.setter
    def vip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vip", value)


