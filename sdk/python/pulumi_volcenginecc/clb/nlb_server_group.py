# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NlbServerGroupArgs', 'NlbServerGroup']

@pulumi.input_type
class NlbServerGroupArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[builtins.str],
                 vpc_id: pulumi.Input[builtins.str],
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 any_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_security_group_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 health_check: Optional[pulumi.Input['NlbServerGroupHealthCheckArgs']] = None,
                 ip_address_version: Optional[pulumi.Input[builtins.str]] = None,
                 preserve_client_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 scheduler: Optional[pulumi.Input[builtins.str]] = None,
                 server_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupServerArgs']]]] = None,
                 session_persistence_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 session_persistence_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupTagArgs']]]] = None,
                 timestamp_remove_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a NlbServerGroup resource.
        :param pulumi.Input[builtins.str] protocol: NLB转发流量到后端服务器时使用的通信协议
        :param pulumi.Input[builtins.str] vpc_id: 服务器组所属私有网络的ID。
        :param pulumi.Input[builtins.str] account_id: 账号ID
        :param pulumi.Input[builtins.bool] any_port_enabled: 是否开启全端口转发
        :param pulumi.Input[builtins.bool] bypass_security_group_enabled: 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        :param pulumi.Input[builtins.bool] connection_drain_enabled: 是否开启连接优雅中断
        :param pulumi.Input[builtins.int] connection_drain_timeout: 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        :param pulumi.Input[builtins.str] created_time: 后端服务器组的创建时间
        :param pulumi.Input[builtins.str] description: 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        :param pulumi.Input['NlbServerGroupHealthCheckArgs'] health_check: 健康检查相关参数
        :param pulumi.Input[builtins.str] ip_address_version: 服务器组的IP地址类型
        :param pulumi.Input[builtins.bool] preserve_client_ip_enabled: 是否开启源地址保持
        :param pulumi.Input[builtins.str] project_name: 项目名称
        :param pulumi.Input[builtins.str] proxy_protocol_type: 是否开启Proxy-Protocol协议
        :param pulumi.Input[builtins.str] scheduler: NLB转发流量时遵循的规则
        :param pulumi.Input[builtins.str] server_group_name: 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        :param pulumi.Input[builtins.bool] session_persistence_enabled: 是否开启会话保持
        :param pulumi.Input[builtins.int] session_persistence_timeout: 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        :param pulumi.Input[builtins.bool] timestamp_remove_enabled: 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        :param pulumi.Input[builtins.str] type: 服务器组的类型
        :param pulumi.Input[builtins.str] updated_time: 后端服务器组的更新时间
        """
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "vpc_id", vpc_id)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if any_port_enabled is not None:
            pulumi.set(__self__, "any_port_enabled", any_port_enabled)
        if bypass_security_group_enabled is not None:
            pulumi.set(__self__, "bypass_security_group_enabled", bypass_security_group_enabled)
        if connection_drain_enabled is not None:
            pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        if connection_drain_timeout is not None:
            pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip_address_version is not None:
            pulumi.set(__self__, "ip_address_version", ip_address_version)
        if preserve_client_ip_enabled is not None:
            pulumi.set(__self__, "preserve_client_ip_enabled", preserve_client_ip_enabled)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if proxy_protocol_type is not None:
            pulumi.set(__self__, "proxy_protocol_type", proxy_protocol_type)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if server_group_name is not None:
            pulumi.set(__self__, "server_group_name", server_group_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if session_persistence_enabled is not None:
            pulumi.set(__self__, "session_persistence_enabled", session_persistence_enabled)
        if session_persistence_timeout is not None:
            pulumi.set(__self__, "session_persistence_timeout", session_persistence_timeout)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_remove_enabled is not None:
            pulumi.set(__self__, "timestamp_remove_enabled", timestamp_remove_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[builtins.str]:
        """
        NLB转发流量到后端服务器时使用的通信协议
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Input[builtins.str]:
        """
        服务器组所属私有网络的ID。
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        账号ID
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="anyPortEnabled")
    def any_port_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启全端口转发
        """
        return pulumi.get(self, "any_port_enabled")

    @any_port_enabled.setter
    def any_port_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "any_port_enabled", value)

    @property
    @pulumi.getter(name="bypassSecurityGroupEnabled")
    def bypass_security_group_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        """
        return pulumi.get(self, "bypass_security_group_enabled")

    @bypass_security_group_enabled.setter
    def bypass_security_group_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bypass_security_group_enabled", value)

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启连接优雅中断
        """
        return pulumi.get(self, "connection_drain_enabled")

    @connection_drain_enabled.setter
    def connection_drain_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "connection_drain_enabled", value)

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        """
        return pulumi.get(self, "connection_drain_timeout")

    @connection_drain_timeout.setter
    def connection_drain_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "connection_drain_timeout", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器组的创建时间
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['NlbServerGroupHealthCheckArgs']]:
        """
        健康检查相关参数
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['NlbServerGroupHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组的IP地址类型
        """
        return pulumi.get(self, "ip_address_version")

    @ip_address_version.setter
    def ip_address_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address_version", value)

    @property
    @pulumi.getter(name="preserveClientIpEnabled")
    def preserve_client_ip_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启源地址保持
        """
        return pulumi.get(self, "preserve_client_ip_enabled")

    @preserve_client_ip_enabled.setter
    def preserve_client_ip_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "preserve_client_ip_enabled", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        项目名称
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="proxyProtocolType")
    def proxy_protocol_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        是否开启Proxy-Protocol协议
        """
        return pulumi.get(self, "proxy_protocol_type")

    @proxy_protocol_type.setter
    def proxy_protocol_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "proxy_protocol_type", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB转发流量时遵循的规则
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        """
        return pulumi.get(self, "server_group_name")

    @server_group_name.setter
    def server_group_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_group_name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="sessionPersistenceEnabled")
    def session_persistence_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启会话保持
        """
        return pulumi.get(self, "session_persistence_enabled")

    @session_persistence_enabled.setter
    def session_persistence_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "session_persistence_enabled", value)

    @property
    @pulumi.getter(name="sessionPersistenceTimeout")
    def session_persistence_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        """
        return pulumi.get(self, "session_persistence_timeout")

    @session_persistence_timeout.setter
    def session_persistence_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "session_persistence_timeout", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampRemoveEnabled")
    def timestamp_remove_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        """
        return pulumi.get(self, "timestamp_remove_enabled")

    @timestamp_remove_enabled.setter
    def timestamp_remove_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "timestamp_remove_enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组的类型
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器组的更新时间
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_time", value)


@pulumi.input_type
class _NlbServerGroupState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 any_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_security_group_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 health_check: Optional[pulumi.Input['NlbServerGroupHealthCheckArgs']] = None,
                 ip_address_version: Optional[pulumi.Input[builtins.str]] = None,
                 preserve_client_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 related_load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 scheduler: Optional[pulumi.Input[builtins.str]] = None,
                 server_count: Optional[pulumi.Input[builtins.int]] = None,
                 server_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 server_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupServerArgs']]]] = None,
                 session_persistence_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 session_persistence_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupTagArgs']]]] = None,
                 timestamp_remove_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering NlbServerGroup resources.
        :param pulumi.Input[builtins.str] account_id: 账号ID
        :param pulumi.Input[builtins.bool] any_port_enabled: 是否开启全端口转发
        :param pulumi.Input[builtins.bool] bypass_security_group_enabled: 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        :param pulumi.Input[builtins.bool] connection_drain_enabled: 是否开启连接优雅中断
        :param pulumi.Input[builtins.int] connection_drain_timeout: 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        :param pulumi.Input[builtins.str] created_time: 后端服务器组的创建时间
        :param pulumi.Input[builtins.str] description: 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        :param pulumi.Input['NlbServerGroupHealthCheckArgs'] health_check: 健康检查相关参数
        :param pulumi.Input[builtins.str] ip_address_version: 服务器组的IP地址类型
        :param pulumi.Input[builtins.bool] preserve_client_ip_enabled: 是否开启源地址保持
        :param pulumi.Input[builtins.str] project_name: 项目名称
        :param pulumi.Input[builtins.str] protocol: NLB转发流量到后端服务器时使用的通信协议
        :param pulumi.Input[builtins.str] proxy_protocol_type: 是否开启Proxy-Protocol协议
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] related_load_balancer_ids: 服务器组关联的NLB实例
        :param pulumi.Input[builtins.str] scheduler: NLB转发流量时遵循的规则
        :param pulumi.Input[builtins.int] server_count: 服务器组中后端服务器的数量
        :param pulumi.Input[builtins.str] server_group_id: 服务器组ID
        :param pulumi.Input[builtins.str] server_group_name: 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        :param pulumi.Input[builtins.bool] session_persistence_enabled: 是否开启会话保持
        :param pulumi.Input[builtins.int] session_persistence_timeout: 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        :param pulumi.Input[builtins.str] status: 服务器组的状态
        :param pulumi.Input[builtins.bool] timestamp_remove_enabled: 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        :param pulumi.Input[builtins.str] type: 服务器组的类型
        :param pulumi.Input[builtins.str] updated_time: 后端服务器组的更新时间
        :param pulumi.Input[builtins.str] vpc_id: 服务器组所属私有网络的ID。
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if any_port_enabled is not None:
            pulumi.set(__self__, "any_port_enabled", any_port_enabled)
        if bypass_security_group_enabled is not None:
            pulumi.set(__self__, "bypass_security_group_enabled", bypass_security_group_enabled)
        if connection_drain_enabled is not None:
            pulumi.set(__self__, "connection_drain_enabled", connection_drain_enabled)
        if connection_drain_timeout is not None:
            pulumi.set(__self__, "connection_drain_timeout", connection_drain_timeout)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if health_check is not None:
            pulumi.set(__self__, "health_check", health_check)
        if ip_address_version is not None:
            pulumi.set(__self__, "ip_address_version", ip_address_version)
        if preserve_client_ip_enabled is not None:
            pulumi.set(__self__, "preserve_client_ip_enabled", preserve_client_ip_enabled)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if proxy_protocol_type is not None:
            pulumi.set(__self__, "proxy_protocol_type", proxy_protocol_type)
        if related_load_balancer_ids is not None:
            pulumi.set(__self__, "related_load_balancer_ids", related_load_balancer_ids)
        if scheduler is not None:
            pulumi.set(__self__, "scheduler", scheduler)
        if server_count is not None:
            pulumi.set(__self__, "server_count", server_count)
        if server_group_id is not None:
            pulumi.set(__self__, "server_group_id", server_group_id)
        if server_group_name is not None:
            pulumi.set(__self__, "server_group_name", server_group_name)
        if servers is not None:
            pulumi.set(__self__, "servers", servers)
        if session_persistence_enabled is not None:
            pulumi.set(__self__, "session_persistence_enabled", session_persistence_enabled)
        if session_persistence_timeout is not None:
            pulumi.set(__self__, "session_persistence_timeout", session_persistence_timeout)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timestamp_remove_enabled is not None:
            pulumi.set(__self__, "timestamp_remove_enabled", timestamp_remove_enabled)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        账号ID
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="anyPortEnabled")
    def any_port_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启全端口转发
        """
        return pulumi.get(self, "any_port_enabled")

    @any_port_enabled.setter
    def any_port_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "any_port_enabled", value)

    @property
    @pulumi.getter(name="bypassSecurityGroupEnabled")
    def bypass_security_group_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        """
        return pulumi.get(self, "bypass_security_group_enabled")

    @bypass_security_group_enabled.setter
    def bypass_security_group_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bypass_security_group_enabled", value)

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启连接优雅中断
        """
        return pulumi.get(self, "connection_drain_enabled")

    @connection_drain_enabled.setter
    def connection_drain_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "connection_drain_enabled", value)

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        """
        return pulumi.get(self, "connection_drain_timeout")

    @connection_drain_timeout.setter
    def connection_drain_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "connection_drain_timeout", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器组的创建时间
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional[pulumi.Input['NlbServerGroupHealthCheckArgs']]:
        """
        健康检查相关参数
        """
        return pulumi.get(self, "health_check")

    @health_check.setter
    def health_check(self, value: Optional[pulumi.Input['NlbServerGroupHealthCheckArgs']]):
        pulumi.set(self, "health_check", value)

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组的IP地址类型
        """
        return pulumi.get(self, "ip_address_version")

    @ip_address_version.setter
    def ip_address_version(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip_address_version", value)

    @property
    @pulumi.getter(name="preserveClientIpEnabled")
    def preserve_client_ip_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启源地址保持
        """
        return pulumi.get(self, "preserve_client_ip_enabled")

    @preserve_client_ip_enabled.setter
    def preserve_client_ip_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "preserve_client_ip_enabled", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        项目名称
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB转发流量到后端服务器时使用的通信协议
        """
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="proxyProtocolType")
    def proxy_protocol_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        是否开启Proxy-Protocol协议
        """
        return pulumi.get(self, "proxy_protocol_type")

    @proxy_protocol_type.setter
    def proxy_protocol_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "proxy_protocol_type", value)

    @property
    @pulumi.getter(name="relatedLoadBalancerIds")
    def related_load_balancer_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        服务器组关联的NLB实例
        """
        return pulumi.get(self, "related_load_balancer_ids")

    @related_load_balancer_ids.setter
    def related_load_balancer_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "related_load_balancer_ids", value)

    @property
    @pulumi.getter
    def scheduler(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB转发流量时遵循的规则
        """
        return pulumi.get(self, "scheduler")

    @scheduler.setter
    def scheduler(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scheduler", value)

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        服务器组中后端服务器的数量
        """
        return pulumi.get(self, "server_count")

    @server_count.setter
    def server_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "server_count", value)

    @property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组ID
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_group_id", value)

    @property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        """
        return pulumi.get(self, "server_group_name")

    @server_group_name.setter
    def server_group_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_group_name", value)

    @property
    @pulumi.getter
    def servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupServerArgs']]]]:
        return pulumi.get(self, "servers")

    @servers.setter
    def servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupServerArgs']]]]):
        pulumi.set(self, "servers", value)

    @property
    @pulumi.getter(name="sessionPersistenceEnabled")
    def session_persistence_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启会话保持
        """
        return pulumi.get(self, "session_persistence_enabled")

    @session_persistence_enabled.setter
    def session_persistence_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "session_persistence_enabled", value)

    @property
    @pulumi.getter(name="sessionPersistenceTimeout")
    def session_persistence_timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        """
        return pulumi.get(self, "session_persistence_timeout")

    @session_persistence_timeout.setter
    def session_persistence_timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "session_persistence_timeout", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组的状态
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['NlbServerGroupTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="timestampRemoveEnabled")
    def timestamp_remove_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        """
        return pulumi.get(self, "timestamp_remove_enabled")

    @timestamp_remove_enabled.setter
    def timestamp_remove_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "timestamp_remove_enabled", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组的类型
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器组的更新时间
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器组所属私有网络的ID。
        """
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "vpc_id", value)


@pulumi.type_token("volcenginecc:clb/nlbServerGroup:NlbServerGroup")
class NlbServerGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 any_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_security_group_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 health_check: Optional[pulumi.Input[Union['NlbServerGroupHealthCheckArgs', 'NlbServerGroupHealthCheckArgsDict']]] = None,
                 ip_address_version: Optional[pulumi.Input[builtins.str]] = None,
                 preserve_client_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 scheduler: Optional[pulumi.Input[builtins.str]] = None,
                 server_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServerGroupServerArgs', 'NlbServerGroupServerArgsDict']]]]] = None,
                 session_persistence_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 session_persistence_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServerGroupTagArgs', 'NlbServerGroupTagArgsDict']]]]] = None,
                 timestamp_remove_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        服务器组

        ## Import

        ```sh
        $ pulumi import volcenginecc:clb/nlbServerGroup:NlbServerGroup example "server_group_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: 账号ID
        :param pulumi.Input[builtins.bool] any_port_enabled: 是否开启全端口转发
        :param pulumi.Input[builtins.bool] bypass_security_group_enabled: 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        :param pulumi.Input[builtins.bool] connection_drain_enabled: 是否开启连接优雅中断
        :param pulumi.Input[builtins.int] connection_drain_timeout: 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        :param pulumi.Input[builtins.str] created_time: 后端服务器组的创建时间
        :param pulumi.Input[builtins.str] description: 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        :param pulumi.Input[Union['NlbServerGroupHealthCheckArgs', 'NlbServerGroupHealthCheckArgsDict']] health_check: 健康检查相关参数
        :param pulumi.Input[builtins.str] ip_address_version: 服务器组的IP地址类型
        :param pulumi.Input[builtins.bool] preserve_client_ip_enabled: 是否开启源地址保持
        :param pulumi.Input[builtins.str] project_name: 项目名称
        :param pulumi.Input[builtins.str] protocol: NLB转发流量到后端服务器时使用的通信协议
        :param pulumi.Input[builtins.str] proxy_protocol_type: 是否开启Proxy-Protocol协议
        :param pulumi.Input[builtins.str] scheduler: NLB转发流量时遵循的规则
        :param pulumi.Input[builtins.str] server_group_name: 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        :param pulumi.Input[builtins.bool] session_persistence_enabled: 是否开启会话保持
        :param pulumi.Input[builtins.int] session_persistence_timeout: 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        :param pulumi.Input[builtins.bool] timestamp_remove_enabled: 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        :param pulumi.Input[builtins.str] type: 服务器组的类型
        :param pulumi.Input[builtins.str] updated_time: 后端服务器组的更新时间
        :param pulumi.Input[builtins.str] vpc_id: 服务器组所属私有网络的ID。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NlbServerGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        服务器组

        ## Import

        ```sh
        $ pulumi import volcenginecc:clb/nlbServerGroup:NlbServerGroup example "server_group_id"
        ```

        :param str resource_name: The name of the resource.
        :param NlbServerGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NlbServerGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_id: Optional[pulumi.Input[builtins.str]] = None,
                 any_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 bypass_security_group_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 connection_drain_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 health_check: Optional[pulumi.Input[Union['NlbServerGroupHealthCheckArgs', 'NlbServerGroupHealthCheckArgsDict']]] = None,
                 ip_address_version: Optional[pulumi.Input[builtins.str]] = None,
                 preserve_client_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol: Optional[pulumi.Input[builtins.str]] = None,
                 proxy_protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 scheduler: Optional[pulumi.Input[builtins.str]] = None,
                 server_group_name: Optional[pulumi.Input[builtins.str]] = None,
                 servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServerGroupServerArgs', 'NlbServerGroupServerArgsDict']]]]] = None,
                 session_persistence_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 session_persistence_timeout: Optional[pulumi.Input[builtins.int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServerGroupTagArgs', 'NlbServerGroupTagArgsDict']]]]] = None,
                 timestamp_remove_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None,
                 vpc_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NlbServerGroupArgs.__new__(NlbServerGroupArgs)

            __props__.__dict__["account_id"] = account_id
            __props__.__dict__["any_port_enabled"] = any_port_enabled
            __props__.__dict__["bypass_security_group_enabled"] = bypass_security_group_enabled
            __props__.__dict__["connection_drain_enabled"] = connection_drain_enabled
            __props__.__dict__["connection_drain_timeout"] = connection_drain_timeout
            __props__.__dict__["created_time"] = created_time
            __props__.__dict__["description"] = description
            __props__.__dict__["health_check"] = health_check
            __props__.__dict__["ip_address_version"] = ip_address_version
            __props__.__dict__["preserve_client_ip_enabled"] = preserve_client_ip_enabled
            __props__.__dict__["project_name"] = project_name
            if protocol is None and not opts.urn:
                raise TypeError("Missing required property 'protocol'")
            __props__.__dict__["protocol"] = protocol
            __props__.__dict__["proxy_protocol_type"] = proxy_protocol_type
            __props__.__dict__["scheduler"] = scheduler
            __props__.__dict__["server_group_name"] = server_group_name
            __props__.__dict__["servers"] = servers
            __props__.__dict__["session_persistence_enabled"] = session_persistence_enabled
            __props__.__dict__["session_persistence_timeout"] = session_persistence_timeout
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timestamp_remove_enabled"] = timestamp_remove_enabled
            __props__.__dict__["type"] = type
            __props__.__dict__["updated_time"] = updated_time
            if vpc_id is None and not opts.urn:
                raise TypeError("Missing required property 'vpc_id'")
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["related_load_balancer_ids"] = None
            __props__.__dict__["server_count"] = None
            __props__.__dict__["server_group_id"] = None
            __props__.__dict__["status"] = None
        super(NlbServerGroup, __self__).__init__(
            'volcenginecc:clb/nlbServerGroup:NlbServerGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.str]] = None,
            any_port_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            bypass_security_group_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            connection_drain_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            connection_drain_timeout: Optional[pulumi.Input[builtins.int]] = None,
            created_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            health_check: Optional[pulumi.Input[Union['NlbServerGroupHealthCheckArgs', 'NlbServerGroupHealthCheckArgsDict']]] = None,
            ip_address_version: Optional[pulumi.Input[builtins.str]] = None,
            preserve_client_ip_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            protocol: Optional[pulumi.Input[builtins.str]] = None,
            proxy_protocol_type: Optional[pulumi.Input[builtins.str]] = None,
            related_load_balancer_ids: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            scheduler: Optional[pulumi.Input[builtins.str]] = None,
            server_count: Optional[pulumi.Input[builtins.int]] = None,
            server_group_id: Optional[pulumi.Input[builtins.str]] = None,
            server_group_name: Optional[pulumi.Input[builtins.str]] = None,
            servers: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServerGroupServerArgs', 'NlbServerGroupServerArgsDict']]]]] = None,
            session_persistence_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            session_persistence_timeout: Optional[pulumi.Input[builtins.int]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['NlbServerGroupTagArgs', 'NlbServerGroupTagArgsDict']]]]] = None,
            timestamp_remove_enabled: Optional[pulumi.Input[builtins.bool]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            updated_time: Optional[pulumi.Input[builtins.str]] = None,
            vpc_id: Optional[pulumi.Input[builtins.str]] = None) -> 'NlbServerGroup':
        """
        Get an existing NlbServerGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] account_id: 账号ID
        :param pulumi.Input[builtins.bool] any_port_enabled: 是否开启全端口转发
        :param pulumi.Input[builtins.bool] bypass_security_group_enabled: 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        :param pulumi.Input[builtins.bool] connection_drain_enabled: 是否开启连接优雅中断
        :param pulumi.Input[builtins.int] connection_drain_timeout: 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        :param pulumi.Input[builtins.str] created_time: 后端服务器组的创建时间
        :param pulumi.Input[builtins.str] description: 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        :param pulumi.Input[Union['NlbServerGroupHealthCheckArgs', 'NlbServerGroupHealthCheckArgsDict']] health_check: 健康检查相关参数
        :param pulumi.Input[builtins.str] ip_address_version: 服务器组的IP地址类型
        :param pulumi.Input[builtins.bool] preserve_client_ip_enabled: 是否开启源地址保持
        :param pulumi.Input[builtins.str] project_name: 项目名称
        :param pulumi.Input[builtins.str] protocol: NLB转发流量到后端服务器时使用的通信协议
        :param pulumi.Input[builtins.str] proxy_protocol_type: 是否开启Proxy-Protocol协议
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] related_load_balancer_ids: 服务器组关联的NLB实例
        :param pulumi.Input[builtins.str] scheduler: NLB转发流量时遵循的规则
        :param pulumi.Input[builtins.int] server_count: 服务器组中后端服务器的数量
        :param pulumi.Input[builtins.str] server_group_id: 服务器组ID
        :param pulumi.Input[builtins.str] server_group_name: 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        :param pulumi.Input[builtins.bool] session_persistence_enabled: 是否开启会话保持
        :param pulumi.Input[builtins.int] session_persistence_timeout: 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        :param pulumi.Input[builtins.str] status: 服务器组的状态
        :param pulumi.Input[builtins.bool] timestamp_remove_enabled: 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        :param pulumi.Input[builtins.str] type: 服务器组的类型
        :param pulumi.Input[builtins.str] updated_time: 后端服务器组的更新时间
        :param pulumi.Input[builtins.str] vpc_id: 服务器组所属私有网络的ID。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NlbServerGroupState.__new__(_NlbServerGroupState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["any_port_enabled"] = any_port_enabled
        __props__.__dict__["bypass_security_group_enabled"] = bypass_security_group_enabled
        __props__.__dict__["connection_drain_enabled"] = connection_drain_enabled
        __props__.__dict__["connection_drain_timeout"] = connection_drain_timeout
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["health_check"] = health_check
        __props__.__dict__["ip_address_version"] = ip_address_version
        __props__.__dict__["preserve_client_ip_enabled"] = preserve_client_ip_enabled
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["protocol"] = protocol
        __props__.__dict__["proxy_protocol_type"] = proxy_protocol_type
        __props__.__dict__["related_load_balancer_ids"] = related_load_balancer_ids
        __props__.__dict__["scheduler"] = scheduler
        __props__.__dict__["server_count"] = server_count
        __props__.__dict__["server_group_id"] = server_group_id
        __props__.__dict__["server_group_name"] = server_group_name
        __props__.__dict__["servers"] = servers
        __props__.__dict__["session_persistence_enabled"] = session_persistence_enabled
        __props__.__dict__["session_persistence_timeout"] = session_persistence_timeout
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["timestamp_remove_enabled"] = timestamp_remove_enabled
        __props__.__dict__["type"] = type
        __props__.__dict__["updated_time"] = updated_time
        __props__.__dict__["vpc_id"] = vpc_id
        return NlbServerGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.str]:
        """
        账号ID
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="anyPortEnabled")
    def any_port_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        是否开启全端口转发
        """
        return pulumi.get(self, "any_port_enabled")

    @property
    @pulumi.getter(name="bypassSecurityGroupEnabled")
    def bypass_security_group_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
        """
        return pulumi.get(self, "bypass_security_group_enabled")

    @property
    @pulumi.getter(name="connectionDrainEnabled")
    def connection_drain_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        是否开启连接优雅中断
        """
        return pulumi.get(self, "connection_drain_enabled")

    @property
    @pulumi.getter(name="connectionDrainTimeout")
    def connection_drain_timeout(self) -> pulumi.Output[builtins.int]:
        """
        连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
        """
        return pulumi.get(self, "connection_drain_timeout")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[builtins.str]:
        """
        后端服务器组的创建时间
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> pulumi.Output['outputs.NlbServerGroupHealthCheck']:
        """
        健康检查相关参数
        """
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> pulumi.Output[builtins.str]:
        """
        服务器组的IP地址类型
        """
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="preserveClientIpEnabled")
    def preserve_client_ip_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        是否开启源地址保持
        """
        return pulumi.get(self, "preserve_client_ip_enabled")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        项目名称
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Output[builtins.str]:
        """
        NLB转发流量到后端服务器时使用的通信协议
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="proxyProtocolType")
    def proxy_protocol_type(self) -> pulumi.Output[builtins.str]:
        """
        是否开启Proxy-Protocol协议
        """
        return pulumi.get(self, "proxy_protocol_type")

    @property
    @pulumi.getter(name="relatedLoadBalancerIds")
    def related_load_balancer_ids(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        服务器组关联的NLB实例
        """
        return pulumi.get(self, "related_load_balancer_ids")

    @property
    @pulumi.getter
    def scheduler(self) -> pulumi.Output[builtins.str]:
        """
        NLB转发流量时遵循的规则
        """
        return pulumi.get(self, "scheduler")

    @property
    @pulumi.getter(name="serverCount")
    def server_count(self) -> pulumi.Output[builtins.int]:
        """
        服务器组中后端服务器的数量
        """
        return pulumi.get(self, "server_count")

    @property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> pulumi.Output[builtins.str]:
        """
        服务器组ID
        """
        return pulumi.get(self, "server_group_id")

    @property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> pulumi.Output[builtins.str]:
        """
        服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
        """
        return pulumi.get(self, "server_group_name")

    @property
    @pulumi.getter
    def servers(self) -> pulumi.Output[Sequence['outputs.NlbServerGroupServer']]:
        return pulumi.get(self, "servers")

    @property
    @pulumi.getter(name="sessionPersistenceEnabled")
    def session_persistence_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        是否开启会话保持
        """
        return pulumi.get(self, "session_persistence_enabled")

    @property
    @pulumi.getter(name="sessionPersistenceTimeout")
    def session_persistence_timeout(self) -> pulumi.Output[builtins.int]:
        """
        会话保持的超时时间，取值范围为1～3600秒，默认1000秒
        """
        return pulumi.get(self, "session_persistence_timeout")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        服务器组的状态
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.NlbServerGroupTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timestampRemoveEnabled")
    def timestamp_remove_enabled(self) -> pulumi.Output[builtins.bool]:
        """
        是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
        """
        return pulumi.get(self, "timestamp_remove_enabled")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        服务器组的类型
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> pulumi.Output[builtins.str]:
        """
        后端服务器组的更新时间
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[builtins.str]:
        """
        服务器组所属私有网络的ID。
        """
        return pulumi.get(self, "vpc_id")

