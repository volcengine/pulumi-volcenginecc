# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetNlbResult',
    'AwaitableGetNlbResult',
    'get_nlb',
    'get_nlb_output',
]

@pulumi.output_type
class GetNlbResult:
    """
    A collection of values returned by getNlb.
    """
    def __init__(__self__, account_id=None, billing_status=None, billing_type=None, created_time=None, cross_zone_enabled=None, description=None, dns_name=None, expected_overdue_time=None, id=None, ip_address_version=None, ipv4_bandwidth_package_id=None, ipv4_network_type=None, ipv6_bandwidth_package_id=None, ipv6_network_type=None, load_balancer_id=None, load_balancer_name=None, managed_security_group_id=None, modification_protection_status=None, overdue_time=None, project_name=None, reclaimed_time=None, security_group_ids=None, status=None, tags=None, updated_time=None, vpc_id=None, zone_mappings=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if billing_status and not isinstance(billing_status, str):
            raise TypeError("Expected argument 'billing_status' to be a str")
        pulumi.set(__self__, "billing_status", billing_status)
        if billing_type and not isinstance(billing_type, int):
            raise TypeError("Expected argument 'billing_type' to be a int")
        pulumi.set(__self__, "billing_type", billing_type)
        if created_time and not isinstance(created_time, str):
            raise TypeError("Expected argument 'created_time' to be a str")
        pulumi.set(__self__, "created_time", created_time)
        if cross_zone_enabled and not isinstance(cross_zone_enabled, bool):
            raise TypeError("Expected argument 'cross_zone_enabled' to be a bool")
        pulumi.set(__self__, "cross_zone_enabled", cross_zone_enabled)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dns_name and not isinstance(dns_name, str):
            raise TypeError("Expected argument 'dns_name' to be a str")
        pulumi.set(__self__, "dns_name", dns_name)
        if expected_overdue_time and not isinstance(expected_overdue_time, str):
            raise TypeError("Expected argument 'expected_overdue_time' to be a str")
        pulumi.set(__self__, "expected_overdue_time", expected_overdue_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_address_version and not isinstance(ip_address_version, str):
            raise TypeError("Expected argument 'ip_address_version' to be a str")
        pulumi.set(__self__, "ip_address_version", ip_address_version)
        if ipv4_bandwidth_package_id and not isinstance(ipv4_bandwidth_package_id, str):
            raise TypeError("Expected argument 'ipv4_bandwidth_package_id' to be a str")
        pulumi.set(__self__, "ipv4_bandwidth_package_id", ipv4_bandwidth_package_id)
        if ipv4_network_type and not isinstance(ipv4_network_type, str):
            raise TypeError("Expected argument 'ipv4_network_type' to be a str")
        pulumi.set(__self__, "ipv4_network_type", ipv4_network_type)
        if ipv6_bandwidth_package_id and not isinstance(ipv6_bandwidth_package_id, str):
            raise TypeError("Expected argument 'ipv6_bandwidth_package_id' to be a str")
        pulumi.set(__self__, "ipv6_bandwidth_package_id", ipv6_bandwidth_package_id)
        if ipv6_network_type and not isinstance(ipv6_network_type, str):
            raise TypeError("Expected argument 'ipv6_network_type' to be a str")
        pulumi.set(__self__, "ipv6_network_type", ipv6_network_type)
        if load_balancer_id and not isinstance(load_balancer_id, str):
            raise TypeError("Expected argument 'load_balancer_id' to be a str")
        pulumi.set(__self__, "load_balancer_id", load_balancer_id)
        if load_balancer_name and not isinstance(load_balancer_name, str):
            raise TypeError("Expected argument 'load_balancer_name' to be a str")
        pulumi.set(__self__, "load_balancer_name", load_balancer_name)
        if managed_security_group_id and not isinstance(managed_security_group_id, str):
            raise TypeError("Expected argument 'managed_security_group_id' to be a str")
        pulumi.set(__self__, "managed_security_group_id", managed_security_group_id)
        if modification_protection_status and not isinstance(modification_protection_status, str):
            raise TypeError("Expected argument 'modification_protection_status' to be a str")
        pulumi.set(__self__, "modification_protection_status", modification_protection_status)
        if overdue_time and not isinstance(overdue_time, str):
            raise TypeError("Expected argument 'overdue_time' to be a str")
        pulumi.set(__self__, "overdue_time", overdue_time)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if reclaimed_time and not isinstance(reclaimed_time, str):
            raise TypeError("Expected argument 'reclaimed_time' to be a str")
        pulumi.set(__self__, "reclaimed_time", reclaimed_time)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_time and not isinstance(updated_time, str):
            raise TypeError("Expected argument 'updated_time' to be a str")
        pulumi.set(__self__, "updated_time", updated_time)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)
        if zone_mappings and not isinstance(zone_mappings, list):
            raise TypeError("Expected argument 'zone_mappings' to be a list")
        pulumi.set(__self__, "zone_mappings", zone_mappings)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> builtins.str:
        """
        NLB实例所属的账号ID。
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="billingStatus")
    def billing_status(self) -> builtins.str:
        """
        NLB实例的计费状态。Normal: 正常，FinancialLocked: 被锁定。
        """
        return pulumi.get(self, "billing_status")

    @property
    @pulumi.getter(name="billingType")
    def billing_type(self) -> builtins.int:
        """
        NLB实例的计费类型。3：按使用量计费
        """
        return pulumi.get(self, "billing_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> builtins.str:
        """
        NLB实例的创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="crossZoneEnabled")
    def cross_zone_enabled(self) -> builtins.bool:
        """
        NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
        """
        return pulumi.get(self, "cross_zone_enabled")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> builtins.str:
        """
        NLB实例的DNS地址。
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="expectedOverdueTime")
    def expected_overdue_time(self) -> builtins.str:
        """
        NLB实例欠费关停时间。
        """
        return pulumi.get(self, "expected_overdue_time")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddressVersion")
    def ip_address_version(self) -> builtins.str:
        """
        NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
        """
        return pulumi.get(self, "ip_address_version")

    @property
    @pulumi.getter(name="ipv4BandwidthPackageId")
    def ipv4_bandwidth_package_id(self) -> builtins.str:
        """
        IPv4类型的共享带宽包ID。
        """
        return pulumi.get(self, "ipv4_bandwidth_package_id")

    @property
    @pulumi.getter(name="ipv4NetworkType")
    def ipv4_network_type(self) -> builtins.str:
        """
        NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
        """
        return pulumi.get(self, "ipv4_network_type")

    @property
    @pulumi.getter(name="ipv6BandwidthPackageId")
    def ipv6_bandwidth_package_id(self) -> builtins.str:
        """
        IPv6类型的共享带宽包ID。
        """
        return pulumi.get(self, "ipv6_bandwidth_package_id")

    @property
    @pulumi.getter(name="ipv6NetworkType")
    def ipv6_network_type(self) -> builtins.str:
        """
        NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
        """
        return pulumi.get(self, "ipv6_network_type")

    @property
    @pulumi.getter(name="loadBalancerId")
    def load_balancer_id(self) -> builtins.str:
        """
        NLB实例ID。
        """
        return pulumi.get(self, "load_balancer_id")

    @property
    @pulumi.getter(name="loadBalancerName")
    def load_balancer_name(self) -> builtins.str:
        """
        NLB实例的名称。
        """
        return pulumi.get(self, "load_balancer_name")

    @property
    @pulumi.getter(name="managedSecurityGroupId")
    def managed_security_group_id(self) -> builtins.str:
        """
        系统为NLB实例自动关联的托管安全组ID。
        """
        return pulumi.get(self, "managed_security_group_id")

    @property
    @pulumi.getter(name="modificationProtectionStatus")
    def modification_protection_status(self) -> builtins.str:
        """
        NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
        """
        return pulumi.get(self, "modification_protection_status")

    @property
    @pulumi.getter(name="overdueTime")
    def overdue_time(self) -> builtins.str:
        """
        NLB实例被锁定的时间。参数BillingStatus为Normal时，本参数返回为空字符串。
        """
        return pulumi.get(self, "overdue_time")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        NLB实例所属项目的名称。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="reclaimedTime")
    def reclaimed_time(self) -> builtins.str:
        """
        NLB实例的预期回收时间。参数BillingStatus为Normal时，本参数返回为空字符串。
        """
        return pulumi.get(self, "reclaimed_time")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[builtins.str]:
        """
        NLB实例关联的安全组ID列表。
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        NLB 实例的状态。Inactive：已停止。Active：运行中。Creating：创建中。Provisioning：创建中。仅调用API创建NLB实例时存在该状态。Configuring：配置中。Deleting：删除中。CreateFailed：创建失败。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetNlbTagResult']:
        """
        NLB实例的标签信息。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> builtins.str:
        """
        NLB实例的更新时间。
        """
        return pulumi.get(self, "updated_time")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> builtins.str:
        """
        NLB实例所属的VPC ID。
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="zoneMappings")
    def zone_mappings(self) -> Sequence['outputs.GetNlbZoneMappingResult']:
        """
        NLB实例的可用区信息。
        """
        return pulumi.get(self, "zone_mappings")


class AwaitableGetNlbResult(GetNlbResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNlbResult(
            account_id=self.account_id,
            billing_status=self.billing_status,
            billing_type=self.billing_type,
            created_time=self.created_time,
            cross_zone_enabled=self.cross_zone_enabled,
            description=self.description,
            dns_name=self.dns_name,
            expected_overdue_time=self.expected_overdue_time,
            id=self.id,
            ip_address_version=self.ip_address_version,
            ipv4_bandwidth_package_id=self.ipv4_bandwidth_package_id,
            ipv4_network_type=self.ipv4_network_type,
            ipv6_bandwidth_package_id=self.ipv6_bandwidth_package_id,
            ipv6_network_type=self.ipv6_network_type,
            load_balancer_id=self.load_balancer_id,
            load_balancer_name=self.load_balancer_name,
            managed_security_group_id=self.managed_security_group_id,
            modification_protection_status=self.modification_protection_status,
            overdue_time=self.overdue_time,
            project_name=self.project_name,
            reclaimed_time=self.reclaimed_time,
            security_group_ids=self.security_group_ids,
            status=self.status,
            tags=self.tags,
            updated_time=self.updated_time,
            vpc_id=self.vpc_id,
            zone_mappings=self.zone_mappings)


def get_nlb(id: Optional[builtins.str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNlbResult:
    """
    Data Source schema for Volcengine::CLB::NLB


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:clb/getNlb:getNlb', __args__, opts=opts, typ=GetNlbResult).value

    return AwaitableGetNlbResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        billing_status=pulumi.get(__ret__, 'billing_status'),
        billing_type=pulumi.get(__ret__, 'billing_type'),
        created_time=pulumi.get(__ret__, 'created_time'),
        cross_zone_enabled=pulumi.get(__ret__, 'cross_zone_enabled'),
        description=pulumi.get(__ret__, 'description'),
        dns_name=pulumi.get(__ret__, 'dns_name'),
        expected_overdue_time=pulumi.get(__ret__, 'expected_overdue_time'),
        id=pulumi.get(__ret__, 'id'),
        ip_address_version=pulumi.get(__ret__, 'ip_address_version'),
        ipv4_bandwidth_package_id=pulumi.get(__ret__, 'ipv4_bandwidth_package_id'),
        ipv4_network_type=pulumi.get(__ret__, 'ipv4_network_type'),
        ipv6_bandwidth_package_id=pulumi.get(__ret__, 'ipv6_bandwidth_package_id'),
        ipv6_network_type=pulumi.get(__ret__, 'ipv6_network_type'),
        load_balancer_id=pulumi.get(__ret__, 'load_balancer_id'),
        load_balancer_name=pulumi.get(__ret__, 'load_balancer_name'),
        managed_security_group_id=pulumi.get(__ret__, 'managed_security_group_id'),
        modification_protection_status=pulumi.get(__ret__, 'modification_protection_status'),
        overdue_time=pulumi.get(__ret__, 'overdue_time'),
        project_name=pulumi.get(__ret__, 'project_name'),
        reclaimed_time=pulumi.get(__ret__, 'reclaimed_time'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_time=pulumi.get(__ret__, 'updated_time'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'),
        zone_mappings=pulumi.get(__ret__, 'zone_mappings'))
def get_nlb_output(id: Optional[pulumi.Input[builtins.str]] = None,
                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNlbResult]:
    """
    Data Source schema for Volcengine::CLB::NLB


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:clb/getNlb:getNlb', __args__, opts=opts, typ=GetNlbResult)
    return __ret__.apply(lambda __response__: GetNlbResult(
        account_id=pulumi.get(__response__, 'account_id'),
        billing_status=pulumi.get(__response__, 'billing_status'),
        billing_type=pulumi.get(__response__, 'billing_type'),
        created_time=pulumi.get(__response__, 'created_time'),
        cross_zone_enabled=pulumi.get(__response__, 'cross_zone_enabled'),
        description=pulumi.get(__response__, 'description'),
        dns_name=pulumi.get(__response__, 'dns_name'),
        expected_overdue_time=pulumi.get(__response__, 'expected_overdue_time'),
        id=pulumi.get(__response__, 'id'),
        ip_address_version=pulumi.get(__response__, 'ip_address_version'),
        ipv4_bandwidth_package_id=pulumi.get(__response__, 'ipv4_bandwidth_package_id'),
        ipv4_network_type=pulumi.get(__response__, 'ipv4_network_type'),
        ipv6_bandwidth_package_id=pulumi.get(__response__, 'ipv6_bandwidth_package_id'),
        ipv6_network_type=pulumi.get(__response__, 'ipv6_network_type'),
        load_balancer_id=pulumi.get(__response__, 'load_balancer_id'),
        load_balancer_name=pulumi.get(__response__, 'load_balancer_name'),
        managed_security_group_id=pulumi.get(__response__, 'managed_security_group_id'),
        modification_protection_status=pulumi.get(__response__, 'modification_protection_status'),
        overdue_time=pulumi.get(__response__, 'overdue_time'),
        project_name=pulumi.get(__response__, 'project_name'),
        reclaimed_time=pulumi.get(__response__, 'reclaimed_time'),
        security_group_ids=pulumi.get(__response__, 'security_group_ids'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        updated_time=pulumi.get(__response__, 'updated_time'),
        vpc_id=pulumi.get(__response__, 'vpc_id'),
        zone_mappings=pulumi.get(__response__, 'zone_mappings')))
