# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ClbAccessLogArgs',
    'ClbAccessLogArgsDict',
    'ClbEipArgs',
    'ClbEipArgsDict',
    'ClbEniArgs',
    'ClbEniArgsDict',
    'ClbEnisArgs',
    'ClbEnisArgsDict',
    'ClbListenerArgs',
    'ClbListenerArgsDict',
    'ClbServerGroupArgs',
    'ClbServerGroupArgsDict',
    'ClbTagArgs',
    'ClbTagArgsDict',
    'NlbListenerHealthArgs',
    'NlbListenerHealthArgsDict',
    'NlbListenerTagArgs',
    'NlbListenerTagArgsDict',
    'NlbServerGroupHealthCheckArgs',
    'NlbServerGroupHealthCheckArgsDict',
    'NlbServerGroupServerArgs',
    'NlbServerGroupServerArgsDict',
    'NlbServerGroupTagArgs',
    'NlbServerGroupTagArgsDict',
    'NlbTagArgs',
    'NlbTagArgsDict',
    'NlbZoneMappingArgs',
    'NlbZoneMappingArgsDict',
    'ServerGroupListenerArgs',
    'ServerGroupListenerArgsDict',
    'ServerGroupServerArgs',
    'ServerGroupServerArgsDict',
    'ServerGroupTagArgs',
    'ServerGroupTagArgsDict',
]

MYPY = False

if not MYPY:
    class ClbAccessLogArgsDict(TypedDict):
        bucket_name: NotRequired[pulumi.Input[builtins.str]]
        """
        存储七层访问日志的对象存储桶的名称
        """
        delivery_type: NotRequired[pulumi.Input[builtins.str]]
        """
        日志投递类型
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否开启访问日志（七层）投递至对象存储TOS的功能
        """
        tls_project_id: NotRequired[pulumi.Input[builtins.str]]
        """
        日志项目
        """
        tls_topic_id: NotRequired[pulumi.Input[builtins.str]]
        """
        日志主题
        """
elif False:
    ClbAccessLogArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbAccessLogArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[builtins.str]] = None,
                 delivery_type: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 tls_project_id: Optional[pulumi.Input[builtins.str]] = None,
                 tls_topic_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] bucket_name: 存储七层访问日志的对象存储桶的名称
        :param pulumi.Input[builtins.str] delivery_type: 日志投递类型
        :param pulumi.Input[builtins.bool] enabled: 是否开启访问日志（七层）投递至对象存储TOS的功能
        :param pulumi.Input[builtins.str] tls_project_id: 日志项目
        :param pulumi.Input[builtins.str] tls_topic_id: 日志主题
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if delivery_type is not None:
            pulumi.set(__self__, "delivery_type", delivery_type)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if tls_project_id is not None:
            pulumi.set(__self__, "tls_project_id", tls_project_id)
        if tls_topic_id is not None:
            pulumi.set(__self__, "tls_topic_id", tls_topic_id)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储七层访问日志的对象存储桶的名称
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="deliveryType")
    def delivery_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        日志投递类型
        """
        return pulumi.get(self, "delivery_type")

    @delivery_type.setter
    def delivery_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "delivery_type", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启访问日志（七层）投递至对象存储TOS的功能
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="tlsProjectId")
    def tls_project_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        日志项目
        """
        return pulumi.get(self, "tls_project_id")

    @tls_project_id.setter
    def tls_project_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tls_project_id", value)

    @property
    @pulumi.getter(name="tlsTopicId")
    def tls_topic_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        日志主题
        """
        return pulumi.get(self, "tls_topic_id")

    @tls_topic_id.setter
    def tls_topic_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "tls_topic_id", value)


if not MYPY:
    class ClbEipArgsDict(TypedDict):
        bandwidth: NotRequired[pulumi.Input[builtins.float]]
        """
        带宽峰值
        """
        bandwidth_package_id: NotRequired[pulumi.Input[builtins.str]]
        """
        共享带宽包ID
        """
        eip_billing_type: NotRequired[pulumi.Input[builtins.float]]
        """
        计费方式
        """
        isp: NotRequired[pulumi.Input[builtins.str]]
        """
        线路类型
        """
        security_protection_instance_id: NotRequired[pulumi.Input[builtins.float]]
        """
        防护包ID
        """
        security_protection_types: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        安全防护类型
        """
elif False:
    ClbEipArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbEipArgs:
    def __init__(__self__, *,
                 bandwidth: Optional[pulumi.Input[builtins.float]] = None,
                 bandwidth_package_id: Optional[pulumi.Input[builtins.str]] = None,
                 eip_billing_type: Optional[pulumi.Input[builtins.float]] = None,
                 isp: Optional[pulumi.Input[builtins.str]] = None,
                 security_protection_instance_id: Optional[pulumi.Input[builtins.float]] = None,
                 security_protection_types: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        :param pulumi.Input[builtins.float] bandwidth: 带宽峰值
        :param pulumi.Input[builtins.str] bandwidth_package_id: 共享带宽包ID
        :param pulumi.Input[builtins.float] eip_billing_type: 计费方式
        :param pulumi.Input[builtins.str] isp: 线路类型
        :param pulumi.Input[builtins.float] security_protection_instance_id: 防护包ID
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] security_protection_types: 安全防护类型
        """
        if bandwidth is not None:
            pulumi.set(__self__, "bandwidth", bandwidth)
        if bandwidth_package_id is not None:
            pulumi.set(__self__, "bandwidth_package_id", bandwidth_package_id)
        if eip_billing_type is not None:
            pulumi.set(__self__, "eip_billing_type", eip_billing_type)
        if isp is not None:
            pulumi.set(__self__, "isp", isp)
        if security_protection_instance_id is not None:
            pulumi.set(__self__, "security_protection_instance_id", security_protection_instance_id)
        if security_protection_types is not None:
            pulumi.set(__self__, "security_protection_types", security_protection_types)

    @property
    @pulumi.getter
    def bandwidth(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        带宽峰值
        """
        return pulumi.get(self, "bandwidth")

    @bandwidth.setter
    def bandwidth(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "bandwidth", value)

    @property
    @pulumi.getter(name="bandwidthPackageId")
    def bandwidth_package_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        共享带宽包ID
        """
        return pulumi.get(self, "bandwidth_package_id")

    @bandwidth_package_id.setter
    def bandwidth_package_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bandwidth_package_id", value)

    @property
    @pulumi.getter(name="eipBillingType")
    def eip_billing_type(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        计费方式
        """
        return pulumi.get(self, "eip_billing_type")

    @eip_billing_type.setter
    def eip_billing_type(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "eip_billing_type", value)

    @property
    @pulumi.getter
    def isp(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        线路类型
        """
        return pulumi.get(self, "isp")

    @isp.setter
    def isp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "isp", value)

    @property
    @pulumi.getter(name="securityProtectionInstanceId")
    def security_protection_instance_id(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        防护包ID
        """
        return pulumi.get(self, "security_protection_instance_id")

    @security_protection_instance_id.setter
    def security_protection_instance_id(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "security_protection_instance_id", value)

    @property
    @pulumi.getter(name="securityProtectionTypes")
    def security_protection_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        安全防护类型
        """
        return pulumi.get(self, "security_protection_types")

    @security_protection_types.setter
    def security_protection_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "security_protection_types", value)


if not MYPY:
    class ClbEniArgsDict(TypedDict):
        eni_address: NotRequired[pulumi.Input[builtins.str]]
        """
        负载均衡实例的私网IP地址
        """
        eni_id: NotRequired[pulumi.Input[builtins.str]]
        """
        负载均衡实例占用的网卡ID
        """
elif False:
    ClbEniArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbEniArgs:
    def __init__(__self__, *,
                 eni_address: Optional[pulumi.Input[builtins.str]] = None,
                 eni_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] eni_address: 负载均衡实例的私网IP地址
        :param pulumi.Input[builtins.str] eni_id: 负载均衡实例占用的网卡ID
        """
        if eni_address is not None:
            pulumi.set(__self__, "eni_address", eni_address)
        if eni_id is not None:
            pulumi.set(__self__, "eni_id", eni_id)

    @property
    @pulumi.getter(name="eniAddress")
    def eni_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        负载均衡实例的私网IP地址
        """
        return pulumi.get(self, "eni_address")

    @eni_address.setter
    def eni_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_address", value)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        负载均衡实例占用的网卡ID
        """
        return pulumi.get(self, "eni_id")

    @eni_id.setter
    def eni_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_id", value)


if not MYPY:
    class ClbEnisArgsDict(TypedDict):
        eni_address: NotRequired[pulumi.Input[builtins.str]]
        """
        负载均衡实例的私网IP地址
        """
        eni_id: NotRequired[pulumi.Input[builtins.str]]
        """
        负载均衡实例占用的网卡ID
        """
elif False:
    ClbEnisArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbEnisArgs:
    def __init__(__self__, *,
                 eni_address: Optional[pulumi.Input[builtins.str]] = None,
                 eni_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] eni_address: 负载均衡实例的私网IP地址
        :param pulumi.Input[builtins.str] eni_id: 负载均衡实例占用的网卡ID
        """
        if eni_address is not None:
            pulumi.set(__self__, "eni_address", eni_address)
        if eni_id is not None:
            pulumi.set(__self__, "eni_id", eni_id)

    @property
    @pulumi.getter(name="eniAddress")
    def eni_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        负载均衡实例的私网IP地址
        """
        return pulumi.get(self, "eni_address")

    @eni_address.setter
    def eni_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_address", value)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        负载均衡实例占用的网卡ID
        """
        return pulumi.get(self, "eni_id")

    @eni_id.setter
    def eni_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_id", value)


if not MYPY:
    class ClbListenerArgsDict(TypedDict):
        listener_id: NotRequired[pulumi.Input[builtins.str]]
        """
        监听器的ID
        """
        listener_name: NotRequired[pulumi.Input[builtins.str]]
        """
        监听器的名称
        """
elif False:
    ClbListenerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbListenerArgs:
    def __init__(__self__, *,
                 listener_id: Optional[pulumi.Input[builtins.str]] = None,
                 listener_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] listener_id: 监听器的ID
        :param pulumi.Input[builtins.str] listener_name: 监听器的名称
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)
        if listener_name is not None:
            pulumi.set(__self__, "listener_name", listener_name)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        监听器的ID
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "listener_id", value)

    @property
    @pulumi.getter(name="listenerName")
    def listener_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        监听器的名称
        """
        return pulumi.get(self, "listener_name")

    @listener_name.setter
    def listener_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "listener_name", value)


if not MYPY:
    class ClbServerGroupArgsDict(TypedDict):
        server_group_id: NotRequired[pulumi.Input[builtins.str]]
        """
        负载均衡实例中后端服务器组的ID
        """
        server_group_name: NotRequired[pulumi.Input[builtins.str]]
        """
        负载均衡实例中后端服务器组的名称
        """
elif False:
    ClbServerGroupArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbServerGroupArgs:
    def __init__(__self__, *,
                 server_group_id: Optional[pulumi.Input[builtins.str]] = None,
                 server_group_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] server_group_id: 负载均衡实例中后端服务器组的ID
        :param pulumi.Input[builtins.str] server_group_name: 负载均衡实例中后端服务器组的名称
        """
        if server_group_id is not None:
            pulumi.set(__self__, "server_group_id", server_group_id)
        if server_group_name is not None:
            pulumi.set(__self__, "server_group_name", server_group_name)

    @property
    @pulumi.getter(name="serverGroupId")
    def server_group_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        负载均衡实例中后端服务器组的ID
        """
        return pulumi.get(self, "server_group_id")

    @server_group_id.setter
    def server_group_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_group_id", value)

    @property
    @pulumi.getter(name="serverGroupName")
    def server_group_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        负载均衡实例中后端服务器组的名称
        """
        return pulumi.get(self, "server_group_name")

    @server_group_name.setter
    def server_group_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_group_name", value)


if not MYPY:
    class ClbTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值
        """
elif False:
    ClbTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ClbTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键
        :param pulumi.Input[builtins.str] value: 标签值
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NlbListenerHealthArgsDict(TypedDict):
        instance_id: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的实例 ID或IP地址。
        """
        ip: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的IP地址。
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        后端服务器提供服务的端口。
        """
        server_id: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器ID。
        """
        server_type: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
        """
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
        """
        updated_time: NotRequired[pulumi.Input[builtins.str]]
        """
        健康状态最后更新时间。
        """
        zone_id: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器接收访问流量的可用区ID。
        """
elif False:
    NlbListenerHealthArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbListenerHealthArgs:
    def __init__(__self__, *,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 server_id: Optional[pulumi.Input[builtins.str]] = None,
                 server_type: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 updated_time: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] instance_id: 后端服务器的实例 ID或IP地址。
        :param pulumi.Input[builtins.str] ip: 后端服务器的IP地址。
        :param pulumi.Input[builtins.int] port: 后端服务器提供服务的端口。
        :param pulumi.Input[builtins.str] server_id: 后端服务器ID。
        :param pulumi.Input[builtins.str] server_type: 后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
        :param pulumi.Input[builtins.str] status: 后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
        :param pulumi.Input[builtins.str] updated_time: 健康状态最后更新时间。
        :param pulumi.Input[builtins.str] zone_id: 后端服务器接收访问流量的可用区ID。
        """
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if server_type is not None:
            pulumi.set(__self__, "server_type", server_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if updated_time is not None:
            pulumi.set(__self__, "updated_time", updated_time)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的实例 ID或IP地址。
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的IP地址。
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        后端服务器提供服务的端口。
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器ID。
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter(name="serverType")
    def server_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的类型。ecs：云服务器实例（即主网卡）；eni：辅助网卡；ip：IP地址
        """
        return pulumi.get(self, "server_type")

    @server_type.setter
    def server_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的健康状态。Up：正常；Down：异常；Unused：未被使用（NLB实例已关闭跨可用区转发，且没有来自该后端服务器可用区的访问流量）。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="updatedTime")
    def updated_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        健康状态最后更新时间。
        """
        return pulumi.get(self, "updated_time")

    @updated_time.setter
    def updated_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "updated_time", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器接收访问流量的可用区ID。
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


if not MYPY:
    class NlbListenerTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    NlbListenerTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbListenerTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NlbServerGroupHealthCheckArgsDict(TypedDict):
        domain: NotRequired[pulumi.Input[builtins.str]]
        """
        健康检查的域名
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否开启健康检查
        """
        healthy_threshold: NotRequired[pulumi.Input[builtins.int]]
        """
        健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
        """
        http_code: NotRequired[pulumi.Input[builtins.str]]
        """
        健康检查正常的HTTP状态码
        """
        interval: NotRequired[pulumi.Input[builtins.int]]
        """
        健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
        """
        method: NotRequired[pulumi.Input[builtins.str]]
        """
        健康检查的请求方法
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
        """
        timeout: NotRequired[pulumi.Input[builtins.int]]
        """
        健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        健康检查的协议类型
        """
        udp_expect: NotRequired[pulumi.Input[builtins.str]]
        """
        UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
        """
        udp_request: NotRequired[pulumi.Input[builtins.str]]
        """
        UDP健康检查的预期响应字符串
        """
        unhealthy_threshold: NotRequired[pulumi.Input[builtins.int]]
        """
        健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
        """
        uri: NotRequired[pulumi.Input[builtins.str]]
        """
        健康检查的路径
        """
elif False:
    NlbServerGroupHealthCheckArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbServerGroupHealthCheckArgs:
    def __init__(__self__, *,
                 domain: Optional[pulumi.Input[builtins.str]] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 healthy_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 http_code: Optional[pulumi.Input[builtins.str]] = None,
                 interval: Optional[pulumi.Input[builtins.int]] = None,
                 method: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 timeout: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 udp_expect: Optional[pulumi.Input[builtins.str]] = None,
                 udp_request: Optional[pulumi.Input[builtins.str]] = None,
                 unhealthy_threshold: Optional[pulumi.Input[builtins.int]] = None,
                 uri: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] domain: 健康检查的域名
        :param pulumi.Input[builtins.bool] enabled: 是否开启健康检查
        :param pulumi.Input[builtins.int] healthy_threshold: 健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
        :param pulumi.Input[builtins.str] http_code: 健康检查正常的HTTP状态码
        :param pulumi.Input[builtins.int] interval: 健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
        :param pulumi.Input[builtins.str] method: 健康检查的请求方法
        :param pulumi.Input[builtins.int] port: 健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
        :param pulumi.Input[builtins.int] timeout: 健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
        :param pulumi.Input[builtins.str] type: 健康检查的协议类型
        :param pulumi.Input[builtins.str] udp_expect: UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
        :param pulumi.Input[builtins.str] udp_request: UDP健康检查的预期响应字符串
        :param pulumi.Input[builtins.int] unhealthy_threshold: 健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
        :param pulumi.Input[builtins.str] uri: 健康检查的路径
        """
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_code is not None:
            pulumi.set(__self__, "http_code", http_code)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if udp_expect is not None:
            pulumi.set(__self__, "udp_expect", udp_expect)
        if udp_request is not None:
            pulumi.set(__self__, "udp_request", udp_request)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        健康检查的域名
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启健康检查
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        健康检查的健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“正常”的后端服务器将被判定为健康检查“正常”。
        """
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        健康检查正常的HTTP状态码
        """
        return pulumi.get(self, "http_code")

    @http_code.setter
    def http_code(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "http_code", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        健康检查的时间间隔，取值范围为1 ～ 300秒，默认值为10秒。
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        健康检查的请求方法
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        健康检查的端口，取值范围 1～65535。服务器组未开启全端口转发时，该参数默认为0，表示使用后端服务器的端口进行健康检查。服务器组开启全端口转发时，必须指定该参数。
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        健康检查的响应超时时间，取值范围为1 ～ 60秒，默认值为3秒。如果后端服务器在指定时间内没有正确响应，则判定为健康检查“异常”。
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        健康检查的协议类型
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="udpExpect")
    def udp_expect(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UDP健康检查的请求字符串。只允许包含字母和数字，最大长度限制为64个字符。
        """
        return pulumi.get(self, "udp_expect")

    @udp_expect.setter
    def udp_expect(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "udp_expect", value)

    @property
    @pulumi.getter(name="udpRequest")
    def udp_request(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        UDP健康检查的预期响应字符串
        """
        return pulumi.get(self, "udp_request")

    @udp_request.setter
    def udp_request(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "udp_request", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        健康检查的不健康阈值，取值范围为2 ～ 10次，默认值为3次。连续执行指定次数的健康检查，结果均为“异常”的后端服务器将被判定为健康检查异常。
        """
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "unhealthy_threshold", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        健康检查的路径
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class NlbServerGroupServerArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的描述，默认值为空字符串
        """
        instance_id: NotRequired[pulumi.Input[builtins.str]]
        """
        服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
        """
        ip: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
        """
        server_id: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器 ID
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的类型
        """
        weight: NotRequired[pulumi.Input[builtins.int]]
        """
        后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
        """
        zone_id: NotRequired[pulumi.Input[builtins.str]]
        """
        指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
        """
elif False:
    NlbServerGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbServerGroupServerArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 server_id: Optional[pulumi.Input[builtins.str]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 weight: Optional[pulumi.Input[builtins.int]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] description: 后端服务器的描述，默认值为空字符串
        :param pulumi.Input[builtins.str] instance_id: 服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
        :param pulumi.Input[builtins.str] ip: 后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
        :param pulumi.Input[builtins.int] port: 后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
        :param pulumi.Input[builtins.str] server_id: 后端服务器 ID
        :param pulumi.Input[builtins.str] type: 后端服务器的类型
        :param pulumi.Input[builtins.int] weight: 后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
        :param pulumi.Input[builtins.str] zone_id: 指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_id is not None:
            pulumi.set(__self__, "server_id", server_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的描述，默认值为空字符串
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器实例的ID或IP地址。服务器类型为“ecs”时，传入云服务器实例的ID。您可以调用DescribeInstances接口云服务器实例ID。服务器类型为“eni”时，传入已绑定云服务器实例的网卡ID。您可以调用DescribeNetworkInterfaces接口获取网卡ID。服务器类型为“ip”时，传入后端服务器的IP地址。
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的私网IP地址。您可以调用DescribeInstances接口获取“ecs”类型后端服务器的私网IP地址。您可以调用DescribeNetworkInterfaces接口获取“eni”类型后端服务器的私网IP地址。
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        后端服务器接收请求的端口号，取值范围为 1～65535。参数AnyPortEnabled为“false”，即服务器组未开启全端口转发时，该参数为必填。参数AnyPortEnabled为“true”，即服务器组开启全端口转发时，该参数默认为0。
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="serverId")
    def server_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器 ID
        """
        return pulumi.get(self, "server_id")

    @server_id.setter
    def server_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "server_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的类型
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        后端服务器的权重，取值范围为0 ～ 100。权重为0，表示不会将请求转发给该服务器。该参数不传入，则默认为0
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        指定后端服务器关联的NLB实例可用区。当参数Servers.N.Type为ip时，此参数必填。NLB实例开启跨可用区转发功能时，该后端服务器可以接收来自NLB实例所有可用区的流量。NLB实例关闭跨可用区转发功能时，则该后端服务器仅接收来自指定可用区的流量。
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


if not MYPY:
    class NlbServerGroupTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值
        """
elif False:
    NlbServerGroupTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbServerGroupTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键
        :param pulumi.Input[builtins.str] value: 标签值
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NlbTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    NlbTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class NlbZoneMappingArgsDict(TypedDict):
        eni_id: NotRequired[pulumi.Input[builtins.str]]
        """
        网卡ID。
        """
        ipv4_address: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
        """
        ipv4_eip_address: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例的公网IPv4 EIP地址。
        """
        ipv4_eip_id: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例的公网IPv4 EIP ID。
        """
        ipv4_hc_status: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
        """
        ipv4_local_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        NLB实例的私网IPv4 LIP地址。
        """
        ipv6_address: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例的私网IPv6 VIP地址。
        """
        ipv6_eip_id: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例关联的IPv6公网带宽的ID。
        """
        ipv6_hc_status: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
        """
        ipv6_local_addresses: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        """
        NLB实例的私网IPv6 LIP地址。
        """
        subnet_id: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例所属的子网ID。
        """
        zone_id: NotRequired[pulumi.Input[builtins.str]]
        """
        NLB实例所属的可用区ID。
        """
elif False:
    NlbZoneMappingArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class NlbZoneMappingArgs:
    def __init__(__self__, *,
                 eni_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv4_address: Optional[pulumi.Input[builtins.str]] = None,
                 ipv4_eip_address: Optional[pulumi.Input[builtins.str]] = None,
                 ipv4_eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv4_hc_status: Optional[pulumi.Input[builtins.str]] = None,
                 ipv4_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 ipv6_address: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_eip_id: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_hc_status: Optional[pulumi.Input[builtins.str]] = None,
                 ipv6_local_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 subnet_id: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] eni_id: 网卡ID。
        :param pulumi.Input[builtins.str] ipv4_address: NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
        :param pulumi.Input[builtins.str] ipv4_eip_address: NLB实例的公网IPv4 EIP地址。
        :param pulumi.Input[builtins.str] ipv4_eip_id: NLB实例的公网IPv4 EIP ID。
        :param pulumi.Input[builtins.str] ipv4_hc_status: NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ipv4_local_addresses: NLB实例的私网IPv4 LIP地址。
        :param pulumi.Input[builtins.str] ipv6_address: NLB实例的私网IPv6 VIP地址。
        :param pulumi.Input[builtins.str] ipv6_eip_id: NLB实例关联的IPv6公网带宽的ID。
        :param pulumi.Input[builtins.str] ipv6_hc_status: NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] ipv6_local_addresses: NLB实例的私网IPv6 LIP地址。
        :param pulumi.Input[builtins.str] subnet_id: NLB实例所属的子网ID。
        :param pulumi.Input[builtins.str] zone_id: NLB实例所属的可用区ID。
        """
        if eni_id is not None:
            pulumi.set(__self__, "eni_id", eni_id)
        if ipv4_address is not None:
            pulumi.set(__self__, "ipv4_address", ipv4_address)
        if ipv4_eip_address is not None:
            pulumi.set(__self__, "ipv4_eip_address", ipv4_eip_address)
        if ipv4_eip_id is not None:
            pulumi.set(__self__, "ipv4_eip_id", ipv4_eip_id)
        if ipv4_hc_status is not None:
            pulumi.set(__self__, "ipv4_hc_status", ipv4_hc_status)
        if ipv4_local_addresses is not None:
            pulumi.set(__self__, "ipv4_local_addresses", ipv4_local_addresses)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_eip_id is not None:
            pulumi.set(__self__, "ipv6_eip_id", ipv6_eip_id)
        if ipv6_hc_status is not None:
            pulumi.set(__self__, "ipv6_hc_status", ipv6_hc_status)
        if ipv6_local_addresses is not None:
            pulumi.set(__self__, "ipv6_local_addresses", ipv6_local_addresses)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="eniId")
    def eni_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        网卡ID。
        """
        return pulumi.get(self, "eni_id")

    @eni_id.setter
    def eni_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "eni_id", value)

    @property
    @pulumi.getter(name="ipv4Address")
    def ipv4_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例的私网IPv4 VIP地址。该参数不传入，则系统自动从子网中分配一个可用的IPv4地址。
        """
        return pulumi.get(self, "ipv4_address")

    @ipv4_address.setter
    def ipv4_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_address", value)

    @property
    @pulumi.getter(name="ipv4EipAddress")
    def ipv4_eip_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例的公网IPv4 EIP地址。
        """
        return pulumi.get(self, "ipv4_eip_address")

    @ipv4_eip_address.setter
    def ipv4_eip_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_eip_address", value)

    @property
    @pulumi.getter(name="ipv4EipId")
    def ipv4_eip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例的公网IPv4 EIP ID。
        """
        return pulumi.get(self, "ipv4_eip_id")

    @ipv4_eip_id.setter
    def ipv4_eip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_eip_id", value)

    @property
    @pulumi.getter(name="ipv4HcStatus")
    def ipv4_hc_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例私网IPv4地址的健康状态。Healthy：健康。Unhealthy：异常。
        """
        return pulumi.get(self, "ipv4_hc_status")

    @ipv4_hc_status.setter
    def ipv4_hc_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv4_hc_status", value)

    @property
    @pulumi.getter(name="ipv4LocalAddresses")
    def ipv4_local_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        NLB实例的私网IPv4 LIP地址。
        """
        return pulumi.get(self, "ipv4_local_addresses")

    @ipv4_local_addresses.setter
    def ipv4_local_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ipv4_local_addresses", value)

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例的私网IPv6 VIP地址。
        """
        return pulumi.get(self, "ipv6_address")

    @ipv6_address.setter
    def ipv6_address(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_address", value)

    @property
    @pulumi.getter(name="ipv6EipId")
    def ipv6_eip_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例关联的IPv6公网带宽的ID。
        """
        return pulumi.get(self, "ipv6_eip_id")

    @ipv6_eip_id.setter
    def ipv6_eip_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_eip_id", value)

    @property
    @pulumi.getter(name="ipv6HcStatus")
    def ipv6_hc_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例私网IPv6地址的健康状态。Healthy：健康。Unhealthy：异常。
        """
        return pulumi.get(self, "ipv6_hc_status")

    @ipv6_hc_status.setter
    def ipv6_hc_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ipv6_hc_status", value)

    @property
    @pulumi.getter(name="ipv6LocalAddresses")
    def ipv6_local_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        NLB实例的私网IPv6 LIP地址。
        """
        return pulumi.get(self, "ipv6_local_addresses")

    @ipv6_local_addresses.setter
    def ipv6_local_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "ipv6_local_addresses", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例所属的子网ID。
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        NLB实例所属的可用区ID。
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)


if not MYPY:
    class ServerGroupListenerArgsDict(TypedDict):
        listener_id: NotRequired[pulumi.Input[builtins.str]]
        """
        监听器的ID。
        """
elif False:
    ServerGroupListenerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupListenerArgs:
    def __init__(__self__, *,
                 listener_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] listener_id: 监听器的ID。
        """
        if listener_id is not None:
            pulumi.set(__self__, "listener_id", listener_id)

    @property
    @pulumi.getter(name="listenerId")
    def listener_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        监听器的ID。
        """
        return pulumi.get(self, "listener_id")

    @listener_id.setter
    def listener_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "listener_id", value)


if not MYPY:
    class ServerGroupServerArgsDict(TypedDict):
        description: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
        """
        instance_id: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
        """
        ip: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
        """
        port: NotRequired[pulumi.Input[builtins.int]]
        """
        后端服务器接收请求的端口号。取值范围为1～65535。
        """
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
        """
        weight: NotRequired[pulumi.Input[builtins.int]]
        """
        后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
        """
elif False:
    ServerGroupServerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupServerArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 instance_id: Optional[pulumi.Input[builtins.str]] = None,
                 ip: Optional[pulumi.Input[builtins.str]] = None,
                 port: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 weight: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] description: 后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
        :param pulumi.Input[builtins.str] instance_id: 后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
        :param pulumi.Input[builtins.str] ip: 后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
        :param pulumi.Input[builtins.int] port: 后端服务器接收请求的端口号。取值范围为1～65535。
        :param pulumi.Input[builtins.str] type: 后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
        :param pulumi.Input[builtins.int] weight: 后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if ip is not None:
            pulumi.set(__self__, "ip", ip)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255字符。不填则默认为空字符串。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器。取值情况如下：当 Type 取ecs时，传云服务器实例的ID。当Type 取eni时，传已挂载至云服务器的辅助网卡的ID。当 Type 取ip时，传IP地址作为后端服务器。
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "instance_id", value)

    @property
    @pulumi.getter
    def ip(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器的私网IP地址。多个后端服务器IP之间使用“&”分隔。
        """
        return pulumi.get(self, "ip")

    @ip.setter
    def ip(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "ip", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        后端服务器接收请求的端口号。取值范围为1～65535。
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        后端服务器实例类型。当参数Type取instance时，取值如下：ecs：云服务器实例。eni：网卡。当参数Type取ip时，本参数取值为ip。
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        后端服务器的权重，取值范围为0 ～ 100。不填则默认为0。0表示不会将请求转发给该后端服务器。
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class ServerGroupTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        value: NotRequired[pulumi.Input[builtins.str]]
elif False:
    ServerGroupTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ServerGroupTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


