# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAddonResult',
    'AwaitableGetAddonResult',
    'get_addon',
    'get_addon_output',
]

@pulumi.output_type
class GetAddonResult:
    """
    A collection of values returned by getAddon.
    """
    def __init__(__self__, cluster_id=None, config=None, create_time=None, deploy_mode=None, deploy_node_type=None, id=None, name=None, status=None, update_time=None, version=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if deploy_mode and not isinstance(deploy_mode, str):
            raise TypeError("Expected argument 'deploy_mode' to be a str")
        pulumi.set(__self__, "deploy_mode", deploy_mode)
        if deploy_node_type and not isinstance(deploy_node_type, str):
            raise TypeError("Expected argument 'deploy_node_type' to be a str")
        pulumi.set(__self__, "deploy_node_type", deploy_node_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, dict):
            raise TypeError("Expected argument 'status' to be a dict")
        pulumi.set(__self__, "status", status)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> builtins.str:
        """
        组件所在集群 ID。
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def config(self) -> builtins.str:
        """
        组件配置。
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.str:
        """
        安装组件的时间。标准 RFC3339 格式的 UTC+0 时间。
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deployMode")
    def deploy_mode(self) -> builtins.str:
        """
        组件部署模式，取值：Unmanaged：非托管模式部署。Managed：托管模式部署。
        """
        return pulumi.get(self, "deploy_mode")

    @property
    @pulumi.getter(name="deployNodeType")
    def deploy_node_type(self) -> builtins.str:
        """
        部署节点的类型。仅DeployModes=Unmanaged时，才需要指定该参数。取值：Node：以节点方式部署。VirtualNode：以虚拟节点方式部署。
        """
        return pulumi.get(self, "deploy_node_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        组件名称。
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> 'outputs.GetAddonStatusResult':
        """
        组件状态。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> builtins.str:
        """
        更新组件的时间。标准 RFC3339 格式的 UTC+0 时间。
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter
    def version(self) -> builtins.str:
        """
        组件版本。
        """
        return pulumi.get(self, "version")


class AwaitableGetAddonResult(GetAddonResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAddonResult(
            cluster_id=self.cluster_id,
            config=self.config,
            create_time=self.create_time,
            deploy_mode=self.deploy_mode,
            deploy_node_type=self.deploy_node_type,
            id=self.id,
            name=self.name,
            status=self.status,
            update_time=self.update_time,
            version=self.version)


def get_addon(id: Optional[builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAddonResult:
    """
    Data Source schema for Volcengine::VKE::Addon


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:vke/getAddon:getAddon', __args__, opts=opts, typ=GetAddonResult).value

    return AwaitableGetAddonResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        config=pulumi.get(__ret__, 'config'),
        create_time=pulumi.get(__ret__, 'create_time'),
        deploy_mode=pulumi.get(__ret__, 'deploy_mode'),
        deploy_node_type=pulumi.get(__ret__, 'deploy_node_type'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        update_time=pulumi.get(__ret__, 'update_time'),
        version=pulumi.get(__ret__, 'version'))
def get_addon_output(id: Optional[pulumi.Input[builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAddonResult]:
    """
    Data Source schema for Volcengine::VKE::Addon


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:vke/getAddon:getAddon', __args__, opts=opts, typ=GetAddonResult)
    return __ret__.apply(lambda __response__: GetAddonResult(
        cluster_id=pulumi.get(__response__, 'cluster_id'),
        config=pulumi.get(__response__, 'config'),
        create_time=pulumi.get(__response__, 'create_time'),
        deploy_mode=pulumi.get(__response__, 'deploy_mode'),
        deploy_node_type=pulumi.get(__response__, 'deploy_node_type'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        update_time=pulumi.get(__response__, 'update_time'),
        version=pulumi.get(__response__, 'version')))
