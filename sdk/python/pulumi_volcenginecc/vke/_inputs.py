# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AddonStatusArgs',
    'AddonStatusArgsDict',
    'AddonStatusConditionArgs',
    'AddonStatusConditionArgsDict',
]

MYPY = False

if not MYPY:
    class AddonStatusArgsDict(TypedDict):
        conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['AddonStatusConditionArgsDict']]]]
        phase: NotRequired[pulumi.Input[builtins.str]]
        """
        组件的状态，参数值有：Running, Failed, Creating, Deleting, Updating
        """
elif False:
    AddonStatusArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddonStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['AddonStatusConditionArgs']]]] = None,
                 phase: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] phase: 组件的状态，参数值有：Running, Failed, Creating, Deleting, Updating
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if phase is not None:
            pulumi.set(__self__, "phase", phase)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AddonStatusConditionArgs']]]]:
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AddonStatusConditionArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter
    def phase(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        组件的状态，参数值有：Running, Failed, Creating, Deleting, Updating
        """
        return pulumi.get(self, "phase")

    @phase.setter
    def phase(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "phase", value)


if not MYPY:
    class AddonStatusConditionArgsDict(TypedDict):
        type: NotRequired[pulumi.Input[builtins.str]]
        """
        组件当前主状态下的状态条件，即进入该主状态的原因，可以有多个原因，参数值有：Progressing, ClusterVersionUpgrading, Unknown, Degraded, NameConflict, ClusterNotRunning, CrashLoopBackOff, SchedulingFailed, ResourceCleanupFailed
        """
elif False:
    AddonStatusConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AddonStatusConditionArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] type: 组件当前主状态下的状态条件，即进入该主状态的原因，可以有多个原因，参数值有：Progressing, ClusterVersionUpgrading, Unknown, Degraded, NameConflict, ClusterNotRunning, CrashLoopBackOff, SchedulingFailed, ResourceCleanupFailed
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        组件当前主状态下的状态条件，即进入该主状态的原因，可以有多个原因，参数值有：Progressing, ClusterVersionUpgrading, Unknown, Degraded, NameConflict, ClusterNotRunning, CrashLoopBackOff, SchedulingFailed, ResourceCleanupFailed
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)


