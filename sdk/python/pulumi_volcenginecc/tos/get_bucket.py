# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetBucketResult',
    'AwaitableGetBucketResult',
    'get_bucket',
    'get_bucket_output',
]

@pulumi.output_type
class GetBucketResult:
    """
    A collection of values returned by getBucket.
    """
    def __init__(__self__, acl=None, acl_grant=None, az_redundancy=None, bucket_type=None, creation_date=None, enable_version_status=None, extranet_endpoint=None, id=None, intranet_endpoint=None, lifecycle_configs=None, location=None, name=None, project_name=None, storage_class=None, tags=None):
        if acl and not isinstance(acl, dict):
            raise TypeError("Expected argument 'acl' to be a dict")
        pulumi.set(__self__, "acl", acl)
        if acl_grant and not isinstance(acl_grant, dict):
            raise TypeError("Expected argument 'acl_grant' to be a dict")
        pulumi.set(__self__, "acl_grant", acl_grant)
        if az_redundancy and not isinstance(az_redundancy, str):
            raise TypeError("Expected argument 'az_redundancy' to be a str")
        pulumi.set(__self__, "az_redundancy", az_redundancy)
        if bucket_type and not isinstance(bucket_type, str):
            raise TypeError("Expected argument 'bucket_type' to be a str")
        pulumi.set(__self__, "bucket_type", bucket_type)
        if creation_date and not isinstance(creation_date, str):
            raise TypeError("Expected argument 'creation_date' to be a str")
        pulumi.set(__self__, "creation_date", creation_date)
        if enable_version_status and not isinstance(enable_version_status, str):
            raise TypeError("Expected argument 'enable_version_status' to be a str")
        pulumi.set(__self__, "enable_version_status", enable_version_status)
        if extranet_endpoint and not isinstance(extranet_endpoint, str):
            raise TypeError("Expected argument 'extranet_endpoint' to be a str")
        pulumi.set(__self__, "extranet_endpoint", extranet_endpoint)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if intranet_endpoint and not isinstance(intranet_endpoint, str):
            raise TypeError("Expected argument 'intranet_endpoint' to be a str")
        pulumi.set(__self__, "intranet_endpoint", intranet_endpoint)
        if lifecycle_configs and not isinstance(lifecycle_configs, list):
            raise TypeError("Expected argument 'lifecycle_configs' to be a list")
        pulumi.set(__self__, "lifecycle_configs", lifecycle_configs)
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        pulumi.set(__self__, "location", location)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if storage_class and not isinstance(storage_class, str):
            raise TypeError("Expected argument 'storage_class' to be a str")
        pulumi.set(__self__, "storage_class", storage_class)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def acl(self) -> 'outputs.GetBucketAclResult':
        """
        桶的访问控制权限。
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclGrant")
    def acl_grant(self) -> 'outputs.GetBucketAclGrantResult':
        return pulumi.get(self, "acl_grant")

    @property
    @pulumi.getter(name="azRedundancy")
    def az_redundancy(self) -> builtins.str:
        """
        桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        """
        return pulumi.get(self, "az_redundancy")

    @property
    @pulumi.getter(name="bucketType")
    def bucket_type(self) -> builtins.str:
        """
        桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        """
        return pulumi.get(self, "bucket_type")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> builtins.str:
        """
        桶的创建时间。
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="enableVersionStatus")
    def enable_version_status(self) -> builtins.str:
        """
        存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        """
        return pulumi.get(self, "enable_version_status")

    @property
    @pulumi.getter(name="extranetEndpoint")
    def extranet_endpoint(self) -> builtins.str:
        """
        存储桶的 TOS 协议公网访问域名。
        """
        return pulumi.get(self, "extranet_endpoint")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="intranetEndpoint")
    def intranet_endpoint(self) -> builtins.str:
        """
        存储桶的 TOS 协议私网访问域名
        """
        return pulumi.get(self, "intranet_endpoint")

    @property
    @pulumi.getter(name="lifecycleConfigs")
    def lifecycle_configs(self) -> Sequence['outputs.GetBucketLifecycleConfigResult']:
        """
        存储桶的声明周期。
        """
        return pulumi.get(self, "lifecycle_configs")

    @property
    @pulumi.getter
    def location(self) -> builtins.str:
        """
        桶所在区域。
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        桶名。
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        存储桶所属项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> builtins.str:
        """
        桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetBucketTagResult']:
        """
        存储桶的标签信息。
        """
        return pulumi.get(self, "tags")


class AwaitableGetBucketResult(GetBucketResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetBucketResult(
            acl=self.acl,
            acl_grant=self.acl_grant,
            az_redundancy=self.az_redundancy,
            bucket_type=self.bucket_type,
            creation_date=self.creation_date,
            enable_version_status=self.enable_version_status,
            extranet_endpoint=self.extranet_endpoint,
            id=self.id,
            intranet_endpoint=self.intranet_endpoint,
            lifecycle_configs=self.lifecycle_configs,
            location=self.location,
            name=self.name,
            project_name=self.project_name,
            storage_class=self.storage_class,
            tags=self.tags)


def get_bucket(id: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetBucketResult:
    """
    Data Source schema for Volcengine::TOS::Bucket


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:tos/getBucket:getBucket', __args__, opts=opts, typ=GetBucketResult).value

    return AwaitableGetBucketResult(
        acl=pulumi.get(__ret__, 'acl'),
        acl_grant=pulumi.get(__ret__, 'acl_grant'),
        az_redundancy=pulumi.get(__ret__, 'az_redundancy'),
        bucket_type=pulumi.get(__ret__, 'bucket_type'),
        creation_date=pulumi.get(__ret__, 'creation_date'),
        enable_version_status=pulumi.get(__ret__, 'enable_version_status'),
        extranet_endpoint=pulumi.get(__ret__, 'extranet_endpoint'),
        id=pulumi.get(__ret__, 'id'),
        intranet_endpoint=pulumi.get(__ret__, 'intranet_endpoint'),
        lifecycle_configs=pulumi.get(__ret__, 'lifecycle_configs'),
        location=pulumi.get(__ret__, 'location'),
        name=pulumi.get(__ret__, 'name'),
        project_name=pulumi.get(__ret__, 'project_name'),
        storage_class=pulumi.get(__ret__, 'storage_class'),
        tags=pulumi.get(__ret__, 'tags'))
def get_bucket_output(id: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetBucketResult]:
    """
    Data Source schema for Volcengine::TOS::Bucket


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:tos/getBucket:getBucket', __args__, opts=opts, typ=GetBucketResult)
    return __ret__.apply(lambda __response__: GetBucketResult(
        acl=pulumi.get(__response__, 'acl'),
        acl_grant=pulumi.get(__response__, 'acl_grant'),
        az_redundancy=pulumi.get(__response__, 'az_redundancy'),
        bucket_type=pulumi.get(__response__, 'bucket_type'),
        creation_date=pulumi.get(__response__, 'creation_date'),
        enable_version_status=pulumi.get(__response__, 'enable_version_status'),
        extranet_endpoint=pulumi.get(__response__, 'extranet_endpoint'),
        id=pulumi.get(__response__, 'id'),
        intranet_endpoint=pulumi.get(__response__, 'intranet_endpoint'),
        lifecycle_configs=pulumi.get(__response__, 'lifecycle_configs'),
        location=pulumi.get(__response__, 'location'),
        name=pulumi.get(__response__, 'name'),
        project_name=pulumi.get(__response__, 'project_name'),
        storage_class=pulumi.get(__response__, 'storage_class'),
        tags=pulumi.get(__response__, 'tags')))
