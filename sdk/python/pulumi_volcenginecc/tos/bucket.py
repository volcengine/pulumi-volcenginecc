# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['BucketArgs', 'Bucket']

@pulumi.input_type
class BucketArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[builtins.str],
                 acl: Optional[pulumi.Input['BucketAclArgs']] = None,
                 acl_grant: Optional[pulumi.Input['BucketAclGrantArgs']] = None,
                 az_redundancy: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_type: Optional[pulumi.Input[builtins.str]] = None,
                 enable_version_status: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigArgs']]]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagArgs']]]] = None):
        """
        The set of arguments for constructing a Bucket resource.
        :param pulumi.Input[builtins.str] name: 桶名。
        :param pulumi.Input['BucketAclArgs'] acl: 桶的访问控制权限。
        :param pulumi.Input[builtins.str] az_redundancy: 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        :param pulumi.Input[builtins.str] bucket_type: 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        :param pulumi.Input[builtins.str] enable_version_status: 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        :param pulumi.Input[builtins.str] project_name: 存储桶所属项目。
        :param pulumi.Input[builtins.str] storage_class: 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        pulumi.set(__self__, "name", name)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if acl_grant is not None:
            pulumi.set(__self__, "acl_grant", acl_grant)
        if az_redundancy is not None:
            pulumi.set(__self__, "az_redundancy", az_redundancy)
        if bucket_type is not None:
            pulumi.set(__self__, "bucket_type", bucket_type)
        if enable_version_status is not None:
            pulumi.set(__self__, "enable_version_status", enable_version_status)
        if lifecycle_configs is not None:
            pulumi.set(__self__, "lifecycle_configs", lifecycle_configs)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[builtins.str]:
        """
        桶名。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input['BucketAclArgs']]:
        """
        桶的访问控制权限。
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input['BucketAclArgs']]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="aclGrant")
    def acl_grant(self) -> Optional[pulumi.Input['BucketAclGrantArgs']]:
        return pulumi.get(self, "acl_grant")

    @acl_grant.setter
    def acl_grant(self, value: Optional[pulumi.Input['BucketAclGrantArgs']]):
        pulumi.set(self, "acl_grant", value)

    @property
    @pulumi.getter(name="azRedundancy")
    def az_redundancy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        """
        return pulumi.get(self, "az_redundancy")

    @az_redundancy.setter
    def az_redundancy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "az_redundancy", value)

    @property
    @pulumi.getter(name="bucketType")
    def bucket_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        """
        return pulumi.get(self, "bucket_type")

    @bucket_type.setter
    def bucket_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_type", value)

    @property
    @pulumi.getter(name="enableVersionStatus")
    def enable_version_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        """
        return pulumi.get(self, "enable_version_status")

    @enable_version_status.setter
    def enable_version_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enable_version_status", value)

    @property
    @pulumi.getter(name="lifecycleConfigs")
    def lifecycle_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigArgs']]]]:
        return pulumi.get(self, "lifecycle_configs")

    @lifecycle_configs.setter
    def lifecycle_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigArgs']]]]):
        pulumi.set(self, "lifecycle_configs", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储桶所属项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _BucketState:
    def __init__(__self__, *,
                 acl: Optional[pulumi.Input['BucketAclArgs']] = None,
                 acl_grant: Optional[pulumi.Input['BucketAclGrantArgs']] = None,
                 az_redundancy: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_type: Optional[pulumi.Input[builtins.str]] = None,
                 creation_date: Optional[pulumi.Input[builtins.str]] = None,
                 enable_version_status: Optional[pulumi.Input[builtins.str]] = None,
                 extranet_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 intranet_endpoint: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_configs: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigArgs']]]] = None,
                 location: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering Bucket resources.
        :param pulumi.Input['BucketAclArgs'] acl: 桶的访问控制权限。
        :param pulumi.Input[builtins.str] az_redundancy: 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        :param pulumi.Input[builtins.str] bucket_type: 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        :param pulumi.Input[builtins.str] creation_date: 桶的创建时间。
        :param pulumi.Input[builtins.str] enable_version_status: 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        :param pulumi.Input[builtins.str] extranet_endpoint: 存储桶的 TOS 协议公网访问域名。
        :param pulumi.Input[builtins.str] intranet_endpoint: 存储桶的 TOS 协议私网访问域名
        :param pulumi.Input[builtins.str] location: 桶所在区域。
        :param pulumi.Input[builtins.str] name: 桶名。
        :param pulumi.Input[builtins.str] project_name: 存储桶所属项目。
        :param pulumi.Input[builtins.str] storage_class: 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if acl_grant is not None:
            pulumi.set(__self__, "acl_grant", acl_grant)
        if az_redundancy is not None:
            pulumi.set(__self__, "az_redundancy", az_redundancy)
        if bucket_type is not None:
            pulumi.set(__self__, "bucket_type", bucket_type)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if enable_version_status is not None:
            pulumi.set(__self__, "enable_version_status", enable_version_status)
        if extranet_endpoint is not None:
            pulumi.set(__self__, "extranet_endpoint", extranet_endpoint)
        if intranet_endpoint is not None:
            pulumi.set(__self__, "intranet_endpoint", intranet_endpoint)
        if lifecycle_configs is not None:
            pulumi.set(__self__, "lifecycle_configs", lifecycle_configs)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input['BucketAclArgs']]:
        """
        桶的访问控制权限。
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input['BucketAclArgs']]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="aclGrant")
    def acl_grant(self) -> Optional[pulumi.Input['BucketAclGrantArgs']]:
        return pulumi.get(self, "acl_grant")

    @acl_grant.setter
    def acl_grant(self, value: Optional[pulumi.Input['BucketAclGrantArgs']]):
        pulumi.set(self, "acl_grant", value)

    @property
    @pulumi.getter(name="azRedundancy")
    def az_redundancy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        """
        return pulumi.get(self, "az_redundancy")

    @az_redundancy.setter
    def az_redundancy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "az_redundancy", value)

    @property
    @pulumi.getter(name="bucketType")
    def bucket_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        """
        return pulumi.get(self, "bucket_type")

    @bucket_type.setter
    def bucket_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "bucket_type", value)

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的创建时间。
        """
        return pulumi.get(self, "creation_date")

    @creation_date.setter
    def creation_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "creation_date", value)

    @property
    @pulumi.getter(name="enableVersionStatus")
    def enable_version_status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        """
        return pulumi.get(self, "enable_version_status")

    @enable_version_status.setter
    def enable_version_status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "enable_version_status", value)

    @property
    @pulumi.getter(name="extranetEndpoint")
    def extranet_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储桶的 TOS 协议公网访问域名。
        """
        return pulumi.get(self, "extranet_endpoint")

    @extranet_endpoint.setter
    def extranet_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "extranet_endpoint", value)

    @property
    @pulumi.getter(name="intranetEndpoint")
    def intranet_endpoint(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储桶的 TOS 协议私网访问域名
        """
        return pulumi.get(self, "intranet_endpoint")

    @intranet_endpoint.setter
    def intranet_endpoint(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "intranet_endpoint", value)

    @property
    @pulumi.getter(name="lifecycleConfigs")
    def lifecycle_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigArgs']]]]:
        return pulumi.get(self, "lifecycle_configs")

    @lifecycle_configs.setter
    def lifecycle_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigArgs']]]]):
        pulumi.set(self, "lifecycle_configs", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶所在区域。
        """
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶名。
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储桶所属项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_class", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("volcenginecc:tos/bucket:Bucket")
class Bucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[Union['BucketAclArgs', 'BucketAclArgsDict']]] = None,
                 acl_grant: Optional[pulumi.Input[Union['BucketAclGrantArgs', 'BucketAclGrantArgsDict']]] = None,
                 az_redundancy: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_type: Optional[pulumi.Input[builtins.str]] = None,
                 enable_version_status: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketLifecycleConfigArgs', 'BucketLifecycleConfigArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketTagArgs', 'BucketTagArgsDict']]]]] = None,
                 __props__=None):
        """
        存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。

        ## Import

        ```sh
        $ pulumi import volcenginecc:tos/bucket:Bucket example "name"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BucketAclArgs', 'BucketAclArgsDict']] acl: 桶的访问控制权限。
        :param pulumi.Input[builtins.str] az_redundancy: 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        :param pulumi.Input[builtins.str] bucket_type: 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        :param pulumi.Input[builtins.str] enable_version_status: 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        :param pulumi.Input[builtins.str] name: 桶名。
        :param pulumi.Input[builtins.str] project_name: 存储桶所属项目。
        :param pulumi.Input[builtins.str] storage_class: 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BucketArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。

        ## Import

        ```sh
        $ pulumi import volcenginecc:tos/bucket:Bucket example "name"
        ```

        :param str resource_name: The name of the resource.
        :param BucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[Union['BucketAclArgs', 'BucketAclArgsDict']]] = None,
                 acl_grant: Optional[pulumi.Input[Union['BucketAclGrantArgs', 'BucketAclGrantArgsDict']]] = None,
                 az_redundancy: Optional[pulumi.Input[builtins.str]] = None,
                 bucket_type: Optional[pulumi.Input[builtins.str]] = None,
                 enable_version_status: Optional[pulumi.Input[builtins.str]] = None,
                 lifecycle_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketLifecycleConfigArgs', 'BucketLifecycleConfigArgsDict']]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketTagArgs', 'BucketTagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BucketArgs.__new__(BucketArgs)

            __props__.__dict__["acl"] = acl
            __props__.__dict__["acl_grant"] = acl_grant
            __props__.__dict__["az_redundancy"] = az_redundancy
            __props__.__dict__["bucket_type"] = bucket_type
            __props__.__dict__["enable_version_status"] = enable_version_status
            __props__.__dict__["lifecycle_configs"] = lifecycle_configs
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["project_name"] = project_name
            __props__.__dict__["storage_class"] = storage_class
            __props__.__dict__["tags"] = tags
            __props__.__dict__["creation_date"] = None
            __props__.__dict__["extranet_endpoint"] = None
            __props__.__dict__["intranet_endpoint"] = None
            __props__.__dict__["location"] = None
        super(Bucket, __self__).__init__(
            'volcenginecc:tos/bucket:Bucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl: Optional[pulumi.Input[Union['BucketAclArgs', 'BucketAclArgsDict']]] = None,
            acl_grant: Optional[pulumi.Input[Union['BucketAclGrantArgs', 'BucketAclGrantArgsDict']]] = None,
            az_redundancy: Optional[pulumi.Input[builtins.str]] = None,
            bucket_type: Optional[pulumi.Input[builtins.str]] = None,
            creation_date: Optional[pulumi.Input[builtins.str]] = None,
            enable_version_status: Optional[pulumi.Input[builtins.str]] = None,
            extranet_endpoint: Optional[pulumi.Input[builtins.str]] = None,
            intranet_endpoint: Optional[pulumi.Input[builtins.str]] = None,
            lifecycle_configs: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketLifecycleConfigArgs', 'BucketLifecycleConfigArgsDict']]]]] = None,
            location: Optional[pulumi.Input[builtins.str]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            storage_class: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['BucketTagArgs', 'BucketTagArgsDict']]]]] = None) -> 'Bucket':
        """
        Get an existing Bucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['BucketAclArgs', 'BucketAclArgsDict']] acl: 桶的访问控制权限。
        :param pulumi.Input[builtins.str] az_redundancy: 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        :param pulumi.Input[builtins.str] bucket_type: 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        :param pulumi.Input[builtins.str] creation_date: 桶的创建时间。
        :param pulumi.Input[builtins.str] enable_version_status: 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        :param pulumi.Input[builtins.str] extranet_endpoint: 存储桶的 TOS 协议公网访问域名。
        :param pulumi.Input[builtins.str] intranet_endpoint: 存储桶的 TOS 协议私网访问域名
        :param pulumi.Input[builtins.str] location: 桶所在区域。
        :param pulumi.Input[builtins.str] name: 桶名。
        :param pulumi.Input[builtins.str] project_name: 存储桶所属项目。
        :param pulumi.Input[builtins.str] storage_class: 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BucketState.__new__(_BucketState)

        __props__.__dict__["acl"] = acl
        __props__.__dict__["acl_grant"] = acl_grant
        __props__.__dict__["az_redundancy"] = az_redundancy
        __props__.__dict__["bucket_type"] = bucket_type
        __props__.__dict__["creation_date"] = creation_date
        __props__.__dict__["enable_version_status"] = enable_version_status
        __props__.__dict__["extranet_endpoint"] = extranet_endpoint
        __props__.__dict__["intranet_endpoint"] = intranet_endpoint
        __props__.__dict__["lifecycle_configs"] = lifecycle_configs
        __props__.__dict__["location"] = location
        __props__.__dict__["name"] = name
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["storage_class"] = storage_class
        __props__.__dict__["tags"] = tags
        return Bucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output['outputs.BucketAcl']:
        """
        桶的访问控制权限。
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="aclGrant")
    def acl_grant(self) -> pulumi.Output['outputs.BucketAclGrant']:
        return pulumi.get(self, "acl_grant")

    @property
    @pulumi.getter(name="azRedundancy")
    def az_redundancy(self) -> pulumi.Output[builtins.str]:
        """
        桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        """
        return pulumi.get(self, "az_redundancy")

    @property
    @pulumi.getter(name="bucketType")
    def bucket_type(self) -> pulumi.Output[builtins.str]:
        """
        桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        """
        return pulumi.get(self, "bucket_type")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> pulumi.Output[builtins.str]:
        """
        桶的创建时间。
        """
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="enableVersionStatus")
    def enable_version_status(self) -> pulumi.Output[builtins.str]:
        """
        存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        """
        return pulumi.get(self, "enable_version_status")

    @property
    @pulumi.getter(name="extranetEndpoint")
    def extranet_endpoint(self) -> pulumi.Output[builtins.str]:
        """
        存储桶的 TOS 协议公网访问域名。
        """
        return pulumi.get(self, "extranet_endpoint")

    @property
    @pulumi.getter(name="intranetEndpoint")
    def intranet_endpoint(self) -> pulumi.Output[builtins.str]:
        """
        存储桶的 TOS 协议私网访问域名
        """
        return pulumi.get(self, "intranet_endpoint")

    @property
    @pulumi.getter(name="lifecycleConfigs")
    def lifecycle_configs(self) -> pulumi.Output[Sequence['outputs.BucketLifecycleConfig']]:
        return pulumi.get(self, "lifecycle_configs")

    @property
    @pulumi.getter
    def location(self) -> pulumi.Output[builtins.str]:
        """
        桶所在区域。
        """
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        桶名。
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        存储桶所属项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> pulumi.Output[builtins.str]:
        """
        桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.BucketTag']]:
        return pulumi.get(self, "tags")

