# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'BucketAcl',
    'BucketAclGrant',
    'BucketAclOwner',
    'BucketLifecycleConfig',
    'BucketLifecycleConfigAbortInCompleteMultipartUpload',
    'BucketLifecycleConfigExpiration',
    'BucketLifecycleConfigFilter',
    'BucketLifecycleConfigNoCurrentVersionExpiration',
    'BucketLifecycleConfigNonCurrentVersionTransition',
    'BucketLifecycleConfigTag',
    'BucketLifecycleConfigTransition',
    'BucketTag',
    'GetBucketAclResult',
    'GetBucketAclGrantResult',
    'GetBucketAclOwnerResult',
    'GetBucketLifecycleConfigResult',
    'GetBucketLifecycleConfigAbortInCompleteMultipartUploadResult',
    'GetBucketLifecycleConfigExpirationResult',
    'GetBucketLifecycleConfigFilterResult',
    'GetBucketLifecycleConfigNoCurrentVersionExpirationResult',
    'GetBucketLifecycleConfigNonCurrentVersionTransitionResult',
    'GetBucketLifecycleConfigTagResult',
    'GetBucketLifecycleConfigTransitionResult',
    'GetBucketTagResult',
]

@pulumi.output_type
class BucketAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketAclDelivered":
            suggest = "bucket_acl_delivered"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_acl_delivered: Optional[builtins.bool] = None,
                 grants: Optional[Sequence['outputs.BucketAclGrant']] = None,
                 owner: Optional['outputs.BucketAclOwner'] = None):
        """
        :param builtins.bool bucket_acl_delivered: 是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        :param 'BucketAclOwnerArgs' owner: 对象所有者。
        """
        if bucket_acl_delivered is not None:
            pulumi.set(__self__, "bucket_acl_delivered", bucket_acl_delivered)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="bucketAclDelivered")
    def bucket_acl_delivered(self) -> Optional[builtins.bool]:
        """
        是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        """
        return pulumi.get(self, "bucket_acl_delivered")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence['outputs.BucketAclGrant']]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owner(self) -> Optional['outputs.BucketAclOwner']:
        """
        对象所有者。
        """
        return pulumi.get(self, "owner")


@pulumi.output_type
class BucketAclGrant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grantFullControl":
            suggest = "grant_full_control"
        elif key == "grantRead":
            suggest = "grant_read"
        elif key == "grantReadAcp":
            suggest = "grant_read_acp"
        elif key == "grantWrite":
            suggest = "grant_write"
        elif key == "grantWriteAcp":
            suggest = "grant_write_acp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketAclGrant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketAclGrant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketAclGrant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acl: Optional[builtins.str] = None,
                 grant_full_control: Optional[builtins.str] = None,
                 grant_read: Optional[builtins.str] = None,
                 grant_read_acp: Optional[builtins.str] = None,
                 grant_write: Optional[builtins.str] = None,
                 grant_write_acp: Optional[builtins.str] = None):
        """
        :param builtins.str acl: 桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        :param builtins.str grant_full_control: 授予指定用户所有权限。
        :param builtins.str grant_read: 授予指定用户读权限。
        :param builtins.str grant_read_acp: 授予指定用户查看桶 ACL 的权限。
        :param builtins.str grant_write: 授予指定用户写权限。
        :param builtins.str grant_write_acp: 授予指定用户修改和删除桶 ACL 的权限。
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if grant_full_control is not None:
            pulumi.set(__self__, "grant_full_control", grant_full_control)
        if grant_read is not None:
            pulumi.set(__self__, "grant_read", grant_read)
        if grant_read_acp is not None:
            pulumi.set(__self__, "grant_read_acp", grant_read_acp)
        if grant_write is not None:
            pulumi.set(__self__, "grant_write", grant_write)
        if grant_write_acp is not None:
            pulumi.set(__self__, "grant_write_acp", grant_write_acp)

    @property
    @pulumi.getter
    def acl(self) -> Optional[builtins.str]:
        """
        桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="grantFullControl")
    def grant_full_control(self) -> Optional[builtins.str]:
        """
        授予指定用户所有权限。
        """
        return pulumi.get(self, "grant_full_control")

    @property
    @pulumi.getter(name="grantRead")
    def grant_read(self) -> Optional[builtins.str]:
        """
        授予指定用户读权限。
        """
        return pulumi.get(self, "grant_read")

    @property
    @pulumi.getter(name="grantReadAcp")
    def grant_read_acp(self) -> Optional[builtins.str]:
        """
        授予指定用户查看桶 ACL 的权限。
        """
        return pulumi.get(self, "grant_read_acp")

    @property
    @pulumi.getter(name="grantWrite")
    def grant_write(self) -> Optional[builtins.str]:
        """
        授予指定用户写权限。
        """
        return pulumi.get(self, "grant_write")

    @property
    @pulumi.getter(name="grantWriteAcp")
    def grant_write_acp(self) -> Optional[builtins.str]:
        """
        授予指定用户修改和删除桶 ACL 的权限。
        """
        return pulumi.get(self, "grant_write_acp")


@pulumi.output_type
class BucketAclOwner(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayName":
            suggest = "display_name"
        elif key == "ownerId":
            suggest = "owner_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketAclOwner. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketAclOwner.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketAclOwner.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 display_name: Optional[builtins.str] = None,
                 owner_id: Optional[builtins.str] = None):
        """
        :param builtins.str display_name: 展示名。
        :param builtins.str owner_id: 账号ID。
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[builtins.str]:
        """
        展示名。
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[builtins.str]:
        """
        账号ID。
        """
        return pulumi.get(self, "owner_id")


@pulumi.output_type
class BucketLifecycleConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortInCompleteMultipartUpload":
            suggest = "abort_in_complete_multipart_upload"
        elif key == "lifecycleRuleId":
            suggest = "lifecycle_rule_id"
        elif key == "noCurrentVersionExpiration":
            suggest = "no_current_version_expiration"
        elif key == "nonCurrentVersionTransitions":
            suggest = "non_current_version_transitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_in_complete_multipart_upload: Optional['outputs.BucketLifecycleConfigAbortInCompleteMultipartUpload'] = None,
                 expiration: Optional['outputs.BucketLifecycleConfigExpiration'] = None,
                 filter: Optional['outputs.BucketLifecycleConfigFilter'] = None,
                 lifecycle_rule_id: Optional[builtins.str] = None,
                 no_current_version_expiration: Optional['outputs.BucketLifecycleConfigNoCurrentVersionExpiration'] = None,
                 non_current_version_transitions: Optional[Sequence['outputs.BucketLifecycleConfigNonCurrentVersionTransition']] = None,
                 prefix: Optional[builtins.str] = None,
                 status: Optional[builtins.str] = None,
                 tags: Optional[Sequence['outputs.BucketLifecycleConfigTag']] = None,
                 transitions: Optional[Sequence['outputs.BucketLifecycleConfigTransition']] = None):
        """
        :param 'BucketLifecycleConfigAbortInCompleteMultipartUploadArgs' abort_in_complete_multipart_upload: 指定未合并的分片任务（碎片）的过期属性。
        :param 'BucketLifecycleConfigExpirationArgs' expiration: 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        :param 'BucketLifecycleConfigFilterArgs' filter: 指定规则生效的过滤条件。
        :param builtins.str lifecycle_rule_id: 规则 ID。
        :param builtins.str prefix: 规则所适用的前缀。
        :param builtins.str status: 是否启用规则。包括Enabled、Disabled。
        """
        if abort_in_complete_multipart_upload is not None:
            pulumi.set(__self__, "abort_in_complete_multipart_upload", abort_in_complete_multipart_upload)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if lifecycle_rule_id is not None:
            pulumi.set(__self__, "lifecycle_rule_id", lifecycle_rule_id)
        if no_current_version_expiration is not None:
            pulumi.set(__self__, "no_current_version_expiration", no_current_version_expiration)
        if non_current_version_transitions is not None:
            pulumi.set(__self__, "non_current_version_transitions", non_current_version_transitions)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="abortInCompleteMultipartUpload")
    def abort_in_complete_multipart_upload(self) -> Optional['outputs.BucketLifecycleConfigAbortInCompleteMultipartUpload']:
        """
        指定未合并的分片任务（碎片）的过期属性。
        """
        return pulumi.get(self, "abort_in_complete_multipart_upload")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.BucketLifecycleConfigExpiration']:
        """
        基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.BucketLifecycleConfigFilter']:
        """
        指定规则生效的过滤条件。
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="lifecycleRuleId")
    def lifecycle_rule_id(self) -> Optional[builtins.str]:
        """
        规则 ID。
        """
        return pulumi.get(self, "lifecycle_rule_id")

    @property
    @pulumi.getter(name="noCurrentVersionExpiration")
    def no_current_version_expiration(self) -> Optional['outputs.BucketLifecycleConfigNoCurrentVersionExpiration']:
        return pulumi.get(self, "no_current_version_expiration")

    @property
    @pulumi.getter(name="nonCurrentVersionTransitions")
    def non_current_version_transitions(self) -> Optional[Sequence['outputs.BucketLifecycleConfigNonCurrentVersionTransition']]:
        return pulumi.get(self, "non_current_version_transitions")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[builtins.str]:
        """
        规则所适用的前缀。
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def status(self) -> Optional[builtins.str]:
        """
        是否启用规则。包括Enabled、Disabled。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.BucketLifecycleConfigTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def transitions(self) -> Optional[Sequence['outputs.BucketLifecycleConfigTransition']]:
        return pulumi.get(self, "transitions")


@pulumi.output_type
class BucketLifecycleConfigAbortInCompleteMultipartUpload(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "daysAfterInitiation":
            suggest = "days_after_initiation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleConfigAbortInCompleteMultipartUpload. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleConfigAbortInCompleteMultipartUpload.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleConfigAbortInCompleteMultipartUpload.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 days_after_initiation: Optional[builtins.int] = None):
        """
        :param builtins.int days_after_initiation: 指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
        if days_after_initiation is not None:
            pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> Optional[builtins.int]:
        """
        指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
        return pulumi.get(self, "days_after_initiation")


@pulumi.output_type
class BucketLifecycleConfigExpiration(dict):
    def __init__(__self__, *,
                 date: Optional[builtins.str] = None,
                 days: Optional[builtins.int] = None):
        """
        :param builtins.str date: 基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        :param builtins.int days: 基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[builtins.int]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class BucketLifecycleConfigFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "greaterThanIncludeEqual":
            suggest = "greater_than_include_equal"
        elif key == "lessThanIncludeEqual":
            suggest = "less_than_include_equal"
        elif key == "objectSizeGreaterThan":
            suggest = "object_size_greater_than"
        elif key == "objectSizeLessThan":
            suggest = "object_size_less_than"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleConfigFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleConfigFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleConfigFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 greater_than_include_equal: Optional[builtins.str] = None,
                 less_than_include_equal: Optional[builtins.str] = None,
                 object_size_greater_than: Optional[builtins.int] = None,
                 object_size_less_than: Optional[builtins.int] = None):
        """
        :param builtins.str greater_than_include_equal: 是否启用相等条件。包括Enabled、Disabled。
        :param builtins.str less_than_include_equal: 是否启用相等条件。包括Enabled、Disabled。
        :param builtins.int object_size_greater_than: 设置规则生效于大于指定大小的对象。
        :param builtins.int object_size_less_than: 设置规则生效于小于指定大小的对象。
        """
        if greater_than_include_equal is not None:
            pulumi.set(__self__, "greater_than_include_equal", greater_than_include_equal)
        if less_than_include_equal is not None:
            pulumi.set(__self__, "less_than_include_equal", less_than_include_equal)
        if object_size_greater_than is not None:
            pulumi.set(__self__, "object_size_greater_than", object_size_greater_than)
        if object_size_less_than is not None:
            pulumi.set(__self__, "object_size_less_than", object_size_less_than)

    @property
    @pulumi.getter(name="greaterThanIncludeEqual")
    def greater_than_include_equal(self) -> Optional[builtins.str]:
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        return pulumi.get(self, "greater_than_include_equal")

    @property
    @pulumi.getter(name="lessThanIncludeEqual")
    def less_than_include_equal(self) -> Optional[builtins.str]:
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        return pulumi.get(self, "less_than_include_equal")

    @property
    @pulumi.getter(name="objectSizeGreaterThan")
    def object_size_greater_than(self) -> Optional[builtins.int]:
        """
        设置规则生效于大于指定大小的对象。
        """
        return pulumi.get(self, "object_size_greater_than")

    @property
    @pulumi.getter(name="objectSizeLessThan")
    def object_size_less_than(self) -> Optional[builtins.int]:
        """
        设置规则生效于小于指定大小的对象。
        """
        return pulumi.get(self, "object_size_less_than")


@pulumi.output_type
class BucketLifecycleConfigNoCurrentVersionExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonCurrentDate":
            suggest = "non_current_date"
        elif key == "nonCurrentDays":
            suggest = "non_current_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleConfigNoCurrentVersionExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleConfigNoCurrentVersionExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleConfigNoCurrentVersionExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_current_date: Optional[builtins.str] = None,
                 non_current_days: Optional[builtins.int] = None):
        """
        :param builtins.str non_current_date: 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        :param builtins.int non_current_days: 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
        if non_current_date is not None:
            pulumi.set(__self__, "non_current_date", non_current_date)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDate")
    def non_current_date(self) -> Optional[builtins.str]:
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        """
        return pulumi.get(self, "non_current_date")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[builtins.int]:
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class BucketLifecycleConfigNonCurrentVersionTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonCurrentDate":
            suggest = "non_current_date"
        elif key == "nonCurrentDays":
            suggest = "non_current_days"
        elif key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleConfigNonCurrentVersionTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleConfigNonCurrentVersionTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleConfigNonCurrentVersionTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_current_date: Optional[builtins.str] = None,
                 non_current_days: Optional[builtins.int] = None,
                 storage_class: Optional[builtins.str] = None):
        """
        :param builtins.str non_current_date: 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        :param builtins.int non_current_days: 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        :param builtins.str storage_class: 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        if non_current_date is not None:
            pulumi.set(__self__, "non_current_date", non_current_date)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="nonCurrentDate")
    def non_current_date(self) -> Optional[builtins.str]:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        """
        return pulumi.get(self, "non_current_date")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[builtins.int]:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        """
        return pulumi.get(self, "non_current_days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[builtins.str]:
        """
        存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class BucketLifecycleConfigTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class BucketLifecycleConfigTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BucketLifecycleConfigTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BucketLifecycleConfigTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BucketLifecycleConfigTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[builtins.str] = None,
                 days: Optional[builtins.int] = None,
                 storage_class: Optional[builtins.str] = None):
        """
        :param builtins.str date: 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        :param builtins.int days: 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        :param builtins.str storage_class: 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def date(self) -> Optional[builtins.str]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[builtins.int]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[builtins.str]:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class BucketTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBucketAclResult(dict):
    def __init__(__self__, *,
                 bucket_acl_delivered: builtins.bool,
                 grants: Sequence['outputs.GetBucketAclGrantResult'],
                 owner: 'outputs.GetBucketAclOwnerResult'):
        """
        :param builtins.bool bucket_acl_delivered: 是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        :param Sequence['GetBucketAclGrantArgs'] grants: 对象的访问控制权限根节点。
        :param 'GetBucketAclOwnerArgs' owner: 对象所有者。
        """
        pulumi.set(__self__, "bucket_acl_delivered", bucket_acl_delivered)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="bucketAclDelivered")
    def bucket_acl_delivered(self) -> builtins.bool:
        """
        是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        """
        return pulumi.get(self, "bucket_acl_delivered")

    @property
    @pulumi.getter
    def grants(self) -> Sequence['outputs.GetBucketAclGrantResult']:
        """
        对象的访问控制权限根节点。
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def owner(self) -> 'outputs.GetBucketAclOwnerResult':
        """
        对象所有者。
        """
        return pulumi.get(self, "owner")


@pulumi.output_type
class GetBucketAclGrantResult(dict):
    def __init__(__self__, *,
                 acl: builtins.str,
                 grant_full_control: builtins.str,
                 grant_read: builtins.str,
                 grant_read_acp: builtins.str,
                 grant_write: builtins.str,
                 grant_write_acp: builtins.str):
        """
        :param builtins.str acl: 桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        :param builtins.str grant_full_control: 授予指定用户所有权限。
        :param builtins.str grant_read: 授予指定用户读权限。
        :param builtins.str grant_read_acp: 授予指定用户查看桶 ACL 的权限。
        :param builtins.str grant_write: 授予指定用户写权限。
        :param builtins.str grant_write_acp: 授予指定用户修改和删除桶 ACL 的权限。
        """
        pulumi.set(__self__, "acl", acl)
        pulumi.set(__self__, "grant_full_control", grant_full_control)
        pulumi.set(__self__, "grant_read", grant_read)
        pulumi.set(__self__, "grant_read_acp", grant_read_acp)
        pulumi.set(__self__, "grant_write", grant_write)
        pulumi.set(__self__, "grant_write_acp", grant_write_acp)

    @property
    @pulumi.getter
    def acl(self) -> builtins.str:
        """
        桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="grantFullControl")
    def grant_full_control(self) -> builtins.str:
        """
        授予指定用户所有权限。
        """
        return pulumi.get(self, "grant_full_control")

    @property
    @pulumi.getter(name="grantRead")
    def grant_read(self) -> builtins.str:
        """
        授予指定用户读权限。
        """
        return pulumi.get(self, "grant_read")

    @property
    @pulumi.getter(name="grantReadAcp")
    def grant_read_acp(self) -> builtins.str:
        """
        授予指定用户查看桶 ACL 的权限。
        """
        return pulumi.get(self, "grant_read_acp")

    @property
    @pulumi.getter(name="grantWrite")
    def grant_write(self) -> builtins.str:
        """
        授予指定用户写权限。
        """
        return pulumi.get(self, "grant_write")

    @property
    @pulumi.getter(name="grantWriteAcp")
    def grant_write_acp(self) -> builtins.str:
        """
        授予指定用户修改和删除桶 ACL 的权限。
        """
        return pulumi.get(self, "grant_write_acp")


@pulumi.output_type
class GetBucketAclOwnerResult(dict):
    def __init__(__self__, *,
                 display_name: builtins.str,
                 owner_id: builtins.str):
        """
        :param builtins.str display_name: 展示名。
        :param builtins.str owner_id: 账号ID。
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "owner_id", owner_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> builtins.str:
        """
        展示名。
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> builtins.str:
        """
        账号ID。
        """
        return pulumi.get(self, "owner_id")


@pulumi.output_type
class GetBucketLifecycleConfigResult(dict):
    def __init__(__self__, *,
                 abort_in_complete_multipart_upload: 'outputs.GetBucketLifecycleConfigAbortInCompleteMultipartUploadResult',
                 expiration: 'outputs.GetBucketLifecycleConfigExpirationResult',
                 filter: 'outputs.GetBucketLifecycleConfigFilterResult',
                 lifecycle_rule_id: builtins.str,
                 no_current_version_expiration: 'outputs.GetBucketLifecycleConfigNoCurrentVersionExpirationResult',
                 non_current_version_transitions: Sequence['outputs.GetBucketLifecycleConfigNonCurrentVersionTransitionResult'],
                 prefix: builtins.str,
                 status: builtins.str,
                 tags: Sequence['outputs.GetBucketLifecycleConfigTagResult'],
                 transitions: Sequence['outputs.GetBucketLifecycleConfigTransitionResult']):
        """
        :param 'GetBucketLifecycleConfigAbortInCompleteMultipartUploadArgs' abort_in_complete_multipart_upload: 指定未合并的分片任务（碎片）的过期属性。
        :param 'GetBucketLifecycleConfigExpirationArgs' expiration: 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        :param 'GetBucketLifecycleConfigFilterArgs' filter: 指定规则生效的过滤条件。
        :param builtins.str lifecycle_rule_id: 规则 ID。
        :param Sequence['GetBucketLifecycleConfigNonCurrentVersionTransitionArgs'] non_current_version_transitions: 基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。
        :param builtins.str prefix: 规则所适用的前缀。
        :param builtins.str status: 是否启用规则。包括Enabled、Disabled。
        :param Sequence['GetBucketLifecycleConfigTagArgs'] tags: 标签。
        :param Sequence['GetBucketLifecycleConfigTransitionArgs'] transitions: 基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。
        """
        pulumi.set(__self__, "abort_in_complete_multipart_upload", abort_in_complete_multipart_upload)
        pulumi.set(__self__, "expiration", expiration)
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "lifecycle_rule_id", lifecycle_rule_id)
        pulumi.set(__self__, "no_current_version_expiration", no_current_version_expiration)
        pulumi.set(__self__, "non_current_version_transitions", non_current_version_transitions)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="abortInCompleteMultipartUpload")
    def abort_in_complete_multipart_upload(self) -> 'outputs.GetBucketLifecycleConfigAbortInCompleteMultipartUploadResult':
        """
        指定未合并的分片任务（碎片）的过期属性。
        """
        return pulumi.get(self, "abort_in_complete_multipart_upload")

    @property
    @pulumi.getter
    def expiration(self) -> 'outputs.GetBucketLifecycleConfigExpirationResult':
        """
        基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def filter(self) -> 'outputs.GetBucketLifecycleConfigFilterResult':
        """
        指定规则生效的过滤条件。
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="lifecycleRuleId")
    def lifecycle_rule_id(self) -> builtins.str:
        """
        规则 ID。
        """
        return pulumi.get(self, "lifecycle_rule_id")

    @property
    @pulumi.getter(name="noCurrentVersionExpiration")
    def no_current_version_expiration(self) -> 'outputs.GetBucketLifecycleConfigNoCurrentVersionExpirationResult':
        return pulumi.get(self, "no_current_version_expiration")

    @property
    @pulumi.getter(name="nonCurrentVersionTransitions")
    def non_current_version_transitions(self) -> Sequence['outputs.GetBucketLifecycleConfigNonCurrentVersionTransitionResult']:
        """
        基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。
        """
        return pulumi.get(self, "non_current_version_transitions")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        """
        规则所适用的前缀。
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        是否启用规则。包括Enabled、Disabled。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetBucketLifecycleConfigTagResult']:
        """
        标签。
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def transitions(self) -> Sequence['outputs.GetBucketLifecycleConfigTransitionResult']:
        """
        基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。
        """
        return pulumi.get(self, "transitions")


@pulumi.output_type
class GetBucketLifecycleConfigAbortInCompleteMultipartUploadResult(dict):
    def __init__(__self__, *,
                 days_after_initiation: builtins.int):
        """
        :param builtins.int days_after_initiation: 指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
        pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> builtins.int:
        """
        指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
        return pulumi.get(self, "days_after_initiation")


@pulumi.output_type
class GetBucketLifecycleConfigExpirationResult(dict):
    def __init__(__self__, *,
                 date: builtins.str,
                 days: builtins.int):
        """
        :param builtins.str date: 基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        :param builtins.int days: 基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def date(self) -> builtins.str:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class GetBucketLifecycleConfigFilterResult(dict):
    def __init__(__self__, *,
                 greater_than_include_equal: builtins.str,
                 less_than_include_equal: builtins.str,
                 object_size_greater_than: builtins.int,
                 object_size_less_than: builtins.int):
        """
        :param builtins.str greater_than_include_equal: 是否启用相等条件。包括Enabled、Disabled。
        :param builtins.str less_than_include_equal: 是否启用相等条件。包括Enabled、Disabled。
        :param builtins.int object_size_greater_than: 设置规则生效于大于指定大小的对象。
        :param builtins.int object_size_less_than: 设置规则生效于小于指定大小的对象。
        """
        pulumi.set(__self__, "greater_than_include_equal", greater_than_include_equal)
        pulumi.set(__self__, "less_than_include_equal", less_than_include_equal)
        pulumi.set(__self__, "object_size_greater_than", object_size_greater_than)
        pulumi.set(__self__, "object_size_less_than", object_size_less_than)

    @property
    @pulumi.getter(name="greaterThanIncludeEqual")
    def greater_than_include_equal(self) -> builtins.str:
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        return pulumi.get(self, "greater_than_include_equal")

    @property
    @pulumi.getter(name="lessThanIncludeEqual")
    def less_than_include_equal(self) -> builtins.str:
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        return pulumi.get(self, "less_than_include_equal")

    @property
    @pulumi.getter(name="objectSizeGreaterThan")
    def object_size_greater_than(self) -> builtins.int:
        """
        设置规则生效于大于指定大小的对象。
        """
        return pulumi.get(self, "object_size_greater_than")

    @property
    @pulumi.getter(name="objectSizeLessThan")
    def object_size_less_than(self) -> builtins.int:
        """
        设置规则生效于小于指定大小的对象。
        """
        return pulumi.get(self, "object_size_less_than")


@pulumi.output_type
class GetBucketLifecycleConfigNoCurrentVersionExpirationResult(dict):
    def __init__(__self__, *,
                 non_current_date: builtins.str,
                 non_current_days: builtins.int):
        """
        :param builtins.str non_current_date: 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        :param builtins.int non_current_days: 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
        pulumi.set(__self__, "non_current_date", non_current_date)
        pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDate")
    def non_current_date(self) -> builtins.str:
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        """
        return pulumi.get(self, "non_current_date")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> builtins.int:
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
        return pulumi.get(self, "non_current_days")


@pulumi.output_type
class GetBucketLifecycleConfigNonCurrentVersionTransitionResult(dict):
    def __init__(__self__, *,
                 non_current_date: builtins.str,
                 non_current_days: builtins.int,
                 storage_class: builtins.str):
        """
        :param builtins.str non_current_date: 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        :param builtins.int non_current_days: 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        :param builtins.str storage_class: 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        pulumi.set(__self__, "non_current_date", non_current_date)
        pulumi.set(__self__, "non_current_days", non_current_days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="nonCurrentDate")
    def non_current_date(self) -> builtins.str:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        """
        return pulumi.get(self, "non_current_date")

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> builtins.int:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        """
        return pulumi.get(self, "non_current_days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> builtins.str:
        """
        存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketLifecycleConfigTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetBucketLifecycleConfigTransitionResult(dict):
    def __init__(__self__, *,
                 date: builtins.str,
                 days: builtins.int,
                 storage_class: builtins.str):
        """
        :param builtins.str date: 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        :param builtins.int days: 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        :param builtins.str storage_class: 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        pulumi.set(__self__, "date", date)
        pulumi.set(__self__, "days", days)
        pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def date(self) -> builtins.str:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> builtins.int:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> builtins.str:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        return pulumi.get(self, "storage_class")


@pulumi.output_type
class GetBucketTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        标签值。
        """
        return pulumi.get(self, "value")


