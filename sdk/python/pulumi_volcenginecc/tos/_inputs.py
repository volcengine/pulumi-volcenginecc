# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'BucketAclArgs',
    'BucketAclArgsDict',
    'BucketAclGrantArgs',
    'BucketAclGrantArgsDict',
    'BucketAclOwnerArgs',
    'BucketAclOwnerArgsDict',
    'BucketLifecycleConfigArgs',
    'BucketLifecycleConfigArgsDict',
    'BucketLifecycleConfigAbortInCompleteMultipartUploadArgs',
    'BucketLifecycleConfigAbortInCompleteMultipartUploadArgsDict',
    'BucketLifecycleConfigExpirationArgs',
    'BucketLifecycleConfigExpirationArgsDict',
    'BucketLifecycleConfigFilterArgs',
    'BucketLifecycleConfigFilterArgsDict',
    'BucketLifecycleConfigNoCurrentVersionExpirationArgs',
    'BucketLifecycleConfigNoCurrentVersionExpirationArgsDict',
    'BucketLifecycleConfigNonCurrentVersionTransitionArgs',
    'BucketLifecycleConfigNonCurrentVersionTransitionArgsDict',
    'BucketLifecycleConfigTagArgs',
    'BucketLifecycleConfigTagArgsDict',
    'BucketLifecycleConfigTransitionArgs',
    'BucketLifecycleConfigTransitionArgsDict',
    'BucketTagArgs',
    'BucketTagArgsDict',
]

MYPY = False

if not MYPY:
    class BucketAclArgsDict(TypedDict):
        bucket_acl_delivered: NotRequired[pulumi.Input[builtins.bool]]
        """
        是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        """
        grants: NotRequired[pulumi.Input[Sequence[pulumi.Input['BucketAclGrantArgsDict']]]]
        owner: NotRequired[pulumi.Input['BucketAclOwnerArgsDict']]
        """
        对象所有者。
        """
elif False:
    BucketAclArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketAclArgs:
    def __init__(__self__, *,
                 bucket_acl_delivered: Optional[pulumi.Input[builtins.bool]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input['BucketAclGrantArgs']]]] = None,
                 owner: Optional[pulumi.Input['BucketAclOwnerArgs']] = None):
        """
        :param pulumi.Input[builtins.bool] bucket_acl_delivered: 是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        :param pulumi.Input['BucketAclOwnerArgs'] owner: 对象所有者。
        """
        if bucket_acl_delivered is not None:
            pulumi.set(__self__, "bucket_acl_delivered", bucket_acl_delivered)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter(name="bucketAclDelivered")
    def bucket_acl_delivered(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
        """
        return pulumi.get(self, "bucket_acl_delivered")

    @bucket_acl_delivered.setter
    def bucket_acl_delivered(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "bucket_acl_delivered", value)

    @property
    @pulumi.getter
    def grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketAclGrantArgs']]]]:
        return pulumi.get(self, "grants")

    @grants.setter
    def grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketAclGrantArgs']]]]):
        pulumi.set(self, "grants", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input['BucketAclOwnerArgs']]:
        """
        对象所有者。
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input['BucketAclOwnerArgs']]):
        pulumi.set(self, "owner", value)


if not MYPY:
    class BucketAclGrantArgsDict(TypedDict):
        acl: NotRequired[pulumi.Input[builtins.str]]
        """
        桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        """
        grant_full_control: NotRequired[pulumi.Input[builtins.str]]
        """
        授予指定用户所有权限。
        """
        grant_read: NotRequired[pulumi.Input[builtins.str]]
        """
        授予指定用户读权限。
        """
        grant_read_acp: NotRequired[pulumi.Input[builtins.str]]
        """
        授予指定用户查看桶 ACL 的权限。
        """
        grant_write: NotRequired[pulumi.Input[builtins.str]]
        """
        授予指定用户写权限。
        """
        grant_write_acp: NotRequired[pulumi.Input[builtins.str]]
        """
        授予指定用户修改和删除桶 ACL 的权限。
        """
elif False:
    BucketAclGrantArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketAclGrantArgs:
    def __init__(__self__, *,
                 acl: Optional[pulumi.Input[builtins.str]] = None,
                 grant_full_control: Optional[pulumi.Input[builtins.str]] = None,
                 grant_read: Optional[pulumi.Input[builtins.str]] = None,
                 grant_read_acp: Optional[pulumi.Input[builtins.str]] = None,
                 grant_write: Optional[pulumi.Input[builtins.str]] = None,
                 grant_write_acp: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] acl: 桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        :param pulumi.Input[builtins.str] grant_full_control: 授予指定用户所有权限。
        :param pulumi.Input[builtins.str] grant_read: 授予指定用户读权限。
        :param pulumi.Input[builtins.str] grant_read_acp: 授予指定用户查看桶 ACL 的权限。
        :param pulumi.Input[builtins.str] grant_write: 授予指定用户写权限。
        :param pulumi.Input[builtins.str] grant_write_acp: 授予指定用户修改和删除桶 ACL 的权限。
        """
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if grant_full_control is not None:
            pulumi.set(__self__, "grant_full_control", grant_full_control)
        if grant_read is not None:
            pulumi.set(__self__, "grant_read", grant_read)
        if grant_read_acp is not None:
            pulumi.set(__self__, "grant_read_acp", grant_read_acp)
        if grant_write is not None:
            pulumi.set(__self__, "grant_write", grant_write)
        if grant_write_acp is not None:
            pulumi.set(__self__, "grant_write_acp", grant_write_acp)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="grantFullControl")
    def grant_full_control(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        授予指定用户所有权限。
        """
        return pulumi.get(self, "grant_full_control")

    @grant_full_control.setter
    def grant_full_control(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "grant_full_control", value)

    @property
    @pulumi.getter(name="grantRead")
    def grant_read(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        授予指定用户读权限。
        """
        return pulumi.get(self, "grant_read")

    @grant_read.setter
    def grant_read(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "grant_read", value)

    @property
    @pulumi.getter(name="grantReadAcp")
    def grant_read_acp(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        授予指定用户查看桶 ACL 的权限。
        """
        return pulumi.get(self, "grant_read_acp")

    @grant_read_acp.setter
    def grant_read_acp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "grant_read_acp", value)

    @property
    @pulumi.getter(name="grantWrite")
    def grant_write(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        授予指定用户写权限。
        """
        return pulumi.get(self, "grant_write")

    @grant_write.setter
    def grant_write(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "grant_write", value)

    @property
    @pulumi.getter(name="grantWriteAcp")
    def grant_write_acp(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        授予指定用户修改和删除桶 ACL 的权限。
        """
        return pulumi.get(self, "grant_write_acp")

    @grant_write_acp.setter
    def grant_write_acp(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "grant_write_acp", value)


if not MYPY:
    class BucketAclOwnerArgsDict(TypedDict):
        display_name: NotRequired[pulumi.Input[builtins.str]]
        """
        展示名。
        """
        owner_id: NotRequired[pulumi.Input[builtins.str]]
        """
        账号ID。
        """
elif False:
    BucketAclOwnerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketAclOwnerArgs:
    def __init__(__self__, *,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 owner_id: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] display_name: 展示名。
        :param pulumi.Input[builtins.str] owner_id: 账号ID。
        """
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if owner_id is not None:
            pulumi.set(__self__, "owner_id", owner_id)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        展示名。
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="ownerId")
    def owner_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        账号ID。
        """
        return pulumi.get(self, "owner_id")

    @owner_id.setter
    def owner_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "owner_id", value)


if not MYPY:
    class BucketLifecycleConfigArgsDict(TypedDict):
        abort_in_complete_multipart_upload: NotRequired[pulumi.Input['BucketLifecycleConfigAbortInCompleteMultipartUploadArgsDict']]
        """
        指定未合并的分片任务（碎片）的过期属性。
        """
        expiration: NotRequired[pulumi.Input['BucketLifecycleConfigExpirationArgsDict']]
        """
        基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        """
        filter: NotRequired[pulumi.Input['BucketLifecycleConfigFilterArgsDict']]
        """
        指定规则生效的过滤条件。
        """
        lifecycle_rule_id: NotRequired[pulumi.Input[builtins.str]]
        """
        规则 ID。
        """
        no_current_version_expiration: NotRequired[pulumi.Input['BucketLifecycleConfigNoCurrentVersionExpirationArgsDict']]
        non_current_version_transitions: NotRequired[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigNonCurrentVersionTransitionArgsDict']]]]
        prefix: NotRequired[pulumi.Input[builtins.str]]
        """
        规则所适用的前缀。
        """
        status: NotRequired[pulumi.Input[builtins.str]]
        """
        是否启用规则。包括Enabled、Disabled。
        """
        tags: NotRequired[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTagArgsDict']]]]
        transitions: NotRequired[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTransitionArgsDict']]]]
elif False:
    BucketLifecycleConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigArgs:
    def __init__(__self__, *,
                 abort_in_complete_multipart_upload: Optional[pulumi.Input['BucketLifecycleConfigAbortInCompleteMultipartUploadArgs']] = None,
                 expiration: Optional[pulumi.Input['BucketLifecycleConfigExpirationArgs']] = None,
                 filter: Optional[pulumi.Input['BucketLifecycleConfigFilterArgs']] = None,
                 lifecycle_rule_id: Optional[pulumi.Input[builtins.str]] = None,
                 no_current_version_expiration: Optional[pulumi.Input['BucketLifecycleConfigNoCurrentVersionExpirationArgs']] = None,
                 non_current_version_transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigNonCurrentVersionTransitionArgs']]]] = None,
                 prefix: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTagArgs']]]] = None,
                 transitions: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTransitionArgs']]]] = None):
        """
        :param pulumi.Input['BucketLifecycleConfigAbortInCompleteMultipartUploadArgs'] abort_in_complete_multipart_upload: 指定未合并的分片任务（碎片）的过期属性。
        :param pulumi.Input['BucketLifecycleConfigExpirationArgs'] expiration: 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        :param pulumi.Input['BucketLifecycleConfigFilterArgs'] filter: 指定规则生效的过滤条件。
        :param pulumi.Input[builtins.str] lifecycle_rule_id: 规则 ID。
        :param pulumi.Input[builtins.str] prefix: 规则所适用的前缀。
        :param pulumi.Input[builtins.str] status: 是否启用规则。包括Enabled、Disabled。
        """
        if abort_in_complete_multipart_upload is not None:
            pulumi.set(__self__, "abort_in_complete_multipart_upload", abort_in_complete_multipart_upload)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if lifecycle_rule_id is not None:
            pulumi.set(__self__, "lifecycle_rule_id", lifecycle_rule_id)
        if no_current_version_expiration is not None:
            pulumi.set(__self__, "no_current_version_expiration", no_current_version_expiration)
        if non_current_version_transitions is not None:
            pulumi.set(__self__, "non_current_version_transitions", non_current_version_transitions)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter(name="abortInCompleteMultipartUpload")
    def abort_in_complete_multipart_upload(self) -> Optional[pulumi.Input['BucketLifecycleConfigAbortInCompleteMultipartUploadArgs']]:
        """
        指定未合并的分片任务（碎片）的过期属性。
        """
        return pulumi.get(self, "abort_in_complete_multipart_upload")

    @abort_in_complete_multipart_upload.setter
    def abort_in_complete_multipart_upload(self, value: Optional[pulumi.Input['BucketLifecycleConfigAbortInCompleteMultipartUploadArgs']]):
        pulumi.set(self, "abort_in_complete_multipart_upload", value)

    @property
    @pulumi.getter
    def expiration(self) -> Optional[pulumi.Input['BucketLifecycleConfigExpirationArgs']]:
        """
        基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
        """
        return pulumi.get(self, "expiration")

    @expiration.setter
    def expiration(self, value: Optional[pulumi.Input['BucketLifecycleConfigExpirationArgs']]):
        pulumi.set(self, "expiration", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['BucketLifecycleConfigFilterArgs']]:
        """
        指定规则生效的过滤条件。
        """
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['BucketLifecycleConfigFilterArgs']]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="lifecycleRuleId")
    def lifecycle_rule_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        规则 ID。
        """
        return pulumi.get(self, "lifecycle_rule_id")

    @lifecycle_rule_id.setter
    def lifecycle_rule_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "lifecycle_rule_id", value)

    @property
    @pulumi.getter(name="noCurrentVersionExpiration")
    def no_current_version_expiration(self) -> Optional[pulumi.Input['BucketLifecycleConfigNoCurrentVersionExpirationArgs']]:
        return pulumi.get(self, "no_current_version_expiration")

    @no_current_version_expiration.setter
    def no_current_version_expiration(self, value: Optional[pulumi.Input['BucketLifecycleConfigNoCurrentVersionExpirationArgs']]):
        pulumi.set(self, "no_current_version_expiration", value)

    @property
    @pulumi.getter(name="nonCurrentVersionTransitions")
    def non_current_version_transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigNonCurrentVersionTransitionArgs']]]]:
        return pulumi.get(self, "non_current_version_transitions")

    @non_current_version_transitions.setter
    def non_current_version_transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigNonCurrentVersionTransitionArgs']]]]):
        pulumi.set(self, "non_current_version_transitions", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        规则所适用的前缀。
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        是否启用规则。包括Enabled、Disabled。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def transitions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTransitionArgs']]]]:
        return pulumi.get(self, "transitions")

    @transitions.setter
    def transitions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['BucketLifecycleConfigTransitionArgs']]]]):
        pulumi.set(self, "transitions", value)


if not MYPY:
    class BucketLifecycleConfigAbortInCompleteMultipartUploadArgsDict(TypedDict):
        days_after_initiation: NotRequired[pulumi.Input[builtins.int]]
        """
        指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
elif False:
    BucketLifecycleConfigAbortInCompleteMultipartUploadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigAbortInCompleteMultipartUploadArgs:
    def __init__(__self__, *,
                 days_after_initiation: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.int] days_after_initiation: 指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
        if days_after_initiation is not None:
            pulumi.set(__self__, "days_after_initiation", days_after_initiation)

    @property
    @pulumi.getter(name="daysAfterInitiation")
    def days_after_initiation(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
        """
        return pulumi.get(self, "days_after_initiation")

    @days_after_initiation.setter
    def days_after_initiation(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "days_after_initiation", value)


if not MYPY:
    class BucketLifecycleConfigExpirationArgsDict(TypedDict):
        date: NotRequired[pulumi.Input[builtins.str]]
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        """
        days: NotRequired[pulumi.Input[builtins.int]]
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
elif False:
    BucketLifecycleConfigExpirationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigExpirationArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[builtins.str]] = None,
                 days: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] date: 基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        :param pulumi.Input[builtins.int] days: 基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "days", value)


if not MYPY:
    class BucketLifecycleConfigFilterArgsDict(TypedDict):
        greater_than_include_equal: NotRequired[pulumi.Input[builtins.str]]
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        less_than_include_equal: NotRequired[pulumi.Input[builtins.str]]
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        object_size_greater_than: NotRequired[pulumi.Input[builtins.int]]
        """
        设置规则生效于大于指定大小的对象。
        """
        object_size_less_than: NotRequired[pulumi.Input[builtins.int]]
        """
        设置规则生效于小于指定大小的对象。
        """
elif False:
    BucketLifecycleConfigFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigFilterArgs:
    def __init__(__self__, *,
                 greater_than_include_equal: Optional[pulumi.Input[builtins.str]] = None,
                 less_than_include_equal: Optional[pulumi.Input[builtins.str]] = None,
                 object_size_greater_than: Optional[pulumi.Input[builtins.int]] = None,
                 object_size_less_than: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] greater_than_include_equal: 是否启用相等条件。包括Enabled、Disabled。
        :param pulumi.Input[builtins.str] less_than_include_equal: 是否启用相等条件。包括Enabled、Disabled。
        :param pulumi.Input[builtins.int] object_size_greater_than: 设置规则生效于大于指定大小的对象。
        :param pulumi.Input[builtins.int] object_size_less_than: 设置规则生效于小于指定大小的对象。
        """
        if greater_than_include_equal is not None:
            pulumi.set(__self__, "greater_than_include_equal", greater_than_include_equal)
        if less_than_include_equal is not None:
            pulumi.set(__self__, "less_than_include_equal", less_than_include_equal)
        if object_size_greater_than is not None:
            pulumi.set(__self__, "object_size_greater_than", object_size_greater_than)
        if object_size_less_than is not None:
            pulumi.set(__self__, "object_size_less_than", object_size_less_than)

    @property
    @pulumi.getter(name="greaterThanIncludeEqual")
    def greater_than_include_equal(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        return pulumi.get(self, "greater_than_include_equal")

    @greater_than_include_equal.setter
    def greater_than_include_equal(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "greater_than_include_equal", value)

    @property
    @pulumi.getter(name="lessThanIncludeEqual")
    def less_than_include_equal(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        是否启用相等条件。包括Enabled、Disabled。
        """
        return pulumi.get(self, "less_than_include_equal")

    @less_than_include_equal.setter
    def less_than_include_equal(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "less_than_include_equal", value)

    @property
    @pulumi.getter(name="objectSizeGreaterThan")
    def object_size_greater_than(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        设置规则生效于大于指定大小的对象。
        """
        return pulumi.get(self, "object_size_greater_than")

    @object_size_greater_than.setter
    def object_size_greater_than(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "object_size_greater_than", value)

    @property
    @pulumi.getter(name="objectSizeLessThan")
    def object_size_less_than(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        设置规则生效于小于指定大小的对象。
        """
        return pulumi.get(self, "object_size_less_than")

    @object_size_less_than.setter
    def object_size_less_than(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "object_size_less_than", value)


if not MYPY:
    class BucketLifecycleConfigNoCurrentVersionExpirationArgsDict(TypedDict):
        non_current_date: NotRequired[pulumi.Input[builtins.str]]
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        """
        non_current_days: NotRequired[pulumi.Input[builtins.int]]
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
elif False:
    BucketLifecycleConfigNoCurrentVersionExpirationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigNoCurrentVersionExpirationArgs:
    def __init__(__self__, *,
                 non_current_date: Optional[pulumi.Input[builtins.str]] = None,
                 non_current_days: Optional[pulumi.Input[builtins.int]] = None):
        """
        :param pulumi.Input[builtins.str] non_current_date: 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        :param pulumi.Input[builtins.int] non_current_days: 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
        if non_current_date is not None:
            pulumi.set(__self__, "non_current_date", non_current_date)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)

    @property
    @pulumi.getter(name="nonCurrentDate")
    def non_current_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
        """
        return pulumi.get(self, "non_current_date")

    @non_current_date.setter
    def non_current_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "non_current_date", value)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
        """
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "non_current_days", value)


if not MYPY:
    class BucketLifecycleConfigNonCurrentVersionTransitionArgsDict(TypedDict):
        non_current_date: NotRequired[pulumi.Input[builtins.str]]
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        """
        non_current_days: NotRequired[pulumi.Input[builtins.int]]
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        """
        storage_class: NotRequired[pulumi.Input[builtins.str]]
        """
        存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
elif False:
    BucketLifecycleConfigNonCurrentVersionTransitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigNonCurrentVersionTransitionArgs:
    def __init__(__self__, *,
                 non_current_date: Optional[pulumi.Input[builtins.str]] = None,
                 non_current_days: Optional[pulumi.Input[builtins.int]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] non_current_date: 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        :param pulumi.Input[builtins.int] non_current_days: 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        :param pulumi.Input[builtins.str] storage_class: 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        if non_current_date is not None:
            pulumi.set(__self__, "non_current_date", non_current_date)
        if non_current_days is not None:
            pulumi.set(__self__, "non_current_days", non_current_days)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter(name="nonCurrentDate")
    def non_current_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
        """
        return pulumi.get(self, "non_current_date")

    @non_current_date.setter
    def non_current_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "non_current_date", value)

    @property
    @pulumi.getter(name="nonCurrentDays")
    def non_current_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
        """
        return pulumi.get(self, "non_current_days")

    @non_current_days.setter
    def non_current_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "non_current_days", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_class", value)


if not MYPY:
    class BucketLifecycleConfigTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    BucketLifecycleConfigTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class BucketLifecycleConfigTransitionArgsDict(TypedDict):
        date: NotRequired[pulumi.Input[builtins.str]]
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        """
        days: NotRequired[pulumi.Input[builtins.int]]
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        """
        storage_class: NotRequired[pulumi.Input[builtins.str]]
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
elif False:
    BucketLifecycleConfigTransitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketLifecycleConfigTransitionArgs:
    def __init__(__self__, *,
                 date: Optional[pulumi.Input[builtins.str]] = None,
                 days: Optional[pulumi.Input[builtins.int]] = None,
                 storage_class: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] date: 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        :param pulumi.Input[builtins.int] days: 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        :param pulumi.Input[builtins.str] storage_class: 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if storage_class is not None:
            pulumi.set(__self__, "storage_class", storage_class)

    @property
    @pulumi.getter
    def date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
        """
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
        """
        return pulumi.get(self, "days")

    @days.setter
    def days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "days", value)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
        """
        return pulumi.get(self, "storage_class")

    @storage_class.setter
    def storage_class(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_class", value)


if not MYPY:
    class BucketTagArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[builtins.str]]
        """
        标签键。
        """
        value: NotRequired[pulumi.Input[builtins.str]]
        """
        标签值。
        """
elif False:
    BucketTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BucketTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[builtins.str]] = None,
                 value: Optional[pulumi.Input[builtins.str]] = None):
        """
        :param pulumi.Input[builtins.str] key: 标签键。
        :param pulumi.Input[builtins.str] value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        标签值。
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "value", value)


