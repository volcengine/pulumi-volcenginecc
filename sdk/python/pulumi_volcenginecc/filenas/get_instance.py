# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    """
    A collection of values returned by getInstance.
    """
    def __init__(__self__, cache_performance=None, capacity=None, charge_type=None, create_time=None, description=None, file_system_id=None, file_system_name=None, file_system_type=None, id=None, project_name=None, protocol_type=None, snapshot_count=None, snapshot_id=None, status=None, storage_type=None, tags=None, update_time=None, zone_id=None, zone_name=None):
        if cache_performance and not isinstance(cache_performance, dict):
            raise TypeError("Expected argument 'cache_performance' to be a dict")
        pulumi.set(__self__, "cache_performance", cache_performance)
        if capacity and not isinstance(capacity, dict):
            raise TypeError("Expected argument 'capacity' to be a dict")
        pulumi.set(__self__, "capacity", capacity)
        if charge_type and not isinstance(charge_type, str):
            raise TypeError("Expected argument 'charge_type' to be a str")
        pulumi.set(__self__, "charge_type", charge_type)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if file_system_id and not isinstance(file_system_id, str):
            raise TypeError("Expected argument 'file_system_id' to be a str")
        pulumi.set(__self__, "file_system_id", file_system_id)
        if file_system_name and not isinstance(file_system_name, str):
            raise TypeError("Expected argument 'file_system_name' to be a str")
        pulumi.set(__self__, "file_system_name", file_system_name)
        if file_system_type and not isinstance(file_system_type, str):
            raise TypeError("Expected argument 'file_system_type' to be a str")
        pulumi.set(__self__, "file_system_type", file_system_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if project_name and not isinstance(project_name, str):
            raise TypeError("Expected argument 'project_name' to be a str")
        pulumi.set(__self__, "project_name", project_name)
        if protocol_type and not isinstance(protocol_type, str):
            raise TypeError("Expected argument 'protocol_type' to be a str")
        pulumi.set(__self__, "protocol_type", protocol_type)
        if snapshot_count and not isinstance(snapshot_count, int):
            raise TypeError("Expected argument 'snapshot_count' to be a int")
        pulumi.set(__self__, "snapshot_count", snapshot_count)
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)
        if zone_id and not isinstance(zone_id, str):
            raise TypeError("Expected argument 'zone_id' to be a str")
        pulumi.set(__self__, "zone_id", zone_id)
        if zone_name and not isinstance(zone_name, str):
            raise TypeError("Expected argument 'zone_name' to be a str")
        pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="cachePerformance")
    def cache_performance(self) -> 'outputs.GetInstanceCachePerformanceResult':
        """
        缓存型性能信息。
        """
        return pulumi.get(self, "cache_performance")

    @property
    @pulumi.getter
    def capacity(self) -> 'outputs.GetInstanceCapacityResult':
        """
        文件系统容量。
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> builtins.str:
        """
        计费类型，取值 PayAsYouGo，表示按量计费。
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> builtins.str:
        """
        创建时间
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        描述信息。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> builtins.str:
        """
        文件系统 ID。
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> builtins.str:
        """
        文件系统名称。
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> builtins.str:
        """
        文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        Uniquely identifies the resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> builtins.str:
        """
        所属项目，默认值为 default 项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> builtins.str:
        """
        文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> builtins.int:
        """
        快照数量
        """
        return pulumi.get(self, "snapshot_count")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> builtins.str:
        """
        创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> builtins.str:
        """
        文件系统状态
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> builtins.str:
        """
        存储类型，取值Standard，表示标准型。
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetInstanceTagResult']:
        """
        文件系统的标签信息
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> builtins.str:
        """
        更新时间
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> builtins.str:
        """
        可用区 ID。
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> builtins.str:
        """
        可用区名称。
        """
        return pulumi.get(self, "zone_name")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            cache_performance=self.cache_performance,
            capacity=self.capacity,
            charge_type=self.charge_type,
            create_time=self.create_time,
            description=self.description,
            file_system_id=self.file_system_id,
            file_system_name=self.file_system_name,
            file_system_type=self.file_system_type,
            id=self.id,
            project_name=self.project_name,
            protocol_type=self.protocol_type,
            snapshot_count=self.snapshot_count,
            snapshot_id=self.snapshot_id,
            status=self.status,
            storage_type=self.storage_type,
            tags=self.tags,
            update_time=self.update_time,
            zone_id=self.zone_id,
            zone_name=self.zone_name)


def get_instance(id: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Data Source schema for Volcengine::FileNAS::Instance


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('volcenginecc:filenas/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        cache_performance=pulumi.get(__ret__, 'cache_performance'),
        capacity=pulumi.get(__ret__, 'capacity'),
        charge_type=pulumi.get(__ret__, 'charge_type'),
        create_time=pulumi.get(__ret__, 'create_time'),
        description=pulumi.get(__ret__, 'description'),
        file_system_id=pulumi.get(__ret__, 'file_system_id'),
        file_system_name=pulumi.get(__ret__, 'file_system_name'),
        file_system_type=pulumi.get(__ret__, 'file_system_type'),
        id=pulumi.get(__ret__, 'id'),
        project_name=pulumi.get(__ret__, 'project_name'),
        protocol_type=pulumi.get(__ret__, 'protocol_type'),
        snapshot_count=pulumi.get(__ret__, 'snapshot_count'),
        snapshot_id=pulumi.get(__ret__, 'snapshot_id'),
        status=pulumi.get(__ret__, 'status'),
        storage_type=pulumi.get(__ret__, 'storage_type'),
        tags=pulumi.get(__ret__, 'tags'),
        update_time=pulumi.get(__ret__, 'update_time'),
        zone_id=pulumi.get(__ret__, 'zone_id'),
        zone_name=pulumi.get(__ret__, 'zone_name'))
def get_instance_output(id: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Data Source schema for Volcengine::FileNAS::Instance


    :param builtins.str id: Uniquely identifies the resource.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('volcenginecc:filenas/getInstance:getInstance', __args__, opts=opts, typ=GetInstanceResult)
    return __ret__.apply(lambda __response__: GetInstanceResult(
        cache_performance=pulumi.get(__response__, 'cache_performance'),
        capacity=pulumi.get(__response__, 'capacity'),
        charge_type=pulumi.get(__response__, 'charge_type'),
        create_time=pulumi.get(__response__, 'create_time'),
        description=pulumi.get(__response__, 'description'),
        file_system_id=pulumi.get(__response__, 'file_system_id'),
        file_system_name=pulumi.get(__response__, 'file_system_name'),
        file_system_type=pulumi.get(__response__, 'file_system_type'),
        id=pulumi.get(__response__, 'id'),
        project_name=pulumi.get(__response__, 'project_name'),
        protocol_type=pulumi.get(__response__, 'protocol_type'),
        snapshot_count=pulumi.get(__response__, 'snapshot_count'),
        snapshot_id=pulumi.get(__response__, 'snapshot_id'),
        status=pulumi.get(__response__, 'status'),
        storage_type=pulumi.get(__response__, 'storage_type'),
        tags=pulumi.get(__response__, 'tags'),
        update_time=pulumi.get(__response__, 'update_time'),
        zone_id=pulumi.get(__response__, 'zone_id'),
        zone_name=pulumi.get(__response__, 'zone_name')))
