# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InstanceCachePerformance',
    'InstanceCapacity',
    'InstanceTag',
    'GetInstanceCachePerformanceResult',
    'GetInstanceCapacityResult',
    'GetInstanceTagResult',
]

@pulumi.output_type
class InstanceCachePerformance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheBandwidth":
            suggest = "cache_bandwidth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceCachePerformance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceCachePerformance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceCachePerformance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_bandwidth: Optional[builtins.int] = None):
        """
        :param builtins.int cache_bandwidth: 预配置带宽，用于增加文件系统带宽。
        """
        if cache_bandwidth is not None:
            pulumi.set(__self__, "cache_bandwidth", cache_bandwidth)

    @property
    @pulumi.getter(name="cacheBandwidth")
    def cache_bandwidth(self) -> Optional[builtins.int]:
        """
        预配置带宽，用于增加文件系统带宽。
        """
        return pulumi.get(self, "cache_bandwidth")


@pulumi.output_type
class InstanceCapacity(dict):
    def __init__(__self__, *,
                 total: Optional[builtins.float] = None,
                 used: Optional[builtins.float] = None):
        """
        :param builtins.float total: 文件系统可用总容量，单位为 GiB。
        :param builtins.float used: 文件系统已使用容量，单位为 MiB。
        """
        if total is not None:
            pulumi.set(__self__, "total", total)
        if used is not None:
            pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def total(self) -> Optional[builtins.float]:
        """
        文件系统可用总容量，单位为 GiB。
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def used(self) -> Optional[builtins.float]:
        """
        文件系统已使用容量，单位为 MiB。
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class InstanceTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 type: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 标签键。
        :param builtins.str type: 标签类型。
        :param builtins.str value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> Optional[builtins.str]:
        """
        标签类型。
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInstanceCachePerformanceResult(dict):
    def __init__(__self__, *,
                 cache_bandwidth: builtins.int):
        """
        :param builtins.int cache_bandwidth: 预配置带宽，用于增加文件系统带宽。
        """
        pulumi.set(__self__, "cache_bandwidth", cache_bandwidth)

    @property
    @pulumi.getter(name="cacheBandwidth")
    def cache_bandwidth(self) -> builtins.int:
        """
        预配置带宽，用于增加文件系统带宽。
        """
        return pulumi.get(self, "cache_bandwidth")


@pulumi.output_type
class GetInstanceCapacityResult(dict):
    def __init__(__self__, *,
                 total: builtins.float,
                 used: builtins.float):
        """
        :param builtins.float total: 文件系统可用总容量，单位为 GiB。
        :param builtins.float used: 文件系统已使用容量，单位为 MiB。
        """
        pulumi.set(__self__, "total", total)
        pulumi.set(__self__, "used", used)

    @property
    @pulumi.getter
    def total(self) -> builtins.float:
        """
        文件系统可用总容量，单位为 GiB。
        """
        return pulumi.get(self, "total")

    @property
    @pulumi.getter
    def used(self) -> builtins.float:
        """
        文件系统已使用容量，单位为 MiB。
        """
        return pulumi.get(self, "used")


@pulumi.output_type
class GetInstanceTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 type: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 标签键。
        :param builtins.str type: 标签类型。
        :param builtins.str value: 标签值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def type(self) -> builtins.str:
        """
        标签类型。
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        标签值。
        """
        return pulumi.get(self, "value")


