# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['InstanceArgs', 'Instance']

@pulumi.input_type
class InstanceArgs:
    def __init__(__self__, *,
                 charge_type: pulumi.Input[builtins.str],
                 file_system_name: pulumi.Input[builtins.str],
                 file_system_type: pulumi.Input[builtins.str],
                 protocol_type: pulumi.Input[builtins.str],
                 zone_id: pulumi.Input[builtins.str],
                 cache_performance: Optional[pulumi.Input['InstanceCachePerformanceArgs']] = None,
                 capacity: Optional[pulumi.Input['InstanceCapacityArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_id: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 zone_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Instance resource.
        :param pulumi.Input[builtins.str] charge_type: 计费类型，取值 PayAsYouGo，表示按量计费。
        :param pulumi.Input[builtins.str] file_system_name: 文件系统名称。
        :param pulumi.Input[builtins.str] file_system_type: 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        :param pulumi.Input[builtins.str] protocol_type: 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        :param pulumi.Input[builtins.str] zone_id: 可用区 ID。
        :param pulumi.Input['InstanceCachePerformanceArgs'] cache_performance: 缓存型性能信息。
        :param pulumi.Input['InstanceCapacityArgs'] capacity: 文件系统容量。
        :param pulumi.Input[builtins.str] description: 描述信息。
        :param pulumi.Input[builtins.str] file_system_id: 文件系统 ID。
        :param pulumi.Input[builtins.str] project_name: 所属项目，默认值为 default 项目。
        :param pulumi.Input[builtins.str] snapshot_id: 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        :param pulumi.Input[builtins.str] storage_type: 存储类型，取值Standard，表示标准型。
        :param pulumi.Input[builtins.str] zone_name: 可用区名称。
        """
        pulumi.set(__self__, "charge_type", charge_type)
        pulumi.set(__self__, "file_system_name", file_system_name)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "zone_id", zone_id)
        if cache_performance is not None:
            pulumi.set(__self__, "cache_performance", cache_performance)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Input[builtins.str]:
        """
        计费类型，取值 PayAsYouGo，表示按量计费。
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> pulumi.Input[builtins.str]:
        """
        文件系统名称。
        """
        return pulumi.get(self, "file_system_name")

    @file_system_name.setter
    def file_system_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "file_system_name", value)

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> pulumi.Input[builtins.str]:
        """
        文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        """
        return pulumi.get(self, "file_system_type")

    @file_system_type.setter
    def file_system_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "file_system_type", value)

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> pulumi.Input[builtins.str]:
        """
        文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        """
        return pulumi.get(self, "protocol_type")

    @protocol_type.setter
    def protocol_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "protocol_type", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Input[builtins.str]:
        """
        可用区 ID。
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="cachePerformance")
    def cache_performance(self) -> Optional[pulumi.Input['InstanceCachePerformanceArgs']]:
        """
        缓存型性能信息。
        """
        return pulumi.get(self, "cache_performance")

    @cache_performance.setter
    def cache_performance(self, value: Optional[pulumi.Input['InstanceCachePerformanceArgs']]):
        pulumi.set(self, "cache_performance", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['InstanceCapacityArgs']]:
        """
        文件系统容量。
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['InstanceCapacityArgs']]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        描述信息。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        文件系统 ID。
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        所属项目，默认值为 default 项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储类型，取值Standard，表示标准型。
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        可用区名称。
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_name", value)


@pulumi.input_type
class _InstanceState:
    def __init__(__self__, *,
                 cache_performance: Optional[pulumi.Input['InstanceCachePerformanceArgs']] = None,
                 capacity: Optional[pulumi.Input['InstanceCapacityArgs']] = None,
                 charge_type: Optional[pulumi.Input[builtins.str]] = None,
                 create_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_id: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_name: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_type: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_count: Optional[pulumi.Input[builtins.int]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]] = None,
                 update_time: Optional[pulumi.Input[builtins.str]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 zone_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Instance resources.
        :param pulumi.Input['InstanceCachePerformanceArgs'] cache_performance: 缓存型性能信息。
        :param pulumi.Input['InstanceCapacityArgs'] capacity: 文件系统容量。
        :param pulumi.Input[builtins.str] charge_type: 计费类型，取值 PayAsYouGo，表示按量计费。
        :param pulumi.Input[builtins.str] create_time: 创建时间
        :param pulumi.Input[builtins.str] description: 描述信息。
        :param pulumi.Input[builtins.str] file_system_id: 文件系统 ID。
        :param pulumi.Input[builtins.str] file_system_name: 文件系统名称。
        :param pulumi.Input[builtins.str] file_system_type: 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        :param pulumi.Input[builtins.str] project_name: 所属项目，默认值为 default 项目。
        :param pulumi.Input[builtins.str] protocol_type: 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        :param pulumi.Input[builtins.int] snapshot_count: 快照数量
        :param pulumi.Input[builtins.str] snapshot_id: 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        :param pulumi.Input[builtins.str] status: 文件系统状态
        :param pulumi.Input[builtins.str] storage_type: 存储类型，取值Standard，表示标准型。
        :param pulumi.Input[builtins.str] update_time: 更新时间
        :param pulumi.Input[builtins.str] zone_id: 可用区 ID。
        :param pulumi.Input[builtins.str] zone_name: 可用区名称。
        """
        if cache_performance is not None:
            pulumi.set(__self__, "cache_performance", cache_performance)
        if capacity is not None:
            pulumi.set(__self__, "capacity", capacity)
        if charge_type is not None:
            pulumi.set(__self__, "charge_type", charge_type)
        if create_time is not None:
            pulumi.set(__self__, "create_time", create_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if file_system_id is not None:
            pulumi.set(__self__, "file_system_id", file_system_id)
        if file_system_name is not None:
            pulumi.set(__self__, "file_system_name", file_system_name)
        if file_system_type is not None:
            pulumi.set(__self__, "file_system_type", file_system_type)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if protocol_type is not None:
            pulumi.set(__self__, "protocol_type", protocol_type)
        if snapshot_count is not None:
            pulumi.set(__self__, "snapshot_count", snapshot_count)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if update_time is not None:
            pulumi.set(__self__, "update_time", update_time)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)
        if zone_name is not None:
            pulumi.set(__self__, "zone_name", zone_name)

    @property
    @pulumi.getter(name="cachePerformance")
    def cache_performance(self) -> Optional[pulumi.Input['InstanceCachePerformanceArgs']]:
        """
        缓存型性能信息。
        """
        return pulumi.get(self, "cache_performance")

    @cache_performance.setter
    def cache_performance(self, value: Optional[pulumi.Input['InstanceCachePerformanceArgs']]):
        pulumi.set(self, "cache_performance", value)

    @property
    @pulumi.getter
    def capacity(self) -> Optional[pulumi.Input['InstanceCapacityArgs']]:
        """
        文件系统容量。
        """
        return pulumi.get(self, "capacity")

    @capacity.setter
    def capacity(self, value: Optional[pulumi.Input['InstanceCapacityArgs']]):
        pulumi.set(self, "capacity", value)

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        计费类型，取值 PayAsYouGo，表示按量计费。
        """
        return pulumi.get(self, "charge_type")

    @charge_type.setter
    def charge_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "charge_type", value)

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建时间
        """
        return pulumi.get(self, "create_time")

    @create_time.setter
    def create_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        描述信息。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        文件系统 ID。
        """
        return pulumi.get(self, "file_system_id")

    @file_system_id.setter
    def file_system_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_system_id", value)

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        文件系统名称。
        """
        return pulumi.get(self, "file_system_name")

    @file_system_name.setter
    def file_system_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_system_name", value)

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        """
        return pulumi.get(self, "file_system_type")

    @file_system_type.setter
    def file_system_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "file_system_type", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        所属项目，默认值为 default 项目。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        """
        return pulumi.get(self, "protocol_type")

    @protocol_type.setter
    def protocol_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protocol_type", value)

    @property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        快照数量
        """
        return pulumi.get(self, "snapshot_count")

    @snapshot_count.setter
    def snapshot_count(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "snapshot_count", value)

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        """
        return pulumi.get(self, "snapshot_id")

    @snapshot_id.setter
    def snapshot_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "snapshot_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        文件系统状态
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        存储类型，取值Standard，表示标准型。
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        更新时间
        """
        return pulumi.get(self, "update_time")

    @update_time.setter
    def update_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_time", value)

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        可用区 ID。
        """
        return pulumi.get(self, "zone_id")

    @zone_id.setter
    def zone_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_id", value)

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        可用区名称。
        """
        return pulumi.get(self, "zone_name")

    @zone_name.setter
    def zone_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "zone_name", value)


@pulumi.type_token("volcenginecc:filenas/instance:Instance")
class Instance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_performance: Optional[pulumi.Input[Union['InstanceCachePerformanceArgs', 'InstanceCachePerformanceArgsDict']]] = None,
                 capacity: Optional[pulumi.Input[Union['InstanceCapacityArgs', 'InstanceCapacityArgsDict']]] = None,
                 charge_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_id: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_name: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_type: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceTagArgs', 'InstanceTagArgsDict']]]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 zone_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        文件系统通过标准的 NFS 协议为您提供文件存储服务，用于网络文件远程访问，通过管理控制台创建挂载地址后，即可按需在客户端中通过标准的 POSIX 接口对文件系统进行访问。

        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcenginecc as volcenginecc

        file_nas_instance_demo = volcenginecc.filenas.Instance("FileNASInstanceDemo",
            file_system_name="FileNASInstanceDemo",
            capacity={
                "total": 105,
            },
            charge_type="PayAsYouGo",
            file_system_type="Extreme",
            protocol_type="NFS",
            zone_id="cn-beijing-x")
        ```

        ## Import

        ```sh
        $ pulumi import volcenginecc:filenas/instance:Instance example "file_system_id"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['InstanceCachePerformanceArgs', 'InstanceCachePerformanceArgsDict']] cache_performance: 缓存型性能信息。
        :param pulumi.Input[Union['InstanceCapacityArgs', 'InstanceCapacityArgsDict']] capacity: 文件系统容量。
        :param pulumi.Input[builtins.str] charge_type: 计费类型，取值 PayAsYouGo，表示按量计费。
        :param pulumi.Input[builtins.str] description: 描述信息。
        :param pulumi.Input[builtins.str] file_system_id: 文件系统 ID。
        :param pulumi.Input[builtins.str] file_system_name: 文件系统名称。
        :param pulumi.Input[builtins.str] file_system_type: 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        :param pulumi.Input[builtins.str] project_name: 所属项目，默认值为 default 项目。
        :param pulumi.Input[builtins.str] protocol_type: 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        :param pulumi.Input[builtins.str] snapshot_id: 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        :param pulumi.Input[builtins.str] storage_type: 存储类型，取值Standard，表示标准型。
        :param pulumi.Input[builtins.str] zone_id: 可用区 ID。
        :param pulumi.Input[builtins.str] zone_name: 可用区名称。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: InstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        文件系统通过标准的 NFS 协议为您提供文件存储服务，用于网络文件远程访问，通过管理控制台创建挂载地址后，即可按需在客户端中通过标准的 POSIX 接口对文件系统进行访问。

        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcenginecc as volcenginecc

        file_nas_instance_demo = volcenginecc.filenas.Instance("FileNASInstanceDemo",
            file_system_name="FileNASInstanceDemo",
            capacity={
                "total": 105,
            },
            charge_type="PayAsYouGo",
            file_system_type="Extreme",
            protocol_type="NFS",
            zone_id="cn-beijing-x")
        ```

        ## Import

        ```sh
        $ pulumi import volcenginecc:filenas/instance:Instance example "file_system_id"
        ```

        :param str resource_name: The name of the resource.
        :param InstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cache_performance: Optional[pulumi.Input[Union['InstanceCachePerformanceArgs', 'InstanceCachePerformanceArgsDict']]] = None,
                 capacity: Optional[pulumi.Input[Union['InstanceCapacityArgs', 'InstanceCapacityArgsDict']]] = None,
                 charge_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_id: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_name: Optional[pulumi.Input[builtins.str]] = None,
                 file_system_type: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_type: Optional[pulumi.Input[builtins.str]] = None,
                 snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
                 storage_type: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceTagArgs', 'InstanceTagArgsDict']]]]] = None,
                 zone_id: Optional[pulumi.Input[builtins.str]] = None,
                 zone_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InstanceArgs.__new__(InstanceArgs)

            __props__.__dict__["cache_performance"] = cache_performance
            __props__.__dict__["capacity"] = capacity
            if charge_type is None and not opts.urn:
                raise TypeError("Missing required property 'charge_type'")
            __props__.__dict__["charge_type"] = charge_type
            __props__.__dict__["description"] = description
            __props__.__dict__["file_system_id"] = file_system_id
            if file_system_name is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_name'")
            __props__.__dict__["file_system_name"] = file_system_name
            if file_system_type is None and not opts.urn:
                raise TypeError("Missing required property 'file_system_type'")
            __props__.__dict__["file_system_type"] = file_system_type
            __props__.__dict__["project_name"] = project_name
            if protocol_type is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_type'")
            __props__.__dict__["protocol_type"] = protocol_type
            __props__.__dict__["snapshot_id"] = snapshot_id
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["tags"] = tags
            if zone_id is None and not opts.urn:
                raise TypeError("Missing required property 'zone_id'")
            __props__.__dict__["zone_id"] = zone_id
            __props__.__dict__["zone_name"] = zone_name
            __props__.__dict__["create_time"] = None
            __props__.__dict__["snapshot_count"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["update_time"] = None
        super(Instance, __self__).__init__(
            'volcenginecc:filenas/instance:Instance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cache_performance: Optional[pulumi.Input[Union['InstanceCachePerformanceArgs', 'InstanceCachePerformanceArgsDict']]] = None,
            capacity: Optional[pulumi.Input[Union['InstanceCapacityArgs', 'InstanceCapacityArgsDict']]] = None,
            charge_type: Optional[pulumi.Input[builtins.str]] = None,
            create_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            file_system_id: Optional[pulumi.Input[builtins.str]] = None,
            file_system_name: Optional[pulumi.Input[builtins.str]] = None,
            file_system_type: Optional[pulumi.Input[builtins.str]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            protocol_type: Optional[pulumi.Input[builtins.str]] = None,
            snapshot_count: Optional[pulumi.Input[builtins.int]] = None,
            snapshot_id: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            storage_type: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InstanceTagArgs', 'InstanceTagArgsDict']]]]] = None,
            update_time: Optional[pulumi.Input[builtins.str]] = None,
            zone_id: Optional[pulumi.Input[builtins.str]] = None,
            zone_name: Optional[pulumi.Input[builtins.str]] = None) -> 'Instance':
        """
        Get an existing Instance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['InstanceCachePerformanceArgs', 'InstanceCachePerformanceArgsDict']] cache_performance: 缓存型性能信息。
        :param pulumi.Input[Union['InstanceCapacityArgs', 'InstanceCapacityArgsDict']] capacity: 文件系统容量。
        :param pulumi.Input[builtins.str] charge_type: 计费类型，取值 PayAsYouGo，表示按量计费。
        :param pulumi.Input[builtins.str] create_time: 创建时间
        :param pulumi.Input[builtins.str] description: 描述信息。
        :param pulumi.Input[builtins.str] file_system_id: 文件系统 ID。
        :param pulumi.Input[builtins.str] file_system_name: 文件系统名称。
        :param pulumi.Input[builtins.str] file_system_type: 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        :param pulumi.Input[builtins.str] project_name: 所属项目，默认值为 default 项目。
        :param pulumi.Input[builtins.str] protocol_type: 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        :param pulumi.Input[builtins.int] snapshot_count: 快照数量
        :param pulumi.Input[builtins.str] snapshot_id: 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        :param pulumi.Input[builtins.str] status: 文件系统状态
        :param pulumi.Input[builtins.str] storage_type: 存储类型，取值Standard，表示标准型。
        :param pulumi.Input[builtins.str] update_time: 更新时间
        :param pulumi.Input[builtins.str] zone_id: 可用区 ID。
        :param pulumi.Input[builtins.str] zone_name: 可用区名称。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _InstanceState.__new__(_InstanceState)

        __props__.__dict__["cache_performance"] = cache_performance
        __props__.__dict__["capacity"] = capacity
        __props__.__dict__["charge_type"] = charge_type
        __props__.__dict__["create_time"] = create_time
        __props__.__dict__["description"] = description
        __props__.__dict__["file_system_id"] = file_system_id
        __props__.__dict__["file_system_name"] = file_system_name
        __props__.__dict__["file_system_type"] = file_system_type
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["protocol_type"] = protocol_type
        __props__.__dict__["snapshot_count"] = snapshot_count
        __props__.__dict__["snapshot_id"] = snapshot_id
        __props__.__dict__["status"] = status
        __props__.__dict__["storage_type"] = storage_type
        __props__.__dict__["tags"] = tags
        __props__.__dict__["update_time"] = update_time
        __props__.__dict__["zone_id"] = zone_id
        __props__.__dict__["zone_name"] = zone_name
        return Instance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cachePerformance")
    def cache_performance(self) -> pulumi.Output['outputs.InstanceCachePerformance']:
        """
        缓存型性能信息。
        """
        return pulumi.get(self, "cache_performance")

    @property
    @pulumi.getter
    def capacity(self) -> pulumi.Output['outputs.InstanceCapacity']:
        """
        文件系统容量。
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="chargeType")
    def charge_type(self) -> pulumi.Output[builtins.str]:
        """
        计费类型，取值 PayAsYouGo，表示按量计费。
        """
        return pulumi.get(self, "charge_type")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> pulumi.Output[builtins.str]:
        """
        创建时间
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        描述信息。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> pulumi.Output[builtins.str]:
        """
        文件系统 ID。
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemName")
    def file_system_name(self) -> pulumi.Output[builtins.str]:
        """
        文件系统名称。
        """
        return pulumi.get(self, "file_system_name")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> pulumi.Output[builtins.str]:
        """
        文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        所属项目，默认值为 default 项目。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> pulumi.Output[builtins.str]:
        """
        文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        """
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="snapshotCount")
    def snapshot_count(self) -> pulumi.Output[builtins.int]:
        """
        快照数量
        """
        return pulumi.get(self, "snapshot_count")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> pulumi.Output[builtins.str]:
        """
        创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        文件系统状态
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[builtins.str]:
        """
        存储类型，取值Standard，表示标准型。
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.InstanceTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> pulumi.Output[builtins.str]:
        """
        更新时间
        """
        return pulumi.get(self, "update_time")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> pulumi.Output[builtins.str]:
        """
        可用区 ID。
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="zoneName")
    def zone_name(self) -> pulumi.Output[builtins.str]:
        """
        可用区名称。
        """
        return pulumi.get(self, "zone_name")

