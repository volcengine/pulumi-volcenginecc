# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CertificateArgs', 'Certificate']

@pulumi.input_type
class CertificateArgs:
    def __init__(__self__, *,
                 certificate_type: pulumi.Input[builtins.str],
                 public_key: pulumi.Input[builtins.str],
                 certificate_name: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateTagArgs']]]] = None):
        """
        The set of arguments for constructing a Certificate resource.
        :param pulumi.Input[builtins.str] certificate_type: 证书类型，取值：CA：CA证书、Server：服务器证书。
        :param pulumi.Input[builtins.str] public_key: 服务器证书的公钥。
        :param pulumi.Input[builtins.str] certificate_name: 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        :param pulumi.Input[builtins.str] description: 证书描述。
        :param pulumi.Input[builtins.str] private_key: 服务器证书的私钥，当证书类型为Server时必填。
        :param pulumi.Input[builtins.str] project_name: 项目名称。
        """
        pulumi.set(__self__, "certificate_type", certificate_type)
        pulumi.set(__self__, "public_key", public_key)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> pulumi.Input[builtins.str]:
        """
        证书类型，取值：CA：CA证书、Server：服务器证书。
        """
        return pulumi.get(self, "certificate_type")

    @certificate_type.setter
    def certificate_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "certificate_type", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[builtins.str]:
        """
        服务器证书的公钥。
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书描述。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器证书的私钥，当证书类型为Server时必填。
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        项目名称。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificateTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _CertificateState:
    def __init__(__self__, *,
                 certificate_id: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_name: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[builtins.str]] = None,
                 created_time: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domain_name: Optional[pulumi.Input[builtins.str]] = None,
                 expired_at: Optional[pulumi.Input[builtins.str]] = None,
                 listeners: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 public_key: Optional[pulumi.Input[builtins.str]] = None,
                 san: Optional[pulumi.Input[builtins.str]] = None,
                 status: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateTagArgs']]]] = None):
        """
        Input properties used for looking up and filtering Certificate resources.
        :param pulumi.Input[builtins.str] certificate_id: 证书ID。
        :param pulumi.Input[builtins.str] certificate_name: 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        :param pulumi.Input[builtins.str] certificate_type: 证书类型，取值：CA：CA证书、Server：服务器证书。
        :param pulumi.Input[builtins.str] created_time: 证书创建时间。
        :param pulumi.Input[builtins.str] description: 证书描述。
        :param pulumi.Input[builtins.str] domain_name: 证书域名。
        :param pulumi.Input[builtins.str] expired_at: 证书过期时间。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] listeners: 证书关联的监听器列表。
        :param pulumi.Input[builtins.str] private_key: 服务器证书的私钥，当证书类型为Server时必填。
        :param pulumi.Input[builtins.str] project_name: 项目名称。
        :param pulumi.Input[builtins.str] public_key: 服务器证书的公钥。
        :param pulumi.Input[builtins.str] san: 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        :param pulumi.Input[builtins.str] status: 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        """
        if certificate_id is not None:
            pulumi.set(__self__, "certificate_id", certificate_id)
        if certificate_name is not None:
            pulumi.set(__self__, "certificate_name", certificate_name)
        if certificate_type is not None:
            pulumi.set(__self__, "certificate_type", certificate_type)
        if created_time is not None:
            pulumi.set(__self__, "created_time", created_time)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if expired_at is not None:
            pulumi.set(__self__, "expired_at", expired_at)
        if listeners is not None:
            pulumi.set(__self__, "listeners", listeners)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if project_name is not None:
            pulumi.set(__self__, "project_name", project_name)
        if public_key is not None:
            pulumi.set(__self__, "public_key", public_key)
        if san is not None:
            pulumi.set(__self__, "san", san)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书ID。
        """
        return pulumi.get(self, "certificate_id")

    @certificate_id.setter
    def certificate_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_id", value)

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        """
        return pulumi.get(self, "certificate_name")

    @certificate_name.setter
    def certificate_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_name", value)

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书类型，取值：CA：CA证书、Server：服务器证书。
        """
        return pulumi.get(self, "certificate_type")

    @certificate_type.setter
    def certificate_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "certificate_type", value)

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书创建时间。
        """
        return pulumi.get(self, "created_time")

    @created_time.setter
    def created_time(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "created_time", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书描述。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书域名。
        """
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书过期时间。
        """
        return pulumi.get(self, "expired_at")

    @expired_at.setter
    def expired_at(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "expired_at", value)

    @property
    @pulumi.getter
    def listeners(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        证书关联的监听器列表。
        """
        return pulumi.get(self, "listeners")

    @listeners.setter
    def listeners(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "listeners", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器证书的私钥，当证书类型为Server时必填。
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        项目名称。
        """
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        服务器证书的公钥。
        """
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter
    def san(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        """
        return pulumi.get(self, "san")

    @san.setter
    def san(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "san", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificateTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("volcenginecc:alb/certificate:Certificate")
class Certificate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_name: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 public_key: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateTagArgs', 'CertificateTagArgsDict']]]]] = None,
                 __props__=None):
        """
        ALB 支持上传服务器证书、CA 证书到控制台，对上传的证书单独管理。

        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcenginecc as volcenginecc

        a_lb_certificate_demo = volcenginecc.alb.Certificate("ALBCertificateDemo",
            certificate_name="ALBCertificateDemo",
            certificate_type="CA",
            public_key="-----BEGIN CERTIFICATE-----xxxx-----END CERTIFICATE-----",
            description="ALBCertificateDemo description",
            project_name="default",
            tags=[{
                "key": "env",
                "value": "test",
            }])
        ```

        ## Import

        ```sh
        $ pulumi import volcenginecc:alb/certificate:Certificate example "certificate_id|certificate_type"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] certificate_name: 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        :param pulumi.Input[builtins.str] certificate_type: 证书类型，取值：CA：CA证书、Server：服务器证书。
        :param pulumi.Input[builtins.str] description: 证书描述。
        :param pulumi.Input[builtins.str] private_key: 服务器证书的私钥，当证书类型为Server时必填。
        :param pulumi.Input[builtins.str] project_name: 项目名称。
        :param pulumi.Input[builtins.str] public_key: 服务器证书的公钥。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CertificateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ALB 支持上传服务器证书、CA 证书到控制台，对上传的证书单独管理。

        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcenginecc as volcenginecc

        a_lb_certificate_demo = volcenginecc.alb.Certificate("ALBCertificateDemo",
            certificate_name="ALBCertificateDemo",
            certificate_type="CA",
            public_key="-----BEGIN CERTIFICATE-----xxxx-----END CERTIFICATE-----",
            description="ALBCertificateDemo description",
            project_name="default",
            tags=[{
                "key": "env",
                "value": "test",
            }])
        ```

        ## Import

        ```sh
        $ pulumi import volcenginecc:alb/certificate:Certificate example "certificate_id|certificate_type"
        ```

        :param str resource_name: The name of the resource.
        :param CertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 certificate_name: Optional[pulumi.Input[builtins.str]] = None,
                 certificate_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 private_key: Optional[pulumi.Input[builtins.str]] = None,
                 project_name: Optional[pulumi.Input[builtins.str]] = None,
                 public_key: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateTagArgs', 'CertificateTagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CertificateArgs.__new__(CertificateArgs)

            __props__.__dict__["certificate_name"] = certificate_name
            if certificate_type is None and not opts.urn:
                raise TypeError("Missing required property 'certificate_type'")
            __props__.__dict__["certificate_type"] = certificate_type
            __props__.__dict__["description"] = description
            __props__.__dict__["private_key"] = private_key
            __props__.__dict__["project_name"] = project_name
            if public_key is None and not opts.urn:
                raise TypeError("Missing required property 'public_key'")
            __props__.__dict__["public_key"] = public_key
            __props__.__dict__["tags"] = tags
            __props__.__dict__["certificate_id"] = None
            __props__.__dict__["created_time"] = None
            __props__.__dict__["domain_name"] = None
            __props__.__dict__["expired_at"] = None
            __props__.__dict__["listeners"] = None
            __props__.__dict__["san"] = None
            __props__.__dict__["status"] = None
        super(Certificate, __self__).__init__(
            'volcenginecc:alb/certificate:Certificate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            certificate_id: Optional[pulumi.Input[builtins.str]] = None,
            certificate_name: Optional[pulumi.Input[builtins.str]] = None,
            certificate_type: Optional[pulumi.Input[builtins.str]] = None,
            created_time: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            domain_name: Optional[pulumi.Input[builtins.str]] = None,
            expired_at: Optional[pulumi.Input[builtins.str]] = None,
            listeners: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            private_key: Optional[pulumi.Input[builtins.str]] = None,
            project_name: Optional[pulumi.Input[builtins.str]] = None,
            public_key: Optional[pulumi.Input[builtins.str]] = None,
            san: Optional[pulumi.Input[builtins.str]] = None,
            status: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['CertificateTagArgs', 'CertificateTagArgsDict']]]]] = None) -> 'Certificate':
        """
        Get an existing Certificate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] certificate_id: 证书ID。
        :param pulumi.Input[builtins.str] certificate_name: 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        :param pulumi.Input[builtins.str] certificate_type: 证书类型，取值：CA：CA证书、Server：服务器证书。
        :param pulumi.Input[builtins.str] created_time: 证书创建时间。
        :param pulumi.Input[builtins.str] description: 证书描述。
        :param pulumi.Input[builtins.str] domain_name: 证书域名。
        :param pulumi.Input[builtins.str] expired_at: 证书过期时间。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] listeners: 证书关联的监听器列表。
        :param pulumi.Input[builtins.str] private_key: 服务器证书的私钥，当证书类型为Server时必填。
        :param pulumi.Input[builtins.str] project_name: 项目名称。
        :param pulumi.Input[builtins.str] public_key: 服务器证书的公钥。
        :param pulumi.Input[builtins.str] san: 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        :param pulumi.Input[builtins.str] status: 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CertificateState.__new__(_CertificateState)

        __props__.__dict__["certificate_id"] = certificate_id
        __props__.__dict__["certificate_name"] = certificate_name
        __props__.__dict__["certificate_type"] = certificate_type
        __props__.__dict__["created_time"] = created_time
        __props__.__dict__["description"] = description
        __props__.__dict__["domain_name"] = domain_name
        __props__.__dict__["expired_at"] = expired_at
        __props__.__dict__["listeners"] = listeners
        __props__.__dict__["private_key"] = private_key
        __props__.__dict__["project_name"] = project_name
        __props__.__dict__["public_key"] = public_key
        __props__.__dict__["san"] = san
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        return Certificate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> pulumi.Output[builtins.str]:
        """
        证书ID。
        """
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="certificateName")
    def certificate_name(self) -> pulumi.Output[builtins.str]:
        """
        证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        """
        return pulumi.get(self, "certificate_name")

    @property
    @pulumi.getter(name="certificateType")
    def certificate_type(self) -> pulumi.Output[builtins.str]:
        """
        证书类型，取值：CA：CA证书、Server：服务器证书。
        """
        return pulumi.get(self, "certificate_type")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> pulumi.Output[builtins.str]:
        """
        证书创建时间。
        """
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        证书描述。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Output[builtins.str]:
        """
        证书域名。
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="expiredAt")
    def expired_at(self) -> pulumi.Output[builtins.str]:
        """
        证书过期时间。
        """
        return pulumi.get(self, "expired_at")

    @property
    @pulumi.getter
    def listeners(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        证书关联的监听器列表。
        """
        return pulumi.get(self, "listeners")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Output[builtins.str]:
        """
        服务器证书的私钥，当证书类型为Server时必填。
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Output[builtins.str]:
        """
        项目名称。
        """
        return pulumi.get(self, "project_name")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Output[builtins.str]:
        """
        服务器证书的公钥。
        """
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter
    def san(self) -> pulumi.Output[builtins.str]:
        """
        证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        """
        return pulumi.get(self, "san")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[builtins.str]:
        """
        证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.CertificateTag']]:
        return pulumi.get(self, "tags")

