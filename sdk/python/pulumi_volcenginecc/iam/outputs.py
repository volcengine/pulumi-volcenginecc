# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RolePolicy',
    'RoleTag',
    'UserLoginProfile',
    'UserPolicy',
    'UserSecurityConfig',
    'UserTag',
    'GetRolePolicyResult',
    'GetRoleTagResult',
    'GetUserLoginProfileResult',
    'GetUserPolicyResult',
    'GetUserSecurityConfigResult',
    'GetUserTagResult',
]

@pulumi.output_type
class RolePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RolePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RolePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RolePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[builtins.str] = None,
                 policy_type: Optional[builtins.str] = None):
        """
        :param builtins.str policy_name: 策略名。
        :param builtins.str policy_type: 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[builtins.str]:
        """
        策略名。
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[builtins.str]:
        """
        策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class RoleTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserLoginProfile(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createDate":
            suggest = "create_date"
        elif key == "lastLoginDate":
            suggest = "last_login_date"
        elif key == "lastLoginIp":
            suggest = "last_login_ip"
        elif key == "lastResetPasswordTime":
            suggest = "last_reset_password_time"
        elif key == "loginAllowed":
            suggest = "login_allowed"
        elif key == "loginLocked":
            suggest = "login_locked"
        elif key == "passwordExpireAt":
            suggest = "password_expire_at"
        elif key == "passwordResetRequired":
            suggest = "password_reset_required"
        elif key == "safeAuthExemptDuration":
            suggest = "safe_auth_exempt_duration"
        elif key == "safeAuthExemptRequired":
            suggest = "safe_auth_exempt_required"
        elif key == "safeAuthExemptUnit":
            suggest = "safe_auth_exempt_unit"
        elif key == "safeAuthFlag":
            suggest = "safe_auth_flag"
        elif key == "safeAuthType":
            suggest = "safe_auth_type"
        elif key == "updateDate":
            suggest = "update_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserLoginProfile. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserLoginProfile.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserLoginProfile.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_date: Optional[builtins.str] = None,
                 last_login_date: Optional[builtins.str] = None,
                 last_login_ip: Optional[builtins.str] = None,
                 last_reset_password_time: Optional[builtins.float] = None,
                 login_allowed: Optional[builtins.bool] = None,
                 login_locked: Optional[builtins.bool] = None,
                 password: Optional[builtins.str] = None,
                 password_expire_at: Optional[builtins.float] = None,
                 password_reset_required: Optional[builtins.bool] = None,
                 safe_auth_exempt_duration: Optional[builtins.float] = None,
                 safe_auth_exempt_required: Optional[builtins.float] = None,
                 safe_auth_exempt_unit: Optional[builtins.float] = None,
                 safe_auth_flag: Optional[builtins.bool] = None,
                 safe_auth_type: Optional[builtins.str] = None,
                 update_date: Optional[builtins.str] = None):
        """
        :param builtins.str create_date: 登录配置创建时间。
        :param builtins.str last_login_date: 上次登录时间。
        :param builtins.str last_login_ip: 上次登录IP。
        :param builtins.float last_reset_password_time: 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
        :param builtins.bool login_allowed: 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
        :param builtins.bool login_locked: 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
        :param builtins.str password: 登录密码。
        :param builtins.float password_expire_at: 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
        :param builtins.bool password_reset_required: 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
        :param builtins.float safe_auth_exempt_duration: 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
        :param builtins.float safe_auth_exempt_required: 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
        :param builtins.float safe_auth_exempt_unit: 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
        :param builtins.bool safe_auth_flag: 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
        :param builtins.str safe_auth_type: 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
        :param builtins.str update_date: 登录配置更新时间。
        """
        if create_date is not None:
            pulumi.set(__self__, "create_date", create_date)
        if last_login_date is not None:
            pulumi.set(__self__, "last_login_date", last_login_date)
        if last_login_ip is not None:
            pulumi.set(__self__, "last_login_ip", last_login_ip)
        if last_reset_password_time is not None:
            pulumi.set(__self__, "last_reset_password_time", last_reset_password_time)
        if login_allowed is not None:
            pulumi.set(__self__, "login_allowed", login_allowed)
        if login_locked is not None:
            pulumi.set(__self__, "login_locked", login_locked)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_expire_at is not None:
            pulumi.set(__self__, "password_expire_at", password_expire_at)
        if password_reset_required is not None:
            pulumi.set(__self__, "password_reset_required", password_reset_required)
        if safe_auth_exempt_duration is not None:
            pulumi.set(__self__, "safe_auth_exempt_duration", safe_auth_exempt_duration)
        if safe_auth_exempt_required is not None:
            pulumi.set(__self__, "safe_auth_exempt_required", safe_auth_exempt_required)
        if safe_auth_exempt_unit is not None:
            pulumi.set(__self__, "safe_auth_exempt_unit", safe_auth_exempt_unit)
        if safe_auth_flag is not None:
            pulumi.set(__self__, "safe_auth_flag", safe_auth_flag)
        if safe_auth_type is not None:
            pulumi.set(__self__, "safe_auth_type", safe_auth_type)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[builtins.str]:
        """
        登录配置创建时间。
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="lastLoginDate")
    def last_login_date(self) -> Optional[builtins.str]:
        """
        上次登录时间。
        """
        return pulumi.get(self, "last_login_date")

    @property
    @pulumi.getter(name="lastLoginIp")
    def last_login_ip(self) -> Optional[builtins.str]:
        """
        上次登录IP。
        """
        return pulumi.get(self, "last_login_ip")

    @property
    @pulumi.getter(name="lastResetPasswordTime")
    def last_reset_password_time(self) -> Optional[builtins.float]:
        """
        上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
        """
        return pulumi.get(self, "last_reset_password_time")

    @property
    @pulumi.getter(name="loginAllowed")
    def login_allowed(self) -> Optional[builtins.bool]:
        """
        是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
        """
        return pulumi.get(self, "login_allowed")

    @property
    @pulumi.getter(name="loginLocked")
    def login_locked(self) -> Optional[builtins.bool]:
        """
        登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
        """
        return pulumi.get(self, "login_locked")

    @property
    @pulumi.getter
    def password(self) -> Optional[builtins.str]:
        """
        登录密码。
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordExpireAt")
    def password_expire_at(self) -> Optional[builtins.float]:
        """
        密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
        """
        return pulumi.get(self, "password_expire_at")

    @property
    @pulumi.getter(name="passwordResetRequired")
    def password_reset_required(self) -> Optional[builtins.bool]:
        """
        下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
        """
        return pulumi.get(self, "password_reset_required")

    @property
    @pulumi.getter(name="safeAuthExemptDuration")
    def safe_auth_exempt_duration(self) -> Optional[builtins.float]:
        """
        登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
        """
        return pulumi.get(self, "safe_auth_exempt_duration")

    @property
    @pulumi.getter(name="safeAuthExemptRequired")
    def safe_auth_exempt_required(self) -> Optional[builtins.float]:
        """
        是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
        """
        return pulumi.get(self, "safe_auth_exempt_required")

    @property
    @pulumi.getter(name="safeAuthExemptUnit")
    def safe_auth_exempt_unit(self) -> Optional[builtins.float]:
        """
        登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
        """
        return pulumi.get(self, "safe_auth_exempt_unit")

    @property
    @pulumi.getter(name="safeAuthFlag")
    def safe_auth_flag(self) -> Optional[builtins.bool]:
        """
        是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
        """
        return pulumi.get(self, "safe_auth_flag")

    @property
    @pulumi.getter(name="safeAuthType")
    def safe_auth_type(self) -> Optional[builtins.str]:
        """
        登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
        """
        return pulumi.get(self, "safe_auth_type")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[builtins.str]:
        """
        登录配置更新时间。
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class UserPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_name: Optional[builtins.str] = None,
                 policy_type: Optional[builtins.str] = None):
        """
        :param builtins.str policy_name: 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
        :param builtins.str policy_type: 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        if policy_name is not None:
            pulumi.set(__self__, "policy_name", policy_name)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[builtins.str]:
        """
        权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[builtins.str]:
        """
        权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class UserSecurityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "safeAuthClose":
            suggest = "safe_auth_close"
        elif key == "safeAuthExemptDuration":
            suggest = "safe_auth_exempt_duration"
        elif key == "safeAuthType":
            suggest = "safe_auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSecurityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSecurityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSecurityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 safe_auth_close: Optional[builtins.float] = None,
                 safe_auth_exempt_duration: Optional[builtins.float] = None,
                 safe_auth_type: Optional[builtins.str] = None):
        """
        :param builtins.float safe_auth_close: 是否开启操作保护。0代表开启，1代表关闭。
        :param builtins.float safe_auth_exempt_duration: 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
        :param builtins.str safe_auth_type: 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
        """
        if safe_auth_close is not None:
            pulumi.set(__self__, "safe_auth_close", safe_auth_close)
        if safe_auth_exempt_duration is not None:
            pulumi.set(__self__, "safe_auth_exempt_duration", safe_auth_exempt_duration)
        if safe_auth_type is not None:
            pulumi.set(__self__, "safe_auth_type", safe_auth_type)

    @property
    @pulumi.getter(name="safeAuthClose")
    def safe_auth_close(self) -> Optional[builtins.float]:
        """
        是否开启操作保护。0代表开启，1代表关闭。
        """
        return pulumi.get(self, "safe_auth_close")

    @property
    @pulumi.getter(name="safeAuthExemptDuration")
    def safe_auth_exempt_duration(self) -> Optional[builtins.float]:
        """
        操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
        """
        return pulumi.get(self, "safe_auth_exempt_duration")

    @property
    @pulumi.getter(name="safeAuthType")
    def safe_auth_type(self) -> Optional[builtins.str]:
        """
        操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
        """
        return pulumi.get(self, "safe_auth_type")


@pulumi.output_type
class UserTag(dict):
    def __init__(__self__, *,
                 key: Optional[builtins.str] = None,
                 value: Optional[builtins.str] = None):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[builtins.str]:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[builtins.str]:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRolePolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: builtins.str,
                 policy_type: builtins.str):
        """
        :param builtins.str policy_name: 策略名。
        :param builtins.str policy_type: 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> builtins.str:
        """
        策略名。
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> builtins.str:
        """
        策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetRoleTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        标签值。
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserLoginProfileResult(dict):
    def __init__(__self__, *,
                 create_date: builtins.str,
                 last_login_date: builtins.str,
                 last_login_ip: builtins.str,
                 last_reset_password_time: builtins.float,
                 login_allowed: builtins.bool,
                 login_locked: builtins.bool,
                 password: builtins.str,
                 password_expire_at: builtins.float,
                 password_reset_required: builtins.bool,
                 safe_auth_exempt_duration: builtins.float,
                 safe_auth_exempt_required: builtins.float,
                 safe_auth_exempt_unit: builtins.float,
                 safe_auth_flag: builtins.bool,
                 safe_auth_type: builtins.str,
                 update_date: builtins.str):
        """
        :param builtins.str create_date: 登录配置创建时间。
        :param builtins.str last_login_date: 上次登录时间。
        :param builtins.str last_login_ip: 上次登录IP。
        :param builtins.float last_reset_password_time: 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
        :param builtins.bool login_allowed: 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
        :param builtins.bool login_locked: 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
        :param builtins.str password: 登录密码。
        :param builtins.float password_expire_at: 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
        :param builtins.bool password_reset_required: 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
        :param builtins.float safe_auth_exempt_duration: 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
        :param builtins.float safe_auth_exempt_required: 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
        :param builtins.float safe_auth_exempt_unit: 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
        :param builtins.bool safe_auth_flag: 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
        :param builtins.str safe_auth_type: 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
        :param builtins.str update_date: 登录配置更新时间。
        """
        pulumi.set(__self__, "create_date", create_date)
        pulumi.set(__self__, "last_login_date", last_login_date)
        pulumi.set(__self__, "last_login_ip", last_login_ip)
        pulumi.set(__self__, "last_reset_password_time", last_reset_password_time)
        pulumi.set(__self__, "login_allowed", login_allowed)
        pulumi.set(__self__, "login_locked", login_locked)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "password_expire_at", password_expire_at)
        pulumi.set(__self__, "password_reset_required", password_reset_required)
        pulumi.set(__self__, "safe_auth_exempt_duration", safe_auth_exempt_duration)
        pulumi.set(__self__, "safe_auth_exempt_required", safe_auth_exempt_required)
        pulumi.set(__self__, "safe_auth_exempt_unit", safe_auth_exempt_unit)
        pulumi.set(__self__, "safe_auth_flag", safe_auth_flag)
        pulumi.set(__self__, "safe_auth_type", safe_auth_type)
        pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> builtins.str:
        """
        登录配置创建时间。
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="lastLoginDate")
    def last_login_date(self) -> builtins.str:
        """
        上次登录时间。
        """
        return pulumi.get(self, "last_login_date")

    @property
    @pulumi.getter(name="lastLoginIp")
    def last_login_ip(self) -> builtins.str:
        """
        上次登录IP。
        """
        return pulumi.get(self, "last_login_ip")

    @property
    @pulumi.getter(name="lastResetPasswordTime")
    def last_reset_password_time(self) -> builtins.float:
        """
        上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
        """
        return pulumi.get(self, "last_reset_password_time")

    @property
    @pulumi.getter(name="loginAllowed")
    def login_allowed(self) -> builtins.bool:
        """
        是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
        """
        return pulumi.get(self, "login_allowed")

    @property
    @pulumi.getter(name="loginLocked")
    def login_locked(self) -> builtins.bool:
        """
        登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
        """
        return pulumi.get(self, "login_locked")

    @property
    @pulumi.getter
    def password(self) -> builtins.str:
        """
        登录密码。
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordExpireAt")
    def password_expire_at(self) -> builtins.float:
        """
        密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
        """
        return pulumi.get(self, "password_expire_at")

    @property
    @pulumi.getter(name="passwordResetRequired")
    def password_reset_required(self) -> builtins.bool:
        """
        下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
        """
        return pulumi.get(self, "password_reset_required")

    @property
    @pulumi.getter(name="safeAuthExemptDuration")
    def safe_auth_exempt_duration(self) -> builtins.float:
        """
        登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
        """
        return pulumi.get(self, "safe_auth_exempt_duration")

    @property
    @pulumi.getter(name="safeAuthExemptRequired")
    def safe_auth_exempt_required(self) -> builtins.float:
        """
        是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
        """
        return pulumi.get(self, "safe_auth_exempt_required")

    @property
    @pulumi.getter(name="safeAuthExemptUnit")
    def safe_auth_exempt_unit(self) -> builtins.float:
        """
        登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
        """
        return pulumi.get(self, "safe_auth_exempt_unit")

    @property
    @pulumi.getter(name="safeAuthFlag")
    def safe_auth_flag(self) -> builtins.bool:
        """
        是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
        """
        return pulumi.get(self, "safe_auth_flag")

    @property
    @pulumi.getter(name="safeAuthType")
    def safe_auth_type(self) -> builtins.str:
        """
        登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
        """
        return pulumi.get(self, "safe_auth_type")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> builtins.str:
        """
        登录配置更新时间。
        """
        return pulumi.get(self, "update_date")


@pulumi.output_type
class GetUserPolicyResult(dict):
    def __init__(__self__, *,
                 policy_name: builtins.str,
                 policy_type: builtins.str):
        """
        :param builtins.str policy_name: 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
        :param builtins.str policy_type: 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        pulumi.set(__self__, "policy_name", policy_name)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> builtins.str:
        """
        权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> builtins.str:
        """
        权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
        """
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetUserSecurityConfigResult(dict):
    def __init__(__self__, *,
                 safe_auth_close: builtins.float,
                 safe_auth_exempt_duration: builtins.float,
                 safe_auth_type: builtins.str):
        """
        :param builtins.float safe_auth_close: 是否开启操作保护。0代表开启，1代表关闭。
        :param builtins.float safe_auth_exempt_duration: 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
        :param builtins.str safe_auth_type: 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
        """
        pulumi.set(__self__, "safe_auth_close", safe_auth_close)
        pulumi.set(__self__, "safe_auth_exempt_duration", safe_auth_exempt_duration)
        pulumi.set(__self__, "safe_auth_type", safe_auth_type)

    @property
    @pulumi.getter(name="safeAuthClose")
    def safe_auth_close(self) -> builtins.float:
        """
        是否开启操作保护。0代表开启，1代表关闭。
        """
        return pulumi.get(self, "safe_auth_close")

    @property
    @pulumi.getter(name="safeAuthExemptDuration")
    def safe_auth_exempt_duration(self) -> builtins.float:
        """
        操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
        """
        return pulumi.get(self, "safe_auth_exempt_duration")

    @property
    @pulumi.getter(name="safeAuthType")
    def safe_auth_type(self) -> builtins.str:
        """
        操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
        """
        return pulumi.get(self, "safe_auth_type")


@pulumi.output_type
class GetUserTagResult(dict):
    def __init__(__self__, *,
                 key: builtins.str,
                 value: builtins.str):
        """
        :param builtins.str key: 标签键。
        :param builtins.str value: 标签值。
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> builtins.str:
        """
        标签键。
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> builtins.str:
        """
        标签值。
        """
        return pulumi.get(self, "value")


