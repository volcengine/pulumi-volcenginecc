# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 user_name: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 login_profile: Optional[pulumi.Input['UserLoginProfileArgs']] = None,
                 mobile_phone: Optional[pulumi.Input[builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]] = None,
                 security_config: Optional[pulumi.Input['UserSecurityConfigArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserTagArgs']]]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[builtins.str] user_name: 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        :param pulumi.Input[builtins.str] description: 子用户对应的描述信息，长度不超过255。
        :param pulumi.Input[builtins.str] display_name: 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        :param pulumi.Input[builtins.str] email: 子用户对应的电子邮件地址。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] groups: 子用户归属的用户组。
        :param pulumi.Input['UserLoginProfileArgs'] login_profile: 子用户的登录配置。
        :param pulumi.Input[builtins.str] mobile_phone: 子用户对应的手机号。
        :param pulumi.Input['UserSecurityConfigArgs'] security_config: 子用户的操作保护配置。
        """
        pulumi.set(__self__, "user_name", user_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if login_profile is not None:
            pulumi.set(__self__, "login_profile", login_profile)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Input[builtins.str]:
        """
        子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "user_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的描述信息，长度不超过255。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的电子邮件地址。
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        子用户归属的用户组。
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="loginProfile")
    def login_profile(self) -> Optional[pulumi.Input['UserLoginProfileArgs']]:
        """
        子用户的登录配置。
        """
        return pulumi.get(self, "login_profile")

    @login_profile.setter
    def login_profile(self, value: Optional[pulumi.Input['UserLoginProfileArgs']]):
        pulumi.set(self, "login_profile", value)

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的手机号。
        """
        return pulumi.get(self, "mobile_phone")

    @mobile_phone.setter
    def mobile_phone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mobile_phone", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input['UserSecurityConfigArgs']]:
        """
        子用户的操作保护配置。
        """
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input['UserSecurityConfigArgs']]):
        pulumi.set(self, "security_config", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[builtins.float]] = None,
                 create_date: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 login_profile: Optional[pulumi.Input['UserLoginProfileArgs']] = None,
                 mobile_phone: Optional[pulumi.Input[builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]] = None,
                 security_config: Optional[pulumi.Input['UserSecurityConfigArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['UserTagArgs']]]] = None,
                 trn: Optional[pulumi.Input[builtins.str]] = None,
                 update_date: Optional[pulumi.Input[builtins.str]] = None,
                 user_id: Optional[pulumi.Input[builtins.int]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[builtins.float] account_id: 子用户归属的主账号。
        :param pulumi.Input[builtins.str] create_date: 子用户对应的创建时间。
        :param pulumi.Input[builtins.str] description: 子用户对应的描述信息，长度不超过255。
        :param pulumi.Input[builtins.str] display_name: 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        :param pulumi.Input[builtins.str] email: 子用户对应的电子邮件地址。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] groups: 子用户归属的用户组。
        :param pulumi.Input['UserLoginProfileArgs'] login_profile: 子用户的登录配置。
        :param pulumi.Input[builtins.str] mobile_phone: 子用户对应的手机号。
        :param pulumi.Input['UserSecurityConfigArgs'] security_config: 子用户的操作保护配置。
        :param pulumi.Input[builtins.str] trn: 子用户对应的Trn表达式。
        :param pulumi.Input[builtins.str] update_date: 子用户对应的更新时间。
        :param pulumi.Input[builtins.int] user_id: 子用户的ID。
        :param pulumi.Input[builtins.str] user_name: 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        """
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if create_date is not None:
            pulumi.set(__self__, "create_date", create_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if login_profile is not None:
            pulumi.set(__self__, "login_profile", login_profile)
        if mobile_phone is not None:
            pulumi.set(__self__, "mobile_phone", mobile_phone)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if security_config is not None:
            pulumi.set(__self__, "security_config", security_config)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        子用户归属的主账号。
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的创建时间。
        """
        return pulumi.get(self, "create_date")

    @create_date.setter
    def create_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的描述信息，长度不超过255。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的电子邮件地址。
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        子用户归属的用户组。
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="loginProfile")
    def login_profile(self) -> Optional[pulumi.Input['UserLoginProfileArgs']]:
        """
        子用户的登录配置。
        """
        return pulumi.get(self, "login_profile")

    @login_profile.setter
    def login_profile(self, value: Optional[pulumi.Input['UserLoginProfileArgs']]):
        pulumi.set(self, "login_profile", value)

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的手机号。
        """
        return pulumi.get(self, "mobile_phone")

    @mobile_phone.setter
    def mobile_phone(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "mobile_phone", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> Optional[pulumi.Input['UserSecurityConfigArgs']]:
        """
        子用户的操作保护配置。
        """
        return pulumi.get(self, "security_config")

    @security_config.setter
    def security_config(self, value: Optional[pulumi.Input['UserSecurityConfigArgs']]):
        pulumi.set(self, "security_config", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的Trn表达式。
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trn", value)

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户对应的更新时间。
        """
        return pulumi.get(self, "update_date")

    @update_date.setter
    def update_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_date", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        子用户的ID。
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "user_id", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        """
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "user_name", value)


@pulumi.type_token("volcenginecc:iam/user:User")
class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 login_profile: Optional[pulumi.Input[Union['UserLoginProfileArgs', 'UserLoginProfileArgsDict']]] = None,
                 mobile_phone: Optional[pulumi.Input[builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserPolicyArgs', 'UserPolicyArgsDict']]]]] = None,
                 security_config: Optional[pulumi.Input[Union['UserSecurityConfigArgs', 'UserSecurityConfigArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserTagArgs', 'UserTagArgsDict']]]]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        IAM子用户是访问控制的一种身份，由账号或是拥有权限的用户创建。用户被授予权限后，可登录控制台或使用访问密钥调用API访问云资源。

        ## Import

        ```sh
        $ pulumi import volcenginecc:iam/user:User example "user_name"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: 子用户对应的描述信息，长度不超过255。
        :param pulumi.Input[builtins.str] display_name: 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        :param pulumi.Input[builtins.str] email: 子用户对应的电子邮件地址。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] groups: 子用户归属的用户组。
        :param pulumi.Input[Union['UserLoginProfileArgs', 'UserLoginProfileArgsDict']] login_profile: 子用户的登录配置。
        :param pulumi.Input[builtins.str] mobile_phone: 子用户对应的手机号。
        :param pulumi.Input[Union['UserSecurityConfigArgs', 'UserSecurityConfigArgsDict']] security_config: 子用户的操作保护配置。
        :param pulumi.Input[builtins.str] user_name: 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        IAM子用户是访问控制的一种身份，由账号或是拥有权限的用户创建。用户被授予权限后，可登录控制台或使用访问密钥调用API访问云资源。

        ## Import

        ```sh
        $ pulumi import volcenginecc:iam/user:User example "user_name"
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 email: Optional[pulumi.Input[builtins.str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 login_profile: Optional[pulumi.Input[Union['UserLoginProfileArgs', 'UserLoginProfileArgsDict']]] = None,
                 mobile_phone: Optional[pulumi.Input[builtins.str]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserPolicyArgs', 'UserPolicyArgsDict']]]]] = None,
                 security_config: Optional[pulumi.Input[Union['UserSecurityConfigArgs', 'UserSecurityConfigArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserTagArgs', 'UserTagArgsDict']]]]] = None,
                 user_name: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["email"] = email
            __props__.__dict__["groups"] = groups
            __props__.__dict__["login_profile"] = login_profile
            __props__.__dict__["mobile_phone"] = mobile_phone
            __props__.__dict__["policies"] = policies
            __props__.__dict__["security_config"] = security_config
            __props__.__dict__["tags"] = tags
            if user_name is None and not opts.urn:
                raise TypeError("Missing required property 'user_name'")
            __props__.__dict__["user_name"] = user_name
            __props__.__dict__["account_id"] = None
            __props__.__dict__["create_date"] = None
            __props__.__dict__["trn"] = None
            __props__.__dict__["update_date"] = None
            __props__.__dict__["user_id"] = None
        super(User, __self__).__init__(
            'volcenginecc:iam/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_id: Optional[pulumi.Input[builtins.float]] = None,
            create_date: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            display_name: Optional[pulumi.Input[builtins.str]] = None,
            email: Optional[pulumi.Input[builtins.str]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            login_profile: Optional[pulumi.Input[Union['UserLoginProfileArgs', 'UserLoginProfileArgsDict']]] = None,
            mobile_phone: Optional[pulumi.Input[builtins.str]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserPolicyArgs', 'UserPolicyArgsDict']]]]] = None,
            security_config: Optional[pulumi.Input[Union['UserSecurityConfigArgs', 'UserSecurityConfigArgsDict']]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['UserTagArgs', 'UserTagArgsDict']]]]] = None,
            trn: Optional[pulumi.Input[builtins.str]] = None,
            update_date: Optional[pulumi.Input[builtins.str]] = None,
            user_id: Optional[pulumi.Input[builtins.int]] = None,
            user_name: Optional[pulumi.Input[builtins.str]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.float] account_id: 子用户归属的主账号。
        :param pulumi.Input[builtins.str] create_date: 子用户对应的创建时间。
        :param pulumi.Input[builtins.str] description: 子用户对应的描述信息，长度不超过255。
        :param pulumi.Input[builtins.str] display_name: 子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        :param pulumi.Input[builtins.str] email: 子用户对应的电子邮件地址。
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] groups: 子用户归属的用户组。
        :param pulumi.Input[Union['UserLoginProfileArgs', 'UserLoginProfileArgsDict']] login_profile: 子用户的登录配置。
        :param pulumi.Input[builtins.str] mobile_phone: 子用户对应的手机号。
        :param pulumi.Input[Union['UserSecurityConfigArgs', 'UserSecurityConfigArgsDict']] security_config: 子用户的操作保护配置。
        :param pulumi.Input[builtins.str] trn: 子用户对应的Trn表达式。
        :param pulumi.Input[builtins.str] update_date: 子用户对应的更新时间。
        :param pulumi.Input[builtins.int] user_id: 子用户的ID。
        :param pulumi.Input[builtins.str] user_name: 子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["account_id"] = account_id
        __props__.__dict__["create_date"] = create_date
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["email"] = email
        __props__.__dict__["groups"] = groups
        __props__.__dict__["login_profile"] = login_profile
        __props__.__dict__["mobile_phone"] = mobile_phone
        __props__.__dict__["policies"] = policies
        __props__.__dict__["security_config"] = security_config
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trn"] = trn
        __props__.__dict__["update_date"] = update_date
        __props__.__dict__["user_id"] = user_id
        __props__.__dict__["user_name"] = user_name
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[builtins.float]:
        """
        子用户归属的主账号。
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的创建时间。
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的描述信息，长度不超过255。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的展示名称，用户显示名。长度1~128，仅支持中文、英文、数字、空格和.-_@符号。
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的电子邮件地址。
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        子用户归属的用户组。
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="loginProfile")
    def login_profile(self) -> pulumi.Output['outputs.UserLoginProfile']:
        """
        子用户的登录配置。
        """
        return pulumi.get(self, "login_profile")

    @property
    @pulumi.getter(name="mobilePhone")
    def mobile_phone(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的手机号。
        """
        return pulumi.get(self, "mobile_phone")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.UserPolicy']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="securityConfig")
    def security_config(self) -> pulumi.Output['outputs.UserSecurityConfig']:
        """
        子用户的操作保护配置。
        """
        return pulumi.get(self, "security_config")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.UserTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def trn(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的Trn表达式。
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[builtins.str]:
        """
        子用户对应的更新时间。
        """
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[builtins.int]:
        """
        子用户的ID。
        """
        return pulumi.get(self, "user_id")

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> pulumi.Output[builtins.str]:
        """
        子用户名称，用户名。长度1~64，支持英文、数字、下划线、和.-@符号。
        """
        return pulumi.get(self, "user_name")

