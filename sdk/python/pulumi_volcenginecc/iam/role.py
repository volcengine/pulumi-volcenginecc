# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RoleArgs', 'Role']

@pulumi.input_type
class RoleArgs:
    def __init__(__self__, *,
                 role_name: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 max_session_duration: Optional[pulumi.Input[builtins.int]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['RolePolicyArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTagArgs']]]] = None,
                 trust_policy_document: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Role resource.
        :param pulumi.Input[builtins.str] role_name: 角色名，长度1~64，支持英文、数字和.-_符号。
        :param pulumi.Input[builtins.str] description: 角色描述，长度不超过128。
        :param pulumi.Input[builtins.str] display_name: 角色显示名，长度不超过64。
        :param pulumi.Input[builtins.int] max_session_duration: 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        :param pulumi.Input[builtins.str] trust_policy_document: 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        """
        pulumi.set(__self__, "role_name", role_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if max_session_duration is not None:
            pulumi.set(__self__, "max_session_duration", max_session_duration)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trust_policy_document is not None:
            pulumi.set(__self__, "trust_policy_document", trust_policy_document)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[builtins.str]:
        """
        角色名，长度1~64，支持英文、数字和.-_符号。
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色描述，长度不超过128。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色显示名，长度不超过64。
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="maxSessionDuration")
    def max_session_duration(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        """
        return pulumi.get(self, "max_session_duration")

    @max_session_duration.setter
    def max_session_duration(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_session_duration", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RolePolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RolePolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trustPolicyDocument")
    def trust_policy_document(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        """
        return pulumi.get(self, "trust_policy_document")

    @trust_policy_document.setter
    def trust_policy_document(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_policy_document", value)


@pulumi.input_type
class _RoleState:
    def __init__(__self__, *,
                 create_date: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 is_service_linked_role: Optional[pulumi.Input[builtins.int]] = None,
                 max_session_duration: Optional[pulumi.Input[builtins.int]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input['RolePolicyArgs']]]] = None,
                 role_id: Optional[pulumi.Input[builtins.int]] = None,
                 role_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTagArgs']]]] = None,
                 trn: Optional[pulumi.Input[builtins.str]] = None,
                 trust_policy_document: Optional[pulumi.Input[builtins.str]] = None,
                 update_date: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering Role resources.
        :param pulumi.Input[builtins.str] create_date: 角色创建时间。
        :param pulumi.Input[builtins.str] description: 角色描述，长度不超过128。
        :param pulumi.Input[builtins.str] display_name: 角色显示名，长度不超过64。
        :param pulumi.Input[builtins.int] is_service_linked_role: 是否是服务关联角色, 0否，1是。
        :param pulumi.Input[builtins.int] max_session_duration: 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        :param pulumi.Input[builtins.int] role_id: 角色ID。
        :param pulumi.Input[builtins.str] role_name: 角色名，长度1~64，支持英文、数字和.-_符号。
        :param pulumi.Input[builtins.str] trn: 角色TRN。
        :param pulumi.Input[builtins.str] trust_policy_document: 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        :param pulumi.Input[builtins.str] update_date: 角色更新时间。
        """
        if create_date is not None:
            pulumi.set(__self__, "create_date", create_date)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if is_service_linked_role is not None:
            pulumi.set(__self__, "is_service_linked_role", is_service_linked_role)
        if max_session_duration is not None:
            pulumi.set(__self__, "max_session_duration", max_session_duration)
        if policies is not None:
            pulumi.set(__self__, "policies", policies)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if role_name is not None:
            pulumi.set(__self__, "role_name", role_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if trn is not None:
            pulumi.set(__self__, "trn", trn)
        if trust_policy_document is not None:
            pulumi.set(__self__, "trust_policy_document", trust_policy_document)
        if update_date is not None:
            pulumi.set(__self__, "update_date", update_date)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色创建时间。
        """
        return pulumi.get(self, "create_date")

    @create_date.setter
    def create_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "create_date", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色描述，长度不超过128。
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色显示名，长度不超过64。
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="isServiceLinkedRole")
    def is_service_linked_role(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        是否是服务关联角色, 0否，1是。
        """
        return pulumi.get(self, "is_service_linked_role")

    @is_service_linked_role.setter
    def is_service_linked_role(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "is_service_linked_role", value)

    @property
    @pulumi.getter(name="maxSessionDuration")
    def max_session_duration(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        """
        return pulumi.get(self, "max_session_duration")

    @max_session_duration.setter
    def max_session_duration(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_session_duration", value)

    @property
    @pulumi.getter
    def policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RolePolicyArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RolePolicyArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        角色ID。
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色名，长度1~64，支持英文、数字和.-_符号。
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RoleTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RoleTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def trn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色TRN。
        """
        return pulumi.get(self, "trn")

    @trn.setter
    def trn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trn", value)

    @property
    @pulumi.getter(name="trustPolicyDocument")
    def trust_policy_document(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        """
        return pulumi.get(self, "trust_policy_document")

    @trust_policy_document.setter
    def trust_policy_document(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "trust_policy_document", value)

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        角色更新时间。
        """
        return pulumi.get(self, "update_date")

    @update_date.setter
    def update_date(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "update_date", value)


@pulumi.type_token("volcenginecc:iam/role:Role")
class Role(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 max_session_duration: Optional[pulumi.Input[builtins.int]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RolePolicyArgs', 'RolePolicyArgsDict']]]]] = None,
                 role_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleTagArgs', 'RoleTagArgsDict']]]]] = None,
                 trust_policy_document: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        角色（Role）是IAM体系里的一种虚拟身份，用于将账号内某些访问权限授予给各类身份实体，受信任的身份实体可扮演该角色来访问账号内的云资源。

        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcenginecc as volcenginecc

        role_demo = volcenginecc.iam.Role("RoleDemo",
            role_name="RoleDemo",
            description="role attach policies",
            max_session_duration=3600,
            trust_policy_document=\"\"\"{
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "sts:AssumeRole"
                    ],
                    "Principal": {
                        "IAM": [
                            "trn:iam::20000000xx:root"
                        ]
                    }
                }
            ]
        }\"\"\",
            tags=[{
                "key": "env",
                "value": "test",
            }])
        ```

        ## Import

        ```sh
        $ pulumi import volcenginecc:iam/role:Role example "role_name"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: 角色描述，长度不超过128。
        :param pulumi.Input[builtins.str] display_name: 角色显示名，长度不超过64。
        :param pulumi.Input[builtins.int] max_session_duration: 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        :param pulumi.Input[builtins.str] role_name: 角色名，长度1~64，支持英文、数字和.-_符号。
        :param pulumi.Input[builtins.str] trust_policy_document: 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        角色（Role）是IAM体系里的一种虚拟身份，用于将账号内某些访问权限授予给各类身份实体，受信任的身份实体可扮演该角色来访问账号内的云资源。

        ## Example Usage

        ```python
        import pulumi
        import pulumi_volcenginecc as volcenginecc

        role_demo = volcenginecc.iam.Role("RoleDemo",
            role_name="RoleDemo",
            description="role attach policies",
            max_session_duration=3600,
            trust_policy_document=\"\"\"{
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "sts:AssumeRole"
                    ],
                    "Principal": {
                        "IAM": [
                            "trn:iam::20000000xx:root"
                        ]
                    }
                }
            ]
        }\"\"\",
            tags=[{
                "key": "env",
                "value": "test",
            }])
        ```

        ## Import

        ```sh
        $ pulumi import volcenginecc:iam/role:Role example "role_name"
        ```

        :param str resource_name: The name of the resource.
        :param RoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 display_name: Optional[pulumi.Input[builtins.str]] = None,
                 max_session_duration: Optional[pulumi.Input[builtins.int]] = None,
                 policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RolePolicyArgs', 'RolePolicyArgsDict']]]]] = None,
                 role_name: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleTagArgs', 'RoleTagArgsDict']]]]] = None,
                 trust_policy_document: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleArgs.__new__(RoleArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["display_name"] = display_name
            __props__.__dict__["max_session_duration"] = max_session_duration
            __props__.__dict__["policies"] = policies
            if role_name is None and not opts.urn:
                raise TypeError("Missing required property 'role_name'")
            __props__.__dict__["role_name"] = role_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["trust_policy_document"] = trust_policy_document
            __props__.__dict__["create_date"] = None
            __props__.__dict__["is_service_linked_role"] = None
            __props__.__dict__["role_id"] = None
            __props__.__dict__["trn"] = None
            __props__.__dict__["update_date"] = None
        super(Role, __self__).__init__(
            'volcenginecc:iam/role:Role',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            create_date: Optional[pulumi.Input[builtins.str]] = None,
            description: Optional[pulumi.Input[builtins.str]] = None,
            display_name: Optional[pulumi.Input[builtins.str]] = None,
            is_service_linked_role: Optional[pulumi.Input[builtins.int]] = None,
            max_session_duration: Optional[pulumi.Input[builtins.int]] = None,
            policies: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RolePolicyArgs', 'RolePolicyArgsDict']]]]] = None,
            role_id: Optional[pulumi.Input[builtins.int]] = None,
            role_name: Optional[pulumi.Input[builtins.str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['RoleTagArgs', 'RoleTagArgsDict']]]]] = None,
            trn: Optional[pulumi.Input[builtins.str]] = None,
            trust_policy_document: Optional[pulumi.Input[builtins.str]] = None,
            update_date: Optional[pulumi.Input[builtins.str]] = None) -> 'Role':
        """
        Get an existing Role resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] create_date: 角色创建时间。
        :param pulumi.Input[builtins.str] description: 角色描述，长度不超过128。
        :param pulumi.Input[builtins.str] display_name: 角色显示名，长度不超过64。
        :param pulumi.Input[builtins.int] is_service_linked_role: 是否是服务关联角色, 0否，1是。
        :param pulumi.Input[builtins.int] max_session_duration: 角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        :param pulumi.Input[builtins.int] role_id: 角色ID。
        :param pulumi.Input[builtins.str] role_name: 角色名，长度1~64，支持英文、数字和.-_符号。
        :param pulumi.Input[builtins.str] trn: 角色TRN。
        :param pulumi.Input[builtins.str] trust_policy_document: 角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        :param pulumi.Input[builtins.str] update_date: 角色更新时间。
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleState.__new__(_RoleState)

        __props__.__dict__["create_date"] = create_date
        __props__.__dict__["description"] = description
        __props__.__dict__["display_name"] = display_name
        __props__.__dict__["is_service_linked_role"] = is_service_linked_role
        __props__.__dict__["max_session_duration"] = max_session_duration
        __props__.__dict__["policies"] = policies
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["role_name"] = role_name
        __props__.__dict__["tags"] = tags
        __props__.__dict__["trn"] = trn
        __props__.__dict__["trust_policy_document"] = trust_policy_document
        __props__.__dict__["update_date"] = update_date
        return Role(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> pulumi.Output[builtins.str]:
        """
        角色创建时间。
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        角色描述，长度不超过128。
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Output[builtins.str]:
        """
        角色显示名，长度不超过64。
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="isServiceLinkedRole")
    def is_service_linked_role(self) -> pulumi.Output[builtins.int]:
        """
        是否是服务关联角色, 0否，1是。
        """
        return pulumi.get(self, "is_service_linked_role")

    @property
    @pulumi.getter(name="maxSessionDuration")
    def max_session_duration(self) -> pulumi.Output[builtins.int]:
        """
        角色最大会话时间，角色最大会话时间。用于限制角色扮演产生的临时安全凭证的有效期的最大范围。取值范围：3600~43200，单位为秒，默认为43200。
        """
        return pulumi.get(self, "max_session_duration")

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Output[Sequence['outputs.RolePolicy']]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[builtins.int]:
        """
        角色ID。
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Output[builtins.str]:
        """
        角色名，长度1~64，支持英文、数字和.-_符号。
        """
        return pulumi.get(self, "role_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Sequence['outputs.RoleTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def trn(self) -> pulumi.Output[builtins.str]:
        """
        角色TRN。
        """
        return pulumi.get(self, "trn")

    @property
    @pulumi.getter(name="trustPolicyDocument")
    def trust_policy_document(self) -> pulumi.Output[builtins.str]:
        """
        角色信任策略，信任策略遵循IAM的策略语法中基于资源的策略规则。
        """
        return pulumi.get(self, "trust_policy_document")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[builtins.str]:
        """
        角色更新时间。
        """
        return pulumi.get(self, "update_date")

