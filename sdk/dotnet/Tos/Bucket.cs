// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Tos
{
    /// <summary>
    /// 存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:tos/bucket:Bucket example "name"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:tos/bucket:Bucket")]
    public partial class Bucket : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 桶的访问控制权限。
        /// </summary>
        [Output("acl")]
        public Output<Outputs.BucketAcl> Acl { get; private set; } = null!;

        [Output("aclGrant")]
        public Output<Outputs.BucketAclGrant> AclGrant { get; private set; } = null!;

        /// <summary>
        /// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        /// </summary>
        [Output("azRedundancy")]
        public Output<string> AzRedundancy { get; private set; } = null!;

        /// <summary>
        /// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        /// </summary>
        [Output("bucketType")]
        public Output<string> BucketType { get; private set; } = null!;

        /// <summary>
        /// 桶的创建时间。
        /// </summary>
        [Output("creationDate")]
        public Output<string> CreationDate { get; private set; } = null!;

        /// <summary>
        /// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        /// </summary>
        [Output("enableVersionStatus")]
        public Output<string> EnableVersionStatus { get; private set; } = null!;

        /// <summary>
        /// 存储桶的 TOS 协议公网访问域名。
        /// </summary>
        [Output("extranetEndpoint")]
        public Output<string> ExtranetEndpoint { get; private set; } = null!;

        /// <summary>
        /// 存储桶的 TOS 协议私网访问域名
        /// </summary>
        [Output("intranetEndpoint")]
        public Output<string> IntranetEndpoint { get; private set; } = null!;

        [Output("lifecycleConfigs")]
        public Output<ImmutableArray<Outputs.BucketLifecycleConfig>> LifecycleConfigs { get; private set; } = null!;

        /// <summary>
        /// 桶所在区域。
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// 桶名。
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// 存储桶所属项目。
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        /// </summary>
        [Output("storageClass")]
        public Output<string> StorageClass { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.BucketTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Bucket resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bucket(string name, BucketArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:tos/bucket:Bucket", name, args ?? new BucketArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bucket(string name, Input<string> id, BucketState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:tos/bucket:Bucket", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bucket resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bucket Get(string name, Input<string> id, BucketState? state = null, CustomResourceOptions? options = null)
        {
            return new Bucket(name, id, state, options);
        }
    }

    public sealed class BucketArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 桶的访问控制权限。
        /// </summary>
        [Input("acl")]
        public Input<Inputs.BucketAclArgs>? Acl { get; set; }

        [Input("aclGrant")]
        public Input<Inputs.BucketAclGrantArgs>? AclGrant { get; set; }

        /// <summary>
        /// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        /// </summary>
        [Input("azRedundancy")]
        public Input<string>? AzRedundancy { get; set; }

        /// <summary>
        /// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        /// </summary>
        [Input("bucketType")]
        public Input<string>? BucketType { get; set; }

        /// <summary>
        /// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        /// </summary>
        [Input("enableVersionStatus")]
        public Input<string>? EnableVersionStatus { get; set; }

        [Input("lifecycleConfigs")]
        private InputList<Inputs.BucketLifecycleConfigArgs>? _lifecycleConfigs;
        public InputList<Inputs.BucketLifecycleConfigArgs> LifecycleConfigs
        {
            get => _lifecycleConfigs ?? (_lifecycleConfigs = new InputList<Inputs.BucketLifecycleConfigArgs>());
            set => _lifecycleConfigs = value;
        }

        /// <summary>
        /// 桶名。
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// 存储桶所属项目。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        /// </summary>
        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        [Input("tags")]
        private InputList<Inputs.BucketTagArgs>? _tags;
        public InputList<Inputs.BucketTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BucketTagArgs>());
            set => _tags = value;
        }

        public BucketArgs()
        {
        }
        public static new BucketArgs Empty => new BucketArgs();
    }

    public sealed class BucketState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 桶的访问控制权限。
        /// </summary>
        [Input("acl")]
        public Input<Inputs.BucketAclGetArgs>? Acl { get; set; }

        [Input("aclGrant")]
        public Input<Inputs.BucketAclGrantGetArgs>? AclGrant { get; set; }

        /// <summary>
        /// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        /// </summary>
        [Input("azRedundancy")]
        public Input<string>? AzRedundancy { get; set; }

        /// <summary>
        /// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        /// </summary>
        [Input("bucketType")]
        public Input<string>? BucketType { get; set; }

        /// <summary>
        /// 桶的创建时间。
        /// </summary>
        [Input("creationDate")]
        public Input<string>? CreationDate { get; set; }

        /// <summary>
        /// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        /// </summary>
        [Input("enableVersionStatus")]
        public Input<string>? EnableVersionStatus { get; set; }

        /// <summary>
        /// 存储桶的 TOS 协议公网访问域名。
        /// </summary>
        [Input("extranetEndpoint")]
        public Input<string>? ExtranetEndpoint { get; set; }

        /// <summary>
        /// 存储桶的 TOS 协议私网访问域名
        /// </summary>
        [Input("intranetEndpoint")]
        public Input<string>? IntranetEndpoint { get; set; }

        [Input("lifecycleConfigs")]
        private InputList<Inputs.BucketLifecycleConfigGetArgs>? _lifecycleConfigs;
        public InputList<Inputs.BucketLifecycleConfigGetArgs> LifecycleConfigs
        {
            get => _lifecycleConfigs ?? (_lifecycleConfigs = new InputList<Inputs.BucketLifecycleConfigGetArgs>());
            set => _lifecycleConfigs = value;
        }

        /// <summary>
        /// 桶所在区域。
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// 桶名。
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// 存储桶所属项目。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        /// </summary>
        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        [Input("tags")]
        private InputList<Inputs.BucketTagGetArgs>? _tags;
        public InputList<Inputs.BucketTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.BucketTagGetArgs>());
            set => _tags = value;
        }

        public BucketState()
        {
        }
        public static new BucketState Empty => new BucketState();
    }
}
