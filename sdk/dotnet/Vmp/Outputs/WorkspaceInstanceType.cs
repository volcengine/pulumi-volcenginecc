// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Vmp.Outputs
{

    [OutputType]
    public sealed class WorkspaceInstanceType
    {
        /// <summary>
        /// 最大活跃时序数。
        /// </summary>
        public readonly int? ActiveSeries;
        /// <summary>
        /// 可用区（az）数。
        /// </summary>
        public readonly int? AvailabilityZoneReplicas;
        /// <summary>
        /// 降采样策略。
        /// </summary>
        public readonly ImmutableArray<string> DownsamplingPeriods;
        /// <summary>
        /// 最大每秒写入样本数。
        /// </summary>
        public readonly int? IngestSamplesPerSecond;
        /// <summary>
        /// 最大查询并发数。
        /// </summary>
        public readonly int? QueryConcurrency;
        /// <summary>
        /// 最大查询 QPS。
        /// </summary>
        public readonly int? QueryPerSecond;
        /// <summary>
        /// 每个可用区（az）的数据副本数。
        /// </summary>
        public readonly int? ReplicasPerZone;
        /// <summary>
        /// 最长数据保留时间。
        /// </summary>
        public readonly string? RetentionPeriod;
        /// <summary>
        /// 最大每秒扫描样本数。
        /// </summary>
        public readonly int? ScanSamplesPerSecond;
        /// <summary>
        /// 最大每秒扫描时序数。
        /// </summary>
        public readonly int? ScanSeriesPerSecond;

        [OutputConstructor]
        private WorkspaceInstanceType(
            int? activeSeries,

            int? availabilityZoneReplicas,

            ImmutableArray<string> downsamplingPeriods,

            int? ingestSamplesPerSecond,

            int? queryConcurrency,

            int? queryPerSecond,

            int? replicasPerZone,

            string? retentionPeriod,

            int? scanSamplesPerSecond,

            int? scanSeriesPerSecond)
        {
            ActiveSeries = activeSeries;
            AvailabilityZoneReplicas = availabilityZoneReplicas;
            DownsamplingPeriods = downsamplingPeriods;
            IngestSamplesPerSecond = ingestSamplesPerSecond;
            QueryConcurrency = queryConcurrency;
            QueryPerSecond = queryPerSecond;
            ReplicasPerZone = replicasPerZone;
            RetentionPeriod = retentionPeriod;
            ScanSamplesPerSecond = scanSamplesPerSecond;
            ScanSeriesPerSecond = scanSeriesPerSecond;
        }
    }
}
