// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Filenas
{
    public static class GetInstance
    {
        /// <summary>
        /// Data Source schema for Volcengine::FileNAS::Instance
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("volcenginecc:filenas/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::FileNAS::Instance
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("volcenginecc:filenas/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::FileNAS::Instance
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("volcenginecc:filenas/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// 缓存型性能信息。
        /// </summary>
        public readonly Outputs.GetInstanceCachePerformanceResult CachePerformance;
        /// <summary>
        /// 文件系统容量。
        /// </summary>
        public readonly Outputs.GetInstanceCapacityResult Capacity;
        /// <summary>
        /// 计费类型，取值 PayAsYouGo，表示按量计费。
        /// </summary>
        public readonly string ChargeType;
        /// <summary>
        /// 创建时间
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// 描述信息。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 文件系统 ID。
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// 文件系统名称。
        /// </summary>
        public readonly string FileSystemName;
        /// <summary>
        /// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        /// </summary>
        public readonly string FileSystemType;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 所属项目，默认值为 default 项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        /// </summary>
        public readonly string ProtocolType;
        /// <summary>
        /// 快照数量
        /// </summary>
        public readonly int SnapshotCount;
        /// <summary>
        /// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// 文件系统状态
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 存储类型，取值Standard，表示标准型。
        /// </summary>
        public readonly string StorageType;
        /// <summary>
        /// 文件系统的标签信息
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceTagResult> Tags;
        /// <summary>
        /// 更新时间
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// 可用区 ID。
        /// </summary>
        public readonly string ZoneId;
        /// <summary>
        /// 可用区名称。
        /// </summary>
        public readonly string ZoneName;

        [OutputConstructor]
        private GetInstanceResult(
            Outputs.GetInstanceCachePerformanceResult cachePerformance,

            Outputs.GetInstanceCapacityResult capacity,

            string chargeType,

            string createTime,

            string description,

            string fileSystemId,

            string fileSystemName,

            string fileSystemType,

            string id,

            string projectName,

            string protocolType,

            int snapshotCount,

            string snapshotId,

            string status,

            string storageType,

            ImmutableArray<Outputs.GetInstanceTagResult> tags,

            string updateTime,

            string zoneId,

            string zoneName)
        {
            CachePerformance = cachePerformance;
            Capacity = capacity;
            ChargeType = chargeType;
            CreateTime = createTime;
            Description = description;
            FileSystemId = fileSystemId;
            FileSystemName = fileSystemName;
            FileSystemType = fileSystemType;
            Id = id;
            ProjectName = projectName;
            ProtocolType = protocolType;
            SnapshotCount = snapshotCount;
            SnapshotId = snapshotId;
            Status = status;
            StorageType = storageType;
            Tags = tags;
            UpdateTime = updateTime;
            ZoneId = zoneId;
            ZoneName = zoneName;
        }
    }
}
