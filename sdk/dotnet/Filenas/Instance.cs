// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Filenas
{
    /// <summary>
    /// 文件系统通过标准的 NFS 协议为您提供文件存储服务，用于网络文件远程访问，通过管理控制台创建挂载地址后，即可按需在客户端中通过标准的 POSIX 接口对文件系统进行访问。
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcenginecc = Pulumi.Volcenginecc;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fileNASInstanceDemo = new Volcenginecc.Filenas.Instance("FileNASInstanceDemo", new()
    ///     {
    ///         FileSystemName = "FileNASInstanceDemo",
    ///         Capacity = new Volcenginecc.Filenas.Inputs.InstanceCapacityArgs
    ///         {
    ///             Total = 105,
    ///         },
    ///         ChargeType = "PayAsYouGo",
    ///         FileSystemType = "Extreme",
    ///         ProtocolType = "NFS",
    ///         ZoneId = "cn-beijing-x",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:filenas/instance:Instance example "file_system_id"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:filenas/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 缓存型性能信息。
        /// </summary>
        [Output("cachePerformance")]
        public Output<Outputs.InstanceCachePerformance> CachePerformance { get; private set; } = null!;

        /// <summary>
        /// 文件系统容量。
        /// </summary>
        [Output("capacity")]
        public Output<Outputs.InstanceCapacity> Capacity { get; private set; } = null!;

        /// <summary>
        /// 计费类型，取值 PayAsYouGo，表示按量计费。
        /// </summary>
        [Output("chargeType")]
        public Output<string> ChargeType { get; private set; } = null!;

        /// <summary>
        /// 创建时间
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// 描述信息。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// 文件系统 ID。
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// 文件系统名称。
        /// </summary>
        [Output("fileSystemName")]
        public Output<string> FileSystemName { get; private set; } = null!;

        /// <summary>
        /// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        /// </summary>
        [Output("fileSystemType")]
        public Output<string> FileSystemType { get; private set; } = null!;

        /// <summary>
        /// 所属项目，默认值为 default 项目。
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        /// </summary>
        [Output("protocolType")]
        public Output<string> ProtocolType { get; private set; } = null!;

        /// <summary>
        /// 快照数量
        /// </summary>
        [Output("snapshotCount")]
        public Output<int> SnapshotCount { get; private set; } = null!;

        /// <summary>
        /// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        /// </summary>
        [Output("snapshotId")]
        public Output<string> SnapshotId { get; private set; } = null!;

        /// <summary>
        /// 文件系统状态
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// 存储类型，取值Standard，表示标准型。
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.InstanceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// 更新时间
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// 可用区 ID。
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// 可用区名称。
        /// </summary>
        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:filenas/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:filenas/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 缓存型性能信息。
        /// </summary>
        [Input("cachePerformance")]
        public Input<Inputs.InstanceCachePerformanceArgs>? CachePerformance { get; set; }

        /// <summary>
        /// 文件系统容量。
        /// </summary>
        [Input("capacity")]
        public Input<Inputs.InstanceCapacityArgs>? Capacity { get; set; }

        /// <summary>
        /// 计费类型，取值 PayAsYouGo，表示按量计费。
        /// </summary>
        [Input("chargeType", required: true)]
        public Input<string> ChargeType { get; set; } = null!;

        /// <summary>
        /// 描述信息。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 文件系统 ID。
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// 文件系统名称。
        /// </summary>
        [Input("fileSystemName", required: true)]
        public Input<string> FileSystemName { get; set; } = null!;

        /// <summary>
        /// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        /// </summary>
        [Input("fileSystemType", required: true)]
        public Input<string> FileSystemType { get; set; } = null!;

        /// <summary>
        /// 所属项目，默认值为 default 项目。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        /// </summary>
        [Input("protocolType", required: true)]
        public Input<string> ProtocolType { get; set; } = null!;

        /// <summary>
        /// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// 存储类型，取值Standard，表示标准型。
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstanceTagArgs>? _tags;
        public InputList<Inputs.InstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 可用区 ID。
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        /// <summary>
        /// 可用区名称。
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 缓存型性能信息。
        /// </summary>
        [Input("cachePerformance")]
        public Input<Inputs.InstanceCachePerformanceGetArgs>? CachePerformance { get; set; }

        /// <summary>
        /// 文件系统容量。
        /// </summary>
        [Input("capacity")]
        public Input<Inputs.InstanceCapacityGetArgs>? Capacity { get; set; }

        /// <summary>
        /// 计费类型，取值 PayAsYouGo，表示按量计费。
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// 创建时间
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// 描述信息。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 文件系统 ID。
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// 文件系统名称。
        /// </summary>
        [Input("fileSystemName")]
        public Input<string>? FileSystemName { get; set; }

        /// <summary>
        /// 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
        /// </summary>
        [Input("fileSystemType")]
        public Input<string>? FileSystemType { get; set; }

        /// <summary>
        /// 所属项目，默认值为 default 项目。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
        /// </summary>
        [Input("protocolType")]
        public Input<string>? ProtocolType { get; set; }

        /// <summary>
        /// 快照数量
        /// </summary>
        [Input("snapshotCount")]
        public Input<int>? SnapshotCount { get; set; }

        /// <summary>
        /// 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
        /// </summary>
        [Input("snapshotId")]
        public Input<string>? SnapshotId { get; set; }

        /// <summary>
        /// 文件系统状态
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// 存储类型，取值Standard，表示标准型。
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstanceTagGetArgs>? _tags;
        public InputList<Inputs.InstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// 可用区 ID。
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        /// <summary>
        /// 可用区名称。
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
