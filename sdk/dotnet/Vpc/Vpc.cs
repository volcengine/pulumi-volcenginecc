// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Vpc
{
    /// <summary>
    /// 私有网络为云上资源构建隔离的、自主配置的虚拟网络环境。可以在私有网络中自定义IP地址段、安全组、路由策略等网络特性，简单高效安全地管理云上资源。
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:vpc/vpc:Vpc example "vpc_id"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:vpc/vpc:Vpc")]
    public partial class Vpc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// VPC所属账号的ID。
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        [Output("associateCens")]
        public Output<ImmutableArray<Outputs.VpcAssociateCen>> AssociateCens { get; private set; } = null!;

        /// <summary>
        /// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        /// </summary>
        [Output("cidrBlock")]
        public Output<string> CidrBlock { get; private set; } = null!;

        /// <summary>
        /// 创建VPC的时间。
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&amp;分隔。不填则配置为默认DNS服务器地址。
        /// </summary>
        [Output("dnsServers")]
        public Output<ImmutableArray<string>> DnsServers { get; private set; } = null!;

        /// <summary>
        /// VPC 绑定的 IPv4 网关的 ID。
        /// </summary>
        [Output("ipv4GatewayId")]
        public Output<string> Ipv4GatewayId { get; private set; } = null!;

        /// <summary>
        /// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        /// </summary>
        [Output("ipv6CidrBlock")]
        public Output<string> Ipv6CidrBlock { get; private set; } = null!;

        /// <summary>
        /// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        /// </summary>
        [Output("isDefault")]
        public Output<bool> IsDefault { get; private set; } = null!;

        /// <summary>
        /// VPC中创建的NAT网关的ID。
        /// </summary>
        [Output("natGatewayIds")]
        public Output<ImmutableArray<string>> NatGatewayIds { get; private set; } = null!;

        /// <summary>
        /// VPC中的网络ACL的数量。
        /// </summary>
        [Output("networkAclNum")]
        public Output<string> NetworkAclNum { get; private set; } = null!;

        /// <summary>
        /// VPC所属项目的名称。不填默认加入default项目。
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// VPC关联的路由表ID。
        /// </summary>
        [Output("routeTableIds")]
        public Output<ImmutableArray<string>> RouteTableIds { get; private set; } = null!;

        /// <summary>
        /// VPC的辅助网段。
        /// </summary>
        [Output("secondaryCidrBlocks")]
        public Output<ImmutableArray<string>> SecondaryCidrBlocks { get; private set; } = null!;

        /// <summary>
        /// VPC中安全组的列表。
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// VPC中子网的列表。
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        /// </summary>
        [Output("supportIpv4Gateway")]
        public Output<bool> SupportIpv4Gateway { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.VpcTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// 更新VPC的时间。
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// VPC的用户网段。
        /// </summary>
        [Output("userCidrBlocks")]
        public Output<ImmutableArray<string>> UserCidrBlocks { get; private set; } = null!;

        /// <summary>
        /// VPC的ID。
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        /// </summary>
        [Output("vpcName")]
        public Output<string> VpcName { get; private set; } = null!;


        /// <summary>
        /// Create a Vpc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vpc(string name, VpcArgs? args = null, CustomResourceOptions? options = null)
            : base("volcenginecc:vpc/vpc:Vpc", name, args ?? new VpcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vpc(string name, Input<string> id, VpcState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:vpc/vpc:Vpc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vpc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vpc Get(string name, Input<string> id, VpcState? state = null, CustomResourceOptions? options = null)
        {
            return new Vpc(name, id, state, options);
        }
    }

    public sealed class VpcArgs : global::Pulumi.ResourceArgs
    {
        [Input("associateCens")]
        private InputList<Inputs.VpcAssociateCenArgs>? _associateCens;
        public InputList<Inputs.VpcAssociateCenArgs> AssociateCens
        {
            get => _associateCens ?? (_associateCens = new InputList<Inputs.VpcAssociateCenArgs>());
            set => _associateCens = value;
        }

        /// <summary>
        /// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&amp;分隔。不填则配置为默认DNS服务器地址。
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// VPC 绑定的 IPv4 网关的 ID。
        /// </summary>
        [Input("ipv4GatewayId")]
        public Input<string>? Ipv4GatewayId { get; set; }

        /// <summary>
        /// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        [Input("natGatewayIds")]
        private InputList<string>? _natGatewayIds;

        /// <summary>
        /// VPC中创建的NAT网关的ID。
        /// </summary>
        public InputList<string> NatGatewayIds
        {
            get => _natGatewayIds ?? (_natGatewayIds = new InputList<string>());
            set => _natGatewayIds = value;
        }

        /// <summary>
        /// VPC所属项目的名称。不填默认加入default项目。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("routeTableIds")]
        private InputList<string>? _routeTableIds;

        /// <summary>
        /// VPC关联的路由表ID。
        /// </summary>
        public InputList<string> RouteTableIds
        {
            get => _routeTableIds ?? (_routeTableIds = new InputList<string>());
            set => _routeTableIds = value;
        }

        [Input("secondaryCidrBlocks")]
        private InputList<string>? _secondaryCidrBlocks;

        /// <summary>
        /// VPC的辅助网段。
        /// </summary>
        public InputList<string> SecondaryCidrBlocks
        {
            get => _secondaryCidrBlocks ?? (_secondaryCidrBlocks = new InputList<string>());
            set => _secondaryCidrBlocks = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// VPC中安全组的列表。
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// VPC中子网的列表。
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        /// <summary>
        /// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        /// </summary>
        [Input("supportIpv4Gateway")]
        public Input<bool>? SupportIpv4Gateway { get; set; }

        [Input("tags")]
        private InputList<Inputs.VpcTagArgs>? _tags;
        public InputList<Inputs.VpcTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VpcTagArgs>());
            set => _tags = value;
        }

        [Input("userCidrBlocks")]
        private InputList<string>? _userCidrBlocks;

        /// <summary>
        /// VPC的用户网段。
        /// </summary>
        public InputList<string> UserCidrBlocks
        {
            get => _userCidrBlocks ?? (_userCidrBlocks = new InputList<string>());
            set => _userCidrBlocks = value;
        }

        /// <summary>
        /// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        /// </summary>
        [Input("vpcName")]
        public Input<string>? VpcName { get; set; }

        public VpcArgs()
        {
        }
        public static new VpcArgs Empty => new VpcArgs();
    }

    public sealed class VpcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// VPC所属账号的ID。
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("associateCens")]
        private InputList<Inputs.VpcAssociateCenGetArgs>? _associateCens;
        public InputList<Inputs.VpcAssociateCenGetArgs> AssociateCens
        {
            get => _associateCens ?? (_associateCens = new InputList<Inputs.VpcAssociateCenGetArgs>());
            set => _associateCens = value;
        }

        /// <summary>
        /// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        /// </summary>
        [Input("cidrBlock")]
        public Input<string>? CidrBlock { get; set; }

        /// <summary>
        /// 创建VPC的时间。
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("dnsServers")]
        private InputList<string>? _dnsServers;

        /// <summary>
        /// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&amp;分隔。不填则配置为默认DNS服务器地址。
        /// </summary>
        public InputList<string> DnsServers
        {
            get => _dnsServers ?? (_dnsServers = new InputList<string>());
            set => _dnsServers = value;
        }

        /// <summary>
        /// VPC 绑定的 IPv4 网关的 ID。
        /// </summary>
        [Input("ipv4GatewayId")]
        public Input<string>? Ipv4GatewayId { get; set; }

        /// <summary>
        /// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        /// </summary>
        [Input("ipv6CidrBlock")]
        public Input<string>? Ipv6CidrBlock { get; set; }

        /// <summary>
        /// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        /// </summary>
        [Input("isDefault")]
        public Input<bool>? IsDefault { get; set; }

        [Input("natGatewayIds")]
        private InputList<string>? _natGatewayIds;

        /// <summary>
        /// VPC中创建的NAT网关的ID。
        /// </summary>
        public InputList<string> NatGatewayIds
        {
            get => _natGatewayIds ?? (_natGatewayIds = new InputList<string>());
            set => _natGatewayIds = value;
        }

        /// <summary>
        /// VPC中的网络ACL的数量。
        /// </summary>
        [Input("networkAclNum")]
        public Input<string>? NetworkAclNum { get; set; }

        /// <summary>
        /// VPC所属项目的名称。不填默认加入default项目。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("routeTableIds")]
        private InputList<string>? _routeTableIds;

        /// <summary>
        /// VPC关联的路由表ID。
        /// </summary>
        public InputList<string> RouteTableIds
        {
            get => _routeTableIds ?? (_routeTableIds = new InputList<string>());
            set => _routeTableIds = value;
        }

        [Input("secondaryCidrBlocks")]
        private InputList<string>? _secondaryCidrBlocks;

        /// <summary>
        /// VPC的辅助网段。
        /// </summary>
        public InputList<string> SecondaryCidrBlocks
        {
            get => _secondaryCidrBlocks ?? (_secondaryCidrBlocks = new InputList<string>());
            set => _secondaryCidrBlocks = value;
        }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// VPC中安全组的列表。
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// VPC中子网的列表。
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        /// <summary>
        /// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        /// </summary>
        [Input("supportIpv4Gateway")]
        public Input<bool>? SupportIpv4Gateway { get; set; }

        [Input("tags")]
        private InputList<Inputs.VpcTagGetArgs>? _tags;
        public InputList<Inputs.VpcTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VpcTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 更新VPC的时间。
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        [Input("userCidrBlocks")]
        private InputList<string>? _userCidrBlocks;

        /// <summary>
        /// VPC的用户网段。
        /// </summary>
        public InputList<string> UserCidrBlocks
        {
            get => _userCidrBlocks ?? (_userCidrBlocks = new InputList<string>());
            set => _userCidrBlocks = value;
        }

        /// <summary>
        /// VPC的ID。
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        /// </summary>
        [Input("vpcName")]
        public Input<string>? VpcName { get; set; }

        public VpcState()
        {
        }
        public static new VpcState Empty => new VpcState();
    }
}
