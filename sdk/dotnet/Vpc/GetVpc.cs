// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Vpc
{
    public static class GetVpc
    {
        /// <summary>
        /// Data Source schema for Volcengine::VPC::VPC
        /// </summary>
        public static Task<GetVpcResult> InvokeAsync(GetVpcArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcResult>("volcenginecc:vpc/getVpc:getVpc", args ?? new GetVpcArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::VPC
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("volcenginecc:vpc/getVpc:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::VPC
        /// </summary>
        public static Output<GetVpcResult> Invoke(GetVpcInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcResult>("volcenginecc:vpc/getVpc:getVpc", args ?? new GetVpcInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetVpcArgs()
        {
        }
        public static new GetVpcArgs Empty => new GetVpcArgs();
    }

    public sealed class GetVpcInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetVpcInvokeArgs()
        {
        }
        public static new GetVpcInvokeArgs Empty => new GetVpcInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcResult
    {
        /// <summary>
        /// VPC所属账号的ID。
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// VPC关联的CEN信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcAssociateCenResult> AssociateCens;
        /// <summary>
        /// VPC的IPv4网段。您可以使用以下网段或其子集作为VPC的IPv4网段：192.168.0.0/16 ~ 24、10.0.0.0/8 ~ 24、172.16.0.0/12 ~ 24。
        /// </summary>
        public readonly string CidrBlock;
        /// <summary>
        /// 创建VPC的时间。
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// VPC的描述信息。长度限制为0~ 255个字符。不填默认为空字符串。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。不能以http://或https://开头。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// VPC的DNS服务器地址。单次调用数量上限为5个，每个DnsServer必须以合法IP形式给出。多个IP之间用&amp;分隔。不填则配置为默认DNS服务器地址。
        /// </summary>
        public readonly ImmutableArray<string> DnsServers;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// VPC 绑定的 IPv4 网关的 ID。
        /// </summary>
        public readonly string Ipv4GatewayId;
        /// <summary>
        /// VPC的IPv6网段。传入此参数后，参数Ipv6MaskLen不生效。参数Ipv6Isp传入非BGP后，参数Ipv6MaskLen和参数Ipv6CidrBlock二者必须传入一个。参数Ipv6Isp未传或传入BGP，此参数未传，则由系统自动分配IPv6网段。
        /// </summary>
        public readonly string Ipv6CidrBlock;
        /// <summary>
        /// 该VPC是否为默认VPC。true：默认VPC，表示该VPC是创建ECS实例时系统自动创建的VPC。false：非默认VPC，表示该VPC是用户手动创建的。
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// VPC中创建的NAT网关的ID。
        /// </summary>
        public readonly ImmutableArray<string> NatGatewayIds;
        /// <summary>
        /// VPC中的网络ACL的数量。
        /// </summary>
        public readonly string NetworkAclNum;
        /// <summary>
        /// VPC所属项目的名称。不填默认加入default项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// VPC关联的路由表ID。
        /// </summary>
        public readonly ImmutableArray<string> RouteTableIds;
        /// <summary>
        /// VPC的辅助网段。
        /// </summary>
        public readonly ImmutableArray<string> SecondaryCidrBlocks;
        /// <summary>
        /// VPC中安全组的列表。
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// VPC的状态。Creating：创建中。Pending：已创建。Available：可用。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// VPC中子网的列表。
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// VPC 是否启用 IPv4 网关。false（默认值）：不启用。true：启用。
        /// </summary>
        public readonly bool SupportIpv4Gateway;
        /// <summary>
        /// 私有网络绑定的标签。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcTagResult> Tags;
        /// <summary>
        /// 更新VPC的时间。
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// VPC的用户网段。
        /// </summary>
        public readonly ImmutableArray<string> UserCidrBlocks;
        /// <summary>
        /// VPC的ID。
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// VPC的名称。长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。不填默认为VPC实例的ID。不能以http://或https://开头。
        /// </summary>
        public readonly string VpcName;

        [OutputConstructor]
        private GetVpcResult(
            string accountId,

            ImmutableArray<Outputs.GetVpcAssociateCenResult> associateCens,

            string cidrBlock,

            string creationTime,

            string description,

            ImmutableArray<string> dnsServers,

            string id,

            string ipv4GatewayId,

            string ipv6CidrBlock,

            bool isDefault,

            ImmutableArray<string> natGatewayIds,

            string networkAclNum,

            string projectName,

            ImmutableArray<string> routeTableIds,

            ImmutableArray<string> secondaryCidrBlocks,

            ImmutableArray<string> securityGroupIds,

            string status,

            ImmutableArray<string> subnetIds,

            bool supportIpv4Gateway,

            ImmutableArray<Outputs.GetVpcTagResult> tags,

            string updateTime,

            ImmutableArray<string> userCidrBlocks,

            string vpcId,

            string vpcName)
        {
            AccountId = accountId;
            AssociateCens = associateCens;
            CidrBlock = cidrBlock;
            CreationTime = creationTime;
            Description = description;
            DnsServers = dnsServers;
            Id = id;
            Ipv4GatewayId = ipv4GatewayId;
            Ipv6CidrBlock = ipv6CidrBlock;
            IsDefault = isDefault;
            NatGatewayIds = natGatewayIds;
            NetworkAclNum = networkAclNum;
            ProjectName = projectName;
            RouteTableIds = routeTableIds;
            SecondaryCidrBlocks = secondaryCidrBlocks;
            SecurityGroupIds = securityGroupIds;
            Status = status;
            SubnetIds = subnetIds;
            SupportIpv4Gateway = supportIpv4Gateway;
            Tags = tags;
            UpdateTime = updateTime;
            UserCidrBlocks = userCidrBlocks;
            VpcId = vpcId;
            VpcName = vpcName;
        }
    }
}
