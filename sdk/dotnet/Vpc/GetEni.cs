// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Vpc
{
    public static class GetEni
    {
        /// <summary>
        /// Data Source schema for Volcengine::VPC::ENI
        /// </summary>
        public static Task<GetEniResult> InvokeAsync(GetEniArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEniResult>("volcenginecc:vpc/getEni:getEni", args ?? new GetEniArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::ENI
        /// </summary>
        public static Output<GetEniResult> Invoke(GetEniInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEniResult>("volcenginecc:vpc/getEni:getEni", args ?? new GetEniInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::ENI
        /// </summary>
        public static Output<GetEniResult> Invoke(GetEniInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEniResult>("volcenginecc:vpc/getEni:getEni", args ?? new GetEniInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEniArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetEniArgs()
        {
        }
        public static new GetEniArgs Empty => new GetEniArgs();
    }

    public sealed class GetEniInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetEniInvokeArgs()
        {
        }
        public static new GetEniInvokeArgs Empty => new GetEniInvokeArgs();
    }


    [OutputType]
    public sealed class GetEniResult
    {
        /// <summary>
        /// 网卡所有者ID。
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// 网卡创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 是否开启随云服务器实例删除，true为开启，false为不开启。
        /// </summary>
        public readonly bool DeleteOnTermination;
        /// <summary>
        /// 辅助网卡的描述信息。长度限制为0~ 255个字符，需要以字母、中文或数字开头；可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不填默认空字符串。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 网卡绑定实例的ID，如果网卡未挂载或参数ServiceManaged为true，则InstanceId返回值均为空。
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// 为网卡分配私网IPv6地址的数量，传入该参数，系统会自动从网卡所属子网中，分配相应数量的空闲私网IPv6地址，创建时与IPv6Sets不能同时传入。
        /// </summary>
        public readonly int Ipv6AddressCount;
        /// <summary>
        /// 网卡的IPv6地址列表，例如[2408::153:3921:XX:XX:7b12:1c5f, 2408:4008:2cf:XX:XX:dd1e:2a22:5ddf]。
        /// </summary>
        public readonly ImmutableArray<string> Ipv6Sets;
        /// <summary>
        /// 网卡的MAC地址。
        /// </summary>
        public readonly string MacAddress;
        /// <summary>
        /// 网卡ID。
        /// </summary>
        public readonly string NetworkInterfaceId;
        /// <summary>
        /// 网卡名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不填默认是辅助网卡的ID。
        /// </summary>
        public readonly string NetworkInterfaceName;
        /// <summary>
        /// 是否为网卡开启源/目的地址检查，开启后，系统会自动阻止源地址或目的地址不是当前网卡的流量，true为开启，false为不开启（默认值）。
        /// </summary>
        public readonly bool PortSecurityEnabled;
        /// <summary>
        /// 网卡的主私有IPv4地址，不支持修改地址，可以修改公网IP。如果指定，必须是对应子网中的一个空闲的私网IPv4地址，如果不指定，从对应子网中自动分配一个空闲的私网IPv4地址。例如：192.XX.XX.10。
        /// </summary>
        public readonly Outputs.GetEniPrimaryIpAddressResult PrimaryIpAddress;
        /// <summary>
        /// 网卡的私网IPv4地址列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEniPrivateIpSetResult> PrivateIpSets;
        /// <summary>
        /// 网卡所属项目的名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 为辅助网卡自动分配辅助私网IPv4地址数量，取值1~49。创建时不能与PrivateIpSets同时传入。
        /// </summary>
        public readonly int SecondaryPrivateIpAddressCount;
        /// <summary>
        /// 辅助网卡加入一个或多个安全组的ID。
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// 是否为火山引擎官方服务网卡，true为是，false为否。
        /// </summary>
        public readonly bool ServiceManaged;
        /// <summary>
        /// 网卡的绑定状态。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 辅助网卡所在子网的ID。
        /// </summary>
        public readonly string SubnetId;
        public readonly ImmutableArray<Outputs.GetEniTagResult> Tags;
        /// <summary>
        /// 网卡类型。primary：主网卡，secondary：辅助网卡
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// 更新网卡的时间。
        /// </summary>
        public readonly string UpdatedTime;
        /// <summary>
        /// 网卡所属的VPC的ID。
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// 网卡所属VPC的名称。
        /// </summary>
        public readonly string VpcName;
        /// <summary>
        /// 网卡所属可用区的ID。
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetEniResult(
            string accountId,

            string createdTime,

            bool deleteOnTermination,

            string description,

            string id,

            string instanceId,

            int ipv6AddressCount,

            ImmutableArray<string> ipv6Sets,

            string macAddress,

            string networkInterfaceId,

            string networkInterfaceName,

            bool portSecurityEnabled,

            Outputs.GetEniPrimaryIpAddressResult primaryIpAddress,

            ImmutableArray<Outputs.GetEniPrivateIpSetResult> privateIpSets,

            string projectName,

            int secondaryPrivateIpAddressCount,

            ImmutableArray<string> securityGroupIds,

            bool serviceManaged,

            string status,

            string subnetId,

            ImmutableArray<Outputs.GetEniTagResult> tags,

            string type,

            string updatedTime,

            string vpcId,

            string vpcName,

            string zoneId)
        {
            AccountId = accountId;
            CreatedTime = createdTime;
            DeleteOnTermination = deleteOnTermination;
            Description = description;
            Id = id;
            InstanceId = instanceId;
            Ipv6AddressCount = ipv6AddressCount;
            Ipv6Sets = ipv6Sets;
            MacAddress = macAddress;
            NetworkInterfaceId = networkInterfaceId;
            NetworkInterfaceName = networkInterfaceName;
            PortSecurityEnabled = portSecurityEnabled;
            PrimaryIpAddress = primaryIpAddress;
            PrivateIpSets = privateIpSets;
            ProjectName = projectName;
            SecondaryPrivateIpAddressCount = secondaryPrivateIpAddressCount;
            SecurityGroupIds = securityGroupIds;
            ServiceManaged = serviceManaged;
            Status = status;
            SubnetId = subnetId;
            Tags = tags;
            Type = type;
            UpdatedTime = updatedTime;
            VpcId = vpcId;
            VpcName = vpcName;
            ZoneId = zoneId;
        }
    }
}
