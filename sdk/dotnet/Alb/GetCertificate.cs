// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Alb
{
    public static class GetCertificate
    {
        /// <summary>
        /// Data Source schema for Volcengine::ALB::Certificate
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("volcenginecc:alb/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ALB::Certificate
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("volcenginecc:alb/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ALB::Certificate
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("volcenginecc:alb/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// 证书ID。
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        /// </summary>
        public readonly string CertificateName;
        /// <summary>
        /// 证书类型，取值：CA：CA证书、Server：服务器证书。
        /// </summary>
        public readonly string CertificateType;
        /// <summary>
        /// 证书创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 证书描述。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 证书域名。
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// 证书过期时间。
        /// </summary>
        public readonly string ExpiredAt;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 证书关联的监听器列表。
        /// </summary>
        public readonly ImmutableArray<string> Listeners;
        /// <summary>
        /// 服务器证书的私钥，当证书类型为Server时必填。
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// 项目名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 服务器证书的公钥。
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        /// </summary>
        public readonly string San;
        /// <summary>
        /// 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 标签列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateTagResult> Tags;

        [OutputConstructor]
        private GetCertificateResult(
            string certificateId,

            string certificateName,

            string certificateType,

            string createdTime,

            string description,

            string domainName,

            string expiredAt,

            string id,

            ImmutableArray<string> listeners,

            string privateKey,

            string projectName,

            string publicKey,

            string san,

            string status,

            ImmutableArray<Outputs.GetCertificateTagResult> tags)
        {
            CertificateId = certificateId;
            CertificateName = certificateName;
            CertificateType = certificateType;
            CreatedTime = createdTime;
            Description = description;
            DomainName = domainName;
            ExpiredAt = expiredAt;
            Id = id;
            Listeners = listeners;
            PrivateKey = privateKey;
            ProjectName = projectName;
            PublicKey = publicKey;
            San = san;
            Status = status;
            Tags = tags;
        }
    }
}
