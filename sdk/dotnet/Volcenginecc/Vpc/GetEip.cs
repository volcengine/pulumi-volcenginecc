// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Vpc
{
    public static class GetEip
    {
        /// <summary>
        /// Data Source schema for Volcengine::VPC::EIP
        /// </summary>
        public static Task<GetEipResult> InvokeAsync(GetEipArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEipResult>("volcenginecc:vpc/getEip:getEip", args ?? new GetEipArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::EIP
        /// </summary>
        public static Output<GetEipResult> Invoke(GetEipInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEipResult>("volcenginecc:vpc/getEip:getEip", args ?? new GetEipInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::EIP
        /// </summary>
        public static Output<GetEipResult> Invoke(GetEipInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEipResult>("volcenginecc:vpc/getEip:getEip", args ?? new GetEipInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEipArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetEipArgs()
        {
        }
        public static new GetEipArgs Empty => new GetEipArgs();
    }

    public sealed class GetEipInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetEipInvokeArgs()
        {
        }
        public static new GetEipInvokeArgs Empty => new GetEipInvokeArgs();
    }


    [OutputType]
    public sealed class GetEipResult
    {
        /// <summary>
        /// 公网IP的ID。
        /// </summary>
        public readonly string AllocationId;
        /// <summary>
        /// 公网IP的带宽上限，默认为“1”，单位：Mbps,BillingType传入1：取值范围1 ~ 500。BillingType传入2：取值范围1 ~ 500。BillingType传入3：取值范围1 ~ 200。
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// 共享带宽包的ID，表示将公网IP加入到共享带宽包。公网IP加入到共享带宽包必须同时满足如下条件：二者的安全防护类型相同。二者的地域相同。公网IP的计费方式必须是按量计费。共享带宽包为IPv4类型。
        /// </summary>
        public readonly string BandwidthPackageId;
        /// <summary>
        /// 公网IP的计费方式。取值如下：1：包年包月。2：按量计费-按带宽上限计费。3：按量计费-按实际流量计费。
        /// </summary>
        public readonly int BillingType;
        /// <summary>
        /// 公网IP是否被锁定。Normal: 正常。FinancialLocked: 被锁定。
        /// </summary>
        public readonly string BusinessStatus;
        /// <summary>
        /// 公网IP的创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 预期资源强制回收时间。包年包月公网IP，此参数有返回值。按量计费公网IP，仅欠费冻结时，此参数有返回值。
        /// </summary>
        public readonly string DeletedTime;
        /// <summary>
        /// 公网IP的描述信息。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 绑定公网IP时是否启用直通模式。请严格按照以下枚举值的大小写输入，不要传入其他取值。false（默认）：不使用直通模式。true：使用直通模式。
        /// </summary>
        public readonly bool DirectMode;
        /// <summary>
        /// 公网IP地址。
        /// </summary>
        public readonly string EipAddress;
        /// <summary>
        /// 公网IP的到期时间。包年包月，返回值为到期时间。按量计费，返回值为空。
        /// </summary>
        public readonly string ExpiredTime;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 当前绑定的实例ID。
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// 当前绑定的实例类型。Nat：公网NAT网关。NetworkInterface: 弹性网卡。ClbInstance: 负载均衡。EcsInstance：云服务器。HaVip：高可用虚拟IP。
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// 申请申请指定的公网IP地址。仅支持填写使用后释放的IP地址，不填则表示自动分配。指定的公网IP地址
        /// </summary>
        public readonly string IpAddress;
        /// <summary>
        /// IP地址池的ID。
        /// </summary>
        public readonly string IpAddressPoolId;
        /// <summary>
        /// 是否被封禁。true：是。false：否。
        /// </summary>
        public readonly bool IsBlocked;
        /// <summary>
        /// 线路类型。BGP：BGP（多线）。ChinaMobile：中国移动静态单线。ChinaTelecom：中国电信静态单线。ChinaUnicom：中国联通静态单线。SingleLine*BGP：BGP单线。Fusion*BGP：融合BGP。ChinaMobile*Value：中国移动惠选型静态单线。ChinaUnicom*Value：中国联通惠选型静态单线。ChinaTelecom_Value：中国电信惠选型静态单线。
        /// </summary>
        public readonly string Isp;
        /// <summary>
        /// 公网IP被锁定的原因。financial: 因欠费被锁定。unlock: 欠费关停后充值恢复过程中。空值 : 没有被锁定。
        /// </summary>
        public readonly string LockReason;
        /// <summary>
        /// 公网IP的名称。
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// 资源冻结时间。仅当资源因为欠费冻结，此参数才会有返回值。
        /// </summary>
        public readonly string OverdueTime;
        /// <summary>
        /// 购买包年包月公网IP的时长，默认为“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36、48、60。当PeriodUnit传入2，Period取值范围：1～5。
        /// </summary>
        public readonly int Period;
        /// <summary>
        /// 购买包年包月公网IP时长的单位。取值如下：1（默认值）：月。2 ：年。
        /// </summary>
        public readonly int PeriodUnit;
        /// <summary>
        /// 要绑定公网IP的实例的私网IP地址。只支持传入云服务ECS主网卡的私网IP地址和辅助网卡IP地址。若不填写：InstanceType传入EcsInstance，则绑定云服务器ECS主网卡的主私网IP地址。InstanceType传入NetworkInterface，则绑定辅助网卡主私网IP地址。
        /// </summary>
        public readonly string PrivateIpAddress;
        /// <summary>
        /// 公网IP所属项目的名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 是否随云服务器实例删除。仅按量计费公网IP有效。开启后，当云服务器实例被系统自动回收（退订24小时后、到期回收、欠费回收）或被调用DeleteInstances接口时，公网IP随其一同释放。true：是。false：否。
        /// </summary>
        public readonly bool ReleaseWithInstance;
        /// <summary>
        /// 自动续费的时长，取值范围1、2、3、6、12，单位：月。若RenewType传入2，则必须传入RenewPeriodTimes
        /// </summary>
        public readonly int RenewPeriodTimes;
        /// <summary>
        /// 包年包月公网IP续费的方式。取值如下：1（默认值）：手动续费。2：自动续费。3：到期不续费。
        /// </summary>
        public readonly int RenewType;
        /// <summary>
        /// DDoS原生防护（企业版）ID。您可以调用 DescInstanceList 接口，查询DDoS原生防护（企业版）的ID。当SecurityProtectionTypes传入AntiDDoS_Enhanced时，此参数必须传入。
        /// </summary>
        public readonly int SecurityProtectionInstanceId;
        /// <summary>
        /// 防护类型。AntiDDoS_Enhanced：增强防护类型的公网IP，可以加入到DDoS原生防护（企业版）实例。空值：默认防护类型的公网IP。
        /// </summary>
        public readonly ImmutableArray<string> SecurityProtectionTypes;
        /// <summary>
        /// 是否由服务管理
        /// </summary>
        public readonly bool ServiceManaged;
        /// <summary>
        /// 公网IP的状态。Attaching：绑定中。Detaching：解绑中。Attached：已绑定。Available：可用。Deleting：删除中。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 公网IP的标签信息
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEipTagResult> Tags;
        /// <summary>
        /// 更新公网IP的时间。
        /// </summary>
        public readonly string UpdatedTime;

        [OutputConstructor]
        private GetEipResult(
            string allocationId,

            int bandwidth,

            string bandwidthPackageId,

            int billingType,

            string businessStatus,

            string createdTime,

            string deletedTime,

            string description,

            bool directMode,

            string eipAddress,

            string expiredTime,

            string id,

            string instanceId,

            string instanceType,

            string ipAddress,

            string ipAddressPoolId,

            bool isBlocked,

            string isp,

            string lockReason,

            string name,

            string overdueTime,

            int period,

            int periodUnit,

            string privateIpAddress,

            string projectName,

            bool releaseWithInstance,

            int renewPeriodTimes,

            int renewType,

            int securityProtectionInstanceId,

            ImmutableArray<string> securityProtectionTypes,

            bool serviceManaged,

            string status,

            ImmutableArray<Outputs.GetEipTagResult> tags,

            string updatedTime)
        {
            AllocationId = allocationId;
            Bandwidth = bandwidth;
            BandwidthPackageId = bandwidthPackageId;
            BillingType = billingType;
            BusinessStatus = businessStatus;
            CreatedTime = createdTime;
            DeletedTime = deletedTime;
            Description = description;
            DirectMode = directMode;
            EipAddress = eipAddress;
            ExpiredTime = expiredTime;
            Id = id;
            InstanceId = instanceId;
            InstanceType = instanceType;
            IpAddress = ipAddress;
            IpAddressPoolId = ipAddressPoolId;
            IsBlocked = isBlocked;
            Isp = isp;
            LockReason = lockReason;
            Name = name;
            OverdueTime = overdueTime;
            Period = period;
            PeriodUnit = periodUnit;
            PrivateIpAddress = privateIpAddress;
            ProjectName = projectName;
            ReleaseWithInstance = releaseWithInstance;
            RenewPeriodTimes = renewPeriodTimes;
            RenewType = renewType;
            SecurityProtectionInstanceId = securityProtectionInstanceId;
            SecurityProtectionTypes = securityProtectionTypes;
            ServiceManaged = serviceManaged;
            Status = status;
            Tags = tags;
            UpdatedTime = updatedTime;
        }
    }
}
