// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Vpc
{
    public static class GetBandwidthPackage
    {
        /// <summary>
        /// Data Source schema for Volcengine::VPC::BandwidthPackage
        /// </summary>
        public static Task<GetBandwidthPackageResult> InvokeAsync(GetBandwidthPackageArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBandwidthPackageResult>("volcenginecc:vpc/getBandwidthPackage:getBandwidthPackage", args ?? new GetBandwidthPackageArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::BandwidthPackage
        /// </summary>
        public static Output<GetBandwidthPackageResult> Invoke(GetBandwidthPackageInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBandwidthPackageResult>("volcenginecc:vpc/getBandwidthPackage:getBandwidthPackage", args ?? new GetBandwidthPackageInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::BandwidthPackage
        /// </summary>
        public static Output<GetBandwidthPackageResult> Invoke(GetBandwidthPackageInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBandwidthPackageResult>("volcenginecc:vpc/getBandwidthPackage:getBandwidthPackage", args ?? new GetBandwidthPackageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBandwidthPackageArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetBandwidthPackageArgs()
        {
        }
        public static new GetBandwidthPackageArgs Empty => new GetBandwidthPackageArgs();
    }

    public sealed class GetBandwidthPackageInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetBandwidthPackageInvokeArgs()
        {
        }
        public static new GetBandwidthPackageInvokeArgs Empty => new GetBandwidthPackageInvokeArgs();
    }


    [OutputType]
    public sealed class GetBandwidthPackageResult
    {
        /// <summary>
        /// 共享带宽包的带宽上限，单位：Mbps。BillingType传入1：取值范围5 ~ 5000，BillingType传入2、3、4：取值范围2 ~ 5000。
        /// </summary>
        public readonly int Bandwidth;
        /// <summary>
        /// 带宽包ID
        /// </summary>
        public readonly string BandwidthPackageId;
        /// <summary>
        /// 带宽包名称，长度限制为1 ~ 128个字符，需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-）。
        /// </summary>
        public readonly string BandwidthPackageName;
        /// <summary>
        /// 共享带宽包的计费方式。取值如下：1：包年包月。2 : 按带宽上限计费（默认值）。3：按主流量计费。4 : 按传统95计费（保底比例默认20%）。
        /// </summary>
        public readonly int BillingType;
        /// <summary>
        /// 计费状态
        /// </summary>
        public readonly string BusinessStatus;
        /// <summary>
        /// 创建时间
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 删除时间
        /// </summary>
        public readonly string DeletedTime;
        /// <summary>
        /// 描述信息，长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 加入共享带宽包的公网IP信息列表。必须同时满足如下条件：1、二者线路类型相同。2、二者安全防护类型相同。3、二者地域相同。4、公网IP或IPv6公网带宽为按量计费。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBandwidthPackageEipAddressResult> EipAddresses;
        /// <summary>
        /// 是否启用双栈，取值如下：true：启用双栈。false：不启用双栈。
        /// </summary>
        public readonly bool EnableDualStack;
        /// <summary>
        /// 过期时间
        /// </summary>
        public readonly string ExpiredTime;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 线路类型，默认为BGP。BGP：BGP（多线）。1、若您的账号已申请并开通了静态单线权限，则可传入如下取值：1.1、ChinaMobile：中国移动静态单线。1.2、ChinaTelecom：中国电信静态单线。1.3、ChinaUnicom：中国联通静态单线。2、若您的账号已申请并开通了BGP单线权限，则可传入SingleLine*BGP。3、若您的账号已申请并开通了精品BGP权限，则可传入Premium*BGP。4、若您的账号已申请并开通了融合BGP权限，则可传入Fusion*BGP。5、若您的账号已申请并开通了惠选型静态单线权限，则可传入如下取值：5.1、ChinaMobile*Value：中国移动惠选型静态单线。5.2、ChinaUnicom*Value：中国联通惠选型静态单线。5.3、ChinaTelecom*Value：中国电信惠选型静态单线。
        /// </summary>
        public readonly string Isp;
        /// <summary>
        /// 欠费时间
        /// </summary>
        public readonly string OverdueTime;
        /// <summary>
        /// 购买包年包月共享带宽包的时长，默认“1”。当PeriodUnit传入1，Period取值范围：1~9、12、24、36。当PeriodUnit传入2，Period取值范围：1～3。
        /// </summary>
        public readonly int Period;
        /// <summary>
        /// 购买包年包月共享带宽包时长的单位，取值如下：1：月（默认值）。2 ：年。
        /// </summary>
        public readonly int PeriodUnit;
        /// <summary>
        /// 项目名称，不填默认加入default项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 共享带宽包的IP协议，取值如下：Dual-stack：双栈协议类型。IPv4：IPv4协议类型协议。仅BillingType传2或4时，本参数支持传入Dual-stack
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// 95计费保底比例，单位%，仅95计费共享带宽包实例返回此参数。
        /// </summary>
        public readonly int Ratio;
        /// <summary>
        /// 共享带宽包的的安全防护类型。AntiDDoS_Enhanced：创建增强防护类型的共享带宽包，即创建支持添加基础防护类型公网IP的共享带宽包。不填则表示基础防护类型的共享带宽包，即创建支持添加增强防护类型公网IP的共享带宽包。
        /// </summary>
        public readonly ImmutableArray<string> SecurityProtectionTypes;
        /// <summary>
        /// 共享带宽包的状态。Creating：创建中。Available：可用。Deleting：删除中。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 标签列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBandwidthPackageTagResult> Tags;
        /// <summary>
        /// 更新时间
        /// </summary>
        public readonly string UpdatedTime;

        [OutputConstructor]
        private GetBandwidthPackageResult(
            int bandwidth,

            string bandwidthPackageId,

            string bandwidthPackageName,

            int billingType,

            string businessStatus,

            string createdTime,

            string deletedTime,

            string description,

            ImmutableArray<Outputs.GetBandwidthPackageEipAddressResult> eipAddresses,

            bool enableDualStack,

            string expiredTime,

            string id,

            string isp,

            string overdueTime,

            int period,

            int periodUnit,

            string projectName,

            string protocol,

            int ratio,

            ImmutableArray<string> securityProtectionTypes,

            string status,

            ImmutableArray<Outputs.GetBandwidthPackageTagResult> tags,

            string updatedTime)
        {
            Bandwidth = bandwidth;
            BandwidthPackageId = bandwidthPackageId;
            BandwidthPackageName = bandwidthPackageName;
            BillingType = billingType;
            BusinessStatus = businessStatus;
            CreatedTime = createdTime;
            DeletedTime = deletedTime;
            Description = description;
            EipAddresses = eipAddresses;
            EnableDualStack = enableDualStack;
            ExpiredTime = expiredTime;
            Id = id;
            Isp = isp;
            OverdueTime = overdueTime;
            Period = period;
            PeriodUnit = periodUnit;
            ProjectName = projectName;
            Protocol = protocol;
            Ratio = ratio;
            SecurityProtectionTypes = securityProtectionTypes;
            Status = status;
            Tags = tags;
            UpdatedTime = updatedTime;
        }
    }
}
