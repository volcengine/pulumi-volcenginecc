// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Vpc
{
    public static class GetSubnet
    {
        /// <summary>
        /// Data Source schema for Volcengine::VPC::Subnet
        /// </summary>
        public static Task<GetSubnetResult> InvokeAsync(GetSubnetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSubnetResult>("volcenginecc:vpc/getSubnet:getSubnet", args ?? new GetSubnetArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::Subnet
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("volcenginecc:vpc/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::VPC::Subnet
        /// </summary>
        public static Output<GetSubnetResult> Invoke(GetSubnetInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetSubnetResult>("volcenginecc:vpc/getSubnet:getSubnet", args ?? new GetSubnetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSubnetArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetSubnetArgs()
        {
        }
        public static new GetSubnetArgs Empty => new GetSubnetArgs();
    }

    public sealed class GetSubnetInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetSubnetInvokeArgs()
        {
        }
        public static new GetSubnetInvokeArgs Empty => new GetSubnetInvokeArgs();
    }


    [OutputType]
    public sealed class GetSubnetResult
    {
        /// <summary>
        /// 子网所属账户的ID。
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// 子网中可用的IP地址数量。
        /// </summary>
        public readonly int AvailableIpAddressCount;
        /// <summary>
        /// 子网的IPv4网段。
        /// </summary>
        public readonly string CidrBlock;
        /// <summary>
        /// 子网的创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 子网的描述信息。长度限制为0~ 255个字符。需要以字母、中文或数字开头。可包含英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。），不能以http://或https://开头。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 开启/关闭IPv6功能。仅当子网所属的VPC开通IPv6功能时，可配置此参数。1、true：开启。2、false：关闭。仅当子网内没有分配IPv6地址的云资源时，可配置此取值。
        /// </summary>
        public readonly bool EnableIpv6;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 子网IPv6网段。1、创建/修改时请输入子网IPv6网段的最后8比特位（子网的掩码固定为/64）。2、仅当EnableIpv6设置为true时，支持配置本参数。3、取值范围：0～255。掩码固定为/64。
        /// </summary>
        public readonly string Ipv6CidrBlock;
        /// <summary>
        /// 该子网是否为默认子网。1、true：默认子网，表示该子网是创建ECS实例时系统自动创建的子网。2、false：非默认子网，表示该子网是用户手动创建的。
        /// </summary>
        public readonly bool IsDefault;
        /// <summary>
        /// 子网关联的网络ACL的ID。
        /// </summary>
        public readonly string NetworkAclId;
        /// <summary>
        /// 子网所在VPC实例所属项目的名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 路由表信息。
        /// </summary>
        public readonly Outputs.GetSubnetRouteTableResult RouteTable;
        /// <summary>
        /// 子网的状态。1、Pending：表示配置中。2、Available：表示可用。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 待修改信息的子网的ID。
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// 子网的名称，长度限制为1 ~ 128个字符。需要以字母、中文或数字开头，可包含点号（.）、下划线（_）和短横线（-），不能以http://或https://开头，不填默认是子网的ID。
        /// </summary>
        public readonly string SubnetName;
        public readonly ImmutableArray<Outputs.GetSubnetTagResult> Tags;
        /// <summary>
        /// 子网下可用IP总数。
        /// </summary>
        public readonly int TotalIpv4Count;
        /// <summary>
        /// 子网的更新时间。
        /// </summary>
        public readonly string UpdatedTime;
        /// <summary>
        /// 子网所属VPC的ID。
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// 要创建的子网所属的可用区ID，更多可用区信息请参见地域和可用区。
        /// </summary>
        public readonly string ZoneId;

        [OutputConstructor]
        private GetSubnetResult(
            string accountId,

            int availableIpAddressCount,

            string cidrBlock,

            string createdTime,

            string description,

            bool enableIpv6,

            string id,

            string ipv6CidrBlock,

            bool isDefault,

            string networkAclId,

            string projectName,

            Outputs.GetSubnetRouteTableResult routeTable,

            string status,

            string subnetId,

            string subnetName,

            ImmutableArray<Outputs.GetSubnetTagResult> tags,

            int totalIpv4Count,

            string updatedTime,

            string vpcId,

            string zoneId)
        {
            AccountId = accountId;
            AvailableIpAddressCount = availableIpAddressCount;
            CidrBlock = cidrBlock;
            CreatedTime = createdTime;
            Description = description;
            EnableIpv6 = enableIpv6;
            Id = id;
            Ipv6CidrBlock = ipv6CidrBlock;
            IsDefault = isDefault;
            NetworkAclId = networkAclId;
            ProjectName = projectName;
            RouteTable = routeTable;
            Status = status;
            SubnetId = subnetId;
            SubnetName = subnetName;
            Tags = tags;
            TotalIpv4Count = totalIpv4Count;
            UpdatedTime = updatedTime;
            VpcId = vpcId;
            ZoneId = zoneId;
        }
    }
}
