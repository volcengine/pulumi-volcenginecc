// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Alb
{
    public static class GetServerGroup
    {
        /// <summary>
        /// Data Source schema for Volcengine::ALB::ServerGroup
        /// </summary>
        public static Task<GetServerGroupResult> InvokeAsync(GetServerGroupArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerGroupResult>("volcenginecc:alb/getServerGroup:getServerGroup", args ?? new GetServerGroupArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ALB::ServerGroup
        /// </summary>
        public static Output<GetServerGroupResult> Invoke(GetServerGroupInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerGroupResult>("volcenginecc:alb/getServerGroup:getServerGroup", args ?? new GetServerGroupInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ALB::ServerGroup
        /// </summary>
        public static Output<GetServerGroupResult> Invoke(GetServerGroupInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerGroupResult>("volcenginecc:alb/getServerGroup:getServerGroup", args ?? new GetServerGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetServerGroupArgs()
        {
        }
        public static new GetServerGroupArgs Empty => new GetServerGroupArgs();
    }

    public sealed class GetServerGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetServerGroupInvokeArgs()
        {
        }
        public static new GetServerGroupInvokeArgs Empty => new GetServerGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerGroupResult
    {
        /// <summary>
        /// 后端服务器组的创建时间。
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// 后端服务器组的描述。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 服务器组健康检查配置信息。
        /// </summary>
        public readonly Outputs.GetServerGroupHealthCheckResult HealthCheck;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 服务器组的IP地址类型。目前只支持 IPv4
        /// </summary>
        public readonly string IpAddressType;
        /// <summary>
        /// 后端服务器组关联的监听器信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerGroupListenerResult> Listeners;
        /// <summary>
        /// 后端服务器组所属项目名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 后端协议：HTTP，HTTPS。
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        public readonly string Scheduler;
        /// <summary>
        /// 服务器组内后端服务器的个数。
        /// </summary>
        public readonly int ServerCount;
        /// <summary>
        /// 后端服务器组的ID。
        /// </summary>
        public readonly string ServerGroupId;
        /// <summary>
        /// 后端服务器组的名称。
        /// </summary>
        public readonly string ServerGroupName;
        /// <summary>
        /// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
        /// </summary>
        public readonly string ServerGroupType;
        /// <summary>
        /// 后端服务器组中服务器的信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerGroupServerResult> Servers;
        /// <summary>
        /// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 会话保持功能的参数信息。
        /// </summary>
        public readonly Outputs.GetServerGroupStickySessionConfigResult StickySessionConfig;
        /// <summary>
        /// 标签信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerGroupTagResult> Tags;
        /// <summary>
        /// 后端服务器组的最近操作时间。
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// 后端服务器组所属 Vpc 的 ID。
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetServerGroupResult(
            string createTime,

            string description,

            Outputs.GetServerGroupHealthCheckResult healthCheck,

            string id,

            string ipAddressType,

            ImmutableArray<Outputs.GetServerGroupListenerResult> listeners,

            string projectName,

            string protocol,

            string scheduler,

            int serverCount,

            string serverGroupId,

            string serverGroupName,

            string serverGroupType,

            ImmutableArray<Outputs.GetServerGroupServerResult> servers,

            string status,

            Outputs.GetServerGroupStickySessionConfigResult stickySessionConfig,

            ImmutableArray<Outputs.GetServerGroupTagResult> tags,

            string updateTime,

            string vpcId)
        {
            CreateTime = createTime;
            Description = description;
            HealthCheck = healthCheck;
            Id = id;
            IpAddressType = ipAddressType;
            Listeners = listeners;
            ProjectName = projectName;
            Protocol = protocol;
            Scheduler = scheduler;
            ServerCount = serverCount;
            ServerGroupId = serverGroupId;
            ServerGroupName = serverGroupName;
            ServerGroupType = serverGroupType;
            Servers = servers;
            Status = status;
            StickySessionConfig = stickySessionConfig;
            Tags = tags;
            UpdateTime = updateTime;
            VpcId = vpcId;
        }
    }
}
