// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Alb
{
    /// <summary>
    /// 每个 ALB 实例至少要有一个监听器才能正常工作。监听器接收客户端请求，并根据您配置的转发规则和负载均衡算法将请求分发到后端服务器上。您可以在一个 ALB 实例下创建多个监听器，并为监听器配置不同的监听协议，以处理使用不同协议的客户端请求。
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:alb/listener:Listener example "listener_id"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:alb/listener:Listener")]
    public partial class Listener : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
        /// </summary>
        [Output("accessLogRecordCustomizedHeadersEnabled")]
        public Output<string> AccessLogRecordCustomizedHeadersEnabled { get; private set; } = null!;

        /// <summary>
        /// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
        /// </summary>
        [Output("aclIds")]
        public Output<ImmutableArray<string>> AclIds { get; private set; } = null!;

        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
        /// </summary>
        [Output("aclStatus")]
        public Output<string> AclStatus { get; private set; } = null!;

        /// <summary>
        /// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
        /// </summary>
        [Output("aclType")]
        public Output<string> AclType { get; private set; } = null!;

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
        /// </summary>
        [Output("caCertificateId")]
        public Output<string> CaCertificateId { get; private set; } = null!;

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
        /// </summary>
        [Output("caCertificateSource")]
        public Output<string> CaCertificateSource { get; private set; } = null!;

        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
        /// </summary>
        [Output("certCenterCertificateId")]
        public Output<string> CertCenterCertificateId { get; private set; } = null!;

        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
        /// </summary>
        [Output("certificateSource")]
        public Output<string> CertificateSource { get; private set; } = null!;

        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// 个性化配置ID，未绑定时值为空字符串。
        /// </summary>
        [Output("customizedCfgId")]
        public Output<string> CustomizedCfgId { get; private set; } = null!;

        /// <summary>
        /// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("domainExtensions")]
        public Output<ImmutableArray<Outputs.ListenerDomainExtension>> DomainExtensions { get; private set; } = null!;

        /// <summary>
        /// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
        /// </summary>
        [Output("enableHttp2")]
        public Output<string> EnableHttp2 { get; private set; } = null!;

        /// <summary>
        /// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
        /// </summary>
        [Output("enableQuic")]
        public Output<string> EnableQuic { get; private set; } = null!;

        /// <summary>
        /// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
        /// </summary>
        [Output("enabled")]
        public Output<string> Enabled { get; private set; } = null!;

        /// <summary>
        /// 监听器 ID。
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        /// <summary>
        /// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
        /// </summary>
        [Output("listenerName")]
        public Output<string> ListenerName { get; private set; } = null!;

        /// <summary>
        /// 监听器所属的负载均衡实例 ID。
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
        /// </summary>
        [Output("pcaLeafCertificateId")]
        public Output<string> PcaLeafCertificateId { get; private set; } = null!;

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
        /// </summary>
        [Output("pcaRootCaCertificateId")]
        public Output<string> PcaRootCaCertificateId { get; private set; } = null!;

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
        /// </summary>
        [Output("pcaSubCaCertificateId")]
        public Output<string> PcaSubCaCertificateId { get; private set; } = null!;

        /// <summary>
        /// 监听器的监听端口，取值：1 - 65535 。
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// 监听器所属项目名称。
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// 监听器的默认服务器组。
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;

        [Output("serverGroups")]
        public Output<ImmutableArray<Outputs.ListenerServerGroup>> ServerGroups { get; private set; } = null!;

        /// <summary>
        /// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.ListenerTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// 监听器最近一次的操作时间。
        /// </summary>
        [Output("updatedTime")]
        public Output<string> UpdatedTime { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:alb/listener:Listener", name, args ?? new ListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:alb/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
        /// </summary>
        [Input("accessLogRecordCustomizedHeadersEnabled")]
        public Input<string>? AccessLogRecordCustomizedHeadersEnabled { get; set; }

        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
        /// </summary>
        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
        /// </summary>
        [Input("caCertificateSource")]
        public Input<string>? CaCertificateSource { get; set; }

        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
        /// </summary>
        [Input("certCenterCertificateId")]
        public Input<string>? CertCenterCertificateId { get; set; }

        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// 个性化配置ID，未绑定时值为空字符串。
        /// </summary>
        [Input("customizedCfgId")]
        public Input<string>? CustomizedCfgId { get; set; }

        /// <summary>
        /// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainExtensions")]
        private InputList<Inputs.ListenerDomainExtensionArgs>? _domainExtensions;
        public InputList<Inputs.ListenerDomainExtensionArgs> DomainExtensions
        {
            get => _domainExtensions ?? (_domainExtensions = new InputList<Inputs.ListenerDomainExtensionArgs>());
            set => _domainExtensions = value;
        }

        /// <summary>
        /// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
        /// </summary>
        [Input("enableHttp2")]
        public Input<string>? EnableHttp2 { get; set; }

        /// <summary>
        /// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
        /// </summary>
        [Input("enableQuic")]
        public Input<string>? EnableQuic { get; set; }

        /// <summary>
        /// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// 监听器所属的负载均衡实例 ID。
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
        /// </summary>
        [Input("pcaLeafCertificateId")]
        public Input<string>? PcaLeafCertificateId { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
        /// </summary>
        [Input("pcaRootCaCertificateId")]
        public Input<string>? PcaRootCaCertificateId { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
        /// </summary>
        [Input("pcaSubCaCertificateId")]
        public Input<string>? PcaSubCaCertificateId { get; set; }

        /// <summary>
        /// 监听器的监听端口，取值：1 - 65535 。
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// 监听器的默认服务器组。
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        [Input("serverGroups")]
        private InputList<Inputs.ListenerServerGroupArgs>? _serverGroups;
        public InputList<Inputs.ListenerServerGroupArgs> ServerGroups
        {
            get => _serverGroups ?? (_serverGroups = new InputList<Inputs.ListenerServerGroupArgs>());
            set => _serverGroups = value;
        }

        [Input("tags")]
        private InputList<Inputs.ListenerTagArgs>? _tags;
        public InputList<Inputs.ListenerTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ListenerTagArgs>());
            set => _tags = value;
        }

        public ListenerArgs()
        {
        }
        public static new ListenerArgs Empty => new ListenerArgs();
    }

    public sealed class ListenerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
        /// </summary>
        [Input("accessLogRecordCustomizedHeadersEnabled")]
        public Input<string>? AccessLogRecordCustomizedHeadersEnabled { get; set; }

        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
        /// </summary>
        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
        /// </summary>
        [Input("caCertificateSource")]
        public Input<string>? CaCertificateSource { get; set; }

        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
        /// </summary>
        [Input("certCenterCertificateId")]
        public Input<string>? CertCenterCertificateId { get; set; }

        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// 个性化配置ID，未绑定时值为空字符串。
        /// </summary>
        [Input("customizedCfgId")]
        public Input<string>? CustomizedCfgId { get; set; }

        /// <summary>
        /// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("domainExtensions")]
        private InputList<Inputs.ListenerDomainExtensionGetArgs>? _domainExtensions;
        public InputList<Inputs.ListenerDomainExtensionGetArgs> DomainExtensions
        {
            get => _domainExtensions ?? (_domainExtensions = new InputList<Inputs.ListenerDomainExtensionGetArgs>());
            set => _domainExtensions = value;
        }

        /// <summary>
        /// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
        /// </summary>
        [Input("enableHttp2")]
        public Input<string>? EnableHttp2 { get; set; }

        /// <summary>
        /// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
        /// </summary>
        [Input("enableQuic")]
        public Input<string>? EnableQuic { get; set; }

        /// <summary>
        /// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// 监听器 ID。
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        /// <summary>
        /// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// 监听器所属的负载均衡实例 ID。
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
        /// </summary>
        [Input("pcaLeafCertificateId")]
        public Input<string>? PcaLeafCertificateId { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
        /// </summary>
        [Input("pcaRootCaCertificateId")]
        public Input<string>? PcaRootCaCertificateId { get; set; }

        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
        /// </summary>
        [Input("pcaSubCaCertificateId")]
        public Input<string>? PcaSubCaCertificateId { get; set; }

        /// <summary>
        /// 监听器的监听端口，取值：1 - 65535 。
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// 监听器所属项目名称。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// 监听器的默认服务器组。
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        [Input("serverGroups")]
        private InputList<Inputs.ListenerServerGroupGetArgs>? _serverGroups;
        public InputList<Inputs.ListenerServerGroupGetArgs> ServerGroups
        {
            get => _serverGroups ?? (_serverGroups = new InputList<Inputs.ListenerServerGroupGetArgs>());
            set => _serverGroups = value;
        }

        /// <summary>
        /// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.ListenerTagGetArgs>? _tags;
        public InputList<Inputs.ListenerTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ListenerTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 监听器最近一次的操作时间。
        /// </summary>
        [Input("updatedTime")]
        public Input<string>? UpdatedTime { get; set; }

        public ListenerState()
        {
        }
        public static new ListenerState Empty => new ListenerState();
    }
}
