// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Alb
{
    public static class GetListener
    {
        /// <summary>
        /// Data Source schema for Volcengine::ALB::Listener
        /// </summary>
        public static Task<GetListenerResult> InvokeAsync(GetListenerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetListenerResult>("volcenginecc:alb/getListener:getListener", args ?? new GetListenerArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ALB::Listener
        /// </summary>
        public static Output<GetListenerResult> Invoke(GetListenerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetListenerResult>("volcenginecc:alb/getListener:getListener", args ?? new GetListenerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ALB::Listener
        /// </summary>
        public static Output<GetListenerResult> Invoke(GetListenerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetListenerResult>("volcenginecc:alb/getListener:getListener", args ?? new GetListenerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetListenerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetListenerArgs()
        {
        }
        public static new GetListenerArgs Empty => new GetListenerArgs();
    }

    public sealed class GetListenerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetListenerInvokeArgs()
        {
        }
        public static new GetListenerInvokeArgs Empty => new GetListenerInvokeArgs();
    }


    [OutputType]
    public sealed class GetListenerResult
    {
        /// <summary>
        /// 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
        /// </summary>
        public readonly string AccessLogRecordCustomizedHeadersEnabled;
        /// <summary>
        /// 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
        /// </summary>
        public readonly ImmutableArray<string> AclIds;
        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
        /// </summary>
        public readonly string AclStatus;
        /// <summary>
        /// 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
        /// </summary>
        public readonly string AclType;
        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
        /// </summary>
        public readonly string CaCertificateId;
        /// <summary>
        /// HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
        /// </summary>
        public readonly string CaCertificateSource;
        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 cert_center 时必传。
        /// </summary>
        public readonly string CertCenterCertificateId;
        /// <summary>
        /// HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
        /// </summary>
        public readonly string CertificateSource;
        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 个性化配置ID，未绑定时值为空字符串。
        /// </summary>
        public readonly string CustomizedCfgId;
        /// <summary>
        /// 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// HTTPS监听器关联的扩展域名列表。一个HTTPS监听器能关联的扩展域名上限为20个。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListenerDomainExtensionResult> DomainExtensions;
        /// <summary>
        /// HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
        /// </summary>
        public readonly string EnableHttp2;
        /// <summary>
        /// QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
        /// </summary>
        public readonly string EnableQuic;
        /// <summary>
        /// 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
        /// </summary>
        public readonly string Enabled;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 监听器 ID。
        /// </summary>
        public readonly string ListenerId;
        /// <summary>
        /// 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
        /// </summary>
        public readonly string ListenerName;
        /// <summary>
        /// 监听器所属的负载均衡实例 ID。
        /// </summary>
        public readonly string LoadBalancerId;
        /// <summary>
        /// HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pca_leaf 时必传。
        /// </summary>
        public readonly string PcaLeafCertificateId;
        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_root 时，必须指定 PcaRootCACertificateId 参数。
        /// </summary>
        public readonly string PcaRootCaCertificateId;
        /// <summary>
        /// HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pca_sub 时，必须指定 PcaSubCACertificateId 参数。
        /// </summary>
        public readonly string PcaSubCaCertificateId;
        /// <summary>
        /// 监听器的监听端口，取值：1 - 65535 。
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// 监听器所属项目名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// 监听器的默认服务器组。
        /// </summary>
        public readonly string ServerGroupId;
        /// <summary>
        /// 关联监听器的所有服务器组。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListenerServerGroupResult> ServerGroups;
        /// <summary>
        /// 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 监听器所属标签。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListenerTagResult> Tags;
        /// <summary>
        /// 监听器最近一次的操作时间。
        /// </summary>
        public readonly string UpdatedTime;

        [OutputConstructor]
        private GetListenerResult(
            string accessLogRecordCustomizedHeadersEnabled,

            ImmutableArray<string> aclIds,

            string aclStatus,

            string aclType,

            string caCertificateId,

            string caCertificateSource,

            string certCenterCertificateId,

            string certificateId,

            string certificateSource,

            string createdTime,

            string customizedCfgId,

            string description,

            ImmutableArray<Outputs.GetListenerDomainExtensionResult> domainExtensions,

            string enableHttp2,

            string enableQuic,

            string enabled,

            string id,

            string listenerId,

            string listenerName,

            string loadBalancerId,

            string pcaLeafCertificateId,

            string pcaRootCaCertificateId,

            string pcaSubCaCertificateId,

            int port,

            string projectName,

            string protocol,

            string serverGroupId,

            ImmutableArray<Outputs.GetListenerServerGroupResult> serverGroups,

            string status,

            ImmutableArray<Outputs.GetListenerTagResult> tags,

            string updatedTime)
        {
            AccessLogRecordCustomizedHeadersEnabled = accessLogRecordCustomizedHeadersEnabled;
            AclIds = aclIds;
            AclStatus = aclStatus;
            AclType = aclType;
            CaCertificateId = caCertificateId;
            CaCertificateSource = caCertificateSource;
            CertCenterCertificateId = certCenterCertificateId;
            CertificateId = certificateId;
            CertificateSource = certificateSource;
            CreatedTime = createdTime;
            CustomizedCfgId = customizedCfgId;
            Description = description;
            DomainExtensions = domainExtensions;
            EnableHttp2 = enableHttp2;
            EnableQuic = enableQuic;
            Enabled = enabled;
            Id = id;
            ListenerId = listenerId;
            ListenerName = listenerName;
            LoadBalancerId = loadBalancerId;
            PcaLeafCertificateId = pcaLeafCertificateId;
            PcaRootCaCertificateId = pcaRootCaCertificateId;
            PcaSubCaCertificateId = pcaSubCaCertificateId;
            Port = port;
            ProjectName = projectName;
            Protocol = protocol;
            ServerGroupId = serverGroupId;
            ServerGroups = serverGroups;
            Status = status;
            Tags = tags;
            UpdatedTime = updatedTime;
        }
    }
}
