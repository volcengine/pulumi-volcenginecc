// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Alb
{
    /// <summary>
    /// 服务器组是后端服务器的逻辑集合。ALB 实例按照您配置的转发规则确定客户端请求将被转发到的服务器组。然后，ALB 实例根据您配置的负载均衡策略，将请求分发给服务器组内的后端服务器。后端服务器接收并处理请求。
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:alb/serverGroup:ServerGroup example "server_group_id"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:alb/serverGroup:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 后端服务器组的创建时间。
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组的描述。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// 服务器组健康检查配置信息。
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ServerGroupHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// 服务器组的IP地址类型。目前只支持 IPv4
        /// </summary>
        [Output("ipAddressType")]
        public Output<string> IpAddressType { get; private set; } = null!;

        [Output("listeners")]
        public Output<ImmutableArray<Outputs.ServerGroupListener>> Listeners { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组所属项目名称。
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// 后端协议：HTTP，HTTPS。
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        [Output("scheduler")]
        public Output<string> Scheduler { get; private set; } = null!;

        /// <summary>
        /// 服务器组内后端服务器的个数。
        /// </summary>
        [Output("serverCount")]
        public Output<int> ServerCount { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组的ID。
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组的名称。
        /// </summary>
        [Output("serverGroupName")]
        public Output<string> ServerGroupName { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
        /// </summary>
        [Output("serverGroupType")]
        public Output<string> ServerGroupType { get; private set; } = null!;

        [Output("servers")]
        public Output<ImmutableArray<Outputs.ServerGroupServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// 会话保持功能的参数信息。
        /// </summary>
        [Output("stickySessionConfig")]
        public Output<Outputs.ServerGroupStickySessionConfig> StickySessionConfig { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.ServerGroupTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组的最近操作时间。
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// 后端服务器组所属 Vpc 的 ID。
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:alb/serverGroup:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:alb/serverGroup:ServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, state, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 后端服务器组的描述。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 服务器组健康检查配置信息。
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ServerGroupHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// 服务器组的IP地址类型。目前只支持 IPv4
        /// </summary>
        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        /// <summary>
        /// 后端服务器组所属项目名称。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 后端协议：HTTP，HTTPS。
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// 后端服务器组的名称。
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ServerGroupServerArgs>? _servers;
        public InputList<Inputs.ServerGroupServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ServerGroupServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// 会话保持功能的参数信息。
        /// </summary>
        [Input("stickySessionConfig")]
        public Input<Inputs.ServerGroupStickySessionConfigArgs>? StickySessionConfig { get; set; }

        [Input("tags")]
        private InputList<Inputs.ServerGroupTagArgs>? _tags;
        public InputList<Inputs.ServerGroupTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ServerGroupTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 后端服务器组所属 Vpc 的 ID。
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }

    public sealed class ServerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 后端服务器组的创建时间。
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// 后端服务器组的描述。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 服务器组健康检查配置信息。
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ServerGroupHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// 服务器组的IP地址类型。目前只支持 IPv4
        /// </summary>
        [Input("ipAddressType")]
        public Input<string>? IpAddressType { get; set; }

        [Input("listeners")]
        private InputList<Inputs.ServerGroupListenerGetArgs>? _listeners;
        public InputList<Inputs.ServerGroupListenerGetArgs> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<Inputs.ServerGroupListenerGetArgs>());
            set => _listeners = value;
        }

        /// <summary>
        /// 后端服务器组所属项目名称。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 后端协议：HTTP，HTTPS。
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// 调度算法。取值：wrr：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// 服务器组内后端服务器的个数。
        /// </summary>
        [Input("serverCount")]
        public Input<int>? ServerCount { get; set; }

        /// <summary>
        /// 后端服务器组的ID。
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        /// <summary>
        /// 后端服务器组的名称。
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// 后端服务器组的类型。instance：服务器类型，该类型服务器组支持添加 ecs、eni 实例作为后端服务器。ip：IP类型，该类型服务器组支持添加 IP 地址作为后端服务器。
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        [Input("servers")]
        private InputList<Inputs.ServerGroupServerGetArgs>? _servers;
        public InputList<Inputs.ServerGroupServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.ServerGroupServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// 服务器组状态。Creating：创建中。Active：运行中。Configuring：配置中。Deleting：删除中。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// 会话保持功能的参数信息。
        /// </summary>
        [Input("stickySessionConfig")]
        public Input<Inputs.ServerGroupStickySessionConfigGetArgs>? StickySessionConfig { get; set; }

        [Input("tags")]
        private InputList<Inputs.ServerGroupTagGetArgs>? _tags;
        public InputList<Inputs.ServerGroupTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ServerGroupTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 后端服务器组的最近操作时间。
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// 后端服务器组所属 Vpc 的 ID。
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerGroupState()
        {
        }
        public static new ServerGroupState Empty => new ServerGroupState();
    }
}
