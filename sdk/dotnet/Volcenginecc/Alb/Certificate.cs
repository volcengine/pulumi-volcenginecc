// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Alb
{
    /// <summary>
    /// ALB 支持上传服务器证书、CA 证书到控制台，对上传的证书单独管理。
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcenginecc = Volcengine.Pulumi.Volcenginecc;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var aLBCertificateDemo = new Volcenginecc.Alb.Certificate("ALBCertificateDemo", new()
    ///     {
    ///         CertificateName = "ALBCertificateDemo",
    ///         CertificateType = "CA",
    ///         PublicKey = "-----BEGIN CERTIFICATE-----xxxx-----END CERTIFICATE-----",
    ///         Description = "ALBCertificateDemo description",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcenginecc.Alb.Inputs.CertificateTagArgs
    ///             {
    ///                 Key = "env",
    ///                 Value = "test",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:alb/certificate:Certificate example "certificate_id|certificate_type"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:alb/certificate:Certificate")]
    public partial class Certificate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 证书ID。
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        /// </summary>
        [Output("certificateName")]
        public Output<string> CertificateName { get; private set; } = null!;

        /// <summary>
        /// 证书类型，取值：CA：CA证书、Server：服务器证书。
        /// </summary>
        [Output("certificateType")]
        public Output<string> CertificateType { get; private set; } = null!;

        /// <summary>
        /// 证书创建时间。
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// 证书描述。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// 证书域名。
        /// </summary>
        [Output("domainName")]
        public Output<string> DomainName { get; private set; } = null!;

        /// <summary>
        /// 证书过期时间。
        /// </summary>
        [Output("expiredAt")]
        public Output<string> ExpiredAt { get; private set; } = null!;

        /// <summary>
        /// 证书关联的监听器列表。
        /// </summary>
        [Output("listeners")]
        public Output<ImmutableArray<string>> Listeners { get; private set; } = null!;

        /// <summary>
        /// 服务器证书的私钥，当证书类型为Server时必填。
        /// </summary>
        [Output("privateKey")]
        public Output<string> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// 项目名称。
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// 服务器证书的公钥。
        /// </summary>
        [Output("publicKey")]
        public Output<string> PublicKey { get; private set; } = null!;

        /// <summary>
        /// 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        /// </summary>
        [Output("san")]
        public Output<string> San { get; private set; } = null!;

        /// <summary>
        /// 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.CertificateTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Certificate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Certificate(string name, CertificateArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:alb/certificate:Certificate", name, args ?? new CertificateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Certificate(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:alb/certificate:Certificate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Certificate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Certificate Get(string name, Input<string> id, CertificateState? state = null, CustomResourceOptions? options = null)
        {
            return new Certificate(name, id, state, options);
        }
    }

    public sealed class CertificateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        /// </summary>
        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        /// <summary>
        /// 证书类型，取值：CA：CA证书、Server：服务器证书。
        /// </summary>
        [Input("certificateType", required: true)]
        public Input<string> CertificateType { get; set; } = null!;

        /// <summary>
        /// 证书描述。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 服务器证书的私钥，当证书类型为Server时必填。
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// 项目名称。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 服务器证书的公钥。
        /// </summary>
        [Input("publicKey", required: true)]
        public Input<string> PublicKey { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.CertificateTagArgs>? _tags;
        public InputList<Inputs.CertificateTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.CertificateTagArgs>());
            set => _tags = value;
        }

        public CertificateArgs()
        {
        }
        public static new CertificateArgs Empty => new CertificateArgs();
    }

    public sealed class CertificateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// 证书ID。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
        /// </summary>
        [Input("certificateName")]
        public Input<string>? CertificateName { get; set; }

        /// <summary>
        /// 证书类型，取值：CA：CA证书、Server：服务器证书。
        /// </summary>
        [Input("certificateType")]
        public Input<string>? CertificateType { get; set; }

        /// <summary>
        /// 证书创建时间。
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// 证书描述。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 证书域名。
        /// </summary>
        [Input("domainName")]
        public Input<string>? DomainName { get; set; }

        /// <summary>
        /// 证书过期时间。
        /// </summary>
        [Input("expiredAt")]
        public Input<string>? ExpiredAt { get; set; }

        [Input("listeners")]
        private InputList<string>? _listeners;

        /// <summary>
        /// 证书关联的监听器列表。
        /// </summary>
        public InputList<string> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<string>());
            set => _listeners = value;
        }

        /// <summary>
        /// 服务器证书的私钥，当证书类型为Server时必填。
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// 项目名称。
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// 服务器证书的公钥。
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
        /// </summary>
        [Input("san")]
        public Input<string>? San { get; set; }

        /// <summary>
        /// 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.CertificateTagGetArgs>? _tags;
        public InputList<Inputs.CertificateTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.CertificateTagGetArgs>());
            set => _tags = value;
        }

        public CertificateState()
        {
        }
        public static new CertificateState Empty => new CertificateState();
    }
}
