// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Transitrouter
{
    public static class GetTransitRouterRouteEntry
    {
        /// <summary>
        /// Data Source schema for Volcengine::TransitRouter::TransitRouterRouteEntry
        /// </summary>
        public static Task<GetTransitRouterRouteEntryResult> InvokeAsync(GetTransitRouterRouteEntryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTransitRouterRouteEntryResult>("volcenginecc:transitrouter/getTransitRouterRouteEntry:getTransitRouterRouteEntry", args ?? new GetTransitRouterRouteEntryArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::TransitRouter::TransitRouterRouteEntry
        /// </summary>
        public static Output<GetTransitRouterRouteEntryResult> Invoke(GetTransitRouterRouteEntryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransitRouterRouteEntryResult>("volcenginecc:transitrouter/getTransitRouterRouteEntry:getTransitRouterRouteEntry", args ?? new GetTransitRouterRouteEntryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::TransitRouter::TransitRouterRouteEntry
        /// </summary>
        public static Output<GetTransitRouterRouteEntryResult> Invoke(GetTransitRouterRouteEntryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTransitRouterRouteEntryResult>("volcenginecc:transitrouter/getTransitRouterRouteEntry:getTransitRouterRouteEntry", args ?? new GetTransitRouterRouteEntryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTransitRouterRouteEntryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTransitRouterRouteEntryArgs()
        {
        }
        public static new GetTransitRouterRouteEntryArgs Empty => new GetTransitRouterRouteEntryArgs();
    }

    public sealed class GetTransitRouterRouteEntryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTransitRouterRouteEntryInvokeArgs()
        {
        }
        public static new GetTransitRouterRouteEntryInvokeArgs Empty => new GetTransitRouterRouteEntryInvokeArgs();
    }


    [OutputType]
    public sealed class GetTransitRouterRouteEntryResult
    {
        /// <summary>
        /// 路由条目的AS路径。
        /// </summary>
        public readonly ImmutableArray<string> AsPaths;
        /// <summary>
        /// 路由条目的创建时间。
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// TR路由表路由条目的描述信息。必须以字母、数字或中文开头，可包含字母、数字、中文和以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ~ 255个字符。不传入该参数或该参数不传入数值时，默认为空字符串。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 路由条目的目标网段。
        /// </summary>
        public readonly string DestinationCidrBlock;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 路由条目的状态。Available：可用。Creating：创建中。Pending：配置中。Deleting：删除中。Conflicted：未生效。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// TR路由条目的ID。
        /// </summary>
        public readonly string TransitRouterRouteEntryId;
        /// <summary>
        /// 路由条目的名称。
        /// </summary>
        public readonly string TransitRouterRouteEntryName;
        /// <summary>
        /// 路由条目的下一跳ID。
        /// </summary>
        public readonly string TransitRouterRouteEntryNextHopId;
        /// <summary>
        /// 路由条目的下一跳类型。取值如下：Attachment：网络实例，表示匹配该路由条目的流量会被转发到指定的网络实例。BlackHole：黑洞，表示匹配该路由条目的流量会被丢弃。
        /// </summary>
        public readonly string TransitRouterRouteEntryNextHopType;
        /// <summary>
        /// 路由条目的类型。Static：静态路由。Propagated：自动学习路由。
        /// </summary>
        public readonly string TransitRouterRouteEntryType;
        /// <summary>
        /// 中转路由器实例关联的路由表的ID。
        /// </summary>
        public readonly string TransitRouterRouteTableId;
        /// <summary>
        /// 路由条目的更新时间。
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetTransitRouterRouteEntryResult(
            ImmutableArray<string> asPaths,

            string creationTime,

            string description,

            string destinationCidrBlock,

            string id,

            string status,

            string transitRouterRouteEntryId,

            string transitRouterRouteEntryName,

            string transitRouterRouteEntryNextHopId,

            string transitRouterRouteEntryNextHopType,

            string transitRouterRouteEntryType,

            string transitRouterRouteTableId,

            string updateTime)
        {
            AsPaths = asPaths;
            CreationTime = creationTime;
            Description = description;
            DestinationCidrBlock = destinationCidrBlock;
            Id = id;
            Status = status;
            TransitRouterRouteEntryId = transitRouterRouteEntryId;
            TransitRouterRouteEntryName = transitRouterRouteEntryName;
            TransitRouterRouteEntryNextHopId = transitRouterRouteEntryNextHopId;
            TransitRouterRouteEntryNextHopType = transitRouterRouteEntryNextHopType;
            TransitRouterRouteEntryType = transitRouterRouteEntryType;
            TransitRouterRouteTableId = transitRouterRouteTableId;
            UpdateTime = updateTime;
        }
    }
}
