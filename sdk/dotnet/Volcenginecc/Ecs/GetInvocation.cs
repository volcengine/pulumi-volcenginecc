// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Ecs
{
    public static class GetInvocation
    {
        /// <summary>
        /// Data Source schema for Volcengine::ECS::Invocation
        /// </summary>
        public static Task<GetInvocationResult> InvokeAsync(GetInvocationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInvocationResult>("volcenginecc:ecs/getInvocation:getInvocation", args ?? new GetInvocationArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ECS::Invocation
        /// </summary>
        public static Output<GetInvocationResult> Invoke(GetInvocationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInvocationResult>("volcenginecc:ecs/getInvocation:getInvocation", args ?? new GetInvocationInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ECS::Invocation
        /// </summary>
        public static Output<GetInvocationResult> Invoke(GetInvocationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInvocationResult>("volcenginecc:ecs/getInvocation:getInvocation", args ?? new GetInvocationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInvocationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetInvocationArgs()
        {
        }
        public static new GetInvocationArgs Empty => new GetInvocationArgs();
    }

    public sealed class GetInvocationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetInvocationInvokeArgs()
        {
        }
        public static new GetInvocationInvokeArgs Empty => new GetInvocationInvokeArgs();
    }


    [OutputType]
    public sealed class GetInvocationResult
    {
        /// <summary>
        /// 命令内容。
        /// </summary>
        public readonly string CommandContent;
        /// <summary>
        /// 被调用命令的描述。
        /// </summary>
        public readonly string CommandDescription;
        /// <summary>
        /// 命令ID。
        /// </summary>
        public readonly string CommandId;
        /// <summary>
        /// 任务触发时的命令名称。
        /// </summary>
        public readonly string CommandName;
        /// <summary>
        /// 被调用命令的提供方。
        /// </summary>
        public readonly string CommandProvider;
        /// <summary>
        /// 作业触发的命令类型。
        /// </summary>
        public readonly string CommandType;
        /// <summary>
        /// 被调用命令是否使用自定义参数。true：已启用。false：未启用。
        /// </summary>
        public readonly bool EnableParameter;
        /// <summary>
        /// 任务结束时间。
        /// </summary>
        public readonly string EndTime;
        /// <summary>
        /// 执行频率。RepeatMode=Rate 时本参数必填。格式：&lt;执行间隔数值&gt;&lt;执行间隔单位&gt;，执行间隔单位：支持分钟（5m-60m）、小时（1h-24h）和天（1d-7d）。执行间隔基于固定频率，与作业实际执行需要的时间无关。创建作业后基于LaunchTime执行一次，根据间隔设置确定下一次执行时间。
        /// </summary>
        public readonly string Frequency;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 实例ID列表，最多支持200个ID。
        /// </summary>
        public readonly ImmutableArray<string> InstanceIds;
        /// <summary>
        /// 执行实例数量。
        /// </summary>
        public readonly int InstanceNumber;
        /// <summary>
        /// 作业描述，默认为空字符串，不超过256个字符。
        /// </summary>
        public readonly string InvocationDescription;
        /// <summary>
        /// 任务执行 ID。
        /// </summary>
        public readonly string InvocationId;
        /// <summary>
        /// 作业名称。不超过64个字符。暂不限制特殊字符。同地域下作业名称可重复。
        /// </summary>
        public readonly string InvocationName;
        /// <summary>
        /// 单台实例执行命令的结果。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInvocationInvocationResultResult> InvocationResults;
        /// <summary>
        /// 命令执行的总执行状态。
        /// </summary>
        public readonly string InvocationStatus;
        /// <summary>
        /// 执行时间。
        /// </summary>
        public readonly string LaunchTime;
        public readonly ImmutableArray<Outputs.GetInvocationParameterDefinitionResult> ParameterDefinitions;
        /// <summary>
        /// 命令中包含自定义参数时，需通过本参数传入自定义参数的键值对。自定义参数个数范围为0~60。Key不允许为空字符串，最多支持64个字符。Value允许为空字符串。自定义参数与原始命令内容在Base64编码后，综合长度不能超过16KB。设置的自定义参数名集合必须为创建命令时定义的参数集的子集。对于未传入的参数，使用默认值代替。
        /// </summary>
        public readonly string Parameters;
        /// <summary>
        /// 资源所属项目，一个资源只能归属于一个项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 周期结束时间，仅适用于周期任务（Rate）。
        /// </summary>
        public readonly string RecurrenceEndTime;
        /// <summary>
        /// 设置命令执行的方式。Once：默认，表示立即执行命令。Rate：周期执行命令，需要通过Frequency参数传入Rate表达式指定执行周期。Fixed：定时执行命令，需要通过LaunchTime参数指定的执行时间。
        /// </summary>
        public readonly string RepeatMode;
        /// <summary>
        /// 任务开始时间。
        /// </summary>
        public readonly string StartTime;
        public readonly ImmutableArray<Outputs.GetInvocationTagResult> Tags;
        /// <summary>
        /// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。默认值：60。可选范围为：30~86400。
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// 在ECS实例中执行命令的用户名称。
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// 自定义windows用户的密码。
        /// </summary>
        public readonly string WindowsPassword;
        /// <summary>
        /// 创建的命令在ECS实例中运行的目录。
        /// </summary>
        public readonly string WorkingDir;

        [OutputConstructor]
        private GetInvocationResult(
            string commandContent,

            string commandDescription,

            string commandId,

            string commandName,

            string commandProvider,

            string commandType,

            bool enableParameter,

            string endTime,

            string frequency,

            string id,

            ImmutableArray<string> instanceIds,

            int instanceNumber,

            string invocationDescription,

            string invocationId,

            string invocationName,

            ImmutableArray<Outputs.GetInvocationInvocationResultResult> invocationResults,

            string invocationStatus,

            string launchTime,

            ImmutableArray<Outputs.GetInvocationParameterDefinitionResult> parameterDefinitions,

            string parameters,

            string projectName,

            string recurrenceEndTime,

            string repeatMode,

            string startTime,

            ImmutableArray<Outputs.GetInvocationTagResult> tags,

            int timeout,

            string username,

            string windowsPassword,

            string workingDir)
        {
            CommandContent = commandContent;
            CommandDescription = commandDescription;
            CommandId = commandId;
            CommandName = commandName;
            CommandProvider = commandProvider;
            CommandType = commandType;
            EnableParameter = enableParameter;
            EndTime = endTime;
            Frequency = frequency;
            Id = id;
            InstanceIds = instanceIds;
            InstanceNumber = instanceNumber;
            InvocationDescription = invocationDescription;
            InvocationId = invocationId;
            InvocationName = invocationName;
            InvocationResults = invocationResults;
            InvocationStatus = invocationStatus;
            LaunchTime = launchTime;
            ParameterDefinitions = parameterDefinitions;
            Parameters = parameters;
            ProjectName = projectName;
            RecurrenceEndTime = recurrenceEndTime;
            RepeatMode = repeatMode;
            StartTime = startTime;
            Tags = tags;
            Timeout = timeout;
            Username = username;
            WindowsPassword = windowsPassword;
            WorkingDir = workingDir;
        }
    }
}
