// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Ecs
{
    public static class GetCommand
    {
        /// <summary>
        /// Data Source schema for Volcengine::ECS::Command
        /// </summary>
        public static Task<GetCommandResult> InvokeAsync(GetCommandArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCommandResult>("volcenginecc:ecs/getCommand:getCommand", args ?? new GetCommandArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ECS::Command
        /// </summary>
        public static Output<GetCommandResult> Invoke(GetCommandInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommandResult>("volcenginecc:ecs/getCommand:getCommand", args ?? new GetCommandInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ECS::Command
        /// </summary>
        public static Output<GetCommandResult> Invoke(GetCommandInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommandResult>("volcenginecc:ecs/getCommand:getCommand", args ?? new GetCommandInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCommandArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCommandArgs()
        {
        }
        public static new GetCommandArgs Empty => new GetCommandArgs();
    }

    public sealed class GetCommandInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCommandInvokeArgs()
        {
        }
        public static new GetCommandInvokeArgs Empty => new GetCommandInvokeArgs();
    }


    [OutputType]
    public sealed class GetCommandResult
    {
        /// <summary>
        /// 命令内容。请根据ContentEncoding参数传入相应命令内容。命令内容不能超过16KB。
        /// </summary>
        public readonly string CommandContent;
        /// <summary>
        /// 自定义命令ID。
        /// </summary>
        public readonly string CommandId;
        /// <summary>
        /// 命令内容是否经过Base64编码处理。Base64（默认）：经过Base64编码处理。PlainText： 未进行编码处理。
        /// </summary>
        public readonly string ContentEncoding;
        /// <summary>
        /// 创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 命令描述，默认为空字符串。字符长度0~256。不限制特殊字符。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 创建的命令是否使用自定义参数。false：默认，表示不使用自定义参数。true：表示使用自定义参数。
        /// </summary>
        public readonly bool EnableParameter;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 命令被调用次数。
        /// </summary>
        public readonly int InvocationTimes;
        /// <summary>
        /// 命令名称。字符长度1~32。不限制特殊字符。
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// 自定义参数定义信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommandParameterDefinitionResult> ParameterDefinitions;
        /// <summary>
        /// 资源所属项目，一个资源只能归属于一个项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 命令的提供方。
        /// </summary>
        public readonly string ProviderName;
        /// <summary>
        /// 标签键值对。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommandTagResult> Tags;
        /// <summary>
        /// 创建的命令在ECS实例中执行时最大的超时时间，单位为秒。取值范围：30~86400。默认值：60。
        /// </summary>
        public readonly int Timeout;
        /// <summary>
        /// 命令的类型。Shell：表示创建一个在Linux实例中运行的Shell脚本。Python：表示创建一个Python脚本。Bat：表示创建一个Bat脚本。PowerShell：表示创建一个PowerShell脚本。
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// 更新时间。
        /// </summary>
        public readonly string UpdatedTime;
        /// <summary>
        /// 执行命令时的用户名。
        /// </summary>
        public readonly string Username;
        /// <summary>
        /// 创建的命令在ECS实例中运行的目录。
        /// </summary>
        public readonly string WorkingDir;

        [OutputConstructor]
        private GetCommandResult(
            string commandContent,

            string commandId,

            string contentEncoding,

            string createdTime,

            string description,

            bool enableParameter,

            string id,

            int invocationTimes,

            string name,

            ImmutableArray<Outputs.GetCommandParameterDefinitionResult> parameterDefinitions,

            string projectName,

            string providerName,

            ImmutableArray<Outputs.GetCommandTagResult> tags,

            int timeout,

            string type,

            string updatedTime,

            string username,

            string workingDir)
        {
            CommandContent = commandContent;
            CommandId = commandId;
            ContentEncoding = contentEncoding;
            CreatedTime = createdTime;
            Description = description;
            EnableParameter = enableParameter;
            Id = id;
            InvocationTimes = invocationTimes;
            Name = name;
            ParameterDefinitions = parameterDefinitions;
            ProjectName = projectName;
            ProviderName = providerName;
            Tags = tags;
            Timeout = timeout;
            Type = type;
            UpdatedTime = updatedTime;
            Username = username;
            WorkingDir = workingDir;
        }
    }
}
