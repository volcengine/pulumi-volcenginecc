// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Cr
{
    public static class GetRegistry
    {
        /// <summary>
        /// Data Source schema for Volcengine::CR::Registry
        /// </summary>
        public static Task<GetRegistryResult> InvokeAsync(GetRegistryArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegistryResult>("volcenginecc:cr/getRegistry:getRegistry", args ?? new GetRegistryArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CR::Registry
        /// </summary>
        public static Output<GetRegistryResult> Invoke(GetRegistryInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryResult>("volcenginecc:cr/getRegistry:getRegistry", args ?? new GetRegistryInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CR::Registry
        /// </summary>
        public static Output<GetRegistryResult> Invoke(GetRegistryInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegistryResult>("volcenginecc:cr/getRegistry:getRegistry", args ?? new GetRegistryInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegistryArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetRegistryArgs()
        {
        }
        public static new GetRegistryArgs Empty => new GetRegistryArgs();
    }

    public sealed class GetRegistryInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetRegistryInvokeArgs()
        {
        }
        public static new GetRegistryInvokeArgs Empty => new GetRegistryInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegistryResult
    {
        /// <summary>
        /// 镜像仓库实例的付费类型，目前仅支持 PostCharge按量付费模式。
        /// </summary>
        public readonly string ChargeType;
        /// <summary>
        /// 创建镜像仓库实例的时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 仅计费类型为HybridCharge有值，实例到期时间
        /// </summary>
        public readonly string ExpireTime;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 标准版实例名称，同一个地域下，名称必须唯一。支持小写英文字母、数字、短划线（-）且数字不能在首位，短划线（-）不能在首位或末位，长度限制为 3～30 个字符。
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// 填写实例需要关联的项目。一个实例仅支持关联一个项目
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// ProxyCache配置，设置为ProxyCache时必填
        /// </summary>
        public readonly Outputs.GetRegistryProxyCacheResult ProxyCache;
        /// <summary>
        /// 是否设置为ProxyCache实例
        /// </summary>
        public readonly bool ProxyCacheEnabled;
        /// <summary>
        /// 仅计费类型为HybridCharge有值，实例自动续费类型
        /// </summary>
        public readonly string RenewType;
        /// <summary>
        /// 镜像仓库实例状态，由 Phase 和 Conditions 组成。合法的 Phase 和 Conditions 组合如下所示：{Creating, [Progressing]}：创建中,{Running, [Ok]}：运行中,{Running, [Degraded]}：运行中,{Stopped, [Balance]}：欠费关停,{Stopped, [Released]}：待回收,{Stopped, [Released, Balance]}：欠费关停,{Starting, [Progressing]}：启动中,{Deleting, [Progressing]}：销毁中,{Failed, [Unknown]}：异常
        /// </summary>
        public readonly Outputs.GetRegistryStatusResult Status;
        /// <summary>
        /// 实例的标签
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegistryTagResult> Tags;
        /// <summary>
        /// 不填写默认创建标准版实例。Enterprise：标准版，Micro：小微版
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetRegistryResult(
            string chargeType,

            string createdTime,

            string expireTime,

            string id,

            string name,

            string project,

            Outputs.GetRegistryProxyCacheResult proxyCache,

            bool proxyCacheEnabled,

            string renewType,

            Outputs.GetRegistryStatusResult status,

            ImmutableArray<Outputs.GetRegistryTagResult> tags,

            string type)
        {
            ChargeType = chargeType;
            CreatedTime = createdTime;
            ExpireTime = expireTime;
            Id = id;
            Name = name;
            Project = project;
            ProxyCache = proxyCache;
            ProxyCacheEnabled = proxyCacheEnabled;
            RenewType = renewType;
            Status = status;
            Tags = tags;
            Type = type;
        }
    }
}
