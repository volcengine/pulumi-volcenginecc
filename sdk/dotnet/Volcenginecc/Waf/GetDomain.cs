// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Waf
{
    public static class GetDomain
    {
        /// <summary>
        /// Data Source schema for Volcengine::WAF::Domain
        /// </summary>
        public static Task<GetDomainResult> InvokeAsync(GetDomainArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDomainResult>("volcenginecc:waf/getDomain:getDomain", args ?? new GetDomainArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::WAF::Domain
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("volcenginecc:waf/getDomain:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::WAF::Domain
        /// </summary>
        public static Output<GetDomainResult> Invoke(GetDomainInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDomainResult>("volcenginecc:waf/getDomain:getDomain", args ?? new GetDomainInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDomainArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetDomainArgs()
        {
        }
        public static new GetDomainArgs Empty => new GetDomainArgs();
    }

    public sealed class GetDomainInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetDomainInvokeArgs()
        {
        }
        public static new GetDomainInvokeArgs Empty => new GetDomainInvokeArgs();
    }


    [OutputType]
    public sealed class GetDomainResult
    {
        /// <summary>
        /// 接入模式。10：CNAME 接入，11：负载均衡（CLB）7 层接入。
        /// </summary>
        public readonly int AccessMode;
        /// <summary>
        /// 高防实例 IP。高防型 WAF 接入展示，否则为空。
        /// </summary>
        public readonly string AdvancedDefenseIp;
        /// <summary>
        /// 高防实例 Ipv6。高防型 WAF 接入展示，否则为空。
        /// </summary>
        public readonly string AdvancedDefenseIpv6;
        /// <summary>
        /// 是否开启了 API 防护策略。0：关闭，1：开启。
        /// </summary>
        public readonly int ApiEnable;
        /// <summary>
        /// 攻击状态。0:未发现攻击,1:发现攻击。
        /// </summary>
        public readonly int AttackStatus;
        /// <summary>
        /// 是否开启智能 CC 防护策略。0：关闭，1：开启。
        /// </summary>
        public readonly int AutoCcEnable;
        /// <summary>
        /// 是否开启自动封禁。0：关闭，1：开启。
        /// </summary>
        public readonly int AutomaticBlackEnable;
        /// <summary>
        /// 源站配置。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainBackendGroupResult> BackendGroups;
        /// <summary>
        /// 是否开启了黑名单策略。0：关闭, 1：开启。
        /// </summary>
        public readonly int BlackIpEnable;
        /// <summary>
        /// 是否开启了区域封禁策略。0：关闭;1：开启。
        /// </summary>
        public readonly int BlackLctEnable;
        /// <summary>
        /// 是否开启动态Token防护。
        /// </summary>
        public readonly int BotDytokenEnable;
        /// <summary>
        /// 是否开启 bot 频率限制策略。
        /// 0：关闭
        /// 1：开启。
        /// </summary>
        public readonly int BotFrequencyEnable;
        /// <summary>
        /// 是否开启 bot 统计防护策略。
        /// 0：关闭
        /// 1：开启。
        /// </summary>
        public readonly int BotRepeatEnable;
        /// <summary>
        /// 设置 bot 行为地图策略默认动作，当 BotSequenceEnable = 1 开启状态时生效。默认为 0 （观察）。
        /// 0：观察
        /// 2：拦截
        /// 6：JS 挑战
        /// 7：人机验证。
        /// </summary>
        public readonly int BotSequenceDefaultAction;
        /// <summary>
        /// 是否开启 bot 行为地图。
        /// 0：关闭
        /// 1：开启。
        /// </summary>
        public readonly int BotSequenceEnable;
        /// <summary>
        /// 是否开启 CC 防护策略。
        /// 0：关闭
        /// 1：开启。
        /// </summary>
        public readonly int CcEnable;
        /// <summary>
        /// 托管至证书中心的证书ID。
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// 证书名称，协议类型包含 HTTPS 时显示。
        /// </summary>
        public readonly string CertificateName;
        /// <summary>
        /// 证书托管平台:waf/certificate_service。
        /// </summary>
        public readonly string CertificatePlatform;
        /// <summary>
        /// CLB实例ID。
        /// </summary>
        public readonly string ClbInstanceIds;
        /// <summary>
        /// CLB监听器ID。
        /// </summary>
        public readonly string ClbListenerId;
        /// <summary>
        /// CLB后端服务器组ID。
        /// </summary>
        public readonly string ClbPoolId;
        /// <summary>
        /// CLB后端服务器ID。
        /// </summary>
        public readonly string ClbServerId;
        /// <summary>
        /// 客户端IP获取方式。0:自定义Header字段,1:通过X-Forwarded-For(XFF)字段中第一个公网IP地址作为客户端真实IP地址。
        /// </summary>
        public readonly int ClientIpLocation;
        /// <summary>
        /// 客户端请求body最大值(MB)。
        /// </summary>
        public readonly int ClientMaxBodySize;
        /// <summary>
        /// LB接入参数。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainCloudAccessConfigResult> CloudAccessConfigs;
        /// <summary>
        /// CNAME记录。
        /// </summary>
        public readonly string Cname;
        /// <summary>
        /// 是否开启自定义BOT防护。
        /// </summary>
        public readonly int CustomBotEnable;
        /// <summary>
        /// 自定义Header。
        /// </summary>
        public readonly ImmutableArray<string> CustomHeaders;
        /// <summary>
        /// 是否开启自定义响应。
        /// </summary>
        public readonly int CustomRspEnable;
        /// <summary>
        /// 自定义SNI。
        /// </summary>
        public readonly string CustomSni;
        /// <summary>
        /// 为例外 ALB 实例设置防护模式。
        /// 1：启用防护，已配置的防护策略生效。
        /// 2：暂停防护，仅执行转发而不检测，已配置的防护策略不生效。
        /// 3：回源模式，直接将请求解析至源站，不再转发至 WAF 实例。
        /// 设置例外防护实例后，域名可能还会存在以下防护状态：
        /// 5：部分启用，默认防护模式为启用防护，但存在例外实例为暂停防护或回源模式状态。
        /// 6：部分暂停，默认防护模式为暂停防护，但存在例外实例为启用防护或回源模式状态。
        /// 7：部分回源，默认防护模式为回源模式，但存在例外实例为启用防护或暂停防护状态。
        /// </summary>
        public readonly int DefenceMode;
        /// <summary>
        /// 是否开启数据泄露防护。
        /// </summary>
        public readonly int DlpEnable;
        /// <summary>
        /// 防护的域名信息，支持泛域名和精确域名。
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// 是否开启用户自定义重定向。0:关闭,1:开启。
        /// </summary>
        public readonly int EnableCustomRedirect;
        /// <summary>
        /// 是否开启HTTP2.0。0:关闭,1:开启。
        /// </summary>
        public readonly int EnableHttp2;
        /// <summary>
        /// 是否支持防护Ipv6请求。0:关闭,1:开启。
        /// </summary>
        public readonly int EnableIpv6;
        /// <summary>
        /// 是否开启SNI配置。0:关闭,1:开启。
        /// </summary>
        public readonly int EnableSni;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 长连接复用个数。
        /// </summary>
        public readonly int KeepAliveRequest;
        /// <summary>
        /// 长连接保持时间(秒)。
        /// </summary>
        public readonly int KeepAliveTimeout;
        /// <summary>
        /// 负载均衡算法类型。wrr:加权轮询,wlc:加权最小连接数,sh:源地址哈希。
        /// </summary>
        public readonly string LbAlgorithm;
        /// <summary>
        /// 端口号。
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// 项目名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 是否开启协议跟随。0:关闭,1:开启。
        /// </summary>
        public readonly int ProtocolFollow;
        /// <summary>
        /// 接入端口信息。
        /// </summary>
        public readonly Outputs.GetDomainProtocolPortsResult ProtocolPorts;
        /// <summary>
        /// 接入协议类型,支持HTTP/HTTPS。
        /// </summary>
        public readonly ImmutableArray<string> Protocols;
        /// <summary>
        /// 是否开启代理配置。0:关闭,1:开启。
        /// </summary>
        public readonly int ProxyConfig;
        /// <summary>
        /// WAF和后端服务器的建连超时时间(秒)。
        /// </summary>
        public readonly int ProxyConnectTimeout;
        /// <summary>
        /// WAF回源长连接可复用个数。
        /// </summary>
        public readonly int ProxyKeepAlive;
        /// <summary>
        /// 空闲长连接超时时间(秒)。
        /// </summary>
        public readonly int ProxyKeepAliveTimeout;
        /// <summary>
        /// WAF从后端服务器读取响应的超时时间(秒)。
        /// </summary>
        public readonly int ProxyReadTimeout;
        /// <summary>
        /// WAF回源重试次数。
        /// </summary>
        public readonly int ProxyRetry;
        /// <summary>
        /// WAF将请求传输到后端服务器的超时时间(秒)。
        /// </summary>
        public readonly int ProxyWriteTimeout;
        /// <summary>
        /// CNAME接入回源方式。0:私网回源,1:公网回源。
        /// </summary>
        public readonly int PublicRealServer;
        /// <summary>
        /// 是否开启异常响应防护。
        /// </summary>
        public readonly int RspAbnormalEnable;
        /// <summary>
        /// 服务IP。
        /// </summary>
        public readonly string ServerIps;
        /// <summary>
        /// WAF回源IP。
        /// </summary>
        public readonly string SrcIps;
        /// <summary>
        /// 源站协议。
        /// </summary>
        public readonly string SrcProtocol;
        /// <summary>
        /// 加密套件。
        /// </summary>
        public readonly ImmutableArray<string> SslCiphers;
        /// <summary>
        /// TLS协议版本。如:TLSv1,TLSv1.1,TLSv1.2,TLSv1.3。
        /// </summary>
        public readonly ImmutableArray<string> SslProtocols;
        /// <summary>
        /// 接入状态。0:正常,1:DNS未解析,2:配置中,3:配置失败,4:配置未生效,5:更新中,6:实例已删除。
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// 是否开启托管BOT防护。
        /// </summary>
        public readonly int SystemBotEnable;
        /// <summary>
        /// 是否开启防篡改。
        /// </summary>
        public readonly int TamperProofEnable;
        /// <summary>
        /// TCP监听器配置。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainTcpListenerConfigResult> TcpListenerConfigs;
        /// <summary>
        /// 是否开启日志服务。0:关闭,1:开启。
        /// </summary>
        public readonly int TlsEnable;
        /// <summary>
        /// 日志字段配置详情。
        /// </summary>
        public readonly Outputs.GetDomainTlsFieldsConfigResult TlsFieldsConfig;
        /// <summary>
        /// 更新时间。
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// VPC ID。
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// 是否开启WAF防护。
        /// </summary>
        public readonly int WafEnable;
        /// <summary>
        /// 是否开启白名单请求防护。
        /// </summary>
        public readonly int WafWhiteReqEnable;
        /// <summary>
        /// 是否开启白名单防护。
        /// </summary>
        public readonly int WhiteEnable;
        /// <summary>
        /// 是否开启字段白名单防护。
        /// </summary>
        public readonly int WhiteFieldEnable;

        [OutputConstructor]
        private GetDomainResult(
            int accessMode,

            string advancedDefenseIp,

            string advancedDefenseIpv6,

            int apiEnable,

            int attackStatus,

            int autoCcEnable,

            int automaticBlackEnable,

            ImmutableArray<Outputs.GetDomainBackendGroupResult> backendGroups,

            int blackIpEnable,

            int blackLctEnable,

            int botDytokenEnable,

            int botFrequencyEnable,

            int botRepeatEnable,

            int botSequenceDefaultAction,

            int botSequenceEnable,

            int ccEnable,

            string certificateId,

            string certificateName,

            string certificatePlatform,

            string clbInstanceIds,

            string clbListenerId,

            string clbPoolId,

            string clbServerId,

            int clientIpLocation,

            int clientMaxBodySize,

            ImmutableArray<Outputs.GetDomainCloudAccessConfigResult> cloudAccessConfigs,

            string cname,

            int customBotEnable,

            ImmutableArray<string> customHeaders,

            int customRspEnable,

            string customSni,

            int defenceMode,

            int dlpEnable,

            string domain,

            int enableCustomRedirect,

            int enableHttp2,

            int enableIpv6,

            int enableSni,

            string id,

            int keepAliveRequest,

            int keepAliveTimeout,

            string lbAlgorithm,

            int port,

            string projectName,

            int protocolFollow,

            Outputs.GetDomainProtocolPortsResult protocolPorts,

            ImmutableArray<string> protocols,

            int proxyConfig,

            int proxyConnectTimeout,

            int proxyKeepAlive,

            int proxyKeepAliveTimeout,

            int proxyReadTimeout,

            int proxyRetry,

            int proxyWriteTimeout,

            int publicRealServer,

            int rspAbnormalEnable,

            string serverIps,

            string srcIps,

            string srcProtocol,

            ImmutableArray<string> sslCiphers,

            ImmutableArray<string> sslProtocols,

            int status,

            int systemBotEnable,

            int tamperProofEnable,

            ImmutableArray<Outputs.GetDomainTcpListenerConfigResult> tcpListenerConfigs,

            int tlsEnable,

            Outputs.GetDomainTlsFieldsConfigResult tlsFieldsConfig,

            string updateTime,

            string vpcId,

            int wafEnable,

            int wafWhiteReqEnable,

            int whiteEnable,

            int whiteFieldEnable)
        {
            AccessMode = accessMode;
            AdvancedDefenseIp = advancedDefenseIp;
            AdvancedDefenseIpv6 = advancedDefenseIpv6;
            ApiEnable = apiEnable;
            AttackStatus = attackStatus;
            AutoCcEnable = autoCcEnable;
            AutomaticBlackEnable = automaticBlackEnable;
            BackendGroups = backendGroups;
            BlackIpEnable = blackIpEnable;
            BlackLctEnable = blackLctEnable;
            BotDytokenEnable = botDytokenEnable;
            BotFrequencyEnable = botFrequencyEnable;
            BotRepeatEnable = botRepeatEnable;
            BotSequenceDefaultAction = botSequenceDefaultAction;
            BotSequenceEnable = botSequenceEnable;
            CcEnable = ccEnable;
            CertificateId = certificateId;
            CertificateName = certificateName;
            CertificatePlatform = certificatePlatform;
            ClbInstanceIds = clbInstanceIds;
            ClbListenerId = clbListenerId;
            ClbPoolId = clbPoolId;
            ClbServerId = clbServerId;
            ClientIpLocation = clientIpLocation;
            ClientMaxBodySize = clientMaxBodySize;
            CloudAccessConfigs = cloudAccessConfigs;
            Cname = cname;
            CustomBotEnable = customBotEnable;
            CustomHeaders = customHeaders;
            CustomRspEnable = customRspEnable;
            CustomSni = customSni;
            DefenceMode = defenceMode;
            DlpEnable = dlpEnable;
            Domain = domain;
            EnableCustomRedirect = enableCustomRedirect;
            EnableHttp2 = enableHttp2;
            EnableIpv6 = enableIpv6;
            EnableSni = enableSni;
            Id = id;
            KeepAliveRequest = keepAliveRequest;
            KeepAliveTimeout = keepAliveTimeout;
            LbAlgorithm = lbAlgorithm;
            Port = port;
            ProjectName = projectName;
            ProtocolFollow = protocolFollow;
            ProtocolPorts = protocolPorts;
            Protocols = protocols;
            ProxyConfig = proxyConfig;
            ProxyConnectTimeout = proxyConnectTimeout;
            ProxyKeepAlive = proxyKeepAlive;
            ProxyKeepAliveTimeout = proxyKeepAliveTimeout;
            ProxyReadTimeout = proxyReadTimeout;
            ProxyRetry = proxyRetry;
            ProxyWriteTimeout = proxyWriteTimeout;
            PublicRealServer = publicRealServer;
            RspAbnormalEnable = rspAbnormalEnable;
            ServerIps = serverIps;
            SrcIps = srcIps;
            SrcProtocol = srcProtocol;
            SslCiphers = sslCiphers;
            SslProtocols = sslProtocols;
            Status = status;
            SystemBotEnable = systemBotEnable;
            TamperProofEnable = tamperProofEnable;
            TcpListenerConfigs = tcpListenerConfigs;
            TlsEnable = tlsEnable;
            TlsFieldsConfig = tlsFieldsConfig;
            UpdateTime = updateTime;
            VpcId = vpcId;
            WafEnable = wafEnable;
            WafWhiteReqEnable = wafWhiteReqEnable;
            WhiteEnable = whiteEnable;
            WhiteFieldEnable = whiteFieldEnable;
        }
    }
}
