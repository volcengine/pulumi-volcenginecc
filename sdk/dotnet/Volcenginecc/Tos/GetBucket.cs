// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Tos
{
    public static class GetBucket
    {
        /// <summary>
        /// Data Source schema for Volcengine::TOS::Bucket
        /// </summary>
        public static Task<GetBucketResult> InvokeAsync(GetBucketArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBucketResult>("volcenginecc:tos/getBucket:getBucket", args ?? new GetBucketArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::TOS::Bucket
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("volcenginecc:tos/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::TOS::Bucket
        /// </summary>
        public static Output<GetBucketResult> Invoke(GetBucketInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetBucketResult>("volcenginecc:tos/getBucket:getBucket", args ?? new GetBucketInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBucketArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetBucketArgs()
        {
        }
        public static new GetBucketArgs Empty => new GetBucketArgs();
    }

    public sealed class GetBucketInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetBucketInvokeArgs()
        {
        }
        public static new GetBucketInvokeArgs Empty => new GetBucketInvokeArgs();
    }


    [OutputType]
    public sealed class GetBucketResult
    {
        /// <summary>
        /// 桶的访问控制权限。
        /// </summary>
        public readonly Outputs.GetBucketAclResult Acl;
        public readonly Outputs.GetBucketAclGrantResult AclGrant;
        /// <summary>
        /// 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
        /// </summary>
        public readonly string AzRedundancy;
        /// <summary>
        /// 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
        /// </summary>
        public readonly string BucketType;
        /// <summary>
        /// 桶的创建时间。
        /// </summary>
        public readonly string CreationDate;
        /// <summary>
        /// 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
        /// </summary>
        public readonly string EnableVersionStatus;
        /// <summary>
        /// 存储桶的 TOS 协议公网访问域名。
        /// </summary>
        public readonly string ExtranetEndpoint;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 存储桶的 TOS 协议私网访问域名
        /// </summary>
        public readonly string IntranetEndpoint;
        /// <summary>
        /// 存储桶的声明周期。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBucketLifecycleConfigResult> LifecycleConfigs;
        /// <summary>
        /// 桶所在区域。
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// 桶名。
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// 存储桶所属项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
        /// </summary>
        public readonly string StorageClass;
        /// <summary>
        /// 存储桶的标签信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBucketTagResult> Tags;

        [OutputConstructor]
        private GetBucketResult(
            Outputs.GetBucketAclResult acl,

            Outputs.GetBucketAclGrantResult aclGrant,

            string azRedundancy,

            string bucketType,

            string creationDate,

            string enableVersionStatus,

            string extranetEndpoint,

            string id,

            string intranetEndpoint,

            ImmutableArray<Outputs.GetBucketLifecycleConfigResult> lifecycleConfigs,

            string location,

            string name,

            string projectName,

            string storageClass,

            ImmutableArray<Outputs.GetBucketTagResult> tags)
        {
            Acl = acl;
            AclGrant = aclGrant;
            AzRedundancy = azRedundancy;
            BucketType = bucketType;
            CreationDate = creationDate;
            EnableVersionStatus = enableVersionStatus;
            ExtranetEndpoint = extranetEndpoint;
            Id = id;
            IntranetEndpoint = intranetEndpoint;
            LifecycleConfigs = lifecycleConfigs;
            Location = location;
            Name = name;
            ProjectName = projectName;
            StorageClass = storageClass;
            Tags = tags;
        }
    }
}
