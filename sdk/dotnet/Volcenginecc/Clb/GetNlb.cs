// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Clb
{
    public static class GetNlb
    {
        /// <summary>
        /// Data Source schema for Volcengine::CLB::NLB
        /// </summary>
        public static Task<GetNlbResult> InvokeAsync(GetNlbArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNlbResult>("volcenginecc:clb/getNlb:getNlb", args ?? new GetNlbArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CLB::NLB
        /// </summary>
        public static Output<GetNlbResult> Invoke(GetNlbInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNlbResult>("volcenginecc:clb/getNlb:getNlb", args ?? new GetNlbInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CLB::NLB
        /// </summary>
        public static Output<GetNlbResult> Invoke(GetNlbInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNlbResult>("volcenginecc:clb/getNlb:getNlb", args ?? new GetNlbInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNlbArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetNlbArgs()
        {
        }
        public static new GetNlbArgs Empty => new GetNlbArgs();
    }

    public sealed class GetNlbInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetNlbInvokeArgs()
        {
        }
        public static new GetNlbInvokeArgs Empty => new GetNlbInvokeArgs();
    }


    [OutputType]
    public sealed class GetNlbResult
    {
        /// <summary>
        /// NLB实例所属的账号ID。
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// NLB实例的计费状态。Normal: 正常，FinancialLocked: 被锁定。
        /// </summary>
        public readonly string BillingStatus;
        /// <summary>
        /// NLB实例的计费类型。3：按使用量计费
        /// </summary>
        public readonly int BillingType;
        /// <summary>
        /// NLB实例的创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// NLB实例是否开启跨可用区转发能力。true（默认值）：开启。false：关闭。
        /// </summary>
        public readonly bool CrossZoneEnabled;
        /// <summary>
        /// NLB实例的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// NLB实例的DNS地址。
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// NLB实例欠费关停时间。
        /// </summary>
        public readonly string ExpectedOverdueTime;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// NLB实例的IP地址类型。ipv4：IPv4版本。dualstack：双栈，即同时支持IPv4版本和IPv6版本。
        /// </summary>
        public readonly string IpAddressVersion;
        /// <summary>
        /// IPv4类型的共享带宽包ID。
        /// </summary>
        public readonly string Ipv4BandwidthPackageId;
        /// <summary>
        /// NLB实例的IPv4网络类型。internet：公网类型。intranet：私网类型。
        /// </summary>
        public readonly string Ipv4NetworkType;
        /// <summary>
        /// IPv6类型的共享带宽包ID。
        /// </summary>
        public readonly string Ipv6BandwidthPackageId;
        /// <summary>
        /// NLB实例的IPv6网络类型。internet：公网类型。intranet：私网类型。
        /// </summary>
        public readonly string Ipv6NetworkType;
        /// <summary>
        /// NLB实例ID。
        /// </summary>
        public readonly string LoadBalancerId;
        /// <summary>
        /// NLB实例的名称。
        /// </summary>
        public readonly string LoadBalancerName;
        /// <summary>
        /// 系统为NLB实例自动关联的托管安全组ID。
        /// </summary>
        public readonly string ManagedSecurityGroupId;
        /// <summary>
        /// NLB实例是否开启控制台上修改保护。NonProtection或空：关闭，允许通过控制台修改实例或删除实例。ConsoleProtection：开启，禁止通过控制台修改实例或删除实例。
        /// </summary>
        public readonly string ModificationProtectionStatus;
        /// <summary>
        /// NLB实例被锁定的时间。参数BillingStatus为Normal时，本参数返回为空字符串。
        /// </summary>
        public readonly string OverdueTime;
        /// <summary>
        /// NLB实例所属项目的名称。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// NLB实例的预期回收时间。参数BillingStatus为Normal时，本参数返回为空字符串。
        /// </summary>
        public readonly string ReclaimedTime;
        /// <summary>
        /// NLB实例关联的安全组ID列表。
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// NLB 实例的状态。Inactive：已停止。Active：运行中。Creating：创建中。Provisioning：创建中。仅调用API创建NLB实例时存在该状态。Configuring：配置中。Deleting：删除中。CreateFailed：创建失败。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// NLB实例的标签信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNlbTagResult> Tags;
        /// <summary>
        /// NLB实例的更新时间。
        /// </summary>
        public readonly string UpdatedTime;
        /// <summary>
        /// NLB实例所属的VPC ID。
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// NLB实例的可用区信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNlbZoneMappingResult> ZoneMappings;

        [OutputConstructor]
        private GetNlbResult(
            string accountId,

            string billingStatus,

            int billingType,

            string createdTime,

            bool crossZoneEnabled,

            string description,

            string dnsName,

            string expectedOverdueTime,

            string id,

            string ipAddressVersion,

            string ipv4BandwidthPackageId,

            string ipv4NetworkType,

            string ipv6BandwidthPackageId,

            string ipv6NetworkType,

            string loadBalancerId,

            string loadBalancerName,

            string managedSecurityGroupId,

            string modificationProtectionStatus,

            string overdueTime,

            string projectName,

            string reclaimedTime,

            ImmutableArray<string> securityGroupIds,

            string status,

            ImmutableArray<Outputs.GetNlbTagResult> tags,

            string updatedTime,

            string vpcId,

            ImmutableArray<Outputs.GetNlbZoneMappingResult> zoneMappings)
        {
            AccountId = accountId;
            BillingStatus = billingStatus;
            BillingType = billingType;
            CreatedTime = createdTime;
            CrossZoneEnabled = crossZoneEnabled;
            Description = description;
            DnsName = dnsName;
            ExpectedOverdueTime = expectedOverdueTime;
            Id = id;
            IpAddressVersion = ipAddressVersion;
            Ipv4BandwidthPackageId = ipv4BandwidthPackageId;
            Ipv4NetworkType = ipv4NetworkType;
            Ipv6BandwidthPackageId = ipv6BandwidthPackageId;
            Ipv6NetworkType = ipv6NetworkType;
            LoadBalancerId = loadBalancerId;
            LoadBalancerName = loadBalancerName;
            ManagedSecurityGroupId = managedSecurityGroupId;
            ModificationProtectionStatus = modificationProtectionStatus;
            OverdueTime = overdueTime;
            ProjectName = projectName;
            ReclaimedTime = reclaimedTime;
            SecurityGroupIds = securityGroupIds;
            Status = status;
            Tags = tags;
            UpdatedTime = updatedTime;
            VpcId = vpcId;
            ZoneMappings = zoneMappings;
        }
    }
}
