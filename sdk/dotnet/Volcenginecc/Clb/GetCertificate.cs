// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Clb
{
    public static class GetCertificate
    {
        /// <summary>
        /// Data Source schema for Volcengine::CLB::Certificate
        /// </summary>
        public static Task<GetCertificateResult> InvokeAsync(GetCertificateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCertificateResult>("volcenginecc:clb/getCertificate:getCertificate", args ?? new GetCertificateArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CLB::Certificate
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("volcenginecc:clb/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CLB::Certificate
        /// </summary>
        public static Output<GetCertificateResult> Invoke(GetCertificateInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCertificateResult>("volcenginecc:clb/getCertificate:getCertificate", args ?? new GetCertificateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCertificateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCertificateArgs()
        {
        }
        public static new GetCertificateArgs Empty => new GetCertificateArgs();
    }

    public sealed class GetCertificateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCertificateInvokeArgs()
        {
        }
        public static new GetCertificateInvokeArgs Empty => new GetCertificateInvokeArgs();
    }


    [OutputType]
    public sealed class GetCertificateResult
    {
        /// <summary>
        /// 证书的ID。
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// 证书的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线（_）和中划线（-）。长度限制为1 ～ 128个字符。
        /// </summary>
        public readonly string CertificateName;
        /// <summary>
        /// 证书的创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 证书的描述，默认值为空字符串。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 证书的主域名。
        /// </summary>
        public readonly string DomainName;
        /// <summary>
        /// 证书的过期时间。
        /// </summary>
        public readonly string ExpiredAt;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 证书关联的监听器的ID。
        /// </summary>
        public readonly ImmutableArray<string> Listeners;
        /// <summary>
        /// 证书的私钥。
        /// </summary>
        public readonly string PrivateKey;
        /// <summary>
        /// 证书所属项目的名称。不填默认为default。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 证书的公钥。
        /// </summary>
        public readonly string PublicKey;
        /// <summary>
        /// 是否为托管资源。true：托管资源。false：非托管资源。
        /// </summary>
        public readonly bool ServiceManaged;
        /// <summary>
        /// 证书的备用域名列表。
        /// </summary>
        public readonly ImmutableArray<string> SubjectAlternativeNames;
        /// <summary>
        /// 标签列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCertificateTagResult> Tags;

        [OutputConstructor]
        private GetCertificateResult(
            string certificateId,

            string certificateName,

            string createdTime,

            string description,

            string domainName,

            string expiredAt,

            string id,

            ImmutableArray<string> listeners,

            string privateKey,

            string projectName,

            string publicKey,

            bool serviceManaged,

            ImmutableArray<string> subjectAlternativeNames,

            ImmutableArray<Outputs.GetCertificateTagResult> tags)
        {
            CertificateId = certificateId;
            CertificateName = certificateName;
            CreatedTime = createdTime;
            Description = description;
            DomainName = domainName;
            ExpiredAt = expiredAt;
            Id = id;
            Listeners = listeners;
            PrivateKey = privateKey;
            ProjectName = projectName;
            PublicKey = publicKey;
            ServiceManaged = serviceManaged;
            SubjectAlternativeNames = subjectAlternativeNames;
            Tags = tags;
        }
    }
}
