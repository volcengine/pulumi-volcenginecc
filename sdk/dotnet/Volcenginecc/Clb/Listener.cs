// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Clb
{
    /// <summary>
    /// 监听器负责根据指定的协议和端口，监听CLB实例接收到的用户访问请求。CLB将按照该监听器配置的调度算法，将访问请求转发至该后端服务器组内健康的后端服务器。
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:clb/listener:Listener example "listener_id"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:clb/listener:Listener")]
    public partial class Listener : global::Pulumi.CustomResource
    {
        /// <summary>
        /// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
        /// </summary>
        [Output("aclIds")]
        public Output<ImmutableArray<string>> AclIds { get; private set; } = null!;

        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
        /// </summary>
        [Output("aclStatus")]
        public Output<string> AclStatus { get; private set; } = null!;

        /// <summary>
        /// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
        /// </summary>
        [Output("aclType")]
        public Output<string> AclType { get; private set; } = null!;

        /// <summary>
        /// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// 双向认证的CA证书。
        /// </summary>
        [Output("caCertificateId")]
        public Output<string> CaCertificateId { get; private set; } = null!;

        /// <summary>
        /// 是否开启双向认证。on：开启。off（默认值）：不开启。
        /// </summary>
        [Output("caEnabled")]
        public Output<string> CaEnabled { get; private set; } = null!;

        /// <summary>
        /// 证书中心的证书的ID。
        /// </summary>
        [Output("certCenterCertificateId")]
        public Output<string> CertCenterCertificateId { get; private set; } = null!;

        /// <summary>
        /// CLB侧证书管理模块的证书的ID。
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
        /// </summary>
        [Output("certificateSource")]
        public Output<string> CertificateSource { get; private set; } = null!;

        /// <summary>
        /// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
        /// </summary>
        [Output("clientBodyTimeout")]
        public Output<int> ClientBodyTimeout { get; private set; } = null!;

        /// <summary>
        /// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Output("clientHeaderTimeout")]
        public Output<int> ClientHeaderTimeout { get; private set; } = null!;

        /// <summary>
        /// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
        /// </summary>
        [Output("connectionDrainEnabled")]
        public Output<string> ConnectionDrainEnabled { get; private set; } = null!;

        /// <summary>
        /// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
        /// </summary>
        [Output("connectionDrainTimeout")]
        public Output<int> ConnectionDrainTimeout { get; private set; } = null!;

        /// <summary>
        /// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
        /// </summary>
        [Output("cookie")]
        public Output<string> Cookie { get; private set; } = null!;

        /// <summary>
        /// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
        /// </summary>
        [Output("cps")]
        public Output<int> Cps { get; private set; } = null!;

        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// 是否启用监听器。on（默认值）：开启。off：不开启。
        /// </summary>
        [Output("enabled")]
        public Output<string> Enabled { get; private set; } = null!;

        /// <summary>
        /// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
        /// </summary>
        [Output("endPort")]
        public Output<int> EndPort { get; private set; } = null!;

        /// <summary>
        /// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
        /// </summary>
        [Output("establishedTimeout")]
        public Output<int> EstablishedTimeout { get; private set; } = null!;

        /// <summary>
        /// 健康检查相关信息。
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ListenerHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
        /// </summary>
        [Output("http2Enabled")]
        public Output<string> Http2Enabled { get; private set; } = null!;

        /// <summary>
        /// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Output("keepaliveTimeout")]
        public Output<int> KeepaliveTimeout { get; private set; } = null!;

        /// <summary>
        /// 监听器的ID。
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        /// <summary>
        /// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
        /// </summary>
        [Output("listenerName")]
        public Output<string> ListenerName { get; private set; } = null!;

        /// <summary>
        /// CLB实例的ID。
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
        /// </summary>
        [Output("maxConnections")]
        public Output<int> MaxConnections { get; private set; } = null!;

        /// <summary>
        /// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
        /// </summary>
        [Output("persistenceTimeout")]
        public Output<int> PersistenceTimeout { get; private set; } = null!;

        /// <summary>
        /// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
        /// </summary>
        [Output("persistenceType")]
        public Output<string> PersistenceType { get; private set; } = null!;

        /// <summary>
        /// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// 监听器的协议。
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Output("proxyConnectTimeout")]
        public Output<int> ProxyConnectTimeout { get; private set; } = null!;

        /// <summary>
        /// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
        /// </summary>
        [Output("proxyProtocolType")]
        public Output<string> ProxyProtocolType { get; private set; } = null!;

        /// <summary>
        /// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Output("proxyReadTimeout")]
        public Output<int> ProxyReadTimeout { get; private set; } = null!;

        /// <summary>
        /// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Output("proxySendTimeout")]
        public Output<int> ProxySendTimeout { get; private set; } = null!;

        /// <summary>
        /// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        [Output("scheduler")]
        public Output<string> Scheduler { get; private set; } = null!;

        /// <summary>
        /// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
        /// </summary>
        [Output("securityPolicyId")]
        public Output<string> SecurityPolicyId { get; private set; } = null!;

        /// <summary>
        /// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Output("sendTimeout")]
        public Output<int> SendTimeout { get; private set; } = null!;

        /// <summary>
        /// 监听器关联的后端服务器组 ID。
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;

        /// <summary>
        /// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
        /// </summary>
        [Output("startPort")]
        public Output<int> StartPort { get; private set; } = null!;

        /// <summary>
        /// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.ListenerTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// 监听器最近一次的操作时间。
        /// </summary>
        [Output("updatedTime")]
        public Output<string> UpdatedTime { get; private set; } = null!;

        /// <summary>
        /// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
        /// </summary>
        [Output("wafProtectionEnabled")]
        public Output<string> WafProtectionEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:clb/listener:Listener", name, args ?? new ListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:clb/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// 双向认证的CA证书。
        /// </summary>
        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        /// <summary>
        /// 是否开启双向认证。on：开启。off（默认值）：不开启。
        /// </summary>
        [Input("caEnabled")]
        public Input<string>? CaEnabled { get; set; }

        /// <summary>
        /// 证书中心的证书的ID。
        /// </summary>
        [Input("certCenterCertificateId")]
        public Input<string>? CertCenterCertificateId { get; set; }

        /// <summary>
        /// CLB侧证书管理模块的证书的ID。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
        /// </summary>
        [Input("clientBodyTimeout")]
        public Input<int>? ClientBodyTimeout { get; set; }

        /// <summary>
        /// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("clientHeaderTimeout")]
        public Input<int>? ClientHeaderTimeout { get; set; }

        /// <summary>
        /// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
        /// </summary>
        [Input("connectionDrainEnabled")]
        public Input<string>? ConnectionDrainEnabled { get; set; }

        /// <summary>
        /// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
        /// </summary>
        [Input("connectionDrainTimeout")]
        public Input<int>? ConnectionDrainTimeout { get; set; }

        /// <summary>
        /// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
        /// </summary>
        [Input("cookie")]
        public Input<string>? Cookie { get; set; }

        /// <summary>
        /// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
        /// </summary>
        [Input("cps")]
        public Input<int>? Cps { get; set; }

        /// <summary>
        /// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 是否启用监听器。on（默认值）：开启。off：不开启。
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
        /// </summary>
        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        /// <summary>
        /// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
        /// </summary>
        [Input("establishedTimeout")]
        public Input<int>? EstablishedTimeout { get; set; }

        /// <summary>
        /// 健康检查相关信息。
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ListenerHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
        /// </summary>
        [Input("http2Enabled")]
        public Input<string>? Http2Enabled { get; set; }

        /// <summary>
        /// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("keepaliveTimeout")]
        public Input<int>? KeepaliveTimeout { get; set; }

        /// <summary>
        /// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// CLB实例的ID。
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
        /// </summary>
        [Input("persistenceTimeout")]
        public Input<int>? PersistenceTimeout { get; set; }

        /// <summary>
        /// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
        /// </summary>
        [Input("persistenceType")]
        public Input<string>? PersistenceType { get; set; }

        /// <summary>
        /// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// 监听器的协议。
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("proxyConnectTimeout")]
        public Input<int>? ProxyConnectTimeout { get; set; }

        /// <summary>
        /// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
        /// </summary>
        [Input("proxyProtocolType")]
        public Input<string>? ProxyProtocolType { get; set; }

        /// <summary>
        /// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("proxyReadTimeout")]
        public Input<int>? ProxyReadTimeout { get; set; }

        /// <summary>
        /// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("proxySendTimeout")]
        public Input<int>? ProxySendTimeout { get; set; }

        /// <summary>
        /// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("sendTimeout")]
        public Input<int>? SendTimeout { get; set; }

        /// <summary>
        /// 监听器关联的后端服务器组 ID。
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        /// <summary>
        /// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
        /// </summary>
        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        [Input("tags")]
        private InputList<Inputs.ListenerTagArgs>? _tags;
        public InputList<Inputs.ListenerTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ListenerTagArgs>());
            set => _tags = value;
        }

        public ListenerArgs()
        {
        }
        public static new ListenerArgs Empty => new ListenerArgs();
    }

    public sealed class ListenerState : global::Pulumi.ResourceArgs
    {
        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// 双向认证的CA证书。
        /// </summary>
        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        /// <summary>
        /// 是否开启双向认证。on：开启。off（默认值）：不开启。
        /// </summary>
        [Input("caEnabled")]
        public Input<string>? CaEnabled { get; set; }

        /// <summary>
        /// 证书中心的证书的ID。
        /// </summary>
        [Input("certCenterCertificateId")]
        public Input<string>? CertCenterCertificateId { get; set; }

        /// <summary>
        /// CLB侧证书管理模块的证书的ID。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
        /// </summary>
        [Input("clientBodyTimeout")]
        public Input<int>? ClientBodyTimeout { get; set; }

        /// <summary>
        /// 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("clientHeaderTimeout")]
        public Input<int>? ClientHeaderTimeout { get; set; }

        /// <summary>
        /// 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
        /// </summary>
        [Input("connectionDrainEnabled")]
        public Input<string>? ConnectionDrainEnabled { get; set; }

        /// <summary>
        /// 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
        /// </summary>
        [Input("connectionDrainTimeout")]
        public Input<int>? ConnectionDrainTimeout { get; set; }

        /// <summary>
        /// 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
        /// </summary>
        [Input("cookie")]
        public Input<string>? Cookie { get; set; }

        /// <summary>
        /// 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
        /// </summary>
        [Input("cps")]
        public Input<int>? Cps { get; set; }

        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 是否启用监听器。on（默认值）：开启。off：不开启。
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
        /// </summary>
        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        /// <summary>
        /// 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
        /// </summary>
        [Input("establishedTimeout")]
        public Input<int>? EstablishedTimeout { get; set; }

        /// <summary>
        /// 健康检查相关信息。
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ListenerHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
        /// </summary>
        [Input("http2Enabled")]
        public Input<string>? Http2Enabled { get; set; }

        /// <summary>
        /// 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("keepaliveTimeout")]
        public Input<int>? KeepaliveTimeout { get; set; }

        /// <summary>
        /// 监听器的ID。
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        /// <summary>
        /// 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// CLB实例的ID。
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
        /// </summary>
        [Input("maxConnections")]
        public Input<int>? MaxConnections { get; set; }

        /// <summary>
        /// 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
        /// </summary>
        [Input("persistenceTimeout")]
        public Input<int>? PersistenceTimeout { get; set; }

        /// <summary>
        /// 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
        /// </summary>
        [Input("persistenceType")]
        public Input<string>? PersistenceType { get; set; }

        /// <summary>
        /// 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// 监听器的协议。
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("proxyConnectTimeout")]
        public Input<int>? ProxyConnectTimeout { get; set; }

        /// <summary>
        /// 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
        /// </summary>
        [Input("proxyProtocolType")]
        public Input<string>? ProxyProtocolType { get; set; }

        /// <summary>
        /// CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("proxyReadTimeout")]
        public Input<int>? ProxyReadTimeout { get; set; }

        /// <summary>
        /// CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("proxySendTimeout")]
        public Input<int>? ProxySendTimeout { get; set; }

        /// <summary>
        /// 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
        /// </summary>
        [Input("sendTimeout")]
        public Input<int>? SendTimeout { get; set; }

        /// <summary>
        /// 监听器关联的后端服务器组 ID。
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        /// <summary>
        /// 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
        /// </summary>
        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        /// <summary>
        /// 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.ListenerTagGetArgs>? _tags;
        public InputList<Inputs.ListenerTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ListenerTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 监听器最近一次的操作时间。
        /// </summary>
        [Input("updatedTime")]
        public Input<string>? UpdatedTime { get; set; }

        /// <summary>
        /// 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
        /// </summary>
        [Input("wafProtectionEnabled")]
        public Input<string>? WafProtectionEnabled { get; set; }

        public ListenerState()
        {
        }
        public static new ListenerState Empty => new ListenerState();
    }
}
