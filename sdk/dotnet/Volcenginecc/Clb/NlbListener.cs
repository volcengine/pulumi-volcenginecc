// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Clb
{
    /// <summary>
    /// 监听器负责根据指定的协议和端口，监听NLB实例接收到的用户访问请求。NLB将按照该监听器关联的服务器组配置的调度算法，将访问请求转发至该服务器组内健康的后端服务器。
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcenginecc = Volcengine.Pulumi.Volcenginecc;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cLBNLBListenerDemo = new Volcenginecc.Clb.NlbListener("CLBNLBListenerDemo", new()
    ///     {
    ///         LoadBalancerId = "nlb-11zz9w3jqptz449iegfwvxxxx",
    ///         Protocol = "TCP",
    ///         Port = 0,
    ///         ServerGroupId = "rsp-11zz9wdewa3uo49ieggq8xxxx",
    ///         ConnectionTimeout = 60,
    ///         Description = "CLBNLBListenerDemo description",
    ///         Enabled = true,
    ///         ListenerName = "CLBNLBListenerDemo",
    ///         Tags = new[]
    ///         {
    ///             new Volcenginecc.Clb.Inputs.NlbListenerTagArgs
    ///             {
    ///                 Key = "env",
    ///                 Value = "Test",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import volcenginecc:clb/nlbListener:NlbListener example "listener_id"
    /// ```
    /// </summary>
    [VolcengineccResourceType("volcenginecc:clb/nlbListener:NlbListener")]
    public partial class NlbListener : global::Pulumi.CustomResource
    {
        /// <summary>
        /// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
        /// </summary>
        [Output("certificateId")]
        public Output<string> CertificateId { get; private set; } = null!;

        /// <summary>
        /// 监听器的连接超时时间（秒）。
        /// </summary>
        [Output("connectionTimeout")]
        public Output<int> ConnectionTimeout { get; private set; } = null!;

        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        [Output("createdTime")]
        public Output<string> CreatedTime { get; private set; } = null!;

        /// <summary>
        /// 监听器描述信息。
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// 是否启用监听器。true：开启；false：关闭。
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// 全端口监听的结束端口，仅当Port为0时有效。
        /// </summary>
        [Output("endPort")]
        public Output<int> EndPort { get; private set; } = null!;

        [Output("healths")]
        public Output<ImmutableArray<Outputs.NlbListenerHealth>> Healths { get; private set; } = null!;

        /// <summary>
        /// 监听器唯一标识。
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        /// <summary>
        /// 监听器名称。
        /// </summary>
        [Output("listenerName")]
        public Output<string> ListenerName { get; private set; } = null!;

        /// <summary>
        /// 负载均衡实例ID。
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// 监听器接收请求的端口，0表示启用全端口监听。
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// 监听协议类型。
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
        /// </summary>
        [Output("securityPolicyId")]
        public Output<string> SecurityPolicyId { get; private set; } = null!;

        /// <summary>
        /// 监听器关联的服务器组ID。
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;

        /// <summary>
        /// 全端口监听的起始端口，仅当Port为0时有效。
        /// </summary>
        [Output("startPort")]
        public Output<int> StartPort { get; private set; } = null!;

        /// <summary>
        /// 监听器的状态。
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableArray<Outputs.NlbListenerTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// 监听器最近操作时间。
        /// </summary>
        [Output("updatedTime")]
        public Output<string> UpdatedTime { get; private set; } = null!;


        /// <summary>
        /// Create a NlbListener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NlbListener(string name, NlbListenerArgs args, CustomResourceOptions? options = null)
            : base("volcenginecc:clb/nlbListener:NlbListener", name, args ?? new NlbListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NlbListener(string name, Input<string> id, NlbListenerState? state = null, CustomResourceOptions? options = null)
            : base("volcenginecc:clb/nlbListener:NlbListener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NlbListener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NlbListener Get(string name, Input<string> id, NlbListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new NlbListener(name, id, state, options);
        }
    }

    public sealed class NlbListenerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// 监听器的连接超时时间（秒）。
        /// </summary>
        [Input("connectionTimeout")]
        public Input<int>? ConnectionTimeout { get; set; }

        /// <summary>
        /// 监听器描述信息。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 是否启用监听器。true：开启；false：关闭。
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// 全端口监听的结束端口，仅当Port为0时有效。
        /// </summary>
        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        [Input("healths")]
        private InputList<Inputs.NlbListenerHealthArgs>? _healths;
        public InputList<Inputs.NlbListenerHealthArgs> Healths
        {
            get => _healths ?? (_healths = new InputList<Inputs.NlbListenerHealthArgs>());
            set => _healths = value;
        }

        /// <summary>
        /// 监听器名称。
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// 负载均衡实例ID。
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// 监听器接收请求的端口，0表示启用全端口监听。
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// 监听协议类型。
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// 监听器关联的服务器组ID。
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        /// <summary>
        /// 全端口监听的起始端口，仅当Port为0时有效。
        /// </summary>
        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        [Input("tags")]
        private InputList<Inputs.NlbListenerTagArgs>? _tags;
        public InputList<Inputs.NlbListenerTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NlbListenerTagArgs>());
            set => _tags = value;
        }

        public NlbListenerArgs()
        {
        }
        public static new NlbListenerArgs Empty => new NlbListenerArgs();
    }

    public sealed class NlbListenerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// 监听器的连接超时时间（秒）。
        /// </summary>
        [Input("connectionTimeout")]
        public Input<int>? ConnectionTimeout { get; set; }

        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        [Input("createdTime")]
        public Input<string>? CreatedTime { get; set; }

        /// <summary>
        /// 监听器描述信息。
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// 是否启用监听器。true：开启；false：关闭。
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// 全端口监听的结束端口，仅当Port为0时有效。
        /// </summary>
        [Input("endPort")]
        public Input<int>? EndPort { get; set; }

        [Input("healths")]
        private InputList<Inputs.NlbListenerHealthGetArgs>? _healths;
        public InputList<Inputs.NlbListenerHealthGetArgs> Healths
        {
            get => _healths ?? (_healths = new InputList<Inputs.NlbListenerHealthGetArgs>());
            set => _healths = value;
        }

        /// <summary>
        /// 监听器唯一标识。
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        /// <summary>
        /// 监听器名称。
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// 负载均衡实例ID。
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// 监听器接收请求的端口，0表示启用全端口监听。
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// 监听协议类型。
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
        /// </summary>
        [Input("securityPolicyId")]
        public Input<string>? SecurityPolicyId { get; set; }

        /// <summary>
        /// 监听器关联的服务器组ID。
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        /// <summary>
        /// 全端口监听的起始端口，仅当Port为0时有效。
        /// </summary>
        [Input("startPort")]
        public Input<int>? StartPort { get; set; }

        /// <summary>
        /// 监听器的状态。
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.NlbListenerTagGetArgs>? _tags;
        public InputList<Inputs.NlbListenerTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.NlbListenerTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// 监听器最近操作时间。
        /// </summary>
        [Input("updatedTime")]
        public Input<string>? UpdatedTime { get; set; }

        public NlbListenerState()
        {
        }
        public static new NlbListenerState Empty => new NlbListenerState();
    }
}
