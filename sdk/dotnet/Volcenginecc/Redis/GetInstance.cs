// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcenginecc.Redis
{
    public static class GetInstance
    {
        /// <summary>
        /// Data Source schema for Volcengine::Redis::Instance
        /// </summary>
        public static Task<GetInstanceResult> InvokeAsync(GetInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstanceResult>("volcenginecc:redis/getInstance:getInstance", args ?? new GetInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::Redis::Instance
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("volcenginecc:redis/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::Redis::Instance
        /// </summary>
        public static Output<GetInstanceResult> Invoke(GetInstanceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstanceResult>("volcenginecc:redis/getInstance:getInstance", args ?? new GetInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetInstanceArgs()
        {
        }
        public static new GetInstanceArgs Empty => new GetInstanceArgs();
    }

    public sealed class GetInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetInstanceInvokeArgs()
        {
        }
        public static new GetInstanceInvokeArgs Empty => new GetInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstanceResult
    {
        /// <summary>
        /// 白名单 ID 列表。若该参数留空，新建实例默认不加入任何白名单。您可以调用 DescribeAllowLists 接口查询当前账号下指定地域内的所有 IP 白名单信息，包括白名单 ID 信息。每个实例最多支持绑定 100 个白名单，每次可最多批量绑定 100 个白名单。每个实例最多支持绑定 1000 个 IP 地址或 CIDR 格式的 IP 地址段。
        /// </summary>
        public readonly ImmutableArray<string> AllowListIds;
        /// <summary>
        /// 是否开启自动续费。取值范围如下：false（默认值）：不开启。true：开启。
        /// </summary>
        public readonly bool AutoRenew;
        /// <summary>
        /// 为变更前创建的全量备份设置备份名称。
        /// </summary>
        public readonly string BackupPointName;
        /// <summary>
        /// 实例的容量信息。
        /// </summary>
        public readonly Outputs.GetInstanceCapacityResult Capacity;
        /// <summary>
        /// 实例计费类型。取值范围如下：PrePaid：包年包月（也称预付费）。PostPaid：按量计费（也称后付费）。
        /// </summary>
        public readonly string ChargeType;
        /// <summary>
        /// 设置节点所属的可用区列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceConfigureNodeResult> ConfigureNodes;
        /// <summary>
        /// 是否在变更前创建备份。
        /// </summary>
        public readonly bool CreateBackup;
        /// <summary>
        /// 实例的创建时间。
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// 实例的数据存储形态。该参数仅对企业版（即ServiceType为Enterprise）实例有意义；社区版（即ServiceType为Basic）实例不涉及数据存储形态，DataLayout取值固定为RAM。若该参数留空，表示不使用数据存储形态进行筛选。
        /// </summary>
        public readonly string DataLayout;
        /// <summary>
        /// 开启或关闭实例删除保护功能。
        /// </summary>
        public readonly string DeletionProtection;
        /// <summary>
        /// 数据库版本号。
        /// </summary>
        public readonly string EngineVersion;
        /// <summary>
        /// 实例到期时间。
        /// </summary>
        public readonly string ExpiredTime;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Redis 实例的类型。取值范围如下：PrimarySecondary：主备实例；Standalone：单节点实例。若该参数留空，表示不使用实例类型条件进行筛选。关于实例类型的更多信息，请参见产品架构。
        /// </summary>
        public readonly string InstanceClass;
        /// <summary>
        /// 实例 ID。
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// 实例名称。命名规则：不能以数字、中划线（-）开头；只能包含中文、字母、数字、下划线（_）和中划线（-）；长度需要在1~128个字符内。
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// 实例中所有 Shard 分片的详情列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceInstanceShardResult> InstanceShards;
        /// <summary>
        /// 实例的可维护时间段，格式为HH:mm-HH:mm（UTC+8）。
        /// </summary>
        public readonly string MaintenanceTime;
        /// <summary>
        /// 实例当前单分片最大连接数。每分片的默认连接数为10000，您也可以根据业务需要调用ModifyDBInstanceMaxConn接口修改单分片的最大连接数。
        /// </summary>
        public readonly int MaxConnections;
        /// <summary>
        /// 设置实例的可用区部署方案。
        /// </summary>
        public readonly string MultiAz;
        /// <summary>
        /// 为新建实例开启或关闭免密访问功能。取值范围如下：open：开启免密访问。close（默认值）：关闭免密访问。
        /// </summary>
        public readonly string NoAuthMode;
        /// <summary>
        /// Proxy 和 Server 节点 ID 列表。
        /// </summary>
        public readonly ImmutableArray<string> NodeIds;
        /// <summary>
        /// 每个分片中的节点数。取值范围为1~6。每个账号在每个地域下默认最多可创建4个256MiB规格的节点，若需要调整配额上限为10个，请参见账号配额。取值为1时表示创建单节点实例；取值大于1时表示创建主备实例。关于两种类型实例的功能特性差异详情，请参见功能特性差异。
        /// </summary>
        public readonly int NodeNumber;
        /// <summary>
        /// 需要应用到新实例的参数模板。缓存数据库 Redis 版为每个数据库版本都创建了一份默认的系统参数模板，模板中包含了该版本支持设置的所有参数和默认参数值。若该参数留空，默认会根据您设置的数据库版本（即 EngineVersion）为新建实例选择并应用对应版本的系统参数模板。您可以调用 DescribeParameterGroups 接口查询当前账号和地域下的所有参数模板的基本信息，包括参数模板 ID。
        /// </summary>
        public readonly string ParameterGroupId;
        /// <summary>
        /// 设置默认数据库 default 账号的密码。
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// 自定义私网连接地址的端口号。取值范围：1024~65535。若该参数留空，私网连接地址默认使用6379端口。实例创建成功后，还可以修改私网地址的端口号，修改方法请参见修改端口号。
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// 实例私网连接地址的域名。
        /// </summary>
        public readonly string PrivateAddress;
        /// <summary>
        /// 实例所属的项目。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 购买时长，单位：月。取值范围如下：按月购买：1，2，3，4，5，6，7，8，9。按年购买：12，24，36。当ChargeType为PrePaid时，该参数必填。
        /// </summary>
        public readonly int PurchaseMonths;
        /// <summary>
        /// 设置是否保留额外带宽
        /// </summary>
        public readonly bool ReserveAdditionalBandwidth;
        /// <summary>
        /// 实例的服务类型
        /// </summary>
        public readonly string ServiceType;
        /// <summary>
        /// 实例中每个分片的内存容量。单位：MiB。
        /// </summary>
        public readonly int ShardCapacity;
        /// <summary>
        /// 实例中的分片数量。取值范围为 2~256。仅当 ShardedCluster 取值为 1（即启用分片集群）时，需要指定该参数。
        /// </summary>
        public readonly int ShardNumber;
        /// <summary>
        /// 是否启用分片集群。取值范围如下：0：不启用。1：启用。
        /// </summary>
        public readonly int ShardedCluster;
        /// <summary>
        /// 实例的服务类型，取值范围如下：Basic（默认值）：社区版；Enterprise：企业版。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 设置实例的子网ID。子网具有可用区属性，必须选择目标私有网络中与实例属于同一可用区下的子网。子网是私有网络内的IP地址块私有网络中的所有云资源都必须部署在子网内，子网为云资源分配私网IP地址，您可以调用CreateSubnet接口创建子网。您可以调用DescribeSubnets接口查询指定可用区内的所有子网列表信息，包括子网ID。
        /// </summary>
        public readonly string SubnetId;
        /// <summary>
        /// 设置实例的标签列表。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceTagResult> Tags;
        /// <summary>
        /// 实例私网连接地址所对应的 IPv6 地址。仅当实例使用了 IPv6 地址时才会返回该参数。
        /// </summary>
        public readonly string ViPv6;
        /// <summary>
        /// 实例私网连接地址所对应的 IPv4 地址。
        /// </summary>
        public readonly string Vip;
        /// <summary>
        /// 连接地址信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstanceVisitAddrResult> VisitAddrs;
        /// <summary>
        /// 开启或关闭免密访问功能。取值范围如下：open：开启免密访问；close：关闭免密访问。参数取值不区分大小写。
        /// </summary>
        public readonly string VpcAuthMode;
        /// <summary>
        /// 设置实例的私有网络ID。建议Redis实例与需要连接的ECS实例在同一私有网络，否则它们无法通过内网互通来实现最佳性能。您可以调用CreateVpc接口创建私有网络。您可以调用DescribeVpcs接口查询符合指定条件的私有网络信息，包括私有网络ID。
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// 实例所在的可用区列表。
        /// </summary>
        public readonly ImmutableArray<string> ZoneIds;

        [OutputConstructor]
        private GetInstanceResult(
            ImmutableArray<string> allowListIds,

            bool autoRenew,

            string backupPointName,

            Outputs.GetInstanceCapacityResult capacity,

            string chargeType,

            ImmutableArray<Outputs.GetInstanceConfigureNodeResult> configureNodes,

            bool createBackup,

            string createTime,

            string dataLayout,

            string deletionProtection,

            string engineVersion,

            string expiredTime,

            string id,

            string instanceClass,

            string instanceId,

            string instanceName,

            ImmutableArray<Outputs.GetInstanceInstanceShardResult> instanceShards,

            string maintenanceTime,

            int maxConnections,

            string multiAz,

            string noAuthMode,

            ImmutableArray<string> nodeIds,

            int nodeNumber,

            string parameterGroupId,

            string password,

            int port,

            string privateAddress,

            string projectName,

            int purchaseMonths,

            bool reserveAdditionalBandwidth,

            string serviceType,

            int shardCapacity,

            int shardNumber,

            int shardedCluster,

            string status,

            string subnetId,

            ImmutableArray<Outputs.GetInstanceTagResult> tags,

            string viPv6,

            string vip,

            ImmutableArray<Outputs.GetInstanceVisitAddrResult> visitAddrs,

            string vpcAuthMode,

            string vpcId,

            ImmutableArray<string> zoneIds)
        {
            AllowListIds = allowListIds;
            AutoRenew = autoRenew;
            BackupPointName = backupPointName;
            Capacity = capacity;
            ChargeType = chargeType;
            ConfigureNodes = configureNodes;
            CreateBackup = createBackup;
            CreateTime = createTime;
            DataLayout = dataLayout;
            DeletionProtection = deletionProtection;
            EngineVersion = engineVersion;
            ExpiredTime = expiredTime;
            Id = id;
            InstanceClass = instanceClass;
            InstanceId = instanceId;
            InstanceName = instanceName;
            InstanceShards = instanceShards;
            MaintenanceTime = maintenanceTime;
            MaxConnections = maxConnections;
            MultiAz = multiAz;
            NoAuthMode = noAuthMode;
            NodeIds = nodeIds;
            NodeNumber = nodeNumber;
            ParameterGroupId = parameterGroupId;
            Password = password;
            Port = port;
            PrivateAddress = privateAddress;
            ProjectName = projectName;
            PurchaseMonths = purchaseMonths;
            ReserveAdditionalBandwidth = reserveAdditionalBandwidth;
            ServiceType = serviceType;
            ShardCapacity = shardCapacity;
            ShardNumber = shardNumber;
            ShardedCluster = shardedCluster;
            Status = status;
            SubnetId = subnetId;
            Tags = tags;
            ViPv6 = viPv6;
            Vip = vip;
            VisitAddrs = visitAddrs;
            VpcAuthMode = vpcAuthMode;
            VpcId = vpcId;
            ZoneIds = zoneIds;
        }
    }
}
