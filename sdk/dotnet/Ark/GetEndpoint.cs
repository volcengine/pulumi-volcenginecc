// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Ark
{
    public static class GetEndpoint
    {
        /// <summary>
        /// Data Source schema for Volcengine::ARK::Endpoint
        /// </summary>
        public static Task<GetEndpointResult> InvokeAsync(GetEndpointArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEndpointResult>("volcenginecc:ark/getEndpoint:getEndpoint", args ?? new GetEndpointArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ARK::Endpoint
        /// </summary>
        public static Output<GetEndpointResult> Invoke(GetEndpointInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEndpointResult>("volcenginecc:ark/getEndpoint:getEndpoint", args ?? new GetEndpointInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::ARK::Endpoint
        /// </summary>
        public static Output<GetEndpointResult> Invoke(GetEndpointInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEndpointResult>("volcenginecc:ark/getEndpoint:getEndpoint", args ?? new GetEndpointInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEndpointArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetEndpointArgs()
        {
        }
        public static new GetEndpointArgs Empty => new GetEndpointArgs();
    }

    public sealed class GetEndpointInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetEndpointInvokeArgs()
        {
        }
        public static new GetEndpointInvokeArgs Empty => new GetEndpointInvokeArgs();
    }


    [OutputType]
    public sealed class GetEndpointResult
    {
        /// <summary>
        /// 是否只支持 BatchChat。如果为true，只能访问 Batch 推理接口，否则只能访问在线推理接口。
        /// </summary>
        public readonly bool BatchOnly;
        /// <summary>
        /// 证书信息。
        /// </summary>
        public readonly Outputs.GetEndpointCertificateResult Certificate;
        /// <summary>
        /// 接入点创建时间，RFC3339格式。
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// 接入点描述。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 推理接入点的ID。
        /// </summary>
        public readonly string EndpointId;
        /// <summary>
        /// 接入点模型类型。取值:FoundationModel为基础模型;CustomModel为定制模型。
        /// </summary>
        public readonly string EndpointModelType;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 接入点接入模型。
        /// </summary>
        public readonly Outputs.GetEndpointModelReferenceResult ModelReference;
        /// <summary>
        /// 模型单元，为空表示后付费；否则预付费。
        /// </summary>
        public readonly string ModelUnitId;
        /// <summary>
        /// 内容护栏方案。
        /// </summary>
        public readonly Outputs.GetEndpointModerationResult Moderation;
        /// <summary>
        /// 接入点名称。
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// 资源所属的项目名称，默认值为default。
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// 接入点限流。
        /// </summary>
        public readonly Outputs.GetEndpointRateLimitResult RateLimit;
        /// <summary>
        /// 接入点切换的Id。
        /// </summary>
        public readonly string RollingId;
        /// <summary>
        /// 如果存在 TPM 保障包，则为 TPM 保障包 ID。
        /// </summary>
        public readonly string ScaleTierId;
        /// <summary>
        /// 接入点状态。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 状态附加说明信息。
        /// </summary>
        public readonly string StatusReason;
        /// <summary>
        /// 是否支持接入点切换模型版本。
        /// </summary>
        public readonly bool SupportRolling;
        /// <summary>
        /// 是否支持TPM保障包。
        /// </summary>
        public readonly bool SupportScaleTier;
        /// <summary>
        /// 接入点绑定的标签。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEndpointTagResult> Tags;
        /// <summary>
        /// 接入点更新时间，RFC3339格式。
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetEndpointResult(
            bool batchOnly,

            Outputs.GetEndpointCertificateResult certificate,

            string createTime,

            string description,

            string endpointId,

            string endpointModelType,

            string id,

            Outputs.GetEndpointModelReferenceResult modelReference,

            string modelUnitId,

            Outputs.GetEndpointModerationResult moderation,

            string name,

            string projectName,

            Outputs.GetEndpointRateLimitResult rateLimit,

            string rollingId,

            string scaleTierId,

            string status,

            string statusReason,

            bool supportRolling,

            bool supportScaleTier,

            ImmutableArray<Outputs.GetEndpointTagResult> tags,

            string updateTime)
        {
            BatchOnly = batchOnly;
            Certificate = certificate;
            CreateTime = createTime;
            Description = description;
            EndpointId = endpointId;
            EndpointModelType = endpointModelType;
            Id = id;
            ModelReference = modelReference;
            ModelUnitId = modelUnitId;
            Moderation = moderation;
            Name = name;
            ProjectName = projectName;
            RateLimit = rateLimit;
            RollingId = rollingId;
            ScaleTierId = scaleTierId;
            Status = status;
            StatusReason = statusReason;
            SupportRolling = supportRolling;
            SupportScaleTier = supportScaleTier;
            Tags = tags;
            UpdateTime = updateTime;
        }
    }
}
