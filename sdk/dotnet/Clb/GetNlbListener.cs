// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcenginecc.Clb
{
    public static class GetNlbListener
    {
        /// <summary>
        /// Data Source schema for Volcengine::CLB::NLBListener
        /// </summary>
        public static Task<GetNlbListenerResult> InvokeAsync(GetNlbListenerArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNlbListenerResult>("volcenginecc:clb/getNlbListener:getNlbListener", args ?? new GetNlbListenerArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CLB::NLBListener
        /// </summary>
        public static Output<GetNlbListenerResult> Invoke(GetNlbListenerInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNlbListenerResult>("volcenginecc:clb/getNlbListener:getNlbListener", args ?? new GetNlbListenerInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data Source schema for Volcengine::CLB::NLBListener
        /// </summary>
        public static Output<GetNlbListenerResult> Invoke(GetNlbListenerInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetNlbListenerResult>("volcenginecc:clb/getNlbListener:getNlbListener", args ?? new GetNlbListenerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNlbListenerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetNlbListenerArgs()
        {
        }
        public static new GetNlbListenerArgs Empty => new GetNlbListenerArgs();
    }

    public sealed class GetNlbListenerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetNlbListenerInvokeArgs()
        {
        }
        public static new GetNlbListenerInvokeArgs Empty => new GetNlbListenerInvokeArgs();
    }


    [OutputType]
    public sealed class GetNlbListenerResult
    {
        /// <summary>
        /// TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// 监听器的连接超时时间（秒）。
        /// </summary>
        public readonly int ConnectionTimeout;
        /// <summary>
        /// 监听器的创建时间。
        /// </summary>
        public readonly string CreatedTime;
        /// <summary>
        /// 监听器描述信息。
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// 是否启用监听器。true：开启；false：关闭。
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// 全端口监听的结束端口，仅当Port为0时有效。
        /// </summary>
        public readonly int EndPort;
        /// <summary>
        /// 后端实例健康检查响应信息。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNlbListenerHealthResult> Healths;
        /// <summary>
        /// Uniquely identifies the resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// 监听器唯一标识。
        /// </summary>
        public readonly string ListenerId;
        /// <summary>
        /// 监听器名称。
        /// </summary>
        public readonly string ListenerName;
        /// <summary>
        /// 负载均衡实例ID。
        /// </summary>
        public readonly string LoadBalancerId;
        /// <summary>
        /// 监听器接收请求的端口，0表示启用全端口监听。
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// 监听协议类型。
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
        /// </summary>
        public readonly string SecurityPolicyId;
        /// <summary>
        /// 监听器关联的服务器组ID。
        /// </summary>
        public readonly string ServerGroupId;
        /// <summary>
        /// 全端口监听的起始端口，仅当Port为0时有效。
        /// </summary>
        public readonly int StartPort;
        /// <summary>
        /// 监听器的状态。
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// 资源标签。
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNlbListenerTagResult> Tags;
        /// <summary>
        /// 监听器最近操作时间。
        /// </summary>
        public readonly string UpdatedTime;

        [OutputConstructor]
        private GetNlbListenerResult(
            string certificateId,

            int connectionTimeout,

            string createdTime,

            string description,

            bool enabled,

            int endPort,

            ImmutableArray<Outputs.GetNlbListenerHealthResult> healths,

            string id,

            string listenerId,

            string listenerName,

            string loadBalancerId,

            int port,

            string protocol,

            string securityPolicyId,

            string serverGroupId,

            int startPort,

            string status,

            ImmutableArray<Outputs.GetNlbListenerTagResult> tags,

            string updatedTime)
        {
            CertificateId = certificateId;
            ConnectionTimeout = connectionTimeout;
            CreatedTime = createdTime;
            Description = description;
            Enabled = enabled;
            EndPort = endPort;
            Healths = healths;
            Id = id;
            ListenerId = listenerId;
            ListenerName = listenerName;
            LoadBalancerId = loadBalancerId;
            Port = port;
            Protocol = protocol;
            SecurityPolicyId = securityPolicyId;
            ServerGroupId = serverGroupId;
            StartPort = startPort;
            Status = status;
            Tags = tags;
            UpdatedTime = updatedTime;
        }
    }
}
