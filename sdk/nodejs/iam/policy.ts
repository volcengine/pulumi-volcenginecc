// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * 策略是对权限的一种描述，IAM用户、用户组或角色均需通过关联策略来赋予权限。当系统预设策略不能满足要求时，您可以创建自定义策略，对权限进行细粒度的定义。
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:iam/policy:Policy example "policy_name|policy_type"
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:iam/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * 策略绑定的身份数量。
     */
    public /*out*/ readonly attachmentCount!: pulumi.Output<number>;
    /**
     * 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     */
    public readonly category!: pulumi.Output<string>;
    /**
     * 策略创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 策略描述，长度不超过128。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 是否是服务关联角色的策略，0代表否，1代表是。
     */
    public /*out*/ readonly isServiceRolePolicy!: pulumi.Output<number>;
    /**
     * 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
     */
    public readonly policyDocument!: pulumi.Output<string>;
    /**
     * 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
     */
    public readonly policyName!: pulumi.Output<string>;
    public readonly policyRoles!: pulumi.Output<outputs.iam.PolicyPolicyRole[]>;
    /**
     * 策略的TRN。
     */
    public /*out*/ readonly policyTrn!: pulumi.Output<string>;
    /**
     * 策略类型。System代表系统预设策略，Custom代表自定义策略。
     */
    public readonly policyType!: pulumi.Output<string>;
    public readonly policyUserGroups!: pulumi.Output<outputs.iam.PolicyPolicyUserGroup[]>;
    public readonly policyUsers!: pulumi.Output<outputs.iam.PolicyPolicyUser[]>;
    /**
     * 策略更新时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["attachmentCount"] = state ? state.attachmentCount : undefined;
            resourceInputs["category"] = state ? state.category : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["isServiceRolePolicy"] = state ? state.isServiceRolePolicy : undefined;
            resourceInputs["policyDocument"] = state ? state.policyDocument : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["policyRoles"] = state ? state.policyRoles : undefined;
            resourceInputs["policyTrn"] = state ? state.policyTrn : undefined;
            resourceInputs["policyType"] = state ? state.policyType : undefined;
            resourceInputs["policyUserGroups"] = state ? state.policyUserGroups : undefined;
            resourceInputs["policyUsers"] = state ? state.policyUsers : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if ((!args || args.policyDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyDocument'");
            }
            if ((!args || args.policyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyName'");
            }
            if ((!args || args.policyType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyType'");
            }
            resourceInputs["category"] = args ? args.category : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["policyDocument"] = args ? args.policyDocument : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["policyRoles"] = args ? args.policyRoles : undefined;
            resourceInputs["policyType"] = args ? args.policyType : undefined;
            resourceInputs["policyUserGroups"] = args ? args.policyUserGroups : undefined;
            resourceInputs["policyUsers"] = args ? args.policyUsers : undefined;
            resourceInputs["attachmentCount"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["isServiceRolePolicy"] = undefined /*out*/;
            resourceInputs["policyTrn"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * 策略绑定的身份数量。
     */
    attachmentCount?: pulumi.Input<number>;
    /**
     * 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     */
    category?: pulumi.Input<string>;
    /**
     * 策略创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 策略描述，长度不超过128。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否是服务关联角色的策略，0代表否，1代表是。
     */
    isServiceRolePolicy?: pulumi.Input<number>;
    /**
     * 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
     */
    policyDocument?: pulumi.Input<string>;
    /**
     * 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
     */
    policyName?: pulumi.Input<string>;
    policyRoles?: pulumi.Input<pulumi.Input<inputs.iam.PolicyPolicyRole>[]>;
    /**
     * 策略的TRN。
     */
    policyTrn?: pulumi.Input<string>;
    /**
     * 策略类型。System代表系统预设策略，Custom代表自定义策略。
     */
    policyType?: pulumi.Input<string>;
    policyUserGroups?: pulumi.Input<pulumi.Input<inputs.iam.PolicyPolicyUserGroup>[]>;
    policyUsers?: pulumi.Input<pulumi.Input<inputs.iam.PolicyPolicyUser>[]>;
    /**
     * 策略更新时间。
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * 系统预设策略所属的分类，通常为服务代码，对于自定义策略该字段不会返回值。
     */
    category?: pulumi.Input<string>;
    /**
     * 策略描述，长度不超过128。
     */
    description?: pulumi.Input<string>;
    /**
     * 策略语法内容，例如：{"Statement":[{"Effect":"Allow","Action":["iam:","tag:"],"Resource":["*"]}]}
     */
    policyDocument: pulumi.Input<string>;
    /**
     * 策略名，长度1~64，支持英文、数字和+=,.@-_符号。
     */
    policyName: pulumi.Input<string>;
    policyRoles?: pulumi.Input<pulumi.Input<inputs.iam.PolicyPolicyRole>[]>;
    /**
     * 策略类型。System代表系统预设策略，Custom代表自定义策略。
     */
    policyType: pulumi.Input<string>;
    policyUserGroups?: pulumi.Input<pulumi.Input<inputs.iam.PolicyPolicyUserGroup>[]>;
    policyUsers?: pulumi.Input<pulumi.Input<inputs.iam.PolicyPolicyUser>[]>;
}
