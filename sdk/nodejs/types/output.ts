// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace config {
    export interface AssumeRole {
        /**
         * he TRN of the role to assume.
         */
        assumeRoleTrn: string;
        /**
         * The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
         */
        durationSeconds?: number;
        /**
         * A more restrictive policy when making the AssumeRole call
         */
        policy?: string;
    }

    export interface Endpoints {
        /**
         * Use this to override the default Cloud Control API service endpoint URL
         */
        cloudcontrolapi?: string;
        /**
         * Use this to override the default STS service endpoint URL
         */
        sts?: string;
    }

}

export namespace ecs {
    export interface GetImageDetectionResults {
        /**
         * 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
         */
        detectionStatus: string;
        /**
         * 镜像检测项详情。
         */
        items: outputs.ecs.GetImageDetectionResultsItem[];
    }

    export interface GetImageDetectionResultsItem {
        /**
         * 检测项名称。
         */
        name: string;
        /**
         * 该检测项对应结果。
         */
        result: string;
        /**
         * 风险描述码。
         */
        riskCode: string;
        /**
         * 风险等级。若该参数返回值为空，表示无风险。
         */
        riskLevel: string;
    }

    export interface GetImageSnapshot {
        /**
         * 快照大小。单位为GiB。
         */
        size: number;
        /**
         * 快照ID。
         */
        snapshotId: string;
        /**
         * 云盘种类。system：系统盘。data：数据盘。
         */
        volumeKind: string;
    }

    export interface GetImageTag {
        /**
         * 镜像标签的标签键。
         */
        key: string;
        /**
         * 镜像标签的值。
         */
        value: string;
    }

    export interface ImageDetectionResults {
        /**
         * 检测状态。可以选择Finished（已完成）、Processing（处理中）类型。
         */
        detectionStatus: string;
        items: outputs.ecs.ImageDetectionResultsItem[];
    }

    export interface ImageDetectionResultsItem {
        /**
         * 检测项名称。
         */
        name: string;
        /**
         * 该检测项对应结果。
         */
        result: string;
        /**
         * 风险描述码。
         */
        riskCode: string;
        /**
         * 风险等级。若该参数返回值为空，表示无风险。
         */
        riskLevel: string;
    }

    export interface ImageSnapshot {
        /**
         * 快照大小。单位为GiB。
         */
        size: number;
        /**
         * 快照ID。
         */
        snapshotId: string;
        /**
         * 云盘种类。system：系统盘。data：数据盘。
         */
        volumeKind: string;
    }

    export interface ImageTag {
        /**
         * 镜像标签的标签键。
         */
        key: string;
        /**
         * 镜像标签的值。
         */
        value: string;
    }

}

export namespace iam {
    export interface GetRolePolicy {
        /**
         * 策略名。
         */
        policyName: string;
        /**
         * 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
         */
        policyType: string;
    }

    export interface GetRoleTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface GetUserLoginProfile {
        /**
         * 登录配置创建时间。
         */
        createDate: string;
        /**
         * 上次登录时间。
         */
        lastLoginDate: string;
        /**
         * 上次登录IP。
         */
        lastLoginIp: string;
        /**
         * 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
         */
        lastResetPasswordTime: number;
        /**
         * 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
         */
        loginAllowed: boolean;
        /**
         * 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
         */
        loginLocked: boolean;
        /**
         * 登录密码。
         */
        password: string;
        /**
         * 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
         */
        passwordExpireAt: number;
        /**
         * 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
         */
        passwordResetRequired: boolean;
        /**
         * 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
         */
        safeAuthExemptDuration: number;
        /**
         * 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
         */
        safeAuthExemptRequired: number;
        /**
         * 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
         */
        safeAuthExemptUnit: number;
        /**
         * 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
         */
        safeAuthFlag: boolean;
        /**
         * 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
         */
        safeAuthType: string;
        /**
         * 登录配置更新时间。
         */
        updateDate: string;
    }

    export interface GetUserPolicy {
        /**
         * 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
         */
        policyName: string;
        /**
         * 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
         */
        policyType: string;
    }

    export interface GetUserSecurityConfig {
        /**
         * 是否开启操作保护。0代表开启，1代表关闭。
         */
        safeAuthClose: number;
        /**
         * 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
         */
        safeAuthExemptDuration: number;
        /**
         * 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
         */
        safeAuthType: string;
    }

    export interface GetUserTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface RolePolicy {
        /**
         * 策略名。
         */
        policyName: string;
        /**
         * 策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
         */
        policyType: string;
    }

    export interface RoleTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface UserLoginProfile {
        /**
         * 登录配置创建时间。
         */
        createDate: string;
        /**
         * 上次登录时间。
         */
        lastLoginDate: string;
        /**
         * 上次登录IP。
         */
        lastLoginIp: string;
        /**
         * 上次重置密码的时间，上次重置密码的时间。0代表未设置过密码，非0代表过期时间的时间戳。
         */
        lastResetPasswordTime: number;
        /**
         * 是否允许登录，是否允许登录。true代表允许，false代表不允许，默认为false。
         */
        loginAllowed: boolean;
        /**
         * 登录是否被锁定。true代表已锁定，false代表未锁定。管理员设置错误密码重试次数限制后，用户命中后登录会被锁定。
         */
        loginLocked: boolean;
        /**
         * 登录密码。
         */
        password: string;
        /**
         * 密码过期时间。0代表永不过期，非0代表过期时间的时间戳。
         */
        passwordExpireAt: number;
        /**
         * 下次登录是否需要重设密码，下次登录是否需要重设密码。true代表允许，false代表不允许，默认为false。
         */
        passwordResetRequired: boolean;
        /**
         * 登录保护豁免时长，登录保护豁免时长。支持设置1至7（天），或1至168（小时），或5至1440（分钟）。单位设置请参考SafeAuthExemptUnit参数。
         */
        safeAuthExemptDuration: number;
        /**
         * 是否开启登录保护豁免，是否开启登录保护豁免。0代表不开启，1代表开启。开启登录保护豁免后，验证完成后一定时间内登录将不再进行验证。
         */
        safeAuthExemptRequired: number;
        /**
         * 登录保护豁免的时间单位，登录保护豁免的时间单位。0代表分钟，1代表小时，2代表天。
         */
        safeAuthExemptUnit: number;
        /**
         * 是否开启登录保护，是否开启登录保护。true代表开启，false代表不开启，默认为false。
         */
        safeAuthFlag: boolean;
        /**
         * 登录保护类型，登录保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。可选vmfa, phone, email, 多个选项逗号隔开。
         */
        safeAuthType: string;
        /**
         * 登录配置更新时间。
         */
        updateDate: string;
    }

    export interface UserPolicy {
        /**
         * 权限策略名称，长度1~64，支持英文、数字和+=,.@-_符号。
         */
        policyName: string;
        /**
         * 权限策略类型，策略类型。System代表系统预设策略，Custom代表自定义策略。
         */
        policyType: string;
    }

    export interface UserSecurityConfig {
        /**
         * 是否开启操作保护。0代表开启，1代表关闭。
         */
        safeAuthClose: number;
        /**
         * 操作保护的豁免时间，完成验证后在豁免时间内将不再进行验证。支持设置5至30，默认值为10。单位为分钟。
         */
        safeAuthExemptDuration: number;
        /**
         * 操作保护类型。phone代表手机验证，email代表邮箱验证，vmfa代表验证MFA设备验证。支持设置多种操作保护类型，以英文逗号分隔。
         */
        safeAuthType: string;
    }

    export interface UserTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

}

export namespace tos {
    export interface BucketAcl {
        /**
         * 是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
         */
        bucketAclDelivered: boolean;
        grants: outputs.tos.BucketAclGrant[];
        /**
         * 对象所有者。
         */
        owner: outputs.tos.BucketAclOwner;
    }

    export interface BucketAclGrant {
        /**
         * 桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
         */
        acl: string;
        /**
         * 授予指定用户所有权限。
         */
        grantFullControl: string;
        /**
         * 授予指定用户读权限。
         */
        grantRead: string;
        /**
         * 授予指定用户查看桶 ACL 的权限。
         */
        grantReadAcp: string;
        /**
         * 授予指定用户写权限。
         */
        grantWrite: string;
        /**
         * 授予指定用户修改和删除桶 ACL 的权限。
         */
        grantWriteAcp: string;
    }

    export interface BucketAclOwner {
        /**
         * 展示名。
         */
        displayName: string;
        /**
         * 账号ID。
         */
        ownerId: string;
    }

    export interface BucketLifecycleConfig {
        /**
         * 指定未合并的分片任务（碎片）的过期属性。
         */
        abortInCompleteMultipartUpload: outputs.tos.BucketLifecycleConfigAbortInCompleteMultipartUpload;
        /**
         * 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
         */
        expiration: outputs.tos.BucketLifecycleConfigExpiration;
        /**
         * 指定规则生效的过滤条件。
         */
        filter: outputs.tos.BucketLifecycleConfigFilter;
        /**
         * 规则 ID。
         */
        lifecycleRuleId: string;
        noCurrentVersionExpiration: outputs.tos.BucketLifecycleConfigNoCurrentVersionExpiration;
        nonCurrentVersionTransitions: outputs.tos.BucketLifecycleConfigNonCurrentVersionTransition[];
        /**
         * 规则所适用的前缀。
         */
        prefix: string;
        /**
         * 是否启用规则。包括Enabled、Disabled。
         */
        status: string;
        tags: outputs.tos.BucketLifecycleConfigTag[];
        transitions: outputs.tos.BucketLifecycleConfigTransition[];
    }

    export interface BucketLifecycleConfigAbortInCompleteMultipartUpload {
        /**
         * 指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
         */
        daysAfterInitiation: number;
    }

    export interface BucketLifecycleConfigExpiration {
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
         */
        date: string;
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
         */
        days: number;
    }

    export interface BucketLifecycleConfigFilter {
        /**
         * 是否启用相等条件。包括Enabled、Disabled。
         */
        greaterThanIncludeEqual: string;
        /**
         * 是否启用相等条件。包括Enabled、Disabled。
         */
        lessThanIncludeEqual: string;
        /**
         * 设置规则生效于大于指定大小的对象。
         */
        objectSizeGreaterThan: number;
        /**
         * 设置规则生效于小于指定大小的对象。
         */
        objectSizeLessThan: number;
    }

    export interface BucketLifecycleConfigNoCurrentVersionExpiration {
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
         */
        nonCurrentDate: string;
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
         */
        nonCurrentDays: number;
    }

    export interface BucketLifecycleConfigNonCurrentVersionTransition {
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
         */
        nonCurrentDate: string;
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
         */
        nonCurrentDays: number;
        /**
         * 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
         */
        storageClass: string;
    }

    export interface BucketLifecycleConfigTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface BucketLifecycleConfigTransition {
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
         */
        date: string;
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
         */
        days: number;
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
         */
        storageClass: string;
    }

    export interface BucketTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface GetBucketAcl {
        /**
         * 是否开启对象默认继承桶 ACL 功能。true：开启对象默认继承桶 ACL 功能。false：关闭对象默认继承桶 ACL 功能。
         */
        bucketAclDelivered: boolean;
        /**
         * 对象的访问控制权限根节点。
         */
        grants: outputs.tos.GetBucketAclGrant[];
        /**
         * 对象所有者。
         */
        owner: outputs.tos.GetBucketAclOwner;
    }

    export interface GetBucketAclGrant {
        /**
         * 桶的访问权限。包括private、public-read、public-read-write、authenticated-read、bucket-owner-read、bucket-owner-full-control、log-delivery-write、bucket-owner-entrusted、default。
         */
        acl: string;
        /**
         * 授予指定用户所有权限。
         */
        grantFullControl: string;
        /**
         * 授予指定用户读权限。
         */
        grantRead: string;
        /**
         * 授予指定用户查看桶 ACL 的权限。
         */
        grantReadAcp: string;
        /**
         * 授予指定用户写权限。
         */
        grantWrite: string;
        /**
         * 授予指定用户修改和删除桶 ACL 的权限。
         */
        grantWriteAcp: string;
    }

    export interface GetBucketAclOwner {
        /**
         * 展示名。
         */
        displayName: string;
        /**
         * 账号ID。
         */
        ownerId: string;
    }

    export interface GetBucketLifecycleConfig {
        /**
         * 指定未合并的分片任务（碎片）的过期属性。
         */
        abortInCompleteMultipartUpload: outputs.tos.GetBucketLifecycleConfigAbortInCompleteMultipartUpload;
        /**
         * 基于最后修改时间的生命周期规则中删除最新版本对象的过期属性。
         */
        expiration: outputs.tos.GetBucketLifecycleConfigExpiration;
        /**
         * 指定规则生效的过滤条件。
         */
        filter: outputs.tos.GetBucketLifecycleConfigFilter;
        /**
         * 规则 ID。
         */
        lifecycleRuleId: string;
        noCurrentVersionExpiration: outputs.tos.GetBucketLifecycleConfigNoCurrentVersionExpiration;
        /**
         * 基于最后修改时间的生命周期规则中沉降历史版本对象的的过期属性。
         */
        nonCurrentVersionTransitions: outputs.tos.GetBucketLifecycleConfigNonCurrentVersionTransition[];
        /**
         * 规则所适用的前缀。
         */
        prefix: string;
        /**
         * 是否启用规则。包括Enabled、Disabled。
         */
        status: string;
        /**
         * 标签。
         */
        tags: outputs.tos.GetBucketLifecycleConfigTag[];
        /**
         * 基于最后修改时间的生命周期规则中沉降最新版本对象的的过期属性。
         */
        transitions: outputs.tos.GetBucketLifecycleConfigTransition[];
    }

    export interface GetBucketLifecycleConfigAbortInCompleteMultipartUpload {
        /**
         * 指定未合并的分片任务（碎片）的生命周期规则，在分片任务初始化过后过期删除的天数。
         */
        daysAfterInitiation: number;
    }

    export interface GetBucketLifecycleConfigExpiration {
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期删除的具体日期。
         */
        date: string;
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期删除的天数。
         */
        days: number;
    }

    export interface GetBucketLifecycleConfigFilter {
        /**
         * 是否启用相等条件。包括Enabled、Disabled。
         */
        greaterThanIncludeEqual: string;
        /**
         * 是否启用相等条件。包括Enabled、Disabled。
         */
        lessThanIncludeEqual: string;
        /**
         * 设置规则生效于大于指定大小的对象。
         */
        objectSizeGreaterThan: number;
        /**
         * 设置规则生效于小于指定大小的对象。
         */
        objectSizeLessThan: number;
    }

    export interface GetBucketLifecycleConfigNoCurrentVersionExpiration {
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象过期删除的具体日期。
         */
        nonCurrentDate: string;
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象过期删除的天数。
         */
        nonCurrentDays: number;
    }

    export interface GetBucketLifecycleConfigNonCurrentVersionTransition {
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象沉降的具体日期。
         */
        nonCurrentDate: string;
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象沉降的天数。
         */
        nonCurrentDays: number;
        /**
         * 存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
         */
        storageClass: string;
    }

    export interface GetBucketLifecycleConfigTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface GetBucketLifecycleConfigTransition {
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期沉降的具体日期。
         */
        date: string;
        /**
         * 基于最后修改时间的生命周期规则中最新版本对象过期沉降的天数。
         */
        days: number;
        /**
         * 基于最后修改时间的生命周期规则中历史版本对象沉降的存储类型。包括STANDARD、IA、ARCHIVE*FR、INTELLIGENT*TIERING、COLD*ARCHIVE、ARCHIVE、DEEP*COLD_ARCHIVE。
         */
        storageClass: string;
    }

    export interface GetBucketTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

}

export namespace vpc {
    export interface GetVpcAssociateCen {
        /**
         * CEN的ID。
         */
        cenId: string;
        /**
         * CEN的用户ID。
         */
        cenOwnerId: string;
        /**
         * VPC在CEN中的状态。Attaching：加载中，Attached：已加载
         */
        cenStatus: string;
    }

    export interface GetVpcTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

    export interface VpcAssociateCen {
        /**
         * CEN的ID。
         */
        cenId: string;
        /**
         * CEN的用户ID。
         */
        cenOwnerId: string;
        /**
         * VPC在CEN中的状态。Attaching：加载中，Attached：已加载
         */
        cenStatus: string;
    }

    export interface VpcTag {
        /**
         * 标签键。
         */
        key: string;
        /**
         * 标签值。
         */
        value: string;
    }

}
