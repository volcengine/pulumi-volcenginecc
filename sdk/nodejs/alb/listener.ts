// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * 每个 ALB 实例至少要有一个监听器才能正常工作。监听器接收客户端请求，并根据您配置的转发规则和负载均衡算法将请求分发到后端服务器上。您可以在一个 ALB 实例下创建多个监听器，并为监听器配置不同的监听协议，以处理使用不同协议的客户端请求。
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:alb/listener:Listener example "listener_id"
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:alb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     */
    public readonly accessLogRecordCustomizedHeadersEnabled!: pulumi.Output<string>;
    /**
     * 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     */
    public readonly aclIds!: pulumi.Output<string[]>;
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     */
    public readonly aclStatus!: pulumi.Output<string>;
    /**
     * 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     */
    public readonly aclType!: pulumi.Output<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     */
    public readonly caCertificateId!: pulumi.Output<string>;
    /**
     * HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     */
    public readonly caCertificateSource!: pulumi.Output<string>;
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
     */
    public readonly certCenterCertificateId!: pulumi.Output<string>;
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     */
    public readonly certificateId!: pulumi.Output<string>;
    /**
     * HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     */
    public readonly certificateSource!: pulumi.Output<string>;
    /**
     * 监听器的创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 个性化配置ID，未绑定时值为空字符串。
     */
    public readonly customizedCfgId!: pulumi.Output<string>;
    /**
     * 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     */
    public readonly description!: pulumi.Output<string>;
    public readonly domainExtensions!: pulumi.Output<outputs.alb.ListenerDomainExtension[]>;
    /**
     * HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     */
    public readonly enableHttp2!: pulumi.Output<string>;
    /**
     * QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     */
    public readonly enableQuic!: pulumi.Output<string>;
    /**
     * 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     */
    public readonly enabled!: pulumi.Output<string>;
    /**
     * 监听器 ID。
     */
    public /*out*/ readonly listenerId!: pulumi.Output<string>;
    /**
     * 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     */
    public readonly listenerName!: pulumi.Output<string>;
    /**
     * 监听器所属的负载均衡实例 ID。
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
     */
    public readonly pcaLeafCertificateId!: pulumi.Output<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
     */
    public readonly pcaRootCaCertificateId!: pulumi.Output<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
     */
    public readonly pcaSubCaCertificateId!: pulumi.Output<string>;
    /**
     * 监听器的监听端口，取值：1 - 65535 。
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * 监听器所属项目名称。
     */
    public /*out*/ readonly projectName!: pulumi.Output<string>;
    /**
     * 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * 监听器的默认服务器组。
     */
    public readonly serverGroupId!: pulumi.Output<string>;
    public readonly serverGroups!: pulumi.Output<outputs.alb.ListenerServerGroup[]>;
    /**
     * 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.alb.ListenerTag[]>;
    /**
     * 监听器最近一次的操作时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["accessLogRecordCustomizedHeadersEnabled"] = state ? state.accessLogRecordCustomizedHeadersEnabled : undefined;
            resourceInputs["aclIds"] = state ? state.aclIds : undefined;
            resourceInputs["aclStatus"] = state ? state.aclStatus : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["caCertificateSource"] = state ? state.caCertificateSource : undefined;
            resourceInputs["certCenterCertificateId"] = state ? state.certCenterCertificateId : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateSource"] = state ? state.certificateSource : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["customizedCfgId"] = state ? state.customizedCfgId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainExtensions"] = state ? state.domainExtensions : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["enableQuic"] = state ? state.enableQuic : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["listenerName"] = state ? state.listenerName : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["pcaLeafCertificateId"] = state ? state.pcaLeafCertificateId : undefined;
            resourceInputs["pcaRootCaCertificateId"] = state ? state.pcaRootCaCertificateId : undefined;
            resourceInputs["pcaSubCaCertificateId"] = state ? state.pcaSubCaCertificateId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["serverGroups"] = state ? state.serverGroups : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.serverGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["accessLogRecordCustomizedHeadersEnabled"] = args ? args.accessLogRecordCustomizedHeadersEnabled : undefined;
            resourceInputs["aclIds"] = args ? args.aclIds : undefined;
            resourceInputs["aclStatus"] = args ? args.aclStatus : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["caCertificateSource"] = args ? args.caCertificateSource : undefined;
            resourceInputs["certCenterCertificateId"] = args ? args.certCenterCertificateId : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["certificateSource"] = args ? args.certificateSource : undefined;
            resourceInputs["customizedCfgId"] = args ? args.customizedCfgId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domainExtensions"] = args ? args.domainExtensions : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["enableQuic"] = args ? args.enableQuic : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["listenerName"] = args ? args.listenerName : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["pcaLeafCertificateId"] = args ? args.pcaLeafCertificateId : undefined;
            resourceInputs["pcaRootCaCertificateId"] = args ? args.pcaRootCaCertificateId : undefined;
            resourceInputs["pcaSubCaCertificateId"] = args ? args.pcaSubCaCertificateId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["serverGroups"] = args ? args.serverGroups : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["listenerId"] = undefined /*out*/;
            resourceInputs["projectName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     */
    accessLogRecordCustomizedHeadersEnabled?: pulumi.Input<string>;
    /**
     * 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     */
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     */
    aclType?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     */
    caCertificateSource?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
     */
    certCenterCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     */
    certificateSource?: pulumi.Input<string>;
    /**
     * 监听器的创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 个性化配置ID，未绑定时值为空字符串。
     */
    customizedCfgId?: pulumi.Input<string>;
    /**
     * 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     */
    description?: pulumi.Input<string>;
    domainExtensions?: pulumi.Input<pulumi.Input<inputs.alb.ListenerDomainExtension>[]>;
    /**
     * HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     */
    enableHttp2?: pulumi.Input<string>;
    /**
     * QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     */
    enableQuic?: pulumi.Input<string>;
    /**
     * 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     */
    enabled?: pulumi.Input<string>;
    /**
     * 监听器 ID。
     */
    listenerId?: pulumi.Input<string>;
    /**
     * 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     */
    listenerName?: pulumi.Input<string>;
    /**
     * 监听器所属的负载均衡实例 ID。
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
     */
    pcaLeafCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
     */
    pcaRootCaCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
     */
    pcaSubCaCertificateId?: pulumi.Input<string>;
    /**
     * 监听器的监听端口，取值：1 - 65535 。
     */
    port?: pulumi.Input<number>;
    /**
     * 监听器所属项目名称。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     */
    protocol?: pulumi.Input<string>;
    /**
     * 监听器的默认服务器组。
     */
    serverGroupId?: pulumi.Input<string>;
    serverGroups?: pulumi.Input<pulumi.Input<inputs.alb.ListenerServerGroup>[]>;
    /**
     * 监听器的状态。取值如下：Creating：创建中。Active： 运行中。Pending： 变配中。Disabled：已停止。Deleting：删除中。
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.alb.ListenerTag>[]>;
    /**
     * 监听器最近一次的操作时间。
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * 监听器是否已开启“在访问日志中记录自定义header”的功能：on：表示该功能已开启。off：表示该功能未开启。
     */
    accessLogRecordCustomizedHeadersEnabled?: pulumi.Input<string>;
    /**
     * 监听器绑定的访问控制策略组 ID。当AclStatus参数配置为 on 时，AclIds为必填参数。
     */
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off ：不开启（默认）。
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * 访问控制的方式，取值如下：white：白名单方式。表示监听器仅转发来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器不会转发任何请求。black：黑名单方式。表示仅拒绝来自所选访问控制策略组中设置的IP地址或地址段的请求。 如果所选策略组中没有添加任何IP，则监听器会转发全部请求。当AclStatus参数配置为 on 时，AclType为必填参数。
     */
    aclType?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 alb 时，必须指定 CACertificateId 参数。
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书的来源，用于双向认证。alb（默认）：表示通过 ALB 上传的证书。标准版 ALB 实例不支持此来源的证书。pca*root：表示通过火山引擎证书中心购买或上传的私有根 CA 证书。pca*sub：表示通过火山引擎证书中心购买或上传的私有子 CA 证书。
     */
    caCertificateSource?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 certCenter 时必传。
     */
    certCenterCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的证书 ID。创建 HTTPS 监听器且证书来源为 alb 时必传。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的默认证书的来源，取值：alb：表示通过 ALB 上传的证书。cert*center：表示通过火山引擎证书中心购买或上传的 SSL 证书。pca*leaf：表示通过火山引擎证书中心购买或上传的私有叶子证书。
     */
    certificateSource?: pulumi.Input<string>;
    /**
     * 个性化配置ID，未绑定时值为空字符串。
     */
    customizedCfgId?: pulumi.Input<string>;
    /**
     * 监听器的描述。不能以http://或https://开头。必须以字母或中文开头，可包含数字、英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、短横线（-）、中文逗号（，）、中文句号（。） 。长度限制为1 ～ 255个字符。不填默认为空字符串。
     */
    description?: pulumi.Input<string>;
    domainExtensions?: pulumi.Input<pulumi.Input<inputs.alb.ListenerDomainExtension>[]>;
    /**
     * HTTP2.0 特性开关，该参数仅对 HTTPS 监听器有效。取值如下：on：开启。off：关闭（默认）。
     */
    enableHttp2?: pulumi.Input<string>;
    /**
     * QUIC 特性开关，该参数仅对 HTTPS 监听器有效，取值如下：on：开启。off：关闭（默认）。只有标准版 ALB 实例支持 QUIC。
     */
    enableQuic?: pulumi.Input<string>;
    /**
     * 监听器开启/关闭，取值如下：on：开启（默认）。off：关闭。
     */
    enabled?: pulumi.Input<string>;
    /**
     * 监听器的名字。不填写时以“协议-端口”格式命名。不能以http://或https://开头。必须以字母或中文开头，可包含数字、点（.）、下划线（_）和短横线（-）。长度限制在1-128字符之间。
     */
    listenerName?: pulumi.Input<string>;
    /**
     * 监听器所属的负载均衡实例 ID。
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * HTTPS监听器关联的私有叶子证书 ID。创建 HTTPS 监听器且证书来源为 pcaLeaf 时必传。
     */
    pcaLeafCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaRoot 时，必须指定 PcaRootCACertificateId 参数。
     */
    pcaRootCaCertificateId?: pulumi.Input<string>;
    /**
     * HTTPS 监听器关联的 CA 证书 ID。该参数用于 HTTPS 监听器的双向认证。当证书来源是 pcaSub 时，必须指定 PcaSubCACertificateId 参数。
     */
    pcaSubCaCertificateId?: pulumi.Input<string>;
    /**
     * 监听器的监听端口，取值：1 - 65535 。
     */
    port: pulumi.Input<number>;
    /**
     * 监听器的协议，支持 HTTP 协议和 HTTPS 协议。
     */
    protocol: pulumi.Input<string>;
    /**
     * 监听器的默认服务器组。
     */
    serverGroupId: pulumi.Input<string>;
    serverGroups?: pulumi.Input<pulumi.Input<inputs.alb.ListenerServerGroup>[]>;
    tags?: pulumi.Input<pulumi.Input<inputs.alb.ListenerTag>[]>;
}
