// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ALB 支持上传服务器证书、CA 证书到控制台，对上传的证书单独管理。
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcenginecc from "@volcengine/pulumi-volcenginecc";
 *
 * const aLBCertificateDemo = new volcenginecc.alb.Certificate("ALBCertificateDemo", {
 *     certificateName: "ALBCertificateDemo",
 *     certificateType: "CA",
 *     publicKey: "-----BEGIN CERTIFICATE-----xxxx-----END CERTIFICATE-----",
 *     description: "ALBCertificateDemo description",
 *     projectName: "default",
 *     tags: [{
 *         key: "env",
 *         value: "test",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:alb/certificate:Certificate example "certificate_id|certificate_type"
 * ```
 */
export class Certificate extends pulumi.CustomResource {
    /**
     * Get an existing Certificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CertificateState, opts?: pulumi.CustomResourceOptions): Certificate {
        return new Certificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:alb/certificate:Certificate';

    /**
     * Returns true if the given object is an instance of Certificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Certificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Certificate.__pulumiType;
    }

    /**
     * 证书ID。
     */
    public /*out*/ readonly certificateId!: pulumi.Output<string>;
    /**
     * 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
     */
    public readonly certificateName!: pulumi.Output<string>;
    /**
     * 证书类型，取值：CA：CA证书、Server：服务器证书。
     */
    public readonly certificateType!: pulumi.Output<string>;
    /**
     * 证书创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 证书描述。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 证书域名。
     */
    public /*out*/ readonly domainName!: pulumi.Output<string>;
    /**
     * 证书过期时间。
     */
    public /*out*/ readonly expiredAt!: pulumi.Output<string>;
    /**
     * 证书关联的监听器列表。
     */
    public /*out*/ readonly listeners!: pulumi.Output<string[]>;
    /**
     * 服务器证书的私钥，当证书类型为Server时必填。
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * 项目名称。
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * 服务器证书的公钥。
     */
    public readonly publicKey!: pulumi.Output<string>;
    /**
     * 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
     */
    public /*out*/ readonly san!: pulumi.Output<string>;
    /**
     * 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.alb.CertificateTag[]>;

    /**
     * Create a Certificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CertificateArgs | CertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CertificateState | undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateName"] = state ? state.certificateName : undefined;
            resourceInputs["certificateType"] = state ? state.certificateType : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domainName"] = state ? state.domainName : undefined;
            resourceInputs["expiredAt"] = state ? state.expiredAt : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["san"] = state ? state.san : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CertificateArgs | undefined;
            if ((!args || args.certificateType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateType'");
            }
            if ((!args || args.publicKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publicKey'");
            }
            resourceInputs["certificateName"] = args ? args.certificateName : undefined;
            resourceInputs["certificateType"] = args ? args.certificateType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["certificateId"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["domainName"] = undefined /*out*/;
            resourceInputs["expiredAt"] = undefined /*out*/;
            resourceInputs["listeners"] = undefined /*out*/;
            resourceInputs["san"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Certificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Certificate resources.
 */
export interface CertificateState {
    /**
     * 证书ID。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
     */
    certificateName?: pulumi.Input<string>;
    /**
     * 证书类型，取值：CA：CA证书、Server：服务器证书。
     */
    certificateType?: pulumi.Input<string>;
    /**
     * 证书创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 证书描述。
     */
    description?: pulumi.Input<string>;
    /**
     * 证书域名。
     */
    domainName?: pulumi.Input<string>;
    /**
     * 证书过期时间。
     */
    expiredAt?: pulumi.Input<string>;
    /**
     * 证书关联的监听器列表。
     */
    listeners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 服务器证书的私钥，当证书类型为Server时必填。
     */
    privateKey?: pulumi.Input<string>;
    /**
     * 项目名称。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 服务器证书的公钥。
     */
    publicKey?: pulumi.Input<string>;
    /**
     * 证书扩展域名列表，用英文',' 分隔多个域名， 包含(commonName,DnsName,IP)。
     */
    san?: pulumi.Input<string>;
    /**
     * 证书的状态，取值为：Creating：创建中。Active：运行中。Deleting：删除中。
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.alb.CertificateTag>[]>;
}

/**
 * The set of arguments for constructing a Certificate resource.
 */
export interface CertificateArgs {
    /**
     * 证书名称，长度限制为1 ～ 128个字符，必须以字母或中文开头，可包含数字、点号（.）、下划线（_）和短横线（-）。
     */
    certificateName?: pulumi.Input<string>;
    /**
     * 证书类型，取值：CA：CA证书、Server：服务器证书。
     */
    certificateType: pulumi.Input<string>;
    /**
     * 证书描述。
     */
    description?: pulumi.Input<string>;
    /**
     * 服务器证书的私钥，当证书类型为Server时必填。
     */
    privateKey?: pulumi.Input<string>;
    /**
     * 项目名称。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 服务器证书的公钥。
     */
    publicKey: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.alb.CertificateTag>[]>;
}
