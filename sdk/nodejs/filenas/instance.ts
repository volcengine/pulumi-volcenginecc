// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * 文件系统通过标准的 NFS 协议为您提供文件存储服务，用于网络文件远程访问，通过管理控制台创建挂载地址后，即可按需在客户端中通过标准的 POSIX 接口对文件系统进行访问。
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcenginecc from "@volcengine/pulumi-volcenginecc";
 *
 * const fileNASInstanceDemo = new volcenginecc.filenas.Instance("FileNASInstanceDemo", {
 *     fileSystemName: "FileNASInstanceDemo",
 *     capacity: {
 *         total: 105,
 *     },
 *     chargeType: "PayAsYouGo",
 *     fileSystemType: "Extreme",
 *     protocolType: "NFS",
 *     zoneId: "cn-beijing-x",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:filenas/instance:Instance example "file_system_id"
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:filenas/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * 缓存型性能信息。
     */
    public readonly cachePerformance!: pulumi.Output<outputs.filenas.InstanceCachePerformance>;
    /**
     * 文件系统容量。
     */
    public readonly capacity!: pulumi.Output<outputs.filenas.InstanceCapacity>;
    /**
     * 计费类型，取值 PayAsYouGo，表示按量计费。
     */
    public readonly chargeType!: pulumi.Output<string>;
    /**
     * 创建时间
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * 描述信息。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 文件系统 ID。
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * 文件系统名称。
     */
    public readonly fileSystemName!: pulumi.Output<string>;
    /**
     * 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     */
    public readonly fileSystemType!: pulumi.Output<string>;
    /**
     * 所属项目，默认值为 default 项目。
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     */
    public readonly protocolType!: pulumi.Output<string>;
    /**
     * 快照数量
     */
    public /*out*/ readonly snapshotCount!: pulumi.Output<number>;
    /**
     * 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     */
    public readonly snapshotId!: pulumi.Output<string>;
    /**
     * 文件系统状态
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * 存储类型，取值Standard，表示标准型。
     */
    public readonly storageType!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.filenas.InstanceTag[]>;
    /**
     * 更新时间
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * 可用区 ID。
     */
    public readonly zoneId!: pulumi.Output<string>;
    /**
     * 可用区名称。
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["cachePerformance"] = state ? state.cachePerformance : undefined;
            resourceInputs["capacity"] = state ? state.capacity : undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fileSystemName"] = state ? state.fileSystemName : undefined;
            resourceInputs["fileSystemType"] = state ? state.fileSystemType : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocolType"] = state ? state.protocolType : undefined;
            resourceInputs["snapshotCount"] = state ? state.snapshotCount : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.chargeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chargeType'");
            }
            if ((!args || args.fileSystemName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemName'");
            }
            if ((!args || args.fileSystemType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemType'");
            }
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["cachePerformance"] = args ? args.cachePerformance : undefined;
            resourceInputs["capacity"] = args ? args.capacity : undefined;
            resourceInputs["chargeType"] = args ? args.chargeType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["fileSystemName"] = args ? args.fileSystemName : undefined;
            resourceInputs["fileSystemType"] = args ? args.fileSystemType : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["protocolType"] = args ? args.protocolType : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["storageType"] = args ? args.storageType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["snapshotCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * 缓存型性能信息。
     */
    cachePerformance?: pulumi.Input<inputs.filenas.InstanceCachePerformance>;
    /**
     * 文件系统容量。
     */
    capacity?: pulumi.Input<inputs.filenas.InstanceCapacity>;
    /**
     * 计费类型，取值 PayAsYouGo，表示按量计费。
     */
    chargeType?: pulumi.Input<string>;
    /**
     * 创建时间
     */
    createTime?: pulumi.Input<string>;
    /**
     * 描述信息。
     */
    description?: pulumi.Input<string>;
    /**
     * 文件系统 ID。
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * 文件系统名称。
     */
    fileSystemName?: pulumi.Input<string>;
    /**
     * 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     */
    fileSystemType?: pulumi.Input<string>;
    /**
     * 所属项目，默认值为 default 项目。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     */
    protocolType?: pulumi.Input<string>;
    /**
     * 快照数量
     */
    snapshotCount?: pulumi.Input<number>;
    /**
     * 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * 文件系统状态
     */
    status?: pulumi.Input<string>;
    /**
     * 存储类型，取值Standard，表示标准型。
     */
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.filenas.InstanceTag>[]>;
    /**
     * 更新时间
     */
    updateTime?: pulumi.Input<string>;
    /**
     * 可用区 ID。
     */
    zoneId?: pulumi.Input<string>;
    /**
     * 可用区名称。
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * 缓存型性能信息。
     */
    cachePerformance?: pulumi.Input<inputs.filenas.InstanceCachePerformance>;
    /**
     * 文件系统容量。
     */
    capacity?: pulumi.Input<inputs.filenas.InstanceCapacity>;
    /**
     * 计费类型，取值 PayAsYouGo，表示按量计费。
     */
    chargeType: pulumi.Input<string>;
    /**
     * 描述信息。
     */
    description?: pulumi.Input<string>;
    /**
     * 文件系统 ID。
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * 文件系统名称。
     */
    fileSystemName: pulumi.Input<string>;
    /**
     * 文件系统类型。取值说明：Extreme：NAS 极速型；Capacity：NAS 容量型；Cache：NAS 缓存型。
     */
    fileSystemType: pulumi.Input<string>;
    /**
     * 所属项目，默认值为 default 项目。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 文件系统协议类型。取值 NFS，表示 NFS 协议，常用于 Linux 客户端。
     */
    protocolType: pulumi.Input<string>;
    /**
     * 创建时使用的快照 ID。传入该参数后，将使用该快照新建文件系统。
     */
    snapshotId?: pulumi.Input<string>;
    /**
     * 存储类型，取值Standard，表示标准型。
     */
    storageType?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.filenas.InstanceTag>[]>;
    /**
     * 可用区 ID。
     */
    zoneId: pulumi.Input<string>;
    /**
     * 可用区名称。
     */
    zoneName?: pulumi.Input<string>;
}
