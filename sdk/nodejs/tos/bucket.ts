// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * 存储桶是存储对象（Object）的容器，所有的对象都必须隶属于某个存储桶。存储桶具有各种配置属性，包括地域、访问权限等。您可以根据实际需求，创建不同类型的存储桶来存储不同的数据。
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:tos/bucket:Bucket example "name"
 * ```
 */
export class Bucket extends pulumi.CustomResource {
    /**
     * Get an existing Bucket resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketState, opts?: pulumi.CustomResourceOptions): Bucket {
        return new Bucket(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:tos/bucket:Bucket';

    /**
     * Returns true if the given object is an instance of Bucket.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Bucket {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Bucket.__pulumiType;
    }

    /**
     * 桶的访问控制权限。
     */
    public readonly acl!: pulumi.Output<outputs.tos.BucketAcl>;
    public readonly aclGrant!: pulumi.Output<outputs.tos.BucketAclGrant>;
    /**
     * 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     */
    public readonly azRedundancy!: pulumi.Output<string>;
    /**
     * 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     */
    public readonly bucketType!: pulumi.Output<string>;
    /**
     * 桶的创建时间。
     */
    public /*out*/ readonly creationDate!: pulumi.Output<string>;
    /**
     * 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     */
    public readonly enableVersionStatus!: pulumi.Output<string>;
    /**
     * 存储桶的 TOS 协议公网访问域名。
     */
    public /*out*/ readonly extranetEndpoint!: pulumi.Output<string>;
    /**
     * 存储桶的 TOS 协议私网访问域名
     */
    public /*out*/ readonly intranetEndpoint!: pulumi.Output<string>;
    public readonly lifecycleConfigs!: pulumi.Output<outputs.tos.BucketLifecycleConfig[]>;
    /**
     * 桶所在区域。
     */
    public /*out*/ readonly location!: pulumi.Output<string>;
    /**
     * 桶名。
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * 存储桶所属项目。
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     */
    public readonly storageClass!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.tos.BucketTag[]>;

    /**
     * Create a Bucket resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketArgs | BucketState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketState | undefined;
            resourceInputs["acl"] = state ? state.acl : undefined;
            resourceInputs["aclGrant"] = state ? state.aclGrant : undefined;
            resourceInputs["azRedundancy"] = state ? state.azRedundancy : undefined;
            resourceInputs["bucketType"] = state ? state.bucketType : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["enableVersionStatus"] = state ? state.enableVersionStatus : undefined;
            resourceInputs["extranetEndpoint"] = state ? state.extranetEndpoint : undefined;
            resourceInputs["intranetEndpoint"] = state ? state.intranetEndpoint : undefined;
            resourceInputs["lifecycleConfigs"] = state ? state.lifecycleConfigs : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["storageClass"] = state ? state.storageClass : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as BucketArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["acl"] = args ? args.acl : undefined;
            resourceInputs["aclGrant"] = args ? args.aclGrant : undefined;
            resourceInputs["azRedundancy"] = args ? args.azRedundancy : undefined;
            resourceInputs["bucketType"] = args ? args.bucketType : undefined;
            resourceInputs["enableVersionStatus"] = args ? args.enableVersionStatus : undefined;
            resourceInputs["lifecycleConfigs"] = args ? args.lifecycleConfigs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["storageClass"] = args ? args.storageClass : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["extranetEndpoint"] = undefined /*out*/;
            resourceInputs["intranetEndpoint"] = undefined /*out*/;
            resourceInputs["location"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Bucket.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Bucket resources.
 */
export interface BucketState {
    /**
     * 桶的访问控制权限。
     */
    acl?: pulumi.Input<inputs.tos.BucketAcl>;
    aclGrant?: pulumi.Input<inputs.tos.BucketAclGrant>;
    /**
     * 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     */
    azRedundancy?: pulumi.Input<string>;
    /**
     * 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     */
    bucketType?: pulumi.Input<string>;
    /**
     * 桶的创建时间。
     */
    creationDate?: pulumi.Input<string>;
    /**
     * 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     */
    enableVersionStatus?: pulumi.Input<string>;
    /**
     * 存储桶的 TOS 协议公网访问域名。
     */
    extranetEndpoint?: pulumi.Input<string>;
    /**
     * 存储桶的 TOS 协议私网访问域名
     */
    intranetEndpoint?: pulumi.Input<string>;
    lifecycleConfigs?: pulumi.Input<pulumi.Input<inputs.tos.BucketLifecycleConfig>[]>;
    /**
     * 桶所在区域。
     */
    location?: pulumi.Input<string>;
    /**
     * 桶名。
     */
    name?: pulumi.Input<string>;
    /**
     * 存储桶所属项目。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     */
    storageClass?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.tos.BucketTag>[]>;
}

/**
 * The set of arguments for constructing a Bucket resource.
 */
export interface BucketArgs {
    /**
     * 桶的访问控制权限。
     */
    acl?: pulumi.Input<inputs.tos.BucketAcl>;
    aclGrant?: pulumi.Input<inputs.tos.BucketAclGrant>;
    /**
     * 桶的可用区冗余类型。包括single-az：单可用区冗余，multi-az：多可用区冗余。
     */
    azRedundancy?: pulumi.Input<string>;
    /**
     * 桶的类型。包括hns：获取所有分层桶列表，fns：获取所有扁平桶列表。
     */
    bucketType?: pulumi.Input<string>;
    /**
     * 存储桶的版本控制状态。Enabled：开启版本控制功能。Suspended：暂停版本控制功能。
     */
    enableVersionStatus?: pulumi.Input<string>;
    lifecycleConfigs?: pulumi.Input<pulumi.Input<inputs.tos.BucketLifecycleConfig>[]>;
    /**
     * 桶名。
     */
    name: pulumi.Input<string>;
    /**
     * 存储桶所属项目。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 桶的默认存储类型。包括STANDARD：标准存储。IA：低频访问存储。INTELLIGENT*TIERING：智能分层存储。ARCHIVE*FR：归档闪回存储。ARCHIVE：归档存储。COLD*ARCHIVE：冷归档存储。DEEP*COLD_ARCHIVE：深度冷归档存储。
     */
    storageClass?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.tos.BucketTag>[]>;
}
