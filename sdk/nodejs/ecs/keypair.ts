// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ECS 密钥对（Keypair）默认采用 RSA 2048 位加密算法生成一对关联密钥，包含公钥（public key）和私钥（private key）。其中，公钥用于对数据进行加密处理，可将明文转换为不可直接读取的密文；私钥则作为解密的唯一凭证，能将密文还原为原始明文，实现安全的身份验证与数据传输。
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcenginecc from "@volcengine/pulumi-volcenginecc";
 *
 * const eCSKeypairDemo = new volcenginecc.ecs.Keypair("ECSKeypairDemo", {
 *     keyPairName: "ECSKeypairDemo",
 *     projectName: "default",
 *     description: "ECSKeypairDemo Description",
 *     tags: [{
 *         key: "env",
 *         value: "test",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:ecs/keypair:Keypair example "key_pair_name"
 * ```
 */
export class Keypair extends pulumi.CustomResource {
    /**
     * Get an existing Keypair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeypairState, opts?: pulumi.CustomResourceOptions): Keypair {
        return new Keypair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:ecs/keypair:Keypair';

    /**
     * Returns true if the given object is an instance of Keypair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Keypair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Keypair.__pulumiType;
    }

    /**
     * 密钥对创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。
     */
    public /*out*/ readonly fingerPrint!: pulumi.Output<string>;
    /**
     * 操作的实例ID。
     */
    public readonly instanceIds!: pulumi.Output<string[]>;
    /**
     * 密钥对唯一ID。
     */
    public /*out*/ readonly keyPairId!: pulumi.Output<string>;
    /**
     * 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     */
    public readonly keyPairName!: pulumi.Output<string>;
    /**
     * 密钥对私钥信息。
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * 密钥对的公钥信息。
     */
    public readonly publicKey!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.ecs.KeypairTag[]>;
    /**
     * 密钥对更新时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a Keypair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeypairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeypairArgs | KeypairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeypairState | undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fingerPrint"] = state ? state.fingerPrint : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as KeypairArgs | undefined;
            if ((!args || args.keyPairName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyPairName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["privateKey"] = args ? args.privateKey : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["fingerPrint"] = undefined /*out*/;
            resourceInputs["keyPairId"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Keypair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Keypair resources.
 */
export interface KeypairState {
    /**
     * 密钥对创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     */
    description?: pulumi.Input<string>;
    /**
     * 密钥对的指纹。根据RFC4716定义的公钥指纹格式，采用MD5信息摘要算法。
     */
    fingerPrint?: pulumi.Input<string>;
    /**
     * 操作的实例ID。
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 密钥对唯一ID。
     */
    keyPairId?: pulumi.Input<string>;
    /**
     * 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * 密钥对私钥信息。
     */
    privateKey?: pulumi.Input<string>;
    /**
     * 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 密钥对的公钥信息。
     */
    publicKey?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.KeypairTag>[]>;
    /**
     * 密钥对更新时间。
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Keypair resource.
 */
export interface KeypairArgs {
    /**
     * 密钥对的描述，默认值为空字符串。必须以字母或中文开头。只能包含中文、字母、数字、点“.”、空格、下划线“_”、中划线“-”、等号“=”、英文逗号“,”、中文逗号“，”和中文句号“。”长度限制在255个字符以内。
     */
    description?: pulumi.Input<string>;
    /**
     * 操作的实例ID。
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 密钥对名称。不可与已有名称重复。长度限制在 2～64 个字符之间。允许使用点号“.”分隔字符成多段，每段允许使用大小写字母、数字或连字符“-”。不能以“-”和“.”开头或结尾，不能连续使用“-”或者“.”。
     */
    keyPairName: pulumi.Input<string>;
    /**
     * 密钥对私钥信息。
     */
    privateKey?: pulumi.Input<string>;
    /**
     * 资源所属项目，一个资源只能归属于一个项目。只能包含字母、数字、下划线“_”、点“.”和中划线“-”。长度限制在64个字符以内。
     */
    projectName?: pulumi.Input<string>;
    /**
     * 密钥对的公钥信息。
     */
    publicKey?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.KeypairTag>[]>;
}
