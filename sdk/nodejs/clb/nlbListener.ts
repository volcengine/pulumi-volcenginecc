// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * 监听器负责根据指定的协议和端口，监听NLB实例接收到的用户访问请求。NLB将按照该监听器关联的服务器组配置的调度算法，将访问请求转发至该服务器组内健康的后端服务器。
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcenginecc from "@volcengine/pulumi-volcenginecc";
 *
 * const cLBNLBListenerDemo = new volcenginecc.clb.NlbListener("CLBNLBListenerDemo", {
 *     loadBalancerId: "nlb-11zz9w3jqptz449iegfwvxxxx",
 *     protocol: "TCP",
 *     port: 0,
 *     serverGroupId: "rsp-11zz9wdewa3uo49ieggq8xxxx",
 *     connectionTimeout: 60,
 *     description: "CLBNLBListenerDemo description",
 *     enabled: true,
 *     listenerName: "CLBNLBListenerDemo",
 *     tags: [{
 *         key: "env",
 *         value: "Test",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:clb/nlbListener:NlbListener example "listener_id"
 * ```
 */
export class NlbListener extends pulumi.CustomResource {
    /**
     * Get an existing NlbListener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NlbListenerState, opts?: pulumi.CustomResourceOptions): NlbListener {
        return new NlbListener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:clb/nlbListener:NlbListener';

    /**
     * Returns true if the given object is an instance of NlbListener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NlbListener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NlbListener.__pulumiType;
    }

    /**
     * TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     */
    public readonly certificateId!: pulumi.Output<string>;
    /**
     * 监听器的连接超时时间（秒）。
     */
    public readonly connectionTimeout!: pulumi.Output<number>;
    /**
     * 监听器的创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 监听器描述信息。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 是否启用监听器。true：开启；false：关闭。
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * 全端口监听的结束端口，仅当Port为0时有效。
     */
    public readonly endPort!: pulumi.Output<number>;
    public readonly healths!: pulumi.Output<outputs.clb.NlbListenerHealth[]>;
    /**
     * 监听器唯一标识。
     */
    public /*out*/ readonly listenerId!: pulumi.Output<string>;
    /**
     * 监听器名称。
     */
    public readonly listenerName!: pulumi.Output<string>;
    /**
     * 负载均衡实例ID。
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * 监听器接收请求的端口，0表示启用全端口监听。
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * 监听协议类型。
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     */
    public readonly securityPolicyId!: pulumi.Output<string>;
    /**
     * 监听器关联的服务器组ID。
     */
    public readonly serverGroupId!: pulumi.Output<string>;
    /**
     * 全端口监听的起始端口，仅当Port为0时有效。
     */
    public readonly startPort!: pulumi.Output<number>;
    /**
     * 监听器的状态。
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.clb.NlbListenerTag[]>;
    /**
     * 监听器最近操作时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a NlbListener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NlbListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NlbListenerArgs | NlbListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NlbListenerState | undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["connectionTimeout"] = state ? state.connectionTimeout : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["healths"] = state ? state.healths : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["listenerName"] = state ? state.listenerName : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as NlbListenerArgs | undefined;
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.serverGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["connectionTimeout"] = args ? args.connectionTimeout : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["healths"] = args ? args.healths : undefined;
            resourceInputs["listenerName"] = args ? args.listenerName : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["listenerId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NlbListener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NlbListener resources.
 */
export interface NlbListenerState {
    /**
     * TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * 监听器的连接超时时间（秒）。
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * 监听器的创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 监听器描述信息。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否启用监听器。true：开启；false：关闭。
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * 全端口监听的结束端口，仅当Port为0时有效。
     */
    endPort?: pulumi.Input<number>;
    healths?: pulumi.Input<pulumi.Input<inputs.clb.NlbListenerHealth>[]>;
    /**
     * 监听器唯一标识。
     */
    listenerId?: pulumi.Input<string>;
    /**
     * 监听器名称。
     */
    listenerName?: pulumi.Input<string>;
    /**
     * 负载均衡实例ID。
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * 监听器接收请求的端口，0表示启用全端口监听。
     */
    port?: pulumi.Input<number>;
    /**
     * 监听协议类型。
     */
    protocol?: pulumi.Input<string>;
    /**
     * TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * 监听器关联的服务器组ID。
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * 全端口监听的起始端口，仅当Port为0时有效。
     */
    startPort?: pulumi.Input<number>;
    /**
     * 监听器的状态。
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.clb.NlbListenerTag>[]>;
    /**
     * 监听器最近操作时间。
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NlbListener resource.
 */
export interface NlbListenerArgs {
    /**
     * TLS监听器服务器证书的ID，仅支持传入火山引擎证书中心 SSL 证书。。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * 监听器的连接超时时间（秒）。
     */
    connectionTimeout?: pulumi.Input<number>;
    /**
     * 监听器描述信息。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否启用监听器。true：开启；false：关闭。
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * 全端口监听的结束端口，仅当Port为0时有效。
     */
    endPort?: pulumi.Input<number>;
    healths?: pulumi.Input<pulumi.Input<inputs.clb.NlbListenerHealth>[]>;
    /**
     * 监听器名称。
     */
    listenerName?: pulumi.Input<string>;
    /**
     * 负载均衡实例ID。
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * 监听器接收请求的端口，0表示启用全端口监听。
     */
    port: pulumi.Input<number>;
    /**
     * 监听协议类型。
     */
    protocol: pulumi.Input<string>;
    /**
     * TLS 安全策略ID，支持系统安全策略和自定义安全策略。系统安全策略取值：.tls*cipher*policy*1*0.tls*cipher*policy*1*1.tls*cipher*policy*1*2.tls*cipher*policy*1*2*strict.tls*cipher*policy*1*2*strict*with*1_3.自定义安全策略：输入自定义安全策略 ID。当Protocol为TLS 时，该参数为必填。。
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * 监听器关联的服务器组ID。
     */
    serverGroupId: pulumi.Input<string>;
    /**
     * 全端口监听的起始端口，仅当Port为0时有效。
     */
    startPort?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.clb.NlbListenerTag>[]>;
}
