// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Data Source schema for Volcengine::CLB::NLBServerGroup
 */
export function getNlbServerGroup(args: GetNlbServerGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetNlbServerGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcenginecc:clb/getNlbServerGroup:getNlbServerGroup", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getNlbServerGroup.
 */
export interface GetNlbServerGroupArgs {
    /**
     * Uniquely identifies the resource.
     */
    id: string;
}

/**
 * A collection of values returned by getNlbServerGroup.
 */
export interface GetNlbServerGroupResult {
    /**
     * 账号ID
     */
    readonly accountId: string;
    /**
     * 是否开启全端口转发
     */
    readonly anyPortEnabled: boolean;
    /**
     * 是否开启放通后端安全组功能。仅参数Type为“instance”时，可以配置此参数
     */
    readonly bypassSecurityGroupEnabled: boolean;
    /**
     * 是否开启连接优雅中断
     */
    readonly connectionDrainEnabled: boolean;
    /**
     * 连接优雅中断超时时间，取值范围为0～900秒。参数ConnectionDrainEnabled为“true”时，该参数为必填。
     */
    readonly connectionDrainTimeout: number;
    /**
     * 后端服务器组的创建时间
     */
    readonly createdTime: string;
    /**
     * 后端服务器组的描述,服务器组的描述。必须以字母、数字或中文开头，可包含以下特殊字符：英文逗号（,）、点号（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）长度限制为0 ～ 255个字符。该参数不传入，则默认为空字符串。
     */
    readonly description: string;
    /**
     * 健康检查相关参数
     */
    readonly healthCheck: outputs.clb.GetNlbServerGroupHealthCheck;
    /**
     * Uniquely identifies the resource.
     */
    readonly id: string;
    /**
     * 服务器组的IP地址类型
     */
    readonly ipAddressVersion: string;
    /**
     * 是否开启源地址保持
     */
    readonly preserveClientIpEnabled: boolean;
    /**
     * 项目名称
     */
    readonly projectName: string;
    /**
     * NLB转发流量到后端服务器时使用的通信协议
     */
    readonly protocol: string;
    /**
     * 是否开启Proxy-Protocol协议
     */
    readonly proxyProtocolType: string;
    /**
     * 服务器组关联的NLB实例
     */
    readonly relatedLoadBalancerIds: string[];
    /**
     * NLB转发流量时遵循的规则
     */
    readonly scheduler: string;
    /**
     * 服务器组中后端服务器的数量
     */
    readonly serverCount: number;
    /**
     * 服务器组ID
     */
    readonly serverGroupId: string;
    /**
     * 服务器组名称, 必须以字母、数字或中文开头，可包含以下特殊字符：点号（.）、下划线（_）和中划线（-）。限制为1 ～ 128个字符。该参数不传入，则默认为服务器组ID。
     */
    readonly serverGroupName: string;
    /**
     * 服务器组中待添加后端服务器的信息
     */
    readonly servers: outputs.clb.GetNlbServerGroupServer[];
    /**
     * 是否开启会话保持
     */
    readonly sessionPersistenceEnabled: boolean;
    /**
     * 会话保持的超时时间，取值范围为1～3600秒，默认1000秒
     */
    readonly sessionPersistenceTimeout: number;
    /**
     * 服务器组的状态
     */
    readonly status: string;
    /**
     * 标签
     */
    readonly tags: outputs.clb.GetNlbServerGroupTag[];
    /**
     * 是否开启清除TCP/HTTP/HTTPS报文的timestamp（即时间戳）的功能
     */
    readonly timestampRemoveEnabled: boolean;
    /**
     * 服务器组的类型
     */
    readonly type: string;
    /**
     * 后端服务器组的更新时间
     */
    readonly updatedTime: string;
    /**
     * 服务器组所属私有网络的ID。
     */
    readonly vpcId: string;
}
/**
 * Data Source schema for Volcengine::CLB::NLBServerGroup
 */
export function getNlbServerGroupOutput(args: GetNlbServerGroupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetNlbServerGroupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("volcenginecc:clb/getNlbServerGroup:getNlbServerGroup", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getNlbServerGroup.
 */
export interface GetNlbServerGroupOutputArgs {
    /**
     * Uniquely identifies the resource.
     */
    id: pulumi.Input<string>;
}
