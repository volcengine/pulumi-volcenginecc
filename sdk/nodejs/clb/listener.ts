// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * 监听器负责根据指定的协议和端口，监听CLB实例接收到的用户访问请求。CLB将按照该监听器配置的调度算法，将访问请求转发至该后端服务器组内健康的后端服务器。
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:clb/listener:Listener example "listener_id"
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:clb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     */
    public readonly aclIds!: pulumi.Output<string[]>;
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     */
    public readonly aclStatus!: pulumi.Output<string>;
    /**
     * 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     */
    public readonly aclType!: pulumi.Output<string>;
    /**
     * 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     */
    public readonly bandwidth!: pulumi.Output<number>;
    /**
     * 双向认证的CA证书。
     */
    public readonly caCertificateId!: pulumi.Output<string>;
    /**
     * 是否开启双向认证。on：开启。off（默认值）：不开启。
     */
    public readonly caEnabled!: pulumi.Output<string>;
    /**
     * 证书中心的证书的ID。
     */
    public readonly certCenterCertificateId!: pulumi.Output<string>;
    /**
     * CLB侧证书管理模块的证书的ID。
     */
    public readonly certificateId!: pulumi.Output<string>;
    /**
     * 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     */
    public readonly certificateSource!: pulumi.Output<string>;
    /**
     * 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     */
    public readonly clientBodyTimeout!: pulumi.Output<number>;
    /**
     * 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    public readonly clientHeaderTimeout!: pulumi.Output<number>;
    /**
     * 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     */
    public readonly connectionDrainEnabled!: pulumi.Output<string>;
    /**
     * 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     */
    public readonly connectionDrainTimeout!: pulumi.Output<number>;
    /**
     * 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     */
    public readonly cookie!: pulumi.Output<string>;
    /**
     * 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     */
    public readonly cps!: pulumi.Output<number>;
    /**
     * 监听器的创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 是否启用监听器。on（默认值）：开启。off：不开启。
     */
    public readonly enabled!: pulumi.Output<string>;
    /**
     * 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     */
    public readonly endPort!: pulumi.Output<number>;
    /**
     * 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     */
    public readonly establishedTimeout!: pulumi.Output<number>;
    /**
     * 健康检查相关信息。
     */
    public readonly healthCheck!: pulumi.Output<outputs.clb.ListenerHealthCheck>;
    /**
     * 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     */
    public readonly http2Enabled!: pulumi.Output<string>;
    /**
     * 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    public readonly keepaliveTimeout!: pulumi.Output<number>;
    /**
     * 监听器的ID。
     */
    public /*out*/ readonly listenerId!: pulumi.Output<string>;
    /**
     * 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     */
    public readonly listenerName!: pulumi.Output<string>;
    /**
     * CLB实例的ID。
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     */
    public readonly maxConnections!: pulumi.Output<number>;
    /**
     * 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     */
    public readonly persistenceTimeout!: pulumi.Output<number>;
    /**
     * 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     */
    public readonly persistenceType!: pulumi.Output<string>;
    /**
     * 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * 监听器的协议。
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    public readonly proxyConnectTimeout!: pulumi.Output<number>;
    /**
     * 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     */
    public readonly proxyProtocolType!: pulumi.Output<string>;
    /**
     * CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    public readonly proxyReadTimeout!: pulumi.Output<number>;
    /**
     * CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    public readonly proxySendTimeout!: pulumi.Output<number>;
    /**
     * 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     */
    public readonly scheduler!: pulumi.Output<string>;
    /**
     * HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     */
    public readonly securityPolicyId!: pulumi.Output<string>;
    /**
     * CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    public readonly sendTimeout!: pulumi.Output<number>;
    /**
     * 监听器关联的后端服务器组 ID。
     */
    public readonly serverGroupId!: pulumi.Output<string>;
    /**
     * 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     */
    public readonly startPort!: pulumi.Output<number>;
    /**
     * 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<outputs.clb.ListenerTag[]>;
    /**
     * 监听器最近一次的操作时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;
    /**
     * 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     */
    public /*out*/ readonly wafProtectionEnabled!: pulumi.Output<string>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["aclIds"] = state ? state.aclIds : undefined;
            resourceInputs["aclStatus"] = state ? state.aclStatus : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["caEnabled"] = state ? state.caEnabled : undefined;
            resourceInputs["certCenterCertificateId"] = state ? state.certCenterCertificateId : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["certificateSource"] = state ? state.certificateSource : undefined;
            resourceInputs["clientBodyTimeout"] = state ? state.clientBodyTimeout : undefined;
            resourceInputs["clientHeaderTimeout"] = state ? state.clientHeaderTimeout : undefined;
            resourceInputs["connectionDrainEnabled"] = state ? state.connectionDrainEnabled : undefined;
            resourceInputs["connectionDrainTimeout"] = state ? state.connectionDrainTimeout : undefined;
            resourceInputs["cookie"] = state ? state.cookie : undefined;
            resourceInputs["cps"] = state ? state.cps : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["endPort"] = state ? state.endPort : undefined;
            resourceInputs["establishedTimeout"] = state ? state.establishedTimeout : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["http2Enabled"] = state ? state.http2Enabled : undefined;
            resourceInputs["keepaliveTimeout"] = state ? state.keepaliveTimeout : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["listenerName"] = state ? state.listenerName : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["maxConnections"] = state ? state.maxConnections : undefined;
            resourceInputs["persistenceTimeout"] = state ? state.persistenceTimeout : undefined;
            resourceInputs["persistenceType"] = state ? state.persistenceType : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["proxyConnectTimeout"] = state ? state.proxyConnectTimeout : undefined;
            resourceInputs["proxyProtocolType"] = state ? state.proxyProtocolType : undefined;
            resourceInputs["proxyReadTimeout"] = state ? state.proxyReadTimeout : undefined;
            resourceInputs["proxySendTimeout"] = state ? state.proxySendTimeout : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["securityPolicyId"] = state ? state.securityPolicyId : undefined;
            resourceInputs["sendTimeout"] = state ? state.sendTimeout : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
            resourceInputs["startPort"] = state ? state.startPort : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
            resourceInputs["wafProtectionEnabled"] = state ? state.wafProtectionEnabled : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.serverGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["aclIds"] = args ? args.aclIds : undefined;
            resourceInputs["aclStatus"] = args ? args.aclStatus : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["caEnabled"] = args ? args.caEnabled : undefined;
            resourceInputs["certCenterCertificateId"] = args ? args.certCenterCertificateId : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["certificateSource"] = args ? args.certificateSource : undefined;
            resourceInputs["clientBodyTimeout"] = args ? args.clientBodyTimeout : undefined;
            resourceInputs["clientHeaderTimeout"] = args ? args.clientHeaderTimeout : undefined;
            resourceInputs["connectionDrainEnabled"] = args ? args.connectionDrainEnabled : undefined;
            resourceInputs["connectionDrainTimeout"] = args ? args.connectionDrainTimeout : undefined;
            resourceInputs["cookie"] = args ? args.cookie : undefined;
            resourceInputs["cps"] = args ? args.cps : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["endPort"] = args ? args.endPort : undefined;
            resourceInputs["establishedTimeout"] = args ? args.establishedTimeout : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["http2Enabled"] = args ? args.http2Enabled : undefined;
            resourceInputs["keepaliveTimeout"] = args ? args.keepaliveTimeout : undefined;
            resourceInputs["listenerName"] = args ? args.listenerName : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["maxConnections"] = args ? args.maxConnections : undefined;
            resourceInputs["persistenceTimeout"] = args ? args.persistenceTimeout : undefined;
            resourceInputs["persistenceType"] = args ? args.persistenceType : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["proxyConnectTimeout"] = args ? args.proxyConnectTimeout : undefined;
            resourceInputs["proxyProtocolType"] = args ? args.proxyProtocolType : undefined;
            resourceInputs["proxyReadTimeout"] = args ? args.proxyReadTimeout : undefined;
            resourceInputs["proxySendTimeout"] = args ? args.proxySendTimeout : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["securityPolicyId"] = args ? args.securityPolicyId : undefined;
            resourceInputs["sendTimeout"] = args ? args.sendTimeout : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["startPort"] = args ? args.startPort : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["listenerId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
            resourceInputs["wafProtectionEnabled"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     */
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     */
    aclType?: pulumi.Input<string>;
    /**
     * 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * 双向认证的CA证书。
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * 是否开启双向认证。on：开启。off（默认值）：不开启。
     */
    caEnabled?: pulumi.Input<string>;
    /**
     * 证书中心的证书的ID。
     */
    certCenterCertificateId?: pulumi.Input<string>;
    /**
     * CLB侧证书管理模块的证书的ID。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     */
    certificateSource?: pulumi.Input<string>;
    /**
     * 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     */
    clientBodyTimeout?: pulumi.Input<number>;
    /**
     * 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    clientHeaderTimeout?: pulumi.Input<number>;
    /**
     * 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     */
    connectionDrainEnabled?: pulumi.Input<string>;
    /**
     * 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     */
    connectionDrainTimeout?: pulumi.Input<number>;
    /**
     * 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     */
    cookie?: pulumi.Input<string>;
    /**
     * 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     */
    cps?: pulumi.Input<number>;
    /**
     * 监听器的创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否启用监听器。on（默认值）：开启。off：不开启。
     */
    enabled?: pulumi.Input<string>;
    /**
     * 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     */
    endPort?: pulumi.Input<number>;
    /**
     * 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     */
    establishedTimeout?: pulumi.Input<number>;
    /**
     * 健康检查相关信息。
     */
    healthCheck?: pulumi.Input<inputs.clb.ListenerHealthCheck>;
    /**
     * 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     */
    http2Enabled?: pulumi.Input<string>;
    /**
     * 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    keepaliveTimeout?: pulumi.Input<number>;
    /**
     * 监听器的ID。
     */
    listenerId?: pulumi.Input<string>;
    /**
     * 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     */
    listenerName?: pulumi.Input<string>;
    /**
     * CLB实例的ID。
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     */
    persistenceTimeout?: pulumi.Input<number>;
    /**
     * 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     */
    port?: pulumi.Input<number>;
    /**
     * 监听器的协议。
     */
    protocol?: pulumi.Input<string>;
    /**
     * CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    proxyConnectTimeout?: pulumi.Input<number>;
    /**
     * 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     */
    proxyProtocolType?: pulumi.Input<string>;
    /**
     * CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    proxyReadTimeout?: pulumi.Input<number>;
    /**
     * CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    proxySendTimeout?: pulumi.Input<number>;
    /**
     * 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     */
    scheduler?: pulumi.Input<string>;
    /**
     * HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    sendTimeout?: pulumi.Input<number>;
    /**
     * 监听器关联的后端服务器组 ID。
     */
    serverGroupId?: pulumi.Input<string>;
    /**
     * 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     */
    startPort?: pulumi.Input<number>;
    /**
     * 监听器的状态。Creating：创建中。Active：运行中。Deleting: 删除中。Disabled: 已停用。
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<pulumi.Input<inputs.clb.ListenerTag>[]>;
    /**
     * 监听器最近一次的操作时间。
     */
    updatedTime?: pulumi.Input<string>;
    /**
     * 是否将经过七层监听器的流量送至Web应用防火墙进行检测和过滤。on：是。off：否。
     */
    wafProtectionEnabled?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * 监听器绑定的访问控制策略组ID。仅AclStatus参数为on时返回。
     */
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * 是否开启访问控制功能。取值如下：on：开启。off（默认值）：不开启。
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * 访问控制的方式。white：白名单。black：黑名单。仅AclStatus参数为on时，本参数有效。
     */
    aclType?: pulumi.Input<string>;
    /**
     * 监听器的带宽上限，即此监听器独占CLB实例的带宽，单位为Mbps。-1（默认值）：此监听器不独占CLB的带，与其他监听器共享CLB实例未被独占的带宽。取值范围：1～CLB实例未被独占的带宽。
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * 双向认证的CA证书。
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * 是否开启双向认证。on：开启。off（默认值）：不开启。
     */
    caEnabled?: pulumi.Input<string>;
    /**
     * 证书中心的证书的ID。
     */
    certCenterCertificateId?: pulumi.Input<string>;
    /**
     * CLB侧证书管理模块的证书的ID。
     */
    certificateId?: pulumi.Input<string>;
    /**
     * 证书的来源。clb (默认)：CLB上传的证书。cert_center：证书中心上传的证书。user：用户上传的证书。
     */
    certificateSource?: pulumi.Input<string>;
    /**
     * 读取客户端请求正文的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个请求的传输过程。取值范围为 30-120秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效
     */
    clientBodyTimeout?: pulumi.Input<number>;
    /**
     * 读取客户端请求头的超时时间。取值范围为30-120秒。默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    clientHeaderTimeout?: pulumi.Input<number>;
    /**
     * 监听器是否开启连接优雅中断功能。on：开启。off：不开启。参数Protocol返回为HTTP或HTTPS时，该参数固定返回off。
     */
    connectionDrainEnabled?: pulumi.Input<string>;
    /**
     * 连接优雅中断的超时时间，单位为秒。参数ConnectionDrainEnabled返回为off时，该参数返回0。
     */
    connectionDrainTimeout?: pulumi.Input<number>;
    /**
     * 后端服务器配置的会话保持的Cookie名称。仅参数PersistenceType取server时，本参数有效且必填。只能包含字母、数字、下划线（_）和中划线（-）。长度限制在1～200字符之间。
     */
    cookie?: pulumi.Input<string>;
    /**
     * 每秒新建连接数的上限。-1（默认值）：不限制，即CLB实例的新建连接数上限。取值范围：1～CLB实例的新连接数上限。
     */
    cps?: pulumi.Input<number>;
    /**
     * 监听器的描述。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：英文逗号（,）、点（.）、下划线（_）、空格（ ）、等号（=）、中划线（-）、中文逗号（，）、中文句号（。）。长度限制为0 ～ 255个字符。不填则默认值为空字符串。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否启用监听器。on（默认值）：开启。off：不开启。
     */
    enabled?: pulumi.Input<string>;
    /**
     * 全端口监听的结束端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入，且该参数取值应大于tartPort。
     */
    endPort?: pulumi.Input<number>;
    /**
     * 监听器的连接超时时间。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：TCP协议：10-900秒，默认为900秒。UDP协议：1-300秒，默认为90秒。
     */
    establishedTimeout?: pulumi.Input<number>;
    /**
     * 健康检查相关信息。
     */
    healthCheck?: pulumi.Input<inputs.clb.ListenerHealthCheck>;
    /**
     * 监听器是否开启前端HTTP 2.0协议。仅参数`Protocol取HTTPS时，本参数有效。取值如下：|on：开启。off（默认值）：不开启。
     */
    http2Enabled?: pulumi.Input<string>;
    /**
     * 客户端与CLB之间的长连接超时时间。取值范围为 0-900秒，默认为75秒。0表示禁用长连接。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    keepaliveTimeout?: pulumi.Input<number>;
    /**
     * 监听器的名称。必须以字母、数字或中文开头，可包含字母、数字、中文及以下特殊字符：点号（.）、下划线_）和中划线（-）。长度限制在1～128字符之间。不填则默认将“协议-端口”作为监听器名称。
     */
    listenerName?: pulumi.Input<string>;
    /**
     * CLB实例的ID。
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * 最大并发连接数的上限。-1（默认值）：不限制，CLB实例的最大并发连接数上限。取值范围：1～CLB实例的最大并发连接数上限。
     */
    maxConnections?: pulumi.Input<number>;
    /**
     * 会话保持的超时时间，单位为秒。取值范围根据参数PersistenceType取值有所不同。PersistenceType置为source_ip时，取值范围为1～3600。PersistenceType配置为insert时，取值范围为1～86400。
     */
    persistenceTimeout?: pulumi.Input<number>;
    /**
     * 会话保持的类型。取值如下：off（默认值）：不启用会话保持。source_ip：源地址IP，仅参数ProtocolTCP或UDP时，本取值有效。insert：植入Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。server：重写Cookie，仅参数Protocol取HTTP或HTTPS且Scheduler取wrr时，本取值生效。。
     */
    persistenceType?: pulumi.Input<string>;
    /**
     * 监听器接收请求使用的端口。取值范围为 0～65535。参数Protocol为“TCP”或“UDP”时，支持传入0，表示用全端口监听。
     */
    port: pulumi.Input<number>;
    /**
     * 监听器的协议。
     */
    protocol: pulumi.Input<string>;
    /**
     * CLB与后端服务器之间的连接建立超时时间。建议大于健康检查超时时间。取值范围为 4-120秒，默认为4。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    proxyConnectTimeout?: pulumi.Input<number>;
    /**
     * 是否启用Proxy-Protocol协议。仅参数Protocol取TCP或UDP时，本参数有效。取值如下：off（默认值）：关闭。standard：开启。
     */
    proxyProtocolType?: pulumi.Input<string>;
    /**
     * CLB从后端服务器读取响应的超时时间。此超时时间仅针对两个连续的读操作之间设置，而非整个响应的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    proxyReadTimeout?: pulumi.Input<number>;
    /**
     * CLB将请求传输到后端服务器的超时时间。此超时仅针对两个连续的写操作之间设置，而非整个请求的传输过程。取值范围为30-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    proxySendTimeout?: pulumi.Input<number>;
    /**
     * 监听器使用的调度算法。wrr（默认值）：加权轮询。wlc：加权最小连接数。sh：源地址哈希。
     */
    scheduler?: pulumi.Input<string>;
    /**
     * HTTPS监听器的TLS安全策略。仅参数Protocol取HTTPS时，本参数有效。 取值如下：default*policy（默认值）：支持SSL v3、TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*0：支持TLS v1.0、TLS v1.1、TLS v1.2。tls*cipher*policy*1*1：支持TLS v1.1、TLS v1.2。tls*cipher*policy*1*2：支持TLS v1.2。tls*cipher*policy*1*2*strict：支持TLS v1.2。
     */
    securityPolicyId?: pulumi.Input<string>;
    /**
     * CLB向客户端发送响应的超时时间。此超时仅针对两个连续的写操作之间设置，而非整响应的传输过程。取值范围为 1-3600秒，默认为60秒。仅参数Protocol取HTTP或HTTPS时，本参数有效。
     */
    sendTimeout?: pulumi.Input<number>;
    /**
     * 监听器关联的后端服务器组 ID。
     */
    serverGroupId: pulumi.Input<string>;
    /**
     * 全端口监听的起始端口，取值范围为1-65535。参数Port为“0”时，该参数必须传入。
     */
    startPort?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.clb.ListenerTag>[]>;
}
