// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * API 网关支持基于容器服务（VKE）集和容器服务的注册集群功能，将集群导入到 API 网关实例，将其作为网关的 Upstream 来源，以便网关获取集群中的 Service 列表。
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:apig/upstreamSource:UpstreamSource example "upstream_source_id"
 * ```
 */
export class UpstreamSource extends pulumi.CustomResource {
    /**
     * Get an existing UpstreamSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UpstreamSourceState, opts?: pulumi.CustomResourceOptions): UpstreamSource {
        return new UpstreamSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:apig/upstreamSource:UpstreamSource';

    /**
     * Returns true if the given object is an instance of UpstreamSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UpstreamSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UpstreamSource.__pulumiType;
    }

    /**
     * 备注，长度限制为0~253个字符。
     */
    public readonly comments!: pulumi.Output<string>;
    /**
     * 创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 网关实例ID。
     */
    public readonly gatewayId!: pulumi.Output<string>;
    /**
     * 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     */
    public readonly ingressSettings!: pulumi.Output<outputs.apig.UpstreamSourceIngressSettings>;
    /**
     * Upstream来源配置。
     */
    public readonly sourceSpec!: pulumi.Output<outputs.apig.UpstreamSourceSourceSpec>;
    /**
     * Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
     */
    public /*out*/ readonly statusMessage!: pulumi.Output<string>;
    /**
     * 更新时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;
    /**
     * Upstream来源ID。
     */
    public /*out*/ readonly upstreamSourceId!: pulumi.Output<string>;
    /**
     * 指定命名空间。
     */
    public readonly watchNamespaces!: pulumi.Output<string[]>;

    /**
     * Create a UpstreamSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UpstreamSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UpstreamSourceArgs | UpstreamSourceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UpstreamSourceState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["gatewayId"] = state ? state.gatewayId : undefined;
            resourceInputs["ingressSettings"] = state ? state.ingressSettings : undefined;
            resourceInputs["sourceSpec"] = state ? state.sourceSpec : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["statusMessage"] = state ? state.statusMessage : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
            resourceInputs["upstreamSourceId"] = state ? state.upstreamSourceId : undefined;
            resourceInputs["watchNamespaces"] = state ? state.watchNamespaces : undefined;
        } else {
            const args = argsOrState as UpstreamSourceArgs | undefined;
            if ((!args || args.gatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'gatewayId'");
            }
            if ((!args || args.sourceSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceSpec'");
            }
            if ((!args || args.sourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceType'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["gatewayId"] = args ? args.gatewayId : undefined;
            resourceInputs["ingressSettings"] = args ? args.ingressSettings : undefined;
            resourceInputs["sourceSpec"] = args ? args.sourceSpec : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["watchNamespaces"] = args ? args.watchNamespaces : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["statusMessage"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
            resourceInputs["upstreamSourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UpstreamSource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UpstreamSource resources.
 */
export interface UpstreamSourceState {
    /**
     * 备注，长度限制为0~253个字符。
     */
    comments?: pulumi.Input<string>;
    /**
     * 创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 网关实例ID。
     */
    gatewayId?: pulumi.Input<string>;
    /**
     * 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     */
    ingressSettings?: pulumi.Input<inputs.apig.UpstreamSourceIngressSettings>;
    /**
     * Upstream来源配置。
     */
    sourceSpec?: pulumi.Input<inputs.apig.UpstreamSourceSourceSpec>;
    /**
     * Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     */
    sourceType?: pulumi.Input<string>;
    /**
     * 导入状态，取值：Syncing：导入中。SyncedSucceed：导入成功。SyncedFailed：导入失败。
     */
    status?: pulumi.Input<string>;
    /**
     * 导入状态信息，取值：ConnectionFailed：Nacos集群无法连接。AuthenticationFailed：认证失败。PermissionFailed：Nacos集群无法连接。
     */
    statusMessage?: pulumi.Input<string>;
    /**
     * 更新时间。
     */
    updatedTime?: pulumi.Input<string>;
    /**
     * Upstream来源ID。
     */
    upstreamSourceId?: pulumi.Input<string>;
    /**
     * 指定命名空间。
     */
    watchNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a UpstreamSource resource.
 */
export interface UpstreamSourceArgs {
    /**
     * 备注，长度限制为0~253个字符。
     */
    comments?: pulumi.Input<string>;
    /**
     * 网关实例ID。
     */
    gatewayId: pulumi.Input<string>;
    /**
     * 路由同步。开启后，API网关会自动监听Ingress资源的变化，并将Ingress资源转义为服务，域名，Upstream等资源合并至当前网关。由Ingress转义的资源不支持在控制台操作。仅支持容器集群来源类型。
     */
    ingressSettings?: pulumi.Input<inputs.apig.UpstreamSourceIngressSettings>;
    /**
     * Upstream来源配置。
     */
    sourceSpec: pulumi.Input<inputs.apig.UpstreamSourceSourceSpec>;
    /**
     * Upstream来源类型，取值：K8S：容器集群。Nacos：注册中心。
     */
    sourceType: pulumi.Input<string>;
    /**
     * 指定命名空间。
     */
    watchNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
}
