// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Import
 *
 * ```sh
 * $ pulumi import volcenginecc:tls/topic:Topic example "topic_id"
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcenginecc:tls/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    public readonly archiveTtl!: pulumi.Output<number>;
    /**
     * 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     */
    public readonly autoSplit!: pulumi.Output<boolean>;
    /**
     * 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    public readonly coldTtl!: pulumi.Output<number>;
    /**
     * 日志主题创建时间。
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * 日志主题描述信息。不支持 <>、'、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     */
    public readonly enableHotTtl!: pulumi.Output<boolean>;
    /**
     * 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     */
    public readonly enableTracking!: pulumi.Output<boolean>;
    /**
     * 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    public readonly hotTtl!: pulumi.Output<number>;
    /**
     * 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     */
    public readonly logPublicIp!: pulumi.Output<boolean>;
    /**
     * 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     */
    public readonly maxSplitShard!: pulumi.Output<number>;
    /**
     * 日志主题所属的日志项目 ID。
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     */
    public readonly shardCount!: pulumi.Output<number>;
    public readonly tags!: pulumi.Output<outputs.tls.TopicTag[]>;
    /**
     * 时间格式
     */
    public readonly timeFormat!: pulumi.Output<string>;
    /**
     * 时间字段名
     */
    public readonly timeKey!: pulumi.Output<string>;
    /**
     * 日志主题 ID。
     */
    public /*out*/ readonly topicId!: pulumi.Output<string>;
    /**
     * 日志主题名称。
     */
    public readonly topicName!: pulumi.Output<string>;
    /**
     * 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * 日志主题修改时间。
     */
    public /*out*/ readonly updatedTime!: pulumi.Output<string>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["archiveTtl"] = state ? state.archiveTtl : undefined;
            resourceInputs["autoSplit"] = state ? state.autoSplit : undefined;
            resourceInputs["coldTtl"] = state ? state.coldTtl : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableHotTtl"] = state ? state.enableHotTtl : undefined;
            resourceInputs["enableTracking"] = state ? state.enableTracking : undefined;
            resourceInputs["hotTtl"] = state ? state.hotTtl : undefined;
            resourceInputs["logPublicIp"] = state ? state.logPublicIp : undefined;
            resourceInputs["maxSplitShard"] = state ? state.maxSplitShard : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeFormat"] = state ? state.timeFormat : undefined;
            resourceInputs["timeKey"] = state ? state.timeKey : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["updatedTime"] = state ? state.updatedTime : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.shardCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCount'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["archiveTtl"] = args ? args.archiveTtl : undefined;
            resourceInputs["autoSplit"] = args ? args.autoSplit : undefined;
            resourceInputs["coldTtl"] = args ? args.coldTtl : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableHotTtl"] = args ? args.enableHotTtl : undefined;
            resourceInputs["enableTracking"] = args ? args.enableTracking : undefined;
            resourceInputs["hotTtl"] = args ? args.hotTtl : undefined;
            resourceInputs["logPublicIp"] = args ? args.logPublicIp : undefined;
            resourceInputs["maxSplitShard"] = args ? args.maxSplitShard : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeFormat"] = args ? args.timeFormat : undefined;
            resourceInputs["timeKey"] = args ? args.timeKey : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["topicId"] = undefined /*out*/;
            resourceInputs["updatedTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    archiveTtl?: pulumi.Input<number>;
    /**
     * 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    coldTtl?: pulumi.Input<number>;
    /**
     * 日志主题创建时间。
     */
    createdTime?: pulumi.Input<string>;
    /**
     * 日志主题描述信息。不支持 <>、'、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     */
    enableHotTtl?: pulumi.Input<boolean>;
    /**
     * 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     */
    enableTracking?: pulumi.Input<boolean>;
    /**
     * 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    hotTtl?: pulumi.Input<number>;
    /**
     * 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     */
    logPublicIp?: pulumi.Input<boolean>;
    /**
     * 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     */
    maxSplitShard?: pulumi.Input<number>;
    /**
     * 日志主题所属的日志项目 ID。
     */
    projectId?: pulumi.Input<string>;
    /**
     * 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     */
    shardCount?: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.tls.TopicTag>[]>;
    /**
     * 时间格式
     */
    timeFormat?: pulumi.Input<string>;
    /**
     * 时间字段名
     */
    timeKey?: pulumi.Input<string>;
    /**
     * 日志主题 ID。
     */
    topicId?: pulumi.Input<string>;
    /**
     * 日志主题名称。
     */
    topicName?: pulumi.Input<string>;
    /**
     * 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     */
    ttl?: pulumi.Input<number>;
    /**
     * 日志主题修改时间。
     */
    updatedTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * 归档存储时长。该时长取值范围为 60~3650。满足如下任一条件时，可实现归档存储。标准存储时长 30 天及以上。标准存储时长 7 天及以上且低频存储时长 30 天及以上。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    archiveTtl?: pulumi.Input<number>;
    /**
     * 是否开启分区的自动分裂功能。true：当写入的数据量连续 5 分钟超过已有分区服务能力时，日志服务会根据数据量自动分裂分区以满足业务需求，但分裂后的分区数量不可超出最大分裂数。最近 15 分钟内分裂出来的新分区不会自动分裂。false：不开启分区的自动分裂。
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * 低频存储时长。该时长取值范围为 30~3650。标准存储时长 7 天及以上可实现低频存储。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    coldTtl?: pulumi.Input<number>;
    /**
     * 日志主题描述信息。不支持 <>、'、\、\、所有 emoji 表情符号。长度为 0~64 个字符。
     */
    description?: pulumi.Input<string>;
    /**
     * 是否开启分层存储。开启后，日志服务支持标准存储、低频存储和归档存储。设置 HotTtl、ArchiveTtl、ColdTtl 后，如果数据存储时间超过对应时长，那么数据会自动沉降至低频存储、归档存储进行后续保存，直到日志采集到服务端的总时长达到 Ttl 时，被后端服务自动清理。
     */
    enableHotTtl?: pulumi.Input<boolean>;
    /**
     * 是否开启 WebTracking 功能，开启后，可以通过 WebTracking 快速采集前端埋点数据。true：开启 WebTracking功能。false：（默认）关闭 WebTracking 功能。为日志主题开启 Web Tracking 后，通过 API 接口 WebTracks 写入数据时无需经过鉴权，相当于面向公网开放了匿名写入权限，可能产生脏数据。
     */
    enableTracking?: pulumi.Input<boolean>;
    /**
     * 标准存储时长。该时长默认为 30 天，取值范围为 7~3650。此参数仅在 EnableHotTtl 为 true 时生效。
     */
    hotTtl?: pulumi.Input<number>;
    /**
     * 是否开启记录外网 IP 功能。默认为开启状态。开启后日志服务会自动在日志内容中添加以下元数据字段。**tag****client_ip**：日志来源设备的公网 IP 地址。使用日志服务的私网域名写入日志数据时，则记录私网 IP 地址。**tag****receive_time**：日志达到服务端的时间，格式为 10 位的 Unixtime 时间戳。
     */
    logPublicIp?: pulumi.Input<boolean>;
    /**
     * 分区的最大分裂数，即分区分裂后，所有分区的最大数量。取值范围为 1~256，默认为 256。仅在开启自动分裂日志分区，即 AutoSplit 为 true 时必选。MaxSplitShard 必须大于指定的 ShardCount，否则日志服务无法自动分裂分区。
     */
    maxSplitShard?: pulumi.Input<number>;
    /**
     * 日志主题所属的日志项目 ID。
     */
    projectId: pulumi.Input<string>;
    /**
     * 日志分区的数量，默认创建 1 个分区，取值范围为 1～10。 每个分区提供的写入能力为 5MiB/s、500 次/s，读取能力为 20 MiB/s、100 次/s。请在创建日志主题时合理规划分区，创建后暂不支持修改分区数量。
     */
    shardCount: pulumi.Input<number>;
    tags?: pulumi.Input<pulumi.Input<inputs.tls.TopicTag>[]>;
    /**
     * 时间格式
     */
    timeFormat?: pulumi.Input<string>;
    /**
     * 时间字段名
     */
    timeKey?: pulumi.Input<string>;
    /**
     * 日志主题名称。
     */
    topicName: pulumi.Input<string>;
    /**
     * 日志在日志服务中的总保存时间，超过指定的日志存储时长后，此日志主题中的过期日志会被自动清除。单位为天，默认为 30 天。取值范围为 1～3650，指定为 3650 天表示永久存储。
     */
    ttl?: pulumi.Input<number>;
}
